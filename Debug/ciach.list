
ciach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001317c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08013320  08013320  00023320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013908  08013908  000304a4  2**0
                  CONTENTS
  4 .ARM          00000000  08013908  08013908  000304a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013908  08013908  000304a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013908  08013908  00023908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801390c  0801390c  0002390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  08013910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  200004a4  08013db4  000304a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  08013db4  00030c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f10  00000000  00000000  000304d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004315  00000000  00000000  000583e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c8  00000000  00000000  0005c700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d0  00000000  00000000  0005e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ade  00000000  00000000  0005f898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac01  00000000  00000000  00086376  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd548  00000000  00000000  000a0f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e4bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008190  00000000  00000000  0017e53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a4 	.word	0x200004a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013304 	.word	0x08013304

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a8 	.word	0x200004a8
 80001dc:	08013304 	.word	0x08013304

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f001 fdb4 	bl	8002874 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 fb79 	bl	8001408 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d22:	2305      	movs	r3, #5
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f002 fc1a 	bl	800356c <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 fb63 	bl	8001408 <Error_Handler>
  }

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004cc 	.word	0x200004cc
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d154      	bne.n	8000e20 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a2c      	ldr	r2, [pc, #176]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_Pin;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SHARP_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f003 f9c4 	bl	8004148 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_ADC_MspInit+0xe0>)
 8000dc4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_DISABLE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dea:	2220      	movs	r2, #32
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000df6:	f003 f880 	bl	8003efa <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000e00:	f000 fb02 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f003 f83a 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f003 f853 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	2000051c 	.word	0x2000051c
 8000e34:	40020408 	.word	0x40020408

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2038      	movs	r0, #56	; 0x38
 8000e5c:	f003 f817 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000e60:	2038      	movs	r0, #56	; 0x38
 8000e62:	f003 f830 	bl	8003ec6 <HAL_NVIC_EnableIRQ>

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a3c      	ldr	r2, [pc, #240]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <MX_GPIO_Init+0x124>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f003 fab3 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|SHIFT_CLK_Pin|SHIFT_SER_Pin
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f64f 011e 	movw	r1, #63518	; 0xf81e
 8000efc:	4827      	ldr	r0, [pc, #156]	; (8000f9c <MX_GPIO_Init+0x128>)
 8000efe:	f003 faad 	bl	800445c <HAL_GPIO_WritePin>
                          |SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin|DIR_MOTOR2_A_Pin
                          |DIR_MOTOR2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <MX_GPIO_Init+0x12c>)
 8000f1a:	f003 f915 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f1e:	2320      	movs	r3, #32
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f003 f906 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO1_TOF2_Pin;
 8000f3c:	2330      	movs	r3, #48	; 0x30
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <MX_GPIO_Init+0x12c>)
 8000f50:	f003 f8fa 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|SHIFT_CLK_Pin|SHIFT_SER_Pin
 8000f54:	f64f 031e 	movw	r3, #63518	; 0xf81e
 8000f58:	617b      	str	r3, [r7, #20]
                          |SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin|DIR_MOTOR2_A_Pin
                          |DIR_MOTOR2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x128>)
 8000f6e:	f003 f8eb 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_GPIO_Init+0x12c>)
 8000f8a:	f003 f8dd 	bl	8004148 <HAL_GPIO_Init>

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_I2C2_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MX_I2C2_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fb0:	f240 220b 	movw	r2, #523	; 0x20b
 8000fb4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_I2C2_Init+0x74>)
 8000fe2:	f003 fa53 	bl	800448c <HAL_I2C_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fec:	f000 fa0c 	bl	8001408 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_I2C2_Init+0x74>)
 8000ff4:	f004 fa92 	bl	800551c <HAL_I2CEx_ConfigAnalogFilter>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ffe:	f000 fa03 	bl	8001408 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_I2C2_Init+0x74>)
 8001006:	f004 fad4 	bl	80055b2 <HAL_I2CEx_ConfigDigitalFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 f9fa 	bl	8001408 <Error_Handler>
  }

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200005ac 	.word	0x200005ac
 800101c:	40005800 	.word	0x40005800

08001020 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C3_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_I2C3_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_I2C3_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <MX_I2C3_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_I2C3_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_I2C3_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C3_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C3_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_I2C3_Init+0x74>)
 800105c:	f003 fa16 	bl	800448c <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 f9cf 	bl	8001408 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_I2C3_Init+0x74>)
 800106e:	f004 fa55 	bl	800551c <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 f9c6 	bl	8001408 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2C3_Init+0x74>)
 8001080:	f004 fa97 	bl	80055b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f9bd 	bl	8001408 <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000560 	.word	0x20000560
 8001098:	40007800 	.word	0x40007800
 800109c:	2000090e 	.word	0x2000090e

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <HAL_I2C_MspInit+0x114>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d128      	bne.n	8001114 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GYRO_TOF_SDA_Pin|GYRO_TOF_SCL_Pin;
 80010da:	2303      	movs	r3, #3
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010de:	2312      	movs	r3, #18
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4831      	ldr	r0, [pc, #196]	; (80011bc <HAL_I2C_MspInit+0x11c>)
 80010f6:	f003 f827 	bl	8004148 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001112:	e04b      	b.n	80011ac <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_I2C_MspInit+0x120>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d146      	bne.n	80011ac <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOF2_SDA_Pin;
 800114e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001160:	2303      	movs	r3, #3
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x124>)
 800116c:	f002 ffec 	bl	8004148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOF2_SCL_Pin;
 8001170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001182:	2303      	movs	r3, #3
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f002 ffda 	bl	8004148 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 800119a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800119e:	61d3      	str	r3, [r2, #28]
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_I2C_MspInit+0x118>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
}
 80011ac:	bf00      	nop
 80011ae:	3730      	adds	r7, #48	; 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40005800 	.word	0x40005800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48001400 	.word	0x48001400
 80011c0:	40007800 	.word	0x40007800
 80011c4:	48000800 	.word	0x48000800

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	msg_t *msg = (msg_t *)malloc(sizeof(msg_t));
 80011ce:	2034      	movs	r0, #52	; 0x34
 80011d0:	f00c fac2 	bl	800d758 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f001 fab0 	bl	800273c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f882 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f7ff fe48 	bl	8000e74 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e4:	f7ff fe28 	bl	8000e38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011e8:	f000 ffd6 	bl	8002198 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80011ec:	f7ff fd54 	bl	8000c98 <MX_ADC2_Init>
  MX_I2C2_Init();
 80011f0:	f7ff fed8 	bl	8000fa4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80011f4:	f7ff ff14 	bl	8001020 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 fffe 	bl	80021f8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80011fc:	f000 fe7e 	bl	8001efc <MX_TIM4_Init>
  MX_TIM2_Init();
 8001200:	f000 fdd2 	bl	8001da8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001204:	f000 fe24 	bl	8001e50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  MPU6050_Init();
 8001208:	f000 f9d8 	bl	80015bc <MPU6050_Init>
  VL53L0X_Init();
 800120c:	f001 f8ae 	bl	800236c <VL53L0X_Init>

  VL53L0X_Init2();
 8001210:	f001 f95e 	bl	80024d0 <VL53L0X_Init2>
  HAL_ADC_Start_IT(&hadc2);
 8001214:	482d      	ldr	r0, [pc, #180]	; (80012cc <main+0x104>)
 8001216:	f001 fd27 	bl	8002c68 <HAL_ADC_Start_IT>
  MOTOR1_init();
 800121a:	f000 f8fd 	bl	8001418 <MOTOR1_init>
  MOTOR2_init();
 800121e:	f000 f963 	bl	80014e8 <MOTOR2_init>
  uint8_t speed = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	77fb      	strb	r3, [r7, #31]
//  HAL_ADC_Start_DMA(&hadc2, &adc_measurement, 1);
//  HAL_TIM_Base_Start(&htim1);
  //SHARP_Init();


  HAL_ADC_Start_IT(&hadc2);
 8001226:	4829      	ldr	r0, [pc, #164]	; (80012cc <main+0x104>)
 8001228:	f001 fd1e 	bl	8002c68 <HAL_ADC_Start_IT>
//  HAL_ADC_Start_DMA(&hadc2, &adc_measurement, 1);
  HAL_TIM_Base_Start(&htim4);
 800122c:	4828      	ldr	r0, [pc, #160]	; (80012d0 <main+0x108>)
 800122e:	f005 fd77 	bl	8006d20 <HAL_TIM_Base_Start>

  //SHARP_Init();


  	  int  counter_value1 = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  	  int past_counter_value1 = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  	  float angle_value1 = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]

  	  int  counter_value2 = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  	  	  int past_counter_value2 = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  	  	  float angle_value2 = 0;
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
  while (1)
  {
//	  if(speed>500)
//		  speed = 0;

	  speed++;
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	3301      	adds	r3, #1
 8001252:	77fb      	strb	r3, [r7, #31]
	//	   HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  msg_t_SaveData(&msg);
//	  msg_t_Transmit(&msg);
//      HAL_Delay(300);
	  //dist = get_distance();
	  HAL_ADC_Start_IT(&hadc2);
 8001254:	481d      	ldr	r0, [pc, #116]	; (80012cc <main+0x104>)
 8001256:	f001 fd07 	bl	8002c68 <HAL_ADC_Start_IT>
	  msg->sharp_distance=adc_value;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <main+0x10c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	811a      	strh	r2, [r3, #8]
	  msg->speed1 = speed;
 8001264:	7ffb      	ldrb	r3, [r7, #31]
 8001266:	b21a      	sxth	r2, r3
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	829a      	strh	r2, [r3, #20]

	  sharp=msg->sharp_distance;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	891a      	ldrh	r2, [r3, #8]
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <main+0x110>)
 8001272:	801a      	strh	r2, [r3, #0]
	  roll=msg->roll;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <main+0x114>)
 800127a:	6013      	str	r3, [r2, #0]
	  pitch=msg->pitch;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0x118>)
 8001282:	6013      	str	r3, [r2, #0]
//	  printf("jprdl\n");



	   MOTOR1_read_wheel_angle(&(msg->encoder1));
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	3318      	adds	r3, #24
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f913 	bl	80014b4 <MOTOR1_read_wheel_angle>
	   MOTOR2_read_wheel_angle(&(msg->encoder2));
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	331c      	adds	r3, #28
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f976 	bl	8001584 <MOTOR2_read_wheel_angle>
	   calculate_position(&(msg->x), &(msg->y),&(msg->angle), msg);
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f000 fc10 	bl	8001ad0 <calculate_position>

	  msg_t_SaveData(msg);
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f000 fbe7 	bl	8001a84 <msg_t_SaveData>
	  msg_t_Transmit(msg);
 80012b6:	69b8      	ldr	r0, [r7, #24]
 80012b8:	f000 fba8 	bl	8001a0c <msg_t_Transmit>
	// msg_t_Transmit(&msg);
//  MPU6050_ReadAccelerometerScaled(&acc_x, &acc_y, &acc_z);
//  printf("a_x: %fg, a_y: %fg,a_z: %fg\r\n",acc_x, acc_y, acc_z);
//  MPU6050_ReadAccelerometerRaw(&a_x, &a_y, &a_z);

	  HAL_ADC_Start_IT(&hadc2);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <main+0x104>)
 80012be:	f001 fcd3 	bl	8002c68 <HAL_ADC_Start_IT>





HAL_Delay(100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f001 faa0 	bl	8002808 <HAL_Delay>
  {
 80012c8:	e7c1      	b.n	800124e <main+0x86>
 80012ca:	bf00      	nop
 80012cc:	200004cc 	.word	0x200004cc
 80012d0:	2000064c 	.word	0x2000064c
 80012d4:	20000620 	.word	0x20000620
 80012d8:	20000638 	.word	0x20000638
 80012dc:	20000630 	.word	0x20000630
 80012e0:	2000062c 	.word	0x2000062c

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a6      	sub	sp, #152	; 0x98
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00c fa43 	bl	800d77e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2258      	movs	r2, #88	; 0x58
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00c fa35 	bl	800d77e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001342:	4618      	mov	r0, r3
 8001344:	f004 f982 	bl	800564c <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134e:	f000 f85b 	bl	8001408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f005 f882 	bl	8006478 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137a:	f000 f845 	bl	8001408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <SystemClock_Config+0xd8>)
 8001380:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001398:	2300      	movs	r3, #0
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800139c:	2300      	movs	r3, #0
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fa9e 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80013ae:	f000 f82b 	bl	8001408 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3798      	adds	r7, #152	; 0x98
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	003400c6 	.word	0x003400c6

080013c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc2) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_ConvCpltCallback+0x24>
		adc_flag = 1;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_ADC_ConvCpltCallback+0x3c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(&hadc2);
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80013d8:	f001 fd86 	bl	8002ee8 <HAL_ADC_GetValue>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_ADC_ConvCpltCallback+0x40>)
 80013e2:	801a      	strh	r2, [r3, #0]
	}

//	if (hadc == &hadc2) {
//		adc_measurement = 1;
		distance_cm = HAL_ADC_GetValue(&hadc2);
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80013e6:	f001 fd7f 	bl	8002ee8 <HAL_ADC_GetValue>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_ADC_ConvCpltCallback+0x44>)
 80013ee:	601a      	str	r2, [r3, #0]
//	}

}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200004cc 	.word	0x200004cc
 80013fc:	20000618 	.word	0x20000618
 8001400:	20000620 	.word	0x20000620
 8001404:	20000634 	.word	0x20000634

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */


  /* USER CODE END Error_Handler_Debug */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <MOTOR1_init>:
 *      Authors: Szymon Wesołowski, Michał Suski
 */

#include "motor.h"

void MOTOR1_init(){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	MOTOR1_set_dir(CW);
 800141c:	2000      	movs	r0, #0
 800141e:	f000 f811 	bl	8001444 <MOTOR1_set_dir>
	MOTOR1_set_speed(0);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f834 	bl	8001490 <MOTOR1_set_speed>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001428:	213c      	movs	r1, #60	; 0x3c
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <MOTOR1_init+0x24>)
 800142c:	f005 feea 	bl	8007204 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001430:	2100      	movs	r1, #0
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MOTOR1_init+0x28>)
 8001434:	f005 fd34 	bl	8006ea0 <HAL_TIM_PWM_Start>

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200006e4 	.word	0x200006e4
 8001440:	2000064c 	.word	0x2000064c

08001444 <MOTOR1_set_dir>:
void MOTOR1_set_dir(MOTOR_dir dir){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	if(dir==CW){
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <MOTOR1_set_dir+0x24>
		HAL_GPIO_WritePin(DIR_MOTOR1_A_GPIO_Port, DIR_MOTOR1_A_Pin, SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2102      	movs	r1, #2
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <MOTOR1_set_dir+0x48>)
 800145a:	f002 ffff 	bl	800445c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_MOTOR1_B_GPIO_Port, DIR_MOTOR1_B_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2104      	movs	r1, #4
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <MOTOR1_set_dir+0x48>)
 8001464:	f002 fffa 	bl	800445c <HAL_GPIO_WritePin>
	}
	if(dir==CCW){
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d109      	bne.n	8001482 <MOTOR1_set_dir+0x3e>
		HAL_GPIO_WritePin(DIR_MOTOR1_A_GPIO_Port, DIR_MOTOR1_A_Pin, RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2102      	movs	r1, #2
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MOTOR1_set_dir+0x48>)
 8001474:	f002 fff2 	bl	800445c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_MOTOR1_B_GPIO_Port, DIR_MOTOR1_B_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2104      	movs	r1, #4
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <MOTOR1_set_dir+0x48>)
 800147e:	f002 ffed 	bl	800445c <HAL_GPIO_WritePin>
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400

08001490 <MOTOR1_set_speed>:


void MOTOR1_set_speed(uint8_t speed){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]

//	if(speed>=htim4.Instance->ARR)
//		speed = htim4.Instance->ARR;

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, speed);
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MOTOR1_set_speed+0x20>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000064c 	.word	0x2000064c

080014b4 <MOTOR1_read_wheel_angle>:

void MOTOR1_read_wheel_angle(float *angle){
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	  int counter_value = TIM2->CNT;
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	60fb      	str	r3, [r7, #12]

//	  if(counter_value1 != past_counter_value1){
		  *angle = (360.0f/(960.0f*2))*((float)counter_value);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	eeb4 7a08 	vmov.f32	s14, #72	; 0x3e400000  0.1875000
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edc3 7a00 	vstr	s15, [r3]
//	  }
		   	//  past_counter_value1=counter_value1;
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <MOTOR2_init>:


void MOTOR2_init(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	MOTOR2_set_dir(CW);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f811 	bl	8001514 <MOTOR2_set_dir>
	MOTOR2_set_speed(0);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f834 	bl	8001560 <MOTOR2_set_speed>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80014f8:	213c      	movs	r1, #60	; 0x3c
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <MOTOR2_init+0x24>)
 80014fc:	f005 fe82 	bl	8007204 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001500:	2104      	movs	r1, #4
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <MOTOR2_init+0x28>)
 8001504:	f005 fccc 	bl	8006ea0 <HAL_TIM_PWM_Start>

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000698 	.word	0x20000698
 8001510:	2000064c 	.word	0x2000064c

08001514 <MOTOR2_set_dir>:
void MOTOR2_set_dir(MOTOR_dir dir){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	if(dir==CW){
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <MOTOR2_set_dir+0x24>
		HAL_GPIO_WritePin(DIR_MOTOR2_A_GPIO_Port, DIR_MOTOR2_A_Pin, SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2108      	movs	r1, #8
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MOTOR2_set_dir+0x48>)
 800152a:	f002 ff97 	bl	800445c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_MOTOR2_B_GPIO_Port, DIR_MOTOR2_B_Pin, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2110      	movs	r1, #16
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <MOTOR2_set_dir+0x48>)
 8001534:	f002 ff92 	bl	800445c <HAL_GPIO_WritePin>
	}
	if(dir==CCW){
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d109      	bne.n	8001552 <MOTOR2_set_dir+0x3e>
		HAL_GPIO_WritePin(DIR_MOTOR2_A_GPIO_Port, DIR_MOTOR2_A_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2108      	movs	r1, #8
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MOTOR2_set_dir+0x48>)
 8001544:	f002 ff8a 	bl	800445c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_MOTOR2_B_GPIO_Port, DIR_MOTOR2_B_Pin, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <MOTOR2_set_dir+0x48>)
 800154e:	f002 ff85 	bl	800445c <HAL_GPIO_WritePin>
	}
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	48000400 	.word	0x48000400

08001560 <MOTOR2_set_speed>:


void MOTOR2_set_speed(uint8_t speed){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]

//	if(speed>=htim4.Instance->ARR)
//		speed = htim4.Instance->ARR;

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MOTOR2_set_speed+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000064c 	.word	0x2000064c

08001584 <MOTOR2_read_wheel_angle>:

void MOTOR2_read_wheel_angle(float *angle){
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	  int counter_value = TIM3->CNT;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MOTOR2_read_wheel_angle+0x34>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	60fb      	str	r3, [r7, #12]

//	  if(counter_value1 != past_counter_value1){
		  *angle = (360.0f/(960.0f*2))*((float)counter_value);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	eeb4 7a08 	vmov.f32	s14, #72	; 0x3e400000  0.1875000
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
//	  }
		   	//  past_counter_value1=counter_value1;
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40000400 	.word	0x40000400

080015bc <MPU6050_Init>:
#define I2C_TIMEOUT 10

float acc_scale;
float gyr_scale;

void MPU6050_Init(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af04      	add	r7, sp, #16
	  // try to connect once, timeout 100 ms
	  HAL_I2C_IsDeviceReady(&hi2c2,MPU6050_ADDRESS, 1, I2C_TIMEOUT);
 80015c2:	230a      	movs	r3, #10
 80015c4:	2201      	movs	r2, #1
 80015c6:	21d0      	movs	r1, #208	; 0xd0
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MPU6050_Init+0x40>)
 80015ca:	f003 fc07 	bl	8004ddc <HAL_I2C_IsDeviceReady>

	  MPU6050_SelectGyrscopeAccelerometerRatio(AFS_SEL_ACC_2G, FS_SEL_GYRO_250);
 80015ce:	2100      	movs	r1, #0
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f849 	bl	8001668 <MPU6050_SelectGyrscopeAccelerometerRatio>
	  // EXIT SLEEP MODE
	  uint8_t select_data = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &select_data, 1, I2C_TIMEOUT);
 80015da:	230a      	movs	r3, #10
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	2301      	movs	r3, #1
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	226b      	movs	r2, #107	; 0x6b
 80015ea:	21d0      	movs	r1, #208	; 0xd0
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <MPU6050_Init+0x40>)
 80015ee:	f003 f9c7 	bl	8004980 <HAL_I2C_Mem_Write>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200005ac 	.word	0x200005ac

08001600 <MPU6050_ReadAccelerometerRaw>:

void MPU6050_ReadAccelerometerRaw(int16_t *x, int16_t *y, int16_t *z){
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af04      	add	r7, sp, #16
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, data, 6, I2C_TIMEOUT);
 800160c:	230a      	movs	r3, #10
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2306      	movs	r3, #6
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	223b      	movs	r2, #59	; 0x3b
 800161e:	21d0      	movs	r1, #208	; 0xd0
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MPU6050_ReadAccelerometerRaw+0x64>)
 8001622:	f003 fac1 	bl	8004ba8 <HAL_I2C_Mem_Read>

	*x = ((int16_t)data[0] << 8) | data[1];
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7c7b      	ldrb	r3, [r7, #17]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t)data[2] << 8) | data[3];
 8001638:	7cbb      	ldrb	r3, [r7, #18]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21a      	sxth	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t)data[4] << 8) | data[5];
 800164a:	7d3b      	ldrb	r3, [r7, #20]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7d7b      	ldrb	r3, [r7, #21]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	801a      	strh	r2, [r3, #0]

}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200005ac 	.word	0x200005ac

08001668 <MPU6050_SelectGyrscopeAccelerometerRatio>:
	*y = ((int16_t)data[2] << 8) | data[3];
	*z = ((int16_t)data[4] << 8) | data[5];

}

void MPU6050_SelectGyrscopeAccelerometerRatio(uint8_t acc_range, uint8_t gyro_range){
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af04      	add	r7, sp, #16
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	  // GYRO CONFIG
	  uint8_t select_data = FS_SEL_GYRO_500;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,GYRO_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 800167c:	230a      	movs	r3, #10
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	f107 030f 	add.w	r3, r7, #15
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	221b      	movs	r2, #27
 800168e:	21d0      	movs	r1, #208	; 0xd0
 8001690:	482a      	ldr	r0, [pc, #168]	; (800173c <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 8001692:	f003 f975 	bl	8004980 <HAL_I2C_Mem_Write>

	  // ACCEL CONFIG
	  select_data =  AFS_SEL_ACC_4G;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,ACCEL_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 800169a:	230a      	movs	r3, #10
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030f 	add.w	r3, r7, #15
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	221c      	movs	r2, #28
 80016ac:	21d0      	movs	r1, #208	; 0xd0
 80016ae:	4823      	ldr	r0, [pc, #140]	; (800173c <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 80016b0:	f003 f966 	bl	8004980 <HAL_I2C_Mem_Write>

	switch(gyro_range){
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d81e      	bhi.n	80016f8 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x58>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016db 	.word	0x080016db
 80016c8:	080016e5 	.word	0x080016e5
 80016cc:	080016ef 	.word	0x080016ef
		// LSB SENSITIVITY - LSB/g - register map of device
		case 0:
			acc_scale = 16384.f;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80016d2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80016d6:	601a      	str	r2, [r3, #0]
			break;
 80016d8:	e00e      	b.n	80016f8 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 1:
			acc_scale = 8192.f;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80016dc:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80016e0:	601a      	str	r2, [r3, #0]
			break;
 80016e2:	e009      	b.n	80016f8 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 2:
			acc_scale = 4096.f;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80016e6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80016ea:	601a      	str	r2, [r3, #0]
			break;
 80016ec:	e004      	b.n	80016f8 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 3:
			acc_scale = 2048.f;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80016f0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80016f4:	601a      	str	r2, [r3, #0]
			break;
 80016f6:	bf00      	nop
	}

	switch(acc_range){
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d81a      	bhi.n	8001734 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <MPU6050_SelectGyrscopeAccelerometerRatio+0x9c>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001715 	.word	0x08001715
 8001708:	0800171d 	.word	0x0800171d
 800170c:	08001725 	.word	0x08001725
 8001710:	0800172d 	.word	0x0800172d

		case 0:
			gyr_scale = 131.f;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe0>)
 8001718:	601a      	str	r2, [r3, #0]
			break;
 800171a:	e00b      	b.n	8001734 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 1:
			gyr_scale = 65.5f;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <MPU6050_SelectGyrscopeAccelerometerRatio+0xe4>)
 8001720:	601a      	str	r2, [r3, #0]
			break;
 8001722:	e007      	b.n	8001734 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 2:
			gyr_scale = 32.8f;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe8>)
 8001728:	601a      	str	r2, [r3, #0]
			break;
 800172a:	e003      	b.n	8001734 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 3:
			gyr_scale = 16.4f;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <MPU6050_SelectGyrscopeAccelerometerRatio+0xec>)
 8001730:	601a      	str	r2, [r3, #0]
			break;
 8001732:	bf00      	nop
		}

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200005ac 	.word	0x200005ac
 8001740:	20000644 	.word	0x20000644
 8001744:	20000640 	.word	0x20000640
 8001748:	43030000 	.word	0x43030000
 800174c:	42830000 	.word	0x42830000
 8001750:	42033333 	.word	0x42033333
 8001754:	41833333 	.word	0x41833333

08001758 <MPU6050_ReadAccelerometerScaled>:
	*x = (float)gyr_x / gyr_scale;
	*y = (float)gyr_y / gyr_scale;
	*z = (float)gyr_z / gyr_scale;
}

void MPU6050_ReadAccelerometerScaled(float *x, float *y, float *z){
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int16_t acc_x, acc_y, acc_z;
	MPU6050_ReadAccelerometerRaw(&acc_x, &acc_y, &acc_z);
 8001764:	f107 0212 	add.w	r2, r7, #18
 8001768:	f107 0114 	add.w	r1, r7, #20
 800176c:	f107 0316 	add.w	r3, r7, #22
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff45 	bl	8001600 <MPU6050_ReadAccelerometerRaw>

	*x = ((float)acc_x) / acc_scale;
 8001776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MPU6050_ReadAccelerometerScaled+0x7c>)
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	edc3 7a00 	vstr	s15, [r3]
	*y = ((float)acc_y) / acc_scale;
 8001792:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MPU6050_ReadAccelerometerScaled+0x7c>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	edc3 7a00 	vstr	s15, [r3]
	*z = ((float)acc_z) / acc_scale;
 80017ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MPU6050_ReadAccelerometerScaled+0x7c>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edc3 7a00 	vstr	s15, [r3]
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000644 	.word	0x20000644

080017d8 <MPU6050_GetRP>:

void MPU6050_GetRP(float *r, float *p){
 80017d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	float a_x, a_y, a_z;
	MPU6050_ReadAccelerometerScaled(&a_x, &a_y, &a_z);
 80017e4:	f107 020c 	add.w	r2, r7, #12
 80017e8:	f107 0110 	add.w	r1, r7, #16
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ffb1 	bl	8001758 <MPU6050_ReadAccelerometerScaled>

	*r = atan2(a_y, a_z) * 180.0 / M_PI;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fead 	bl	8000558 <__aeabi_f2d>
 80017fe:	4680      	mov	r8, r0
 8001800:	4689      	mov	r9, r1
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ec43 2b11 	vmov	d1, r2, r3
 8001812:	ec49 8b10 	vmov	d0, r8, r9
 8001816:	f010 fa17 	bl	8011c48 <atan2>
 800181a:	ec51 0b10 	vmov	r0, r1, d0
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <MPU6050_GetRP+0x128>)
 8001824:	f7fe fef0 	bl	8000608 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a331      	add	r3, pc, #196	; (adr r3, 80018f8 <MPU6050_GetRP+0x120>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f811 	bl	800085c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9d9 	bl	8000bf8 <__aeabi_d2f>
 8001846:	4602      	mov	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
	*p = -(atan2(a_x, sqrt(a_y*a_y + a_z*a_z)) * 180.0) / M_PI;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe82 	bl	8000558 <__aeabi_f2d>
 8001854:	4680      	mov	r8, r0
 8001856:	4689      	mov	r9, r1
 8001858:	ed97 7a04 	vldr	s14, [r7, #16]
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001864:	edd7 6a03 	vldr	s13, [r7, #12]
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe6e 	bl	8000558 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	ec43 2b10 	vmov	d0, r2, r3
 8001884:	f010 f9e2 	bl	8011c4c <sqrt>
 8001888:	eeb0 7a40 	vmov.f32	s14, s0
 800188c:	eef0 7a60 	vmov.f32	s15, s1
 8001890:	eeb0 1a47 	vmov.f32	s2, s14
 8001894:	eef0 1a67 	vmov.f32	s3, s15
 8001898:	ec49 8b10 	vmov	d0, r8, r9
 800189c:	f010 f9d4 	bl	8011c48 <atan2>
 80018a0:	ec51 0b10 	vmov	r0, r1, d0
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MPU6050_GetRP+0x128>)
 80018aa:	f7fe fead 	bl	8000608 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4614      	mov	r4, r2
 80018b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018b8:	a30f      	add	r3, pc, #60	; (adr r3, 80018f8 <MPU6050_GetRP+0x120>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe ffcb 	bl	800085c <__aeabi_ddiv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	4618      	mov	r0, r3
 80018cc:	4621      	mov	r1, r4
 80018ce:	f7ff f993 	bl	8000bf8 <__aeabi_d2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	601a      	str	r2, [r3, #0]

	*r+=180;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001904 <MPU6050_GetRP+0x12c>
 80018e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edc3 7a00 	vstr	s15, [r3]


}
 80018ec:	bf00      	nop
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018f6:	bf00      	nop
 80018f8:	54442d18 	.word	0x54442d18
 80018fc:	400921fb 	.word	0x400921fb
 8001900:	40668000 	.word	0x40668000
 8001904:	43340000 	.word	0x43340000

08001908 <SHARP_get_distance>:
#include "sharp.h"
//https://www.arduinopak.com/Prd_Detail.aspx?Prd_ID=20041


void SHARP_get_distance(uint16_t *sharp_distance){
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if(*sharp_distance ==0)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00c      	beq.n	8001932 <SHARP_get_distance+0x2a>
		return;
	*sharp_distance = (37376/(*sharp_distance)) - 4;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	f44f 4312 	mov.w	r3, #37376	; 0x9200
 8001922:	fb93 f3f2 	sdiv	r3, r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b04      	subs	r3, #4
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	e000      	b.n	8001934 <SHARP_get_distance+0x2c>
		return;
 8001932:	bf00      	nop
}
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001976:	2007      	movs	r0, #7
 8001978:	f002 fa7e 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019dc:	f000 fef4 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <ADC1_2_IRQHandler+0x10>)
 80019ea:	f001 fa8b 	bl	8002f04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004cc 	.word	0x200004cc

080019f8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA2_Channel1_IRQHandler+0x10>)
 80019fe:	f002 fac3 	bl	8003f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000051c 	.word	0x2000051c

08001a0c <msg_t_Transmit>:
#include "stm_esp_transfer.h"
int tof1_distance, tof2_distance;
void msg_t_Transmit(msg_t *msg){
 8001a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a10:	b08c      	sub	sp, #48	; 0x30
 8001a12:	af08      	add	r7, sp, #32
 8001a14:	60f8      	str	r0, [r7, #12]
//	memcpy(buffer, msg, sizeof(msg));


	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer,sizeof(buffer),10);
//	HAL_UART_Transmit(&huart2, array,sizeof(array),10);
	printf("encoder 1,2: %f:%f, x: %f cm y: %f cm, r_ang %frad\r\n",msg->encoder1, msg->encoder2,msg->x , msg->y, msg->angle);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd9c 	bl	8000558 <__aeabi_f2d>
 8001a20:	e9c7 0100 	strd	r0, r1, [r7]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd8e 	bl	8000558 <__aeabi_f2d>
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	4689      	mov	r9, r1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd87 	bl	8000558 <__aeabi_f2d>
 8001a4a:	4682      	mov	sl, r0
 8001a4c:	468b      	mov	fp, r1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a60:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a64:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a68:	e9cd 4500 	strd	r4, r5, [sp]
 8001a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <msg_t_Transmit+0x74>)
 8001a72:	f00c fd73 	bl	800e55c <iprintf>
	//printf("%f %f %d %d %d %f %f\r\n", msg->roll, msg->pitch, msg->sharp_distance, msg->tof1_distance, msg->tof2_distance, msg->encoder1, msg->encoder2);
//	printf("SSa %d, %d, %d\r\n", msg->roll, msg->pitch, msg->sharp_distance, msg->tof1_distance, msg->tof2_distance);
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a80:	08013320 	.word	0x08013320

08001a84 <msg_t_SaveData>:

void msg_t_SaveData(msg_t *msg){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

// MPU6050_GetRP(&(msg->pitch), &(msg->roll));
// msg->sharp_distance = 30;
// VL53L0X_MeasureDistance(&(msg->tof2_distance));
// VL53L0X_MeasureDistance(&(msg->tof1_distance));
	  MPU6050_GetRP(&(msg->pitch), &(msg->roll));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe9f 	bl	80017d8 <MPU6050_GetRP>
	  SHARP_get_distance(&(msg->sharp_distance));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff32 	bl	8001908 <SHARP_get_distance>
      VL53L0X_MeasureDistance2(&tof2_distance);
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <msg_t_SaveData+0x44>)
 8001aa6:	f000 fdf1 	bl	800268c <VL53L0X_MeasureDistance2>
	  VL53L0X_MeasureDistance(&tof1_distance);
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <msg_t_SaveData+0x48>)
 8001aac:	f000 fdc2 	bl	8002634 <VL53L0X_MeasureDistance>
      msg->tof1_distance = tof1_distance;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <msg_t_SaveData+0x48>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
	  msg->tof2_distance = tof2_distance;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <msg_t_SaveData+0x44>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]

}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200005f8 	.word	0x200005f8
 8001acc:	20000648 	.word	0x20000648

08001ad0 <calculate_position>:


void calculate_position(float *x, float *y, float* angle, msg_t *msg){
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]

	float wheel_diameter = 6.5; // cm
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <calculate_position+0x198>)
 8001ae0:	61fb      	str	r3, [r7, #28]
	float wheel_distance = 20.3; // cm
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <calculate_position+0x19c>)
 8001ae4:	61bb      	str	r3, [r7, #24]

	float distance_R = (msg->encoder2)*((wheel_diameter*M_PI)/360.0f);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	69f8      	ldr	r0, [r7, #28]
 8001af6:	f7fe fd2f 	bl	8000558 <__aeabi_f2d>
 8001afa:	a359      	add	r3, pc, #356	; (adr r3, 8001c60 <calculate_position+0x190>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fd82 	bl	8000608 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <calculate_position+0x1a0>)
 8001b12:	f7fe fea3 	bl	800085c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fd73 	bl	8000608 <__aeabi_dmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f865 	bl	8000bf8 <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	617b      	str	r3, [r7, #20]
	float distance_L = (msg->encoder1)*((wheel_diameter*M_PI)/360.0f);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	69f8      	ldr	r0, [r7, #28]
 8001b42:	f7fe fd09 	bl	8000558 <__aeabi_f2d>
 8001b46:	a346      	add	r3, pc, #280	; (adr r3, 8001c60 <calculate_position+0x190>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fd5c 	bl	8000608 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <calculate_position+0x1a0>)
 8001b5e:	f7fe fe7d 	bl	800085c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f7fe fd4d 	bl	8000608 <__aeabi_dmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7ff f83f 	bl	8000bf8 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]

	*angle = (distance_R-distance_L)/wheel_distance;
 8001b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	*x = ((distance_R+distance_L)/2)*cos(*angle/2);
 8001b98:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ba8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bac:	ee16 0a90 	vmov	r0, s13
 8001bb0:	f7fe fcd2 	bl	8000558 <__aeabi_f2d>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	460d      	mov	r5, r1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001bc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bc6:	ee16 0a90 	vmov	r0, s13
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b10 	vmov	d0, r2, r3
 8001bd6:	f00f ffab 	bl	8011b30 <cos>
 8001bda:	ec53 2b10 	vmov	r2, r3, d0
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fd11 	bl	8000608 <__aeabi_dmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	4618      	mov	r0, r3
 8001bec:	4621      	mov	r1, r4
 8001bee:	f7ff f803 	bl	8000bf8 <__aeabi_d2f>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
	*y = ((distance_R+distance_L)/2)*sin(*angle/2);
 8001bf8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c0c:	ee16 0a90 	vmov	r0, s13
 8001c10:	f7fe fca2 	bl	8000558 <__aeabi_f2d>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c26:	ee16 0a90 	vmov	r0, s13
 8001c2a:	f7fe fc95 	bl	8000558 <__aeabi_f2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	ec43 2b10 	vmov	d0, r2, r3
 8001c36:	f00f ffbf 	bl	8011bb8 <sin>
 8001c3a:	ec53 2b10 	vmov	r2, r3, d0
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fce1 	bl	8000608 <__aeabi_dmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	f7fe ffd3 	bl	8000bf8 <__aeabi_d2f>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	601a      	str	r2, [r3, #0]



}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	54442d18 	.word	0x54442d18
 8001c64:	400921fb 	.word	0x400921fb
 8001c68:	40d00000 	.word	0x40d00000
 8001c6c:	41a26666 	.word	0x41a26666
 8001c70:	40768000 	.word	0x40768000

08001c74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
	}

return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_isatty>:

int _isatty(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f00b fcdc 	bl	800d704 <__errno>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	230c      	movs	r3, #12
 8001d50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20010000 	.word	0x20010000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	200004c0 	.word	0x200004c0
 8001d80:	20000c70 	.word	0x20000c70

08001d84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00b fce1 	bl	800d77e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df6:	2301      	movs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001e1a:	f005 f94d 	bl	80070b8 <HAL_TIM_Encoder_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001e24:	f7ff faf0 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001e36:	f005 ff51 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001e40:	f7ff fae2 	bl	8001408 <Error_Handler>
  }

}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200006e4 	.word	0x200006e4

08001e50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00b fc8d 	bl	800d77e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	463b      	mov	r3, r7
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <MX_TIM3_Init+0xa8>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eac:	2301      	movs	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001ec0:	f005 f8fa 	bl	80070b8 <HAL_TIM_Encoder_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001eca:	f7ff fa9d 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_TIM3_Init+0xa4>)
 8001edc:	f005 fefe 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ee6:	f7ff fa8f 	bl	8001408 <Error_Handler>
  }

}
 8001eea:	bf00      	nop
 8001eec:	3730      	adds	r7, #48	; 0x30
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000698 	.word	0x20000698
 8001ef8:	40000400 	.word	0x40000400

08001efc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	615a      	str	r2, [r3, #20]
 8001f1e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <MX_TIM4_Init+0xc8>)
 8001f24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f46:	481e      	ldr	r0, [pc, #120]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f48:	f004 ff52 	bl	8006df0 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001f52:	f7ff fa59 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f66:	f005 feb9 	bl	8007cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001f70:	f7ff fa4a 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f74:	2360      	movs	r3, #96	; 0x60
 8001f76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001f8c:	f005 f9c8 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f96:	f7ff fa37 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001fa2:	f005 f9bd 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001fac:	f7ff fa2c 	bl	8001408 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM4_Init+0xc4>)
 8001fb2:	f000 f8b9 	bl	8002128 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000064c 	.word	0x2000064c
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d129      	bne.n	800203e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fea:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a35      	ldr	r2, [pc, #212]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	6153      	str	r3, [r2, #20]
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800201a:	2303      	movs	r3, #3
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202a:	2301      	movs	r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f002 f886 	bl	8004148 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800203c:	e049      	b.n	80020d2 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d144      	bne.n	80020d2 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	61d3      	str	r3, [r2, #28]
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206a:	6153      	str	r3, [r2, #20]
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 800207e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002082:	6153      	str	r3, [r2, #20]
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_TIM_Encoder_MspInit+0x114>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002090:	2310      	movs	r3, #16
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a0:	2302      	movs	r3, #2
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f002 f84b 	bl	8004148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c2:	2302      	movs	r3, #2
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80020ce:	f002 f83b 	bl	8004148 <HAL_GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	48000800 	.word	0x48000800

080020e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_TIM_PWM_MspInit+0x38>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10b      	bne.n	8002112 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_TIM_PWM_MspInit+0x3c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_TIM_PWM_MspInit+0x3c>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_TIM_PWM_MspInit+0x3c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40000800 	.word	0x40000800
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_TIM_MspPostInit+0x68>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d11d      	bne.n	8002186 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_TIM_MspPostInit+0x6c>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	6153      	str	r3, [r2, #20]
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_TIM_MspPostInit+0x6c>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_Pin|PWM_MOTOR_2_Pin;
 8002162:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002166:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002174:	230a      	movs	r3, #10
 8002176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f001 ffe1 	bl	8004148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40000800 	.word	0x40000800
 8002194:	40021000 	.word	0x40021000

08002198 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <MX_USART2_UART_Init+0x5c>)
 80021a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021be:	220c      	movs	r2, #12
 80021c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_USART2_UART_Init+0x58>)
 80021dc:	f005 fe0a 	bl	8007df4 <HAL_UART_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021e6:	f7ff f90f 	bl	8001408 <Error_Handler>
  }

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200007b4 	.word	0x200007b4
 80021f4:	40004400 	.word	0x40004400

080021f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_USART3_UART_Init+0x58>)
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <MX_USART3_UART_Init+0x5c>)
 8002200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_USART3_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_USART3_UART_Init+0x58>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_USART3_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_USART3_UART_Init+0x58>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_USART3_UART_Init+0x58>)
 800223c:	f005 fdda 	bl	8007df4 <HAL_UART_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002246:	f7ff f8df 	bl	8001408 <Error_Handler>
  }

}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000730 	.word	0x20000730
 8002254:	40004800 	.word	0x40004800

08002258 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_UART_MspInit+0xdc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d129      	bne.n	80022ce <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_UART_MspInit+0xe0>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <HAL_UART_MspInit+0xe0>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	61d3      	str	r3, [r2, #28]
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_UART_MspInit+0xe0>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_UART_MspInit+0xe0>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_UART_MspInit+0xe0>)
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	6153      	str	r3, [r2, #20]
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022aa:	230c      	movs	r3, #12
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ba:	2307      	movs	r3, #7
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f001 ff3e 	bl	8004148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022cc:	e02d      	b.n	800232a <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_UART_MspInit+0xe4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d128      	bne.n	800232a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e2:	61d3      	str	r3, [r2, #28]
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022fa:	6153      	str	r3, [r2, #20]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_UART_MspInit+0xe0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_TX_Pin|STM_RX_Pin;
 8002308:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800231a:	2307      	movs	r3, #7
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <HAL_UART_MspInit+0xe8>)
 8002326:	f001 ff0f 	bl	8004148 <HAL_GPIO_Init>
}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004400 	.word	0x40004400
 8002338:	40021000 	.word	0x40021000
 800233c:	40004800 	.word	0x40004800
 8002340:	48000800 	.word	0x48000800

08002344 <_write>:

/* USER CODE BEGIN 1 */
/*!
 * Redefiniton of function _write to print things on a serial port
 */
int _write(int file, char *ptr, int len){
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2332      	movs	r3, #50	; 0x32
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <_write+0x24>)
 800235a:	f005 fd99 	bl	8007e90 <HAL_UART_Transmit>
	return len;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200007b4 	.word	0x200007b4

0800236c <VL53L0X_Init>:
uint8_t isApertureSpads2;
uint8_t VhvSettings2;
uint8_t PhaseCal2;


void VL53L0X_Init(){
 800236c:	b598      	push	{r3, r4, r7, lr}
 800236e:	af00      	add	r7, sp, #0



	 /* USER CODE BEGIN 2 */

	  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <VL53L0X_Init+0x138>)
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <VL53L0X_Init+0x13c>)
 8002374:	4614      	mov	r4, r2
 8002376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002378:	6020      	str	r0, [r4, #0]
 800237a:	6061      	str	r1, [r4, #4]
 800237c:	60a2      	str	r2, [r4, #8]
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	789b      	ldrb	r3, [r3, #2]
 8002382:	81a2      	strh	r2, [r4, #12]
 8002384:	73a3      	strb	r3, [r4, #14]
 8002386:	230e      	movs	r3, #14
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <VL53L0X_Init+0x140>)
 800238c:	701a      	strb	r2, [r3, #0]

	  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 800238e:	4a45      	ldr	r2, [pc, #276]	; (80024a4 <VL53L0X_Init+0x138>)
 8002390:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <VL53L0X_Init+0x13c>)
 8002392:	4614      	mov	r4, r2
 8002394:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002396:	6020      	str	r0, [r4, #0]
 8002398:	6061      	str	r1, [r4, #4]
 800239a:	60a2      	str	r2, [r4, #8]
 800239c:	881a      	ldrh	r2, [r3, #0]
 800239e:	789b      	ldrb	r3, [r3, #2]
 80023a0:	81a2      	strh	r2, [r4, #12]
 80023a2:	73a3      	strb	r3, [r4, #14]
 80023a4:	230e      	movs	r3, #14
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <VL53L0X_Init+0x140>)
 80023aa:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <VL53L0X_Init+0x140>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	493b      	ldr	r1, [pc, #236]	; (80024a4 <VL53L0X_Init+0x138>)
 80023b6:	483e      	ldr	r0, [pc, #248]	; (80024b0 <VL53L0X_Init+0x144>)
 80023b8:	f005 fd6a 	bl	8007e90 <HAL_UART_Transmit>

	  Dev->I2cHandle = &hi2c3;
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <VL53L0X_Init+0x148>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <VL53L0X_Init+0x14c>)
 80023c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev->I2cDevAddr = 0x52;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <VL53L0X_Init+0x148>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2252      	movs	r2, #82	; 0x52
 80023cc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d6:	4839      	ldr	r0, [pc, #228]	; (80024bc <VL53L0X_Init+0x150>)
 80023d8:	f002 f840 	bl	800445c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 80023dc:	2014      	movs	r0, #20
 80023de:	f000 fa13 	bl	8002808 <HAL_Delay>
	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_SET); // Enable XSHUT
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e8:	4834      	ldr	r0, [pc, #208]	; (80024bc <VL53L0X_Init+0x150>)
 80023ea:	f002 f837 	bl	800445c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 80023ee:	2014      	movs	r0, #20
 80023f0:	f000 fa0a 	bl	8002808 <HAL_Delay>

	  //
	  // VL53L0X init for Single Measurement
	  //

	  VL53L0X_WaitDeviceBooted( Dev );
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <VL53L0X_Init+0x148>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f006 fc59 	bl	8008cb0 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <VL53L0X_Init+0x148>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f006 f96e 	bl	80086e4 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <VL53L0X_Init+0x148>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f006 facd 	bl	80089ac <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <VL53L0X_Init+0x148>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <VL53L0X_Init+0x154>)
 8002418:	492a      	ldr	r1, [pc, #168]	; (80024c4 <VL53L0X_Init+0x158>)
 800241a:	4618      	mov	r0, r3
 800241c:	f007 f984 	bl	8009728 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <VL53L0X_Init+0x148>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <VL53L0X_Init+0x15c>)
 8002426:	4929      	ldr	r1, [pc, #164]	; (80024cc <VL53L0X_Init+0x160>)
 8002428:	4618      	mov	r0, r3
 800242a:	f007 fe0b 	bl	800a044 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <VL53L0X_Init+0x148>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f006 fcd9 	bl	8008dec <VL53L0X_SetDeviceMode>


	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <VL53L0X_Init+0x148>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f006 ff6a 	bl	800931c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <VL53L0X_Init+0x148>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f006 ff63 	bl	800931c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002456:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <VL53L0X_Init+0x148>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f641 1299 	movw	r2, #6553	; 0x1999
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f007 f80b 	bl	800947c <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <VL53L0X_Init+0x148>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f007 f803 	bl	800947c <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <VL53L0X_Init+0x148>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800247e:	4618      	mov	r0, r3
 8002480:	f006 fd2e 	bl	8008ee0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <VL53L0X_Init+0x148>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2212      	movs	r2, #18
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f006 fd4d 	bl	8008f2c <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <VL53L0X_Init+0x148>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	220e      	movs	r2, #14
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f006 fd46 	bl	8008f2c <VL53L0X_SetVcselPulsePeriod>
	  /* USER CODE END 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd98      	pop	{r3, r4, r7, pc}
 80024a4:	200009f0 	.word	0x200009f0
 80024a8:	08013358 	.word	0x08013358
 80024ac:	200009ec 	.word	0x200009ec
 80024b0:	200007b4 	.word	0x200007b4
 80024b4:	20000004 	.word	0x20000004
 80024b8:	20000560 	.word	0x20000560
 80024bc:	48000400 	.word	0x48000400
 80024c0:	20000a35 	.word	0x20000a35
 80024c4:	20000be4 	.word	0x20000be4
 80024c8:	200009ee 	.word	0x200009ee
 80024cc:	20000a30 	.word	0x20000a30

080024d0 <VL53L0X_Init2>:

void VL53L0X_Init2(){
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	af00      	add	r7, sp, #0



	 /* USER CODE BEGIN 2 */

	  MessageLen = sprintf((char*)Message, "VL53L0X2 test\n\r");
 80024d4:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <VL53L0X_Init2+0x130>)
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <VL53L0X_Init2+0x134>)
 80024d8:	4614      	mov	r4, r2
 80024da:	461d      	mov	r5, r3
 80024dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024de:	6020      	str	r0, [r4, #0]
 80024e0:	6061      	str	r1, [r4, #4]
 80024e2:	60a2      	str	r2, [r4, #8]
 80024e4:	60e3      	str	r3, [r4, #12]
 80024e6:	230f      	movs	r3, #15
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <VL53L0X_Init2+0x138>)
 80024ec:	701a      	strb	r2, [r3, #0]

	  MessageLen = sprintf((char*)Message, "VL53L0X2 test\n\r");
 80024ee:	4a44      	ldr	r2, [pc, #272]	; (8002600 <VL53L0X_Init2+0x130>)
 80024f0:	4b44      	ldr	r3, [pc, #272]	; (8002604 <VL53L0X_Init2+0x134>)
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
 80024f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f8:	6020      	str	r0, [r4, #0]
 80024fa:	6061      	str	r1, [r4, #4]
 80024fc:	60a2      	str	r2, [r4, #8]
 80024fe:	60e3      	str	r3, [r4, #12]
 8002500:	230f      	movs	r3, #15
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <VL53L0X_Init2+0x138>)
 8002506:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, Message2, MessageLen2, 100);
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <VL53L0X_Init2+0x13c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	2364      	movs	r3, #100	; 0x64
 8002510:	493f      	ldr	r1, [pc, #252]	; (8002610 <VL53L0X_Init2+0x140>)
 8002512:	4840      	ldr	r0, [pc, #256]	; (8002614 <VL53L0X_Init2+0x144>)
 8002514:	f005 fcbc 	bl	8007e90 <HAL_UART_Transmit>

	  Dev2->I2cHandle = &hi2c2;
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <VL53L0X_Init2+0x148>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3f      	ldr	r2, [pc, #252]	; (800261c <VL53L0X_Init2+0x14c>)
 800251e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev2->I2cDevAddr = 0x52;
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <VL53L0X_Init2+0x148>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2252      	movs	r2, #82	; 0x52
 8002528:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(XSHUT_TOF1_GPIO_Port, XSHUT_TOF1_Pin, GPIO_PIN_RESET); // Disable XSHUT
 800252c:	2200      	movs	r2, #0
 800252e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002532:	483b      	ldr	r0, [pc, #236]	; (8002620 <VL53L0X_Init2+0x150>)
 8002534:	f001 ff92 	bl	800445c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8002538:	2014      	movs	r0, #20
 800253a:	f000 f965 	bl	8002808 <HAL_Delay>
	  HAL_GPIO_WritePin(XSHUT_TOF1_GPIO_Port, XSHUT_TOF1_Pin, GPIO_PIN_SET); // Enable XSHUT
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002544:	4836      	ldr	r0, [pc, #216]	; (8002620 <VL53L0X_Init2+0x150>)
 8002546:	f001 ff89 	bl	800445c <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 800254a:	2014      	movs	r0, #20
 800254c:	f000 f95c 	bl	8002808 <HAL_Delay>

	  //
	  // VL53L0X init for Single Measurement
	  //

	  VL53L0X_WaitDeviceBooted( Dev2 );
 8002550:	4b31      	ldr	r3, [pc, #196]	; (8002618 <VL53L0X_Init2+0x148>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f006 fbab 	bl	8008cb0 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev2 );
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <VL53L0X_Init2+0x148>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f006 f8c0 	bl	80086e4 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev2 );
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <VL53L0X_Init2+0x148>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f006 fa1f 	bl	80089ac <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev2, &VhvSettings2, &PhaseCal2);
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <VL53L0X_Init2+0x148>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <VL53L0X_Init2+0x154>)
 8002574:	492c      	ldr	r1, [pc, #176]	; (8002628 <VL53L0X_Init2+0x158>)
 8002576:	4618      	mov	r0, r3
 8002578:	f007 f8d6 	bl	8009728 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev2, &refSpadCount2, &isApertureSpads2);
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <VL53L0X_Init2+0x148>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2a      	ldr	r2, [pc, #168]	; (800262c <VL53L0X_Init2+0x15c>)
 8002582:	492b      	ldr	r1, [pc, #172]	; (8002630 <VL53L0X_Init2+0x160>)
 8002584:	4618      	mov	r0, r3
 8002586:	f007 fd5d 	bl	800a044 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev2, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <VL53L0X_Init2+0x148>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f006 fc2b 	bl	8008dec <VL53L0X_SetDeviceMode>


	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <VL53L0X_Init2+0x148>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f006 febc 	bl	800931c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <VL53L0X_Init2+0x148>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f006 feb5 	bl	800931c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev2, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <VL53L0X_Init2+0x148>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f641 1299 	movw	r2, #6553	; 0x1999
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f006 ff5d 	bl	800947c <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev2, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <VL53L0X_Init2+0x148>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f006 ff55 	bl	800947c <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev2, 33000);
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <VL53L0X_Init2+0x148>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80025da:	4618      	mov	r0, r3
 80025dc:	f006 fc80 	bl	8008ee0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <VL53L0X_Init2+0x148>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2212      	movs	r2, #18
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f006 fc9f 	bl	8008f2c <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <VL53L0X_Init2+0x148>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	220e      	movs	r2, #14
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f006 fc98 	bl	8008f2c <VL53L0X_SetVcselPulsePeriod>
	  /* USER CODE END 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	200009f0 	.word	0x200009f0
 8002604:	08013368 	.word	0x08013368
 8002608:	200009ec 	.word	0x200009ec
 800260c:	200009ed 	.word	0x200009ed
 8002610:	20000be8 	.word	0x20000be8
 8002614:	200007b4 	.word	0x200007b4
 8002618:	20000008 	.word	0x20000008
 800261c:	200005ac 	.word	0x200005ac
 8002620:	48000400 	.word	0x48000400
 8002624:	20000be5 	.word	0x20000be5
 8002628:	20000838 	.word	0x20000838
 800262c:	20000a34 	.word	0x20000a34
 8002630:	200009e8 	.word	0x200009e8

08002634 <VL53L0X_MeasureDistance>:

void VL53L0X_MeasureDistance(int *distance){
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <VL53L0X_MeasureDistance+0x44>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <VL53L0X_MeasureDistance+0x48>)
 8002642:	4618      	mov	r0, r3
 8002644:	f007 fb12 	bl	8009c6c <VL53L0X_PerformSingleRangingMeasurement>

		  if(RangingData.RangeStatus == 0)
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <VL53L0X_MeasureDistance+0x48>)
 800264a:	7e1b      	ldrb	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <VL53L0X_MeasureDistance+0x3c>
		  {
			  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <VL53L0X_MeasureDistance+0x48>)
 8002652:	891b      	ldrh	r3, [r3, #8]
 8002654:	461a      	mov	r2, r3
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <VL53L0X_MeasureDistance+0x4c>)
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <VL53L0X_MeasureDistance+0x50>)
 800265a:	f00b ffad 	bl	800e5b8 <siprintf>
 800265e:	4603      	mov	r3, r0
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <VL53L0X_MeasureDistance+0x54>)
 8002664:	701a      	strb	r2, [r3, #0]
			  //HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
			  *distance = RangingData.RangeMilliMeter;
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <VL53L0X_MeasureDistance+0x48>)
 8002668:	891b      	ldrh	r3, [r3, #8]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
		  }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000004 	.word	0x20000004
 800267c:	200009cc 	.word	0x200009cc
 8002680:	08013378 	.word	0x08013378
 8002684:	200009f0 	.word	0x200009f0
 8002688:	200009ec 	.word	0x200009ec

0800268c <VL53L0X_MeasureDistance2>:

void VL53L0X_MeasureDistance2(int *distance){
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	  VL53L0X_PerformSingleRangingMeasurement(Dev2, &RangingData2);
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <VL53L0X_MeasureDistance2+0x44>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <VL53L0X_MeasureDistance2+0x48>)
 800269a:	4618      	mov	r0, r3
 800269c:	f007 fae6 	bl	8009c6c <VL53L0X_PerformSingleRangingMeasurement>

		  if(RangingData.RangeStatus == 0)
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <VL53L0X_MeasureDistance2+0x4c>)
 80026a2:	7e1b      	ldrb	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <VL53L0X_MeasureDistance2+0x3c>
		  {
			  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData2.RangeMilliMeter);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <VL53L0X_MeasureDistance2+0x48>)
 80026aa:	891b      	ldrh	r3, [r3, #8]
 80026ac:	461a      	mov	r2, r3
 80026ae:	490b      	ldr	r1, [pc, #44]	; (80026dc <VL53L0X_MeasureDistance2+0x50>)
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <VL53L0X_MeasureDistance2+0x54>)
 80026b2:	f00b ff81 	bl	800e5b8 <siprintf>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <VL53L0X_MeasureDistance2+0x58>)
 80026bc:	701a      	strb	r2, [r3, #0]
			  //HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
			  *distance = RangingData2.RangeMilliMeter;
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <VL53L0X_MeasureDistance2+0x48>)
 80026c0:	891b      	ldrh	r3, [r3, #8]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
		  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000a38 	.word	0x20000a38
 80026d8:	200009cc 	.word	0x200009cc
 80026dc:	08013378 	.word	0x08013378
 80026e0:	200009f0 	.word	0x200009f0
 80026e4:	200009ec 	.word	0x200009ec

080026e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002720 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ee:	490e      	ldr	r1, [pc, #56]	; (8002728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <LoopForever+0xe>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002704:	4c0b      	ldr	r4, [pc, #44]	; (8002734 <LoopForever+0x16>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002712:	f7ff fb37 	bl	8001d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002716:	f00a fffb 	bl	800d710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800271a:	f7fe fd55 	bl	80011c8 <main>

0800271e <LoopForever>:

LoopForever:
    b LoopForever
 800271e:	e7fe      	b.n	800271e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002720:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002728:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 800272c:	08013910 	.word	0x08013910
  ldr r2, =_sbss
 8002730:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 8002734:	20000c70 	.word	0x20000c70

08002738 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002738:	e7fe      	b.n	8002738 <ADC3_IRQHandler>
	...

0800273c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_Init+0x28>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_Init+0x28>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f001 fb93 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002752:	2000      	movs	r0, #0
 8002754:	f000 f808 	bl	8002768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002758:	f7ff f8f2 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000

08002768 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fbab 	bl	8003ee2 <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f001 fb73 	bl	8003e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000010 	.word	0x20000010
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000010 	.word	0x20000010
 80027ec:	20000c28 	.word	0x20000c28

080027f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000c28 	.word	0x20000c28

08002808 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_Delay+0x40>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000010 	.word	0x20000010

0800284c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b09a      	sub	sp, #104	; 0x68
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e1e3      	b.n	8002c5c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d176      	bne.n	8002994 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d152      	bne.n	8002954 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fe fa43 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13b      	bne.n	8002954 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f001 f995 	bl	8003c0c <ADC_Disable>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d12f      	bne.n	8002954 <HAL_ADC_Init+0xe0>
 80028f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12b      	bne.n	8002954 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002904:	f023 0302 	bic.w	r3, r3, #2
 8002908:	f043 0202 	orr.w	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800291e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800292e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_ADC_Init+0x308>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a92      	ldr	r2, [pc, #584]	; (8002b80 <HAL_ADC_Init+0x30c>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9a      	lsrs	r2, r3, #18
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002946:	e002      	b.n	800294e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3b01      	subs	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800296c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002970:	d110      	bne.n	8002994 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f023 0312 	bic.w	r3, r3, #18
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 8150 	bne.w	8002c42 <HAL_ADC_Init+0x3ce>
 80029a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 814b 	bne.w	8002c42 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8143 	bne.w	8002c42 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_Init+0x16c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6a      	ldr	r2, [pc, #424]	; (8002b84 <HAL_ADC_Init+0x310>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_Init+0x170>
 80029e0:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <HAL_ADC_Init+0x314>)
 80029e2:	e000      	b.n	80029e6 <HAL_ADC_Init+0x172>
 80029e4:	4b69      	ldr	r3, [pc, #420]	; (8002b8c <HAL_ADC_Init+0x318>)
 80029e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f0:	d102      	bne.n	80029f8 <HAL_ADC_Init+0x184>
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_ADC_Init+0x310>)
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e01a      	b.n	8002a2e <HAL_ADC_Init+0x1ba>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_ADC_Init+0x310>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d103      	bne.n	8002a0a <HAL_ADC_Init+0x196>
 8002a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e011      	b.n	8002a2e <HAL_ADC_Init+0x1ba>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a60      	ldr	r2, [pc, #384]	; (8002b90 <HAL_ADC_Init+0x31c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <HAL_ADC_Init+0x1a6>
 8002a14:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <HAL_ADC_Init+0x320>)
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e009      	b.n	8002a2e <HAL_ADC_Init+0x1ba>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5d      	ldr	r2, [pc, #372]	; (8002b94 <HAL_ADC_Init+0x320>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d102      	bne.n	8002a2a <HAL_ADC_Init+0x1b6>
 8002a24:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_ADC_Init+0x31c>)
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e001      	b.n	8002a2e <HAL_ADC_Init+0x1ba>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_ADC_Init+0x1da>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_Init+0x1da>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_ADC_Init+0x1dc>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d11c      	bne.n	8002a8e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_ADC_Init+0x202>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x202>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_Init+0x204>
 8002a76:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7e5b      	ldrb	r3, [r3, #25]
 8002a92:	035b      	lsls	r3, r3, #13
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a98:	2a01      	cmp	r2, #1
 8002a9a:	d002      	beq.n	8002aa2 <HAL_ADC_Init+0x22e>
 8002a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aa0:	e000      	b.n	8002aa4 <HAL_ADC_Init+0x230>
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d11b      	bne.n	8002afa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7e5b      	ldrb	r3, [r3, #25]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	045a      	lsls	r2, r3, #17
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	663b      	str	r3, [r7, #96]	; 0x60
 8002adc:	e00d      	b.n	8002afa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d054      	beq.n	8002bac <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_ADC_Init+0x31c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_ADC_Init+0x2a2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_ADC_Init+0x320>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d140      	bne.n	8002b98 <HAL_ADC_Init+0x324>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b1e:	d02a      	beq.n	8002b76 <HAL_ADC_Init+0x302>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b28:	d022      	beq.n	8002b70 <HAL_ADC_Init+0x2fc>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002b32:	d01a      	beq.n	8002b6a <HAL_ADC_Init+0x2f6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002b3c:	d012      	beq.n	8002b64 <HAL_ADC_Init+0x2f0>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002b46:	d00a      	beq.n	8002b5e <HAL_ADC_Init+0x2ea>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002b50:	d002      	beq.n	8002b58 <HAL_ADC_Init+0x2e4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	e023      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b5c:	e020      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b5e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b62:	e01d      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b64:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b68:	e01a      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b70:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002b74:	e014      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b76:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b7a:	e011      	b.n	8002ba0 <HAL_ADC_Init+0x32c>
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	50000100 	.word	0x50000100
 8002b88:	50000300 	.word	0x50000300
 8002b8c:	50000700 	.word	0x50000700
 8002b90:	50000400 	.word	0x50000400
 8002b94:	50000500 	.word	0x50000500
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d114      	bne.n	8002be4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7e1b      	ldrb	r3, [r3, #24]
 8002bd2:	039a      	lsls	r2, r3, #14
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be0:	4313      	orrs	r3, r2
 8002be2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_ADC_Init+0x3f0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10c      	bne.n	8002c1a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f023 010f 	bic.w	r1, r3, #15
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 020f 	bic.w	r2, r2, #15
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f023 0303 	bic.w	r3, r3, #3
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c40:	e00a      	b.n	8002c58 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f023 0312 	bic.w	r3, r3, #18
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3768      	adds	r7, #104	; 0x68
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	fff0c007 	.word	0xfff0c007

08002c68 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8123 	bne.w	8002eca <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Start_IT+0x2a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e11e      	b.n	8002ed0 <HAL_ADC_Start_IT+0x268>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 ff52 	bl	8003b44 <ADC_Enable>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 810a 	bne.w	8002ec0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_Start_IT+0x6c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a82      	ldr	r2, [pc, #520]	; (8002ed8 <HAL_ADC_Start_IT+0x270>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d106      	bne.n	8002ce2 <HAL_ADC_Start_IT+0x7a>
 8002cd4:	4b81      	ldr	r3, [pc, #516]	; (8002edc <HAL_ADC_Start_IT+0x274>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <HAL_ADC_Start_IT+0x9a>
 8002ce0:	e005      	b.n	8002cee <HAL_ADC_Start_IT+0x86>
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_ADC_Start_IT+0x278>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_ADC_Start_IT+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Start_IT+0x9a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a79      	ldr	r2, [pc, #484]	; (8002ee4 <HAL_ADC_Start_IT+0x27c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d115      	bne.n	8002d2e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d036      	beq.n	8002d8a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d2c:	e02d      	b.n	8002d8a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_Start_IT+0xe6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a63      	ldr	r2, [pc, #396]	; (8002ed8 <HAL_ADC_Start_IT+0x270>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10a      	bne.n	8002d64 <HAL_ADC_Start_IT+0xfc>
 8002d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e008      	b.n	8002d76 <HAL_ADC_Start_IT+0x10e>
 8002d64:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_ADC_Start_IT+0x27c>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	d106      	bne.n	8002da6 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f023 0206 	bic.w	r2, r3, #6
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
 8002da4:	e002      	b.n	8002dac <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	221c      	movs	r2, #28
 8002dba:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d110      	bne.n	8002de6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0204 	bic.w	r2, r2, #4
 8002dd2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0208 	orr.w	r2, r2, #8
 8002de2:	605a      	str	r2, [r3, #4]
          break;
 8002de4:	e008      	b.n	8002df8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 020c 	orr.w	r2, r2, #12
 8002df4:	605a      	str	r2, [r3, #4]
          break;
 8002df6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0210 	bic.w	r2, r2, #16
 8002e0e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e18:	d004      	beq.n	8002e24 <HAL_ADC_Start_IT+0x1bc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_ADC_Start_IT+0x270>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_Start_IT+0x1ca>
 8002e24:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_ADC_Start_IT+0x274>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03e      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e30:	e005      	b.n	8002e3e <HAL_ADC_Start_IT+0x1d6>
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_ADC_Start_IT+0x278>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d037      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e46:	d004      	beq.n	8002e52 <HAL_ADC_Start_IT+0x1ea>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <HAL_ADC_Start_IT+0x270>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d106      	bne.n	8002e60 <HAL_ADC_Start_IT+0x1f8>
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_ADC_Start_IT+0x274>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d027      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e5e:	e005      	b.n	8002e6c <HAL_ADC_Start_IT+0x204>
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_ADC_Start_IT+0x278>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d020      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_Start_IT+0x218>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_ADC_Start_IT+0x270>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_Start_IT+0x226>
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_ADC_Start_IT+0x274>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d010      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e8c:	e005      	b.n	8002e9a <HAL_ADC_Start_IT+0x232>
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_ADC_Start_IT+0x278>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	d009      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_Start_IT+0x246>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_ADC_Start_IT+0x27c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10f      	bne.n	8002ece <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0204 	orr.w	r2, r2, #4
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	e006      	b.n	8002ece <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ec8:	e001      	b.n	8002ece <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	50000700 	.word	0x50000700
 8002ee4:	50000400 	.word	0x50000400

08002ee8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_IRQHandler+0x30>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d00f      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	f040 80c0 	bne.w	80030c4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	f040 80b8 	bne.w	80030c4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x7c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a95      	ldr	r2, [pc, #596]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d106      	bne.n	8002f8e <HAL_ADC_IRQHandler+0x8a>
 8002f80:	4b94      	ldr	r3, [pc, #592]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03e      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002f8c:	e005      	b.n	8002f9a <HAL_ADC_IRQHandler+0x96>
 8002f8e:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d037      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa2:	d004      	beq.n	8002fae <HAL_ADC_IRQHandler+0xaa>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a89      	ldr	r2, [pc, #548]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d106      	bne.n	8002fbc <HAL_ADC_IRQHandler+0xb8>
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d027      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002fba:	e005      	b.n	8002fc8 <HAL_ADC_IRQHandler+0xc4>
 8002fbc:	4b86      	ldr	r3, [pc, #536]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d020      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd0:	d004      	beq.n	8002fdc <HAL_ADC_IRQHandler+0xd8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_IRQHandler+0xe6>
 8002fdc:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	d010      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002fe8:	e005      	b.n	8002ff6 <HAL_ADC_IRQHandler+0xf2>
 8002fea:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	d009      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_IRQHandler+0x106>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_ADC_IRQHandler+0x2d8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d104      	bne.n	8003014 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e00f      	b.n	8003034 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301c:	d004      	beq.n	8003028 <HAL_ADC_IRQHandler+0x124>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d102      	bne.n	800302e <HAL_ADC_IRQHandler+0x12a>
 8003028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800302c:	e000      	b.n	8003030 <HAL_ADC_IRQHandler+0x12c>
 800302e:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <HAL_ADC_IRQHandler+0x2d8>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303e:	2b00      	cmp	r3, #0
 8003040:	d139      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003048:	2b00      	cmp	r3, #0
 800304a:	d134      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d12d      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11a      	bne.n	800309e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020c 	bic.w	r2, r2, #12
 8003076:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d112      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
 800309c:	e00b      	b.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f982 	bl	80013c0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	220c      	movs	r2, #12
 80030c2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d106      	bne.n	80030e0 <HAL_ADC_IRQHandler+0x1dc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d00f      	beq.n	8003100 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	f040 813c 	bne.w	8003368 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	f040 8134 	bne.w	8003368 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003114:	d004      	beq.n	8003120 <HAL_ADC_IRQHandler+0x21c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d106      	bne.n	800312e <HAL_ADC_IRQHandler+0x22a>
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03e      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 800312c:	e005      	b.n	800313a <HAL_ADC_IRQHandler+0x236>
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2b00      	cmp	r3, #0
 8003138:	d037      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003142:	d004      	beq.n	800314e <HAL_ADC_IRQHandler+0x24a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d106      	bne.n	800315c <HAL_ADC_IRQHandler+0x258>
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b05      	cmp	r3, #5
 8003158:	d027      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 800315a:	e005      	b.n	8003168 <HAL_ADC_IRQHandler+0x264>
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b05      	cmp	r3, #5
 8003166:	d020      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003170:	d004      	beq.n	800317c <HAL_ADC_IRQHandler+0x278>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <HAL_ADC_IRQHandler+0x286>
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_ADC_IRQHandler+0x2d0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2b09      	cmp	r3, #9
 8003186:	d010      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 8003188:	e005      	b.n	8003196 <HAL_ADC_IRQHandler+0x292>
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_ADC_IRQHandler+0x2d4>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2b09      	cmp	r3, #9
 8003194:	d009      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800319e:	d004      	beq.n	80031aa <HAL_ADC_IRQHandler+0x2a6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_ADC_IRQHandler+0x2d8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d104      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e018      	b.n	80031e6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x2c4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a03      	ldr	r2, [pc, #12]	; (80031d0 <HAL_ADC_IRQHandler+0x2cc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10b      	bne.n	80031e0 <HAL_ADC_IRQHandler+0x2dc>
 80031c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031cc:	e009      	b.n	80031e2 <HAL_ADC_IRQHandler+0x2de>
 80031ce:	bf00      	nop
 80031d0:	50000100 	.word	0x50000100
 80031d4:	50000300 	.word	0x50000300
 80031d8:	50000700 	.word	0x50000700
 80031dc:	50000400 	.word	0x50000400
 80031e0:	4b9d      	ldr	r3, [pc, #628]	; (8003458 <HAL_ADC_IRQHandler+0x554>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 80b2 	bne.w	800335a <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80a5 	bne.w	800335a <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 809f 	bne.w	800335a <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	f040 8097 	bne.w	800335a <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003234:	d004      	beq.n	8003240 <HAL_ADC_IRQHandler+0x33c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a88      	ldr	r2, [pc, #544]	; (800345c <HAL_ADC_IRQHandler+0x558>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d106      	bne.n	800324e <HAL_ADC_IRQHandler+0x34a>
 8003240:	4b87      	ldr	r3, [pc, #540]	; (8003460 <HAL_ADC_IRQHandler+0x55c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2b00      	cmp	r3, #0
 800324a:	d03e      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 800324c:	e005      	b.n	800325a <HAL_ADC_IRQHandler+0x356>
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_ADC_IRQHandler+0x560>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2b00      	cmp	r3, #0
 8003258:	d037      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003262:	d004      	beq.n	800326e <HAL_ADC_IRQHandler+0x36a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_ADC_IRQHandler+0x558>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d106      	bne.n	800327c <HAL_ADC_IRQHandler+0x378>
 800326e:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_ADC_IRQHandler+0x55c>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2b06      	cmp	r3, #6
 8003278:	d027      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 800327a:	e005      	b.n	8003288 <HAL_ADC_IRQHandler+0x384>
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <HAL_ADC_IRQHandler+0x560>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2b06      	cmp	r3, #6
 8003286:	d020      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003290:	d004      	beq.n	800329c <HAL_ADC_IRQHandler+0x398>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a71      	ldr	r2, [pc, #452]	; (800345c <HAL_ADC_IRQHandler+0x558>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d106      	bne.n	80032aa <HAL_ADC_IRQHandler+0x3a6>
 800329c:	4b70      	ldr	r3, [pc, #448]	; (8003460 <HAL_ADC_IRQHandler+0x55c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d010      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 80032a8:	e005      	b.n	80032b6 <HAL_ADC_IRQHandler+0x3b2>
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <HAL_ADC_IRQHandler+0x560>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b07      	cmp	r3, #7
 80032b4:	d009      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032be:	d004      	beq.n	80032ca <HAL_ADC_IRQHandler+0x3c6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a64      	ldr	r2, [pc, #400]	; (8003458 <HAL_ADC_IRQHandler+0x554>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d104      	bne.n	80032d4 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e00f      	b.n	80032f4 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032dc:	d004      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x3e4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_ADC_IRQHandler+0x558>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d102      	bne.n	80032ee <HAL_ADC_IRQHandler+0x3ea>
 80032e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ec:	e000      	b.n	80032f0 <HAL_ADC_IRQHandler+0x3ec>
 80032ee:	4b5a      	ldr	r3, [pc, #360]	; (8003458 <HAL_ADC_IRQHandler+0x554>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d12d      	bne.n	800335a <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11a      	bne.n	8003342 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800331a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d112      	bne.n	800335a <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
 8003340:	e00b      	b.n	800335a <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8de 	bl	800351c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2260      	movs	r2, #96	; 0x60
 8003366:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d113      	bne.n	800339e <HAL_ADC_IRQHandler+0x49a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d10c      	bne.n	800339e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fa5b 	bl	800284c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ac:	d115      	bne.n	80033da <HAL_ADC_IRQHandler+0x4d6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d10d      	bne.n	80033da <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8ba 	bl	8003544 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d115      	bne.n	8003416 <HAL_ADC_IRQHandler+0x512>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d10d      	bne.n	8003416 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8a6 	bl	8003558 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d151      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x5c4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d14a      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800343a:	2301      	movs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e02d      	b.n	800349c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003448:	d004      	beq.n	8003454 <HAL_ADC_IRQHandler+0x550>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_ADC_IRQHandler+0x558>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <HAL_ADC_IRQHandler+0x564>
 8003454:	4b02      	ldr	r3, [pc, #8]	; (8003460 <HAL_ADC_IRQHandler+0x55c>)
 8003456:	e008      	b.n	800346a <HAL_ADC_IRQHandler+0x566>
 8003458:	50000400 	.word	0x50000400
 800345c:	50000100 	.word	0x50000100
 8003460:	50000300 	.word	0x50000300
 8003464:	50000700 	.word	0x50000700
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_ADC_IRQHandler+0x614>)
 800346a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10a      	bne.n	800349c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003486:	2301      	movs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e007      	b.n	800349c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff f9d0 	bl	8002860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2210      	movs	r2, #16
 80034c6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d11b      	bne.n	8003510 <HAL_ADC_IRQHandler+0x60c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d113      	bne.n	8003510 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0208 	orr.w	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f810 	bl	8003530 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	50000700 	.word	0x50000700

0800351c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800356c:	b480      	push	{r7}
 800356e:	b09b      	sub	sp, #108	; 0x6c
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x22>
 800358a:	2302      	movs	r3, #2
 800358c:	e2cb      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x5ba>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 82af 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d81c      	bhi.n	80035e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	461a      	mov	r2, r3
 80035c2:	231f      	movs	r3, #31
 80035c4:	4093      	lsls	r3, r2
 80035c6:	43db      	mvns	r3, r3
 80035c8:	4019      	ands	r1, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa00 f203 	lsl.w	r2, r0, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
 80035e6:	e063      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b09      	cmp	r3, #9
 80035ee:	d81e      	bhi.n	800362e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	3b1e      	subs	r3, #30
 8003604:	221f      	movs	r2, #31
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	4019      	ands	r1, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	3b1e      	subs	r3, #30
 8003620:	fa00 f203 	lsl.w	r2, r0, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	635a      	str	r2, [r3, #52]	; 0x34
 800362c:	e040      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b0e      	cmp	r3, #14
 8003634:	d81e      	bhi.n	8003674 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	3b3c      	subs	r3, #60	; 0x3c
 800364a:	221f      	movs	r2, #31
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	4019      	ands	r1, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	3b3c      	subs	r3, #60	; 0x3c
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
 8003672:	e01d      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	3b5a      	subs	r3, #90	; 0x5a
 8003688:	221f      	movs	r2, #31
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	4019      	ands	r1, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	3b5a      	subs	r3, #90	; 0x5a
 80036a4:	fa00 f203 	lsl.w	r2, r0, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80e5 	bne.w	800388a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b09      	cmp	r3, #9
 80036c6:	d91c      	bls.n	8003702 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	3b1e      	subs	r3, #30
 80036da:	2207      	movs	r2, #7
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	4019      	ands	r1, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6898      	ldr	r0, [r3, #8]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	fa00 f203 	lsl.w	r2, r0, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
 8003700:	e019      	b.n	8003736 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6959      	ldr	r1, [r3, #20]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	4019      	ands	r1, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6898      	ldr	r0, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	fa00 f203 	lsl.w	r2, r0, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	3b01      	subs	r3, #1
 8003754:	2b03      	cmp	r3, #3
 8003756:	d84f      	bhi.n	80037f8 <HAL_ADC_ConfigChannel+0x28c>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_ADC_ConfigChannel+0x1f4>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003793 	.word	0x08003793
 8003768:	080037b5 	.word	0x080037b5
 800376c:	080037d7 	.word	0x080037d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003776:	4b9f      	ldr	r3, [pc, #636]	; (80039f4 <HAL_ADC_ConfigChannel+0x488>)
 8003778:	4013      	ands	r3, r2
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	0691      	lsls	r1, r2, #26
 8003780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003782:	430a      	orrs	r2, r1
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800378e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003790:	e07e      	b.n	8003890 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003798:	4b96      	ldr	r3, [pc, #600]	; (80039f4 <HAL_ADC_ConfigChannel+0x488>)
 800379a:	4013      	ands	r3, r2
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	0691      	lsls	r1, r2, #26
 80037a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037b2:	e06d      	b.n	8003890 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037ba:	4b8e      	ldr	r3, [pc, #568]	; (80039f4 <HAL_ADC_ConfigChannel+0x488>)
 80037bc:	4013      	ands	r3, r2
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	0691      	lsls	r1, r2, #26
 80037c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c6:	430a      	orrs	r2, r1
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037d4:	e05c      	b.n	8003890 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037dc:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_ADC_ConfigChannel+0x488>)
 80037de:	4013      	ands	r3, r2
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	0691      	lsls	r1, r2, #26
 80037e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037e8:	430a      	orrs	r2, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037f6:	e04b      	b.n	8003890 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	069b      	lsls	r3, r3, #26
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800383e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	069b      	lsls	r3, r3, #26
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003862:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	069b      	lsls	r3, r3, #26
 8003874:	429a      	cmp	r2, r3
 8003876:	d10a      	bne.n	800388e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003886:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003888:	e001      	b.n	800388e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_ADC_ConfigChannel+0x324>
      break;
 800388e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x344>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x344>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x346>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 8131 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d00f      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80038de:	e049      	b.n	8003974 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	409a      	lsls	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b09      	cmp	r3, #9
 8003900:	d91c      	bls.n	800393c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6999      	ldr	r1, [r3, #24]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	3b1b      	subs	r3, #27
 8003914:	2207      	movs	r2, #7
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	4019      	ands	r1, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6898      	ldr	r0, [r3, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	3b1b      	subs	r3, #27
 800392e:	fa00 f203 	lsl.w	r2, r0, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	619a      	str	r2, [r3, #24]
 800393a:	e01b      	b.n	8003974 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6959      	ldr	r1, [r3, #20]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	2207      	movs	r2, #7
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	4019      	ands	r1, r3
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6898      	ldr	r0, [r3, #8]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	fa00 f203 	lsl.w	r2, r0, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397c:	d004      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x41c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_ADC_ConfigChannel+0x48c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x420>
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <HAL_ADC_ConfigChannel+0x490>)
 800398a:	e000      	b.n	800398e <HAL_ADC_ConfigChannel+0x422>
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <HAL_ADC_ConfigChannel+0x494>)
 800398e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d105      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039bc:	2b12      	cmp	r3, #18
 80039be:	f040 80ac 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80a5 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d102      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x474>
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_ADC_ConfigChannel+0x48c>)
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e023      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4bc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_ADC_ConfigChannel+0x48c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d10c      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x498>
 80039ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e01a      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4bc>
 80039f2:	bf00      	nop
 80039f4:	83fff000 	.word	0x83fff000
 80039f8:	50000100 	.word	0x50000100
 80039fc:	50000300 	.word	0x50000300
 8003a00:	50000700 	.word	0x50000700
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d102      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x4a8>
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e009      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4bc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d102      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x4b8>
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e001      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x4bc>
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x4dc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x4dc>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x4de>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d150      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x504>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x504>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x506>
 8003a70:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d13c      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d11d      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x54e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a86:	d118      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a92:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_ADC_ConfigChannel+0x5d0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_ADC_ConfigChannel+0x5d4>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9a      	lsrs	r2, r3, #18
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aaa:	e002      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f9      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ab8:	e02e      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b11      	cmp	r3, #17
 8003ac0:	d10b      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x56e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aca:	d106      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ad8:	e01e      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d11a      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003aee:	e013      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b02:	e00a      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b16:	e000      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b18:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	376c      	adds	r7, #108	; 0x6c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	50000400 	.word	0x50000400
 8003b38:	50000500 	.word	0x50000500
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	431bde83 	.word	0x431bde83

08003b44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <ADC_Enable+0x2c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <ADC_Enable+0x2c>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <ADC_Enable+0x2e>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d143      	bne.n	8003bfe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <ADC_Enable+0xc4>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e02f      	b.n	8003c00 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003bb0:	f7fe fe1e 	bl	80027f0 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bb6:	e01b      	b.n	8003bf0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb8:	f7fe fe1a 	bl	80027f0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d914      	bls.n	8003bf0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d00d      	beq.n	8003bf0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f043 0210 	orr.w	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d1dc      	bne.n	8003bb8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	8000003f 	.word	0x8000003f

08003c0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <ADC_Disable+0x2c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <ADC_Disable+0x2c>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <ADC_Disable+0x2e>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d047      	beq.n	8003cce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030d 	and.w	r3, r3, #13
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10f      	bne.n	8003c6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0202 	orr.w	r2, r2, #2
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2203      	movs	r2, #3
 8003c62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003c64:	f7fe fdc4 	bl	80027f0 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c6a:	e029      	b.n	8003cc0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e023      	b.n	8003cd0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c88:	f7fe fdb2 	bl	80027f0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d914      	bls.n	8003cc0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10d      	bne.n	8003cc0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f043 0210 	orr.w	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e007      	b.n	8003cd0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d0dc      	beq.n	8003c88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	60d3      	str	r3, [r2, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d301      	bcc.n	8003e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <SysTick_Config+0x40>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e52:	210f      	movs	r1, #15
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f7ff ff8e 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x40>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x40>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff29 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea0:	f7ff ff3e 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff ff8e 	bl	8003dcc <NVIC_EncodePriority>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff5d 	bl	8003d78 <__NVIC_SetPriority>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff31 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffa2 	bl	8003e34 <SysTick_Config>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e037      	b.n	8003f80 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8b4 	bl	80040d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}  
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d024      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x72>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d06a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	e065      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2202      	movs	r2, #2
 8004000:	409a      	lsls	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02c      	beq.n	8004064 <HAL_DMA_IRQHandler+0xdc>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d027      	beq.n	8004064 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 020a 	bic.w	r2, r2, #10
 8004030:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	2102      	movs	r1, #2
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d035      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004062:	e030      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2208      	movs	r2, #8
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d028      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 020e 	bic.w	r2, r2, #14
 800408c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    }
  }
}  
 80040c4:	e7ff      	b.n	80040c6 <HAL_DMA_IRQHandler+0x13e>
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <DMA_CalcBaseAndBitshift+0x60>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d80f      	bhi.n	8004104 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <DMA_CalcBaseAndBitshift+0x64>)
 80040ec:	4413      	add	r3, r2
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <DMA_CalcBaseAndBitshift+0x68>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0f      	ldr	r2, [pc, #60]	; (800413c <DMA_CalcBaseAndBitshift+0x6c>)
 8004100:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004102:	e00e      	b.n	8004122 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <DMA_CalcBaseAndBitshift+0x70>)
 800410c:	4413      	add	r3, r2
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <DMA_CalcBaseAndBitshift+0x68>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	009a      	lsls	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <DMA_CalcBaseAndBitshift+0x74>)
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40020407 	.word	0x40020407
 8004134:	bffdfff8 	.word	0xbffdfff8
 8004138:	cccccccd 	.word	0xcccccccd
 800413c:	40020000 	.word	0x40020000
 8004140:	bffdfbf8 	.word	0xbffdfbf8
 8004144:	40020400 	.word	0x40020400

08004148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004156:	e160      	b.n	800441a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	2101      	movs	r1, #1
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8152 	beq.w	8004414 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d005      	beq.n	8004188 <HAL_GPIO_Init+0x40>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d130      	bne.n	80041ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041be:	2201      	movs	r2, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0201 	and.w	r2, r3, #1
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d017      	beq.n	8004226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d123      	bne.n	800427a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	08da      	lsrs	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3208      	adds	r2, #8
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	6939      	ldr	r1, [r7, #16]
 8004276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2203      	movs	r2, #3
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80ac 	beq.w	8004414 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_GPIO_Init+0x2f0>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	4a5d      	ldr	r2, [pc, #372]	; (8004438 <HAL_GPIO_Init+0x2f0>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6193      	str	r3, [r2, #24]
 80042c8:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <HAL_GPIO_Init+0x2f0>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042d4:	4a59      	ldr	r2, [pc, #356]	; (800443c <HAL_GPIO_Init+0x2f4>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042fe:	d025      	beq.n	800434c <HAL_GPIO_Init+0x204>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a4f      	ldr	r2, [pc, #316]	; (8004440 <HAL_GPIO_Init+0x2f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01f      	beq.n	8004348 <HAL_GPIO_Init+0x200>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a4e      	ldr	r2, [pc, #312]	; (8004444 <HAL_GPIO_Init+0x2fc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d019      	beq.n	8004344 <HAL_GPIO_Init+0x1fc>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a4d      	ldr	r2, [pc, #308]	; (8004448 <HAL_GPIO_Init+0x300>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_GPIO_Init+0x1f8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a4c      	ldr	r2, [pc, #304]	; (800444c <HAL_GPIO_Init+0x304>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00d      	beq.n	800433c <HAL_GPIO_Init+0x1f4>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <HAL_GPIO_Init+0x308>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <HAL_GPIO_Init+0x1f0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_GPIO_Init+0x30c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_GPIO_Init+0x1ec>
 8004330:	2306      	movs	r3, #6
 8004332:	e00c      	b.n	800434e <HAL_GPIO_Init+0x206>
 8004334:	2307      	movs	r3, #7
 8004336:	e00a      	b.n	800434e <HAL_GPIO_Init+0x206>
 8004338:	2305      	movs	r3, #5
 800433a:	e008      	b.n	800434e <HAL_GPIO_Init+0x206>
 800433c:	2304      	movs	r3, #4
 800433e:	e006      	b.n	800434e <HAL_GPIO_Init+0x206>
 8004340:	2303      	movs	r3, #3
 8004342:	e004      	b.n	800434e <HAL_GPIO_Init+0x206>
 8004344:	2302      	movs	r3, #2
 8004346:	e002      	b.n	800434e <HAL_GPIO_Init+0x206>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_GPIO_Init+0x206>
 800434c:	2300      	movs	r3, #0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	f002 0203 	and.w	r2, r2, #3
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	4093      	lsls	r3, r2
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800435e:	4937      	ldr	r1, [pc, #220]	; (800443c <HAL_GPIO_Init+0x2f4>)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	3302      	adds	r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800436c:	4b3a      	ldr	r3, [pc, #232]	; (8004458 <HAL_GPIO_Init+0x310>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004390:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_GPIO_Init+0x310>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004396:	4b30      	ldr	r3, [pc, #192]	; (8004458 <HAL_GPIO_Init+0x310>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043ba:	4a27      	ldr	r2, [pc, #156]	; (8004458 <HAL_GPIO_Init+0x310>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_GPIO_Init+0x310>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043e4:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_GPIO_Init+0x310>)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_GPIO_Init+0x310>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <HAL_GPIO_Init+0x310>)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f ae97 	bne.w	8004158 <HAL_GPIO_Init+0x10>
  }
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	40010000 	.word	0x40010000
 8004440:	48000400 	.word	0x48000400
 8004444:	48000800 	.word	0x48000800
 8004448:	48000c00 	.word	0x48000c00
 800444c:	48001000 	.word	0x48001000
 8004450:	48001400 	.word	0x48001400
 8004454:	48001800 	.word	0x48001800
 8004458:	40010400 	.word	0x40010400

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800446c:	787b      	ldrb	r3, [r7, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004478:	e002      	b.n	8004480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e081      	b.n	80045a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fdf4 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e006      	b.n	8004514 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004512:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d104      	bne.n	8004526 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	817b      	strh	r3, [r7, #10]
 80045bc:	4613      	mov	r3, r2
 80045be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	f040 80da 	bne.w	8004782 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_I2C_Master_Transmit+0x30>
 80045d8:	2302      	movs	r3, #2
 80045da:	e0d3      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045e4:	f7fe f904 	bl	80027f0 <HAL_GetTick>
 80045e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2319      	movs	r3, #25
 80045f0:	2201      	movs	r2, #1
 80045f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fdc4 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0be      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2210      	movs	r2, #16
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	893a      	ldrh	r2, [r7, #8]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2bff      	cmp	r3, #255	; 0xff
 8004636:	d90e      	bls.n	8004656 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	b2da      	uxtb	r2, r3
 8004644:	8979      	ldrh	r1, [r7, #10]
 8004646:	4b51      	ldr	r3, [pc, #324]	; (800478c <HAL_I2C_Master_Transmit+0x1e0>)
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 ff36 	bl	80054c0 <I2C_TransferConfig>
 8004654:	e06c      	b.n	8004730 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	b2da      	uxtb	r2, r3
 8004666:	8979      	ldrh	r1, [r7, #10]
 8004668:	4b48      	ldr	r3, [pc, #288]	; (800478c <HAL_I2C_Master_Transmit+0x1e0>)
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 ff25 	bl	80054c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004676:	e05b      	b.n	8004730 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	6a39      	ldr	r1, [r7, #32]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fdc1 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e07b      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d034      	beq.n	8004730 <HAL_I2C_Master_Transmit+0x184>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d130      	bne.n	8004730 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fd53 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e04d      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2bff      	cmp	r3, #255	; 0xff
 80046f0:	d90e      	bls.n	8004710 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8979      	ldrh	r1, [r7, #10]
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fed9 	bl	80054c0 <I2C_TransferConfig>
 800470e:	e00f      	b.n	8004730 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	b2da      	uxtb	r2, r3
 8004720:	8979      	ldrh	r1, [r7, #10]
 8004722:	2300      	movs	r3, #0
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fec8 	bl	80054c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d19e      	bne.n	8004678 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	6a39      	ldr	r1, [r7, #32]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fda0 	bl	8005284 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e01a      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2220      	movs	r2, #32
 8004754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_I2C_Master_Transmit+0x1e4>)
 8004762:	400b      	ands	r3, r1
 8004764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	80002000 	.word	0x80002000
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	460b      	mov	r3, r1
 80047a2:	817b      	strh	r3, [r7, #10]
 80047a4:	4613      	mov	r3, r2
 80047a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	f040 80db 	bne.w	800496c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_I2C_Master_Receive+0x30>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0d4      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047cc:	f7fe f810 	bl	80027f0 <HAL_GetTick>
 80047d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2319      	movs	r3, #25
 80047d8:	2201      	movs	r2, #1
 80047da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fcd0 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0bf      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2222      	movs	r2, #34	; 0x22
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2210      	movs	r2, #16
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	893a      	ldrh	r2, [r7, #8]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d90e      	bls.n	800483e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	22ff      	movs	r2, #255	; 0xff
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	8979      	ldrh	r1, [r7, #10]
 800482e:	4b52      	ldr	r3, [pc, #328]	; (8004978 <HAL_I2C_Master_Receive+0x1e4>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fe42 	bl	80054c0 <I2C_TransferConfig>
 800483c:	e06d      	b.n	800491a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	b2da      	uxtb	r2, r3
 800484e:	8979      	ldrh	r1, [r7, #10]
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_I2C_Master_Receive+0x1e4>)
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fe31 	bl	80054c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800485e:	e05c      	b.n	800491a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6a39      	ldr	r1, [r7, #32]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fd49 	bl	80052fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e07c      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d034      	beq.n	800491a <HAL_I2C_Master_Receive+0x186>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d130      	bne.n	800491a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fc5e 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e04d      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2bff      	cmp	r3, #255	; 0xff
 80048da:	d90e      	bls.n	80048fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	22ff      	movs	r2, #255	; 0xff
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	8979      	ldrh	r1, [r7, #10]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fde4 	bl	80054c0 <I2C_TransferConfig>
 80048f8:	e00f      	b.n	800491a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	b2da      	uxtb	r2, r3
 800490a:	8979      	ldrh	r1, [r7, #10]
 800490c:	2300      	movs	r3, #0
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fdd3 	bl	80054c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d19d      	bne.n	8004860 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	6a39      	ldr	r1, [r7, #32]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fcab 	bl	8005284 <I2C_WaitOnSTOPFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e01a      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2220      	movs	r2, #32
 800493e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_I2C_Master_Receive+0x1e8>)
 800494c:	400b      	ands	r3, r1
 800494e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	80002400 	.word	0x80002400
 800497c:	fe00e800 	.word	0xfe00e800

08004980 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	461a      	mov	r2, r3
 800498e:	4603      	mov	r3, r0
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	460b      	mov	r3, r1
 8004994:	813b      	strh	r3, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 80f9 	bne.w	8004b9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x34>
 80049ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0ed      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_I2C_Mem_Write+0x4e>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0e6      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049d6:	f7fd ff0b 	bl	80027f0 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2319      	movs	r3, #25
 80049e2:	2201      	movs	r2, #1
 80049e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fbcb 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0d1      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2221      	movs	r2, #33	; 0x21
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a20:	88f8      	ldrh	r0, [r7, #6]
 8004a22:	893a      	ldrh	r2, [r7, #8]
 8004a24:	8979      	ldrh	r1, [r7, #10]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4603      	mov	r3, r0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fadb 	bl	8004fec <I2C_RequestMemoryWrite>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0a9      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2bff      	cmp	r3, #255	; 0xff
 8004a50:	d90e      	bls.n	8004a70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	8979      	ldrh	r1, [r7, #10]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fd29 	bl	80054c0 <I2C_TransferConfig>
 8004a6e:	e00f      	b.n	8004a90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	8979      	ldrh	r1, [r7, #10]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fd18 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fbb5 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e07b      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d034      	beq.n	8004b48 <HAL_I2C_Mem_Write+0x1c8>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d130      	bne.n	8004b48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb47 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04d      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d90e      	bls.n	8004b28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fccd 	bl	80054c0 <I2C_TransferConfig>
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	8979      	ldrh	r1, [r7, #10]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fcbc 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d19e      	bne.n	8004a90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fb94 	bl	8005284 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01a      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_I2C_Mem_Write+0x224>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	fe00e800 	.word	0xfe00e800

08004ba8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	817b      	strh	r3, [r7, #10]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	813b      	strh	r3, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80fd 	bne.w	8004dca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2C_Mem_Read+0x34>
 8004bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0f1      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x4e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0ea      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fdf7 	bl	80027f0 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2319      	movs	r3, #25
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fab7 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0d5      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2222      	movs	r2, #34	; 0x22
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c48:	88f8      	ldrh	r0, [r7, #6]
 8004c4a:	893a      	ldrh	r2, [r7, #8]
 8004c4c:	8979      	ldrh	r1, [r7, #10]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4603      	mov	r3, r0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa1b 	bl	8005094 <I2C_RequestMemoryRead>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0ad      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2bff      	cmp	r3, #255	; 0xff
 8004c78:	d90e      	bls.n	8004c98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	4b52      	ldr	r3, [pc, #328]	; (8004dd4 <HAL_I2C_Mem_Read+0x22c>)
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fc15 	bl	80054c0 <I2C_TransferConfig>
 8004c96:	e00f      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <HAL_I2C_Mem_Read+0x22c>)
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fc04 	bl	80054c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fa5e 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e07c      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d034      	beq.n	8004d78 <HAL_I2C_Mem_Read+0x1d0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d130      	bne.n	8004d78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa2f 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04d      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2bff      	cmp	r3, #255	; 0xff
 8004d38:	d90e      	bls.n	8004d58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22ff      	movs	r2, #255	; 0xff
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	8979      	ldrh	r1, [r7, #10]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbb5 	bl	80054c0 <I2C_TransferConfig>
 8004d56:	e00f      	b.n	8004d78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fba4 	bl	80054c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d19a      	bne.n	8004cb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa7c 	bl	8005284 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e01a      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_I2C_Mem_Read+0x230>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	80002400 	.word	0x80002400
 8004dd8:	fe00e800 	.word	0xfe00e800

08004ddc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	460b      	mov	r3, r1
 8004dea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 80f1 	bne.w	8004fe0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0e7      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2C_IsDeviceReady+0x44>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0e0      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_I2C_IsDeviceReady+0x72>
 8004e3e:	897b      	ldrh	r3, [r7, #10]
 8004e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e4c:	e004      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x7c>
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004e5e:	f7fd fcc7 	bl	80027f0 <HAL_GetTick>
 8004e62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004e90:	e034      	b.n	8004efc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d01a      	beq.n	8004ed0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fd fca9 	bl	80027f0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <HAL_I2C_IsDeviceReady+0xd4>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e088      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_I2C_IsDeviceReady+0x12c>
 8004f02:	7fbb      	ldrb	r3, [r7, #30]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0c4      	beq.n	8004e92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d01a      	beq.n	8004f4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2120      	movs	r1, #32
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f92f 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e058      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2220      	movs	r2, #32
 8004f36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e04a      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2120      	movs	r1, #32
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f914 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03d      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2220      	movs	r2, #32
 8004f74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d118      	bne.n	8004fb0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2120      	movs	r1, #32
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8f3 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e01c      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2220      	movs	r2, #32
 8004fae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	f63f af3b 	bhi.w	8004e36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	8979      	ldrh	r1, [r7, #10]
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <I2C_RequestMemoryWrite+0xa4>)
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fa53 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f8f0 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e02c      	b.n	8005088 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
 800503e:	e015      	b.n	800506c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b29b      	uxth	r3, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8d6 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e012      	b.n	8005088 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005062:	893b      	ldrh	r3, [r7, #8]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2200      	movs	r2, #0
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f884 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	80002000 	.word	0x80002000

08005094 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	817b      	strh	r3, [r7, #10]
 80050a6:	460b      	mov	r3, r1
 80050a8:	813b      	strh	r3, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	8979      	ldrh	r1, [r7, #10]
 80050b4:	4b20      	ldr	r3, [pc, #128]	; (8005138 <I2C_RequestMemoryRead+0xa4>)
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fa00 	bl	80054c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f89d 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e02c      	b.n	800512e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050da:	893b      	ldrh	r3, [r7, #8]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
 80050e4:	e015      	b.n	8005112 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050e6:	893b      	ldrh	r3, [r7, #8]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f883 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e012      	b.n	800512e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2200      	movs	r2, #0
 800511a:	2140      	movs	r1, #64	; 0x40
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f831 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	80002000 	.word	0x80002000

0800513c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d103      	bne.n	800515a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d007      	beq.n	8005178 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	619a      	str	r2, [r3, #24]
  }
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005194:	e022      	b.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d01e      	beq.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fd fb27 	bl	80027f0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d113      	bne.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e00f      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d0cd      	beq.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005210:	e02c      	b.n	800526c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f8dc 	bl	80053d4 <I2C_IsAcknowledgeFailed>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e02a      	b.n	800527c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d01e      	beq.n	800526c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fd fadf 	bl	80027f0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d113      	bne.n	800526c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e007      	b.n	800527c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d1cb      	bne.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005290:	e028      	b.n	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f89c 	bl	80053d4 <I2C_IsAcknowledgeFailed>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e026      	b.n	80052f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a6:	f7fd faa3 	bl	80027f0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e007      	b.n	80052f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d1cf      	bne.n	8005292 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005308:	e055      	b.n	80053b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f860 	bl	80053d4 <I2C_IsAcknowledgeFailed>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e053      	b.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b20      	cmp	r3, #32
 800532a:	d129      	bne.n	8005380 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d105      	bne.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e03f      	b.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2220      	movs	r2, #32
 800534c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800535a:	400b      	ands	r3, r1
 800535c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e022      	b.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fd fa36 	bl	80027f0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e007      	b.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d1a2      	bne.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	fe00e800 	.word	0xfe00e800

080053d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d161      	bne.n	80054b2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053fc:	d02b      	beq.n	8005456 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800540e:	e022      	b.n	8005456 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d01e      	beq.n	8005456 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fd f9ea 	bl	80027f0 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_IsAcknowledgeFailed+0x5a>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d113      	bne.n	8005456 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e02e      	b.n	80054b4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b20      	cmp	r3, #32
 8005462:	d1d5      	bne.n	8005410 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2210      	movs	r2, #16
 800546a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2220      	movs	r2, #32
 8005472:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff fe61 	bl	800513c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <I2C_IsAcknowledgeFailed+0xe8>)
 8005486:	400b      	ands	r3, r1
 8005488:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	fe00e800 	.word	0xfe00e800

080054c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	817b      	strh	r3, [r7, #10]
 80054ce:	4613      	mov	r3, r2
 80054d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	0d5b      	lsrs	r3, r3, #21
 80054dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054e0:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <I2C_TransferConfig+0x58>)
 80054e2:	430b      	orrs	r3, r1
 80054e4:	43db      	mvns	r3, r3
 80054e6:	ea02 0103 	and.w	r1, r2, r3
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054f0:	7a7b      	ldrb	r3, [r7, #9]
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	03ff63ff 	.word	0x03ff63ff

0800551c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b20      	cmp	r3, #32
 8005530:	d138      	bne.n	80055a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800553c:	2302      	movs	r3, #2
 800553e:	e032      	b.n	80055a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800556e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e000      	b.n	80055a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d139      	bne.n	800563c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e033      	b.n	800563e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005604:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005652:	af00      	add	r7, sp, #0
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f000 bf01 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	1d3b      	adds	r3, r7, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8160 	beq.w	8005936 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005676:	4bae      	ldr	r3, [pc, #696]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00c      	beq.n	800569c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005682:	4bab      	ldr	r3, [pc, #684]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b08      	cmp	r3, #8
 800568c:	d159      	bne.n	8005742 <HAL_RCC_OscConfig+0xf6>
 800568e:	4ba8      	ldr	r3, [pc, #672]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569a:	d152      	bne.n	8005742 <HAL_RCC_OscConfig+0xf6>
 800569c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80056a8:	fa93 f3a3 	rbit	r3, r3
 80056ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b4:	fab3 f383 	clz	r3, r3
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d102      	bne.n	80056ce <HAL_RCC_OscConfig+0x82>
 80056c8:	4b99      	ldr	r3, [pc, #612]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0xae>
 80056ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80056e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80056ea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80056f6:	4b8e      	ldr	r3, [pc, #568]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056fe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005702:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005706:	fa92 f2a2 	rbit	r2, r2
 800570a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800570e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005712:	fab2 f282 	clz	r2, r2
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	f042 0220 	orr.w	r2, r2, #32
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	f002 021f 	and.w	r2, r2, #31
 8005722:	2101      	movs	r1, #1
 8005724:	fa01 f202 	lsl.w	r2, r1, r2
 8005728:	4013      	ands	r3, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8102 	beq.w	8005934 <HAL_RCC_OscConfig+0x2e8>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 80fc 	bne.w	8005934 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f000 be93 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x110>
 800574e:	4b78      	ldr	r3, [pc, #480]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a77      	ldr	r2, [pc, #476]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e030      	b.n	80057be <HAL_RCC_OscConfig+0x172>
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x134>
 8005766:	4b72      	ldr	r3, [pc, #456]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a71      	ldr	r2, [pc, #452]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b6f      	ldr	r3, [pc, #444]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6e      	ldr	r2, [pc, #440]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01e      	b.n	80057be <HAL_RCC_OscConfig+0x172>
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800578a:	d10c      	bne.n	80057a6 <HAL_RCC_OscConfig+0x15a>
 800578c:	4b68      	ldr	r3, [pc, #416]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a67      	ldr	r2, [pc, #412]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b65      	ldr	r3, [pc, #404]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a64      	ldr	r2, [pc, #400]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e00b      	b.n	80057be <HAL_RCC_OscConfig+0x172>
 80057a6:	4b62      	ldr	r3, [pc, #392]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a61      	ldr	r2, [pc, #388]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80057b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057bc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d059      	beq.n	800587c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd f812 	bl	80027f0 <HAL_GetTick>
 80057cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d2:	f7fd f80d 	bl	80027f0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d902      	bls.n	80057e8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	f000 be40 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
 80057e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80057f4:	fa93 f3a3 	rbit	r3, r3
 80057f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80057fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d102      	bne.n	800581a <HAL_RCC_OscConfig+0x1ce>
 8005814:	4b46      	ldr	r3, [pc, #280]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	e015      	b.n	8005846 <HAL_RCC_OscConfig+0x1fa>
 800581a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800581e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800582e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005832:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005836:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005842:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800584a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800584e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005852:	fa92 f2a2 	rbit	r2, r2
 8005856:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800585a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800585e:	fab2 f282 	clz	r2, r2
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	f042 0220 	orr.w	r2, r2, #32
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	f002 021f 	and.w	r2, r2, #31
 800586e:	2101      	movs	r1, #1
 8005870:	fa01 f202 	lsl.w	r2, r1, r2
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ab      	beq.n	80057d2 <HAL_RCC_OscConfig+0x186>
 800587a:	e05c      	b.n	8005936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7fc ffb8 	bl	80027f0 <HAL_GetTick>
 8005880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005886:	f7fc ffb3 	bl	80027f0 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d902      	bls.n	800589c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	f000 bde6 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
 800589c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80058a8:	fa93 f3a3 	rbit	r3, r3
 80058ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80058b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b4:	fab3 f383 	clz	r3, r3
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f043 0301 	orr.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <HAL_RCC_OscConfig+0x282>
 80058c8:	4b19      	ldr	r3, [pc, #100]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x2ae>
 80058ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80058e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80058ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80058ee:	fa93 f3a3 	rbit	r3, r3
 80058f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_RCC_OscConfig+0x2e4>)
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058fe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005902:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005906:	fa92 f2a2 	rbit	r2, r2
 800590a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800590e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005912:	fab2 f282 	clz	r2, r2
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	f042 0220 	orr.w	r2, r2, #32
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	f002 021f 	and.w	r2, r2, #31
 8005922:	2101      	movs	r1, #1
 8005924:	fa01 f202 	lsl.w	r2, r1, r2
 8005928:	4013      	ands	r3, r2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ab      	bne.n	8005886 <HAL_RCC_OscConfig+0x23a>
 800592e:	e002      	b.n	8005936 <HAL_RCC_OscConfig+0x2ea>
 8005930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8170 	beq.w	8005c26 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005946:	4bd0      	ldr	r3, [pc, #832]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005952:	4bcd      	ldr	r3, [pc, #820]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b08      	cmp	r3, #8
 800595c:	d16d      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3ee>
 800595e:	4bca      	ldr	r3, [pc, #808]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596a:	d166      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3ee>
 800596c:	2302      	movs	r3, #2
 800596e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005976:	fa93 f3a3 	rbit	r3, r3
 800597a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800597e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d102      	bne.n	800599c <HAL_RCC_OscConfig+0x350>
 8005996:	4bbc      	ldr	r3, [pc, #752]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e013      	b.n	80059c4 <HAL_RCC_OscConfig+0x378>
 800599c:	2302      	movs	r3, #2
 800599e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80059ae:	2302      	movs	r3, #2
 80059b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80059b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80059b8:	fa93 f3a3 	rbit	r3, r3
 80059bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80059c0:	4bb1      	ldr	r3, [pc, #708]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2202      	movs	r2, #2
 80059c6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80059ca:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80059ce:	fa92 f2a2 	rbit	r2, r2
 80059d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80059d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80059da:	fab2 f282 	clz	r2, r2
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	f042 0220 	orr.w	r2, r2, #32
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	f002 021f 	and.w	r2, r2, #31
 80059ea:	2101      	movs	r1, #1
 80059ec:	fa01 f202 	lsl.w	r2, r1, r2
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_RCC_OscConfig+0x3ba>
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d002      	beq.n	8005a06 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f000 bd31 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	4ba0      	ldr	r3, [pc, #640]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	21f8      	movs	r1, #248	; 0xf8
 8005a16:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005a1e:	fa91 f1a1 	rbit	r1, r1
 8005a22:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005a26:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005a2a:	fab1 f181 	clz	r1, r1
 8005a2e:	b2c9      	uxtb	r1, r1
 8005a30:	408b      	lsls	r3, r1
 8005a32:	4995      	ldr	r1, [pc, #596]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a38:	e0f5      	b.n	8005c26 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8085 	beq.w	8005b50 <HAL_RCC_OscConfig+0x504>
 8005a46:	2301      	movs	r3, #1
 8005a48:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a50:	fa93 f3a3 	rbit	r3, r3
 8005a54:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005a58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2301      	movs	r3, #1
 8005a70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fc febd 	bl	80027f0 <HAL_GetTick>
 8005a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fc feb8 	bl	80027f0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d902      	bls.n	8005a92 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	f000 bceb 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005a92:	2302      	movs	r3, #2
 8005a94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a9c:	fa93 f3a3 	rbit	r3, r3
 8005aa0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005aa4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	fab3 f383 	clz	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d102      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x476>
 8005abc:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	e013      	b.n	8005aea <HAL_RCC_OscConfig+0x49e>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005ada:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005ae6:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2202      	movs	r2, #2
 8005aec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005af0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005af4:	fa92 f2a2 	rbit	r2, r2
 8005af8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005afc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005b00:	fab2 f282 	clz	r2, r2
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	f042 0220 	orr.w	r2, r2, #32
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	f002 021f 	and.w	r2, r2, #31
 8005b10:	2101      	movs	r1, #1
 8005b12:	fa01 f202 	lsl.w	r2, r1, r2
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0af      	beq.n	8005a7c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1c:	4b5a      	ldr	r3, [pc, #360]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	21f8      	movs	r1, #248	; 0xf8
 8005b2c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005b34:	fa91 f1a1 	rbit	r1, r1
 8005b38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005b3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005b40:	fab1 f181 	clz	r1, r1
 8005b44:	b2c9      	uxtb	r1, r1
 8005b46:	408b      	lsls	r3, r1
 8005b48:	494f      	ldr	r1, [pc, #316]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	e06a      	b.n	8005c26 <HAL_RCC_OscConfig+0x5da>
 8005b50:	2301      	movs	r3, #1
 8005b52:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005b62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b66:	fab3 f383 	clz	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fc fe38 	bl	80027f0 <HAL_GetTick>
 8005b80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b86:	f7fc fe33 	bl	80027f0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f000 bc66 	b.w	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ba6:	fa93 f3a3 	rbit	r3, r3
 8005baa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005bae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb2:	fab3 f383 	clz	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCC_OscConfig+0x580>
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	e013      	b.n	8005bf4 <HAL_RCC_OscConfig+0x5a8>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	fa93 f3a3 	rbit	r3, r3
 8005bda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005bde:	2302      	movs	r3, #2
 8005be0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005be4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <HAL_RCC_OscConfig+0x63c>)
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005bfa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005bfe:	fa92 f2a2 	rbit	r2, r2
 8005c02:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005c06:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005c0a:	fab2 f282 	clz	r2, r2
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	f042 0220 	orr.w	r2, r2, #32
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	f002 021f 	and.w	r2, r2, #31
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1af      	bne.n	8005b86 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80da 	beq.w	8005dea <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c36:	1d3b      	adds	r3, r7, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d069      	beq.n	8005d14 <HAL_RCC_OscConfig+0x6c8>
 8005c40:	2301      	movs	r3, #1
 8005c42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005c52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c56:	fab3 f383 	clz	r3, r3
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_OscConfig+0x640>)
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	461a      	mov	r2, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fc fdc1 	bl	80027f0 <HAL_GetTick>
 8005c6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	e00d      	b.n	8005c90 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c74:	f7fc fdbc 	bl	80027f0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d905      	bls.n	8005c90 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e3ef      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	10908120 	.word	0x10908120
 8005c90:	2302      	movs	r3, #2
 8005c92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9a:	fa93 f2a3 	rbit	r2, r3
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005ca8:	2202      	movs	r2, #2
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	fa93 f2a3 	rbit	r2, r3
 8005cb6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	fa93 f2a3 	rbit	r2, r3
 8005cce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005cd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd4:	4ba4      	ldr	r3, [pc, #656]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005cdc:	2102      	movs	r1, #2
 8005cde:	6019      	str	r1, [r3, #0]
 8005ce0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	fa93 f1a3 	rbit	r1, r3
 8005cea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005cee:	6019      	str	r1, [r3, #0]
  return result;
 8005cf0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	fab3 f383 	clz	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2101      	movs	r1, #1
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0b0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x628>
 8005d12:	e06a      	b.n	8005dea <HAL_RCC_OscConfig+0x79e>
 8005d14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	fa93 f2a3 	rbit	r2, r3
 8005d26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005d2a:	601a      	str	r2, [r3, #0]
  return result;
 8005d2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005d30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4b8c      	ldr	r3, [pc, #560]	; (8005f6c <HAL_RCC_OscConfig+0x920>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	461a      	mov	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d46:	f7fc fd53 	bl	80027f0 <HAL_GetTick>
 8005d4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4e:	e009      	b.n	8005d64 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d50:	f7fc fd4e 	bl	80027f0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e381      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005d64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d68:	2202      	movs	r2, #2
 8005d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	fa93 f2a3 	rbit	r2, r3
 8005d76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d80:	2202      	movs	r2, #2
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	fa93 f2a3 	rbit	r2, r3
 8005d8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d98:	2202      	movs	r2, #2
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	fa93 f2a3 	rbit	r2, r3
 8005da6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005daa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dac:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005db4:	2102      	movs	r1, #2
 8005db6:	6019      	str	r1, [r3, #0]
 8005db8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	fa93 f1a3 	rbit	r1, r3
 8005dc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005dc6:	6019      	str	r1, [r3, #0]
  return result;
 8005dc8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2101      	movs	r1, #1
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1b2      	bne.n	8005d50 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dea:	1d3b      	adds	r3, r7, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8157 	beq.w	80060a8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e00:	4b59      	ldr	r3, [pc, #356]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d112      	bne.n	8005e32 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0c:	4b56      	ldr	r3, [pc, #344]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	4a55      	ldr	r2, [pc, #340]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e16:	61d3      	str	r3, [r2, #28]
 8005e18:	4b53      	ldr	r3, [pc, #332]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005e20:	f107 030c 	add.w	r3, r7, #12
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e32:	4b4f      	ldr	r3, [pc, #316]	; (8005f70 <HAL_RCC_OscConfig+0x924>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11a      	bne.n	8005e74 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3e:	4b4c      	ldr	r3, [pc, #304]	; (8005f70 <HAL_RCC_OscConfig+0x924>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a4b      	ldr	r2, [pc, #300]	; (8005f70 <HAL_RCC_OscConfig+0x924>)
 8005e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e4a:	f7fc fcd1 	bl	80027f0 <HAL_GetTick>
 8005e4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	e009      	b.n	8005e68 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e54:	f7fc fccc 	bl	80027f0 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b64      	cmp	r3, #100	; 0x64
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e2ff      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e68:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <HAL_RCC_OscConfig+0x924>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ef      	beq.n	8005e54 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x840>
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	4a39      	ldr	r2, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6213      	str	r3, [r2, #32]
 8005e8a:	e02f      	b.n	8005eec <HAL_RCC_OscConfig+0x8a0>
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x864>
 8005e96:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	6213      	str	r3, [r2, #32]
 8005ea2:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4a30      	ldr	r2, [pc, #192]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ea8:	f023 0304 	bic.w	r3, r3, #4
 8005eac:	6213      	str	r3, [r2, #32]
 8005eae:	e01d      	b.n	8005eec <HAL_RCC_OscConfig+0x8a0>
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x888>
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6213      	str	r3, [r2, #32]
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	6213      	str	r3, [r2, #32]
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0x8a0>
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6213      	str	r3, [r2, #32]
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d06a      	beq.n	8005fcc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef6:	f7fc fc7b 	bl	80027f0 <HAL_GetTick>
 8005efa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efe:	e00b      	b.n	8005f18 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fc fc76 	bl	80027f0 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e2a7      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005f18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	fa93 f2a3 	rbit	r2, r3
 8005f2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f34:	2202      	movs	r2, #2
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	fa93 f2a3 	rbit	r2, r3
 8005f42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f46:	601a      	str	r2, [r3, #0]
  return result;
 8005f48:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4e:	fab3 f383 	clz	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_OscConfig+0x928>
 8005f62:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <HAL_RCC_OscConfig+0x91c>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	e013      	b.n	8005f90 <HAL_RCC_OscConfig+0x944>
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	10908120 	.word	0x10908120
 8005f70:	40007000 	.word	0x40007000
 8005f74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f78:	2202      	movs	r2, #2
 8005f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	fa93 f2a3 	rbit	r2, r3
 8005f86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	4bc0      	ldr	r3, [pc, #768]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f94:	2102      	movs	r1, #2
 8005f96:	6011      	str	r1, [r2, #0]
 8005f98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	fa92 f1a2 	rbit	r1, r2
 8005fa2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005fa6:	6011      	str	r1, [r2, #0]
  return result;
 8005fa8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	fab2 f282 	clz	r2, r2
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	f002 021f 	and.w	r2, r2, #31
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d09a      	beq.n	8005f00 <HAL_RCC_OscConfig+0x8b4>
 8005fca:	e063      	b.n	8006094 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fcc:	f7fc fc10 	bl	80027f0 <HAL_GetTick>
 8005fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd4:	e00b      	b.n	8005fee <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd6:	f7fc fc0b 	bl	80027f0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e23c      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8005fee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	fa93 f2a3 	rbit	r2, r3
 8006000:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800600a:	2202      	movs	r2, #2
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	fa93 f2a3 	rbit	r2, r3
 8006018:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800601c:	601a      	str	r2, [r3, #0]
  return result;
 800601e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006022:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006024:	fab3 f383 	clz	r3, r3
 8006028:	b2db      	uxtb	r3, r3
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d102      	bne.n	800603e <HAL_RCC_OscConfig+0x9f2>
 8006038:	4b95      	ldr	r3, [pc, #596]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	e00d      	b.n	800605a <HAL_RCC_OscConfig+0xa0e>
 800603e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006042:	2202      	movs	r2, #2
 8006044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006046:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	fa93 f2a3 	rbit	r2, r3
 8006050:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	4b8e      	ldr	r3, [pc, #568]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800605e:	2102      	movs	r1, #2
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	fa92 f1a2 	rbit	r1, r2
 800606c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006070:	6011      	str	r1, [r2, #0]
  return result;
 8006072:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	fab2 f282 	clz	r2, r2
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	f002 021f 	and.w	r2, r2, #31
 8006088:	2101      	movs	r1, #1
 800608a:	fa01 f202 	lsl.w	r2, r1, r2
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1a0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006094:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609c:	4b7c      	ldr	r3, [pc, #496]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	4a7b      	ldr	r2, [pc, #492]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80060a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81d9 	beq.w	8006466 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b4:	4b76      	ldr	r3, [pc, #472]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	f000 81a6 	beq.w	800640e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f040 811e 	bne.w	800630a <HAL_RCC_OscConfig+0xcbe>
 80060ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80060d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	fa93 f2a3 	rbit	r2, r3
 80060e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060e6:	601a      	str	r2, [r3, #0]
  return result;
 80060e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	461a      	mov	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006104:	f7fc fb74 	bl	80027f0 <HAL_GetTick>
 8006108:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800610c:	e009      	b.n	8006122 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610e:	f7fc fb6f 	bl	80027f0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e1a2      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8006122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800612a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	fa93 f2a3 	rbit	r2, r3
 8006136:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800613a:	601a      	str	r2, [r3, #0]
  return result;
 800613c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006140:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006142:	fab3 f383 	clz	r3, r3
 8006146:	b2db      	uxtb	r3, r3
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	d102      	bne.n	800615c <HAL_RCC_OscConfig+0xb10>
 8006156:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	e01b      	b.n	8006194 <HAL_RCC_OscConfig+0xb48>
 800615c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	fa93 f2a3 	rbit	r2, r3
 8006170:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800617a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	fa93 f2a3 	rbit	r2, r3
 800618a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800619c:	6011      	str	r1, [r2, #0]
 800619e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	fa92 f1a2 	rbit	r1, r2
 80061a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80061ac:	6011      	str	r1, [r2, #0]
  return result;
 80061ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	fab2 f282 	clz	r2, r2
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	f042 0220 	orr.w	r2, r2, #32
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	f002 021f 	and.w	r2, r2, #31
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d19e      	bne.n	800610e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d0:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f023 020f 	bic.w	r2, r3, #15
 80061d8:	1d3b      	adds	r3, r7, #4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	492c      	ldr	r1, [pc, #176]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80061e4:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a19      	ldr	r1, [r3, #32]
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	4925      	ldr	r1, [pc, #148]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	fa93 f2a3 	rbit	r2, r3
 8006214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006218:	601a      	str	r2, [r3, #0]
  return result;
 800621a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800621e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	fab3 f383 	clz	r3, r3
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800622a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	461a      	mov	r2, r3
 8006232:	2301      	movs	r3, #1
 8006234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006236:	f7fc fadb 	bl	80027f0 <HAL_GetTick>
 800623a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800623e:	e009      	b.n	8006254 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006240:	f7fc fad6 	bl	80027f0 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e109      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 8006254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800625c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	fa93 f2a3 	rbit	r2, r3
 8006268:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800626c:	601a      	str	r2, [r3, #0]
  return result;
 800626e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006272:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006274:	fab3 f383 	clz	r3, r3
 8006278:	b2db      	uxtb	r3, r3
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <HAL_RCC_OscConfig+0xc48>
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <HAL_RCC_OscConfig+0xc44>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	e01e      	b.n	80062cc <HAL_RCC_OscConfig+0xc80>
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800629c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	fa93 f2a3 	rbit	r2, r3
 80062a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	fa93 f2a3 	rbit	r2, r3
 80062c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	4b6a      	ldr	r3, [pc, #424]	; (8006474 <HAL_RCC_OscConfig+0xe28>)
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80062d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	fa92 f1a2 	rbit	r1, r2
 80062e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80062e4:	6011      	str	r1, [r2, #0]
  return result;
 80062e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	fab2 f282 	clz	r2, r2
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	f042 0220 	orr.w	r2, r2, #32
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	f002 021f 	and.w	r2, r2, #31
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d09b      	beq.n	8006240 <HAL_RCC_OscConfig+0xbf4>
 8006308:	e0ad      	b.n	8006466 <HAL_RCC_OscConfig+0xe1a>
 800630a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800630e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	fa93 f2a3 	rbit	r2, r3
 800631e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006322:	601a      	str	r2, [r3, #0]
  return result;
 8006324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006328:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006340:	f7fc fa56 	bl	80027f0 <HAL_GetTick>
 8006344:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006348:	e009      	b.n	800635e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634a:	f7fc fa51 	bl	80027f0 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e084      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
 800635e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	fa93 f2a3 	rbit	r2, r3
 8006372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006376:	601a      	str	r2, [r3, #0]
  return result;
 8006378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800637c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800637e:	fab3 f383 	clz	r3, r3
 8006382:	b2db      	uxtb	r3, r3
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d102      	bne.n	8006398 <HAL_RCC_OscConfig+0xd4c>
 8006392:	4b38      	ldr	r3, [pc, #224]	; (8006474 <HAL_RCC_OscConfig+0xe28>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	e01b      	b.n	80063d0 <HAL_RCC_OscConfig+0xd84>
 8006398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	fa93 f2a3 	rbit	r2, r3
 80063ac:	f107 0320 	add.w	r3, r7, #32
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f107 031c 	add.w	r3, r7, #28
 80063b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	f107 031c 	add.w	r3, r7, #28
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	fa93 f2a3 	rbit	r2, r3
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	4b29      	ldr	r3, [pc, #164]	; (8006474 <HAL_RCC_OscConfig+0xe28>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	f107 0214 	add.w	r2, r7, #20
 80063d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	f107 0214 	add.w	r2, r7, #20
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	fa92 f1a2 	rbit	r1, r2
 80063e4:	f107 0210 	add.w	r2, r7, #16
 80063e8:	6011      	str	r1, [r2, #0]
  return result;
 80063ea:	f107 0210 	add.w	r2, r7, #16
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	fab2 f282 	clz	r2, r2
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	f042 0220 	orr.w	r2, r2, #32
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	f002 021f 	and.w	r2, r2, #31
 8006400:	2101      	movs	r1, #1
 8006402:	fa01 f202 	lsl.w	r2, r1, r2
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d19e      	bne.n	800634a <HAL_RCC_OscConfig+0xcfe>
 800640c:	e02b      	b.n	8006466 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e025      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <HAL_RCC_OscConfig+0xe28>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCC_OscConfig+0xe28>)
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800642c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006430:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	429a      	cmp	r2, r3
 800643c:	d111      	bne.n	8006462 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800643e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800644c:	429a      	cmp	r2, r3
 800644e:	d108      	bne.n	8006462 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800645e:	429a      	cmp	r2, r3
 8006460:	d001      	beq.n	8006466 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000

08006478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b09e      	sub	sp, #120	; 0x78
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e162      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006490:	4b90      	ldr	r3, [pc, #576]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d910      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	4b8d      	ldr	r3, [pc, #564]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 0207 	bic.w	r2, r3, #7
 80064a6:	498b      	ldr	r1, [pc, #556]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d001      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e14a      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064cc:	4b82      	ldr	r3, [pc, #520]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	497f      	ldr	r1, [pc, #508]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80dc 	beq.w	80066a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d13c      	bne.n	800656e <HAL_RCC_ClockConfig+0xf6>
 80064f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006504:	fab3 f383 	clz	r3, r3
 8006508:	b2db      	uxtb	r3, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d102      	bne.n	800651e <HAL_RCC_ClockConfig+0xa6>
 8006518:	4b6f      	ldr	r3, [pc, #444]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	e00f      	b.n	800653e <HAL_RCC_ClockConfig+0xc6>
 800651e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006526:	fa93 f3a3 	rbit	r3, r3
 800652a:	667b      	str	r3, [r7, #100]	; 0x64
 800652c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006530:	663b      	str	r3, [r7, #96]	; 0x60
 8006532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653a:	4b67      	ldr	r3, [pc, #412]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006542:	65ba      	str	r2, [r7, #88]	; 0x58
 8006544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006546:	fa92 f2a2 	rbit	r2, r2
 800654a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800654c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800654e:	fab2 f282 	clz	r2, r2
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	f042 0220 	orr.w	r2, r2, #32
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	f002 021f 	and.w	r2, r2, #31
 800655e:	2101      	movs	r1, #1
 8006560:	fa01 f202 	lsl.w	r2, r1, r2
 8006564:	4013      	ands	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d17b      	bne.n	8006662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0f3      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d13c      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x178>
 8006576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657e:	fa93 f3a3 	rbit	r3, r3
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006586:	fab3 f383 	clz	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	d102      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x128>
 800659a:	4b4f      	ldr	r3, [pc, #316]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	e00f      	b.n	80065c0 <HAL_RCC_ClockConfig+0x148>
 80065a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
 80065ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065b2:	643b      	str	r3, [r7, #64]	; 0x40
 80065b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b6:	fa93 f3a3 	rbit	r3, r3
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	4b46      	ldr	r3, [pc, #280]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80065c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c8:	fa92 f2a2 	rbit	r2, r2
 80065cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80065ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d0:	fab2 f282 	clz	r2, r2
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	f042 0220 	orr.w	r2, r2, #32
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	f002 021f 	and.w	r2, r2, #31
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f202 	lsl.w	r2, r1, r2
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d13a      	bne.n	8006662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0b2      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
 80065f0:	2302      	movs	r3, #2
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	fa93 f3a3 	rbit	r3, r3
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	fab3 f383 	clz	r3, r3
 8006602:	b2db      	uxtb	r3, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b01      	cmp	r3, #1
 8006610:	d102      	bne.n	8006618 <HAL_RCC_ClockConfig+0x1a0>
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	e00d      	b.n	8006634 <HAL_RCC_ClockConfig+0x1bc>
 8006618:	2302      	movs	r3, #2
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	fa93 f3a3 	rbit	r3, r3
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
 8006624:	2302      	movs	r3, #2
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	fa93 f3a3 	rbit	r3, r3
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	2202      	movs	r2, #2
 8006636:	61ba      	str	r2, [r7, #24]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	fa92 f2a2 	rbit	r2, r2
 800663e:	617a      	str	r2, [r7, #20]
  return result;
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	fab2 f282 	clz	r2, r2
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	f042 0220 	orr.w	r2, r2, #32
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	f002 021f 	and.w	r2, r2, #31
 8006652:	2101      	movs	r1, #1
 8006654:	fa01 f202 	lsl.w	r2, r1, r2
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e079      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f023 0203 	bic.w	r2, r3, #3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	491a      	ldr	r1, [pc, #104]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006674:	f7fc f8bc 	bl	80027f0 <HAL_GetTick>
 8006678:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667a:	e00a      	b.n	8006692 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667c:	f7fc f8b8 	bl	80027f0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f241 3288 	movw	r2, #5000	; 0x1388
 800668a:	4293      	cmp	r3, r2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e061      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006692:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <HAL_RCC_ClockConfig+0x260>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f003 020c 	and.w	r2, r3, #12
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d1eb      	bne.n	800667c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d214      	bcs.n	80066dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 0207 	bic.w	r2, r3, #7
 80066ba:	4906      	ldr	r1, [pc, #24]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b04      	ldr	r3, [pc, #16]	; (80066d4 <HAL_RCC_ClockConfig+0x25c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e040      	b.n	8006756 <HAL_RCC_ClockConfig+0x2de>
 80066d4:	40022000 	.word	0x40022000
 80066d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <HAL_RCC_ClockConfig+0x2e8>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	491a      	ldr	r1, [pc, #104]	; (8006760 <HAL_RCC_ClockConfig+0x2e8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <HAL_RCC_ClockConfig+0x2e8>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4912      	ldr	r1, [pc, #72]	; (8006760 <HAL_RCC_ClockConfig+0x2e8>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800671a:	f000 f829 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 800671e:	4601      	mov	r1, r0
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <HAL_RCC_ClockConfig+0x2e8>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006728:	22f0      	movs	r2, #240	; 0xf0
 800672a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	fa92 f2a2 	rbit	r2, r2
 8006732:	60fa      	str	r2, [r7, #12]
  return result;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	fab2 f282 	clz	r2, r2
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	40d3      	lsrs	r3, r2
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <HAL_RCC_ClockConfig+0x2ec>)
 8006740:	5cd3      	ldrb	r3, [r2, r3]
 8006742:	fa21 f303 	lsr.w	r3, r1, r3
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <HAL_RCC_ClockConfig+0x2f0>)
 8006748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_RCC_ClockConfig+0x2f4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7fc f80a 	bl	8002768 <HAL_InitTick>
  
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3778      	adds	r7, #120	; 0x78
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40021000 	.word	0x40021000
 8006764:	08013390 	.word	0x08013390
 8006768:	20000000 	.word	0x20000000
 800676c:	2000000c 	.word	0x2000000c

08006770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006770:	b480      	push	{r7}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800678a:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <HAL_RCC_GetSysClockFreq+0xc4>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	2b04      	cmp	r3, #4
 8006798:	d002      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x30>
 800679a:	2b08      	cmp	r3, #8
 800679c:	d003      	beq.n	80067a6 <HAL_RCC_GetSysClockFreq+0x36>
 800679e:	e03f      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067a2:	623b      	str	r3, [r7, #32]
      break;
 80067a4:	e03f      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80067ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80067b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	fa92 f2a2 	rbit	r2, r2
 80067b8:	607a      	str	r2, [r7, #4]
  return result;
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	fab2 f282 	clz	r2, r2
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	40d3      	lsrs	r3, r2
 80067c4:	4a1d      	ldr	r2, [pc, #116]	; (800683c <HAL_RCC_GetSysClockFreq+0xcc>)
 80067c6:	5cd3      	ldrb	r3, [r2, r3]
 80067c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	220f      	movs	r2, #15
 80067d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	fa92 f2a2 	rbit	r2, r2
 80067dc:	60fa      	str	r2, [r7, #12]
  return result;
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	fab2 f282 	clz	r2, r2
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	40d3      	lsrs	r3, r2
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067ea:	5cd3      	ldrb	r3, [r2, r3]
 80067ec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067f8:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
 8006808:	e007      	b.n	800681a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800680a:	4a0b      	ldr	r2, [pc, #44]	; (8006838 <HAL_RCC_GetSysClockFreq+0xc8>)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	623b      	str	r3, [r7, #32]
      break;
 800681e:	e002      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006822:	623b      	str	r3, [r7, #32]
      break;
 8006824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006826:	6a3b      	ldr	r3, [r7, #32]
}
 8006828:	4618      	mov	r0, r3
 800682a:	372c      	adds	r7, #44	; 0x2c
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40021000 	.word	0x40021000
 8006838:	007a1200 	.word	0x007a1200
 800683c:	080133a8 	.word	0x080133a8
 8006840:	080133b8 	.word	0x080133b8

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006862:	f7ff ffef 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006866:	4601      	mov	r1, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006870:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006874:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	fa92 f2a2 	rbit	r2, r2
 800687c:	603a      	str	r2, [r7, #0]
  return result;
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	fab2 f282 	clz	r2, r2
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	40d3      	lsrs	r3, r2
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <HAL_RCC_GetPCLK1Freq+0x40>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	080133a0 	.word	0x080133a0

080068a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80068a6:	f7ff ffcd 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 80068aa:	4601      	mov	r1, r0
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80068b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80068b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	fa92 f2a2 	rbit	r2, r2
 80068c0:	603a      	str	r2, [r7, #0]
  return result;
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	fab2 f282 	clz	r2, r2
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	40d3      	lsrs	r3, r2
 80068cc:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80068ce:	5cd3      	ldrb	r3, [r2, r3]
 80068d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	080133a0 	.word	0x080133a0

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b092      	sub	sp, #72	; 0x48
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80d4 	beq.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006908:	4b4e      	ldr	r3, [pc, #312]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10e      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4a4a      	ldr	r2, [pc, #296]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691e:	61d3      	str	r3, [r2, #28]
 8006920:	4b48      	ldr	r3, [pc, #288]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006932:	4b45      	ldr	r3, [pc, #276]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d118      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800693e:	4b42      	ldr	r3, [pc, #264]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a41      	ldr	r2, [pc, #260]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800694a:	f7fb ff51 	bl	80027f0 <HAL_GetTick>
 800694e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006952:	f7fb ff4d 	bl	80027f0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b64      	cmp	r3, #100	; 0x64
 800695e:	d901      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e1d6      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006964:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8084 	beq.w	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800698c:	429a      	cmp	r2, r3
 800698e:	d07c      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006990:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800699e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	fa93 f3a3 	rbit	r3, r3
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069aa:	fab3 f383 	clz	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	461a      	mov	r2, r3
 80069ba:	2301      	movs	r3, #1
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	fa93 f3a3 	rbit	r3, r3
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	461a      	mov	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069e2:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d04b      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f2:	f7fb fefd 	bl	80027f0 <HAL_GetTick>
 80069f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f8:	e00a      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fb fef9 	bl	80027f0 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e180      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	fa93 f3a3 	rbit	r3, r3
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	61fb      	str	r3, [r7, #28]
  return result;
 8006a28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d108      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006a3e:	4b01      	ldr	r3, [pc, #4]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	e00d      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40007000 	.word	0x40007000
 8006a4c:	10908100 	.word	0x10908100
 8006a50:	2302      	movs	r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	fa93 f3a3 	rbit	r3, r3
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	4ba0      	ldr	r3, [pc, #640]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2202      	movs	r2, #2
 8006a62:	613a      	str	r2, [r7, #16]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	fa92 f2a2 	rbit	r2, r2
 8006a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	fab2 f282 	clz	r2, r2
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	f002 021f 	and.w	r2, r2, #31
 8006a7e:	2101      	movs	r1, #1
 8006a80:	fa01 f202 	lsl.w	r2, r1, r2
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0b7      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006a8a:	4b95      	ldr	r3, [pc, #596]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4992      	ldr	r1, [pc, #584]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa4:	4b8e      	ldr	r3, [pc, #568]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4a8d      	ldr	r2, [pc, #564]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006abc:	4b88      	ldr	r3, [pc, #544]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	f023 0203 	bic.w	r2, r3, #3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4985      	ldr	r1, [pc, #532]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ada:	4b81      	ldr	r3, [pc, #516]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	497e      	ldr	r1, [pc, #504]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006af8:	4b79      	ldr	r3, [pc, #484]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	4976      	ldr	r1, [pc, #472]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b16:	4b72      	ldr	r3, [pc, #456]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f023 0210 	bic.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	496f      	ldr	r1, [pc, #444]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006b34:	4b6a      	ldr	r3, [pc, #424]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b40:	4967      	ldr	r1, [pc, #412]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b52:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f023 0220 	bic.w	r2, r3, #32
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	4960      	ldr	r1, [pc, #384]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b70:	4b5b      	ldr	r3, [pc, #364]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	4958      	ldr	r1, [pc, #352]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b8e:	4b54      	ldr	r3, [pc, #336]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	4951      	ldr	r1, [pc, #324]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bac:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	4949      	ldr	r1, [pc, #292]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bca:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4942      	ldr	r1, [pc, #264]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006be8:	4b3d      	ldr	r3, [pc, #244]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	493a      	ldr	r1, [pc, #232]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4933      	ldr	r1, [pc, #204]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c30:	492b      	ldr	r1, [pc, #172]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	4924      	ldr	r1, [pc, #144]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	491c      	ldr	r1, [pc, #112]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006c7e:	4b18      	ldr	r3, [pc, #96]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	4915      	ldr	r1, [pc, #84]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c9c:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	490d      	ldr	r1, [pc, #52]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d008      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc6:	4906      	ldr	r1, [pc, #24]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00c      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006cde:	bf00      	nop
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cec:	490b      	ldr	r1, [pc, #44]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0a:	4904      	ldr	r1, [pc, #16]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3748      	adds	r7, #72	; 0x48
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000

08006d20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d001      	beq.n	8006d38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e047      	b.n	8006dc8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a23      	ldr	r2, [pc, #140]	; (8006dd4 <HAL_TIM_Base_Start+0xb4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d018      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <HAL_TIM_Base_Start+0xb8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <HAL_TIM_Base_Start+0xbc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_TIM_Base_Start+0xc0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_TIM_Base_Start+0xc4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_Base_Start+0x66>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <HAL_TIM_Base_Start+0xc8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d115      	bne.n	8006db2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <HAL_TIM_Base_Start+0xcc>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d015      	beq.n	8006dc4 <HAL_TIM_Base_Start+0xa4>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d011      	beq.n	8006dc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	e008      	b.n	8006dc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40013400 	.word	0x40013400
 8006de4:	40014000 	.word	0x40014000
 8006de8:	40015000 	.word	0x40015000
 8006dec:	00010007 	.word	0x00010007

08006df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e049      	b.n	8006e96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fb f966 	bl	80020e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 fb8a 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x24>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e03c      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d109      	bne.n	8006ede <HAL_TIM_PWM_Start+0x3e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e02f      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d109      	bne.n	8006ef8 <HAL_TIM_PWM_Start+0x58>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e022      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	d109      	bne.n	8006f12 <HAL_TIM_PWM_Start+0x72>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	e015      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d109      	bne.n	8006f2c <HAL_TIM_PWM_Start+0x8c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e008      	b.n	8006f3e <HAL_TIM_PWM_Start+0x9e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0a1      	b.n	800708a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_PWM_Start+0xb6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f54:	e023      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_PWM_Start+0xc6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f64:	e01b      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_PWM_Start+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f74:	e013      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0xe6>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f84:	e00b      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_PWM_Start+0xf6>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f94:	e003      	b.n	8006f9e <HAL_TIM_PWM_Start+0xfe>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fe72 	bl	8007c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a38      	ldr	r2, [pc, #224]	; (8007094 <HAL_TIM_PWM_Start+0x1f4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0x148>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a37      	ldr	r2, [pc, #220]	; (8007098 <HAL_TIM_PWM_Start+0x1f8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0x148>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a35      	ldr	r2, [pc, #212]	; (800709c <HAL_TIM_PWM_Start+0x1fc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0x148>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a34      	ldr	r2, [pc, #208]	; (80070a0 <HAL_TIM_PWM_Start+0x200>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0x148>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a32      	ldr	r2, [pc, #200]	; (80070a4 <HAL_TIM_PWM_Start+0x204>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0x148>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a31      	ldr	r2, [pc, #196]	; (80070a8 <HAL_TIM_PWM_Start+0x208>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d101      	bne.n	8006fec <HAL_TIM_PWM_Start+0x14c>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_TIM_PWM_Start+0x14e>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a23      	ldr	r2, [pc, #140]	; (8007094 <HAL_TIM_PWM_Start+0x1f4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d018      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a24      	ldr	r2, [pc, #144]	; (80070ac <HAL_TIM_PWM_Start+0x20c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <HAL_TIM_PWM_Start+0x210>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <HAL_TIM_PWM_Start+0x1f8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_TIM_PWM_Start+0x1fc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIM_PWM_Start+0x1a8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a19      	ldr	r2, [pc, #100]	; (80070a8 <HAL_TIM_PWM_Start+0x208>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d115      	bne.n	8007074 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <HAL_TIM_PWM_Start+0x214>)
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b06      	cmp	r3, #6
 8007058:	d015      	beq.n	8007086 <HAL_TIM_PWM_Start+0x1e6>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007060:	d011      	beq.n	8007086 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007072:	e008      	b.n	8007086 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e000      	b.n	8007088 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	40015000 	.word	0x40015000
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	00010007 	.word	0x00010007

080070b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e097      	b.n	80071fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fa ff71 	bl	8001fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3304      	adds	r3, #4
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f000 fa1b 	bl	8007548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	4313      	orrs	r3, r2
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007158:	f023 030c 	bic.w	r3, r3, #12
 800715c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	4313      	orrs	r3, r2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	011a      	lsls	r2, r3, #4
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	031b      	lsls	r3, r3, #12
 8007188:	4313      	orrs	r3, r2
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	4313      	orrs	r3, r2
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007214:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800721c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007224:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800722c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d110      	bne.n	8007256 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800723a:	7b7b      	ldrb	r3, [r7, #13]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d001      	beq.n	8007244 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e068      	b.n	8007316 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007254:	e031      	b.n	80072ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b04      	cmp	r3, #4
 800725a:	d110      	bne.n	800727e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d102      	bne.n	8007268 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007262:	7b3b      	ldrb	r3, [r7, #12]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d001      	beq.n	800726c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e054      	b.n	8007316 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800727c:	e01d      	b.n	80072ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d108      	bne.n	8007296 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d105      	bne.n	8007296 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800728a:	7b7b      	ldrb	r3, [r7, #13]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d102      	bne.n	8007296 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007290:	7b3b      	ldrb	r3, [r7, #12]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d001      	beq.n	800729a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e03d      	b.n	8007316 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_TIM_Encoder_Start+0xc2>
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d008      	beq.n	80072d6 <HAL_TIM_Encoder_Start+0xd2>
 80072c4:	e00f      	b.n	80072e6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fcde 	bl	8007c90 <TIM_CCxChannelCmd>
      break;
 80072d4:	e016      	b.n	8007304 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2201      	movs	r2, #1
 80072dc:	2104      	movs	r1, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fcd6 	bl	8007c90 <TIM_CCxChannelCmd>
      break;
 80072e4:	e00e      	b.n	8007304 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2201      	movs	r2, #1
 80072ec:	2100      	movs	r1, #0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fcce 	bl	8007c90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2201      	movs	r2, #1
 80072fa:	2104      	movs	r1, #4
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fcc7 	bl	8007c90 <TIM_CCxChannelCmd>
      break;
 8007302:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800733a:	2302      	movs	r3, #2
 800733c:	e0ff      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b14      	cmp	r3, #20
 800734a:	f200 80f0 	bhi.w	800752e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	080073a9 	.word	0x080073a9
 8007358:	0800752f 	.word	0x0800752f
 800735c:	0800752f 	.word	0x0800752f
 8007360:	0800752f 	.word	0x0800752f
 8007364:	080073e9 	.word	0x080073e9
 8007368:	0800752f 	.word	0x0800752f
 800736c:	0800752f 	.word	0x0800752f
 8007370:	0800752f 	.word	0x0800752f
 8007374:	0800742b 	.word	0x0800742b
 8007378:	0800752f 	.word	0x0800752f
 800737c:	0800752f 	.word	0x0800752f
 8007380:	0800752f 	.word	0x0800752f
 8007384:	0800746b 	.word	0x0800746b
 8007388:	0800752f 	.word	0x0800752f
 800738c:	0800752f 	.word	0x0800752f
 8007390:	0800752f 	.word	0x0800752f
 8007394:	080074ad 	.word	0x080074ad
 8007398:	0800752f 	.word	0x0800752f
 800739c:	0800752f 	.word	0x0800752f
 80073a0:	0800752f 	.word	0x0800752f
 80073a4:	080074ed 	.word	0x080074ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f968 	bl	8007684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0208 	orr.w	r2, r2, #8
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0204 	bic.w	r2, r2, #4
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	619a      	str	r2, [r3, #24]
      break;
 80073e6:	e0a5      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f9e2 	bl	80077b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6999      	ldr	r1, [r3, #24]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	021a      	lsls	r2, r3, #8
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	619a      	str	r2, [r3, #24]
      break;
 8007428:	e084      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fa55 	bl	80078e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0208 	orr.w	r2, r2, #8
 8007444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0204 	bic.w	r2, r2, #4
 8007454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	61da      	str	r2, [r3, #28]
      break;
 8007468:	e064      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fac7 	bl	8007a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69d9      	ldr	r1, [r3, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	021a      	lsls	r2, r3, #8
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	61da      	str	r2, [r3, #28]
      break;
 80074aa:	e043      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fb16 	bl	8007ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0204 	bic.w	r2, r2, #4
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074ea:	e023      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fb60 	bl	8007bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	021a      	lsls	r2, r3, #8
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800752c:	e002      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
      break;
 8007532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a42      	ldr	r2, [pc, #264]	; (8007664 <TIM_Base_SetConfig+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d00f      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3f      	ldr	r2, [pc, #252]	; (8007668 <TIM_Base_SetConfig+0x120>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3e      	ldr	r2, [pc, #248]	; (800766c <TIM_Base_SetConfig+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <TIM_Base_SetConfig+0x128>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a3c      	ldr	r2, [pc, #240]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a31      	ldr	r2, [pc, #196]	; (8007664 <TIM_Base_SetConfig+0x11c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01f      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a8:	d01b      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <TIM_Base_SetConfig+0x120>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d017      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2d      	ldr	r2, [pc, #180]	; (800766c <TIM_Base_SetConfig+0x124>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <TIM_Base_SetConfig+0x128>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <TIM_Base_SetConfig+0x130>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2b      	ldr	r2, [pc, #172]	; (800767c <TIM_Base_SetConfig+0x134>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2a      	ldr	r2, [pc, #168]	; (8007680 <TIM_Base_SetConfig+0x138>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a25      	ldr	r2, [pc, #148]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d108      	bne.n	80075f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a12      	ldr	r2, [pc, #72]	; (8007664 <TIM_Base_SetConfig+0x11c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <TIM_Base_SetConfig+0x100>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a13      	ldr	r2, [pc, #76]	; (8007670 <TIM_Base_SetConfig+0x128>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00f      	beq.n	8007648 <TIM_Base_SetConfig+0x100>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a13      	ldr	r2, [pc, #76]	; (8007678 <TIM_Base_SetConfig+0x130>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00b      	beq.n	8007648 <TIM_Base_SetConfig+0x100>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <TIM_Base_SetConfig+0x134>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <TIM_Base_SetConfig+0x100>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a11      	ldr	r2, [pc, #68]	; (8007680 <TIM_Base_SetConfig+0x138>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0x100>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d103      	bne.n	8007650 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	615a      	str	r2, [r3, #20]
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40013400 	.word	0x40013400
 8007674:	40015000 	.word	0x40015000
 8007678:	40014000 	.word	0x40014000
 800767c:	40014400 	.word	0x40014400
 8007680:	40014800 	.word	0x40014800

08007684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f023 0302 	bic.w	r3, r3, #2
 80076d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a30      	ldr	r2, [pc, #192]	; (80077a0 <TIM_OC1_SetConfig+0x11c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <TIM_OC1_SetConfig+0x88>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a2f      	ldr	r2, [pc, #188]	; (80077a4 <TIM_OC1_SetConfig+0x120>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00f      	beq.n	800770c <TIM_OC1_SetConfig+0x88>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <TIM_OC1_SetConfig+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_OC1_SetConfig+0x88>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a2d      	ldr	r2, [pc, #180]	; (80077ac <TIM_OC1_SetConfig+0x128>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_OC1_SetConfig+0x88>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <TIM_OC1_SetConfig+0x12c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_OC1_SetConfig+0x88>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2b      	ldr	r2, [pc, #172]	; (80077b4 <TIM_OC1_SetConfig+0x130>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10c      	bne.n	8007726 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0308 	bic.w	r3, r3, #8
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 0304 	bic.w	r3, r3, #4
 8007724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a1d      	ldr	r2, [pc, #116]	; (80077a0 <TIM_OC1_SetConfig+0x11c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <TIM_OC1_SetConfig+0xd2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <TIM_OC1_SetConfig+0x120>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00f      	beq.n	8007756 <TIM_OC1_SetConfig+0xd2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <TIM_OC1_SetConfig+0x124>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_OC1_SetConfig+0xd2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <TIM_OC1_SetConfig+0x128>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_OC1_SetConfig+0xd2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <TIM_OC1_SetConfig+0x12c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_OC1_SetConfig+0xd2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <TIM_OC1_SetConfig+0x130>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d111      	bne.n	800777a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40013400 	.word	0x40013400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800
 80077b4:	40015000 	.word	0x40015000

080077b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0320 	bic.w	r3, r3, #32
 8007806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a2c      	ldr	r2, [pc, #176]	; (80078c8 <TIM_OC2_SetConfig+0x110>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d007      	beq.n	800782c <TIM_OC2_SetConfig+0x74>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a2b      	ldr	r2, [pc, #172]	; (80078cc <TIM_OC2_SetConfig+0x114>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_OC2_SetConfig+0x74>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <TIM_OC2_SetConfig+0x118>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10d      	bne.n	8007848 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a1f      	ldr	r2, [pc, #124]	; (80078c8 <TIM_OC2_SetConfig+0x110>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <TIM_OC2_SetConfig+0xc0>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a1e      	ldr	r2, [pc, #120]	; (80078cc <TIM_OC2_SetConfig+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00f      	beq.n	8007878 <TIM_OC2_SetConfig+0xc0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <TIM_OC2_SetConfig+0x11c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00b      	beq.n	8007878 <TIM_OC2_SetConfig+0xc0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <TIM_OC2_SetConfig+0x120>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d007      	beq.n	8007878 <TIM_OC2_SetConfig+0xc0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <TIM_OC2_SetConfig+0x124>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_OC2_SetConfig+0xc0>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <TIM_OC2_SetConfig+0x118>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d113      	bne.n	80078a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007886:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40013400 	.word	0x40013400
 80078d0:	40015000 	.word	0x40015000
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800792c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <TIM_OC3_SetConfig+0x10c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <TIM_OC3_SetConfig+0x72>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <TIM_OC3_SetConfig+0x110>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_OC3_SetConfig+0x72>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <TIM_OC3_SetConfig+0x114>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d10d      	bne.n	800796e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <TIM_OC3_SetConfig+0x10c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d013      	beq.n	800799e <TIM_OC3_SetConfig+0xbe>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <TIM_OC3_SetConfig+0x110>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00f      	beq.n	800799e <TIM_OC3_SetConfig+0xbe>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <TIM_OC3_SetConfig+0x118>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00b      	beq.n	800799e <TIM_OC3_SetConfig+0xbe>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a1c      	ldr	r2, [pc, #112]	; (80079fc <TIM_OC3_SetConfig+0x11c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d007      	beq.n	800799e <TIM_OC3_SetConfig+0xbe>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <TIM_OC3_SetConfig+0x120>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_OC3_SetConfig+0xbe>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a16      	ldr	r2, [pc, #88]	; (80079f4 <TIM_OC3_SetConfig+0x114>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d113      	bne.n	80079c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	621a      	str	r2, [r3, #32]
}
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40013400 	.word	0x40013400
 80079f4:	40015000 	.word	0x40015000
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800

08007a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	031b      	lsls	r3, r3, #12
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a1a      	ldr	r2, [pc, #104]	; (8007acc <TIM_OC4_SetConfig+0xc8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <TIM_OC4_SetConfig+0x8c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <TIM_OC4_SetConfig+0xcc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_OC4_SetConfig+0x8c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <TIM_OC4_SetConfig+0xd0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_OC4_SetConfig+0x8c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <TIM_OC4_SetConfig+0xd4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_OC4_SetConfig+0x8c>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a16      	ldr	r2, [pc, #88]	; (8007adc <TIM_OC4_SetConfig+0xd8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC4_SetConfig+0x8c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <TIM_OC4_SetConfig+0xdc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d109      	bne.n	8007aa4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800
 8007ae0:	40015000 	.word	0x40015000

08007ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	041b      	lsls	r3, r3, #16
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <TIM_OC5_SetConfig+0xbc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a18      	ldr	r2, [pc, #96]	; (8007ba4 <TIM_OC5_SetConfig+0xc0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00f      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <TIM_OC5_SetConfig+0xc4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00b      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a16      	ldr	r2, [pc, #88]	; (8007bac <TIM_OC5_SetConfig+0xc8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d007      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <TIM_OC5_SetConfig+0xcc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <TIM_OC5_SetConfig+0xd0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d109      	bne.n	8007b7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	40015000 	.word	0x40015000

08007bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	; (8007c78 <TIM_OC6_SetConfig+0xc0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <TIM_OC6_SetConfig+0xc4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00f      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <TIM_OC6_SetConfig+0xc8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <TIM_OC6_SetConfig+0xcc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <TIM_OC6_SetConfig+0xd0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <TIM_OC6_SetConfig+0xd4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d109      	bne.n	8007c50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	029b      	lsls	r3, r3, #10
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40013400 	.word	0x40013400
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	40014800 	.word	0x40014800
 8007c8c:	40015000 	.word	0x40015000

08007c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	401a      	ands	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1a      	ldr	r2, [r3, #32]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e06d      	b.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a30      	ldr	r2, [pc, #192]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a2f      	ldr	r2, [pc, #188]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d01d      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d018      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10c      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40013400 	.word	0x40013400
 8007de4:	40015000 	.word	0x40015000
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40014000 	.word	0x40014000

08007df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e040      	b.n	8007e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fa fa1e 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8c0 	bl	8007fb8 <UART_SetConfig>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e022      	b.n	8007e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa88 	bl	8008360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb0f 	bl	80084a4 <UART_CheckIdleState>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	f040 8082 	bne.w	8007fae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_UART_Transmit+0x26>
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e07a      	b.n	8007fb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_UART_Transmit+0x38>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e073      	b.n	8007fb0 <HAL_UART_Transmit+0x120>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2221      	movs	r2, #33	; 0x21
 8007edc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ede:	f7fa fc87 	bl	80027f0 <HAL_GetTick>
 8007ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	88fa      	ldrh	r2, [r7, #6]
 8007ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	88fa      	ldrh	r2, [r7, #6]
 8007ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efc:	d108      	bne.n	8007f10 <HAL_UART_Transmit+0x80>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	e003      	b.n	8007f18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007f20:	e02d      	b.n	8007f7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fb02 	bl	8008536 <UART_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e039      	b.n	8007fb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	881a      	ldrh	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f4e:	b292      	uxth	r2, r2
 8007f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	3302      	adds	r3, #2
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	e008      	b.n	8007f6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	b292      	uxth	r2, r2
 8007f64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1cb      	bne.n	8007f22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2140      	movs	r1, #64	; 0x40
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 face 	bl	8008536 <UART_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e005      	b.n	8007fb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e000      	b.n	8007fb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007fae:	2302      	movs	r3, #2
  }
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4baa      	ldr	r3, [pc, #680]	; (800828c <UART_SetConfig+0x2d4>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6979      	ldr	r1, [r7, #20]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	430a      	orrs	r2, r1
 8008028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a98      	ldr	r2, [pc, #608]	; (8008290 <UART_SetConfig+0x2d8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d121      	bne.n	8008078 <UART_SetConfig+0xc0>
 8008034:	4b97      	ldr	r3, [pc, #604]	; (8008294 <UART_SetConfig+0x2dc>)
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	2b03      	cmp	r3, #3
 800803e:	d817      	bhi.n	8008070 <UART_SetConfig+0xb8>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x90>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	08008059 	.word	0x08008059
 800804c:	08008065 	.word	0x08008065
 8008050:	0800806b 	.word	0x0800806b
 8008054:	0800805f 	.word	0x0800805f
 8008058:	2301      	movs	r3, #1
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e0b2      	b.n	80081c4 <UART_SetConfig+0x20c>
 800805e:	2302      	movs	r3, #2
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e0af      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008064:	2304      	movs	r3, #4
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e0ac      	b.n	80081c4 <UART_SetConfig+0x20c>
 800806a:	2308      	movs	r3, #8
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e0a9      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	bf00      	nop
 8008076:	e0a5      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a86      	ldr	r2, [pc, #536]	; (8008298 <UART_SetConfig+0x2e0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d123      	bne.n	80080ca <UART_SetConfig+0x112>
 8008082:	4b84      	ldr	r3, [pc, #528]	; (8008294 <UART_SetConfig+0x2dc>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800808a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808e:	d012      	beq.n	80080b6 <UART_SetConfig+0xfe>
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008094:	d802      	bhi.n	800809c <UART_SetConfig+0xe4>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <UART_SetConfig+0xf2>
 800809a:	e012      	b.n	80080c2 <UART_SetConfig+0x10a>
 800809c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a0:	d00c      	beq.n	80080bc <UART_SetConfig+0x104>
 80080a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a6:	d003      	beq.n	80080b0 <UART_SetConfig+0xf8>
 80080a8:	e00b      	b.n	80080c2 <UART_SetConfig+0x10a>
 80080aa:	2300      	movs	r3, #0
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e089      	b.n	80081c4 <UART_SetConfig+0x20c>
 80080b0:	2302      	movs	r3, #2
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e086      	b.n	80081c4 <UART_SetConfig+0x20c>
 80080b6:	2304      	movs	r3, #4
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e083      	b.n	80081c4 <UART_SetConfig+0x20c>
 80080bc:	2308      	movs	r3, #8
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e080      	b.n	80081c4 <UART_SetConfig+0x20c>
 80080c2:	2310      	movs	r3, #16
 80080c4:	77fb      	strb	r3, [r7, #31]
 80080c6:	bf00      	nop
 80080c8:	e07c      	b.n	80081c4 <UART_SetConfig+0x20c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a73      	ldr	r2, [pc, #460]	; (800829c <UART_SetConfig+0x2e4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d123      	bne.n	800811c <UART_SetConfig+0x164>
 80080d4:	4b6f      	ldr	r3, [pc, #444]	; (8008294 <UART_SetConfig+0x2dc>)
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080e0:	d012      	beq.n	8008108 <UART_SetConfig+0x150>
 80080e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080e6:	d802      	bhi.n	80080ee <UART_SetConfig+0x136>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <UART_SetConfig+0x144>
 80080ec:	e012      	b.n	8008114 <UART_SetConfig+0x15c>
 80080ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080f2:	d00c      	beq.n	800810e <UART_SetConfig+0x156>
 80080f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080f8:	d003      	beq.n	8008102 <UART_SetConfig+0x14a>
 80080fa:	e00b      	b.n	8008114 <UART_SetConfig+0x15c>
 80080fc:	2300      	movs	r3, #0
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e060      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008102:	2302      	movs	r3, #2
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e05d      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008108:	2304      	movs	r3, #4
 800810a:	77fb      	strb	r3, [r7, #31]
 800810c:	e05a      	b.n	80081c4 <UART_SetConfig+0x20c>
 800810e:	2308      	movs	r3, #8
 8008110:	77fb      	strb	r3, [r7, #31]
 8008112:	e057      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008114:	2310      	movs	r3, #16
 8008116:	77fb      	strb	r3, [r7, #31]
 8008118:	bf00      	nop
 800811a:	e053      	b.n	80081c4 <UART_SetConfig+0x20c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a5f      	ldr	r2, [pc, #380]	; (80082a0 <UART_SetConfig+0x2e8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d123      	bne.n	800816e <UART_SetConfig+0x1b6>
 8008126:	4b5b      	ldr	r3, [pc, #364]	; (8008294 <UART_SetConfig+0x2dc>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800812e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008132:	d012      	beq.n	800815a <UART_SetConfig+0x1a2>
 8008134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008138:	d802      	bhi.n	8008140 <UART_SetConfig+0x188>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <UART_SetConfig+0x196>
 800813e:	e012      	b.n	8008166 <UART_SetConfig+0x1ae>
 8008140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008144:	d00c      	beq.n	8008160 <UART_SetConfig+0x1a8>
 8008146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800814a:	d003      	beq.n	8008154 <UART_SetConfig+0x19c>
 800814c:	e00b      	b.n	8008166 <UART_SetConfig+0x1ae>
 800814e:	2300      	movs	r3, #0
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e037      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008154:	2302      	movs	r3, #2
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e034      	b.n	80081c4 <UART_SetConfig+0x20c>
 800815a:	2304      	movs	r3, #4
 800815c:	77fb      	strb	r3, [r7, #31]
 800815e:	e031      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008160:	2308      	movs	r3, #8
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e02e      	b.n	80081c4 <UART_SetConfig+0x20c>
 8008166:	2310      	movs	r3, #16
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	bf00      	nop
 800816c:	e02a      	b.n	80081c4 <UART_SetConfig+0x20c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a4c      	ldr	r2, [pc, #304]	; (80082a4 <UART_SetConfig+0x2ec>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d123      	bne.n	80081c0 <UART_SetConfig+0x208>
 8008178:	4b46      	ldr	r3, [pc, #280]	; (8008294 <UART_SetConfig+0x2dc>)
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008184:	d012      	beq.n	80081ac <UART_SetConfig+0x1f4>
 8008186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818a:	d802      	bhi.n	8008192 <UART_SetConfig+0x1da>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <UART_SetConfig+0x1e8>
 8008190:	e012      	b.n	80081b8 <UART_SetConfig+0x200>
 8008192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008196:	d00c      	beq.n	80081b2 <UART_SetConfig+0x1fa>
 8008198:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800819c:	d003      	beq.n	80081a6 <UART_SetConfig+0x1ee>
 800819e:	e00b      	b.n	80081b8 <UART_SetConfig+0x200>
 80081a0:	2300      	movs	r3, #0
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e00e      	b.n	80081c4 <UART_SetConfig+0x20c>
 80081a6:	2302      	movs	r3, #2
 80081a8:	77fb      	strb	r3, [r7, #31]
 80081aa:	e00b      	b.n	80081c4 <UART_SetConfig+0x20c>
 80081ac:	2304      	movs	r3, #4
 80081ae:	77fb      	strb	r3, [r7, #31]
 80081b0:	e008      	b.n	80081c4 <UART_SetConfig+0x20c>
 80081b2:	2308      	movs	r3, #8
 80081b4:	77fb      	strb	r3, [r7, #31]
 80081b6:	e005      	b.n	80081c4 <UART_SetConfig+0x20c>
 80081b8:	2310      	movs	r3, #16
 80081ba:	77fb      	strb	r3, [r7, #31]
 80081bc:	bf00      	nop
 80081be:	e001      	b.n	80081c4 <UART_SetConfig+0x20c>
 80081c0:	2310      	movs	r3, #16
 80081c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081cc:	d16e      	bne.n	80082ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80081ce:	7ffb      	ldrb	r3, [r7, #31]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d828      	bhi.n	8008226 <UART_SetConfig+0x26e>
 80081d4:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <UART_SetConfig+0x224>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	08008201 	.word	0x08008201
 80081e0:	08008209 	.word	0x08008209
 80081e4:	08008211 	.word	0x08008211
 80081e8:	08008227 	.word	0x08008227
 80081ec:	08008217 	.word	0x08008217
 80081f0:	08008227 	.word	0x08008227
 80081f4:	08008227 	.word	0x08008227
 80081f8:	08008227 	.word	0x08008227
 80081fc:	0800821f 	.word	0x0800821f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008200:	f7fe fb2c 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8008204:	61b8      	str	r0, [r7, #24]
        break;
 8008206:	e013      	b.n	8008230 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008208:	f7fe fb4a 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 800820c:	61b8      	str	r0, [r7, #24]
        break;
 800820e:	e00f      	b.n	8008230 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008210:	4b25      	ldr	r3, [pc, #148]	; (80082a8 <UART_SetConfig+0x2f0>)
 8008212:	61bb      	str	r3, [r7, #24]
        break;
 8008214:	e00c      	b.n	8008230 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008216:	f7fe faab 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 800821a:	61b8      	str	r0, [r7, #24]
        break;
 800821c:	e008      	b.n	8008230 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008222:	61bb      	str	r3, [r7, #24]
        break;
 8008224:	e004      	b.n	8008230 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	77bb      	strb	r3, [r7, #30]
        break;
 800822e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8086 	beq.w	8008344 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	005a      	lsls	r2, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	441a      	add	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	b29b      	uxth	r3, r3
 800824e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b0f      	cmp	r3, #15
 8008254:	d916      	bls.n	8008284 <UART_SetConfig+0x2cc>
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825c:	d212      	bcs.n	8008284 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	b29b      	uxth	r3, r3
 8008262:	f023 030f 	bic.w	r3, r3, #15
 8008266:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	b29b      	uxth	r3, r3
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	b29a      	uxth	r2, r3
 8008274:	89fb      	ldrh	r3, [r7, #14]
 8008276:	4313      	orrs	r3, r2
 8008278:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	89fa      	ldrh	r2, [r7, #14]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	e05f      	b.n	8008344 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	77bb      	strb	r3, [r7, #30]
 8008288:	e05c      	b.n	8008344 <UART_SetConfig+0x38c>
 800828a:	bf00      	nop
 800828c:	efff69f3 	.word	0xefff69f3
 8008290:	40013800 	.word	0x40013800
 8008294:	40021000 	.word	0x40021000
 8008298:	40004400 	.word	0x40004400
 800829c:	40004800 	.word	0x40004800
 80082a0:	40004c00 	.word	0x40004c00
 80082a4:	40005000 	.word	0x40005000
 80082a8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ac:	7ffb      	ldrb	r3, [r7, #31]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d827      	bhi.n	8008302 <UART_SetConfig+0x34a>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <UART_SetConfig+0x300>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082ed 	.word	0x080082ed
 80082c4:	08008303 	.word	0x08008303
 80082c8:	080082f3 	.word	0x080082f3
 80082cc:	08008303 	.word	0x08008303
 80082d0:	08008303 	.word	0x08008303
 80082d4:	08008303 	.word	0x08008303
 80082d8:	080082fb 	.word	0x080082fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082dc:	f7fe fabe 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80082e0:	61b8      	str	r0, [r7, #24]
        break;
 80082e2:	e013      	b.n	800830c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e4:	f7fe fadc 	bl	80068a0 <HAL_RCC_GetPCLK2Freq>
 80082e8:	61b8      	str	r0, [r7, #24]
        break;
 80082ea:	e00f      	b.n	800830c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b1b      	ldr	r3, [pc, #108]	; (800835c <UART_SetConfig+0x3a4>)
 80082ee:	61bb      	str	r3, [r7, #24]
        break;
 80082f0:	e00c      	b.n	800830c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f2:	f7fe fa3d 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 80082f6:	61b8      	str	r0, [r7, #24]
        break;
 80082f8:	e008      	b.n	800830c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082fe:	61bb      	str	r3, [r7, #24]
        break;
 8008300:	e004      	b.n	800830c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	77bb      	strb	r3, [r7, #30]
        break;
 800830a:	bf00      	nop
    }

    if (pclk != 0U)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d018      	beq.n	8008344 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	085a      	lsrs	r2, r3, #1
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	441a      	add	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	fbb2 f3f3 	udiv	r3, r2, r3
 8008324:	b29b      	uxth	r3, r3
 8008326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2b0f      	cmp	r3, #15
 800832c:	d908      	bls.n	8008340 <UART_SetConfig+0x388>
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008334:	d204      	bcs.n	8008340 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	e001      	b.n	8008344 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008350:	7fbb      	ldrb	r3, [r7, #30]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	007a1200 	.word	0x007a1200

08008360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0308 	and.w	r3, r3, #8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01a      	beq.n	8008476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800845e:	d10a      	bne.n	8008476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]
  }
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b4:	f7fa f99c 	bl	80027f0 <HAL_GetTick>
 80084b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d10e      	bne.n	80084e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f82d 	bl	8008536 <UART_WaitOnFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e023      	b.n	800852e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d10e      	bne.n	8008512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f817 	bl	8008536 <UART_WaitOnFlagUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e00d      	b.n	800852e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b09c      	sub	sp, #112	; 0x70
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	4613      	mov	r3, r2
 8008544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008546:	e0a5      	b.n	8008694 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	f000 80a1 	beq.w	8008694 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fa f94d 	bl	80027f0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <UART_WaitOnFlagUntilTimeout+0x32>
 8008562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008564:	2b00      	cmp	r3, #0
 8008566:	d13e      	bne.n	80085e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800857c:	667b      	str	r3, [r7, #100]	; 0x64
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008588:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800858c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e6      	bne.n	8008568 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	663b      	str	r3, [r7, #96]	; 0x60
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80085bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e5      	bne.n	800859a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e067      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d04f      	beq.n	8008694 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008602:	d147      	bne.n	8008694 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800860c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
 800862e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	613b      	str	r3, [r7, #16]
   return(result);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	66bb      	str	r3, [r7, #104]	; 0x68
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008660:	623a      	str	r2, [r7, #32]
 8008662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69f9      	ldr	r1, [r7, #28]
 8008666:	6a3a      	ldr	r2, [r7, #32]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	61bb      	str	r3, [r7, #24]
   return(result);
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e010      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	bf0c      	ite	eq
 80086a4:	2301      	moveq	r3, #1
 80086a6:	2300      	movne	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	f43f af4a 	beq.w	8008548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3770      	adds	r7, #112	; 0x70
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 fccd 	bl	800a06e <VL53L0X_get_offset_calibration_data_micro_meter>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80086d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b096      	sub	sp, #88	; 0x58
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80086f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d107      	bne.n	800870a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2188      	movs	r1, #136	; 0x88
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f004 fed0 	bl	800d4a4 <VL53L0X_WrByte>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008718:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008722:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a9e      	ldr	r2, [pc, #632]	; (80089a4 <VL53L0X_DataInit+0x2c0>)
 800872a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a9d      	ldr	r2, [pc, #628]	; (80089a8 <VL53L0X_DataInit+0x2c4>)
 8008732:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800873c:	f107 0310 	add.w	r3, r7, #16
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fac2 	bl	8008ccc <VL53L0X_GetDeviceParameters>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800874e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008752:	2b00      	cmp	r3, #0
 8008754:	d112      	bne.n	800877c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008756:	2300      	movs	r3, #0
 8008758:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800875a:	2300      	movs	r3, #0
 800875c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f103 0410 	add.w	r4, r3, #16
 8008764:	f107 0510 	add.w	r5, r7, #16
 8008768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800876a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800876c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800876e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008774:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2264      	movs	r2, #100	; 0x64
 8008780:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f44f 7261 	mov.w	r2, #900	; 0x384
 800878a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008794:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800879e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80087aa:	2201      	movs	r2, #1
 80087ac:	2180      	movs	r1, #128	; 0x80
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f004 fe78 	bl	800d4a4 <VL53L0X_WrByte>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087bc:	4313      	orrs	r3, r2
 80087be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087c2:	2201      	movs	r2, #1
 80087c4:	21ff      	movs	r1, #255	; 0xff
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f004 fe6c 	bl	800d4a4 <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f004 fe60 	bl	800d4a4 <VL53L0X_WrByte>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087ec:	4313      	orrs	r3, r2
 80087ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80087f2:	f107 030f 	add.w	r3, r7, #15
 80087f6:	461a      	mov	r2, r3
 80087f8:	2191      	movs	r1, #145	; 0x91
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f004 fed4 	bl	800d5a8 <VL53L0X_RdByte>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008808:	4313      	orrs	r3, r2
 800880a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008816:	2201      	movs	r2, #1
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f004 fe42 	bl	800d4a4 <VL53L0X_WrByte>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008828:	4313      	orrs	r3, r2
 800882a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800882e:	2200      	movs	r2, #0
 8008830:	21ff      	movs	r1, #255	; 0xff
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f004 fe36 	bl	800d4a4 <VL53L0X_WrByte>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008840:	4313      	orrs	r3, r2
 8008842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008846:	2200      	movs	r2, #0
 8008848:	2180      	movs	r1, #128	; 0x80
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f004 fe2a 	bl	800d4a4 <VL53L0X_WrByte>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008858:	4313      	orrs	r3, r2
 800885a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800885e:	2300      	movs	r3, #0
 8008860:	653b      	str	r3, [r7, #80]	; 0x50
 8008862:	e014      	b.n	800888e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8008864:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008868:	2b00      	cmp	r3, #0
 800886a:	d114      	bne.n	8008896 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800886c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800886e:	b29b      	uxth	r3, r3
 8008870:	2201      	movs	r2, #1
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fd51 	bl	800931c <VL53L0X_SetLimitCheckEnable>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008882:	4313      	orrs	r3, r2
 8008884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888a:	3301      	adds	r3, #1
 800888c:	653b      	str	r3, [r7, #80]	; 0x50
 800888e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008890:	2b05      	cmp	r3, #5
 8008892:	dde7      	ble.n	8008864 <VL53L0X_DataInit+0x180>
 8008894:	e000      	b.n	8008898 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008896:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008898:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800889c:	2b00      	cmp	r3, #0
 800889e:	d107      	bne.n	80088b0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80088a0:	2200      	movs	r2, #0
 80088a2:	2102      	movs	r1, #2
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd39 	bl	800931c <VL53L0X_SetLimitCheckEnable>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80088b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d107      	bne.n	80088c8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80088b8:	2200      	movs	r2, #0
 80088ba:	2103      	movs	r1, #3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fd2d 	bl	800931c <VL53L0X_SetLimitCheckEnable>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80088c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d107      	bne.n	80088e0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80088d0:	2200      	movs	r2, #0
 80088d2:	2104      	movs	r1, #4
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fd21 	bl	800931c <VL53L0X_SetLimitCheckEnable>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80088e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d107      	bne.n	80088f8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80088e8:	2200      	movs	r2, #0
 80088ea:	2105      	movs	r1, #5
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fd15 	bl	800931c <VL53L0X_SetLimitCheckEnable>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80088f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d108      	bne.n	8008912 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008900:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fdb8 	bl	800947c <VL53L0X_SetLimitCheckValue>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008912:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008916:	2b00      	cmp	r3, #0
 8008918:	d108      	bne.n	800892c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800891a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800891e:	2101      	movs	r1, #1
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fdab 	bl	800947c <VL53L0X_SetLimitCheckValue>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800892c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008930:	2b00      	cmp	r3, #0
 8008932:	d108      	bne.n	8008946 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008934:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008938:	2102      	movs	r1, #2
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd9e 	bl	800947c <VL53L0X_SetLimitCheckValue>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008946:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800894a:	2b00      	cmp	r3, #0
 800894c:	d107      	bne.n	800895e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800894e:	2200      	movs	r2, #0
 8008950:	2103      	movs	r1, #3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fd92 	bl	800947c <VL53L0X_SetLimitCheckValue>
 8008958:	4603      	mov	r3, r0
 800895a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800895e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10f      	bne.n	8008986 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800896e:	22ff      	movs	r2, #255	; 0xff
 8008970:	2101      	movs	r1, #1
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f004 fd96 	bl	800d4a4 <VL53L0X_WrByte>
 8008978:	4603      	mov	r3, r0
 800897a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008986:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008996:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800899a:	4618      	mov	r0, r3
 800899c:	3758      	adds	r7, #88	; 0x58
 800899e:	46bd      	mov	sp, r7
 80089a0:	bdb0      	pop	{r4, r5, r7, pc}
 80089a2:	bf00      	nop
 80089a4:	00016b85 	.word	0x00016b85
 80089a8:	000970a4 	.word	0x000970a4

080089ac <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80089ac:	b5b0      	push	{r4, r5, r7, lr}
 80089ae:	b09e      	sub	sp, #120	; 0x78
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80089ba:	f107 031c 	add.w	r3, r7, #28
 80089be:	2240      	movs	r2, #64	; 0x40
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f004 fedb 	bl	800d77e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80089e8:	2101      	movs	r1, #1
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f002 fa95 	bl	800af1a <VL53L0X_get_info_from_device>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80089fc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008a08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d80d      	bhi.n	8008a2c <VL53L0X_StaticInit+0x80>
 8008a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d102      	bne.n	8008a1e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8008a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d806      	bhi.n	8008a2c <VL53L0X_StaticInit+0x80>
 8008a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10e      	bne.n	8008a44 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8008a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a28:	2b0c      	cmp	r3, #12
 8008a2a:	d90b      	bls.n	8008a44 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008a2c:	f107 0218 	add.w	r2, r7, #24
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fd14 	bl	800a464 <VL53L0X_perform_ref_spad_management>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008a42:	e009      	b.n	8008a58 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8008a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 ff15 	bl	800a87c <VL53L0X_set_reference_spads>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008a58:	4b94      	ldr	r3, [pc, #592]	; (8008cac <VL53L0X_StaticInit+0x300>)
 8008a5a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008a5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8008a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8008a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8008a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a7e:	e001      	b.n	8008a84 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008a80:	4b8a      	ldr	r3, [pc, #552]	; (8008cac <VL53L0X_StaticInit+0x300>)
 8008a82:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008a84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d106      	bne.n	8008a9a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8008a8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f003 fde8 	bl	800c664 <VL53L0X_load_tuning_settings>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008a9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 f90d 	bl	8009ccc <VL53L0X_SetGpioConfig>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ab8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d121      	bne.n	8008b04 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	21ff      	movs	r1, #255	; 0xff
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f004 fced 	bl	800d4a4 <VL53L0X_WrByte>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008ad0:	f107 031a 	add.w	r3, r7, #26
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	2184      	movs	r1, #132	; 0x84
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f004 fd8f 	bl	800d5fc <VL53L0X_RdWord>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008aec:	2200      	movs	r2, #0
 8008aee:	21ff      	movs	r1, #255	; 0xff
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f004 fcd7 	bl	800d4a4 <VL53L0X_WrByte>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d105      	bne.n	8008b18 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8008b0c:	8b7b      	ldrh	r3, [r7, #26]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	461a      	mov	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8008b18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008b20:	f107 031c 	add.w	r3, r7, #28
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8d0 	bl	8008ccc <VL53L0X_GetDeviceParameters>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8008b32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d110      	bne.n	8008b5c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008b3a:	f107 0319 	add.w	r3, r7, #25
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f9ae 	bl	8008ea2 <VL53L0X_GetFractionEnable>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8008b4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d103      	bne.n	8008b5c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8008b54:	7e7a      	ldrb	r2, [r7, #25]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008b5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10e      	bne.n	8008b82 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f103 0410 	add.w	r4, r3, #16
 8008b6a:	f107 051c 	add.w	r5, r7, #28
 8008b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8008b82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d111      	bne.n	8008bae <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8008b8a:	f107 0319 	add.w	r3, r7, #25
 8008b8e:	461a      	mov	r2, r3
 8008b90:	2101      	movs	r1, #1
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f004 fd08 	bl	800d5a8 <VL53L0X_RdByte>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8008b9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d103      	bne.n	8008bae <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008ba6:	7e7a      	ldrb	r2, [r7, #25]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8008bae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f9e6 	bl	8008f8c <VL53L0X_SetSequenceStepEnable>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008bc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d107      	bne.n	8008bde <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9da 	bl	8008f8c <VL53L0X_SetSequenceStepEnable>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8008bde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d103      	bne.n	8008bee <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2203      	movs	r2, #3
 8008bea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008bee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008bf6:	f107 0313 	add.w	r3, r7, #19
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9ac 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008c12:	7cfa      	ldrb	r2, [r7, #19]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008c1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008c22:	f107 0313 	add.w	r3, r7, #19
 8008c26:	461a      	mov	r2, r3
 8008c28:	2101      	movs	r1, #1
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f996 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d103      	bne.n	8008c46 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008c3e:	7cfa      	ldrb	r2, [r7, #19]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008c46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d109      	bne.n	8008c62 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	461a      	mov	r2, r3
 8008c54:	2103      	movs	r1, #3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f002 fee0 	bl	800ba1c <get_sequence_step_timeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008c72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2104      	movs	r1, #4
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f002 feca 	bl	800ba1c <get_sequence_step_timeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3770      	adds	r7, #112	; 0x70
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000014 	.word	0x20000014

08008cb0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008cb8:	239d      	movs	r3, #157	; 0x9d
 8008cba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8008cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f8cc 	bl	8008e7c <VL53L0X_GetDeviceMode>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d107      	bne.n	8008d00 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa94 	bl	8009224 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d107      	bne.n	8008d26 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	3310      	adds	r3, #16
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 faca 	bl	80092b6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8008d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d107      	bne.n	8008d3e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff fcc2 	bl	80086be <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8008d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d134      	bne.n	8008db0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008d46:	2300      	movs	r3, #0
 8008d48:	60bb      	str	r3, [r7, #8]
 8008d4a:	e02a      	b.n	8008da2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d12a      	bne.n	8008daa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	b299      	uxth	r1, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	3304      	adds	r3, #4
 8008d64:	461a      	mov	r2, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fbea 	bl	8009540 <VL53L0X_GetLimitCheckValue>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d117      	bne.n	8008dae <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	b299      	uxth	r1, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3318      	adds	r3, #24
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4413      	add	r3, r2
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb51 	bl	8009434 <VL53L0X_GetLimitCheckEnable>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	ddd1      	ble.n	8008d4c <VL53L0X_GetDeviceParameters+0x80>
 8008da8:	e002      	b.n	8008db0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008daa:	bf00      	nop
 8008dac:	e000      	b.n	8008db0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008dae:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d107      	bne.n	8008dc8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	333c      	adds	r3, #60	; 0x3c
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc4c 	bl	800965c <VL53L0X_GetWrapAroundCheckEnable>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f895 	bl	8008f06 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	2b15      	cmp	r3, #21
 8008e00:	d832      	bhi.n	8008e68 <VL53L0X_SetDeviceMode+0x7c>
 8008e02:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <VL53L0X_SetDeviceMode+0x1c>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e61 	.word	0x08008e61
 8008e0c:	08008e61 	.word	0x08008e61
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e61 	.word	0x08008e61
 8008e18:	08008e69 	.word	0x08008e69
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e69 	.word	0x08008e69
 8008e28:	08008e69 	.word	0x08008e69
 8008e2c:	08008e69 	.word	0x08008e69
 8008e30:	08008e69 	.word	0x08008e69
 8008e34:	08008e69 	.word	0x08008e69
 8008e38:	08008e69 	.word	0x08008e69
 8008e3c:	08008e69 	.word	0x08008e69
 8008e40:	08008e69 	.word	0x08008e69
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e69 	.word	0x08008e69
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e69 	.word	0x08008e69
 8008e54:	08008e69 	.word	0x08008e69
 8008e58:	08008e61 	.word	0x08008e61
 8008e5c:	08008e61 	.word	0x08008e61
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	741a      	strb	r2, [r3, #16]
		break;
 8008e66:	e001      	b.n	8008e6c <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008e68:	23f8      	movs	r3, #248	; 0xf8
 8008e6a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7c1a      	ldrb	r2, [r3, #16]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	2109      	movs	r1, #9
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f004 fb77 	bl	800d5a8 <VL53L0X_RdByte>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f003 fa26 	bl	800c342 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8008efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f003 faf3 	bl	800c502 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008f40:	78ba      	ldrb	r2, [r7, #2]
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f002 ff3b 	bl	800bdc2 <VL53L0X_set_vcsel_pulse_period>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	460b      	mov	r3, r1
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4619      	mov	r1, r3
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f003 f9ad 	bl	800c2d4 <VL53L0X_get_vcsel_pulse_period>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008fa8:	f107 030f 	add.w	r3, r7, #15
 8008fac:	461a      	mov	r2, r3
 8008fae:	2101      	movs	r1, #1
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f004 faf9 	bl	800d5a8 <VL53L0X_RdByte>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d15a      	bne.n	800907c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8008fc6:	78bb      	ldrb	r3, [r7, #2]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d12b      	bne.n	8009024 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d825      	bhi.n	800901e <VL53L0X_SetSequenceStepEnable+0x92>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08008ff7 	.word	0x08008ff7
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	0800900b 	.word	0x0800900b
 8008fe8:	08009015 	.word	0x08009015
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	f043 0310 	orr.w	r3, r3, #16
 8008ff2:	75bb      	strb	r3, [r7, #22]
				break;
 8008ff4:	e043      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008ffc:	75bb      	strb	r3, [r7, #22]
				break;
 8008ffe:	e03e      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009000:	7dbb      	ldrb	r3, [r7, #22]
 8009002:	f043 0304 	orr.w	r3, r3, #4
 8009006:	75bb      	strb	r3, [r7, #22]
				break;
 8009008:	e039      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800900a:	7dbb      	ldrb	r3, [r7, #22]
 800900c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009010:	75bb      	strb	r3, [r7, #22]
				break;
 8009012:	e034      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009014:	7dbb      	ldrb	r3, [r7, #22]
 8009016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800901a:	75bb      	strb	r3, [r7, #22]
				break;
 800901c:	e02f      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800901e:	23fc      	movs	r3, #252	; 0xfc
 8009020:	75fb      	strb	r3, [r7, #23]
 8009022:	e02c      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d825      	bhi.n	8009076 <VL53L0X_SetSequenceStepEnable+0xea>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009045 	.word	0x08009045
 8009034:	0800904f 	.word	0x0800904f
 8009038:	08009059 	.word	0x08009059
 800903c:	08009063 	.word	0x08009063
 8009040:	0800906d 	.word	0x0800906d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009044:	7dbb      	ldrb	r3, [r7, #22]
 8009046:	f023 0310 	bic.w	r3, r3, #16
 800904a:	75bb      	strb	r3, [r7, #22]
				break;
 800904c:	e017      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800904e:	7dbb      	ldrb	r3, [r7, #22]
 8009050:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009054:	75bb      	strb	r3, [r7, #22]
				break;
 8009056:	e012      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009058:	7dbb      	ldrb	r3, [r7, #22]
 800905a:	f023 0304 	bic.w	r3, r3, #4
 800905e:	75bb      	strb	r3, [r7, #22]
				break;
 8009060:	e00d      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009062:	7dbb      	ldrb	r3, [r7, #22]
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009068:	75bb      	strb	r3, [r7, #22]
				break;
 800906a:	e008      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800906c:	7dbb      	ldrb	r3, [r7, #22]
 800906e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009072:	75bb      	strb	r3, [r7, #22]
				break;
 8009074:	e003      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009076:	23fc      	movs	r3, #252	; 0xfc
 8009078:	75fb      	strb	r3, [r7, #23]
 800907a:	e000      	b.n	800907e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800907c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	7dba      	ldrb	r2, [r7, #22]
 8009082:	429a      	cmp	r2, r3
 8009084:	d01e      	beq.n	80090c4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d107      	bne.n	800909e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800908e:	7dbb      	ldrb	r3, [r7, #22]
 8009090:	461a      	mov	r2, r3
 8009092:	2101      	movs	r1, #1
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f004 fa05 	bl	800d4a4 <VL53L0X_WrByte>
 800909a:	4603      	mov	r3, r0
 800909c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800909e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d103      	bne.n	80090ae <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	7dba      	ldrb	r2, [r7, #22]
 80090aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80090ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80090bc:	6939      	ldr	r1, [r7, #16]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff ff0e 	bl	8008ee0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80090c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	72fb      	strb	r3, [r7, #11]
 80090de:	4613      	mov	r3, r2
 80090e0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d836      	bhi.n	8009160 <sequence_step_enabled+0x90>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <sequence_step_enabled+0x28>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	0800911f 	.word	0x0800911f
 8009100:	08009131 	.word	0x08009131
 8009104:	08009143 	.word	0x08009143
 8009108:	08009155 	.word	0x08009155
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800910c:	7abb      	ldrb	r3, [r7, #10]
 800910e:	111b      	asrs	r3, r3, #4
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	701a      	strb	r2, [r3, #0]
		break;
 800911c:	e022      	b.n	8009164 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800911e:	7abb      	ldrb	r3, [r7, #10]
 8009120:	10db      	asrs	r3, r3, #3
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	701a      	strb	r2, [r3, #0]
		break;
 800912e:	e019      	b.n	8009164 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009130:	7abb      	ldrb	r3, [r7, #10]
 8009132:	109b      	asrs	r3, r3, #2
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	701a      	strb	r2, [r3, #0]
		break;
 8009140:	e010      	b.n	8009164 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009142:	7abb      	ldrb	r3, [r7, #10]
 8009144:	119b      	asrs	r3, r3, #6
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	b2da      	uxtb	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	701a      	strb	r2, [r3, #0]
		break;
 8009152:	e007      	b.n	8009164 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009154:	7abb      	ldrb	r3, [r7, #10]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	b2da      	uxtb	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	701a      	strb	r2, [r3, #0]
		break;
 800915e:	e001      	b.n	8009164 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009160:	23fc      	movs	r3, #252	; 0xfc
 8009162:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009168:	4618      	mov	r0, r3
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009186:	f107 030e 	add.w	r3, r7, #14
 800918a:	461a      	mov	r2, r3
 800918c:	2101      	movs	r1, #1
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f004 fa0a 	bl	800d5a8 <VL53L0X_RdByte>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d107      	bne.n	80091b0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80091a0:	7bba      	ldrb	r2, [r7, #14]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2100      	movs	r1, #0
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ff92 	bl	80090d0 <sequence_step_enabled>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80091b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d108      	bne.n	80091ca <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80091b8:	7bba      	ldrb	r2, [r7, #14]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	3302      	adds	r3, #2
 80091be:	2101      	movs	r1, #1
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff ff85 	bl	80090d0 <sequence_step_enabled>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80091ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80091d2:	7bba      	ldrb	r2, [r7, #14]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	2102      	movs	r1, #2
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ff78 	bl	80090d0 <sequence_step_enabled>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80091e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d108      	bne.n	80091fe <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80091ec:	7bba      	ldrb	r2, [r7, #14]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3303      	adds	r3, #3
 80091f2:	2103      	movs	r1, #3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff6b 	bl	80090d0 <sequence_step_enabled>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80091fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d108      	bne.n	8009218 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009206:	7bba      	ldrb	r2, [r7, #14]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	3304      	adds	r3, #4
 800920c:	2104      	movs	r1, #4
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ff5e 	bl	80090d0 <sequence_step_enabled>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	461a      	mov	r2, r3
 8009238:	21f8      	movs	r1, #248	; 0xf8
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f004 f9de 	bl	800d5fc <VL53L0X_RdWord>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800924c:	f107 0308 	add.w	r3, r7, #8
 8009250:	461a      	mov	r2, r3
 8009252:	2104      	movs	r1, #4
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f004 fa09 	bl	800d66c <VL53L0X_RdDWord>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800925e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10c      	bne.n	8009280 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009266:	89bb      	ldrh	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	89ba      	ldrh	r2, [r7, #12]
 8009270:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7f1b      	ldrb	r3, [r3, #28]
 800929e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	7bba      	ldrb	r2, [r7, #14]
 80092a4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80092a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b086      	sub	sp, #24
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80092c4:	f107 030e 	add.w	r3, r7, #14
 80092c8:	461a      	mov	r2, r3
 80092ca:	2120      	movs	r1, #32
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f004 f995 	bl	800d5fc <VL53L0X_RdWord>
 80092d2:	4603      	mov	r3, r0
 80092d4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80092d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d118      	bne.n	8009310 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80092de:	89fb      	ldrh	r3, [r7, #14]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d109      	bne.n	80092f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	771a      	strb	r2, [r3, #28]
 80092f6:	e00b      	b.n	8009310 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80092f8:	89fb      	ldrh	r3, [r7, #14]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	807b      	strh	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	2b05      	cmp	r3, #5
 8009340:	d902      	bls.n	8009348 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009342:	23fc      	movs	r3, #252	; 0xfc
 8009344:	75fb      	strb	r3, [r7, #23]
 8009346:	e05b      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009348:	787b      	ldrb	r3, [r7, #1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009356:	2301      	movs	r3, #1
 8009358:	73bb      	strb	r3, [r7, #14]
 800935a:	e00a      	b.n	8009372 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800935c:	887b      	ldrh	r3, [r7, #2]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	330c      	adds	r3, #12
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800936e:	2301      	movs	r3, #1
 8009370:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009372:	887b      	ldrh	r3, [r7, #2]
 8009374:	2b05      	cmp	r3, #5
 8009376:	d841      	bhi.n	80093fc <VL53L0X_SetLimitCheckEnable+0xe0>
 8009378:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <VL53L0X_SetLimitCheckEnable+0x64>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009399 	.word	0x08009399
 8009384:	080093a3 	.word	0x080093a3
 8009388:	080093b9 	.word	0x080093b9
 800938c:	080093c3 	.word	0x080093c3
 8009390:	080093cd 	.word	0x080093cd
 8009394:	080093e5 	.word	0x080093e5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7bfa      	ldrb	r2, [r7, #15]
 800939c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80093a0:	e02e      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	461a      	mov	r2, r3
 80093aa:	2144      	movs	r1, #68	; 0x44
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f004 f89d 	bl	800d4ec <VL53L0X_WrWord>
 80093b2:	4603      	mov	r3, r0
 80093b4:	75fb      	strb	r3, [r7, #23]

			break;
 80093b6:	e023      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7bfa      	ldrb	r2, [r7, #15]
 80093bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80093c0:	e01e      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7bfa      	ldrb	r2, [r7, #15]
 80093c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80093ca:	e019      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	22fe      	movs	r2, #254	; 0xfe
 80093d6:	2160      	movs	r1, #96	; 0x60
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f004 f8b1 	bl	800d540 <VL53L0X_UpdateByte>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80093e2:	e00d      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80093ea:	7b7b      	ldrb	r3, [r7, #13]
 80093ec:	22ef      	movs	r2, #239	; 0xef
 80093ee:	2160      	movs	r1, #96	; 0x60
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f004 f8a5 	bl	800d540 <VL53L0X_UpdateByte>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80093fa:	e001      	b.n	8009400 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093fc:	23fc      	movs	r3, #252	; 0xfc
 80093fe:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10f      	bne.n	8009428 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009408:	787b      	ldrb	r3, [r7, #1]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800940e:	887b      	ldrh	r3, [r7, #2]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	4413      	add	r3, r2
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800941a:	e005      	b.n	8009428 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800941c:	887b      	ldrh	r3, [r7, #2]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	460b      	mov	r3, r1
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009446:	897b      	ldrh	r3, [r7, #10]
 8009448:	2b05      	cmp	r3, #5
 800944a:	d905      	bls.n	8009458 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800944c:	23fc      	movs	r3, #252	; 0xfc
 800944e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	e008      	b.n	800946a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009458:	897b      	ldrh	r3, [r7, #10]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009462:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7dba      	ldrb	r2, [r7, #22]
 8009468:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800946a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800946e:	4618      	mov	r0, r3
 8009470:	371c      	adds	r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
	...

0800947c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	460b      	mov	r3, r1
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800948e:	897b      	ldrh	r3, [r7, #10]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009498:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800949a:	7dbb      	ldrb	r3, [r7, #22]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d107      	bne.n	80094b0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80094a0:	897b      	ldrh	r3, [r7, #10]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	330c      	adds	r3, #12
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e040      	b.n	8009532 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80094b0:	897b      	ldrh	r3, [r7, #10]
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d830      	bhi.n	8009518 <VL53L0X_SetLimitCheckValue+0x9c>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <VL53L0X_SetLimitCheckValue+0x40>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094dd 	.word	0x080094dd
 80094c4:	080094f3 	.word	0x080094f3
 80094c8:	080094fb 	.word	0x080094fb
 80094cc:	08009503 	.word	0x08009503
 80094d0:	08009503 	.word	0x08009503

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80094da:	e01f      	b.n	800951c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	461a      	mov	r2, r3
 80094e4:	2144      	movs	r1, #68	; 0x44
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f004 f800 	bl	800d4ec <VL53L0X_WrWord>
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80094f0:	e014      	b.n	800951c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80094f8:	e010      	b.n	800951c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009500:	e00c      	b.n	800951c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009506:	b29b      	uxth	r3, r3
 8009508:	461a      	mov	r2, r3
 800950a:	2164      	movs	r1, #100	; 0x64
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f003 ffed 	bl	800d4ec <VL53L0X_WrWord>
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009516:	e001      	b.n	800951c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009518:	23fc      	movs	r3, #252	; 0xfc
 800951a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800951c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009524:	897b      	ldrh	r3, [r7, #10]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	330c      	adds	r3, #12
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop

08009540 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	460b      	mov	r3, r1
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800954e:	2300      	movs	r3, #0
 8009550:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009556:	897b      	ldrh	r3, [r7, #10]
 8009558:	2b05      	cmp	r3, #5
 800955a:	d847      	bhi.n	80095ec <VL53L0X_GetLimitCheckValue+0xac>
 800955c:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <VL53L0X_GetLimitCheckValue+0x24>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	0800957d 	.word	0x0800957d
 8009568:	08009589 	.word	0x08009589
 800956c:	080095af 	.word	0x080095af
 8009570:	080095bb 	.word	0x080095bb
 8009574:	080095c7 	.word	0x080095c7
 8009578:	080095c7 	.word	0x080095c7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009580:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	77bb      	strb	r3, [r7, #30]
		break;
 8009586:	e033      	b.n	80095f0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009588:	f107 0316 	add.w	r3, r7, #22
 800958c:	461a      	mov	r2, r3
 800958e:	2144      	movs	r1, #68	; 0x44
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f004 f833 	bl	800d5fc <VL53L0X_RdWord>
 8009596:	4603      	mov	r3, r0
 8009598:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800959a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80095a2:	8afb      	ldrh	r3, [r7, #22]
 80095a4:	025b      	lsls	r3, r3, #9
 80095a6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80095a8:	2301      	movs	r3, #1
 80095aa:	77bb      	strb	r3, [r7, #30]
		break;
 80095ac:	e020      	b.n	80095f0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	77bb      	strb	r3, [r7, #30]
		break;
 80095b8:	e01a      	b.n	80095f0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	77bb      	strb	r3, [r7, #30]
		break;
 80095c4:	e014      	b.n	80095f0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80095c6:	f107 0316 	add.w	r3, r7, #22
 80095ca:	461a      	mov	r2, r3
 80095cc:	2164      	movs	r1, #100	; 0x64
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f004 f814 	bl	800d5fc <VL53L0X_RdWord>
 80095d4:	4603      	mov	r3, r0
 80095d6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80095d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d102      	bne.n	80095e6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80095e0:	8afb      	ldrh	r3, [r7, #22]
 80095e2:	025b      	lsls	r3, r3, #9
 80095e4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	77bb      	strb	r3, [r7, #30]
		break;
 80095ea:	e001      	b.n	80095f0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095ec:	23fc      	movs	r3, #252	; 0xfc
 80095ee:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d12a      	bne.n	800964e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80095f8:	7fbb      	ldrb	r3, [r7, #30]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d124      	bne.n	8009648 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d110      	bne.n	8009626 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009604:	897b      	ldrh	r3, [r7, #10]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	330c      	adds	r3, #12
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009618:	897b      	ldrh	r3, [r7, #10]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009624:	e013      	b.n	800964e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800962c:	897b      	ldrh	r3, [r7, #10]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	330c      	adds	r3, #12
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800963a:	897b      	ldrh	r3, [r7, #10]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009646:	e002      	b.n	800964e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800964e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009652:	4618      	mov	r0, r3
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop

0800965c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800966a:	f107 030e 	add.w	r3, r7, #14
 800966e:	461a      	mov	r2, r3
 8009670:	2101      	movs	r1, #1
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f003 ff98 	bl	800d5a8 <VL53L0X_RdByte>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800967c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10e      	bne.n	80096a2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009684:	7bba      	ldrb	r2, [r7, #14]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	b25b      	sxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	da03      	bge.n	800969c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	e002      	b.n	80096a2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80096a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781a      	ldrb	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80096cc:	f107 030e 	add.w	r3, r7, #14
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fbd2 	bl	8008e7c <VL53L0X_GetDeviceMode>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80096dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d107      	bne.n	80096f4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f898 	bl	8009820 <VL53L0X_StartMeasurement>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80096f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fb3f 	bl	800ad80 <VL53L0X_measurement_poll_for_completion>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2203      	movs	r2, #3
 8009718:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800971c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009738:	2301      	movs	r3, #1
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f001 fae1 	bl	800ad06 <VL53L0X_perform_ref_calibration>
 8009744:	4603      	mov	r3, r0
 8009746:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009748:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009760:	2300      	movs	r3, #0
 8009762:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800976a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800976c:	7dbb      	ldrb	r3, [r7, #22]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d005      	beq.n	800977e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009772:	7dbb      	ldrb	r3, [r7, #22]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d002      	beq.n	800977e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009778:	7dbb      	ldrb	r3, [r7, #22]
 800977a:	2b03      	cmp	r3, #3
 800977c:	d147      	bne.n	800980e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800977e:	f107 030c 	add.w	r3, r7, #12
 8009782:	f107 0210 	add.w	r2, r7, #16
 8009786:	2101      	movs	r1, #1
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbc3 	bl	8009f14 <VL53L0X_GetInterruptThresholds>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009798:	d803      	bhi.n	80097a2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800979a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800979c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80097a0:	d935      	bls.n	800980e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80097a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d131      	bne.n	800980e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d006      	beq.n	80097be <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80097b0:	491a      	ldr	r1, [pc, #104]	; (800981c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f002 ff56 	bl	800c664 <VL53L0X_load_tuning_settings>
 80097b8:	4603      	mov	r3, r0
 80097ba:	75fb      	strb	r3, [r7, #23]
 80097bc:	e027      	b.n	800980e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80097be:	2204      	movs	r2, #4
 80097c0:	21ff      	movs	r1, #255	; 0xff
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f003 fe6e 	bl	800d4a4 <VL53L0X_WrByte>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80097d2:	2200      	movs	r2, #0
 80097d4:	2170      	movs	r1, #112	; 0x70
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f003 fe64 	bl	800d4a4 <VL53L0X_WrByte>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80097e6:	2200      	movs	r2, #0
 80097e8:	21ff      	movs	r1, #255	; 0xff
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f003 fe5a 	bl	800d4a4 <VL53L0X_WrByte>
 80097f0:	4603      	mov	r3, r0
 80097f2:	461a      	mov	r2, r3
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80097fa:	2200      	movs	r2, #0
 80097fc:	2180      	movs	r1, #128	; 0x80
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f003 fe50 	bl	800d4a4 <VL53L0X_WrByte>
 8009804:	4603      	mov	r3, r0
 8009806:	461a      	mov	r2, r3
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	4313      	orrs	r3, r2
 800980c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800980e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000108 	.word	0x20000108

08009820 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009828:	2300      	movs	r3, #0
 800982a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009830:	f107 030e 	add.w	r3, r7, #14
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff fb20 	bl	8008e7c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800983c:	2201      	movs	r2, #1
 800983e:	2180      	movs	r1, #128	; 0x80
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f003 fe2f 	bl	800d4a4 <VL53L0X_WrByte>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800984a:	2201      	movs	r2, #1
 800984c:	21ff      	movs	r1, #255	; 0xff
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f003 fe28 	bl	800d4a4 <VL53L0X_WrByte>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f003 fe21 	bl	800d4a4 <VL53L0X_WrByte>
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800986c:	461a      	mov	r2, r3
 800986e:	2191      	movs	r1, #145	; 0x91
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f003 fe17 	bl	800d4a4 <VL53L0X_WrByte>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800987a:	2201      	movs	r2, #1
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f003 fe10 	bl	800d4a4 <VL53L0X_WrByte>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009888:	2200      	movs	r2, #0
 800988a:	21ff      	movs	r1, #255	; 0xff
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f003 fe09 	bl	800d4a4 <VL53L0X_WrByte>
 8009892:	4603      	mov	r3, r0
 8009894:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009896:	2200      	movs	r2, #0
 8009898:	2180      	movs	r1, #128	; 0x80
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f003 fe02 	bl	800d4a4 <VL53L0X_WrByte>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d037      	beq.n	800991a <VL53L0X_StartMeasurement+0xfa>
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d04f      	beq.n	800994e <VL53L0X_StartMeasurement+0x12e>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d167      	bne.n	8009982 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80098b2:	2201      	movs	r2, #1
 80098b4:	2100      	movs	r1, #0
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f003 fdf4 	bl	800d4a4 <VL53L0X_WrByte>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80098c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d15d      	bne.n	8009988 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d008      	beq.n	80098e8 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 80098d6:	f107 030d 	add.w	r3, r7, #13
 80098da:	461a      	mov	r2, r3
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f003 fe62 	bl	800d5a8 <VL53L0X_RdByte>
 80098e4:	4603      	mov	r3, r0
 80098e6:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	3301      	adds	r3, #1
 80098ec:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80098ee:	7b7a      	ldrb	r2, [r7, #13]
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	4013      	ands	r3, r2
 80098f4:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80098f6:	7bfa      	ldrb	r2, [r7, #15]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d107      	bne.n	800990c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 80098fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800990a:	d3e1      	bcc.n	80098d0 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009912:	d339      	bcc.n	8009988 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009914:	23f9      	movs	r3, #249	; 0xf9
 8009916:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009918:	e036      	b.n	8009988 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800991a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009922:	2101      	movs	r1, #1
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff ff15 	bl	8009754 <VL53L0X_CheckAndLoadInterruptSettings>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800992e:	2202      	movs	r2, #2
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f003 fdb6 	bl	800d4a4 <VL53L0X_WrByte>
 8009938:	4603      	mov	r3, r0
 800993a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800993c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d123      	bne.n	800998c <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2204      	movs	r2, #4
 8009948:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800994c:	e01e      	b.n	800998c <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800994e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009956:	2101      	movs	r1, #1
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff fefb 	bl	8009754 <VL53L0X_CheckAndLoadInterruptSettings>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009962:	2204      	movs	r2, #4
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f003 fd9c 	bl	800d4a4 <VL53L0X_WrByte>
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10b      	bne.n	8009990 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2204      	movs	r2, #4
 800997c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009980:	e006      	b.n	8009990 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009982:	23f8      	movs	r3, #248	; 0xf8
 8009984:	75fb      	strb	r3, [r7, #23]
 8009986:	e004      	b.n	8009992 <VL53L0X_StartMeasurement+0x172>
		break;
 8009988:	bf00      	nop
 800998a:	e002      	b.n	8009992 <VL53L0X_StartMeasurement+0x172>
		break;
 800998c:	bf00      	nop
 800998e:	e000      	b.n	8009992 <VL53L0X_StartMeasurement+0x172>
		break;
 8009990:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80099b2:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d112      	bne.n	80099e0 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb1d 	bl	800a000 <VL53L0X_GetInterruptMaskStatus>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d103      	bne.n	80099d8 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2201      	movs	r2, #1
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e01c      	b.n	8009a12 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e018      	b.n	8009a12 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80099e0:	f107 030d 	add.w	r3, r7, #13
 80099e4:	461a      	mov	r2, r3
 80099e6:	2114      	movs	r1, #20
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f003 fddd 	bl	800d5a8 <VL53L0X_RdByte>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80099f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80099fa:	7b7b      	ldrb	r3, [r7, #13]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2201      	movs	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e002      	b.n	8009a12 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009a20:	b5b0      	push	{r4, r5, r7, lr}
 8009a22:	b096      	sub	sp, #88	; 0x58
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009a34:	230c      	movs	r3, #12
 8009a36:	2114      	movs	r1, #20
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f003 fd07 	bl	800d44c <VL53L0X_ReadMulti>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009a44:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 80d2 	bne.w	8009bf2 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2200      	movs	r2, #0
 8009a52:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8009a5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	021b      	lsls	r3, r3, #8
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009a76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	025b      	lsls	r3, r3, #9
 8009a8c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a92:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8009a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009aaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009aae:	025b      	lsls	r3, r3, #9
 8009ab0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8009ab6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009ad2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009ae2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009aee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009af4:	d047      	beq.n	8009b86 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8009af6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009af8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009b04:	4a58      	ldr	r2, [pc, #352]	; (8009c68 <VL53L0X_GetRangingMeasurementData+0x248>)
 8009b06:	fb82 1203 	smull	r1, r2, r2, r3
 8009b0a:	1192      	asrs	r2, r2, #6
 8009b0c:	17db      	asrs	r3, r3, #31
 8009b0e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009b10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7f1b      	ldrb	r3, [r3, #28]
 8009b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d02d      	beq.n	8009b86 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8009b2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b2c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	121b      	asrs	r3, r3, #8
 8009b36:	461a      	mov	r2, r3
				if ((SignalRate
 8009b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d10d      	bne.n	8009b5a <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8009b3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d004      	beq.n	8009b50 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8009b46:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8009b4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009b4e:	e016      	b.n	8009b7e <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8009b50:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009b54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009b58:	e011      	b.n	8009b7e <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8009b5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b60:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009b64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b66:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8009b6a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8009b6e:	121b      	asrs	r3, r3, #8
 8009b70:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b74:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009b76:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8009b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8009b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009b82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8009b86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00d      	beq.n	8009baa <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8009b8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8009b9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	019b      	lsls	r3, r3, #6
 8009ba2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	75da      	strb	r2, [r3, #23]
 8009ba8:	e006      	b.n	8009bb8 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009bb0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8009bb8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009bbc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009bc0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f003 f9f0 	bl	800cfb4 <VL53L0X_get_pal_range_status>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009be2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d103      	bne.n	8009bf2 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009bea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bf2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d12f      	bne.n	8009c5a <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f107 040c 	add.w	r4, r7, #12
 8009c00:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009c14:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009c22:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009c28:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009c2e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009c34:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009c3a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009c40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8009c4a:	f107 050c 	add.w	r5, r7, #12
 8009c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c5a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3750      	adds	r7, #80	; 0x50
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bdb0      	pop	{r4, r5, r7, pc}
 8009c66:	bf00      	nop
 8009c68:	10624dd3 	.word	0x10624dd3

08009c6c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff f8b5 	bl	8008dec <VL53L0X_SetDeviceMode>
 8009c82:	4603      	mov	r3, r0
 8009c84:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fd16 	bl	80096c0 <VL53L0X_PerformSingleMeasurement>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff febc 	bl	8009a20 <VL53L0X_GetRangingMeasurementData>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d105      	bne.n	8009cc0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f962 	bl	8009f80 <VL53L0X_ClearInterruptMask>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8009cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	70fb      	strb	r3, [r7, #3]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	70bb      	strb	r3, [r7, #2]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009cf0:	23f6      	movs	r3, #246	; 0xf6
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e107      	b.n	8009f06 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009cf6:	78bb      	ldrb	r3, [r7, #2]
 8009cf8:	2b14      	cmp	r3, #20
 8009cfa:	d110      	bne.n	8009d1e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009cfc:	7e3b      	ldrb	r3, [r7, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009d02:	2310      	movs	r3, #16
 8009d04:	73bb      	strb	r3, [r7, #14]
 8009d06:	e001      	b.n	8009d0c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	2184      	movs	r1, #132	; 0x84
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f003 fbc6 	bl	800d4a4 <VL53L0X_WrByte>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]
 8009d1c:	e0f3      	b.n	8009f06 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009d1e:	78bb      	ldrb	r3, [r7, #2]
 8009d20:	2b15      	cmp	r3, #21
 8009d22:	f040 8097 	bne.w	8009e54 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009d26:	2201      	movs	r2, #1
 8009d28:	21ff      	movs	r1, #255	; 0xff
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f003 fbba 	bl	800d4a4 <VL53L0X_WrByte>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f003 fbb0 	bl	800d4a4 <VL53L0X_WrByte>
 8009d44:	4603      	mov	r3, r0
 8009d46:	461a      	mov	r2, r3
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	21ff      	movs	r1, #255	; 0xff
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f003 fba6 	bl	800d4a4 <VL53L0X_WrByte>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009d62:	2201      	movs	r2, #1
 8009d64:	2180      	movs	r1, #128	; 0x80
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f003 fb9c 	bl	800d4a4 <VL53L0X_WrByte>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009d76:	2202      	movs	r2, #2
 8009d78:	2185      	movs	r1, #133	; 0x85
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f003 fb92 	bl	800d4a4 <VL53L0X_WrByte>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	21ff      	movs	r1, #255	; 0xff
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f003 fb88 	bl	800d4a4 <VL53L0X_WrByte>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009d9e:	2200      	movs	r2, #0
 8009da0:	21cd      	movs	r1, #205	; 0xcd
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f003 fb7e 	bl	800d4a4 <VL53L0X_WrByte>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009db2:	2211      	movs	r2, #17
 8009db4:	21cc      	movs	r1, #204	; 0xcc
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f003 fb74 	bl	800d4a4 <VL53L0X_WrByte>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009dc6:	2207      	movs	r2, #7
 8009dc8:	21ff      	movs	r1, #255	; 0xff
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f003 fb6a 	bl	800d4a4 <VL53L0X_WrByte>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	21be      	movs	r1, #190	; 0xbe
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f003 fb60 	bl	800d4a4 <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009dee:	2206      	movs	r2, #6
 8009df0:	21ff      	movs	r1, #255	; 0xff
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f003 fb56 	bl	800d4a4 <VL53L0X_WrByte>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009e02:	2209      	movs	r2, #9
 8009e04:	21cc      	movs	r1, #204	; 0xcc
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f003 fb4c 	bl	800d4a4 <VL53L0X_WrByte>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	461a      	mov	r2, r3
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009e16:	2200      	movs	r2, #0
 8009e18:	21ff      	movs	r1, #255	; 0xff
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f003 fb42 	bl	800d4a4 <VL53L0X_WrByte>
 8009e20:	4603      	mov	r3, r0
 8009e22:	461a      	mov	r2, r3
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	21ff      	movs	r1, #255	; 0xff
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f003 fb38 	bl	800d4a4 <VL53L0X_WrByte>
 8009e34:	4603      	mov	r3, r0
 8009e36:	461a      	mov	r2, r3
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f003 fb2e 	bl	800d4a4 <VL53L0X_WrByte>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	73fb      	strb	r3, [r7, #15]
 8009e52:	e058      	b.n	8009f06 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d121      	bne.n	8009ea0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8009e5c:	787b      	ldrb	r3, [r7, #1]
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d81b      	bhi.n	8009e9a <VL53L0X_SetGpioConfig+0x1ce>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <VL53L0X_SetGpioConfig+0x19c>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e7d 	.word	0x08009e7d
 8009e6c:	08009e83 	.word	0x08009e83
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e8f 	.word	0x08009e8f
 8009e78:	08009e95 	.word	0x08009e95
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]
				break;
 8009e80:	e00f      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009e82:	2301      	movs	r3, #1
 8009e84:	73bb      	strb	r3, [r7, #14]
				break;
 8009e86:	e00c      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	73bb      	strb	r3, [r7, #14]
				break;
 8009e8c:	e009      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73bb      	strb	r3, [r7, #14]
				break;
 8009e92:	e006      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009e94:	2304      	movs	r3, #4
 8009e96:	73bb      	strb	r3, [r7, #14]
				break;
 8009e98:	e003      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009e9a:	23f5      	movs	r3, #245	; 0xf5
 8009e9c:	73fb      	strb	r3, [r7, #15]
 8009e9e:	e000      	b.n	8009ea2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009ea0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d107      	bne.n	8009eba <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	461a      	mov	r2, r3
 8009eae:	210a      	movs	r1, #10
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f003 faf7 	bl	800d4a4 <VL53L0X_WrByte>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10f      	bne.n	8009ee2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009ec2:	7e3b      	ldrb	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73bb      	strb	r3, [r7, #14]
 8009ecc:	e001      	b.n	8009ed2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009ece:	2310      	movs	r3, #16
 8009ed0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	22ef      	movs	r2, #239	; 0xef
 8009ed6:	2184      	movs	r1, #132	; 0x84
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f003 fb31 	bl	800d540 <VL53L0X_UpdateByte>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	787a      	ldrb	r2, [r7, #1]
 8009eee:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d105      	bne.n	8009f06 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009efa:	2100      	movs	r1, #0
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f83f 	bl	8009f80 <VL53L0X_ClearInterruptMask>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop

08009f14 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	460b      	mov	r3, r1
 8009f22:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f24:	2300      	movs	r3, #0
 8009f26:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	210e      	movs	r1, #14
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f003 fb63 	bl	800d5fc <VL53L0X_RdWord>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009f3a:	8abb      	ldrh	r3, [r7, #20]
 8009f3c:	045b      	lsls	r3, r3, #17
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <VL53L0X_GetInterruptThresholds+0x68>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10f      	bne.n	8009f70 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	461a      	mov	r2, r3
 8009f56:	210c      	movs	r1, #12
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f003 fb4f 	bl	800d5fc <VL53L0X_RdWord>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009f62:	8abb      	ldrh	r3, [r7, #20]
 8009f64:	045b      	lsls	r3, r3, #17
 8009f66:	461a      	mov	r2, r3
 8009f68:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <VL53L0X_GetInterruptThresholds+0x68>)
 8009f6a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	1ffe0000 	.word	0x1ffe0000

08009f80 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009f92:	2201      	movs	r2, #1
 8009f94:	210b      	movs	r1, #11
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f003 fa84 	bl	800d4a4 <VL53L0X_WrByte>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	210b      	movs	r1, #11
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f003 fa7d 	bl	800d4a4 <VL53L0X_WrByte>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009fb4:	f107 030d 	add.w	r3, r7, #13
 8009fb8:	461a      	mov	r2, r3
 8009fba:	2113      	movs	r1, #19
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f003 faf3 	bl	800d5a8 <VL53L0X_RdByte>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009fd2:	7b7b      	ldrb	r3, [r7, #13]
 8009fd4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d006      	beq.n	8009fea <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d803      	bhi.n	8009fea <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0d3      	beq.n	8009f92 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d901      	bls.n	8009ff4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009ff0:	23f4      	movs	r3, #244	; 0xf4
 8009ff2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a00e:	f107 030e 	add.w	r3, r7, #14
 800a012:	461a      	mov	r2, r3
 800a014:	2113      	movs	r1, #19
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f003 fac6 	bl	800d5a8 <VL53L0X_RdByte>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	f003 0207 	and.w	r2, r3, #7
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	f003 0318 	and.w	r3, r3, #24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a034:	23fa      	movs	r3, #250	; 0xfa
 800a036:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a050:	2300      	movs	r3, #0
 800a052:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fa03 	bl	800a464 <VL53L0X_perform_ref_spad_management>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a07c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a080:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a086:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	461a      	mov	r2, r3
 800a08e:	2128      	movs	r1, #40	; 0x28
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f003 fab3 	bl	800d5fc <VL53L0X_RdWord>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11e      	bne.n	800a0e0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a0ac:	893b      	ldrh	r3, [r7, #8]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	dd0b      	ble.n	800a0d0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a0b8:	893a      	ldrh	r2, [r7, #8]
 800a0ba:	897b      	ldrh	r3, [r7, #10]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	b21b      	sxth	r3, r3
 800a0c2:	461a      	mov	r2, r3
					* 250;
 800a0c4:	23fa      	movs	r3, #250	; 0xfa
 800a0c6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e007      	b.n	800a0e0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a0d0:	893b      	ldrh	r3, [r7, #8]
 800a0d2:	b21b      	sxth	r3, r3
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	23fa      	movs	r3, #250	; 0xfa
 800a0d8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b08b      	sub	sp, #44	; 0x2c
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a0fa:	2308      	movs	r3, #8
 800a0fc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a112:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	fbb3 f2f2 	udiv	r2, r3, r2
 800a11c:	69b9      	ldr	r1, [r7, #24]
 800a11e:	fb01 f202 	mul.w	r2, r1, r2
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
 800a12a:	e030      	b.n	800a18e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d11e      	bne.n	800a180 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a142:	7ffa      	ldrb	r2, [r7, #31]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	fa42 f303 	asr.w	r3, r2, r3
 800a14a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a150:	e016      	b.n	800a180 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a152:	7ffb      	ldrb	r3, [r7, #31]
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <get_next_good_spad+0x88>
				success = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	fb02 f203 	mul.w	r2, r2, r3
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	4413      	add	r3, r2
 800a16c:	461a      	mov	r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	601a      	str	r2, [r3, #0]
				break;
 800a172:	e009      	b.n	800a188 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a174:	7ffb      	ldrb	r3, [r7, #31]
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	3301      	adds	r3, #1
 800a17e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a180:	6a3a      	ldr	r2, [r7, #32]
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	429a      	cmp	r2, r3
 800a186:	d3e4      	bcc.n	800a152 <get_next_good_spad+0x66>
				coarseIndex++) {
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3301      	adds	r3, #1
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	429a      	cmp	r2, r3
 800a194:	d202      	bcs.n	800a19c <get_next_good_spad+0xb0>
 800a196:	7fbb      	ldrb	r3, [r7, #30]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0c7      	beq.n	800a12c <get_next_good_spad+0x40>
		}
	}
}
 800a19c:	bf00      	nop
 800a19e:	372c      	adds	r7, #44	; 0x2c
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	099b      	lsrs	r3, r3, #6
 800a1b8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a1ba:	4a07      	ldr	r2, [pc, #28]	; (800a1d8 <is_aperture+0x30>)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <is_aperture+0x22>
		isAperture = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	200002c0 	.word	0x200002c0

0800a1dc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b089      	sub	sp, #36	; 0x24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	fb01 f202 	mul.w	r2, r1, r2
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	429a      	cmp	r2, r3
 800a212:	d302      	bcc.n	800a21a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a214:	23ce      	movs	r3, #206	; 0xce
 800a216:	77fb      	strb	r3, [r7, #31]
 800a218:	e010      	b.n	800a23c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	4413      	add	r3, r2
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b25a      	sxtb	r2, r3
 800a224:	2101      	movs	r1, #1
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	fa01 f303 	lsl.w	r3, r1, r3
 800a22c:	b25b      	sxtb	r3, r3
 800a22e:	4313      	orrs	r3, r2
 800a230:	b259      	sxtb	r1, r3
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	4413      	add	r3, r2
 800a238:	b2ca      	uxtb	r2, r1
 800a23a:	701a      	strb	r2, [r3, #0]

	return status;
 800a23c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3724      	adds	r7, #36	; 0x24
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a256:	2306      	movs	r3, #6
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	21b0      	movs	r1, #176	; 0xb0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f003 f8c5 	bl	800d3ec <VL53L0X_WriteMulti>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a27c:	2306      	movs	r3, #6
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	21b0      	movs	r1, #176	; 0xb0
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f003 f8e2 	bl	800d44c <VL53L0X_ReadMulti>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a28c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2ba:	e02b      	b.n	800a314 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a2bc:	f107 031c 	add.w	r3, r7, #28
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff11 	bl	800a0ec <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d103      	bne.n	800a2da <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a2d2:	23ce      	movs	r3, #206	; 0xce
 800a2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a2d8:	e020      	b.n	800a31c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e0:	4413      	add	r3, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff ff60 	bl	800a1a8 <is_aperture>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a2f2:	23ce      	movs	r3, #206	; 0xce
 800a2f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a2f8:	e010      	b.n	800a31c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a2fe:	6a3a      	ldr	r2, [r7, #32]
 800a300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a302:	6838      	ldr	r0, [r7, #0]
 800a304:	f7ff ff6a 	bl	800a1dc <enable_spad_bit>
		currentSpad++;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	3301      	adds	r3, #1
 800a30c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	3301      	adds	r3, #1
 800a312:	62bb      	str	r3, [r7, #40]	; 0x28
 800a314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a318:	429a      	cmp	r2, r3
 800a31a:	d3cf      	bcc.n	800a2bc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31e:	6a3a      	ldr	r2, [r7, #32]
 800a320:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a322:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f7ff ff8d 	bl	800a24c <set_ref_spad_map>
 800a332:	4603      	mov	r3, r0
 800a334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a338:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d121      	bne.n	800a384 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a340:	f107 0314 	add.w	r3, r7, #20
 800a344:	4619      	mov	r1, r3
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7ff ff93 	bl	800a272 <get_ref_spad_map>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a356:	e011      	b.n	800a37c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	4413      	add	r3, r2
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	f107 0114 	add.w	r1, r7, #20
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	440b      	add	r3, r1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d003      	beq.n	800a376 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a36e:	23ce      	movs	r3, #206	; 0xce
 800a370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a374:	e006      	b.n	800a384 <enable_ref_spads+0xec>
			}
			i++;
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	3301      	adds	r3, #1
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	429a      	cmp	r2, r3
 800a382:	d3e9      	bcc.n	800a358 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a384:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3730      	adds	r7, #48	; 0x30
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a3ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d107      	bne.n	800a3c8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a3b8:	22c0      	movs	r2, #192	; 0xc0
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f003 f871 	bl	800d4a4 <VL53L0X_WrByte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a3c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d108      	bne.n	800a3e2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a3d0:	f107 0308 	add.w	r3, r7, #8
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fc48 	bl	8009c6c <VL53L0X_PerformSingleRangingMeasurement>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a3e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d107      	bne.n	800a3fa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	21ff      	movs	r1, #255	; 0xff
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f003 f858 	bl	800d4a4 <VL53L0X_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d107      	bne.n	800a412 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	21b6      	movs	r1, #182	; 0xb6
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f003 f8f8 	bl	800d5fc <VL53L0X_RdWord>
 800a40c:	4603      	mov	r3, r0
 800a40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a412:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a416:	2b00      	cmp	r3, #0
 800a418:	d107      	bne.n	800a42a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a41a:	2200      	movs	r2, #0
 800a41c:	21ff      	movs	r1, #255	; 0xff
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f003 f840 	bl	800d4a4 <VL53L0X_WrByte>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d112      	bne.n	800a458 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a436:	461a      	mov	r2, r3
 800a438:	2101      	movs	r1, #1
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f003 f832 	bl	800d4a4 <VL53L0X_WrByte>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a446:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d104      	bne.n	800a458 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a454:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800a458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3728      	adds	r7, #40	; 0x28
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b09d      	sub	sp, #116	; 0x74
 800a468:	af06      	add	r7, sp, #24
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a476:	23b4      	movs	r3, #180	; 0xb4
 800a478:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800a47c:	2303      	movs	r3, #3
 800a47e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800a480:	232c      	movs	r3, #44	; 0x2c
 800a482:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a490:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a494:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800a49e:	2306      	movs	r3, #6
 800a4a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800a4c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ce:	e009      	b.n	800a4e4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d3f1      	bcc.n	800a4d0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	21ff      	movs	r1, #255	; 0xff
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f002 ffd7 	bl	800d4a4 <VL53L0X_WrByte>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a4fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a500:	2b00      	cmp	r3, #0
 800a502:	d107      	bne.n	800a514 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800a504:	2200      	movs	r2, #0
 800a506:	214f      	movs	r1, #79	; 0x4f
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f002 ffcb 	bl	800d4a4 <VL53L0X_WrByte>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a514:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d107      	bne.n	800a52c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800a51c:	222c      	movs	r2, #44	; 0x2c
 800a51e:	214e      	movs	r1, #78	; 0x4e
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f002 ffbf 	bl	800d4a4 <VL53L0X_WrByte>
 800a526:	4603      	mov	r3, r0
 800a528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a52c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a530:	2b00      	cmp	r3, #0
 800a532:	d107      	bne.n	800a544 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a534:	2200      	movs	r2, #0
 800a536:	21ff      	movs	r1, #255	; 0xff
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f002 ffb3 	bl	800d4a4 <VL53L0X_WrByte>
 800a53e:	4603      	mov	r3, r0
 800a540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a544:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d109      	bne.n	800a560 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800a54c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a550:	461a      	mov	r2, r3
 800a552:	21b6      	movs	r1, #182	; 0xb6
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f002 ffa5 	bl	800d4a4 <VL53L0X_WrByte>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800a560:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a564:	2b00      	cmp	r3, #0
 800a566:	d107      	bne.n	800a578 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800a568:	2200      	movs	r2, #0
 800a56a:	2180      	movs	r1, #128	; 0x80
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f002 ff99 	bl	800d4a4 <VL53L0X_WrByte>
 800a572:	4603      	mov	r3, r0
 800a574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800a578:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800a580:	f107 0210 	add.w	r2, r7, #16
 800a584:	f107 0111 	add.w	r1, r7, #17
 800a588:	2300      	movs	r3, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fbbb 	bl	800ad06 <VL53L0X_perform_ref_calibration>
 800a590:	4603      	mov	r3, r0
 800a592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800a596:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d121      	bne.n	800a5e2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800a5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800a5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ac:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800a5ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a5be:	f107 0218 	add.w	r2, r7, #24
 800a5c2:	9204      	str	r2, [sp, #16]
 800a5c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c6:	9203      	str	r2, [sp, #12]
 800a5c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5ca:	9202      	str	r2, [sp, #8]
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff fe5e 	bl	800a298 <enable_ref_spads>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d174      	bne.n	800a6d4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800a5ee:	f107 0312 	add.w	r3, r7, #18
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fecb 	bl	800a390 <perform_ref_signal_measurement>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a600:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a604:	2b00      	cmp	r3, #0
 800a606:	d161      	bne.n	800a6cc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800a608:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a60a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d25d      	bcs.n	800a6cc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800a610:	2300      	movs	r3, #0
 800a612:	64bb      	str	r3, [r7, #72]	; 0x48
 800a614:	e009      	b.n	800a62a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800a624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a626:	3301      	adds	r3, #1
 800a628:	64bb      	str	r3, [r7, #72]	; 0x48
 800a62a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	429a      	cmp	r2, r3
 800a630:	d3f1      	bcc.n	800a616 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800a632:	e002      	b.n	800a63a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800a634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a636:	3301      	adds	r3, #1
 800a638:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800a63a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a640:	4413      	add	r3, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fdb0 	bl	800a1a8 <is_aperture>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800a64e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	429a      	cmp	r2, r3
 800a654:	d3ee      	bcc.n	800a634 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800a656:	2301      	movs	r3, #1
 800a658:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800a65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a65c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800a66a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a66e:	f107 0218 	add.w	r2, r7, #24
 800a672:	9204      	str	r2, [sp, #16]
 800a674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a676:	9203      	str	r2, [sp, #12]
 800a678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a67a:	9202      	str	r2, [sp, #8]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	4623      	mov	r3, r4
 800a684:	4602      	mov	r2, r0
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff fe06 	bl	800a298 <enable_ref_spads>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a692:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a696:	2b00      	cmp	r3, #0
 800a698:	d11b      	bne.n	800a6d2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800a69e:	f107 0312 	add.w	r3, r7, #18
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7ff fe73 	bl	800a390 <perform_ref_signal_measurement>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800a6b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10c      	bne.n	800a6d2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800a6b8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800a6ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d208      	bcs.n	800a6d2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800a6ca:	e002      	b.n	800a6d2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d0:	e000      	b.n	800a6d4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800a6d2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a6d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 80af 	bne.w	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800a6de:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800a6e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	f240 80aa 	bls.w	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800a6f8:	f107 031c 	add.w	r3, r7, #28
 800a6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6fe:	4618      	mov	r0, r3
 800a700:	f003 f832 	bl	800d768 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800a704:	8a7b      	ldrh	r3, [r7, #18]
 800a706:	461a      	mov	r2, r3
 800a708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfb8      	it	lt
 800a710:	425b      	neglt	r3, r3
 800a712:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800a71a:	e086      	b.n	800a82a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800a722:	f107 0314 	add.w	r3, r7, #20
 800a726:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72a:	f7ff fcdf 	bl	800a0ec <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d103      	bne.n	800a73e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a736:	23ce      	movs	r3, #206	; 0xce
 800a738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800a73c:	e07e      	b.n	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800a73e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fd2e 	bl	800a1a8 <is_aperture>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a752:	4293      	cmp	r3, r2
 800a754:	d003      	beq.n	800a75e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800a75c:	e06e      	b.n	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800a75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a760:	3301      	adds	r3, #1
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800a76e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fd32 	bl	800a1dc <enable_spad_bit>
 800a778:	4603      	mov	r3, r0
 800a77a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a77e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10c      	bne.n	800a7a0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800a786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a788:	3301      	adds	r3, #1
 800a78a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800a792:	4619      	mov	r1, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fd59 	bl	800a24c <set_ref_spad_map>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800a7a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d146      	bne.n	800a836 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800a7a8:	f107 0312 	add.w	r3, r7, #18
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff fdee 	bl	800a390 <perform_ref_signal_measurement>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800a7ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d13b      	bne.n	800a83a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a7c2:	8a7b      	ldrh	r3, [r7, #18]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	425b      	neglt	r3, r3
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a7d2:	8a7b      	ldrh	r3, [r7, #18]
 800a7d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d21c      	bcs.n	800a814 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d914      	bls.n	800a80c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a7e2:	f107 031c 	add.w	r3, r7, #28
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff fd2f 	bl	800a24c <set_ref_spad_map>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800a7fa:	f107 011c 	add.w	r1, r7, #28
 800a7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a800:	4618      	mov	r0, r3
 800a802:	f002 ffb1 	bl	800d768 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a808:	3b01      	subs	r3, #1
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e00a      	b.n	800a82a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800a81e:	f107 031c 	add.w	r3, r7, #28
 800a822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a824:	4618      	mov	r0, r3
 800a826:	f002 ff9f 	bl	800d768 <memcpy>
		while (!complete) {
 800a82a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f43f af74 	beq.w	800a71c <VL53L0X_perform_ref_spad_management+0x2b8>
 800a834:	e002      	b.n	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a836:	bf00      	nop
 800a838:	e000      	b.n	800a83c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a83a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a83c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a840:	2b00      	cmp	r3, #0
 800a842:	d115      	bne.n	800a870 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a848:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a850:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800a870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a874:	4618      	mov	r0, r3
 800a876:	375c      	adds	r7, #92	; 0x5c
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}

0800a87c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b093      	sub	sp, #76	; 0x4c
 800a880:	af06      	add	r7, sp, #24
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800a890:	2300      	movs	r3, #0
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800a894:	23b4      	movs	r3, #180	; 0xb4
 800a896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a89a:	2306      	movs	r3, #6
 800a89c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a89e:	232c      	movs	r3, #44	; 0x2c
 800a8a0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	21ff      	movs	r1, #255	; 0xff
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f002 fdfc 	bl	800d4a4 <VL53L0X_WrByte>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a8b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d107      	bne.n	800a8ca <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	214f      	movs	r1, #79	; 0x4f
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f002 fdf0 	bl	800d4a4 <VL53L0X_WrByte>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a8ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d107      	bne.n	800a8e2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a8d2:	222c      	movs	r2, #44	; 0x2c
 800a8d4:	214e      	movs	r1, #78	; 0x4e
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f002 fde4 	bl	800d4a4 <VL53L0X_WrByte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a8e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d107      	bne.n	800a8fa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	21ff      	movs	r1, #255	; 0xff
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f002 fdd8 	bl	800d4a4 <VL53L0X_WrByte>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a8fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d109      	bne.n	800a916 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a906:	461a      	mov	r2, r3
 800a908:	21b6      	movs	r1, #182	; 0xb6
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f002 fdca 	bl	800d4a4 <VL53L0X_WrByte>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a916:	2300      	movs	r3, #0
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
 800a91a:	e009      	b.n	800a930 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	4413      	add	r3, r2
 800a922:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	3301      	adds	r3, #1
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	429a      	cmp	r2, r3
 800a936:	d3f1      	bcc.n	800a91c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d011      	beq.n	800a962 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a93e:	e002      	b.n	800a946 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	3301      	adds	r3, #1
 800a944:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a946:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	4413      	add	r3, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fc2a 	bl	800a1a8 <is_aperture>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d103      	bne.n	800a962 <VL53L0X_set_reference_spads+0xe6>
 800a95a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d3ee      	bcc.n	800a940 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a96e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a972:	79f9      	ldrb	r1, [r7, #7]
 800a974:	f107 0214 	add.w	r2, r7, #20
 800a978:	9204      	str	r2, [sp, #16]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	9203      	str	r2, [sp, #12]
 800a97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a980:	9202      	str	r2, [sp, #8]
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	4623      	mov	r3, r4
 800a98a:	4602      	mov	r2, r0
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff fc83 	bl	800a298 <enable_ref_spads>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a998:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10c      	bne.n	800a9ba <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	79fa      	ldrb	r2, [r7, #7]
 800a9b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a9ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3734      	adds	r7, #52	; 0x34
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd90      	pop	{r4, r7, pc}

0800a9c6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a9d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	f043 0301 	orr.w	r3, r3, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f002 fd5a 	bl	800d4a4 <VL53L0X_WrByte>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d104      	bne.n	800aa06 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f9bf 	bl	800ad80 <VL53L0X_measurement_poll_for_completion>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800aa06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800aa0e:	2100      	movs	r1, #0
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7ff fab5 	bl	8009f80 <VL53L0X_ClearInterruptMask>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800aa1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800aa22:	2200      	movs	r2, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f002 fd3c 	bl	800d4a4 <VL53L0X_WrByte>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800aa30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	70fb      	strb	r3, [r7, #3]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70bb      	strb	r3, [r7, #2]
 800aa52:	4613      	mov	r3, r2
 800aa54:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa5e:	2201      	movs	r2, #1
 800aa60:	21ff      	movs	r1, #255	; 0xff
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f002 fd1e 	bl	800d4a4 <VL53L0X_WrByte>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f002 fd14 	bl	800d4a4 <VL53L0X_WrByte>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aa86:	2200      	movs	r2, #0
 800aa88:	21ff      	movs	r1, #255	; 0xff
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f002 fd0a 	bl	800d4a4 <VL53L0X_WrByte>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01e      	beq.n	800aade <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800aaa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d009      	beq.n	800aabc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	21cb      	movs	r1, #203	; 0xcb
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f002 fd7b 	bl	800d5a8 <VL53L0X_RdByte>
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800aabc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d02a      	beq.n	800ab1a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800aac4:	f107 030e 	add.w	r3, r7, #14
 800aac8:	461a      	mov	r2, r3
 800aaca:	21ee      	movs	r1, #238	; 0xee
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f002 fd6b 	bl	800d5a8 <VL53L0X_RdByte>
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	4313      	orrs	r3, r2
 800aada:	73fb      	strb	r3, [r7, #15]
 800aadc:	e01d      	b.n	800ab1a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800aade:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800aae6:	78bb      	ldrb	r3, [r7, #2]
 800aae8:	461a      	mov	r2, r3
 800aaea:	21cb      	movs	r1, #203	; 0xcb
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f002 fcd9 	bl	800d4a4 <VL53L0X_WrByte>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800aafc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800ab04:	787b      	ldrb	r3, [r7, #1]
 800ab06:	2280      	movs	r2, #128	; 0x80
 800ab08:	21ee      	movs	r1, #238	; 0xee
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f002 fd18 	bl	800d540 <VL53L0X_UpdateByte>
 800ab10:	4603      	mov	r3, r0
 800ab12:	461a      	mov	r2, r3
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	21ff      	movs	r1, #255	; 0xff
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f002 fcc0 	bl	800d4a4 <VL53L0X_WrByte>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ab2e:	2201      	movs	r2, #1
 800ab30:	2100      	movs	r1, #0
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f002 fcb6 	bl	800d4a4 <VL53L0X_WrByte>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ab42:	2200      	movs	r2, #0
 800ab44:	21ff      	movs	r1, #255	; 0xff
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f002 fcac 	bl	800d4a4 <VL53L0X_WrByte>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	461a      	mov	r2, r3
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	f023 0310 	bic.w	r3, r3, #16
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	701a      	strb	r2, [r3, #0]

	return Status;
 800ab62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b08a      	sub	sp, #40	; 0x28
 800ab72:	af04      	add	r7, sp, #16
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	71fb      	strb	r3, [r7, #7]
 800ab80:	4613      	mov	r3, r2
 800ab82:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ab98:	79bb      	ldrb	r3, [r7, #6]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800aba4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800aba6:	2201      	movs	r2, #1
 800aba8:	2101      	movs	r1, #1
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f002 fc7a 	bl	800d4a4 <VL53L0X_WrByte>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800abb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800abbc:	2140      	movs	r1, #64	; 0x40
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff ff01 	bl	800a9c6 <VL53L0X_perform_single_ref_calibration>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800abc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d115      	bne.n	800abfc <VL53L0X_perform_vhv_calibration+0x8e>
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d112      	bne.n	800abfc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800abd6:	7d39      	ldrb	r1, [r7, #20]
 800abd8:	7d7a      	ldrb	r2, [r7, #21]
 800abda:	2300      	movs	r3, #0
 800abdc:	9303      	str	r3, [sp, #12]
 800abde:	2301      	movs	r3, #1
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	f107 0313 	add.w	r3, r7, #19
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	460b      	mov	r3, r1
 800abee:	2101      	movs	r1, #1
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff ff23 	bl	800aa3c <VL53L0X_ref_calibration_io>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]
 800abfa:	e002      	b.n	800ac02 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800ac02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d112      	bne.n	800ac30 <VL53L0X_perform_vhv_calibration+0xc2>
 800ac0a:	79bb      	ldrb	r3, [r7, #6]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00f      	beq.n	800ac30 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ac10:	7dbb      	ldrb	r3, [r7, #22]
 800ac12:	461a      	mov	r2, r3
 800ac14:	2101      	movs	r1, #1
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f002 fc44 	bl	800d4a4 <VL53L0X_WrByte>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ac20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	7dba      	ldrb	r2, [r7, #22]
 800ac2c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800ac30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08a      	sub	sp, #40	; 0x28
 800ac40:	af04      	add	r7, sp, #16
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4611      	mov	r1, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	71fb      	strb	r3, [r7, #7]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ac62:	79bb      	ldrb	r3, [r7, #6]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ac6e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800ac70:	2202      	movs	r2, #2
 800ac72:	2101      	movs	r1, #1
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f002 fc15 	bl	800d4a4 <VL53L0X_WrByte>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800ac7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d105      	bne.n	800ac92 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800ac86:	2100      	movs	r1, #0
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff fe9c 	bl	800a9c6 <VL53L0X_perform_single_ref_calibration>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800ac92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d115      	bne.n	800acc6 <VL53L0X_perform_phase_calibration+0x8a>
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d112      	bne.n	800acc6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800aca0:	7d39      	ldrb	r1, [r7, #20]
 800aca2:	7d7a      	ldrb	r2, [r7, #21]
 800aca4:	2301      	movs	r3, #1
 800aca6:	9303      	str	r3, [sp, #12]
 800aca8:	2300      	movs	r3, #0
 800acaa:	9302      	str	r3, [sp, #8]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	f107 0313 	add.w	r3, r7, #19
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	460b      	mov	r3, r1
 800acb8:	2101      	movs	r1, #1
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f7ff febe 	bl	800aa3c <VL53L0X_ref_calibration_io>
 800acc0:	4603      	mov	r3, r0
 800acc2:	75fb      	strb	r3, [r7, #23]
 800acc4:	e002      	b.n	800accc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2200      	movs	r2, #0
 800acca:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800accc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d112      	bne.n	800acfa <VL53L0X_perform_phase_calibration+0xbe>
 800acd4:	79bb      	ldrb	r3, [r7, #6]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00f      	beq.n	800acfa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800acda:	7dbb      	ldrb	r3, [r7, #22]
 800acdc:	461a      	mov	r2, r3
 800acde:	2101      	movs	r1, #1
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f002 fbdf 	bl	800d4a4 <VL53L0X_WrByte>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800acea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d103      	bne.n	800acfa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	7dba      	ldrb	r2, [r7, #22]
 800acf6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800acfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ad22:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	2300      	movs	r3, #0
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7ff ff1f 	bl	800ab6e <VL53L0X_perform_vhv_calibration>
 800ad30:	4603      	mov	r3, r0
 800ad32:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800ad34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d107      	bne.n	800ad4c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800ad3c:	78fa      	ldrb	r2, [r7, #3]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff ff7a 	bl	800ac3c <VL53L0X_perform_phase_calibration>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800ad4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10f      	bne.n	800ad74 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ad54:	7dbb      	ldrb	r3, [r7, #22]
 800ad56:	461a      	mov	r2, r3
 800ad58:	2101      	movs	r1, #1
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f002 fba2 	bl	800d4a4 <VL53L0X_WrByte>
 800ad60:	4603      	mov	r3, r0
 800ad62:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ad64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	7dba      	ldrb	r2, [r7, #22]
 800ad70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800ad74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800ad94:	f107 030f 	add.w	r3, r7, #15
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7fe fdff 	bl	800999e <VL53L0X_GetMeasurementDataReady>
 800ada0:	4603      	mov	r3, r0
 800ada2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800ada4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d110      	bne.n	800adce <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d00f      	beq.n	800add2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3301      	adds	r3, #1
 800adb6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800adbe:	d302      	bcc.n	800adc6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800adc0:	23f9      	movs	r3, #249	; 0xf9
 800adc2:	75fb      	strb	r3, [r7, #23]
			break;
 800adc4:	e006      	b.n	800add4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f002 fc8c 	bl	800d6e4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800adcc:	e7e2      	b.n	800ad94 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800adce:	bf00      	nop
 800add0:	e000      	b.n	800add4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800add2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800add4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	3301      	adds	r3, #1
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b085      	sub	sp, #20
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800ae38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae3c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800ae3e:	e002      	b.n	800ae46 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	089b      	lsrs	r3, r3, #2
 800ae44:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d8f8      	bhi.n	800ae40 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800ae4e:	e017      	b.n	800ae80 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d30b      	bcc.n	800ae74 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	085b      	lsrs	r3, r3, #1
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4413      	add	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	e002      	b.n	800ae7a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	085b      	lsrs	r3, r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	089b      	lsrs	r3, r3, #2
 800ae7e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e4      	bne.n	800ae50 <VL53L0X_isqrt+0x24>
	}

	return res;
 800ae86:	68fb      	ldr	r3, [r7, #12]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800aea0:	2200      	movs	r2, #0
 800aea2:	2183      	movs	r1, #131	; 0x83
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f002 fafd 	bl	800d4a4 <VL53L0X_WrByte>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800aeb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d11e      	bne.n	800aefa <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800aec0:	f107 030f 	add.w	r3, r7, #15
 800aec4:	461a      	mov	r2, r3
 800aec6:	2183      	movs	r1, #131	; 0x83
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f002 fb6d 	bl	800d5a8 <VL53L0X_RdByte>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <VL53L0X_device_read_strobe+0x5a>
 800aed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d106      	bne.n	800aeee <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	3301      	adds	r3, #1
 800aee4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aeec:	d3e8      	bcc.n	800aec0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aef4:	d301      	bcc.n	800aefa <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800aef6:	23f9      	movs	r3, #249	; 0xf9
 800aef8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800aefa:	2201      	movs	r2, #1
 800aefc:	2183      	movs	r1, #131	; 0x83
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f002 fad0 	bl	800d4a4 <VL53L0X_WrByte>
 800af04:	4603      	mov	r3, r0
 800af06:	461a      	mov	r2, r3
 800af08:	7dfb      	ldrb	r3, [r7, #23]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800af0e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b098      	sub	sp, #96	; 0x60
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af26:	2300      	movs	r3, #0
 800af28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800af4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800af4e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800af62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800af66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af6a:	2b07      	cmp	r3, #7
 800af6c:	f000 8408 	beq.w	800b780 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800af70:	2201      	movs	r2, #1
 800af72:	2180      	movs	r1, #128	; 0x80
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f002 fa95 	bl	800d4a4 <VL53L0X_WrByte>
 800af7a:	4603      	mov	r3, r0
 800af7c:	461a      	mov	r2, r3
 800af7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af82:	4313      	orrs	r3, r2
 800af84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af88:	2201      	movs	r2, #1
 800af8a:	21ff      	movs	r1, #255	; 0xff
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f002 fa89 	bl	800d4a4 <VL53L0X_WrByte>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af9a:	4313      	orrs	r3, r2
 800af9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f002 fa7d 	bl	800d4a4 <VL53L0X_WrByte>
 800afaa:	4603      	mov	r3, r0
 800afac:	461a      	mov	r2, r3
 800afae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800afb8:	2206      	movs	r2, #6
 800afba:	21ff      	movs	r1, #255	; 0xff
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f002 fa71 	bl	800d4a4 <VL53L0X_WrByte>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461a      	mov	r2, r3
 800afc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afca:	4313      	orrs	r3, r2
 800afcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800afd0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800afd4:	461a      	mov	r2, r3
 800afd6:	2183      	movs	r1, #131	; 0x83
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f002 fae5 	bl	800d5a8 <VL53L0X_RdByte>
 800afde:	4603      	mov	r3, r0
 800afe0:	461a      	mov	r2, r3
 800afe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afe6:	4313      	orrs	r3, r2
 800afe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800afec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aff0:	f043 0304 	orr.w	r3, r3, #4
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	461a      	mov	r2, r3
 800aff8:	2183      	movs	r1, #131	; 0x83
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f002 fa52 	bl	800d4a4 <VL53L0X_WrByte>
 800b000:	4603      	mov	r3, r0
 800b002:	461a      	mov	r2, r3
 800b004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b008:	4313      	orrs	r3, r2
 800b00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b00e:	2207      	movs	r2, #7
 800b010:	21ff      	movs	r1, #255	; 0xff
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f002 fa46 	bl	800d4a4 <VL53L0X_WrByte>
 800b018:	4603      	mov	r3, r0
 800b01a:	461a      	mov	r2, r3
 800b01c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b020:	4313      	orrs	r3, r2
 800b022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b026:	2201      	movs	r2, #1
 800b028:	2181      	movs	r1, #129	; 0x81
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f002 fa3a 	bl	800d4a4 <VL53L0X_WrByte>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b038:	4313      	orrs	r3, r2
 800b03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f002 fb50 	bl	800d6e4 <VL53L0X_PollingDelay>
 800b044:	4603      	mov	r3, r0
 800b046:	461a      	mov	r2, r3
 800b048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b04c:	4313      	orrs	r3, r2
 800b04e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b052:	2201      	movs	r2, #1
 800b054:	2180      	movs	r1, #128	; 0x80
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f002 fa24 	bl	800d4a4 <VL53L0X_WrByte>
 800b05c:	4603      	mov	r3, r0
 800b05e:	461a      	mov	r2, r3
 800b060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b064:	4313      	orrs	r3, r2
 800b066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 8098 	beq.w	800b1a6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b07a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f040 8091 	bne.w	800b1a6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b084:	226b      	movs	r2, #107	; 0x6b
 800b086:	2194      	movs	r1, #148	; 0x94
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f002 fa0b 	bl	800d4a4 <VL53L0X_WrByte>
 800b08e:	4603      	mov	r3, r0
 800b090:	461a      	mov	r2, r3
 800b092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b096:	4313      	orrs	r3, r2
 800b098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7ff fef9 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b0b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	2190      	movs	r1, #144	; 0x90
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f002 fad7 	bl	800d66c <VL53L0X_RdDWord>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	0bdb      	lsrs	r3, r3, #15
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b0e8:	2224      	movs	r2, #36	; 0x24
 800b0ea:	2194      	movs	r1, #148	; 0x94
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f002 f9d9 	bl	800d4a4 <VL53L0X_WrByte>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff fec7 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b106:	4603      	mov	r3, r0
 800b108:	461a      	mov	r2, r3
 800b10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b10e:	4313      	orrs	r3, r2
 800b110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b118:	461a      	mov	r2, r3
 800b11a:	2190      	movs	r1, #144	; 0x90
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f002 faa5 	bl	800d66c <VL53L0X_RdDWord>
 800b122:	4603      	mov	r3, r0
 800b124:	461a      	mov	r2, r3
 800b126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	0e1b      	lsrs	r3, r3, #24
 800b134:	b2db      	uxtb	r3, r3
 800b136:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	b2db      	uxtb	r3, r3
 800b146:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b14e:	2225      	movs	r2, #37	; 0x25
 800b150:	2194      	movs	r1, #148	; 0x94
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f002 f9a6 	bl	800d4a4 <VL53L0X_WrByte>
 800b158:	4603      	mov	r3, r0
 800b15a:	461a      	mov	r2, r3
 800b15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b160:	4313      	orrs	r3, r2
 800b162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fe94 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461a      	mov	r2, r3
 800b170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b174:	4313      	orrs	r3, r2
 800b176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b17a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b17e:	461a      	mov	r2, r3
 800b180:	2190      	movs	r1, #144	; 0x90
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f002 fa72 	bl	800d66c <VL53L0X_RdDWord>
 800b188:	4603      	mov	r3, r0
 800b18a:	461a      	mov	r2, r3
 800b18c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b190:	4313      	orrs	r3, r2
 800b192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	0c1b      	lsrs	r3, r3, #16
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b1a6:	78fb      	ldrb	r3, [r7, #3]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8189 	beq.w	800b4c4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b1b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1b6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f040 8182 	bne.w	800b4c4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	2194      	movs	r1, #148	; 0x94
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f002 f96d 	bl	800d4a4 <VL53L0X_WrByte>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fe5b 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b1ec:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2190      	movs	r1, #144	; 0x90
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f002 f9d7 	bl	800d5a8 <VL53L0X_RdByte>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b202:	4313      	orrs	r3, r2
 800b204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b208:	227b      	movs	r2, #123	; 0x7b
 800b20a:	2194      	movs	r1, #148	; 0x94
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f002 f949 	bl	800d4a4 <VL53L0X_WrByte>
 800b212:	4603      	mov	r3, r0
 800b214:	461a      	mov	r2, r3
 800b216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b21a:	4313      	orrs	r3, r2
 800b21c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff fe37 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b226:	4603      	mov	r3, r0
 800b228:	461a      	mov	r2, r3
 800b22a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b22e:	4313      	orrs	r3, r2
 800b230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b234:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b238:	461a      	mov	r2, r3
 800b23a:	2190      	movs	r1, #144	; 0x90
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f002 f9b3 	bl	800d5a8 <VL53L0X_RdByte>
 800b242:	4603      	mov	r3, r0
 800b244:	461a      	mov	r2, r3
 800b246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b24a:	4313      	orrs	r3, r2
 800b24c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b250:	2277      	movs	r2, #119	; 0x77
 800b252:	2194      	movs	r1, #148	; 0x94
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f002 f925 	bl	800d4a4 <VL53L0X_WrByte>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b262:	4313      	orrs	r3, r2
 800b264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff fe13 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
 800b272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b276:	4313      	orrs	r3, r2
 800b278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b27c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b280:	461a      	mov	r2, r3
 800b282:	2190      	movs	r1, #144	; 0x90
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f9f1 	bl	800d66c <VL53L0X_RdDWord>
 800b28a:	4603      	mov	r3, r0
 800b28c:	461a      	mov	r2, r3
 800b28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b292:	4313      	orrs	r3, r2
 800b294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	0e5b      	lsrs	r3, r3, #25
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	0c9b      	lsrs	r3, r3, #18
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	0adb      	lsrs	r3, r3, #11
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	091b      	lsrs	r3, r3, #4
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b2e2:	2278      	movs	r2, #120	; 0x78
 800b2e4:	2194      	movs	r1, #148	; 0x94
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f002 f8dc 	bl	800d4a4 <VL53L0X_WrByte>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fdca 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b308:	4313      	orrs	r3, r2
 800b30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b30e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b312:	461a      	mov	r2, r3
 800b314:	2190      	movs	r1, #144	; 0x90
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f002 f9a8 	bl	800d66c <VL53L0X_RdDWord>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b324:	4313      	orrs	r3, r2
 800b326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	0f5b      	lsrs	r3, r3, #29
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b334:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b33a:	4413      	add	r3, r2
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	0d9b      	lsrs	r3, r3, #22
 800b344:	b2db      	uxtb	r3, r3
 800b346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	0bdb      	lsrs	r3, r3, #15
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	0a1b      	lsrs	r3, r3, #8
 800b360:	b2db      	uxtb	r3, r3
 800b362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b366:	b2db      	uxtb	r3, r3
 800b368:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	085b      	lsrs	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b374:	b2db      	uxtb	r3, r3
 800b376:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	019b      	lsls	r3, r3, #6
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b384:	b2db      	uxtb	r3, r3
 800b386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b38a:	2279      	movs	r2, #121	; 0x79
 800b38c:	2194      	movs	r1, #148	; 0x94
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f002 f888 	bl	800d4a4 <VL53L0X_WrByte>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b39c:	4313      	orrs	r3, r2
 800b39e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fd76 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b3b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	2190      	movs	r1, #144	; 0x90
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f002 f954 	bl	800d66c <VL53L0X_RdDWord>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	0e9b      	lsrs	r3, r3, #26
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3dc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b3de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3e2:	4413      	add	r3, r2
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	0cdb      	lsrs	r3, r3, #19
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	0b1b      	lsrs	r3, r3, #12
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b400:	b2db      	uxtb	r3, r3
 800b402:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	b2db      	uxtb	r3, r3
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b424:	227a      	movs	r2, #122	; 0x7a
 800b426:	2194      	movs	r1, #148	; 0x94
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f002 f83b 	bl	800d4a4 <VL53L0X_WrByte>
 800b42e:	4603      	mov	r3, r0
 800b430:	461a      	mov	r2, r3
 800b432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b436:	4313      	orrs	r3, r2
 800b438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff fd29 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b44a:	4313      	orrs	r3, r2
 800b44c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b454:	461a      	mov	r2, r3
 800b456:	2190      	movs	r1, #144	; 0x90
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f002 f907 	bl	800d66c <VL53L0X_RdDWord>
 800b45e:	4603      	mov	r3, r0
 800b460:	461a      	mov	r2, r3
 800b462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b466:	4313      	orrs	r3, r2
 800b468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	0f9b      	lsrs	r3, r3, #30
 800b470:	b2db      	uxtb	r3, r3
 800b472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b476:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b47c:	4413      	add	r3, r2
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	0ddb      	lsrs	r3, r3, #23
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b492:	0c1b      	lsrs	r3, r3, #16
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	0a5b      	lsrs	r3, r3, #9
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	089b      	lsrs	r3, r3, #2
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 80f1 	beq.w	800b6b2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b4d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4d4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f040 80ea 	bne.w	800b6b2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b4de:	227b      	movs	r2, #123	; 0x7b
 800b4e0:	2194      	movs	r1, #148	; 0x94
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 ffde 	bl	800d4a4 <VL53L0X_WrByte>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7ff fccc 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	461a      	mov	r2, r3
 800b500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b504:	4313      	orrs	r3, r2
 800b506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800b50a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b50e:	461a      	mov	r2, r3
 800b510:	2190      	movs	r1, #144	; 0x90
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f002 f8aa 	bl	800d66c <VL53L0X_RdDWord>
 800b518:	4603      	mov	r3, r0
 800b51a:	461a      	mov	r2, r3
 800b51c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b520:	4313      	orrs	r3, r2
 800b522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800b526:	227c      	movs	r2, #124	; 0x7c
 800b528:	2194      	movs	r1, #148	; 0x94
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 ffba 	bl	800d4a4 <VL53L0X_WrByte>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b538:	4313      	orrs	r3, r2
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fca8 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b544:	4603      	mov	r3, r0
 800b546:	461a      	mov	r2, r3
 800b548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b54c:	4313      	orrs	r3, r2
 800b54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800b552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b556:	461a      	mov	r2, r3
 800b558:	2190      	movs	r1, #144	; 0x90
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f002 f886 	bl	800d66c <VL53L0X_RdDWord>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b568:	4313      	orrs	r3, r2
 800b56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800b56e:	2273      	movs	r2, #115	; 0x73
 800b570:	2194      	movs	r1, #148	; 0x94
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 ff96 	bl	800d4a4 <VL53L0X_WrByte>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b580:	4313      	orrs	r3, r2
 800b582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fc84 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b594:	4313      	orrs	r3, r2
 800b596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b59a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b59e:	461a      	mov	r2, r3
 800b5a0:	2190      	movs	r1, #144	; 0x90
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f002 f862 	bl	800d66c <VL53L0X_RdDWord>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800b5be:	2274      	movs	r2, #116	; 0x74
 800b5c0:	2194      	movs	r1, #148	; 0x94
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 ff6e 	bl	800d4a4 <VL53L0X_WrByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff fc5c 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b5ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	2190      	movs	r1, #144	; 0x90
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f002 f83a 	bl	800d66c <VL53L0X_RdDWord>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b600:	4313      	orrs	r3, r2
 800b602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800b60a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b60c:	4313      	orrs	r3, r2
 800b60e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800b610:	2275      	movs	r2, #117	; 0x75
 800b612:	2194      	movs	r1, #148	; 0x94
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 ff45 	bl	800d4a4 <VL53L0X_WrByte>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461a      	mov	r2, r3
 800b61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b622:	4313      	orrs	r3, r2
 800b624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff fc33 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b636:	4313      	orrs	r3, r2
 800b638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b63c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b640:	461a      	mov	r2, r3
 800b642:	2190      	movs	r1, #144	; 0x90
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f002 f811 	bl	800d66c <VL53L0X_RdDWord>
 800b64a:	4603      	mov	r3, r0
 800b64c:	461a      	mov	r2, r3
 800b64e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b652:	4313      	orrs	r3, r2
 800b654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800b660:	2276      	movs	r2, #118	; 0x76
 800b662:	2194      	movs	r1, #148	; 0x94
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 ff1d 	bl	800d4a4 <VL53L0X_WrByte>
 800b66a:	4603      	mov	r3, r0
 800b66c:	461a      	mov	r2, r3
 800b66e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b672:	4313      	orrs	r3, r2
 800b674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fc0b 	bl	800ae94 <VL53L0X_device_read_strobe>
 800b67e:	4603      	mov	r3, r0
 800b680:	461a      	mov	r2, r3
 800b682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b686:	4313      	orrs	r3, r2
 800b688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b68c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b690:	461a      	mov	r2, r3
 800b692:	2190      	movs	r1, #144	; 0x90
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f001 ffe9 	bl	800d66c <VL53L0X_RdDWord>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800b6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2181      	movs	r1, #129	; 0x81
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 fef4 	bl	800d4a4 <VL53L0X_WrByte>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	21ff      	movs	r1, #255	; 0xff
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 fee8 	bl	800d4a4 <VL53L0X_WrByte>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b6e2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	2183      	movs	r1, #131	; 0x83
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 ff5c 	bl	800d5a8 <VL53L0X_RdByte>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800b6fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b702:	f023 0304 	bic.w	r3, r3, #4
 800b706:	b2db      	uxtb	r3, r3
 800b708:	461a      	mov	r2, r3
 800b70a:	2183      	movs	r1, #131	; 0x83
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f001 fec9 	bl	800d4a4 <VL53L0X_WrByte>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b71a:	4313      	orrs	r3, r2
 800b71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b720:	2201      	movs	r2, #1
 800b722:	21ff      	movs	r1, #255	; 0xff
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f001 febd 	bl	800d4a4 <VL53L0X_WrByte>
 800b72a:	4603      	mov	r3, r0
 800b72c:	461a      	mov	r2, r3
 800b72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b732:	4313      	orrs	r3, r2
 800b734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b738:	2201      	movs	r2, #1
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 feb1 	bl	800d4a4 <VL53L0X_WrByte>
 800b742:	4603      	mov	r3, r0
 800b744:	461a      	mov	r2, r3
 800b746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b750:	2200      	movs	r2, #0
 800b752:	21ff      	movs	r1, #255	; 0xff
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fea5 	bl	800d4a4 <VL53L0X_WrByte>
 800b75a:	4603      	mov	r3, r0
 800b75c:	461a      	mov	r2, r3
 800b75e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b762:	4313      	orrs	r3, r2
 800b764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b768:	2200      	movs	r2, #0
 800b76a:	2180      	movs	r1, #128	; 0x80
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 fe99 	bl	800d4a4 <VL53L0X_WrByte>
 800b772:	4603      	mov	r3, r0
 800b774:	461a      	mov	r2, r3
 800b776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b780:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800b784:	2b00      	cmp	r3, #0
 800b786:	f040 808f 	bne.w	800b8a8 <VL53L0X_get_info_from_device+0x98e>
 800b78a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b78e:	2b07      	cmp	r3, #7
 800b790:	f000 808a 	beq.w	800b8a8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d024      	beq.n	800b7e8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b79e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7a2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d11e      	bne.n	800b7e8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800b7b0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800b7ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b7be:	2300      	movs	r3, #0
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c2:	e00e      	b.n	800b7e2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800b7c4:	f107 0208 	add.w	r2, r7, #8
 800b7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ca:	4413      	add	r3, r2
 800b7cc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b7d8:	460a      	mov	r2, r1
 800b7da:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7de:	3301      	adds	r3, #1
 800b7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e4:	2b05      	cmp	r3, #5
 800b7e6:	dded      	ble.n	800b7c4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800b7e8:	78fb      	ldrb	r3, [r7, #3]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d018      	beq.n	800b824 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b7f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7f6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d112      	bne.n	800b824 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b7fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b808:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	33f3      	adds	r3, #243	; 0xf3
 800b816:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b818:	f107 0310 	add.w	r3, r7, #16
 800b81c:	4619      	mov	r1, r3
 800b81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b820:	f002 feea 	bl	800e5f8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d030      	beq.n	800b890 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b82e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b832:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b836:	2b00      	cmp	r3, #0
 800b838:	d12a      	bne.n	800b890 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b84c:	025b      	lsls	r3, r3, #9
 800b84e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b854:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b860:	2b00      	cmp	r3, #0
 800b862:	d011      	beq.n	800b888 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800b86c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b86e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b878:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800b87c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b880:	425b      	negs	r3, r3
 800b882:	b29b      	uxth	r3, r3
 800b884:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800b888:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800b890:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b894:	78fb      	ldrb	r3, [r7, #3]
 800b896:	4313      	orrs	r3, r2
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b89e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3760      	adds	r7, #96	; 0x60
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800b8b4:	b490      	push	{r4, r7}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b8c0:	f240 6377 	movw	r3, #1655	; 0x677
 800b8c4:	f04f 0400 	mov.w	r4, #0
 800b8c8:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800b8cc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b8d0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	fb02 f303 	mul.w	r3, r2, r3
 800b8e0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bc90      	pop	{r4, r7}
 800b8ec:	4770      	bx	lr

0800b8ee <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b087      	sub	sp, #28
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d017      	beq.n	800b938 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3b01      	subs	r3, #1
 800b90c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b90e:	e005      	b.n	800b91c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	085b      	lsrs	r3, r3, #1
 800b914:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b916:	89fb      	ldrh	r3, [r7, #14]
 800b918:	3301      	adds	r3, #1
 800b91a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1f4      	bne.n	800b910 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	021b      	lsls	r3, r3, #8
 800b92a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	b29b      	uxth	r3, r3
 800b930:	b2db      	uxtb	r3, r3
 800b932:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b934:	4413      	add	r3, r2
 800b936:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b938:	8afb      	ldrh	r3, [r7, #22]

}
 800b93a:	4618      	mov	r0, r3
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4603      	mov	r3, r0
 800b94e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b954:	88fb      	ldrh	r3, [r7, #6]
 800b956:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b958:	88fa      	ldrh	r2, [r7, #6]
 800b95a:	0a12      	lsrs	r2, r2, #8
 800b95c:	b292      	uxth	r2, r2
 800b95e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b960:	3301      	adds	r3, #1
 800b962:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b964:	68fb      	ldr	r3, [r7, #12]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
	...

0800b974 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	4619      	mov	r1, r3
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff ff92 	bl	800b8b4 <VL53L0X_calc_macro_period_ps>
 800b990:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b998:	4a0a      	ldr	r2, [pc, #40]	; (800b9c4 <VL53L0X_calc_timeout_mclks+0x50>)
 800b99a:	fba2 2303 	umull	r2, r3, r2, r3
 800b99e:	099b      	lsrs	r3, r3, #6
 800b9a0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9a8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	085b      	lsrs	r3, r3, #1
 800b9b0:	441a      	add	r2, r3
	timeout_period_mclks =
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	10624dd3 	.word	0x10624dd3

0800b9c8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	807b      	strh	r3, [r7, #2]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b9dc:	787b      	ldrb	r3, [r7, #1]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff67 	bl	800b8b4 <VL53L0X_calc_macro_period_ps>
 800b9e6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b9ee:	4a0a      	ldr	r2, [pc, #40]	; (800ba18 <VL53L0X_calc_timeout_us+0x50>)
 800b9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f4:	099b      	lsrs	r3, r3, #6
 800b9f6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b9f8:	887b      	ldrh	r3, [r7, #2]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ba00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800ba04:	4a04      	ldr	r2, [pc, #16]	; (800ba18 <VL53L0X_calc_timeout_us+0x50>)
 800ba06:	fba2 2303 	umull	r2, r3, r2, r3
 800ba0a:	099b      	lsrs	r3, r3, #6
 800ba0c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800ba0e:	697b      	ldr	r3, [r7, #20]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	10624dd3 	.word	0x10624dd3

0800ba1c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08c      	sub	sp, #48	; 0x30
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <get_sequence_step_timeout+0x38>
 800ba48:	7afb      	ldrb	r3, [r7, #11]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d002      	beq.n	800ba54 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ba4e:	7afb      	ldrb	r3, [r7, #11]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d128      	bne.n	800baa6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ba54:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ba58:	461a      	mov	r2, r3
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7fd fa7d 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800ba68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d109      	bne.n	800ba84 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800ba70:	f107 0320 	add.w	r3, r7, #32
 800ba74:	461a      	mov	r2, r3
 800ba76:	2146      	movs	r1, #70	; 0x46
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f001 fd95 	bl	800d5a8 <VL53L0X_RdByte>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800ba84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff ff5b 	bl	800b946 <VL53L0X_decode_timeout>
 800ba90:	4603      	mov	r3, r0
 800ba92:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ba94:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ba98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7ff ff93 	bl	800b9c8 <VL53L0X_calc_timeout_us>
 800baa2:	62b8      	str	r0, [r7, #40]	; 0x28
 800baa4:	e092      	b.n	800bbcc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800baa6:	7afb      	ldrb	r3, [r7, #11]
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d135      	bne.n	800bb18 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800baac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bab0:	461a      	mov	r2, r3
 800bab2:	2100      	movs	r1, #0
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7fd fa51 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800baba:	4603      	mov	r3, r0
 800babc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800bac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f040 8081 	bne.w	800bbcc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800baca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bace:	461a      	mov	r2, r3
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7fd fa42 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bad8:	4603      	mov	r3, r0
 800bada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800bade:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800bae6:	f107 031e 	add.w	r3, r7, #30
 800baea:	461a      	mov	r2, r3
 800baec:	2151      	movs	r1, #81	; 0x51
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f001 fd84 	bl	800d5fc <VL53L0X_RdWord>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800bafa:	8bfb      	ldrh	r3, [r7, #30]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ff22 	bl	800b946 <VL53L0X_decode_timeout>
 800bb02:	4603      	mov	r3, r0
 800bb04:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bb06:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bb0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff ff5a 	bl	800b9c8 <VL53L0X_calc_timeout_us>
 800bb14:	62b8      	str	r0, [r7, #40]	; 0x28
 800bb16:	e059      	b.n	800bbcc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d156      	bne.n	800bbcc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bb1e:	f107 0314 	add.w	r3, r7, #20
 800bb22:	4619      	mov	r1, r3
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7fd fb25 	bl	8009174 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d01d      	beq.n	800bb70 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bb34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fd fa0d 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800bb48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10f      	bne.n	800bb70 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800bb50:	f107 031e 	add.w	r3, r7, #30
 800bb54:	461a      	mov	r2, r3
 800bb56:	2151      	movs	r1, #81	; 0x51
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f001 fd4f 	bl	800d5fc <VL53L0X_RdWord>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800bb64:	8bfb      	ldrh	r3, [r7, #30]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff feed 	bl	800b946 <VL53L0X_decode_timeout>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bb70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bb78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	2101      	movs	r1, #1
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7fd f9eb 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800bb8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10f      	bne.n	800bbb4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800bb94:	f107 031c 	add.w	r3, r7, #28
 800bb98:	461a      	mov	r2, r3
 800bb9a:	2171      	movs	r1, #113	; 0x71
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f001 fd2d 	bl	800d5fc <VL53L0X_RdWord>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800bba8:	8bbb      	ldrh	r3, [r7, #28]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fecb 	bl	800b946 <VL53L0X_decode_timeout>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800bbb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bbbc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f7ff feff 	bl	800b9c8 <VL53L0X_calc_timeout_us>
 800bbca:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd0:	601a      	str	r2, [r3, #0]

	return Status;
 800bbd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3730      	adds	r7, #48	; 0x30
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b08a      	sub	sp, #40	; 0x28
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	607a      	str	r2, [r7, #4]
 800bbea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <set_sequence_step_timeout+0x26>
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d002      	beq.n	800bc04 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800bbfe:	7afb      	ldrb	r3, [r7, #11]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d138      	bne.n	800bc76 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bc04:	f107 031b 	add.w	r3, r7, #27
 800bc08:	461a      	mov	r2, r3
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f7fd f9a5 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800bc18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11a      	bne.n	800bc56 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800bc20:	7efb      	ldrb	r3, [r7, #27]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fea4 	bl	800b974 <VL53L0X_calc_timeout_mclks>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800bc30:	8bbb      	ldrh	r3, [r7, #28]
 800bc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc36:	d903      	bls.n	800bc40 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800bc38:	23ff      	movs	r3, #255	; 0xff
 800bc3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc3e:	e004      	b.n	800bc4a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800bc40:	8bbb      	ldrh	r3, [r7, #28]
 800bc42:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800bc44:	3b01      	subs	r3, #1
 800bc46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bc4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bc56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f040 80ab 	bne.w	800bdb6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800bc60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc64:	461a      	mov	r2, r3
 800bc66:	2146      	movs	r1, #70	; 0x46
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f001 fc1b 	bl	800d4a4 <VL53L0X_WrByte>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800bc74:	e09f      	b.n	800bdb6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800bc76:	7afb      	ldrb	r3, [r7, #11]
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d135      	bne.n	800bce8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800bc7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d11b      	bne.n	800bcbc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bc84:	f107 031b 	add.w	r3, r7, #27
 800bc88:	461a      	mov	r2, r3
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7fd f965 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800bc98:	7efb      	ldrb	r3, [r7, #27]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f7ff fe68 	bl	800b974 <VL53L0X_calc_timeout_mclks>
 800bca4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800bca6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800bca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff fe1f 	bl	800b8ee <VL53L0X_encode_timeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcb4:	8b3a      	ldrh	r2, [r7, #24]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800bcbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d108      	bne.n	800bcd6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800bcc4:	8b3b      	ldrh	r3, [r7, #24]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	2151      	movs	r1, #81	; 0x51
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f001 fc0e 	bl	800d4ec <VL53L0X_WrWord>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800bcd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d16b      	bne.n	800bdb6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800bce6:	e066      	b.n	800bdb6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d160      	bne.n	800bdb0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800bcee:	f107 0310 	add.w	r3, r7, #16
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7fd fa3d 	bl	8009174 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800bcfe:	7cfb      	ldrb	r3, [r7, #19]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d01d      	beq.n	800bd40 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bd04:	f107 031b 	add.w	r3, r7, #27
 800bd08:	461a      	mov	r2, r3
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7fd f925 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800bd18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10f      	bne.n	800bd40 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800bd20:	f107 0318 	add.w	r3, r7, #24
 800bd24:	461a      	mov	r2, r3
 800bd26:	2151      	movs	r1, #81	; 0x51
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f001 fc67 	bl	800d5fc <VL53L0X_RdWord>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800bd34:	8b3b      	ldrh	r3, [r7, #24]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fe05 	bl	800b946 <VL53L0X_decode_timeout>
 800bd3c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800bd3e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800bd40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d109      	bne.n	800bd5c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bd48:	f107 031b 	add.w	r3, r7, #27
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	2101      	movs	r1, #1
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7fd f903 	bl	8008f5c <VL53L0X_GetVcselPulsePeriod>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800bd5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d128      	bne.n	800bdb6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800bd64:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800bd66:	461a      	mov	r2, r3
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff fe02 	bl	800b974 <VL53L0X_calc_timeout_mclks>
 800bd70:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800bd72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd74:	6a3a      	ldr	r2, [r7, #32]
 800bd76:	4413      	add	r3, r2
 800bd78:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800bd7a:	6a38      	ldr	r0, [r7, #32]
 800bd7c:	f7ff fdb7 	bl	800b8ee <VL53L0X_encode_timeout>
 800bd80:	4603      	mov	r3, r0
 800bd82:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800bd84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d108      	bne.n	800bd9e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800bd8c:	8bfb      	ldrh	r3, [r7, #30]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	2171      	movs	r1, #113	; 0x71
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 fbaa 	bl	800d4ec <VL53L0X_WrWord>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800bd9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d107      	bne.n	800bdb6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800bdae:	e002      	b.n	800bdb6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bdb0:	23fc      	movs	r3, #252	; 0xfc
 800bdb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800bdb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3728      	adds	r7, #40	; 0x28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b08a      	sub	sp, #40	; 0x28
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800bdd8:	230c      	movs	r3, #12
 800bdda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800bdde:	2312      	movs	r3, #18
 800bde0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800bde4:	2308      	movs	r3, #8
 800bde6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800bdea:	230e      	movs	r3, #14
 800bdec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800bdf4:	78bb      	ldrb	r3, [r7, #2]
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be00:	23fc      	movs	r3, #252	; 0xfc
 800be02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be06:	e020      	b.n	800be4a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800be08:	78fb      	ldrb	r3, [r7, #3]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10d      	bne.n	800be2a <VL53L0X_set_vcsel_pulse_period+0x68>
 800be0e:	78ba      	ldrb	r2, [r7, #2]
 800be10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be14:	429a      	cmp	r2, r3
 800be16:	d304      	bcc.n	800be22 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800be18:	78ba      	ldrb	r2, [r7, #2]
 800be1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800be1e:	429a      	cmp	r2, r3
 800be20:	d903      	bls.n	800be2a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be22:	23fc      	movs	r3, #252	; 0xfc
 800be24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be28:	e00f      	b.n	800be4a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d10c      	bne.n	800be4a <VL53L0X_set_vcsel_pulse_period+0x88>
 800be30:	78ba      	ldrb	r2, [r7, #2]
 800be32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be36:	429a      	cmp	r2, r3
 800be38:	d304      	bcc.n	800be44 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800be3a:	78ba      	ldrb	r2, [r7, #2]
 800be3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be40:	429a      	cmp	r2, r3
 800be42:	d902      	bls.n	800be4a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be44:	23fc      	movs	r3, #252	; 0xfc
 800be46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800be4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800be52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be56:	e239      	b.n	800c2cc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d150      	bne.n	800bf00 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800be5e:	78bb      	ldrb	r3, [r7, #2]
 800be60:	2b0c      	cmp	r3, #12
 800be62:	d110      	bne.n	800be86 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800be64:	2218      	movs	r2, #24
 800be66:	2157      	movs	r1, #87	; 0x57
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 fb1b 	bl	800d4a4 <VL53L0X_WrByte>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800be74:	2208      	movs	r2, #8
 800be76:	2156      	movs	r1, #86	; 0x56
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f001 fb13 	bl	800d4a4 <VL53L0X_WrByte>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be84:	e17f      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800be86:	78bb      	ldrb	r3, [r7, #2]
 800be88:	2b0e      	cmp	r3, #14
 800be8a:	d110      	bne.n	800beae <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800be8c:	2230      	movs	r2, #48	; 0x30
 800be8e:	2157      	movs	r1, #87	; 0x57
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f001 fb07 	bl	800d4a4 <VL53L0X_WrByte>
 800be96:	4603      	mov	r3, r0
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800be9c:	2208      	movs	r2, #8
 800be9e:	2156      	movs	r1, #86	; 0x56
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 faff 	bl	800d4a4 <VL53L0X_WrByte>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800beac:	e16b      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800beae:	78bb      	ldrb	r3, [r7, #2]
 800beb0:	2b10      	cmp	r3, #16
 800beb2:	d110      	bne.n	800bed6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800beb4:	2240      	movs	r2, #64	; 0x40
 800beb6:	2157      	movs	r1, #87	; 0x57
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 faf3 	bl	800d4a4 <VL53L0X_WrByte>
 800bebe:	4603      	mov	r3, r0
 800bec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800bec4:	2208      	movs	r2, #8
 800bec6:	2156      	movs	r1, #86	; 0x56
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f001 faeb 	bl	800d4a4 <VL53L0X_WrByte>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bed4:	e157      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800bed6:	78bb      	ldrb	r3, [r7, #2]
 800bed8:	2b12      	cmp	r3, #18
 800beda:	f040 8154 	bne.w	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800bede:	2250      	movs	r2, #80	; 0x50
 800bee0:	2157      	movs	r1, #87	; 0x57
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 fade 	bl	800d4a4 <VL53L0X_WrByte>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800beee:	2208      	movs	r2, #8
 800bef0:	2156      	movs	r1, #86	; 0x56
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f001 fad6 	bl	800d4a4 <VL53L0X_WrByte>
 800bef8:	4603      	mov	r3, r0
 800befa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800befe:	e142      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	f040 813f 	bne.w	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800bf08:	78bb      	ldrb	r3, [r7, #2]
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d14c      	bne.n	800bfa8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800bf0e:	2210      	movs	r2, #16
 800bf10:	2148      	movs	r1, #72	; 0x48
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 fac6 	bl	800d4a4 <VL53L0X_WrByte>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800bf1e:	2208      	movs	r2, #8
 800bf20:	2147      	movs	r1, #71	; 0x47
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fabe 	bl	800d4a4 <VL53L0X_WrByte>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bf2e:	2202      	movs	r2, #2
 800bf30:	2132      	movs	r1, #50	; 0x32
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f001 fab6 	bl	800d4a4 <VL53L0X_WrByte>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf40:	4313      	orrs	r3, r2
 800bf42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800bf46:	220c      	movs	r2, #12
 800bf48:	2130      	movs	r1, #48	; 0x30
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 faaa 	bl	800d4a4 <VL53L0X_WrByte>
 800bf50:	4603      	mov	r3, r0
 800bf52:	461a      	mov	r2, r3
 800bf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bf5e:	2201      	movs	r2, #1
 800bf60:	21ff      	movs	r1, #255	; 0xff
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 fa9e 	bl	800d4a4 <VL53L0X_WrByte>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf70:	4313      	orrs	r3, r2
 800bf72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800bf76:	2230      	movs	r2, #48	; 0x30
 800bf78:	2130      	movs	r1, #48	; 0x30
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f001 fa92 	bl	800d4a4 <VL53L0X_WrByte>
 800bf80:	4603      	mov	r3, r0
 800bf82:	461a      	mov	r2, r3
 800bf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bf8e:	2200      	movs	r2, #0
 800bf90:	21ff      	movs	r1, #255	; 0xff
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f001 fa86 	bl	800d4a4 <VL53L0X_WrByte>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfa6:	e0ee      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800bfa8:	78bb      	ldrb	r3, [r7, #2]
 800bfaa:	2b0a      	cmp	r3, #10
 800bfac:	d14c      	bne.n	800c048 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800bfae:	2228      	movs	r2, #40	; 0x28
 800bfb0:	2148      	movs	r1, #72	; 0x48
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f001 fa76 	bl	800d4a4 <VL53L0X_WrByte>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800bfbe:	2208      	movs	r2, #8
 800bfc0:	2147      	movs	r1, #71	; 0x47
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 fa6e 	bl	800d4a4 <VL53L0X_WrByte>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bfce:	2203      	movs	r2, #3
 800bfd0:	2132      	movs	r1, #50	; 0x32
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 fa66 	bl	800d4a4 <VL53L0X_WrByte>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800bfe6:	2209      	movs	r2, #9
 800bfe8:	2130      	movs	r1, #48	; 0x30
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fa5a 	bl	800d4a4 <VL53L0X_WrByte>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bff8:	4313      	orrs	r3, r2
 800bffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bffe:	2201      	movs	r2, #1
 800c000:	21ff      	movs	r1, #255	; 0xff
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fa4e 	bl	800d4a4 <VL53L0X_WrByte>
 800c008:	4603      	mov	r3, r0
 800c00a:	461a      	mov	r2, r3
 800c00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c010:	4313      	orrs	r3, r2
 800c012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c016:	2220      	movs	r2, #32
 800c018:	2130      	movs	r1, #48	; 0x30
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 fa42 	bl	800d4a4 <VL53L0X_WrByte>
 800c020:	4603      	mov	r3, r0
 800c022:	461a      	mov	r2, r3
 800c024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c028:	4313      	orrs	r3, r2
 800c02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c02e:	2200      	movs	r2, #0
 800c030:	21ff      	movs	r1, #255	; 0xff
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f001 fa36 	bl	800d4a4 <VL53L0X_WrByte>
 800c038:	4603      	mov	r3, r0
 800c03a:	461a      	mov	r2, r3
 800c03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c040:	4313      	orrs	r3, r2
 800c042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c046:	e09e      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c048:	78bb      	ldrb	r3, [r7, #2]
 800c04a:	2b0c      	cmp	r3, #12
 800c04c:	d14c      	bne.n	800c0e8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c04e:	2238      	movs	r2, #56	; 0x38
 800c050:	2148      	movs	r1, #72	; 0x48
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 fa26 	bl	800d4a4 <VL53L0X_WrByte>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c05e:	2208      	movs	r2, #8
 800c060:	2147      	movs	r1, #71	; 0x47
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f001 fa1e 	bl	800d4a4 <VL53L0X_WrByte>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c06e:	2203      	movs	r2, #3
 800c070:	2132      	movs	r1, #50	; 0x32
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fa16 	bl	800d4a4 <VL53L0X_WrByte>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c080:	4313      	orrs	r3, r2
 800c082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c086:	2208      	movs	r2, #8
 800c088:	2130      	movs	r1, #48	; 0x30
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f001 fa0a 	bl	800d4a4 <VL53L0X_WrByte>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c098:	4313      	orrs	r3, r2
 800c09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c09e:	2201      	movs	r2, #1
 800c0a0:	21ff      	movs	r1, #255	; 0xff
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 f9fe 	bl	800d4a4 <VL53L0X_WrByte>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	2130      	movs	r1, #48	; 0x30
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f001 f9f2 	bl	800d4a4 <VL53L0X_WrByte>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	21ff      	movs	r1, #255	; 0xff
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f001 f9e6 	bl	800d4a4 <VL53L0X_WrByte>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0e6:	e04e      	b.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c0e8:	78bb      	ldrb	r3, [r7, #2]
 800c0ea:	2b0e      	cmp	r3, #14
 800c0ec:	d14b      	bne.n	800c186 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c0ee:	2248      	movs	r2, #72	; 0x48
 800c0f0:	2148      	movs	r1, #72	; 0x48
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f001 f9d6 	bl	800d4a4 <VL53L0X_WrByte>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800c0fe:	2208      	movs	r2, #8
 800c100:	2147      	movs	r1, #71	; 0x47
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f001 f9ce 	bl	800d4a4 <VL53L0X_WrByte>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c10e:	2203      	movs	r2, #3
 800c110:	2132      	movs	r1, #50	; 0x32
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f001 f9c6 	bl	800d4a4 <VL53L0X_WrByte>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c120:	4313      	orrs	r3, r2
 800c122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c126:	2207      	movs	r2, #7
 800c128:	2130      	movs	r1, #48	; 0x30
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f9ba 	bl	800d4a4 <VL53L0X_WrByte>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c138:	4313      	orrs	r3, r2
 800c13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c13e:	2201      	movs	r2, #1
 800c140:	21ff      	movs	r1, #255	; 0xff
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 f9ae 	bl	800d4a4 <VL53L0X_WrByte>
 800c148:	4603      	mov	r3, r0
 800c14a:	461a      	mov	r2, r3
 800c14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c150:	4313      	orrs	r3, r2
 800c152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c156:	2220      	movs	r2, #32
 800c158:	2130      	movs	r1, #48	; 0x30
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f9a2 	bl	800d4a4 <VL53L0X_WrByte>
 800c160:	4603      	mov	r3, r0
 800c162:	461a      	mov	r2, r3
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c168:	4313      	orrs	r3, r2
 800c16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c16e:	2200      	movs	r2, #0
 800c170:	21ff      	movs	r1, #255	; 0xff
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 f996 	bl	800d4a4 <VL53L0X_WrByte>
 800c178:	4603      	mov	r3, r0
 800c17a:	461a      	mov	r2, r3
 800c17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c180:	4313      	orrs	r3, r2
 800c182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800c186:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d17f      	bne.n	800c28e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800c18e:	78bb      	ldrb	r3, [r7, #2]
 800c190:	4618      	mov	r0, r3
 800c192:	f7fe fe38 	bl	800ae06 <VL53L0X_encode_vcsel_period>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d045      	beq.n	800c232 <VL53L0X_set_vcsel_pulse_period+0x470>
 800c1a6:	e06e      	b.n	800c286 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c1a8:	f107 0314 	add.w	r3, r7, #20
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	2103      	movs	r1, #3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fc33 	bl	800ba1c <get_sequence_step_timeout>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c1bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800c1c4:	f107 0310 	add.w	r3, r7, #16
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	2102      	movs	r1, #2
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff fc25 	bl	800ba1c <get_sequence_step_timeout>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c1d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d109      	bne.n	800c1f4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800c1e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2150      	movs	r1, #80	; 0x50
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 f95b 	bl	800d4a4 <VL53L0X_WrByte>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d108      	bne.n	800c20e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	461a      	mov	r2, r3
 800c200:	2103      	movs	r1, #3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fceb 	bl	800bbde <set_sequence_step_timeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800c20e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c212:	2b00      	cmp	r3, #0
 800c214:	d108      	bne.n	800c228 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	461a      	mov	r2, r3
 800c21a:	2102      	movs	r1, #2
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fcde 	bl	800bbde <set_sequence_step_timeout>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	78ba      	ldrb	r2, [r7, #2]
 800c22c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c230:	e02e      	b.n	800c290 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c232:	f107 0318 	add.w	r3, r7, #24
 800c236:	461a      	mov	r2, r3
 800c238:	2104      	movs	r1, #4
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fbee 	bl	800ba1c <get_sequence_step_timeout>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c246:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800c24e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c252:	461a      	mov	r2, r3
 800c254:	2170      	movs	r1, #112	; 0x70
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 f924 	bl	800d4a4 <VL53L0X_WrByte>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c266:	2b00      	cmp	r3, #0
 800c268:	d108      	bne.n	800c27c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	461a      	mov	r2, r3
 800c26e:	2104      	movs	r1, #4
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff fcb4 	bl	800bbde <set_sequence_step_timeout>
 800c276:	4603      	mov	r3, r0
 800c278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	78ba      	ldrb	r2, [r7, #2]
 800c280:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c284:	e004      	b.n	800c290 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c286:	23fc      	movs	r3, #252	; 0xfc
 800c288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c28c:	e000      	b.n	800c290 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800c28e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800c290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c294:	2b00      	cmp	r3, #0
 800c296:	d109      	bne.n	800c2ac <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800c29e:	69f9      	ldr	r1, [r7, #28]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7fc fe1d 	bl	8008ee0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800c2ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d109      	bne.n	800c2c8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800c2b4:	f107 010f 	add.w	r1, r7, #15
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7fe fcbd 	bl	800ac3c <VL53L0X_perform_phase_calibration>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800c2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3728      	adds	r7, #40	; 0x28
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d00a      	beq.n	800c306 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c2f0:	e013      	b.n	800c31a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c2f2:	f107 0316 	add.w	r3, r7, #22
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	2150      	movs	r1, #80	; 0x50
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f001 f954 	bl	800d5a8 <VL53L0X_RdByte>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c304:	e00b      	b.n	800c31e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c306:	f107 0316 	add.w	r3, r7, #22
 800c30a:	461a      	mov	r2, r3
 800c30c:	2170      	movs	r1, #112	; 0x70
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f001 f94a 	bl	800d5a8 <VL53L0X_RdByte>
 800c314:	4603      	mov	r3, r0
 800c316:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c318:	e001      	b.n	800c31e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c31a:	23fc      	movs	r3, #252	; 0xfc
 800c31c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c31e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d107      	bne.n	800c336 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c326:	7dbb      	ldrb	r3, [r7, #22]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fe fd59 	bl	800ade0 <VL53L0X_decode_vcsel_period>
 800c32e:	4603      	mov	r3, r0
 800c330:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	701a      	strb	r2, [r3, #0]

	return Status;
 800c336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3718      	adds	r7, #24
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b092      	sub	sp, #72	; 0x48
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c352:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c356:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c358:	f240 7376 	movw	r3, #1910	; 0x776
 800c35c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c35e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c362:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c364:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c368:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c36a:	f240 234e 	movw	r3, #590	; 0x24e
 800c36e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c370:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c374:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c376:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c37a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c37c:	f240 2326 	movw	r3, #550	; 0x226
 800c380:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c386:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c38a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	429a      	cmp	r2, r3
 800c396:	d205      	bcs.n	800c3a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c398:	23fc      	movs	r3, #252	; 0xfc
 800c39a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c39e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3a2:	e0aa      	b.n	800c4fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c3a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c3b0:	f107 0314 	add.w	r3, r7, #20
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7fc fedc 	bl	8009174 <VL53L0X_GetSequenceStepEnables>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800c3c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d15b      	bne.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800c3ca:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d105      	bne.n	800c3dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c3d0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d052      	beq.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c3dc:	f107 0310 	add.w	r3, r7, #16
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	2102      	movs	r1, #2
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff fb19 	bl	800ba1c <get_sequence_step_timeout>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c3f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c3f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3fc:	e07d      	b.n	800c4fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c3fe:	7d3b      	ldrb	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00f      	beq.n	800c424 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c404:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c408:	4413      	add	r3, r2
 800c40a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c410:	429a      	cmp	r2, r3
 800c412:	d204      	bcs.n	800c41e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	643b      	str	r3, [r7, #64]	; 0x40
 800c41c:	e002      	b.n	800c424 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c41e:	23fc      	movs	r3, #252	; 0xfc
 800c420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c424:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800c42c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c430:	e063      	b.n	800c4fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c432:	7dbb      	ldrb	r3, [r7, #22]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d011      	beq.n	800c45c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	4413      	add	r3, r2
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c446:	429a      	cmp	r2, r3
 800c448:	d204      	bcs.n	800c454 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	643b      	str	r3, [r7, #64]	; 0x40
 800c452:	e016      	b.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c454:	23fc      	movs	r3, #252	; 0xfc
 800c456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c45a:	e012      	b.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c45c:	7d7b      	ldrb	r3, [r7, #21]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00f      	beq.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c466:	4413      	add	r3, r2
 800c468:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46e:	429a      	cmp	r2, r3
 800c470:	d204      	bcs.n	800c47c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	643b      	str	r3, [r7, #64]	; 0x40
 800c47a:	e002      	b.n	800c482 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c47c:	23fc      	movs	r3, #252	; 0xfc
 800c47e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c482:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c48a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c48e:	e034      	b.n	800c4fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d019      	beq.n	800c4ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	461a      	mov	r2, r3
 800c49c:	2103      	movs	r1, #3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff fabc 	bl	800ba1c <get_sequence_step_timeout>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ae:	4413      	add	r3, r2
 800c4b0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c4b2:	69fa      	ldr	r2, [r7, #28]
 800c4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d204      	bcs.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c4ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c4c2:	e002      	b.n	800c4ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4c4:	23fc      	movs	r3, #252	; 0xfc
 800c4c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c4ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d111      	bne.n	800c4f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c4d2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00e      	beq.n	800c4f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800c4d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800c4e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4e2:	2104      	movs	r1, #4
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff fb7a 	bl	800bbde <set_sequence_step_timeout>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c4f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3748      	adds	r7, #72	; 0x48
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b090      	sub	sp, #64	; 0x40
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c512:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c516:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c518:	f240 7376 	movw	r3, #1910	; 0x776
 800c51c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c51e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c522:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c524:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c528:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c52a:	f240 234e 	movw	r3, #590	; 0x24e
 800c52e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c530:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c534:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c536:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c53a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c53c:	f240 2326 	movw	r3, #550	; 0x226
 800c540:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54a:	441a      	add	r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c550:	f107 0318 	add.w	r3, r7, #24
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7fc fe0c 	bl	8009174 <VL53L0X_GetSequenceStepEnables>
 800c55c:	4603      	mov	r3, r0
 800c55e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c562:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c56a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c56e:	e075      	b.n	800c65c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c570:	7e3b      	ldrb	r3, [r7, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d105      	bne.n	800c582 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c576:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d102      	bne.n	800c582 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c57c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d030      	beq.n	800c5e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c582:	f107 0310 	add.w	r3, r7, #16
 800c586:	461a      	mov	r2, r3
 800c588:	2102      	movs	r1, #2
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff fa46 	bl	800ba1c <get_sequence_step_timeout>
 800c590:	4603      	mov	r3, r0
 800c592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c596:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d122      	bne.n	800c5e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c59e:	7e3b      	ldrb	r3, [r7, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d007      	beq.n	800c5b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c5a8:	6939      	ldr	r1, [r7, #16]
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5ae:	441a      	add	r2, r3
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c5b4:	7ebb      	ldrb	r3, [r7, #26]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d009      	beq.n	800c5ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c5be:	6939      	ldr	r1, [r7, #16]
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	440b      	add	r3, r1
 800c5c4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5c6:	441a      	add	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	e00a      	b.n	800c5e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c5ce:	7e7b      	ldrb	r3, [r7, #25]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d007      	beq.n	800c5e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c5d8:	6939      	ldr	r1, [r7, #16]
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5de:	441a      	add	r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c5e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d114      	bne.n	800c616 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c5ec:	7efb      	ldrb	r3, [r7, #27]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d011      	beq.n	800c616 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	2103      	movs	r1, #3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fa0e 	bl	800ba1c <get_sequence_step_timeout>
 800c600:	4603      	mov	r3, r0
 800c602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c610:	441a      	add	r2, r3
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c616:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d114      	bne.n	800c648 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c61e:	7f3b      	ldrb	r3, [r7, #28]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	461a      	mov	r2, r3
 800c62a:	2104      	movs	r1, #4
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff f9f5 	bl	800ba1c <get_sequence_step_timeout>
 800c632:	4603      	mov	r3, r0
 800c634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c63c:	6979      	ldr	r1, [r7, #20]
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c642:	441a      	add	r2, r3
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c648:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d103      	bne.n	800c658 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c658:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3740      	adds	r7, #64	; 0x40
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c66e:	2300      	movs	r3, #0
 800c670:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c676:	e0c6      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	4413      	add	r3, r2
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	3301      	adds	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c688:	7cfb      	ldrb	r3, [r7, #19]
 800c68a:	2bff      	cmp	r3, #255	; 0xff
 800c68c:	f040 808d 	bne.w	800c7aa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	4413      	add	r3, r2
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	747b      	strb	r3, [r7, #17]
			Index++;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	3301      	adds	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c6a0:	7c7b      	ldrb	r3, [r7, #17]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d87e      	bhi.n	800c7a4 <VL53L0X_load_tuning_settings+0x140>
 800c6a6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ac <VL53L0X_load_tuning_settings+0x48>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c6bd 	.word	0x0800c6bd
 800c6b0:	0800c6f7 	.word	0x0800c6f7
 800c6b4:	0800c731 	.word	0x0800c731
 800c6b8:	0800c76b 	.word	0x0800c76b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	743b      	strb	r3, [r7, #16]
				Index++;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c6dc:	7c3b      	ldrb	r3, [r7, #16]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	021b      	lsls	r3, r3, #8
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	4413      	add	r3, r2
 800c6ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	89ba      	ldrh	r2, [r7, #12]
 800c6f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800c6f4:	e087      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	743b      	strb	r3, [r7, #16]
				Index++;
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	3301      	adds	r3, #1
 800c704:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	4413      	add	r3, r2
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	3301      	adds	r3, #1
 800c714:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c716:	7c3b      	ldrb	r3, [r7, #16]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	021b      	lsls	r3, r3, #8
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	b29b      	uxth	r3, r3
 800c722:	4413      	add	r3, r2
 800c724:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	89ba      	ldrh	r2, [r7, #12]
 800c72a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800c72e:	e06a      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	4413      	add	r3, r2
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	743b      	strb	r3, [r7, #16]
				Index++;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	3301      	adds	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	4413      	add	r3, r2
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	3301      	adds	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c750:	7c3b      	ldrb	r3, [r7, #16]
 800c752:	b29b      	uxth	r3, r3
 800c754:	021b      	lsls	r3, r3, #8
 800c756:	b29a      	uxth	r2, r3
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	89ba      	ldrh	r2, [r7, #12]
 800c764:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800c768:	e04d      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	4413      	add	r3, r2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	743b      	strb	r3, [r7, #16]
				Index++;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	3301      	adds	r3, #1
 800c778:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	4413      	add	r3, r2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	3301      	adds	r3, #1
 800c788:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c78a:	7c3b      	ldrb	r3, [r7, #16]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	b29a      	uxth	r2, r3
 800c792:	7bfb      	ldrb	r3, [r7, #15]
 800c794:	b29b      	uxth	r3, r3
 800c796:	4413      	add	r3, r2
 800c798:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	89ba      	ldrh	r2, [r7, #12]
 800c79e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800c7a2:	e030      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7a4:	23fc      	movs	r3, #252	; 0xfc
 800c7a6:	77fb      	strb	r3, [r7, #31]
 800c7a8:	e02d      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c7aa:	7cfb      	ldrb	r3, [r7, #19]
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d828      	bhi.n	800c802 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	61bb      	str	r3, [r7, #24]
 800c7c4:	e00f      	b.n	800c7e6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	f107 0208 	add.w	r2, r7, #8
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	460a      	mov	r2, r1
 800c7d8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	61bb      	str	r3, [r7, #24]
 800c7e6:	7cfb      	ldrb	r3, [r7, #19]
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	dbeb      	blt.n	800c7c6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c7ee:	7cfb      	ldrb	r3, [r7, #19]
 800c7f0:	f107 0208 	add.w	r2, r7, #8
 800c7f4:	7cb9      	ldrb	r1, [r7, #18]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fdf8 	bl	800d3ec <VL53L0X_WriteMulti>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	77fb      	strb	r3, [r7, #31]
 800c800:	e001      	b.n	800c806 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c802:	23fc      	movs	r3, #252	; 0xfc
 800c804:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	4413      	add	r3, r2
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d004      	beq.n	800c81c <VL53L0X_load_tuning_settings+0x1b8>
 800c812:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c816:	2b00      	cmp	r3, #0
 800c818:	f43f af2e 	beq.w	800c678 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c81c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c834:	2300      	movs	r3, #0
 800c836:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c83e:	f107 0313 	add.w	r3, r7, #19
 800c842:	4619      	mov	r1, r3
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7fc fd21 	bl	800928c <VL53L0X_GetXTalkCompensationEnable>
 800c84a:	4603      	mov	r3, r0
 800c84c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c84e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d111      	bne.n	800c87a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c856:	7cfb      	ldrb	r3, [r7, #19]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00e      	beq.n	800c87a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	8a9b      	ldrh	r3, [r3, #20]
 800c866:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	fb02 f303 	mul.w	r3, r2, r3
 800c86e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	3380      	adds	r3, #128	; 0x80
 800c874:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c87a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3720      	adds	r7, #32
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c892:	2300      	movs	r3, #0
 800c894:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c89e:	f107 0310 	add.w	r3, r7, #16
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f7ff ffbe 	bl	800c828 <VL53L0X_get_total_xtalk_rate>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c8b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d105      	bne.n	800c8c4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	441a      	add	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	601a      	str	r2, [r3, #0]

	return Status;
 800c8c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b09a      	sub	sp, #104	; 0x68
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c8de:	2312      	movs	r3, #18
 800c8e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c8e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c8e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c8e8:	2342      	movs	r3, #66	; 0x42
 800c8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c8ec:	2306      	movs	r3, #6
 800c8ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c8f0:	2307      	movs	r3, #7
 800c8f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800c900:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c908:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c90e:	fb02 f303 	mul.w	r3, r2, r3
 800c912:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c916:	3380      	adds	r3, #128	; 0x80
 800c918:	0a1b      	lsrs	r3, r3, #8
 800c91a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c91e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c920:	fb02 f303 	mul.w	r3, r2, r3
 800c924:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d01b      	beq.n	800c968 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	029b      	lsls	r3, r3, #10
 800c934:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c93a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c93c:	4413      	add	r3, r2
 800c93e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	fbb2 f3f3 	udiv	r3, r2, r3
 800c948:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c94a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c956:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c958:	fb02 f303 	mul.w	r3, r2, r3
 800c95c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c95e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c960:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c964:	0c1b      	lsrs	r3, r3, #16
 800c966:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c96c:	fb02 f303 	mul.w	r3, r2, r3
 800c970:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c978:	0c1b      	lsrs	r3, r3, #16
 800c97a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c980:	fb02 f303 	mul.w	r3, r2, r3
 800c984:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c988:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c98c:	0c1b      	lsrs	r3, r3, #16
 800c98e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c992:	085a      	lsrs	r2, r3, #1
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	441a      	add	r2, r3
 800c998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9a4:	fb02 f303 	mul.w	r3, r2, r3
 800c9a8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b0:	d302      	bcc.n	800c9b8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800c9b2:	4b55      	ldr	r3, [pc, #340]	; (800cb08 <VL53L0X_calc_dmax+0x238>)
 800c9b4:	663b      	str	r3, [r7, #96]	; 0x60
 800c9b6:	e016      	b.n	800c9e6 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ba:	085a      	lsrs	r2, r3, #1
 800c9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9be:	441a      	add	r2, r3
 800c9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c9c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9cc:	fb02 f303 	mul.w	r3, r2, r3
 800c9d0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c9d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c9d8:	0c1b      	lsrs	r3, r3, #16
 800c9da:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c9dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9e0:	fb02 f303 	mul.w	r3, r2, r3
 800c9e4:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e8:	039b      	lsls	r3, r3, #14
 800c9ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c9ee:	4a47      	ldr	r2, [pc, #284]	; (800cb0c <VL53L0X_calc_dmax+0x23c>)
 800c9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f4:	099b      	lsrs	r3, r3, #6
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ca02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca06:	fb02 f303 	mul.w	r3, r2, r3
 800ca0a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	3308      	adds	r3, #8
 800ca10:	091b      	lsrs	r3, r3, #4
 800ca12:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ca14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ca1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ca2e:	0b9b      	lsrs	r3, r3, #14
 800ca30:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ca32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca36:	4413      	add	r3, r2
 800ca38:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ca3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	4413      	add	r3, r2
 800ca42:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca4c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	039b      	lsls	r3, r3, #14
 800ca52:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	085b      	lsrs	r3, r3, #1
 800ca58:	69ba      	ldr	r2, [r7, #24]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca66:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ca6c:	fb02 f303 	mul.w	r3, r2, r3
 800ca70:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca78:	4a24      	ldr	r2, [pc, #144]	; (800cb0c <VL53L0X_calc_dmax+0x23c>)
 800ca7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7e:	099b      	lsrs	r3, r3, #6
 800ca80:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca8e:	4a1f      	ldr	r2, [pc, #124]	; (800cb0c <VL53L0X_calc_dmax+0x23c>)
 800ca90:	fba2 2303 	umull	r2, r3, r2, r3
 800ca94:	099b      	lsrs	r3, r3, #6
 800ca96:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ca98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca9a:	3380      	adds	r3, #128	; 0x80
 800ca9c:	0a1b      	lsrs	r3, r3, #8
 800ca9e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	085a      	lsrs	r2, r3, #1
 800caaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caac:	441a      	add	r2, r3
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab4:	65bb      	str	r3, [r7, #88]	; 0x58
 800cab6:	e001      	b.n	800cabc <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800cabc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cabe:	f7fe f9b5 	bl	800ae2c <VL53L0X_isqrt>
 800cac2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d008      	beq.n	800cadc <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	085a      	lsrs	r2, r3, #1
 800cace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad0:	441a      	add	r2, r3
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cada:	e001      	b.n	800cae0 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800cadc:	2300      	movs	r3, #0
 800cade:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800cae0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cae2:	f7fe f9a3 	bl	800ae2c <VL53L0X_isqrt>
 800cae6:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800cae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d902      	bls.n	800cafc <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800caf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cafa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800cafc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3768      	adds	r7, #104	; 0x68
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	fff00000 	.word	0xfff00000
 800cb0c:	10624dd3 	.word	0x10624dd3

0800cb10 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b0b4      	sub	sp, #208	; 0xd0
 800cb14:	af04      	add	r7, sp, #16
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800cb1e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cb22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800cb26:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cb2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800cb2e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800cb32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800cb36:	f241 235c 	movw	r3, #4700	; 0x125c
 800cb3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800cb3e:	4b9e      	ldr	r3, [pc, #632]	; (800cdb8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800cb40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800cb44:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cb48:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800cb4a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800cb4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb52:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb56:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800cb58:	4b98      	ldr	r3, [pc, #608]	; (800cdbc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800cb5a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800cb5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb60:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800cb62:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800cb66:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800cb68:	f240 6377 	movw	r3, #1655	; 0x677
 800cb6c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb82:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800cb86:	0c1b      	lsrs	r3, r3, #16
 800cb88:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800cb90:	f107 0310 	add.w	r3, r7, #16
 800cb94:	461a      	mov	r2, r3
 800cb96:	68b9      	ldr	r1, [r7, #8]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff fe74 	bl	800c886 <VL53L0X_get_total_signal_rate>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800cba4:	f107 0314 	add.w	r3, r7, #20
 800cba8:	461a      	mov	r2, r3
 800cbaa:	68b9      	ldr	r1, [r7, #8]
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fe3b 	bl	800c828 <VL53L0X_get_total_xtalk_rate>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbbe:	fb02 f303 	mul.w	r3, r2, r3
 800cbc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800cbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cbca:	0c1b      	lsrs	r3, r3, #16
 800cbcc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbd4:	fb02 f303 	mul.w	r3, r2, r3
 800cbd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800cbdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d902      	bls.n	800cbec <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800cbe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800cbec:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d168      	bne.n	800ccc6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cbfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800cc04:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cc08:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f7fe feae 	bl	800b974 <VL53L0X_calc_timeout_mclks>
 800cc18:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800cc2a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cc2e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800cc32:	461a      	mov	r2, r3
 800cc34:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7fe fe9b 	bl	800b974 <VL53L0X_calc_timeout_mclks>
 800cc3e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800cc40:	2303      	movs	r3, #3
 800cc42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800cc46:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc4a:	2b08      	cmp	r3, #8
 800cc4c:	d102      	bne.n	800cc54 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800cc4e:	2302      	movs	r3, #2
 800cc50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800cc54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc58:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800cc5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cc5e:	fb02 f303 	mul.w	r3, r2, r3
 800cc62:	02db      	lsls	r3, r3, #11
 800cc64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cc68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc70:	4a53      	ldr	r2, [pc, #332]	; (800cdc0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cc72:	fba2 2303 	umull	r2, r3, r2, r3
 800cc76:	099b      	lsrs	r3, r3, #6
 800cc78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800cc7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cc8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc92:	4a4b      	ldr	r2, [pc, #300]	; (800cdc0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cc94:	fba2 2303 	umull	r2, r3, r2, r3
 800cc98:	099b      	lsrs	r3, r3, #6
 800cc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	3380      	adds	r3, #128	; 0x80
 800cca2:	0a1b      	lsrs	r3, r3, #8
 800cca4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccac:	fb02 f303 	mul.w	r3, r2, r3
 800ccb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ccb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ccb8:	3380      	adds	r3, #128	; 0x80
 800ccba:	0a1b      	lsrs	r3, r3, #8
 800ccbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ccc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800ccce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ccd2:	e165      	b.n	800cfa0 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800ccd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10c      	bne.n	800ccf4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cce0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cce8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e153      	b.n	800cf9c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800ccf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800cd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd06:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800cd08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd0a:	041a      	lsls	r2, r3, #16
 800cd0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800cd16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d902      	bls.n	800cd26 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800cd20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800cd26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cd2e:	fb02 f303 	mul.w	r3, r2, r3
 800cd32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800cd36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fe f872 	bl	800ae2c <VL53L0X_isqrt>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	891b      	ldrh	r3, [r3, #8]
 800cd52:	461a      	mov	r2, r3
 800cd54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd56:	fb02 f303 	mul.w	r3, r2, r3
 800cd5a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd5e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800cd60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd64:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd66:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800cd68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd6c:	4a14      	ldr	r2, [pc, #80]	; (800cdc0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd72:	099b      	lsrs	r3, r3, #6
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800cd76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd78:	041b      	lsls	r3, r3, #16
 800cd7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cd7e:	4a10      	ldr	r2, [pc, #64]	; (800cdc0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cd80:	fba2 2303 	umull	r2, r3, r2, r3
 800cd84:	099b      	lsrs	r3, r3, #6
 800cd86:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800cd8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	bfb8      	it	lt
 800cd9a:	425b      	neglt	r3, r3
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda0:	021b      	lsls	r3, r3, #8
 800cda2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	7e1b      	ldrb	r3, [r3, #24]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800cdac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cdb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdb4:	e035      	b.n	800ce22 <VL53L0X_calc_sigma_estimate+0x312>
 800cdb6:	bf00      	nop
 800cdb8:	028f87ae 	.word	0x028f87ae
 800cdbc:	0006999a 	.word	0x0006999a
 800cdc0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800cdc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800cdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800cdd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800cde4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cde8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdea:	4413      	add	r3, r2
 800cdec:	0c1b      	lsrs	r3, r3, #16
 800cdee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800cdf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cdf6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cdfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800cdfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce02:	085b      	lsrs	r3, r3, #1
 800ce04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ce08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ce10:	fb02 f303 	mul.w	r3, r2, r3
 800ce14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ce18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce1c:	0b9b      	lsrs	r3, r3, #14
 800ce1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ce22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce28:	fb02 f303 	mul.w	r3, r2, r3
 800ce2c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ce34:	0c1b      	lsrs	r3, r3, #16
 800ce36:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3c:	fb02 f303 	mul.w	r3, r2, r3
 800ce40:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ce42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ce46:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ce4e:	0c1b      	lsrs	r3, r3, #16
 800ce50:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce56:	fb02 f303 	mul.w	r3, r2, r3
 800ce5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ce5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	4413      	add	r3, r2
 800ce62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ce64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce66:	f7fd ffe1 	bl	800ae2c <VL53L0X_isqrt>
 800ce6a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	041b      	lsls	r3, r3, #16
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	3332      	adds	r3, #50	; 0x32
 800ce76:	4a4c      	ldr	r2, [pc, #304]	; (800cfa8 <VL53L0X_calc_sigma_estimate+0x498>)
 800ce78:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7c:	095a      	lsrs	r2, r3, #5
 800ce7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ce88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce8c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ce90:	fb02 f303 	mul.w	r3, r2, r3
 800ce94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ce98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce9c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800cea0:	3308      	adds	r3, #8
 800cea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800cea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ceaa:	4a40      	ldr	r2, [pc, #256]	; (800cfac <VL53L0X_calc_sigma_estimate+0x49c>)
 800ceac:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb0:	0b5b      	lsrs	r3, r3, #13
 800ceb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ceb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ceba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d902      	bls.n	800cec6 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800cec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800cec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ceca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cece:	4413      	add	r3, r2
 800ced0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ced4:	4a36      	ldr	r2, [pc, #216]	; (800cfb0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800ced6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceda:	099b      	lsrs	r3, r3, #6
 800cedc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800cee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cee6:	441a      	add	r2, r3
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fd ff9c 	bl	800ae2c <VL53L0X_isqrt>
 800cef4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	021b      	lsls	r3, r3, #8
 800cefa:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cf02:	4a2b      	ldr	r2, [pc, #172]	; (800cfb0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800cf04:	fba2 2303 	umull	r2, r3, r2, r3
 800cf08:	099b      	lsrs	r3, r3, #6
 800cf0a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800cf0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf14:	fb02 f303 	mul.w	r3, r2, r3
 800cf18:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	69fa      	ldr	r2, [r7, #28]
 800cf1e:	fb02 f303 	mul.w	r3, r2, r3
 800cf22:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800cf24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	4413      	add	r3, r2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fd ff7e 	bl	800ae2c <VL53L0X_isqrt>
 800cf30:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf38:	fb02 f303 	mul.w	r3, r2, r3
 800cf3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800cf40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d009      	beq.n	800cf5a <VL53L0X_calc_sigma_estimate+0x44a>
 800cf46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <VL53L0X_calc_sigma_estimate+0x44a>
 800cf4e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cf52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d903      	bls.n	800cf62 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800cf5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cf68:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800cf74:	6939      	ldr	r1, [r7, #16]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	9303      	str	r3, [sp, #12]
 800cf7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf84:	9301      	str	r3, [sp, #4]
 800cf86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff fc9d 	bl	800c8d0 <VL53L0X_calc_dmax>
 800cf96:	4603      	mov	r3, r0
 800cf98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cf9c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	37c0      	adds	r7, #192	; 0xc0
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	51eb851f 	.word	0x51eb851f
 800cfac:	d1b71759 	.word	0xd1b71759
 800cfb0:	10624dd3 	.word	0x10624dd3

0800cfb4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b090      	sub	sp, #64	; 0x40
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	607a      	str	r2, [r7, #4]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	72fb      	strb	r3, [r7, #11]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d006:	7afb      	ldrb	r3, [r7, #11]
 800d008:	10db      	asrs	r3, r3, #3
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 030f 	and.w	r3, r3, #15
 800d010:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d014:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d017      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
 800d01c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d020:	2b05      	cmp	r3, #5
 800d022:	d013      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d024:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d028:	2b07      	cmp	r3, #7
 800d02a:	d00f      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d02c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d030:	2b0c      	cmp	r3, #12
 800d032:	d00b      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d034:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d038:	2b0d      	cmp	r3, #13
 800d03a:	d007      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d03c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d040:	2b0e      	cmp	r3, #14
 800d042:	d003      	beq.n	800d04c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d044:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d048:	2b0f      	cmp	r3, #15
 800d04a:	d103      	bne.n	800d054 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d04c:	2301      	movs	r3, #1
 800d04e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d052:	e002      	b.n	800d05a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d05a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d109      	bne.n	800d076 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d062:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d066:	461a      	mov	r2, r3
 800d068:	2100      	movs	r1, #0
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7fc f9e2 	bl	8009434 <VL53L0X_GetLimitCheckEnable>
 800d070:	4603      	mov	r3, r0
 800d072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d076:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d02e      	beq.n	800d0dc <VL53L0X_get_pal_range_status+0x128>
 800d07e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d082:	2b00      	cmp	r3, #0
 800d084:	d12a      	bne.n	800d0dc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d086:	f107 0310 	add.w	r3, r7, #16
 800d08a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d08e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f7ff fd3d 	bl	800cb10 <VL53L0X_calc_sigma_estimate>
 800d096:	4603      	mov	r3, r0
 800d098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d09c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0aa:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d0ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d113      	bne.n	800d0dc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d0b4:	f107 0320 	add.w	r3, r7, #32
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f7fc fa3f 	bl	8009540 <VL53L0X_GetLimitCheckValue>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d006      	beq.n	800d0dc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d902      	bls.n	800d0dc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d0dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d0e4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	2102      	movs	r1, #2
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7fc f9a1 	bl	8009434 <VL53L0X_GetLimitCheckEnable>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d0f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d044      	beq.n	800d18a <VL53L0X_get_pal_range_status+0x1d6>
 800d100:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d104:	2b00      	cmp	r3, #0
 800d106:	d140      	bne.n	800d18a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d108:	f107 031c 	add.w	r3, r7, #28
 800d10c:	461a      	mov	r2, r3
 800d10e:	2102      	movs	r1, #2
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7fc fa15 	bl	8009540 <VL53L0X_GetLimitCheckValue>
 800d116:	4603      	mov	r3, r0
 800d118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d11c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d120:	2b00      	cmp	r3, #0
 800d122:	d107      	bne.n	800d134 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d124:	2201      	movs	r2, #1
 800d126:	21ff      	movs	r1, #255	; 0xff
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 f9bb 	bl	800d4a4 <VL53L0X_WrByte>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d134:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d109      	bne.n	800d150 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d13c:	f107 0316 	add.w	r3, r7, #22
 800d140:	461a      	mov	r2, r3
 800d142:	21b6      	movs	r1, #182	; 0xb6
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 fa59 	bl	800d5fc <VL53L0X_RdWord>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d150:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d154:	2b00      	cmp	r3, #0
 800d156:	d107      	bne.n	800d168 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d158:	2200      	movs	r2, #0
 800d15a:	21ff      	movs	r1, #255	; 0xff
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f9a1 	bl	800d4a4 <VL53L0X_WrByte>
 800d162:	4603      	mov	r3, r0
 800d164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d168:	8afb      	ldrh	r3, [r7, #22]
 800d16a:	025b      	lsls	r3, r3, #9
 800d16c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d172:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d006      	beq.n	800d18a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d17c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d180:	429a      	cmp	r2, r3
 800d182:	d902      	bls.n	800d18a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d184:	2301      	movs	r3, #1
 800d186:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d18a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d109      	bne.n	800d1a6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d196:	461a      	mov	r2, r3
 800d198:	2103      	movs	r1, #3
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f7fc f94a 	bl	8009434 <VL53L0X_GetLimitCheckEnable>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d1a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d023      	beq.n	800d1f6 <VL53L0X_get_pal_range_status+0x242>
 800d1ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d11f      	bne.n	800d1f6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d1b6:	893b      	ldrh	r3, [r7, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d102      	bne.n	800d1c2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c0:	e005      	b.n	800d1ce <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	021a      	lsls	r2, r3, #8
 800d1c6:	893b      	ldrh	r3, [r7, #8]
 800d1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1cc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d1ce:	f107 0318 	add.w	r3, r7, #24
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2103      	movs	r1, #3
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7fc f9b2 	bl	8009540 <VL53L0X_GetLimitCheckValue>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d006      	beq.n	800d1f6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d1e8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d202      	bcs.n	800d1f6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d1f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d14a      	bne.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d1fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d202:	2b01      	cmp	r3, #1
 800d204:	d103      	bne.n	800d20e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d208:	22ff      	movs	r2, #255	; 0xff
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	e042      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d20e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d212:	2b01      	cmp	r3, #1
 800d214:	d007      	beq.n	800d226 <VL53L0X_get_pal_range_status+0x272>
 800d216:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d003      	beq.n	800d226 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d21e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d222:	2b03      	cmp	r3, #3
 800d224:	d103      	bne.n	800d22e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d228:	2205      	movs	r2, #5
 800d22a:	701a      	strb	r2, [r3, #0]
 800d22c:	e032      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d22e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d232:	2b06      	cmp	r3, #6
 800d234:	d003      	beq.n	800d23e <VL53L0X_get_pal_range_status+0x28a>
 800d236:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d23a:	2b09      	cmp	r3, #9
 800d23c:	d103      	bne.n	800d246 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d240:	2204      	movs	r2, #4
 800d242:	701a      	strb	r2, [r3, #0]
 800d244:	e026      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d246:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d24a:	2b08      	cmp	r3, #8
 800d24c:	d007      	beq.n	800d25e <VL53L0X_get_pal_range_status+0x2aa>
 800d24e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d252:	2b0a      	cmp	r3, #10
 800d254:	d003      	beq.n	800d25e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d256:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d103      	bne.n	800d266 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d260:	2203      	movs	r2, #3
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	e016      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d266:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d003      	beq.n	800d276 <VL53L0X_get_pal_range_status+0x2c2>
 800d26e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d272:	2b01      	cmp	r3, #1
 800d274:	d103      	bne.n	800d27e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d278:	2202      	movs	r2, #2
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	e00a      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d27e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d282:	2b01      	cmp	r3, #1
 800d284:	d103      	bne.n	800d28e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d288:	2201      	movs	r2, #1
 800d28a:	701a      	strb	r2, [r3, #0]
 800d28c:	e002      	b.n	800d294 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d290:	2200      	movs	r2, #0
 800d292:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d102      	bne.n	800d2a2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d29c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29e:	2200      	movs	r2, #0
 800d2a0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d2a2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	2101      	movs	r1, #1
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f7fc f8c2 	bl	8009434 <VL53L0X_GetLimitCheckEnable>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d2b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d14f      	bne.n	800d35e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d2be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <VL53L0X_get_pal_range_status+0x31a>
 800d2c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d103      	bne.n	800d2d6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2d4:	e002      	b.n	800d2dc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d2e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d2e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d003      	beq.n	800d2f6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d2ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d103      	bne.n	800d2fe <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2fc:	e002      	b.n	800d304 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d30a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d30e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <VL53L0X_get_pal_range_status+0x36a>
 800d316:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d103      	bne.n	800d326 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d31e:	2301      	movs	r3, #1
 800d320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d324:	e002      	b.n	800d32c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d003      	beq.n	800d346 <VL53L0X_get_pal_range_status+0x392>
 800d33e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d342:	2b01      	cmp	r3, #1
 800d344:	d103      	bne.n	800d34e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d346:	2301      	movs	r3, #1
 800d348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d34c:	e002      	b.n	800d354 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d35a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d35e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d362:	4618      	mov	r0, r3
 800d364:	3740      	adds	r7, #64	; 0x40
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b088      	sub	sp, #32
 800d36e:	af02      	add	r7, sp, #8
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	330a      	adds	r3, #10
 800d37a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d388:	b299      	uxth	r1, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	4613      	mov	r3, r2
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	f7f7 f909 	bl	80045ac <HAL_I2C_Master_Transmit>
 800d39a:	4603      	mov	r3, r0
 800d39c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d39e:	693b      	ldr	r3, [r7, #16]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b088      	sub	sp, #32
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	330a      	adds	r3, #10
 800d3b8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	b299      	uxth	r1, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	f7f7 f9db 	bl	8004794 <HAL_I2C_Master_Receive>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d3e2:	693b      	ldr	r3, [r7, #16]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	607a      	str	r2, [r7, #4]
 800d3f6:	603b      	str	r3, [r7, #0]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b3f      	cmp	r3, #63	; 0x3f
 800d404:	d902      	bls.n	800d40c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d406:	f06f 0303 	mvn.w	r3, #3
 800d40a:	e016      	b.n	800d43a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800d40c:	4a0d      	ldr	r2, [pc, #52]	; (800d444 <VL53L0X_WriteMulti+0x58>)
 800d40e:	7afb      	ldrb	r3, [r7, #11]
 800d410:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	480c      	ldr	r0, [pc, #48]	; (800d448 <VL53L0X_WriteMulti+0x5c>)
 800d418:	f000 f9a6 	bl	800d768 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	461a      	mov	r2, r3
 800d422:	4908      	ldr	r1, [pc, #32]	; (800d444 <VL53L0X_WriteMulti+0x58>)
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7ff ffa0 	bl	800d36a <_I2CWrite>
 800d42a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d432:	23ec      	movs	r3, #236	; 0xec
 800d434:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	20000c2c 	.word	0x20000c2c
 800d448:	20000c2d 	.word	0x20000c2d

0800d44c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	607a      	str	r2, [r7, #4]
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	460b      	mov	r3, r1
 800d45a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d45c:	2300      	movs	r3, #0
 800d45e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d460:	f107 030b 	add.w	r3, r7, #11
 800d464:	2201      	movs	r2, #1
 800d466:	4619      	mov	r1, r3
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff ff7e 	bl	800d36a <_I2CWrite>
 800d46e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d476:	23ec      	movs	r3, #236	; 0xec
 800d478:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d47a:	e00c      	b.n	800d496 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	6879      	ldr	r1, [r7, #4]
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7ff ff91 	bl	800d3a8 <_I2CRead>
 800d486:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d002      	beq.n	800d494 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d48e:	23ec      	movs	r3, #236	; 0xec
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e000      	b.n	800d496 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800d494:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d4b8:	4a0b      	ldr	r2, [pc, #44]	; (800d4e8 <VL53L0X_WrByte+0x44>)
 800d4ba:	78fb      	ldrb	r3, [r7, #3]
 800d4bc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800d4be:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <VL53L0X_WrByte+0x44>)
 800d4c0:	78bb      	ldrb	r3, [r7, #2]
 800d4c2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	4908      	ldr	r1, [pc, #32]	; (800d4e8 <VL53L0X_WrByte+0x44>)
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff ff4e 	bl	800d36a <_I2CWrite>
 800d4ce:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d4d6:	23ec      	movs	r3, #236	; 0xec
 800d4d8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000c2c 	.word	0x20000c2c

0800d4ec <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d500:	4a0e      	ldr	r2, [pc, #56]	; (800d53c <VL53L0X_WrWord+0x50>)
 800d502:	78fb      	ldrb	r3, [r7, #3]
 800d504:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800d506:	883b      	ldrh	r3, [r7, #0]
 800d508:	0a1b      	lsrs	r3, r3, #8
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <VL53L0X_WrWord+0x50>)
 800d510:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800d512:	883b      	ldrh	r3, [r7, #0]
 800d514:	b2da      	uxtb	r2, r3
 800d516:	4b09      	ldr	r3, [pc, #36]	; (800d53c <VL53L0X_WrWord+0x50>)
 800d518:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d51a:	2203      	movs	r2, #3
 800d51c:	4907      	ldr	r1, [pc, #28]	; (800d53c <VL53L0X_WrWord+0x50>)
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff ff23 	bl	800d36a <_I2CWrite>
 800d524:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d52c:	23ec      	movs	r3, #236	; 0xec
 800d52e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20000c2c 	.word	0x20000c2c

0800d540 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	4608      	mov	r0, r1
 800d54a:	4611      	mov	r1, r2
 800d54c:	461a      	mov	r2, r3
 800d54e:	4603      	mov	r3, r0
 800d550:	70fb      	strb	r3, [r7, #3]
 800d552:	460b      	mov	r3, r1
 800d554:	70bb      	strb	r3, [r7, #2]
 800d556:	4613      	mov	r3, r2
 800d558:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d55a:	2300      	movs	r3, #0
 800d55c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800d55e:	f107 020e 	add.w	r2, r7, #14
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	4619      	mov	r1, r3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f81e 	bl	800d5a8 <VL53L0X_RdByte>
 800d56c:	4603      	mov	r3, r0
 800d56e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800d570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d110      	bne.n	800d59a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800d578:	7bba      	ldrb	r2, [r7, #14]
 800d57a:	78bb      	ldrb	r3, [r7, #2]
 800d57c:	4013      	ands	r3, r2
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	787b      	ldrb	r3, [r7, #1]
 800d582:	4313      	orrs	r3, r2
 800d584:	b2db      	uxtb	r3, r3
 800d586:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800d588:	7bba      	ldrb	r2, [r7, #14]
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ff88 	bl	800d4a4 <VL53L0X_WrByte>
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]
 800d598:	e000      	b.n	800d59c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800d59a:	bf00      	nop
done:
    return Status;
 800d59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d5ba:	f107 030b 	add.w	r3, r7, #11
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7ff fed1 	bl	800d36a <_I2CWrite>
 800d5c8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d5d0:	23ec      	movs	r3, #236	; 0xec
 800d5d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d5d4:	e00c      	b.n	800d5f0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff fee4 	bl	800d3a8 <_I2CRead>
 800d5e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d5e8:	23ec      	movs	r3, #236	; 0xec
 800d5ea:	75fb      	strb	r3, [r7, #23]
 800d5ec:	e000      	b.n	800d5f0 <VL53L0X_RdByte+0x48>
    }
done:
 800d5ee:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d5f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	460b      	mov	r3, r1
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d60e:	f107 030b 	add.w	r3, r7, #11
 800d612:	2201      	movs	r2, #1
 800d614:	4619      	mov	r1, r3
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7ff fea7 	bl	800d36a <_I2CWrite>
 800d61c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d624:	23ec      	movs	r3, #236	; 0xec
 800d626:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d628:	e017      	b.n	800d65a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d62a:	2202      	movs	r2, #2
 800d62c:	490e      	ldr	r1, [pc, #56]	; (800d668 <VL53L0X_RdWord+0x6c>)
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff feba 	bl	800d3a8 <_I2CRead>
 800d634:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d63c:	23ec      	movs	r3, #236	; 0xec
 800d63e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d640:	e00b      	b.n	800d65a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d642:	4b09      	ldr	r3, [pc, #36]	; (800d668 <VL53L0X_RdWord+0x6c>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b29b      	uxth	r3, r3
 800d648:	021b      	lsls	r3, r3, #8
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <VL53L0X_RdWord+0x6c>)
 800d64e:	785b      	ldrb	r3, [r3, #1]
 800d650:	b29b      	uxth	r3, r3
 800d652:	4413      	add	r3, r2
 800d654:	b29a      	uxth	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800d65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000c2c 	.word	0x20000c2c

0800d66c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	460b      	mov	r3, r1
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d67a:	2300      	movs	r3, #0
 800d67c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d67e:	f107 030b 	add.w	r3, r7, #11
 800d682:	2201      	movs	r2, #1
 800d684:	4619      	mov	r1, r3
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fe6f 	bl	800d36a <_I2CWrite>
 800d68c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d694:	23ec      	movs	r3, #236	; 0xec
 800d696:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d698:	e01b      	b.n	800d6d2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800d69a:	2204      	movs	r2, #4
 800d69c:	4910      	ldr	r1, [pc, #64]	; (800d6e0 <VL53L0X_RdDWord+0x74>)
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7ff fe82 	bl	800d3a8 <_I2CRead>
 800d6a4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d6ac:	23ec      	movs	r3, #236	; 0xec
 800d6ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d6b0:	e00f      	b.n	800d6d2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <VL53L0X_RdDWord+0x74>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	061a      	lsls	r2, r3, #24
 800d6b8:	4b09      	ldr	r3, [pc, #36]	; (800d6e0 <VL53L0X_RdDWord+0x74>)
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	041b      	lsls	r3, r3, #16
 800d6be:	441a      	add	r2, r3
 800d6c0:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <VL53L0X_RdDWord+0x74>)
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	021b      	lsls	r3, r3, #8
 800d6c6:	4413      	add	r3, r2
 800d6c8:	4a05      	ldr	r2, [pc, #20]	; (800d6e0 <VL53L0X_RdDWord+0x74>)
 800d6ca:	78d2      	ldrb	r2, [r2, #3]
 800d6cc:	441a      	add	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800d6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20000c2c 	.word	0x20000c2c

0800d6e4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800d6f0:	2002      	movs	r0, #2
 800d6f2:	f7f5 f889 	bl	8002808 <HAL_Delay>
    return status;
 800d6f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
	...

0800d704 <__errno>:
 800d704:	4b01      	ldr	r3, [pc, #4]	; (800d70c <__errno+0x8>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	200002d0 	.word	0x200002d0

0800d710 <__libc_init_array>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	4e0d      	ldr	r6, [pc, #52]	; (800d748 <__libc_init_array+0x38>)
 800d714:	4c0d      	ldr	r4, [pc, #52]	; (800d74c <__libc_init_array+0x3c>)
 800d716:	1ba4      	subs	r4, r4, r6
 800d718:	10a4      	asrs	r4, r4, #2
 800d71a:	2500      	movs	r5, #0
 800d71c:	42a5      	cmp	r5, r4
 800d71e:	d109      	bne.n	800d734 <__libc_init_array+0x24>
 800d720:	4e0b      	ldr	r6, [pc, #44]	; (800d750 <__libc_init_array+0x40>)
 800d722:	4c0c      	ldr	r4, [pc, #48]	; (800d754 <__libc_init_array+0x44>)
 800d724:	f005 fdee 	bl	8013304 <_init>
 800d728:	1ba4      	subs	r4, r4, r6
 800d72a:	10a4      	asrs	r4, r4, #2
 800d72c:	2500      	movs	r5, #0
 800d72e:	42a5      	cmp	r5, r4
 800d730:	d105      	bne.n	800d73e <__libc_init_array+0x2e>
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d738:	4798      	blx	r3
 800d73a:	3501      	adds	r5, #1
 800d73c:	e7ee      	b.n	800d71c <__libc_init_array+0xc>
 800d73e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d742:	4798      	blx	r3
 800d744:	3501      	adds	r5, #1
 800d746:	e7f2      	b.n	800d72e <__libc_init_array+0x1e>
 800d748:	08013908 	.word	0x08013908
 800d74c:	08013908 	.word	0x08013908
 800d750:	08013908 	.word	0x08013908
 800d754:	0801390c 	.word	0x0801390c

0800d758 <malloc>:
 800d758:	4b02      	ldr	r3, [pc, #8]	; (800d764 <malloc+0xc>)
 800d75a:	4601      	mov	r1, r0
 800d75c:	6818      	ldr	r0, [r3, #0]
 800d75e:	f000 b865 	b.w	800d82c <_malloc_r>
 800d762:	bf00      	nop
 800d764:	200002d0 	.word	0x200002d0

0800d768 <memcpy>:
 800d768:	b510      	push	{r4, lr}
 800d76a:	1e43      	subs	r3, r0, #1
 800d76c:	440a      	add	r2, r1
 800d76e:	4291      	cmp	r1, r2
 800d770:	d100      	bne.n	800d774 <memcpy+0xc>
 800d772:	bd10      	pop	{r4, pc}
 800d774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d77c:	e7f7      	b.n	800d76e <memcpy+0x6>

0800d77e <memset>:
 800d77e:	4402      	add	r2, r0
 800d780:	4603      	mov	r3, r0
 800d782:	4293      	cmp	r3, r2
 800d784:	d100      	bne.n	800d788 <memset+0xa>
 800d786:	4770      	bx	lr
 800d788:	f803 1b01 	strb.w	r1, [r3], #1
 800d78c:	e7f9      	b.n	800d782 <memset+0x4>
	...

0800d790 <_free_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4605      	mov	r5, r0
 800d794:	2900      	cmp	r1, #0
 800d796:	d045      	beq.n	800d824 <_free_r+0x94>
 800d798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d79c:	1f0c      	subs	r4, r1, #4
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	bfb8      	it	lt
 800d7a2:	18e4      	addlt	r4, r4, r3
 800d7a4:	f003 f83a 	bl	801081c <__malloc_lock>
 800d7a8:	4a1f      	ldr	r2, [pc, #124]	; (800d828 <_free_r+0x98>)
 800d7aa:	6813      	ldr	r3, [r2, #0]
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	b933      	cbnz	r3, 800d7be <_free_r+0x2e>
 800d7b0:	6063      	str	r3, [r4, #4]
 800d7b2:	6014      	str	r4, [r2, #0]
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ba:	f003 b830 	b.w	801081e <__malloc_unlock>
 800d7be:	42a3      	cmp	r3, r4
 800d7c0:	d90c      	bls.n	800d7dc <_free_r+0x4c>
 800d7c2:	6821      	ldr	r1, [r4, #0]
 800d7c4:	1862      	adds	r2, r4, r1
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	bf04      	itt	eq
 800d7ca:	681a      	ldreq	r2, [r3, #0]
 800d7cc:	685b      	ldreq	r3, [r3, #4]
 800d7ce:	6063      	str	r3, [r4, #4]
 800d7d0:	bf04      	itt	eq
 800d7d2:	1852      	addeq	r2, r2, r1
 800d7d4:	6022      	streq	r2, [r4, #0]
 800d7d6:	6004      	str	r4, [r0, #0]
 800d7d8:	e7ec      	b.n	800d7b4 <_free_r+0x24>
 800d7da:	4613      	mov	r3, r2
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	b10a      	cbz	r2, 800d7e4 <_free_r+0x54>
 800d7e0:	42a2      	cmp	r2, r4
 800d7e2:	d9fa      	bls.n	800d7da <_free_r+0x4a>
 800d7e4:	6819      	ldr	r1, [r3, #0]
 800d7e6:	1858      	adds	r0, r3, r1
 800d7e8:	42a0      	cmp	r0, r4
 800d7ea:	d10b      	bne.n	800d804 <_free_r+0x74>
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	4401      	add	r1, r0
 800d7f0:	1858      	adds	r0, r3, r1
 800d7f2:	4282      	cmp	r2, r0
 800d7f4:	6019      	str	r1, [r3, #0]
 800d7f6:	d1dd      	bne.n	800d7b4 <_free_r+0x24>
 800d7f8:	6810      	ldr	r0, [r2, #0]
 800d7fa:	6852      	ldr	r2, [r2, #4]
 800d7fc:	605a      	str	r2, [r3, #4]
 800d7fe:	4401      	add	r1, r0
 800d800:	6019      	str	r1, [r3, #0]
 800d802:	e7d7      	b.n	800d7b4 <_free_r+0x24>
 800d804:	d902      	bls.n	800d80c <_free_r+0x7c>
 800d806:	230c      	movs	r3, #12
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	e7d3      	b.n	800d7b4 <_free_r+0x24>
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	1821      	adds	r1, r4, r0
 800d810:	428a      	cmp	r2, r1
 800d812:	bf04      	itt	eq
 800d814:	6811      	ldreq	r1, [r2, #0]
 800d816:	6852      	ldreq	r2, [r2, #4]
 800d818:	6062      	str	r2, [r4, #4]
 800d81a:	bf04      	itt	eq
 800d81c:	1809      	addeq	r1, r1, r0
 800d81e:	6021      	streq	r1, [r4, #0]
 800d820:	605c      	str	r4, [r3, #4]
 800d822:	e7c7      	b.n	800d7b4 <_free_r+0x24>
 800d824:	bd38      	pop	{r3, r4, r5, pc}
 800d826:	bf00      	nop
 800d828:	200004c4 	.word	0x200004c4

0800d82c <_malloc_r>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	1ccd      	adds	r5, r1, #3
 800d830:	f025 0503 	bic.w	r5, r5, #3
 800d834:	3508      	adds	r5, #8
 800d836:	2d0c      	cmp	r5, #12
 800d838:	bf38      	it	cc
 800d83a:	250c      	movcc	r5, #12
 800d83c:	2d00      	cmp	r5, #0
 800d83e:	4606      	mov	r6, r0
 800d840:	db01      	blt.n	800d846 <_malloc_r+0x1a>
 800d842:	42a9      	cmp	r1, r5
 800d844:	d903      	bls.n	800d84e <_malloc_r+0x22>
 800d846:	230c      	movs	r3, #12
 800d848:	6033      	str	r3, [r6, #0]
 800d84a:	2000      	movs	r0, #0
 800d84c:	bd70      	pop	{r4, r5, r6, pc}
 800d84e:	f002 ffe5 	bl	801081c <__malloc_lock>
 800d852:	4a21      	ldr	r2, [pc, #132]	; (800d8d8 <_malloc_r+0xac>)
 800d854:	6814      	ldr	r4, [r2, #0]
 800d856:	4621      	mov	r1, r4
 800d858:	b991      	cbnz	r1, 800d880 <_malloc_r+0x54>
 800d85a:	4c20      	ldr	r4, [pc, #128]	; (800d8dc <_malloc_r+0xb0>)
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	b91b      	cbnz	r3, 800d868 <_malloc_r+0x3c>
 800d860:	4630      	mov	r0, r6
 800d862:	f000 fe93 	bl	800e58c <_sbrk_r>
 800d866:	6020      	str	r0, [r4, #0]
 800d868:	4629      	mov	r1, r5
 800d86a:	4630      	mov	r0, r6
 800d86c:	f000 fe8e 	bl	800e58c <_sbrk_r>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d124      	bne.n	800d8be <_malloc_r+0x92>
 800d874:	230c      	movs	r3, #12
 800d876:	6033      	str	r3, [r6, #0]
 800d878:	4630      	mov	r0, r6
 800d87a:	f002 ffd0 	bl	801081e <__malloc_unlock>
 800d87e:	e7e4      	b.n	800d84a <_malloc_r+0x1e>
 800d880:	680b      	ldr	r3, [r1, #0]
 800d882:	1b5b      	subs	r3, r3, r5
 800d884:	d418      	bmi.n	800d8b8 <_malloc_r+0x8c>
 800d886:	2b0b      	cmp	r3, #11
 800d888:	d90f      	bls.n	800d8aa <_malloc_r+0x7e>
 800d88a:	600b      	str	r3, [r1, #0]
 800d88c:	50cd      	str	r5, [r1, r3]
 800d88e:	18cc      	adds	r4, r1, r3
 800d890:	4630      	mov	r0, r6
 800d892:	f002 ffc4 	bl	801081e <__malloc_unlock>
 800d896:	f104 000b 	add.w	r0, r4, #11
 800d89a:	1d23      	adds	r3, r4, #4
 800d89c:	f020 0007 	bic.w	r0, r0, #7
 800d8a0:	1ac3      	subs	r3, r0, r3
 800d8a2:	d0d3      	beq.n	800d84c <_malloc_r+0x20>
 800d8a4:	425a      	negs	r2, r3
 800d8a6:	50e2      	str	r2, [r4, r3]
 800d8a8:	e7d0      	b.n	800d84c <_malloc_r+0x20>
 800d8aa:	428c      	cmp	r4, r1
 800d8ac:	684b      	ldr	r3, [r1, #4]
 800d8ae:	bf16      	itet	ne
 800d8b0:	6063      	strne	r3, [r4, #4]
 800d8b2:	6013      	streq	r3, [r2, #0]
 800d8b4:	460c      	movne	r4, r1
 800d8b6:	e7eb      	b.n	800d890 <_malloc_r+0x64>
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	6849      	ldr	r1, [r1, #4]
 800d8bc:	e7cc      	b.n	800d858 <_malloc_r+0x2c>
 800d8be:	1cc4      	adds	r4, r0, #3
 800d8c0:	f024 0403 	bic.w	r4, r4, #3
 800d8c4:	42a0      	cmp	r0, r4
 800d8c6:	d005      	beq.n	800d8d4 <_malloc_r+0xa8>
 800d8c8:	1a21      	subs	r1, r4, r0
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f000 fe5e 	bl	800e58c <_sbrk_r>
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	d0cf      	beq.n	800d874 <_malloc_r+0x48>
 800d8d4:	6025      	str	r5, [r4, #0]
 800d8d6:	e7db      	b.n	800d890 <_malloc_r+0x64>
 800d8d8:	200004c4 	.word	0x200004c4
 800d8dc:	200004c8 	.word	0x200004c8

0800d8e0 <__cvt>:
 800d8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e4:	ec55 4b10 	vmov	r4, r5, d0
 800d8e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d8ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	460e      	mov	r6, r1
 800d8f2:	4691      	mov	r9, r2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	bfb8      	it	lt
 800d8f8:	4622      	movlt	r2, r4
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	f027 0720 	bic.w	r7, r7, #32
 800d900:	bfbb      	ittet	lt
 800d902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d906:	461d      	movlt	r5, r3
 800d908:	2300      	movge	r3, #0
 800d90a:	232d      	movlt	r3, #45	; 0x2d
 800d90c:	bfb8      	it	lt
 800d90e:	4614      	movlt	r4, r2
 800d910:	2f46      	cmp	r7, #70	; 0x46
 800d912:	700b      	strb	r3, [r1, #0]
 800d914:	d004      	beq.n	800d920 <__cvt+0x40>
 800d916:	2f45      	cmp	r7, #69	; 0x45
 800d918:	d100      	bne.n	800d91c <__cvt+0x3c>
 800d91a:	3601      	adds	r6, #1
 800d91c:	2102      	movs	r1, #2
 800d91e:	e000      	b.n	800d922 <__cvt+0x42>
 800d920:	2103      	movs	r1, #3
 800d922:	ab03      	add	r3, sp, #12
 800d924:	9301      	str	r3, [sp, #4]
 800d926:	ab02      	add	r3, sp, #8
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	4632      	mov	r2, r6
 800d92c:	4653      	mov	r3, sl
 800d92e:	ec45 4b10 	vmov	d0, r4, r5
 800d932:	f001 fda5 	bl	800f480 <_dtoa_r>
 800d936:	2f47      	cmp	r7, #71	; 0x47
 800d938:	4680      	mov	r8, r0
 800d93a:	d102      	bne.n	800d942 <__cvt+0x62>
 800d93c:	f019 0f01 	tst.w	r9, #1
 800d940:	d026      	beq.n	800d990 <__cvt+0xb0>
 800d942:	2f46      	cmp	r7, #70	; 0x46
 800d944:	eb08 0906 	add.w	r9, r8, r6
 800d948:	d111      	bne.n	800d96e <__cvt+0x8e>
 800d94a:	f898 3000 	ldrb.w	r3, [r8]
 800d94e:	2b30      	cmp	r3, #48	; 0x30
 800d950:	d10a      	bne.n	800d968 <__cvt+0x88>
 800d952:	2200      	movs	r2, #0
 800d954:	2300      	movs	r3, #0
 800d956:	4620      	mov	r0, r4
 800d958:	4629      	mov	r1, r5
 800d95a:	f7f3 f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d95e:	b918      	cbnz	r0, 800d968 <__cvt+0x88>
 800d960:	f1c6 0601 	rsb	r6, r6, #1
 800d964:	f8ca 6000 	str.w	r6, [sl]
 800d968:	f8da 3000 	ldr.w	r3, [sl]
 800d96c:	4499      	add	r9, r3
 800d96e:	2200      	movs	r2, #0
 800d970:	2300      	movs	r3, #0
 800d972:	4620      	mov	r0, r4
 800d974:	4629      	mov	r1, r5
 800d976:	f7f3 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800d97a:	b938      	cbnz	r0, 800d98c <__cvt+0xac>
 800d97c:	2230      	movs	r2, #48	; 0x30
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	454b      	cmp	r3, r9
 800d982:	d205      	bcs.n	800d990 <__cvt+0xb0>
 800d984:	1c59      	adds	r1, r3, #1
 800d986:	9103      	str	r1, [sp, #12]
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	e7f8      	b.n	800d97e <__cvt+0x9e>
 800d98c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d994:	eba3 0308 	sub.w	r3, r3, r8
 800d998:	4640      	mov	r0, r8
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	b004      	add	sp, #16
 800d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d9a2 <__exponent>:
 800d9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	bfba      	itte	lt
 800d9aa:	4249      	neglt	r1, r1
 800d9ac:	232d      	movlt	r3, #45	; 0x2d
 800d9ae:	232b      	movge	r3, #43	; 0x2b
 800d9b0:	2909      	cmp	r1, #9
 800d9b2:	f804 2b02 	strb.w	r2, [r4], #2
 800d9b6:	7043      	strb	r3, [r0, #1]
 800d9b8:	dd20      	ble.n	800d9fc <__exponent+0x5a>
 800d9ba:	f10d 0307 	add.w	r3, sp, #7
 800d9be:	461f      	mov	r7, r3
 800d9c0:	260a      	movs	r6, #10
 800d9c2:	fb91 f5f6 	sdiv	r5, r1, r6
 800d9c6:	fb06 1115 	mls	r1, r6, r5, r1
 800d9ca:	3130      	adds	r1, #48	; 0x30
 800d9cc:	2d09      	cmp	r5, #9
 800d9ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9d2:	f103 32ff 	add.w	r2, r3, #4294967295
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	dc09      	bgt.n	800d9ee <__exponent+0x4c>
 800d9da:	3130      	adds	r1, #48	; 0x30
 800d9dc:	3b02      	subs	r3, #2
 800d9de:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d9e2:	42bb      	cmp	r3, r7
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	d304      	bcc.n	800d9f2 <__exponent+0x50>
 800d9e8:	1a10      	subs	r0, r2, r0
 800d9ea:	b003      	add	sp, #12
 800d9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	e7e7      	b.n	800d9c2 <__exponent+0x20>
 800d9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9f6:	f804 2b01 	strb.w	r2, [r4], #1
 800d9fa:	e7f2      	b.n	800d9e2 <__exponent+0x40>
 800d9fc:	2330      	movs	r3, #48	; 0x30
 800d9fe:	4419      	add	r1, r3
 800da00:	7083      	strb	r3, [r0, #2]
 800da02:	1d02      	adds	r2, r0, #4
 800da04:	70c1      	strb	r1, [r0, #3]
 800da06:	e7ef      	b.n	800d9e8 <__exponent+0x46>

0800da08 <_printf_float>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	b08d      	sub	sp, #52	; 0x34
 800da0e:	460c      	mov	r4, r1
 800da10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800da14:	4616      	mov	r6, r2
 800da16:	461f      	mov	r7, r3
 800da18:	4605      	mov	r5, r0
 800da1a:	f002 fedf 	bl	80107dc <_localeconv_r>
 800da1e:	6803      	ldr	r3, [r0, #0]
 800da20:	9304      	str	r3, [sp, #16]
 800da22:	4618      	mov	r0, r3
 800da24:	f7f2 fbdc 	bl	80001e0 <strlen>
 800da28:	2300      	movs	r3, #0
 800da2a:	930a      	str	r3, [sp, #40]	; 0x28
 800da2c:	f8d8 3000 	ldr.w	r3, [r8]
 800da30:	9005      	str	r0, [sp, #20]
 800da32:	3307      	adds	r3, #7
 800da34:	f023 0307 	bic.w	r3, r3, #7
 800da38:	f103 0208 	add.w	r2, r3, #8
 800da3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da40:	f8d4 b000 	ldr.w	fp, [r4]
 800da44:	f8c8 2000 	str.w	r2, [r8]
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da58:	9307      	str	r3, [sp, #28]
 800da5a:	f8cd 8018 	str.w	r8, [sp, #24]
 800da5e:	f04f 32ff 	mov.w	r2, #4294967295
 800da62:	4ba7      	ldr	r3, [pc, #668]	; (800dd00 <_printf_float+0x2f8>)
 800da64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da68:	f7f3 f868 	bl	8000b3c <__aeabi_dcmpun>
 800da6c:	bb70      	cbnz	r0, 800dacc <_printf_float+0xc4>
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295
 800da72:	4ba3      	ldr	r3, [pc, #652]	; (800dd00 <_printf_float+0x2f8>)
 800da74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da78:	f7f3 f842 	bl	8000b00 <__aeabi_dcmple>
 800da7c:	bb30      	cbnz	r0, 800dacc <_printf_float+0xc4>
 800da7e:	2200      	movs	r2, #0
 800da80:	2300      	movs	r3, #0
 800da82:	4640      	mov	r0, r8
 800da84:	4649      	mov	r1, r9
 800da86:	f7f3 f831 	bl	8000aec <__aeabi_dcmplt>
 800da8a:	b110      	cbz	r0, 800da92 <_printf_float+0x8a>
 800da8c:	232d      	movs	r3, #45	; 0x2d
 800da8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da92:	4a9c      	ldr	r2, [pc, #624]	; (800dd04 <_printf_float+0x2fc>)
 800da94:	4b9c      	ldr	r3, [pc, #624]	; (800dd08 <_printf_float+0x300>)
 800da96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800da9a:	bf8c      	ite	hi
 800da9c:	4690      	movhi	r8, r2
 800da9e:	4698      	movls	r8, r3
 800daa0:	2303      	movs	r3, #3
 800daa2:	f02b 0204 	bic.w	r2, fp, #4
 800daa6:	6123      	str	r3, [r4, #16]
 800daa8:	6022      	str	r2, [r4, #0]
 800daaa:	f04f 0900 	mov.w	r9, #0
 800daae:	9700      	str	r7, [sp, #0]
 800dab0:	4633      	mov	r3, r6
 800dab2:	aa0b      	add	r2, sp, #44	; 0x2c
 800dab4:	4621      	mov	r1, r4
 800dab6:	4628      	mov	r0, r5
 800dab8:	f000 f9e6 	bl	800de88 <_printf_common>
 800dabc:	3001      	adds	r0, #1
 800dabe:	f040 808d 	bne.w	800dbdc <_printf_float+0x1d4>
 800dac2:	f04f 30ff 	mov.w	r0, #4294967295
 800dac6:	b00d      	add	sp, #52	; 0x34
 800dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dacc:	4642      	mov	r2, r8
 800dace:	464b      	mov	r3, r9
 800dad0:	4640      	mov	r0, r8
 800dad2:	4649      	mov	r1, r9
 800dad4:	f7f3 f832 	bl	8000b3c <__aeabi_dcmpun>
 800dad8:	b110      	cbz	r0, 800dae0 <_printf_float+0xd8>
 800dada:	4a8c      	ldr	r2, [pc, #560]	; (800dd0c <_printf_float+0x304>)
 800dadc:	4b8c      	ldr	r3, [pc, #560]	; (800dd10 <_printf_float+0x308>)
 800dade:	e7da      	b.n	800da96 <_printf_float+0x8e>
 800dae0:	6861      	ldr	r1, [r4, #4]
 800dae2:	1c4b      	adds	r3, r1, #1
 800dae4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dae8:	a80a      	add	r0, sp, #40	; 0x28
 800daea:	d13e      	bne.n	800db6a <_printf_float+0x162>
 800daec:	2306      	movs	r3, #6
 800daee:	6063      	str	r3, [r4, #4]
 800daf0:	2300      	movs	r3, #0
 800daf2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800daf6:	ab09      	add	r3, sp, #36	; 0x24
 800daf8:	9300      	str	r3, [sp, #0]
 800dafa:	ec49 8b10 	vmov	d0, r8, r9
 800dafe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db02:	6022      	str	r2, [r4, #0]
 800db04:	f8cd a004 	str.w	sl, [sp, #4]
 800db08:	6861      	ldr	r1, [r4, #4]
 800db0a:	4628      	mov	r0, r5
 800db0c:	f7ff fee8 	bl	800d8e0 <__cvt>
 800db10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800db14:	2b47      	cmp	r3, #71	; 0x47
 800db16:	4680      	mov	r8, r0
 800db18:	d109      	bne.n	800db2e <_printf_float+0x126>
 800db1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db1c:	1cd8      	adds	r0, r3, #3
 800db1e:	db02      	blt.n	800db26 <_printf_float+0x11e>
 800db20:	6862      	ldr	r2, [r4, #4]
 800db22:	4293      	cmp	r3, r2
 800db24:	dd47      	ble.n	800dbb6 <_printf_float+0x1ae>
 800db26:	f1aa 0a02 	sub.w	sl, sl, #2
 800db2a:	fa5f fa8a 	uxtb.w	sl, sl
 800db2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800db32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db34:	d824      	bhi.n	800db80 <_printf_float+0x178>
 800db36:	3901      	subs	r1, #1
 800db38:	4652      	mov	r2, sl
 800db3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db3e:	9109      	str	r1, [sp, #36]	; 0x24
 800db40:	f7ff ff2f 	bl	800d9a2 <__exponent>
 800db44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db46:	1813      	adds	r3, r2, r0
 800db48:	2a01      	cmp	r2, #1
 800db4a:	4681      	mov	r9, r0
 800db4c:	6123      	str	r3, [r4, #16]
 800db4e:	dc02      	bgt.n	800db56 <_printf_float+0x14e>
 800db50:	6822      	ldr	r2, [r4, #0]
 800db52:	07d1      	lsls	r1, r2, #31
 800db54:	d501      	bpl.n	800db5a <_printf_float+0x152>
 800db56:	3301      	adds	r3, #1
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0a5      	beq.n	800daae <_printf_float+0xa6>
 800db62:	232d      	movs	r3, #45	; 0x2d
 800db64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db68:	e7a1      	b.n	800daae <_printf_float+0xa6>
 800db6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800db6e:	f000 8177 	beq.w	800de60 <_printf_float+0x458>
 800db72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800db76:	d1bb      	bne.n	800daf0 <_printf_float+0xe8>
 800db78:	2900      	cmp	r1, #0
 800db7a:	d1b9      	bne.n	800daf0 <_printf_float+0xe8>
 800db7c:	2301      	movs	r3, #1
 800db7e:	e7b6      	b.n	800daee <_printf_float+0xe6>
 800db80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800db84:	d119      	bne.n	800dbba <_printf_float+0x1b2>
 800db86:	2900      	cmp	r1, #0
 800db88:	6863      	ldr	r3, [r4, #4]
 800db8a:	dd0c      	ble.n	800dba6 <_printf_float+0x19e>
 800db8c:	6121      	str	r1, [r4, #16]
 800db8e:	b913      	cbnz	r3, 800db96 <_printf_float+0x18e>
 800db90:	6822      	ldr	r2, [r4, #0]
 800db92:	07d2      	lsls	r2, r2, #31
 800db94:	d502      	bpl.n	800db9c <_printf_float+0x194>
 800db96:	3301      	adds	r3, #1
 800db98:	440b      	add	r3, r1
 800db9a:	6123      	str	r3, [r4, #16]
 800db9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9e:	65a3      	str	r3, [r4, #88]	; 0x58
 800dba0:	f04f 0900 	mov.w	r9, #0
 800dba4:	e7d9      	b.n	800db5a <_printf_float+0x152>
 800dba6:	b913      	cbnz	r3, 800dbae <_printf_float+0x1a6>
 800dba8:	6822      	ldr	r2, [r4, #0]
 800dbaa:	07d0      	lsls	r0, r2, #31
 800dbac:	d501      	bpl.n	800dbb2 <_printf_float+0x1aa>
 800dbae:	3302      	adds	r3, #2
 800dbb0:	e7f3      	b.n	800db9a <_printf_float+0x192>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e7f1      	b.n	800db9a <_printf_float+0x192>
 800dbb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dbba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	db05      	blt.n	800dbce <_printf_float+0x1c6>
 800dbc2:	6822      	ldr	r2, [r4, #0]
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	07d1      	lsls	r1, r2, #31
 800dbc8:	d5e8      	bpl.n	800db9c <_printf_float+0x194>
 800dbca:	3301      	adds	r3, #1
 800dbcc:	e7e5      	b.n	800db9a <_printf_float+0x192>
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	bfd4      	ite	le
 800dbd2:	f1c3 0302 	rsble	r3, r3, #2
 800dbd6:	2301      	movgt	r3, #1
 800dbd8:	4413      	add	r3, r2
 800dbda:	e7de      	b.n	800db9a <_printf_float+0x192>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	055a      	lsls	r2, r3, #21
 800dbe0:	d407      	bmi.n	800dbf2 <_printf_float+0x1ea>
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	4642      	mov	r2, r8
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4628      	mov	r0, r5
 800dbea:	47b8      	blx	r7
 800dbec:	3001      	adds	r0, #1
 800dbee:	d12b      	bne.n	800dc48 <_printf_float+0x240>
 800dbf0:	e767      	b.n	800dac2 <_printf_float+0xba>
 800dbf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dbf6:	f240 80dc 	bls.w	800ddb2 <_printf_float+0x3aa>
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc02:	f7f2 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d033      	beq.n	800dc72 <_printf_float+0x26a>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4a41      	ldr	r2, [pc, #260]	; (800dd14 <_printf_float+0x30c>)
 800dc0e:	4631      	mov	r1, r6
 800dc10:	4628      	mov	r0, r5
 800dc12:	47b8      	blx	r7
 800dc14:	3001      	adds	r0, #1
 800dc16:	f43f af54 	beq.w	800dac2 <_printf_float+0xba>
 800dc1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	db02      	blt.n	800dc28 <_printf_float+0x220>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	07d8      	lsls	r0, r3, #31
 800dc26:	d50f      	bpl.n	800dc48 <_printf_float+0x240>
 800dc28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f43f af45 	beq.w	800dac2 <_printf_float+0xba>
 800dc38:	f04f 0800 	mov.w	r8, #0
 800dc3c:	f104 091a 	add.w	r9, r4, #26
 800dc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc42:	3b01      	subs	r3, #1
 800dc44:	4543      	cmp	r3, r8
 800dc46:	dc09      	bgt.n	800dc5c <_printf_float+0x254>
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	079b      	lsls	r3, r3, #30
 800dc4c:	f100 8103 	bmi.w	800de56 <_printf_float+0x44e>
 800dc50:	68e0      	ldr	r0, [r4, #12]
 800dc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc54:	4298      	cmp	r0, r3
 800dc56:	bfb8      	it	lt
 800dc58:	4618      	movlt	r0, r3
 800dc5a:	e734      	b.n	800dac6 <_printf_float+0xbe>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	464a      	mov	r2, r9
 800dc60:	4631      	mov	r1, r6
 800dc62:	4628      	mov	r0, r5
 800dc64:	47b8      	blx	r7
 800dc66:	3001      	adds	r0, #1
 800dc68:	f43f af2b 	beq.w	800dac2 <_printf_float+0xba>
 800dc6c:	f108 0801 	add.w	r8, r8, #1
 800dc70:	e7e6      	b.n	800dc40 <_printf_float+0x238>
 800dc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dc2b      	bgt.n	800dcd0 <_printf_float+0x2c8>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4a26      	ldr	r2, [pc, #152]	; (800dd14 <_printf_float+0x30c>)
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4628      	mov	r0, r5
 800dc80:	47b8      	blx	r7
 800dc82:	3001      	adds	r0, #1
 800dc84:	f43f af1d 	beq.w	800dac2 <_printf_float+0xba>
 800dc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8a:	b923      	cbnz	r3, 800dc96 <_printf_float+0x28e>
 800dc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc8e:	b913      	cbnz	r3, 800dc96 <_printf_float+0x28e>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	07d9      	lsls	r1, r3, #31
 800dc94:	d5d8      	bpl.n	800dc48 <_printf_float+0x240>
 800dc96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	47b8      	blx	r7
 800dca0:	3001      	adds	r0, #1
 800dca2:	f43f af0e 	beq.w	800dac2 <_printf_float+0xba>
 800dca6:	f04f 0900 	mov.w	r9, #0
 800dcaa:	f104 0a1a 	add.w	sl, r4, #26
 800dcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb0:	425b      	negs	r3, r3
 800dcb2:	454b      	cmp	r3, r9
 800dcb4:	dc01      	bgt.n	800dcba <_printf_float+0x2b2>
 800dcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb8:	e794      	b.n	800dbe4 <_printf_float+0x1dc>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4652      	mov	r2, sl
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	47b8      	blx	r7
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	f43f aefc 	beq.w	800dac2 <_printf_float+0xba>
 800dcca:	f109 0901 	add.w	r9, r9, #1
 800dcce:	e7ee      	b.n	800dcae <_printf_float+0x2a6>
 800dcd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	bfa8      	it	ge
 800dcd8:	461a      	movge	r2, r3
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	4691      	mov	r9, r2
 800dcde:	dd07      	ble.n	800dcf0 <_printf_float+0x2e8>
 800dce0:	4613      	mov	r3, r2
 800dce2:	4631      	mov	r1, r6
 800dce4:	4642      	mov	r2, r8
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	f43f aee9 	beq.w	800dac2 <_printf_float+0xba>
 800dcf0:	f104 031a 	add.w	r3, r4, #26
 800dcf4:	f04f 0b00 	mov.w	fp, #0
 800dcf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcfc:	9306      	str	r3, [sp, #24]
 800dcfe:	e015      	b.n	800dd2c <_printf_float+0x324>
 800dd00:	7fefffff 	.word	0x7fefffff
 800dd04:	080133d0 	.word	0x080133d0
 800dd08:	080133cc 	.word	0x080133cc
 800dd0c:	080133d8 	.word	0x080133d8
 800dd10:	080133d4 	.word	0x080133d4
 800dd14:	080133dc 	.word	0x080133dc
 800dd18:	2301      	movs	r3, #1
 800dd1a:	9a06      	ldr	r2, [sp, #24]
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	47b8      	blx	r7
 800dd22:	3001      	adds	r0, #1
 800dd24:	f43f aecd 	beq.w	800dac2 <_printf_float+0xba>
 800dd28:	f10b 0b01 	add.w	fp, fp, #1
 800dd2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dd30:	ebaa 0309 	sub.w	r3, sl, r9
 800dd34:	455b      	cmp	r3, fp
 800dd36:	dcef      	bgt.n	800dd18 <_printf_float+0x310>
 800dd38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	44d0      	add	r8, sl
 800dd40:	db15      	blt.n	800dd6e <_printf_float+0x366>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	07da      	lsls	r2, r3, #31
 800dd46:	d412      	bmi.n	800dd6e <_printf_float+0x366>
 800dd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd4c:	eba3 020a 	sub.w	r2, r3, sl
 800dd50:	eba3 0a01 	sub.w	sl, r3, r1
 800dd54:	4592      	cmp	sl, r2
 800dd56:	bfa8      	it	ge
 800dd58:	4692      	movge	sl, r2
 800dd5a:	f1ba 0f00 	cmp.w	sl, #0
 800dd5e:	dc0e      	bgt.n	800dd7e <_printf_float+0x376>
 800dd60:	f04f 0800 	mov.w	r8, #0
 800dd64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd68:	f104 091a 	add.w	r9, r4, #26
 800dd6c:	e019      	b.n	800dda2 <_printf_float+0x39a>
 800dd6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd72:	4631      	mov	r1, r6
 800dd74:	4628      	mov	r0, r5
 800dd76:	47b8      	blx	r7
 800dd78:	3001      	adds	r0, #1
 800dd7a:	d1e5      	bne.n	800dd48 <_printf_float+0x340>
 800dd7c:	e6a1      	b.n	800dac2 <_printf_float+0xba>
 800dd7e:	4653      	mov	r3, sl
 800dd80:	4642      	mov	r2, r8
 800dd82:	4631      	mov	r1, r6
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b8      	blx	r7
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d1e9      	bne.n	800dd60 <_printf_float+0x358>
 800dd8c:	e699      	b.n	800dac2 <_printf_float+0xba>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	464a      	mov	r2, r9
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f43f ae92 	beq.w	800dac2 <_printf_float+0xba>
 800dd9e:	f108 0801 	add.w	r8, r8, #1
 800dda2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dda6:	1a9b      	subs	r3, r3, r2
 800dda8:	eba3 030a 	sub.w	r3, r3, sl
 800ddac:	4543      	cmp	r3, r8
 800ddae:	dcee      	bgt.n	800dd8e <_printf_float+0x386>
 800ddb0:	e74a      	b.n	800dc48 <_printf_float+0x240>
 800ddb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddb4:	2a01      	cmp	r2, #1
 800ddb6:	dc01      	bgt.n	800ddbc <_printf_float+0x3b4>
 800ddb8:	07db      	lsls	r3, r3, #31
 800ddba:	d53a      	bpl.n	800de32 <_printf_float+0x42a>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	4642      	mov	r2, r8
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	47b8      	blx	r7
 800ddc6:	3001      	adds	r0, #1
 800ddc8:	f43f ae7b 	beq.w	800dac2 <_printf_float+0xba>
 800ddcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	47b8      	blx	r7
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	f108 0801 	add.w	r8, r8, #1
 800dddc:	f43f ae71 	beq.w	800dac2 <_printf_float+0xba>
 800dde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde2:	2200      	movs	r2, #0
 800dde4:	f103 3aff 	add.w	sl, r3, #4294967295
 800dde8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddec:	2300      	movs	r3, #0
 800ddee:	f7f2 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddf2:	b9c8      	cbnz	r0, 800de28 <_printf_float+0x420>
 800ddf4:	4653      	mov	r3, sl
 800ddf6:	4642      	mov	r2, r8
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	47b8      	blx	r7
 800ddfe:	3001      	adds	r0, #1
 800de00:	d10e      	bne.n	800de20 <_printf_float+0x418>
 800de02:	e65e      	b.n	800dac2 <_printf_float+0xba>
 800de04:	2301      	movs	r3, #1
 800de06:	4652      	mov	r2, sl
 800de08:	4631      	mov	r1, r6
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b8      	blx	r7
 800de0e:	3001      	adds	r0, #1
 800de10:	f43f ae57 	beq.w	800dac2 <_printf_float+0xba>
 800de14:	f108 0801 	add.w	r8, r8, #1
 800de18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4543      	cmp	r3, r8
 800de1e:	dcf1      	bgt.n	800de04 <_printf_float+0x3fc>
 800de20:	464b      	mov	r3, r9
 800de22:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de26:	e6de      	b.n	800dbe6 <_printf_float+0x1de>
 800de28:	f04f 0800 	mov.w	r8, #0
 800de2c:	f104 0a1a 	add.w	sl, r4, #26
 800de30:	e7f2      	b.n	800de18 <_printf_float+0x410>
 800de32:	2301      	movs	r3, #1
 800de34:	e7df      	b.n	800ddf6 <_printf_float+0x3ee>
 800de36:	2301      	movs	r3, #1
 800de38:	464a      	mov	r2, r9
 800de3a:	4631      	mov	r1, r6
 800de3c:	4628      	mov	r0, r5
 800de3e:	47b8      	blx	r7
 800de40:	3001      	adds	r0, #1
 800de42:	f43f ae3e 	beq.w	800dac2 <_printf_float+0xba>
 800de46:	f108 0801 	add.w	r8, r8, #1
 800de4a:	68e3      	ldr	r3, [r4, #12]
 800de4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de4e:	1a9b      	subs	r3, r3, r2
 800de50:	4543      	cmp	r3, r8
 800de52:	dcf0      	bgt.n	800de36 <_printf_float+0x42e>
 800de54:	e6fc      	b.n	800dc50 <_printf_float+0x248>
 800de56:	f04f 0800 	mov.w	r8, #0
 800de5a:	f104 0919 	add.w	r9, r4, #25
 800de5e:	e7f4      	b.n	800de4a <_printf_float+0x442>
 800de60:	2900      	cmp	r1, #0
 800de62:	f43f ae8b 	beq.w	800db7c <_printf_float+0x174>
 800de66:	2300      	movs	r3, #0
 800de68:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800de6c:	ab09      	add	r3, sp, #36	; 0x24
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	ec49 8b10 	vmov	d0, r8, r9
 800de74:	6022      	str	r2, [r4, #0]
 800de76:	f8cd a004 	str.w	sl, [sp, #4]
 800de7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de7e:	4628      	mov	r0, r5
 800de80:	f7ff fd2e 	bl	800d8e0 <__cvt>
 800de84:	4680      	mov	r8, r0
 800de86:	e648      	b.n	800db1a <_printf_float+0x112>

0800de88 <_printf_common>:
 800de88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de8c:	4691      	mov	r9, r2
 800de8e:	461f      	mov	r7, r3
 800de90:	688a      	ldr	r2, [r1, #8]
 800de92:	690b      	ldr	r3, [r1, #16]
 800de94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de98:	4293      	cmp	r3, r2
 800de9a:	bfb8      	it	lt
 800de9c:	4613      	movlt	r3, r2
 800de9e:	f8c9 3000 	str.w	r3, [r9]
 800dea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dea6:	4606      	mov	r6, r0
 800dea8:	460c      	mov	r4, r1
 800deaa:	b112      	cbz	r2, 800deb2 <_printf_common+0x2a>
 800deac:	3301      	adds	r3, #1
 800deae:	f8c9 3000 	str.w	r3, [r9]
 800deb2:	6823      	ldr	r3, [r4, #0]
 800deb4:	0699      	lsls	r1, r3, #26
 800deb6:	bf42      	ittt	mi
 800deb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800debc:	3302      	addmi	r3, #2
 800debe:	f8c9 3000 	strmi.w	r3, [r9]
 800dec2:	6825      	ldr	r5, [r4, #0]
 800dec4:	f015 0506 	ands.w	r5, r5, #6
 800dec8:	d107      	bne.n	800deda <_printf_common+0x52>
 800deca:	f104 0a19 	add.w	sl, r4, #25
 800dece:	68e3      	ldr	r3, [r4, #12]
 800ded0:	f8d9 2000 	ldr.w	r2, [r9]
 800ded4:	1a9b      	subs	r3, r3, r2
 800ded6:	42ab      	cmp	r3, r5
 800ded8:	dc28      	bgt.n	800df2c <_printf_common+0xa4>
 800deda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	3300      	adds	r3, #0
 800dee2:	bf18      	it	ne
 800dee4:	2301      	movne	r3, #1
 800dee6:	0692      	lsls	r2, r2, #26
 800dee8:	d42d      	bmi.n	800df46 <_printf_common+0xbe>
 800deea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800deee:	4639      	mov	r1, r7
 800def0:	4630      	mov	r0, r6
 800def2:	47c0      	blx	r8
 800def4:	3001      	adds	r0, #1
 800def6:	d020      	beq.n	800df3a <_printf_common+0xb2>
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	68e5      	ldr	r5, [r4, #12]
 800defc:	f8d9 2000 	ldr.w	r2, [r9]
 800df00:	f003 0306 	and.w	r3, r3, #6
 800df04:	2b04      	cmp	r3, #4
 800df06:	bf08      	it	eq
 800df08:	1aad      	subeq	r5, r5, r2
 800df0a:	68a3      	ldr	r3, [r4, #8]
 800df0c:	6922      	ldr	r2, [r4, #16]
 800df0e:	bf0c      	ite	eq
 800df10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df14:	2500      	movne	r5, #0
 800df16:	4293      	cmp	r3, r2
 800df18:	bfc4      	itt	gt
 800df1a:	1a9b      	subgt	r3, r3, r2
 800df1c:	18ed      	addgt	r5, r5, r3
 800df1e:	f04f 0900 	mov.w	r9, #0
 800df22:	341a      	adds	r4, #26
 800df24:	454d      	cmp	r5, r9
 800df26:	d11a      	bne.n	800df5e <_printf_common+0xd6>
 800df28:	2000      	movs	r0, #0
 800df2a:	e008      	b.n	800df3e <_printf_common+0xb6>
 800df2c:	2301      	movs	r3, #1
 800df2e:	4652      	mov	r2, sl
 800df30:	4639      	mov	r1, r7
 800df32:	4630      	mov	r0, r6
 800df34:	47c0      	blx	r8
 800df36:	3001      	adds	r0, #1
 800df38:	d103      	bne.n	800df42 <_printf_common+0xba>
 800df3a:	f04f 30ff 	mov.w	r0, #4294967295
 800df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df42:	3501      	adds	r5, #1
 800df44:	e7c3      	b.n	800dece <_printf_common+0x46>
 800df46:	18e1      	adds	r1, r4, r3
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	2030      	movs	r0, #48	; 0x30
 800df4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df50:	4422      	add	r2, r4
 800df52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df5a:	3302      	adds	r3, #2
 800df5c:	e7c5      	b.n	800deea <_printf_common+0x62>
 800df5e:	2301      	movs	r3, #1
 800df60:	4622      	mov	r2, r4
 800df62:	4639      	mov	r1, r7
 800df64:	4630      	mov	r0, r6
 800df66:	47c0      	blx	r8
 800df68:	3001      	adds	r0, #1
 800df6a:	d0e6      	beq.n	800df3a <_printf_common+0xb2>
 800df6c:	f109 0901 	add.w	r9, r9, #1
 800df70:	e7d8      	b.n	800df24 <_printf_common+0x9c>
	...

0800df74 <_printf_i>:
 800df74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df7c:	460c      	mov	r4, r1
 800df7e:	7e09      	ldrb	r1, [r1, #24]
 800df80:	b085      	sub	sp, #20
 800df82:	296e      	cmp	r1, #110	; 0x6e
 800df84:	4617      	mov	r7, r2
 800df86:	4606      	mov	r6, r0
 800df88:	4698      	mov	r8, r3
 800df8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df8c:	f000 80b3 	beq.w	800e0f6 <_printf_i+0x182>
 800df90:	d822      	bhi.n	800dfd8 <_printf_i+0x64>
 800df92:	2963      	cmp	r1, #99	; 0x63
 800df94:	d036      	beq.n	800e004 <_printf_i+0x90>
 800df96:	d80a      	bhi.n	800dfae <_printf_i+0x3a>
 800df98:	2900      	cmp	r1, #0
 800df9a:	f000 80b9 	beq.w	800e110 <_printf_i+0x19c>
 800df9e:	2958      	cmp	r1, #88	; 0x58
 800dfa0:	f000 8083 	beq.w	800e0aa <_printf_i+0x136>
 800dfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dfac:	e032      	b.n	800e014 <_printf_i+0xa0>
 800dfae:	2964      	cmp	r1, #100	; 0x64
 800dfb0:	d001      	beq.n	800dfb6 <_printf_i+0x42>
 800dfb2:	2969      	cmp	r1, #105	; 0x69
 800dfb4:	d1f6      	bne.n	800dfa4 <_printf_i+0x30>
 800dfb6:	6820      	ldr	r0, [r4, #0]
 800dfb8:	6813      	ldr	r3, [r2, #0]
 800dfba:	0605      	lsls	r5, r0, #24
 800dfbc:	f103 0104 	add.w	r1, r3, #4
 800dfc0:	d52a      	bpl.n	800e018 <_printf_i+0xa4>
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6011      	str	r1, [r2, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	da03      	bge.n	800dfd2 <_printf_i+0x5e>
 800dfca:	222d      	movs	r2, #45	; 0x2d
 800dfcc:	425b      	negs	r3, r3
 800dfce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfd2:	486f      	ldr	r0, [pc, #444]	; (800e190 <_printf_i+0x21c>)
 800dfd4:	220a      	movs	r2, #10
 800dfd6:	e039      	b.n	800e04c <_printf_i+0xd8>
 800dfd8:	2973      	cmp	r1, #115	; 0x73
 800dfda:	f000 809d 	beq.w	800e118 <_printf_i+0x1a4>
 800dfde:	d808      	bhi.n	800dff2 <_printf_i+0x7e>
 800dfe0:	296f      	cmp	r1, #111	; 0x6f
 800dfe2:	d020      	beq.n	800e026 <_printf_i+0xb2>
 800dfe4:	2970      	cmp	r1, #112	; 0x70
 800dfe6:	d1dd      	bne.n	800dfa4 <_printf_i+0x30>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	f043 0320 	orr.w	r3, r3, #32
 800dfee:	6023      	str	r3, [r4, #0]
 800dff0:	e003      	b.n	800dffa <_printf_i+0x86>
 800dff2:	2975      	cmp	r1, #117	; 0x75
 800dff4:	d017      	beq.n	800e026 <_printf_i+0xb2>
 800dff6:	2978      	cmp	r1, #120	; 0x78
 800dff8:	d1d4      	bne.n	800dfa4 <_printf_i+0x30>
 800dffa:	2378      	movs	r3, #120	; 0x78
 800dffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e000:	4864      	ldr	r0, [pc, #400]	; (800e194 <_printf_i+0x220>)
 800e002:	e055      	b.n	800e0b0 <_printf_i+0x13c>
 800e004:	6813      	ldr	r3, [r2, #0]
 800e006:	1d19      	adds	r1, r3, #4
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6011      	str	r1, [r2, #0]
 800e00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e014:	2301      	movs	r3, #1
 800e016:	e08c      	b.n	800e132 <_printf_i+0x1be>
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6011      	str	r1, [r2, #0]
 800e01c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e020:	bf18      	it	ne
 800e022:	b21b      	sxthne	r3, r3
 800e024:	e7cf      	b.n	800dfc6 <_printf_i+0x52>
 800e026:	6813      	ldr	r3, [r2, #0]
 800e028:	6825      	ldr	r5, [r4, #0]
 800e02a:	1d18      	adds	r0, r3, #4
 800e02c:	6010      	str	r0, [r2, #0]
 800e02e:	0628      	lsls	r0, r5, #24
 800e030:	d501      	bpl.n	800e036 <_printf_i+0xc2>
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	e002      	b.n	800e03c <_printf_i+0xc8>
 800e036:	0668      	lsls	r0, r5, #25
 800e038:	d5fb      	bpl.n	800e032 <_printf_i+0xbe>
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	4854      	ldr	r0, [pc, #336]	; (800e190 <_printf_i+0x21c>)
 800e03e:	296f      	cmp	r1, #111	; 0x6f
 800e040:	bf14      	ite	ne
 800e042:	220a      	movne	r2, #10
 800e044:	2208      	moveq	r2, #8
 800e046:	2100      	movs	r1, #0
 800e048:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e04c:	6865      	ldr	r5, [r4, #4]
 800e04e:	60a5      	str	r5, [r4, #8]
 800e050:	2d00      	cmp	r5, #0
 800e052:	f2c0 8095 	blt.w	800e180 <_printf_i+0x20c>
 800e056:	6821      	ldr	r1, [r4, #0]
 800e058:	f021 0104 	bic.w	r1, r1, #4
 800e05c:	6021      	str	r1, [r4, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d13d      	bne.n	800e0de <_printf_i+0x16a>
 800e062:	2d00      	cmp	r5, #0
 800e064:	f040 808e 	bne.w	800e184 <_printf_i+0x210>
 800e068:	4665      	mov	r5, ip
 800e06a:	2a08      	cmp	r2, #8
 800e06c:	d10b      	bne.n	800e086 <_printf_i+0x112>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	07db      	lsls	r3, r3, #31
 800e072:	d508      	bpl.n	800e086 <_printf_i+0x112>
 800e074:	6923      	ldr	r3, [r4, #16]
 800e076:	6862      	ldr	r2, [r4, #4]
 800e078:	429a      	cmp	r2, r3
 800e07a:	bfde      	ittt	le
 800e07c:	2330      	movle	r3, #48	; 0x30
 800e07e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e082:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e086:	ebac 0305 	sub.w	r3, ip, r5
 800e08a:	6123      	str	r3, [r4, #16]
 800e08c:	f8cd 8000 	str.w	r8, [sp]
 800e090:	463b      	mov	r3, r7
 800e092:	aa03      	add	r2, sp, #12
 800e094:	4621      	mov	r1, r4
 800e096:	4630      	mov	r0, r6
 800e098:	f7ff fef6 	bl	800de88 <_printf_common>
 800e09c:	3001      	adds	r0, #1
 800e09e:	d14d      	bne.n	800e13c <_printf_i+0x1c8>
 800e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a4:	b005      	add	sp, #20
 800e0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0aa:	4839      	ldr	r0, [pc, #228]	; (800e190 <_printf_i+0x21c>)
 800e0ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e0b0:	6813      	ldr	r3, [r2, #0]
 800e0b2:	6821      	ldr	r1, [r4, #0]
 800e0b4:	1d1d      	adds	r5, r3, #4
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6015      	str	r5, [r2, #0]
 800e0ba:	060a      	lsls	r2, r1, #24
 800e0bc:	d50b      	bpl.n	800e0d6 <_printf_i+0x162>
 800e0be:	07ca      	lsls	r2, r1, #31
 800e0c0:	bf44      	itt	mi
 800e0c2:	f041 0120 	orrmi.w	r1, r1, #32
 800e0c6:	6021      	strmi	r1, [r4, #0]
 800e0c8:	b91b      	cbnz	r3, 800e0d2 <_printf_i+0x15e>
 800e0ca:	6822      	ldr	r2, [r4, #0]
 800e0cc:	f022 0220 	bic.w	r2, r2, #32
 800e0d0:	6022      	str	r2, [r4, #0]
 800e0d2:	2210      	movs	r2, #16
 800e0d4:	e7b7      	b.n	800e046 <_printf_i+0xd2>
 800e0d6:	064d      	lsls	r5, r1, #25
 800e0d8:	bf48      	it	mi
 800e0da:	b29b      	uxthmi	r3, r3
 800e0dc:	e7ef      	b.n	800e0be <_printf_i+0x14a>
 800e0de:	4665      	mov	r5, ip
 800e0e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0e4:	fb02 3311 	mls	r3, r2, r1, r3
 800e0e8:	5cc3      	ldrb	r3, [r0, r3]
 800e0ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	d1f5      	bne.n	800e0e0 <_printf_i+0x16c>
 800e0f4:	e7b9      	b.n	800e06a <_printf_i+0xf6>
 800e0f6:	6813      	ldr	r3, [r2, #0]
 800e0f8:	6825      	ldr	r5, [r4, #0]
 800e0fa:	6961      	ldr	r1, [r4, #20]
 800e0fc:	1d18      	adds	r0, r3, #4
 800e0fe:	6010      	str	r0, [r2, #0]
 800e100:	0628      	lsls	r0, r5, #24
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	d501      	bpl.n	800e10a <_printf_i+0x196>
 800e106:	6019      	str	r1, [r3, #0]
 800e108:	e002      	b.n	800e110 <_printf_i+0x19c>
 800e10a:	066a      	lsls	r2, r5, #25
 800e10c:	d5fb      	bpl.n	800e106 <_printf_i+0x192>
 800e10e:	8019      	strh	r1, [r3, #0]
 800e110:	2300      	movs	r3, #0
 800e112:	6123      	str	r3, [r4, #16]
 800e114:	4665      	mov	r5, ip
 800e116:	e7b9      	b.n	800e08c <_printf_i+0x118>
 800e118:	6813      	ldr	r3, [r2, #0]
 800e11a:	1d19      	adds	r1, r3, #4
 800e11c:	6011      	str	r1, [r2, #0]
 800e11e:	681d      	ldr	r5, [r3, #0]
 800e120:	6862      	ldr	r2, [r4, #4]
 800e122:	2100      	movs	r1, #0
 800e124:	4628      	mov	r0, r5
 800e126:	f7f2 f863 	bl	80001f0 <memchr>
 800e12a:	b108      	cbz	r0, 800e130 <_printf_i+0x1bc>
 800e12c:	1b40      	subs	r0, r0, r5
 800e12e:	6060      	str	r0, [r4, #4]
 800e130:	6863      	ldr	r3, [r4, #4]
 800e132:	6123      	str	r3, [r4, #16]
 800e134:	2300      	movs	r3, #0
 800e136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e13a:	e7a7      	b.n	800e08c <_printf_i+0x118>
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	462a      	mov	r2, r5
 800e140:	4639      	mov	r1, r7
 800e142:	4630      	mov	r0, r6
 800e144:	47c0      	blx	r8
 800e146:	3001      	adds	r0, #1
 800e148:	d0aa      	beq.n	800e0a0 <_printf_i+0x12c>
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	079b      	lsls	r3, r3, #30
 800e14e:	d413      	bmi.n	800e178 <_printf_i+0x204>
 800e150:	68e0      	ldr	r0, [r4, #12]
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	4298      	cmp	r0, r3
 800e156:	bfb8      	it	lt
 800e158:	4618      	movlt	r0, r3
 800e15a:	e7a3      	b.n	800e0a4 <_printf_i+0x130>
 800e15c:	2301      	movs	r3, #1
 800e15e:	464a      	mov	r2, r9
 800e160:	4639      	mov	r1, r7
 800e162:	4630      	mov	r0, r6
 800e164:	47c0      	blx	r8
 800e166:	3001      	adds	r0, #1
 800e168:	d09a      	beq.n	800e0a0 <_printf_i+0x12c>
 800e16a:	3501      	adds	r5, #1
 800e16c:	68e3      	ldr	r3, [r4, #12]
 800e16e:	9a03      	ldr	r2, [sp, #12]
 800e170:	1a9b      	subs	r3, r3, r2
 800e172:	42ab      	cmp	r3, r5
 800e174:	dcf2      	bgt.n	800e15c <_printf_i+0x1e8>
 800e176:	e7eb      	b.n	800e150 <_printf_i+0x1dc>
 800e178:	2500      	movs	r5, #0
 800e17a:	f104 0919 	add.w	r9, r4, #25
 800e17e:	e7f5      	b.n	800e16c <_printf_i+0x1f8>
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1ac      	bne.n	800e0de <_printf_i+0x16a>
 800e184:	7803      	ldrb	r3, [r0, #0]
 800e186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e18a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e18e:	e76c      	b.n	800e06a <_printf_i+0xf6>
 800e190:	080133de 	.word	0x080133de
 800e194:	080133ef 	.word	0x080133ef

0800e198 <_scanf_float>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	469a      	mov	sl, r3
 800e19e:	688b      	ldr	r3, [r1, #8]
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	1e5a      	subs	r2, r3, #1
 800e1a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e1a8:	b087      	sub	sp, #28
 800e1aa:	bf83      	ittte	hi
 800e1ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e1b0:	189b      	addhi	r3, r3, r2
 800e1b2:	9301      	strhi	r3, [sp, #4]
 800e1b4:	2300      	movls	r3, #0
 800e1b6:	bf86      	itte	hi
 800e1b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e1bc:	608b      	strhi	r3, [r1, #8]
 800e1be:	9301      	strls	r3, [sp, #4]
 800e1c0:	680b      	ldr	r3, [r1, #0]
 800e1c2:	4688      	mov	r8, r1
 800e1c4:	f04f 0b00 	mov.w	fp, #0
 800e1c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e1cc:	f848 3b1c 	str.w	r3, [r8], #28
 800e1d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e1d4:	4607      	mov	r7, r0
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	4645      	mov	r5, r8
 800e1da:	465a      	mov	r2, fp
 800e1dc:	46d9      	mov	r9, fp
 800e1de:	f8cd b008 	str.w	fp, [sp, #8]
 800e1e2:	68a1      	ldr	r1, [r4, #8]
 800e1e4:	b181      	cbz	r1, 800e208 <_scanf_float+0x70>
 800e1e6:	6833      	ldr	r3, [r6, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b49      	cmp	r3, #73	; 0x49
 800e1ec:	d071      	beq.n	800e2d2 <_scanf_float+0x13a>
 800e1ee:	d84d      	bhi.n	800e28c <_scanf_float+0xf4>
 800e1f0:	2b39      	cmp	r3, #57	; 0x39
 800e1f2:	d840      	bhi.n	800e276 <_scanf_float+0xde>
 800e1f4:	2b31      	cmp	r3, #49	; 0x31
 800e1f6:	f080 8088 	bcs.w	800e30a <_scanf_float+0x172>
 800e1fa:	2b2d      	cmp	r3, #45	; 0x2d
 800e1fc:	f000 8090 	beq.w	800e320 <_scanf_float+0x188>
 800e200:	d815      	bhi.n	800e22e <_scanf_float+0x96>
 800e202:	2b2b      	cmp	r3, #43	; 0x2b
 800e204:	f000 808c 	beq.w	800e320 <_scanf_float+0x188>
 800e208:	f1b9 0f00 	cmp.w	r9, #0
 800e20c:	d003      	beq.n	800e216 <_scanf_float+0x7e>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	3a01      	subs	r2, #1
 800e218:	2a01      	cmp	r2, #1
 800e21a:	f200 80ea 	bhi.w	800e3f2 <_scanf_float+0x25a>
 800e21e:	4545      	cmp	r5, r8
 800e220:	f200 80dc 	bhi.w	800e3dc <_scanf_float+0x244>
 800e224:	2601      	movs	r6, #1
 800e226:	4630      	mov	r0, r6
 800e228:	b007      	add	sp, #28
 800e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	2b2e      	cmp	r3, #46	; 0x2e
 800e230:	f000 809f 	beq.w	800e372 <_scanf_float+0x1da>
 800e234:	2b30      	cmp	r3, #48	; 0x30
 800e236:	d1e7      	bne.n	800e208 <_scanf_float+0x70>
 800e238:	6820      	ldr	r0, [r4, #0]
 800e23a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e23e:	d064      	beq.n	800e30a <_scanf_float+0x172>
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e246:	6020      	str	r0, [r4, #0]
 800e248:	f109 0901 	add.w	r9, r9, #1
 800e24c:	b11b      	cbz	r3, 800e256 <_scanf_float+0xbe>
 800e24e:	3b01      	subs	r3, #1
 800e250:	3101      	adds	r1, #1
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	60a1      	str	r1, [r4, #8]
 800e256:	68a3      	ldr	r3, [r4, #8]
 800e258:	3b01      	subs	r3, #1
 800e25a:	60a3      	str	r3, [r4, #8]
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	3301      	adds	r3, #1
 800e260:	6123      	str	r3, [r4, #16]
 800e262:	6873      	ldr	r3, [r6, #4]
 800e264:	3b01      	subs	r3, #1
 800e266:	2b00      	cmp	r3, #0
 800e268:	6073      	str	r3, [r6, #4]
 800e26a:	f340 80ac 	ble.w	800e3c6 <_scanf_float+0x22e>
 800e26e:	6833      	ldr	r3, [r6, #0]
 800e270:	3301      	adds	r3, #1
 800e272:	6033      	str	r3, [r6, #0]
 800e274:	e7b5      	b.n	800e1e2 <_scanf_float+0x4a>
 800e276:	2b45      	cmp	r3, #69	; 0x45
 800e278:	f000 8085 	beq.w	800e386 <_scanf_float+0x1ee>
 800e27c:	2b46      	cmp	r3, #70	; 0x46
 800e27e:	d06a      	beq.n	800e356 <_scanf_float+0x1be>
 800e280:	2b41      	cmp	r3, #65	; 0x41
 800e282:	d1c1      	bne.n	800e208 <_scanf_float+0x70>
 800e284:	2a01      	cmp	r2, #1
 800e286:	d1bf      	bne.n	800e208 <_scanf_float+0x70>
 800e288:	2202      	movs	r2, #2
 800e28a:	e046      	b.n	800e31a <_scanf_float+0x182>
 800e28c:	2b65      	cmp	r3, #101	; 0x65
 800e28e:	d07a      	beq.n	800e386 <_scanf_float+0x1ee>
 800e290:	d818      	bhi.n	800e2c4 <_scanf_float+0x12c>
 800e292:	2b54      	cmp	r3, #84	; 0x54
 800e294:	d066      	beq.n	800e364 <_scanf_float+0x1cc>
 800e296:	d811      	bhi.n	800e2bc <_scanf_float+0x124>
 800e298:	2b4e      	cmp	r3, #78	; 0x4e
 800e29a:	d1b5      	bne.n	800e208 <_scanf_float+0x70>
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	d146      	bne.n	800e32e <_scanf_float+0x196>
 800e2a0:	f1b9 0f00 	cmp.w	r9, #0
 800e2a4:	d145      	bne.n	800e332 <_scanf_float+0x19a>
 800e2a6:	6821      	ldr	r1, [r4, #0]
 800e2a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e2ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e2b0:	d13f      	bne.n	800e332 <_scanf_float+0x19a>
 800e2b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e2b6:	6021      	str	r1, [r4, #0]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	e02e      	b.n	800e31a <_scanf_float+0x182>
 800e2bc:	2b59      	cmp	r3, #89	; 0x59
 800e2be:	d01e      	beq.n	800e2fe <_scanf_float+0x166>
 800e2c0:	2b61      	cmp	r3, #97	; 0x61
 800e2c2:	e7de      	b.n	800e282 <_scanf_float+0xea>
 800e2c4:	2b6e      	cmp	r3, #110	; 0x6e
 800e2c6:	d0e9      	beq.n	800e29c <_scanf_float+0x104>
 800e2c8:	d815      	bhi.n	800e2f6 <_scanf_float+0x15e>
 800e2ca:	2b66      	cmp	r3, #102	; 0x66
 800e2cc:	d043      	beq.n	800e356 <_scanf_float+0x1be>
 800e2ce:	2b69      	cmp	r3, #105	; 0x69
 800e2d0:	d19a      	bne.n	800e208 <_scanf_float+0x70>
 800e2d2:	f1bb 0f00 	cmp.w	fp, #0
 800e2d6:	d138      	bne.n	800e34a <_scanf_float+0x1b2>
 800e2d8:	f1b9 0f00 	cmp.w	r9, #0
 800e2dc:	d197      	bne.n	800e20e <_scanf_float+0x76>
 800e2de:	6821      	ldr	r1, [r4, #0]
 800e2e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e2e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e2e8:	d195      	bne.n	800e216 <_scanf_float+0x7e>
 800e2ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e2ee:	6021      	str	r1, [r4, #0]
 800e2f0:	f04f 0b01 	mov.w	fp, #1
 800e2f4:	e011      	b.n	800e31a <_scanf_float+0x182>
 800e2f6:	2b74      	cmp	r3, #116	; 0x74
 800e2f8:	d034      	beq.n	800e364 <_scanf_float+0x1cc>
 800e2fa:	2b79      	cmp	r3, #121	; 0x79
 800e2fc:	d184      	bne.n	800e208 <_scanf_float+0x70>
 800e2fe:	f1bb 0f07 	cmp.w	fp, #7
 800e302:	d181      	bne.n	800e208 <_scanf_float+0x70>
 800e304:	f04f 0b08 	mov.w	fp, #8
 800e308:	e007      	b.n	800e31a <_scanf_float+0x182>
 800e30a:	eb12 0f0b 	cmn.w	r2, fp
 800e30e:	f47f af7b 	bne.w	800e208 <_scanf_float+0x70>
 800e312:	6821      	ldr	r1, [r4, #0]
 800e314:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e318:	6021      	str	r1, [r4, #0]
 800e31a:	702b      	strb	r3, [r5, #0]
 800e31c:	3501      	adds	r5, #1
 800e31e:	e79a      	b.n	800e256 <_scanf_float+0xbe>
 800e320:	6821      	ldr	r1, [r4, #0]
 800e322:	0608      	lsls	r0, r1, #24
 800e324:	f57f af70 	bpl.w	800e208 <_scanf_float+0x70>
 800e328:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e32c:	e7f4      	b.n	800e318 <_scanf_float+0x180>
 800e32e:	2a02      	cmp	r2, #2
 800e330:	d047      	beq.n	800e3c2 <_scanf_float+0x22a>
 800e332:	f1bb 0f01 	cmp.w	fp, #1
 800e336:	d003      	beq.n	800e340 <_scanf_float+0x1a8>
 800e338:	f1bb 0f04 	cmp.w	fp, #4
 800e33c:	f47f af64 	bne.w	800e208 <_scanf_float+0x70>
 800e340:	f10b 0b01 	add.w	fp, fp, #1
 800e344:	fa5f fb8b 	uxtb.w	fp, fp
 800e348:	e7e7      	b.n	800e31a <_scanf_float+0x182>
 800e34a:	f1bb 0f03 	cmp.w	fp, #3
 800e34e:	d0f7      	beq.n	800e340 <_scanf_float+0x1a8>
 800e350:	f1bb 0f05 	cmp.w	fp, #5
 800e354:	e7f2      	b.n	800e33c <_scanf_float+0x1a4>
 800e356:	f1bb 0f02 	cmp.w	fp, #2
 800e35a:	f47f af55 	bne.w	800e208 <_scanf_float+0x70>
 800e35e:	f04f 0b03 	mov.w	fp, #3
 800e362:	e7da      	b.n	800e31a <_scanf_float+0x182>
 800e364:	f1bb 0f06 	cmp.w	fp, #6
 800e368:	f47f af4e 	bne.w	800e208 <_scanf_float+0x70>
 800e36c:	f04f 0b07 	mov.w	fp, #7
 800e370:	e7d3      	b.n	800e31a <_scanf_float+0x182>
 800e372:	6821      	ldr	r1, [r4, #0]
 800e374:	0588      	lsls	r0, r1, #22
 800e376:	f57f af47 	bpl.w	800e208 <_scanf_float+0x70>
 800e37a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e37e:	6021      	str	r1, [r4, #0]
 800e380:	f8cd 9008 	str.w	r9, [sp, #8]
 800e384:	e7c9      	b.n	800e31a <_scanf_float+0x182>
 800e386:	6821      	ldr	r1, [r4, #0]
 800e388:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e38c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e390:	d006      	beq.n	800e3a0 <_scanf_float+0x208>
 800e392:	0548      	lsls	r0, r1, #21
 800e394:	f57f af38 	bpl.w	800e208 <_scanf_float+0x70>
 800e398:	f1b9 0f00 	cmp.w	r9, #0
 800e39c:	f43f af3b 	beq.w	800e216 <_scanf_float+0x7e>
 800e3a0:	0588      	lsls	r0, r1, #22
 800e3a2:	bf58      	it	pl
 800e3a4:	9802      	ldrpl	r0, [sp, #8]
 800e3a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e3aa:	bf58      	it	pl
 800e3ac:	eba9 0000 	subpl.w	r0, r9, r0
 800e3b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e3b4:	bf58      	it	pl
 800e3b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e3ba:	6021      	str	r1, [r4, #0]
 800e3bc:	f04f 0900 	mov.w	r9, #0
 800e3c0:	e7ab      	b.n	800e31a <_scanf_float+0x182>
 800e3c2:	2203      	movs	r2, #3
 800e3c4:	e7a9      	b.n	800e31a <_scanf_float+0x182>
 800e3c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e3ca:	9205      	str	r2, [sp, #20]
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	4798      	blx	r3
 800e3d2:	9a05      	ldr	r2, [sp, #20]
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	f43f af04 	beq.w	800e1e2 <_scanf_float+0x4a>
 800e3da:	e715      	b.n	800e208 <_scanf_float+0x70>
 800e3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e3e4:	4632      	mov	r2, r6
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	4798      	blx	r3
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	e715      	b.n	800e21e <_scanf_float+0x86>
 800e3f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e3f6:	2b06      	cmp	r3, #6
 800e3f8:	d80a      	bhi.n	800e410 <_scanf_float+0x278>
 800e3fa:	f1bb 0f02 	cmp.w	fp, #2
 800e3fe:	d968      	bls.n	800e4d2 <_scanf_float+0x33a>
 800e400:	f1ab 0b03 	sub.w	fp, fp, #3
 800e404:	fa5f fb8b 	uxtb.w	fp, fp
 800e408:	eba5 0b0b 	sub.w	fp, r5, fp
 800e40c:	455d      	cmp	r5, fp
 800e40e:	d14b      	bne.n	800e4a8 <_scanf_float+0x310>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	05da      	lsls	r2, r3, #23
 800e414:	d51f      	bpl.n	800e456 <_scanf_float+0x2be>
 800e416:	055b      	lsls	r3, r3, #21
 800e418:	d468      	bmi.n	800e4ec <_scanf_float+0x354>
 800e41a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	2965      	cmp	r1, #101	; 0x65
 800e422:	f103 33ff 	add.w	r3, r3, #4294967295
 800e426:	f105 3bff 	add.w	fp, r5, #4294967295
 800e42a:	6123      	str	r3, [r4, #16]
 800e42c:	d00d      	beq.n	800e44a <_scanf_float+0x2b2>
 800e42e:	2945      	cmp	r1, #69	; 0x45
 800e430:	d00b      	beq.n	800e44a <_scanf_float+0x2b2>
 800e432:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e436:	4632      	mov	r2, r6
 800e438:	4638      	mov	r0, r7
 800e43a:	4798      	blx	r3
 800e43c:	6923      	ldr	r3, [r4, #16]
 800e43e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e442:	3b01      	subs	r3, #1
 800e444:	f1a5 0b02 	sub.w	fp, r5, #2
 800e448:	6123      	str	r3, [r4, #16]
 800e44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e44e:	4632      	mov	r2, r6
 800e450:	4638      	mov	r0, r7
 800e452:	4798      	blx	r3
 800e454:	465d      	mov	r5, fp
 800e456:	6826      	ldr	r6, [r4, #0]
 800e458:	f016 0610 	ands.w	r6, r6, #16
 800e45c:	d17a      	bne.n	800e554 <_scanf_float+0x3bc>
 800e45e:	702e      	strb	r6, [r5, #0]
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e46a:	d142      	bne.n	800e4f2 <_scanf_float+0x35a>
 800e46c:	9b02      	ldr	r3, [sp, #8]
 800e46e:	eba9 0303 	sub.w	r3, r9, r3
 800e472:	425a      	negs	r2, r3
 800e474:	2b00      	cmp	r3, #0
 800e476:	d149      	bne.n	800e50c <_scanf_float+0x374>
 800e478:	2200      	movs	r2, #0
 800e47a:	4641      	mov	r1, r8
 800e47c:	4638      	mov	r0, r7
 800e47e:	f000 fed3 	bl	800f228 <_strtod_r>
 800e482:	6825      	ldr	r5, [r4, #0]
 800e484:	f8da 3000 	ldr.w	r3, [sl]
 800e488:	f015 0f02 	tst.w	r5, #2
 800e48c:	f103 0204 	add.w	r2, r3, #4
 800e490:	ec59 8b10 	vmov	r8, r9, d0
 800e494:	f8ca 2000 	str.w	r2, [sl]
 800e498:	d043      	beq.n	800e522 <_scanf_float+0x38a>
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	e9c3 8900 	strd	r8, r9, [r3]
 800e4a0:	68e3      	ldr	r3, [r4, #12]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	60e3      	str	r3, [r4, #12]
 800e4a6:	e6be      	b.n	800e226 <_scanf_float+0x8e>
 800e4a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	4798      	blx	r3
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	6123      	str	r3, [r4, #16]
 800e4bc:	e7a6      	b.n	800e40c <_scanf_float+0x274>
 800e4be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e4c6:	4632      	mov	r2, r6
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	4798      	blx	r3
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	6123      	str	r3, [r4, #16]
 800e4d2:	4545      	cmp	r5, r8
 800e4d4:	d8f3      	bhi.n	800e4be <_scanf_float+0x326>
 800e4d6:	e6a5      	b.n	800e224 <_scanf_float+0x8c>
 800e4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e4e0:	4632      	mov	r2, r6
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	4798      	blx	r3
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	6123      	str	r3, [r4, #16]
 800e4ec:	4545      	cmp	r5, r8
 800e4ee:	d8f3      	bhi.n	800e4d8 <_scanf_float+0x340>
 800e4f0:	e698      	b.n	800e224 <_scanf_float+0x8c>
 800e4f2:	9b03      	ldr	r3, [sp, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d0bf      	beq.n	800e478 <_scanf_float+0x2e0>
 800e4f8:	9904      	ldr	r1, [sp, #16]
 800e4fa:	230a      	movs	r3, #10
 800e4fc:	4632      	mov	r2, r6
 800e4fe:	3101      	adds	r1, #1
 800e500:	4638      	mov	r0, r7
 800e502:	f000 ff1d 	bl	800f340 <_strtol_r>
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	9d04      	ldr	r5, [sp, #16]
 800e50a:	1ac2      	subs	r2, r0, r3
 800e50c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e510:	429d      	cmp	r5, r3
 800e512:	bf28      	it	cs
 800e514:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e518:	490f      	ldr	r1, [pc, #60]	; (800e558 <_scanf_float+0x3c0>)
 800e51a:	4628      	mov	r0, r5
 800e51c:	f000 f84c 	bl	800e5b8 <siprintf>
 800e520:	e7aa      	b.n	800e478 <_scanf_float+0x2e0>
 800e522:	f015 0504 	ands.w	r5, r5, #4
 800e526:	d1b8      	bne.n	800e49a <_scanf_float+0x302>
 800e528:	681f      	ldr	r7, [r3, #0]
 800e52a:	ee10 2a10 	vmov	r2, s0
 800e52e:	464b      	mov	r3, r9
 800e530:	ee10 0a10 	vmov	r0, s0
 800e534:	4649      	mov	r1, r9
 800e536:	f7f2 fb01 	bl	8000b3c <__aeabi_dcmpun>
 800e53a:	b128      	cbz	r0, 800e548 <_scanf_float+0x3b0>
 800e53c:	4628      	mov	r0, r5
 800e53e:	f000 f835 	bl	800e5ac <nanf>
 800e542:	ed87 0a00 	vstr	s0, [r7]
 800e546:	e7ab      	b.n	800e4a0 <_scanf_float+0x308>
 800e548:	4640      	mov	r0, r8
 800e54a:	4649      	mov	r1, r9
 800e54c:	f7f2 fb54 	bl	8000bf8 <__aeabi_d2f>
 800e550:	6038      	str	r0, [r7, #0]
 800e552:	e7a5      	b.n	800e4a0 <_scanf_float+0x308>
 800e554:	2600      	movs	r6, #0
 800e556:	e666      	b.n	800e226 <_scanf_float+0x8e>
 800e558:	08013400 	.word	0x08013400

0800e55c <iprintf>:
 800e55c:	b40f      	push	{r0, r1, r2, r3}
 800e55e:	4b0a      	ldr	r3, [pc, #40]	; (800e588 <iprintf+0x2c>)
 800e560:	b513      	push	{r0, r1, r4, lr}
 800e562:	681c      	ldr	r4, [r3, #0]
 800e564:	b124      	cbz	r4, 800e570 <iprintf+0x14>
 800e566:	69a3      	ldr	r3, [r4, #24]
 800e568:	b913      	cbnz	r3, 800e570 <iprintf+0x14>
 800e56a:	4620      	mov	r0, r4
 800e56c:	f001 fd80 	bl	8010070 <__sinit>
 800e570:	ab05      	add	r3, sp, #20
 800e572:	9a04      	ldr	r2, [sp, #16]
 800e574:	68a1      	ldr	r1, [r4, #8]
 800e576:	9301      	str	r3, [sp, #4]
 800e578:	4620      	mov	r0, r4
 800e57a:	f002 fedb 	bl	8011334 <_vfiprintf_r>
 800e57e:	b002      	add	sp, #8
 800e580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e584:	b004      	add	sp, #16
 800e586:	4770      	bx	lr
 800e588:	200002d0 	.word	0x200002d0

0800e58c <_sbrk_r>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4c06      	ldr	r4, [pc, #24]	; (800e5a8 <_sbrk_r+0x1c>)
 800e590:	2300      	movs	r3, #0
 800e592:	4605      	mov	r5, r0
 800e594:	4608      	mov	r0, r1
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	f7f3 fbbe 	bl	8001d18 <_sbrk>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d102      	bne.n	800e5a6 <_sbrk_r+0x1a>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	b103      	cbz	r3, 800e5a6 <_sbrk_r+0x1a>
 800e5a4:	602b      	str	r3, [r5, #0]
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	20000c6c 	.word	0x20000c6c

0800e5ac <nanf>:
 800e5ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5b4 <nanf+0x8>
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	7fc00000 	.word	0x7fc00000

0800e5b8 <siprintf>:
 800e5b8:	b40e      	push	{r1, r2, r3}
 800e5ba:	b500      	push	{lr}
 800e5bc:	b09c      	sub	sp, #112	; 0x70
 800e5be:	ab1d      	add	r3, sp, #116	; 0x74
 800e5c0:	9002      	str	r0, [sp, #8]
 800e5c2:	9006      	str	r0, [sp, #24]
 800e5c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5c8:	4809      	ldr	r0, [pc, #36]	; (800e5f0 <siprintf+0x38>)
 800e5ca:	9107      	str	r1, [sp, #28]
 800e5cc:	9104      	str	r1, [sp, #16]
 800e5ce:	4909      	ldr	r1, [pc, #36]	; (800e5f4 <siprintf+0x3c>)
 800e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d4:	9105      	str	r1, [sp, #20]
 800e5d6:	6800      	ldr	r0, [r0, #0]
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	a902      	add	r1, sp, #8
 800e5dc:	f002 fd88 	bl	80110f0 <_svfiprintf_r>
 800e5e0:	9b02      	ldr	r3, [sp, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
 800e5e6:	b01c      	add	sp, #112	; 0x70
 800e5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ec:	b003      	add	sp, #12
 800e5ee:	4770      	bx	lr
 800e5f0:	200002d0 	.word	0x200002d0
 800e5f4:	ffff0208 	.word	0xffff0208

0800e5f8 <strcpy>:
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5fe:	f803 2b01 	strb.w	r2, [r3], #1
 800e602:	2a00      	cmp	r2, #0
 800e604:	d1f9      	bne.n	800e5fa <strcpy+0x2>
 800e606:	4770      	bx	lr

0800e608 <sulp>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	ec45 4b10 	vmov	d0, r4, r5
 800e612:	4616      	mov	r6, r2
 800e614:	f002 fbd0 	bl	8010db8 <__ulp>
 800e618:	ec51 0b10 	vmov	r0, r1, d0
 800e61c:	b17e      	cbz	r6, 800e63e <sulp+0x36>
 800e61e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e626:	2b00      	cmp	r3, #0
 800e628:	dd09      	ble.n	800e63e <sulp+0x36>
 800e62a:	051b      	lsls	r3, r3, #20
 800e62c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e630:	2400      	movs	r4, #0
 800e632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e636:	4622      	mov	r2, r4
 800e638:	462b      	mov	r3, r5
 800e63a:	f7f1 ffe5 	bl	8000608 <__aeabi_dmul>
 800e63e:	bd70      	pop	{r4, r5, r6, pc}

0800e640 <_strtod_l>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	461f      	mov	r7, r3
 800e646:	b0a1      	sub	sp, #132	; 0x84
 800e648:	2300      	movs	r3, #0
 800e64a:	4681      	mov	r9, r0
 800e64c:	4638      	mov	r0, r7
 800e64e:	460e      	mov	r6, r1
 800e650:	9217      	str	r2, [sp, #92]	; 0x5c
 800e652:	931c      	str	r3, [sp, #112]	; 0x70
 800e654:	f002 f8bf 	bl	80107d6 <__localeconv_l>
 800e658:	4680      	mov	r8, r0
 800e65a:	6800      	ldr	r0, [r0, #0]
 800e65c:	f7f1 fdc0 	bl	80001e0 <strlen>
 800e660:	f04f 0a00 	mov.w	sl, #0
 800e664:	4604      	mov	r4, r0
 800e666:	f04f 0b00 	mov.w	fp, #0
 800e66a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e66c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e66e:	781a      	ldrb	r2, [r3, #0]
 800e670:	2a0d      	cmp	r2, #13
 800e672:	d832      	bhi.n	800e6da <_strtod_l+0x9a>
 800e674:	2a09      	cmp	r2, #9
 800e676:	d236      	bcs.n	800e6e6 <_strtod_l+0xa6>
 800e678:	2a00      	cmp	r2, #0
 800e67a:	d03e      	beq.n	800e6fa <_strtod_l+0xba>
 800e67c:	2300      	movs	r3, #0
 800e67e:	930d      	str	r3, [sp, #52]	; 0x34
 800e680:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e682:	782b      	ldrb	r3, [r5, #0]
 800e684:	2b30      	cmp	r3, #48	; 0x30
 800e686:	f040 80ac 	bne.w	800e7e2 <_strtod_l+0x1a2>
 800e68a:	786b      	ldrb	r3, [r5, #1]
 800e68c:	2b58      	cmp	r3, #88	; 0x58
 800e68e:	d001      	beq.n	800e694 <_strtod_l+0x54>
 800e690:	2b78      	cmp	r3, #120	; 0x78
 800e692:	d167      	bne.n	800e764 <_strtod_l+0x124>
 800e694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	ab1c      	add	r3, sp, #112	; 0x70
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	9702      	str	r7, [sp, #8]
 800e69e:	ab1d      	add	r3, sp, #116	; 0x74
 800e6a0:	4a88      	ldr	r2, [pc, #544]	; (800e8c4 <_strtod_l+0x284>)
 800e6a2:	a91b      	add	r1, sp, #108	; 0x6c
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	f001 fdbc 	bl	8010222 <__gethex>
 800e6aa:	f010 0407 	ands.w	r4, r0, #7
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	d005      	beq.n	800e6be <_strtod_l+0x7e>
 800e6b2:	2c06      	cmp	r4, #6
 800e6b4:	d12b      	bne.n	800e70e <_strtod_l+0xce>
 800e6b6:	3501      	adds	r5, #1
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	951b      	str	r5, [sp, #108]	; 0x6c
 800e6bc:	930d      	str	r3, [sp, #52]	; 0x34
 800e6be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f040 859a 	bne.w	800f1fa <_strtod_l+0xbba>
 800e6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6c8:	b1e3      	cbz	r3, 800e704 <_strtod_l+0xc4>
 800e6ca:	4652      	mov	r2, sl
 800e6cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e6d0:	ec43 2b10 	vmov	d0, r2, r3
 800e6d4:	b021      	add	sp, #132	; 0x84
 800e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6da:	2a2b      	cmp	r2, #43	; 0x2b
 800e6dc:	d015      	beq.n	800e70a <_strtod_l+0xca>
 800e6de:	2a2d      	cmp	r2, #45	; 0x2d
 800e6e0:	d004      	beq.n	800e6ec <_strtod_l+0xac>
 800e6e2:	2a20      	cmp	r2, #32
 800e6e4:	d1ca      	bne.n	800e67c <_strtod_l+0x3c>
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e6ea:	e7bf      	b.n	800e66c <_strtod_l+0x2c>
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	920d      	str	r2, [sp, #52]	; 0x34
 800e6f0:	1c5a      	adds	r2, r3, #1
 800e6f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800e6f4:	785b      	ldrb	r3, [r3, #1]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1c2      	bne.n	800e680 <_strtod_l+0x40>
 800e6fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6fc:	961b      	str	r6, [sp, #108]	; 0x6c
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f040 8579 	bne.w	800f1f6 <_strtod_l+0xbb6>
 800e704:	4652      	mov	r2, sl
 800e706:	465b      	mov	r3, fp
 800e708:	e7e2      	b.n	800e6d0 <_strtod_l+0x90>
 800e70a:	2200      	movs	r2, #0
 800e70c:	e7ef      	b.n	800e6ee <_strtod_l+0xae>
 800e70e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e710:	b13a      	cbz	r2, 800e722 <_strtod_l+0xe2>
 800e712:	2135      	movs	r1, #53	; 0x35
 800e714:	a81e      	add	r0, sp, #120	; 0x78
 800e716:	f002 fc47 	bl	8010fa8 <__copybits>
 800e71a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e71c:	4648      	mov	r0, r9
 800e71e:	f002 f8b3 	bl	8010888 <_Bfree>
 800e722:	3c01      	subs	r4, #1
 800e724:	2c04      	cmp	r4, #4
 800e726:	d806      	bhi.n	800e736 <_strtod_l+0xf6>
 800e728:	e8df f004 	tbb	[pc, r4]
 800e72c:	1714030a 	.word	0x1714030a
 800e730:	0a          	.byte	0x0a
 800e731:	00          	.byte	0x00
 800e732:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e736:	0730      	lsls	r0, r6, #28
 800e738:	d5c1      	bpl.n	800e6be <_strtod_l+0x7e>
 800e73a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e73e:	e7be      	b.n	800e6be <_strtod_l+0x7e>
 800e740:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e746:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e74a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e74e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e752:	e7f0      	b.n	800e736 <_strtod_l+0xf6>
 800e754:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e8c8 <_strtod_l+0x288>
 800e758:	e7ed      	b.n	800e736 <_strtod_l+0xf6>
 800e75a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e75e:	f04f 3aff 	mov.w	sl, #4294967295
 800e762:	e7e8      	b.n	800e736 <_strtod_l+0xf6>
 800e764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e766:	1c5a      	adds	r2, r3, #1
 800e768:	921b      	str	r2, [sp, #108]	; 0x6c
 800e76a:	785b      	ldrb	r3, [r3, #1]
 800e76c:	2b30      	cmp	r3, #48	; 0x30
 800e76e:	d0f9      	beq.n	800e764 <_strtod_l+0x124>
 800e770:	2b00      	cmp	r3, #0
 800e772:	d0a4      	beq.n	800e6be <_strtod_l+0x7e>
 800e774:	2301      	movs	r3, #1
 800e776:	2500      	movs	r5, #0
 800e778:	9306      	str	r3, [sp, #24]
 800e77a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e77c:	9308      	str	r3, [sp, #32]
 800e77e:	9507      	str	r5, [sp, #28]
 800e780:	9505      	str	r5, [sp, #20]
 800e782:	220a      	movs	r2, #10
 800e784:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e786:	7807      	ldrb	r7, [r0, #0]
 800e788:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e78c:	b2d9      	uxtb	r1, r3
 800e78e:	2909      	cmp	r1, #9
 800e790:	d929      	bls.n	800e7e6 <_strtod_l+0x1a6>
 800e792:	4622      	mov	r2, r4
 800e794:	f8d8 1000 	ldr.w	r1, [r8]
 800e798:	f002 ff25 	bl	80115e6 <strncmp>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d031      	beq.n	800e804 <_strtod_l+0x1c4>
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	9c05      	ldr	r4, [sp, #20]
 800e7a4:	9004      	str	r0, [sp, #16]
 800e7a6:	463b      	mov	r3, r7
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	2b65      	cmp	r3, #101	; 0x65
 800e7ac:	d001      	beq.n	800e7b2 <_strtod_l+0x172>
 800e7ae:	2b45      	cmp	r3, #69	; 0x45
 800e7b0:	d114      	bne.n	800e7dc <_strtod_l+0x19c>
 800e7b2:	b924      	cbnz	r4, 800e7be <_strtod_l+0x17e>
 800e7b4:	b910      	cbnz	r0, 800e7bc <_strtod_l+0x17c>
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d09e      	beq.n	800e6fa <_strtod_l+0xba>
 800e7bc:	2400      	movs	r4, #0
 800e7be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e7c0:	1c73      	adds	r3, r6, #1
 800e7c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7c4:	7873      	ldrb	r3, [r6, #1]
 800e7c6:	2b2b      	cmp	r3, #43	; 0x2b
 800e7c8:	d078      	beq.n	800e8bc <_strtod_l+0x27c>
 800e7ca:	2b2d      	cmp	r3, #45	; 0x2d
 800e7cc:	d070      	beq.n	800e8b0 <_strtod_l+0x270>
 800e7ce:	f04f 0c00 	mov.w	ip, #0
 800e7d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e7d6:	2f09      	cmp	r7, #9
 800e7d8:	d97c      	bls.n	800e8d4 <_strtod_l+0x294>
 800e7da:	961b      	str	r6, [sp, #108]	; 0x6c
 800e7dc:	f04f 0e00 	mov.w	lr, #0
 800e7e0:	e09a      	b.n	800e918 <_strtod_l+0x2d8>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	e7c7      	b.n	800e776 <_strtod_l+0x136>
 800e7e6:	9905      	ldr	r1, [sp, #20]
 800e7e8:	2908      	cmp	r1, #8
 800e7ea:	bfdd      	ittte	le
 800e7ec:	9907      	ldrle	r1, [sp, #28]
 800e7ee:	fb02 3301 	mlale	r3, r2, r1, r3
 800e7f2:	9307      	strle	r3, [sp, #28]
 800e7f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	9305      	str	r3, [sp, #20]
 800e800:	901b      	str	r0, [sp, #108]	; 0x6c
 800e802:	e7bf      	b.n	800e784 <_strtod_l+0x144>
 800e804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e806:	191a      	adds	r2, r3, r4
 800e808:	921b      	str	r2, [sp, #108]	; 0x6c
 800e80a:	9a05      	ldr	r2, [sp, #20]
 800e80c:	5d1b      	ldrb	r3, [r3, r4]
 800e80e:	2a00      	cmp	r2, #0
 800e810:	d037      	beq.n	800e882 <_strtod_l+0x242>
 800e812:	9c05      	ldr	r4, [sp, #20]
 800e814:	4602      	mov	r2, r0
 800e816:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e81a:	2909      	cmp	r1, #9
 800e81c:	d913      	bls.n	800e846 <_strtod_l+0x206>
 800e81e:	2101      	movs	r1, #1
 800e820:	9104      	str	r1, [sp, #16]
 800e822:	e7c2      	b.n	800e7aa <_strtod_l+0x16a>
 800e824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	921b      	str	r2, [sp, #108]	; 0x6c
 800e82a:	785b      	ldrb	r3, [r3, #1]
 800e82c:	3001      	adds	r0, #1
 800e82e:	2b30      	cmp	r3, #48	; 0x30
 800e830:	d0f8      	beq.n	800e824 <_strtod_l+0x1e4>
 800e832:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e836:	2a08      	cmp	r2, #8
 800e838:	f200 84e4 	bhi.w	800f204 <_strtod_l+0xbc4>
 800e83c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e83e:	9208      	str	r2, [sp, #32]
 800e840:	4602      	mov	r2, r0
 800e842:	2000      	movs	r0, #0
 800e844:	4604      	mov	r4, r0
 800e846:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e84a:	f100 0101 	add.w	r1, r0, #1
 800e84e:	d012      	beq.n	800e876 <_strtod_l+0x236>
 800e850:	440a      	add	r2, r1
 800e852:	eb00 0c04 	add.w	ip, r0, r4
 800e856:	4621      	mov	r1, r4
 800e858:	270a      	movs	r7, #10
 800e85a:	458c      	cmp	ip, r1
 800e85c:	d113      	bne.n	800e886 <_strtod_l+0x246>
 800e85e:	1821      	adds	r1, r4, r0
 800e860:	2908      	cmp	r1, #8
 800e862:	f104 0401 	add.w	r4, r4, #1
 800e866:	4404      	add	r4, r0
 800e868:	dc19      	bgt.n	800e89e <_strtod_l+0x25e>
 800e86a:	9b07      	ldr	r3, [sp, #28]
 800e86c:	210a      	movs	r1, #10
 800e86e:	fb01 e303 	mla	r3, r1, r3, lr
 800e872:	9307      	str	r3, [sp, #28]
 800e874:	2100      	movs	r1, #0
 800e876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e878:	1c58      	adds	r0, r3, #1
 800e87a:	901b      	str	r0, [sp, #108]	; 0x6c
 800e87c:	785b      	ldrb	r3, [r3, #1]
 800e87e:	4608      	mov	r0, r1
 800e880:	e7c9      	b.n	800e816 <_strtod_l+0x1d6>
 800e882:	9805      	ldr	r0, [sp, #20]
 800e884:	e7d3      	b.n	800e82e <_strtod_l+0x1ee>
 800e886:	2908      	cmp	r1, #8
 800e888:	f101 0101 	add.w	r1, r1, #1
 800e88c:	dc03      	bgt.n	800e896 <_strtod_l+0x256>
 800e88e:	9b07      	ldr	r3, [sp, #28]
 800e890:	437b      	muls	r3, r7
 800e892:	9307      	str	r3, [sp, #28]
 800e894:	e7e1      	b.n	800e85a <_strtod_l+0x21a>
 800e896:	2910      	cmp	r1, #16
 800e898:	bfd8      	it	le
 800e89a:	437d      	mulle	r5, r7
 800e89c:	e7dd      	b.n	800e85a <_strtod_l+0x21a>
 800e89e:	2c10      	cmp	r4, #16
 800e8a0:	bfdc      	itt	le
 800e8a2:	210a      	movle	r1, #10
 800e8a4:	fb01 e505 	mlale	r5, r1, r5, lr
 800e8a8:	e7e4      	b.n	800e874 <_strtod_l+0x234>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	e781      	b.n	800e7b4 <_strtod_l+0x174>
 800e8b0:	f04f 0c01 	mov.w	ip, #1
 800e8b4:	1cb3      	adds	r3, r6, #2
 800e8b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8b8:	78b3      	ldrb	r3, [r6, #2]
 800e8ba:	e78a      	b.n	800e7d2 <_strtod_l+0x192>
 800e8bc:	f04f 0c00 	mov.w	ip, #0
 800e8c0:	e7f8      	b.n	800e8b4 <_strtod_l+0x274>
 800e8c2:	bf00      	nop
 800e8c4:	08013408 	.word	0x08013408
 800e8c8:	7ff00000 	.word	0x7ff00000
 800e8cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8ce:	1c5f      	adds	r7, r3, #1
 800e8d0:	971b      	str	r7, [sp, #108]	; 0x6c
 800e8d2:	785b      	ldrb	r3, [r3, #1]
 800e8d4:	2b30      	cmp	r3, #48	; 0x30
 800e8d6:	d0f9      	beq.n	800e8cc <_strtod_l+0x28c>
 800e8d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e8dc:	2f08      	cmp	r7, #8
 800e8de:	f63f af7d 	bhi.w	800e7dc <_strtod_l+0x19c>
 800e8e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e8ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8ec:	1c5f      	adds	r7, r3, #1
 800e8ee:	971b      	str	r7, [sp, #108]	; 0x6c
 800e8f0:	785b      	ldrb	r3, [r3, #1]
 800e8f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e8f6:	f1b8 0f09 	cmp.w	r8, #9
 800e8fa:	d937      	bls.n	800e96c <_strtod_l+0x32c>
 800e8fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8fe:	1a7f      	subs	r7, r7, r1
 800e900:	2f08      	cmp	r7, #8
 800e902:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e906:	dc37      	bgt.n	800e978 <_strtod_l+0x338>
 800e908:	45be      	cmp	lr, r7
 800e90a:	bfa8      	it	ge
 800e90c:	46be      	movge	lr, r7
 800e90e:	f1bc 0f00 	cmp.w	ip, #0
 800e912:	d001      	beq.n	800e918 <_strtod_l+0x2d8>
 800e914:	f1ce 0e00 	rsb	lr, lr, #0
 800e918:	2c00      	cmp	r4, #0
 800e91a:	d151      	bne.n	800e9c0 <_strtod_l+0x380>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	f47f aece 	bne.w	800e6be <_strtod_l+0x7e>
 800e922:	9a06      	ldr	r2, [sp, #24]
 800e924:	2a00      	cmp	r2, #0
 800e926:	f47f aeca 	bne.w	800e6be <_strtod_l+0x7e>
 800e92a:	9a04      	ldr	r2, [sp, #16]
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	f47f aee4 	bne.w	800e6fa <_strtod_l+0xba>
 800e932:	2b4e      	cmp	r3, #78	; 0x4e
 800e934:	d027      	beq.n	800e986 <_strtod_l+0x346>
 800e936:	dc21      	bgt.n	800e97c <_strtod_l+0x33c>
 800e938:	2b49      	cmp	r3, #73	; 0x49
 800e93a:	f47f aede 	bne.w	800e6fa <_strtod_l+0xba>
 800e93e:	49a0      	ldr	r1, [pc, #640]	; (800ebc0 <_strtod_l+0x580>)
 800e940:	a81b      	add	r0, sp, #108	; 0x6c
 800e942:	f001 fea1 	bl	8010688 <__match>
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f aed7 	beq.w	800e6fa <_strtod_l+0xba>
 800e94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e94e:	499d      	ldr	r1, [pc, #628]	; (800ebc4 <_strtod_l+0x584>)
 800e950:	3b01      	subs	r3, #1
 800e952:	a81b      	add	r0, sp, #108	; 0x6c
 800e954:	931b      	str	r3, [sp, #108]	; 0x6c
 800e956:	f001 fe97 	bl	8010688 <__match>
 800e95a:	b910      	cbnz	r0, 800e962 <_strtod_l+0x322>
 800e95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e95e:	3301      	adds	r3, #1
 800e960:	931b      	str	r3, [sp, #108]	; 0x6c
 800e962:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ebd8 <_strtod_l+0x598>
 800e966:	f04f 0a00 	mov.w	sl, #0
 800e96a:	e6a8      	b.n	800e6be <_strtod_l+0x7e>
 800e96c:	210a      	movs	r1, #10
 800e96e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e972:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e976:	e7b8      	b.n	800e8ea <_strtod_l+0x2aa>
 800e978:	46be      	mov	lr, r7
 800e97a:	e7c8      	b.n	800e90e <_strtod_l+0x2ce>
 800e97c:	2b69      	cmp	r3, #105	; 0x69
 800e97e:	d0de      	beq.n	800e93e <_strtod_l+0x2fe>
 800e980:	2b6e      	cmp	r3, #110	; 0x6e
 800e982:	f47f aeba 	bne.w	800e6fa <_strtod_l+0xba>
 800e986:	4990      	ldr	r1, [pc, #576]	; (800ebc8 <_strtod_l+0x588>)
 800e988:	a81b      	add	r0, sp, #108	; 0x6c
 800e98a:	f001 fe7d 	bl	8010688 <__match>
 800e98e:	2800      	cmp	r0, #0
 800e990:	f43f aeb3 	beq.w	800e6fa <_strtod_l+0xba>
 800e994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b28      	cmp	r3, #40	; 0x28
 800e99a:	d10e      	bne.n	800e9ba <_strtod_l+0x37a>
 800e99c:	aa1e      	add	r2, sp, #120	; 0x78
 800e99e:	498b      	ldr	r1, [pc, #556]	; (800ebcc <_strtod_l+0x58c>)
 800e9a0:	a81b      	add	r0, sp, #108	; 0x6c
 800e9a2:	f001 fe85 	bl	80106b0 <__hexnan>
 800e9a6:	2805      	cmp	r0, #5
 800e9a8:	d107      	bne.n	800e9ba <_strtod_l+0x37a>
 800e9aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e9b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e9b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e9b8:	e681      	b.n	800e6be <_strtod_l+0x7e>
 800e9ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ebe0 <_strtod_l+0x5a0>
 800e9be:	e7d2      	b.n	800e966 <_strtod_l+0x326>
 800e9c0:	ebae 0302 	sub.w	r3, lr, r2
 800e9c4:	9306      	str	r3, [sp, #24]
 800e9c6:	9b05      	ldr	r3, [sp, #20]
 800e9c8:	9807      	ldr	r0, [sp, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	bf08      	it	eq
 800e9ce:	4623      	moveq	r3, r4
 800e9d0:	2c10      	cmp	r4, #16
 800e9d2:	9305      	str	r3, [sp, #20]
 800e9d4:	46a0      	mov	r8, r4
 800e9d6:	bfa8      	it	ge
 800e9d8:	f04f 0810 	movge.w	r8, #16
 800e9dc:	f7f1 fd9a 	bl	8000514 <__aeabi_ui2d>
 800e9e0:	2c09      	cmp	r4, #9
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	468b      	mov	fp, r1
 800e9e6:	dc13      	bgt.n	800ea10 <_strtod_l+0x3d0>
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f43f ae67 	beq.w	800e6be <_strtod_l+0x7e>
 800e9f0:	9b06      	ldr	r3, [sp, #24]
 800e9f2:	dd7a      	ble.n	800eaea <_strtod_l+0x4aa>
 800e9f4:	2b16      	cmp	r3, #22
 800e9f6:	dc61      	bgt.n	800eabc <_strtod_l+0x47c>
 800e9f8:	4a75      	ldr	r2, [pc, #468]	; (800ebd0 <_strtod_l+0x590>)
 800e9fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e9fe:	e9de 0100 	ldrd	r0, r1, [lr]
 800ea02:	4652      	mov	r2, sl
 800ea04:	465b      	mov	r3, fp
 800ea06:	f7f1 fdff 	bl	8000608 <__aeabi_dmul>
 800ea0a:	4682      	mov	sl, r0
 800ea0c:	468b      	mov	fp, r1
 800ea0e:	e656      	b.n	800e6be <_strtod_l+0x7e>
 800ea10:	4b6f      	ldr	r3, [pc, #444]	; (800ebd0 <_strtod_l+0x590>)
 800ea12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea1a:	f7f1 fdf5 	bl	8000608 <__aeabi_dmul>
 800ea1e:	4606      	mov	r6, r0
 800ea20:	4628      	mov	r0, r5
 800ea22:	460f      	mov	r7, r1
 800ea24:	f7f1 fd76 	bl	8000514 <__aeabi_ui2d>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f7f1 fc34 	bl	800029c <__adddf3>
 800ea34:	2c0f      	cmp	r4, #15
 800ea36:	4682      	mov	sl, r0
 800ea38:	468b      	mov	fp, r1
 800ea3a:	ddd5      	ble.n	800e9e8 <_strtod_l+0x3a8>
 800ea3c:	9b06      	ldr	r3, [sp, #24]
 800ea3e:	eba4 0808 	sub.w	r8, r4, r8
 800ea42:	4498      	add	r8, r3
 800ea44:	f1b8 0f00 	cmp.w	r8, #0
 800ea48:	f340 8096 	ble.w	800eb78 <_strtod_l+0x538>
 800ea4c:	f018 030f 	ands.w	r3, r8, #15
 800ea50:	d00a      	beq.n	800ea68 <_strtod_l+0x428>
 800ea52:	495f      	ldr	r1, [pc, #380]	; (800ebd0 <_strtod_l+0x590>)
 800ea54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea58:	4652      	mov	r2, sl
 800ea5a:	465b      	mov	r3, fp
 800ea5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea60:	f7f1 fdd2 	bl	8000608 <__aeabi_dmul>
 800ea64:	4682      	mov	sl, r0
 800ea66:	468b      	mov	fp, r1
 800ea68:	f038 080f 	bics.w	r8, r8, #15
 800ea6c:	d073      	beq.n	800eb56 <_strtod_l+0x516>
 800ea6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea72:	dd47      	ble.n	800eb04 <_strtod_l+0x4c4>
 800ea74:	2400      	movs	r4, #0
 800ea76:	46a0      	mov	r8, r4
 800ea78:	9407      	str	r4, [sp, #28]
 800ea7a:	9405      	str	r4, [sp, #20]
 800ea7c:	2322      	movs	r3, #34	; 0x22
 800ea7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ebd8 <_strtod_l+0x598>
 800ea82:	f8c9 3000 	str.w	r3, [r9]
 800ea86:	f04f 0a00 	mov.w	sl, #0
 800ea8a:	9b07      	ldr	r3, [sp, #28]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f43f ae16 	beq.w	800e6be <_strtod_l+0x7e>
 800ea92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ea94:	4648      	mov	r0, r9
 800ea96:	f001 fef7 	bl	8010888 <_Bfree>
 800ea9a:	9905      	ldr	r1, [sp, #20]
 800ea9c:	4648      	mov	r0, r9
 800ea9e:	f001 fef3 	bl	8010888 <_Bfree>
 800eaa2:	4641      	mov	r1, r8
 800eaa4:	4648      	mov	r0, r9
 800eaa6:	f001 feef 	bl	8010888 <_Bfree>
 800eaaa:	9907      	ldr	r1, [sp, #28]
 800eaac:	4648      	mov	r0, r9
 800eaae:	f001 feeb 	bl	8010888 <_Bfree>
 800eab2:	4621      	mov	r1, r4
 800eab4:	4648      	mov	r0, r9
 800eab6:	f001 fee7 	bl	8010888 <_Bfree>
 800eaba:	e600      	b.n	800e6be <_strtod_l+0x7e>
 800eabc:	9a06      	ldr	r2, [sp, #24]
 800eabe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800eac2:	4293      	cmp	r3, r2
 800eac4:	dbba      	blt.n	800ea3c <_strtod_l+0x3fc>
 800eac6:	4d42      	ldr	r5, [pc, #264]	; (800ebd0 <_strtod_l+0x590>)
 800eac8:	f1c4 040f 	rsb	r4, r4, #15
 800eacc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ead0:	4652      	mov	r2, sl
 800ead2:	465b      	mov	r3, fp
 800ead4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ead8:	f7f1 fd96 	bl	8000608 <__aeabi_dmul>
 800eadc:	9b06      	ldr	r3, [sp, #24]
 800eade:	1b1c      	subs	r4, r3, r4
 800eae0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eae4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eae8:	e78d      	b.n	800ea06 <_strtod_l+0x3c6>
 800eaea:	f113 0f16 	cmn.w	r3, #22
 800eaee:	dba5      	blt.n	800ea3c <_strtod_l+0x3fc>
 800eaf0:	4a37      	ldr	r2, [pc, #220]	; (800ebd0 <_strtod_l+0x590>)
 800eaf2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800eaf6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eafa:	4650      	mov	r0, sl
 800eafc:	4659      	mov	r1, fp
 800eafe:	f7f1 fead 	bl	800085c <__aeabi_ddiv>
 800eb02:	e782      	b.n	800ea0a <_strtod_l+0x3ca>
 800eb04:	2300      	movs	r3, #0
 800eb06:	4e33      	ldr	r6, [pc, #204]	; (800ebd4 <_strtod_l+0x594>)
 800eb08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eb0c:	4650      	mov	r0, sl
 800eb0e:	4659      	mov	r1, fp
 800eb10:	461d      	mov	r5, r3
 800eb12:	f1b8 0f01 	cmp.w	r8, #1
 800eb16:	dc21      	bgt.n	800eb5c <_strtod_l+0x51c>
 800eb18:	b10b      	cbz	r3, 800eb1e <_strtod_l+0x4de>
 800eb1a:	4682      	mov	sl, r0
 800eb1c:	468b      	mov	fp, r1
 800eb1e:	4b2d      	ldr	r3, [pc, #180]	; (800ebd4 <_strtod_l+0x594>)
 800eb20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eb24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800eb28:	4652      	mov	r2, sl
 800eb2a:	465b      	mov	r3, fp
 800eb2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eb30:	f7f1 fd6a 	bl	8000608 <__aeabi_dmul>
 800eb34:	4b28      	ldr	r3, [pc, #160]	; (800ebd8 <_strtod_l+0x598>)
 800eb36:	460a      	mov	r2, r1
 800eb38:	400b      	ands	r3, r1
 800eb3a:	4928      	ldr	r1, [pc, #160]	; (800ebdc <_strtod_l+0x59c>)
 800eb3c:	428b      	cmp	r3, r1
 800eb3e:	4682      	mov	sl, r0
 800eb40:	d898      	bhi.n	800ea74 <_strtod_l+0x434>
 800eb42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb46:	428b      	cmp	r3, r1
 800eb48:	bf86      	itte	hi
 800eb4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ebe4 <_strtod_l+0x5a4>
 800eb4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eb56:	2300      	movs	r3, #0
 800eb58:	9304      	str	r3, [sp, #16]
 800eb5a:	e077      	b.n	800ec4c <_strtod_l+0x60c>
 800eb5c:	f018 0f01 	tst.w	r8, #1
 800eb60:	d006      	beq.n	800eb70 <_strtod_l+0x530>
 800eb62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fd4d 	bl	8000608 <__aeabi_dmul>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	3501      	adds	r5, #1
 800eb72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb76:	e7cc      	b.n	800eb12 <_strtod_l+0x4d2>
 800eb78:	d0ed      	beq.n	800eb56 <_strtod_l+0x516>
 800eb7a:	f1c8 0800 	rsb	r8, r8, #0
 800eb7e:	f018 020f 	ands.w	r2, r8, #15
 800eb82:	d00a      	beq.n	800eb9a <_strtod_l+0x55a>
 800eb84:	4b12      	ldr	r3, [pc, #72]	; (800ebd0 <_strtod_l+0x590>)
 800eb86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb8a:	4650      	mov	r0, sl
 800eb8c:	4659      	mov	r1, fp
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fe63 	bl	800085c <__aeabi_ddiv>
 800eb96:	4682      	mov	sl, r0
 800eb98:	468b      	mov	fp, r1
 800eb9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eb9e:	d0da      	beq.n	800eb56 <_strtod_l+0x516>
 800eba0:	f1b8 0f1f 	cmp.w	r8, #31
 800eba4:	dd20      	ble.n	800ebe8 <_strtod_l+0x5a8>
 800eba6:	2400      	movs	r4, #0
 800eba8:	46a0      	mov	r8, r4
 800ebaa:	9407      	str	r4, [sp, #28]
 800ebac:	9405      	str	r4, [sp, #20]
 800ebae:	2322      	movs	r3, #34	; 0x22
 800ebb0:	f04f 0a00 	mov.w	sl, #0
 800ebb4:	f04f 0b00 	mov.w	fp, #0
 800ebb8:	f8c9 3000 	str.w	r3, [r9]
 800ebbc:	e765      	b.n	800ea8a <_strtod_l+0x44a>
 800ebbe:	bf00      	nop
 800ebc0:	080133d1 	.word	0x080133d1
 800ebc4:	0801345b 	.word	0x0801345b
 800ebc8:	080133d9 	.word	0x080133d9
 800ebcc:	0801341c 	.word	0x0801341c
 800ebd0:	08013500 	.word	0x08013500
 800ebd4:	080134d8 	.word	0x080134d8
 800ebd8:	7ff00000 	.word	0x7ff00000
 800ebdc:	7ca00000 	.word	0x7ca00000
 800ebe0:	fff80000 	.word	0xfff80000
 800ebe4:	7fefffff 	.word	0x7fefffff
 800ebe8:	f018 0310 	ands.w	r3, r8, #16
 800ebec:	bf18      	it	ne
 800ebee:	236a      	movne	r3, #106	; 0x6a
 800ebf0:	4da0      	ldr	r5, [pc, #640]	; (800ee74 <_strtod_l+0x834>)
 800ebf2:	9304      	str	r3, [sp, #16]
 800ebf4:	4650      	mov	r0, sl
 800ebf6:	4659      	mov	r1, fp
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f1b8 0f00 	cmp.w	r8, #0
 800ebfe:	f300 810a 	bgt.w	800ee16 <_strtod_l+0x7d6>
 800ec02:	b10b      	cbz	r3, 800ec08 <_strtod_l+0x5c8>
 800ec04:	4682      	mov	sl, r0
 800ec06:	468b      	mov	fp, r1
 800ec08:	9b04      	ldr	r3, [sp, #16]
 800ec0a:	b1bb      	cbz	r3, 800ec3c <_strtod_l+0x5fc>
 800ec0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ec10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	4659      	mov	r1, fp
 800ec18:	dd10      	ble.n	800ec3c <_strtod_l+0x5fc>
 800ec1a:	2b1f      	cmp	r3, #31
 800ec1c:	f340 8107 	ble.w	800ee2e <_strtod_l+0x7ee>
 800ec20:	2b34      	cmp	r3, #52	; 0x34
 800ec22:	bfde      	ittt	le
 800ec24:	3b20      	suble	r3, #32
 800ec26:	f04f 32ff 	movle.w	r2, #4294967295
 800ec2a:	fa02 f303 	lslle.w	r3, r2, r3
 800ec2e:	f04f 0a00 	mov.w	sl, #0
 800ec32:	bfcc      	ite	gt
 800ec34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec38:	ea03 0b01 	andle.w	fp, r3, r1
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2300      	movs	r3, #0
 800ec40:	4650      	mov	r0, sl
 800ec42:	4659      	mov	r1, fp
 800ec44:	f7f1 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d1ac      	bne.n	800eba6 <_strtod_l+0x566>
 800ec4c:	9b07      	ldr	r3, [sp, #28]
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	9a05      	ldr	r2, [sp, #20]
 800ec52:	9908      	ldr	r1, [sp, #32]
 800ec54:	4623      	mov	r3, r4
 800ec56:	4648      	mov	r0, r9
 800ec58:	f001 fe68 	bl	801092c <__s2b>
 800ec5c:	9007      	str	r0, [sp, #28]
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	f43f af08 	beq.w	800ea74 <_strtod_l+0x434>
 800ec64:	9a06      	ldr	r2, [sp, #24]
 800ec66:	9b06      	ldr	r3, [sp, #24]
 800ec68:	2a00      	cmp	r2, #0
 800ec6a:	f1c3 0300 	rsb	r3, r3, #0
 800ec6e:	bfa8      	it	ge
 800ec70:	2300      	movge	r3, #0
 800ec72:	930e      	str	r3, [sp, #56]	; 0x38
 800ec74:	2400      	movs	r4, #0
 800ec76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ec7a:	9316      	str	r3, [sp, #88]	; 0x58
 800ec7c:	46a0      	mov	r8, r4
 800ec7e:	9b07      	ldr	r3, [sp, #28]
 800ec80:	4648      	mov	r0, r9
 800ec82:	6859      	ldr	r1, [r3, #4]
 800ec84:	f001 fdcc 	bl	8010820 <_Balloc>
 800ec88:	9005      	str	r0, [sp, #20]
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	f43f aef6 	beq.w	800ea7c <_strtod_l+0x43c>
 800ec90:	9b07      	ldr	r3, [sp, #28]
 800ec92:	691a      	ldr	r2, [r3, #16]
 800ec94:	3202      	adds	r2, #2
 800ec96:	f103 010c 	add.w	r1, r3, #12
 800ec9a:	0092      	lsls	r2, r2, #2
 800ec9c:	300c      	adds	r0, #12
 800ec9e:	f7fe fd63 	bl	800d768 <memcpy>
 800eca2:	aa1e      	add	r2, sp, #120	; 0x78
 800eca4:	a91d      	add	r1, sp, #116	; 0x74
 800eca6:	ec4b ab10 	vmov	d0, sl, fp
 800ecaa:	4648      	mov	r0, r9
 800ecac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ecb0:	f002 f8f8 	bl	8010ea4 <__d2b>
 800ecb4:	901c      	str	r0, [sp, #112]	; 0x70
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f43f aee0 	beq.w	800ea7c <_strtod_l+0x43c>
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	4648      	mov	r0, r9
 800ecc0:	f001 fec0 	bl	8010a44 <__i2b>
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	f43f aed8 	beq.w	800ea7c <_strtod_l+0x43c>
 800eccc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ecce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ecd0:	2e00      	cmp	r6, #0
 800ecd2:	bfab      	itete	ge
 800ecd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ecd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ecd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ecda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ecdc:	bfac      	ite	ge
 800ecde:	18f7      	addge	r7, r6, r3
 800ece0:	1b9d      	sublt	r5, r3, r6
 800ece2:	9b04      	ldr	r3, [sp, #16]
 800ece4:	1af6      	subs	r6, r6, r3
 800ece6:	4416      	add	r6, r2
 800ece8:	4b63      	ldr	r3, [pc, #396]	; (800ee78 <_strtod_l+0x838>)
 800ecea:	3e01      	subs	r6, #1
 800ecec:	429e      	cmp	r6, r3
 800ecee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ecf2:	f280 80af 	bge.w	800ee54 <_strtod_l+0x814>
 800ecf6:	1b9b      	subs	r3, r3, r6
 800ecf8:	2b1f      	cmp	r3, #31
 800ecfa:	eba2 0203 	sub.w	r2, r2, r3
 800ecfe:	f04f 0101 	mov.w	r1, #1
 800ed02:	f300 809b 	bgt.w	800ee3c <_strtod_l+0x7fc>
 800ed06:	fa01 f303 	lsl.w	r3, r1, r3
 800ed0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ed10:	18be      	adds	r6, r7, r2
 800ed12:	9b04      	ldr	r3, [sp, #16]
 800ed14:	42b7      	cmp	r7, r6
 800ed16:	4415      	add	r5, r2
 800ed18:	441d      	add	r5, r3
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	bfa8      	it	ge
 800ed1e:	4633      	movge	r3, r6
 800ed20:	42ab      	cmp	r3, r5
 800ed22:	bfa8      	it	ge
 800ed24:	462b      	movge	r3, r5
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	bfc2      	ittt	gt
 800ed2a:	1af6      	subgt	r6, r6, r3
 800ed2c:	1aed      	subgt	r5, r5, r3
 800ed2e:	1aff      	subgt	r7, r7, r3
 800ed30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed32:	b1bb      	cbz	r3, 800ed64 <_strtod_l+0x724>
 800ed34:	4641      	mov	r1, r8
 800ed36:	461a      	mov	r2, r3
 800ed38:	4648      	mov	r0, r9
 800ed3a:	f001 ff23 	bl	8010b84 <__pow5mult>
 800ed3e:	4680      	mov	r8, r0
 800ed40:	2800      	cmp	r0, #0
 800ed42:	f43f ae9b 	beq.w	800ea7c <_strtod_l+0x43c>
 800ed46:	4601      	mov	r1, r0
 800ed48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed4a:	4648      	mov	r0, r9
 800ed4c:	f001 fe83 	bl	8010a56 <__multiply>
 800ed50:	900c      	str	r0, [sp, #48]	; 0x30
 800ed52:	2800      	cmp	r0, #0
 800ed54:	f43f ae92 	beq.w	800ea7c <_strtod_l+0x43c>
 800ed58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed5a:	4648      	mov	r0, r9
 800ed5c:	f001 fd94 	bl	8010888 <_Bfree>
 800ed60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed62:	931c      	str	r3, [sp, #112]	; 0x70
 800ed64:	2e00      	cmp	r6, #0
 800ed66:	dc7a      	bgt.n	800ee5e <_strtod_l+0x81e>
 800ed68:	9b06      	ldr	r3, [sp, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	dd08      	ble.n	800ed80 <_strtod_l+0x740>
 800ed6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed70:	9905      	ldr	r1, [sp, #20]
 800ed72:	4648      	mov	r0, r9
 800ed74:	f001 ff06 	bl	8010b84 <__pow5mult>
 800ed78:	9005      	str	r0, [sp, #20]
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f43f ae7e 	beq.w	800ea7c <_strtod_l+0x43c>
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	dd08      	ble.n	800ed96 <_strtod_l+0x756>
 800ed84:	462a      	mov	r2, r5
 800ed86:	9905      	ldr	r1, [sp, #20]
 800ed88:	4648      	mov	r0, r9
 800ed8a:	f001 ff49 	bl	8010c20 <__lshift>
 800ed8e:	9005      	str	r0, [sp, #20]
 800ed90:	2800      	cmp	r0, #0
 800ed92:	f43f ae73 	beq.w	800ea7c <_strtod_l+0x43c>
 800ed96:	2f00      	cmp	r7, #0
 800ed98:	dd08      	ble.n	800edac <_strtod_l+0x76c>
 800ed9a:	4641      	mov	r1, r8
 800ed9c:	463a      	mov	r2, r7
 800ed9e:	4648      	mov	r0, r9
 800eda0:	f001 ff3e 	bl	8010c20 <__lshift>
 800eda4:	4680      	mov	r8, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f43f ae68 	beq.w	800ea7c <_strtod_l+0x43c>
 800edac:	9a05      	ldr	r2, [sp, #20]
 800edae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800edb0:	4648      	mov	r0, r9
 800edb2:	f001 ffa3 	bl	8010cfc <__mdiff>
 800edb6:	4604      	mov	r4, r0
 800edb8:	2800      	cmp	r0, #0
 800edba:	f43f ae5f 	beq.w	800ea7c <_strtod_l+0x43c>
 800edbe:	68c3      	ldr	r3, [r0, #12]
 800edc0:	930c      	str	r3, [sp, #48]	; 0x30
 800edc2:	2300      	movs	r3, #0
 800edc4:	60c3      	str	r3, [r0, #12]
 800edc6:	4641      	mov	r1, r8
 800edc8:	f001 ff7e 	bl	8010cc8 <__mcmp>
 800edcc:	2800      	cmp	r0, #0
 800edce:	da55      	bge.n	800ee7c <_strtod_l+0x83c>
 800edd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edd2:	b9e3      	cbnz	r3, 800ee0e <_strtod_l+0x7ce>
 800edd4:	f1ba 0f00 	cmp.w	sl, #0
 800edd8:	d119      	bne.n	800ee0e <_strtod_l+0x7ce>
 800edda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edde:	b9b3      	cbnz	r3, 800ee0e <_strtod_l+0x7ce>
 800ede0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ede4:	0d1b      	lsrs	r3, r3, #20
 800ede6:	051b      	lsls	r3, r3, #20
 800ede8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800edec:	d90f      	bls.n	800ee0e <_strtod_l+0x7ce>
 800edee:	6963      	ldr	r3, [r4, #20]
 800edf0:	b913      	cbnz	r3, 800edf8 <_strtod_l+0x7b8>
 800edf2:	6923      	ldr	r3, [r4, #16]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	dd0a      	ble.n	800ee0e <_strtod_l+0x7ce>
 800edf8:	4621      	mov	r1, r4
 800edfa:	2201      	movs	r2, #1
 800edfc:	4648      	mov	r0, r9
 800edfe:	f001 ff0f 	bl	8010c20 <__lshift>
 800ee02:	4641      	mov	r1, r8
 800ee04:	4604      	mov	r4, r0
 800ee06:	f001 ff5f 	bl	8010cc8 <__mcmp>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	dc67      	bgt.n	800eede <_strtod_l+0x89e>
 800ee0e:	9b04      	ldr	r3, [sp, #16]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d171      	bne.n	800eef8 <_strtod_l+0x8b8>
 800ee14:	e63d      	b.n	800ea92 <_strtod_l+0x452>
 800ee16:	f018 0f01 	tst.w	r8, #1
 800ee1a:	d004      	beq.n	800ee26 <_strtod_l+0x7e6>
 800ee1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee20:	f7f1 fbf2 	bl	8000608 <__aeabi_dmul>
 800ee24:	2301      	movs	r3, #1
 800ee26:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ee2a:	3508      	adds	r5, #8
 800ee2c:	e6e5      	b.n	800ebfa <_strtod_l+0x5ba>
 800ee2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee32:	fa02 f303 	lsl.w	r3, r2, r3
 800ee36:	ea03 0a0a 	and.w	sl, r3, sl
 800ee3a:	e6ff      	b.n	800ec3c <_strtod_l+0x5fc>
 800ee3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ee40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ee44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ee48:	36e2      	adds	r6, #226	; 0xe2
 800ee4a:	fa01 f306 	lsl.w	r3, r1, r6
 800ee4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee50:	910f      	str	r1, [sp, #60]	; 0x3c
 800ee52:	e75d      	b.n	800ed10 <_strtod_l+0x6d0>
 800ee54:	2300      	movs	r3, #0
 800ee56:	930a      	str	r3, [sp, #40]	; 0x28
 800ee58:	2301      	movs	r3, #1
 800ee5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee5c:	e758      	b.n	800ed10 <_strtod_l+0x6d0>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee62:	4648      	mov	r0, r9
 800ee64:	f001 fedc 	bl	8010c20 <__lshift>
 800ee68:	901c      	str	r0, [sp, #112]	; 0x70
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	f47f af7c 	bne.w	800ed68 <_strtod_l+0x728>
 800ee70:	e604      	b.n	800ea7c <_strtod_l+0x43c>
 800ee72:	bf00      	nop
 800ee74:	08013430 	.word	0x08013430
 800ee78:	fffffc02 	.word	0xfffffc02
 800ee7c:	465d      	mov	r5, fp
 800ee7e:	f040 8086 	bne.w	800ef8e <_strtod_l+0x94e>
 800ee82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee88:	b32a      	cbz	r2, 800eed6 <_strtod_l+0x896>
 800ee8a:	4aaf      	ldr	r2, [pc, #700]	; (800f148 <_strtod_l+0xb08>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d153      	bne.n	800ef38 <_strtod_l+0x8f8>
 800ee90:	9b04      	ldr	r3, [sp, #16]
 800ee92:	4650      	mov	r0, sl
 800ee94:	b1d3      	cbz	r3, 800eecc <_strtod_l+0x88c>
 800ee96:	4aad      	ldr	r2, [pc, #692]	; (800f14c <_strtod_l+0xb0c>)
 800ee98:	402a      	ands	r2, r5
 800ee9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ee9e:	f04f 31ff 	mov.w	r1, #4294967295
 800eea2:	d816      	bhi.n	800eed2 <_strtod_l+0x892>
 800eea4:	0d12      	lsrs	r2, r2, #20
 800eea6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eeaa:	fa01 f303 	lsl.w	r3, r1, r3
 800eeae:	4298      	cmp	r0, r3
 800eeb0:	d142      	bne.n	800ef38 <_strtod_l+0x8f8>
 800eeb2:	4ba7      	ldr	r3, [pc, #668]	; (800f150 <_strtod_l+0xb10>)
 800eeb4:	429d      	cmp	r5, r3
 800eeb6:	d102      	bne.n	800eebe <_strtod_l+0x87e>
 800eeb8:	3001      	adds	r0, #1
 800eeba:	f43f addf 	beq.w	800ea7c <_strtod_l+0x43c>
 800eebe:	4ba3      	ldr	r3, [pc, #652]	; (800f14c <_strtod_l+0xb0c>)
 800eec0:	402b      	ands	r3, r5
 800eec2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eec6:	f04f 0a00 	mov.w	sl, #0
 800eeca:	e7a0      	b.n	800ee0e <_strtod_l+0x7ce>
 800eecc:	f04f 33ff 	mov.w	r3, #4294967295
 800eed0:	e7ed      	b.n	800eeae <_strtod_l+0x86e>
 800eed2:	460b      	mov	r3, r1
 800eed4:	e7eb      	b.n	800eeae <_strtod_l+0x86e>
 800eed6:	bb7b      	cbnz	r3, 800ef38 <_strtod_l+0x8f8>
 800eed8:	f1ba 0f00 	cmp.w	sl, #0
 800eedc:	d12c      	bne.n	800ef38 <_strtod_l+0x8f8>
 800eede:	9904      	ldr	r1, [sp, #16]
 800eee0:	4a9a      	ldr	r2, [pc, #616]	; (800f14c <_strtod_l+0xb0c>)
 800eee2:	465b      	mov	r3, fp
 800eee4:	b1f1      	cbz	r1, 800ef24 <_strtod_l+0x8e4>
 800eee6:	ea02 010b 	and.w	r1, r2, fp
 800eeea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eeee:	dc19      	bgt.n	800ef24 <_strtod_l+0x8e4>
 800eef0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eef4:	f77f ae5b 	ble.w	800ebae <_strtod_l+0x56e>
 800eef8:	4a96      	ldr	r2, [pc, #600]	; (800f154 <_strtod_l+0xb14>)
 800eefa:	2300      	movs	r3, #0
 800eefc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ef00:	4650      	mov	r0, sl
 800ef02:	4659      	mov	r1, fp
 800ef04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef08:	f7f1 fb7e 	bl	8000608 <__aeabi_dmul>
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	468b      	mov	fp, r1
 800ef10:	2900      	cmp	r1, #0
 800ef12:	f47f adbe 	bne.w	800ea92 <_strtod_l+0x452>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f47f adbb 	bne.w	800ea92 <_strtod_l+0x452>
 800ef1c:	2322      	movs	r3, #34	; 0x22
 800ef1e:	f8c9 3000 	str.w	r3, [r9]
 800ef22:	e5b6      	b.n	800ea92 <_strtod_l+0x452>
 800ef24:	4013      	ands	r3, r2
 800ef26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef32:	f04f 3aff 	mov.w	sl, #4294967295
 800ef36:	e76a      	b.n	800ee0e <_strtod_l+0x7ce>
 800ef38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef3a:	b193      	cbz	r3, 800ef62 <_strtod_l+0x922>
 800ef3c:	422b      	tst	r3, r5
 800ef3e:	f43f af66 	beq.w	800ee0e <_strtod_l+0x7ce>
 800ef42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef44:	9a04      	ldr	r2, [sp, #16]
 800ef46:	4650      	mov	r0, sl
 800ef48:	4659      	mov	r1, fp
 800ef4a:	b173      	cbz	r3, 800ef6a <_strtod_l+0x92a>
 800ef4c:	f7ff fb5c 	bl	800e608 <sulp>
 800ef50:	4602      	mov	r2, r0
 800ef52:	460b      	mov	r3, r1
 800ef54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef58:	f7f1 f9a0 	bl	800029c <__adddf3>
 800ef5c:	4682      	mov	sl, r0
 800ef5e:	468b      	mov	fp, r1
 800ef60:	e755      	b.n	800ee0e <_strtod_l+0x7ce>
 800ef62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef64:	ea13 0f0a 	tst.w	r3, sl
 800ef68:	e7e9      	b.n	800ef3e <_strtod_l+0x8fe>
 800ef6a:	f7ff fb4d 	bl	800e608 <sulp>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef76:	f7f1 f98f 	bl	8000298 <__aeabi_dsub>
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4682      	mov	sl, r0
 800ef80:	468b      	mov	fp, r1
 800ef82:	f7f1 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	f47f ae11 	bne.w	800ebae <_strtod_l+0x56e>
 800ef8c:	e73f      	b.n	800ee0e <_strtod_l+0x7ce>
 800ef8e:	4641      	mov	r1, r8
 800ef90:	4620      	mov	r0, r4
 800ef92:	f001 ffd6 	bl	8010f42 <__ratio>
 800ef96:	ec57 6b10 	vmov	r6, r7, d0
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efa0:	ee10 0a10 	vmov	r0, s0
 800efa4:	4639      	mov	r1, r7
 800efa6:	f7f1 fdab 	bl	8000b00 <__aeabi_dcmple>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d077      	beq.n	800f09e <_strtod_l+0xa5e>
 800efae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d04a      	beq.n	800f04a <_strtod_l+0xa0a>
 800efb4:	4b68      	ldr	r3, [pc, #416]	; (800f158 <_strtod_l+0xb18>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800efbc:	4f66      	ldr	r7, [pc, #408]	; (800f158 <_strtod_l+0xb18>)
 800efbe:	2600      	movs	r6, #0
 800efc0:	4b62      	ldr	r3, [pc, #392]	; (800f14c <_strtod_l+0xb0c>)
 800efc2:	402b      	ands	r3, r5
 800efc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800efc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efc8:	4b64      	ldr	r3, [pc, #400]	; (800f15c <_strtod_l+0xb1c>)
 800efca:	429a      	cmp	r2, r3
 800efcc:	f040 80ce 	bne.w	800f16c <_strtod_l+0xb2c>
 800efd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800efd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800efd8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800efdc:	ec4b ab10 	vmov	d0, sl, fp
 800efe0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800efe4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800efe8:	f001 fee6 	bl	8010db8 <__ulp>
 800efec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eff0:	ec53 2b10 	vmov	r2, r3, d0
 800eff4:	f7f1 fb08 	bl	8000608 <__aeabi_dmul>
 800eff8:	4652      	mov	r2, sl
 800effa:	465b      	mov	r3, fp
 800effc:	f7f1 f94e 	bl	800029c <__adddf3>
 800f000:	460b      	mov	r3, r1
 800f002:	4952      	ldr	r1, [pc, #328]	; (800f14c <_strtod_l+0xb0c>)
 800f004:	4a56      	ldr	r2, [pc, #344]	; (800f160 <_strtod_l+0xb20>)
 800f006:	4019      	ands	r1, r3
 800f008:	4291      	cmp	r1, r2
 800f00a:	4682      	mov	sl, r0
 800f00c:	d95b      	bls.n	800f0c6 <_strtod_l+0xa86>
 800f00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f010:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f014:	4293      	cmp	r3, r2
 800f016:	d103      	bne.n	800f020 <_strtod_l+0x9e0>
 800f018:	9b08      	ldr	r3, [sp, #32]
 800f01a:	3301      	adds	r3, #1
 800f01c:	f43f ad2e 	beq.w	800ea7c <_strtod_l+0x43c>
 800f020:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f150 <_strtod_l+0xb10>
 800f024:	f04f 3aff 	mov.w	sl, #4294967295
 800f028:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f02a:	4648      	mov	r0, r9
 800f02c:	f001 fc2c 	bl	8010888 <_Bfree>
 800f030:	9905      	ldr	r1, [sp, #20]
 800f032:	4648      	mov	r0, r9
 800f034:	f001 fc28 	bl	8010888 <_Bfree>
 800f038:	4641      	mov	r1, r8
 800f03a:	4648      	mov	r0, r9
 800f03c:	f001 fc24 	bl	8010888 <_Bfree>
 800f040:	4621      	mov	r1, r4
 800f042:	4648      	mov	r0, r9
 800f044:	f001 fc20 	bl	8010888 <_Bfree>
 800f048:	e619      	b.n	800ec7e <_strtod_l+0x63e>
 800f04a:	f1ba 0f00 	cmp.w	sl, #0
 800f04e:	d11a      	bne.n	800f086 <_strtod_l+0xa46>
 800f050:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f054:	b9eb      	cbnz	r3, 800f092 <_strtod_l+0xa52>
 800f056:	2200      	movs	r2, #0
 800f058:	4b3f      	ldr	r3, [pc, #252]	; (800f158 <_strtod_l+0xb18>)
 800f05a:	4630      	mov	r0, r6
 800f05c:	4639      	mov	r1, r7
 800f05e:	f7f1 fd45 	bl	8000aec <__aeabi_dcmplt>
 800f062:	b9c8      	cbnz	r0, 800f098 <_strtod_l+0xa58>
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	2200      	movs	r2, #0
 800f06a:	4b3e      	ldr	r3, [pc, #248]	; (800f164 <_strtod_l+0xb24>)
 800f06c:	f7f1 facc 	bl	8000608 <__aeabi_dmul>
 800f070:	4606      	mov	r6, r0
 800f072:	460f      	mov	r7, r1
 800f074:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f078:	9618      	str	r6, [sp, #96]	; 0x60
 800f07a:	9319      	str	r3, [sp, #100]	; 0x64
 800f07c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f084:	e79c      	b.n	800efc0 <_strtod_l+0x980>
 800f086:	f1ba 0f01 	cmp.w	sl, #1
 800f08a:	d102      	bne.n	800f092 <_strtod_l+0xa52>
 800f08c:	2d00      	cmp	r5, #0
 800f08e:	f43f ad8e 	beq.w	800ebae <_strtod_l+0x56e>
 800f092:	2200      	movs	r2, #0
 800f094:	4b34      	ldr	r3, [pc, #208]	; (800f168 <_strtod_l+0xb28>)
 800f096:	e78f      	b.n	800efb8 <_strtod_l+0x978>
 800f098:	2600      	movs	r6, #0
 800f09a:	4f32      	ldr	r7, [pc, #200]	; (800f164 <_strtod_l+0xb24>)
 800f09c:	e7ea      	b.n	800f074 <_strtod_l+0xa34>
 800f09e:	4b31      	ldr	r3, [pc, #196]	; (800f164 <_strtod_l+0xb24>)
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f7f1 faaf 	bl	8000608 <__aeabi_dmul>
 800f0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	b933      	cbnz	r3, 800f0c0 <_strtod_l+0xa80>
 800f0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0b6:	9010      	str	r0, [sp, #64]	; 0x40
 800f0b8:	9311      	str	r3, [sp, #68]	; 0x44
 800f0ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0be:	e7df      	b.n	800f080 <_strtod_l+0xa40>
 800f0c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f0c4:	e7f9      	b.n	800f0ba <_strtod_l+0xa7a>
 800f0c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f0ca:	9b04      	ldr	r3, [sp, #16]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1ab      	bne.n	800f028 <_strtod_l+0x9e8>
 800f0d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0d4:	0d1b      	lsrs	r3, r3, #20
 800f0d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0d8:	051b      	lsls	r3, r3, #20
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	465d      	mov	r5, fp
 800f0de:	d1a3      	bne.n	800f028 <_strtod_l+0x9e8>
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7f1 fd40 	bl	8000b68 <__aeabi_d2iz>
 800f0e8:	f7f1 fa24 	bl	8000534 <__aeabi_i2d>
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	4639      	mov	r1, r7
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f7f1 f8d0 	bl	8000298 <__aeabi_dsub>
 800f0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460f      	mov	r7, r1
 800f0fe:	b933      	cbnz	r3, 800f10e <_strtod_l+0xace>
 800f100:	f1ba 0f00 	cmp.w	sl, #0
 800f104:	d103      	bne.n	800f10e <_strtod_l+0xace>
 800f106:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f10a:	2d00      	cmp	r5, #0
 800f10c:	d06d      	beq.n	800f1ea <_strtod_l+0xbaa>
 800f10e:	a30a      	add	r3, pc, #40	; (adr r3, 800f138 <_strtod_l+0xaf8>)
 800f110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f114:	4630      	mov	r0, r6
 800f116:	4639      	mov	r1, r7
 800f118:	f7f1 fce8 	bl	8000aec <__aeabi_dcmplt>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	f47f acb8 	bne.w	800ea92 <_strtod_l+0x452>
 800f122:	a307      	add	r3, pc, #28	; (adr r3, 800f140 <_strtod_l+0xb00>)
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 fcfc 	bl	8000b28 <__aeabi_dcmpgt>
 800f130:	2800      	cmp	r0, #0
 800f132:	f43f af79 	beq.w	800f028 <_strtod_l+0x9e8>
 800f136:	e4ac      	b.n	800ea92 <_strtod_l+0x452>
 800f138:	94a03595 	.word	0x94a03595
 800f13c:	3fdfffff 	.word	0x3fdfffff
 800f140:	35afe535 	.word	0x35afe535
 800f144:	3fe00000 	.word	0x3fe00000
 800f148:	000fffff 	.word	0x000fffff
 800f14c:	7ff00000 	.word	0x7ff00000
 800f150:	7fefffff 	.word	0x7fefffff
 800f154:	39500000 	.word	0x39500000
 800f158:	3ff00000 	.word	0x3ff00000
 800f15c:	7fe00000 	.word	0x7fe00000
 800f160:	7c9fffff 	.word	0x7c9fffff
 800f164:	3fe00000 	.word	0x3fe00000
 800f168:	bff00000 	.word	0xbff00000
 800f16c:	9b04      	ldr	r3, [sp, #16]
 800f16e:	b333      	cbz	r3, 800f1be <_strtod_l+0xb7e>
 800f170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f172:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f176:	d822      	bhi.n	800f1be <_strtod_l+0xb7e>
 800f178:	a327      	add	r3, pc, #156	; (adr r3, 800f218 <_strtod_l+0xbd8>)
 800f17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17e:	4630      	mov	r0, r6
 800f180:	4639      	mov	r1, r7
 800f182:	f7f1 fcbd 	bl	8000b00 <__aeabi_dcmple>
 800f186:	b1a0      	cbz	r0, 800f1b2 <_strtod_l+0xb72>
 800f188:	4639      	mov	r1, r7
 800f18a:	4630      	mov	r0, r6
 800f18c:	f7f1 fd14 	bl	8000bb8 <__aeabi_d2uiz>
 800f190:	2800      	cmp	r0, #0
 800f192:	bf08      	it	eq
 800f194:	2001      	moveq	r0, #1
 800f196:	f7f1 f9bd 	bl	8000514 <__aeabi_ui2d>
 800f19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f19c:	4606      	mov	r6, r0
 800f19e:	460f      	mov	r7, r1
 800f1a0:	bb03      	cbnz	r3, 800f1e4 <_strtod_l+0xba4>
 800f1a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1a6:	9012      	str	r0, [sp, #72]	; 0x48
 800f1a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f1aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f1ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f1ba:	1a9b      	subs	r3, r3, r2
 800f1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1be:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f1c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f1c6:	f001 fdf7 	bl	8010db8 <__ulp>
 800f1ca:	4650      	mov	r0, sl
 800f1cc:	ec53 2b10 	vmov	r2, r3, d0
 800f1d0:	4659      	mov	r1, fp
 800f1d2:	f7f1 fa19 	bl	8000608 <__aeabi_dmul>
 800f1d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1da:	f7f1 f85f 	bl	800029c <__adddf3>
 800f1de:	4682      	mov	sl, r0
 800f1e0:	468b      	mov	fp, r1
 800f1e2:	e772      	b.n	800f0ca <_strtod_l+0xa8a>
 800f1e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f1e8:	e7df      	b.n	800f1aa <_strtod_l+0xb6a>
 800f1ea:	a30d      	add	r3, pc, #52	; (adr r3, 800f220 <_strtod_l+0xbe0>)
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	f7f1 fc7c 	bl	8000aec <__aeabi_dcmplt>
 800f1f4:	e79c      	b.n	800f130 <_strtod_l+0xaf0>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f1fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f1fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	f7ff ba61 	b.w	800e6c6 <_strtod_l+0x86>
 800f204:	2b65      	cmp	r3, #101	; 0x65
 800f206:	f04f 0200 	mov.w	r2, #0
 800f20a:	f43f ab4e 	beq.w	800e8aa <_strtod_l+0x26a>
 800f20e:	2101      	movs	r1, #1
 800f210:	4614      	mov	r4, r2
 800f212:	9104      	str	r1, [sp, #16]
 800f214:	f7ff bacb 	b.w	800e7ae <_strtod_l+0x16e>
 800f218:	ffc00000 	.word	0xffc00000
 800f21c:	41dfffff 	.word	0x41dfffff
 800f220:	94a03595 	.word	0x94a03595
 800f224:	3fcfffff 	.word	0x3fcfffff

0800f228 <_strtod_r>:
 800f228:	4b05      	ldr	r3, [pc, #20]	; (800f240 <_strtod_r+0x18>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	b410      	push	{r4}
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	4c04      	ldr	r4, [pc, #16]	; (800f244 <_strtod_r+0x1c>)
 800f232:	2b00      	cmp	r3, #0
 800f234:	bf08      	it	eq
 800f236:	4623      	moveq	r3, r4
 800f238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f23c:	f7ff ba00 	b.w	800e640 <_strtod_l>
 800f240:	200002d0 	.word	0x200002d0
 800f244:	20000334 	.word	0x20000334

0800f248 <_strtol_l.isra.0>:
 800f248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f24c:	4680      	mov	r8, r0
 800f24e:	4689      	mov	r9, r1
 800f250:	4692      	mov	sl, r2
 800f252:	461e      	mov	r6, r3
 800f254:	460f      	mov	r7, r1
 800f256:	463d      	mov	r5, r7
 800f258:	9808      	ldr	r0, [sp, #32]
 800f25a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f25e:	f001 fab7 	bl	80107d0 <__locale_ctype_ptr_l>
 800f262:	4420      	add	r0, r4
 800f264:	7843      	ldrb	r3, [r0, #1]
 800f266:	f013 0308 	ands.w	r3, r3, #8
 800f26a:	d132      	bne.n	800f2d2 <_strtol_l.isra.0+0x8a>
 800f26c:	2c2d      	cmp	r4, #45	; 0x2d
 800f26e:	d132      	bne.n	800f2d6 <_strtol_l.isra.0+0x8e>
 800f270:	787c      	ldrb	r4, [r7, #1]
 800f272:	1cbd      	adds	r5, r7, #2
 800f274:	2201      	movs	r2, #1
 800f276:	2e00      	cmp	r6, #0
 800f278:	d05d      	beq.n	800f336 <_strtol_l.isra.0+0xee>
 800f27a:	2e10      	cmp	r6, #16
 800f27c:	d109      	bne.n	800f292 <_strtol_l.isra.0+0x4a>
 800f27e:	2c30      	cmp	r4, #48	; 0x30
 800f280:	d107      	bne.n	800f292 <_strtol_l.isra.0+0x4a>
 800f282:	782b      	ldrb	r3, [r5, #0]
 800f284:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f288:	2b58      	cmp	r3, #88	; 0x58
 800f28a:	d14f      	bne.n	800f32c <_strtol_l.isra.0+0xe4>
 800f28c:	786c      	ldrb	r4, [r5, #1]
 800f28e:	2610      	movs	r6, #16
 800f290:	3502      	adds	r5, #2
 800f292:	2a00      	cmp	r2, #0
 800f294:	bf14      	ite	ne
 800f296:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f29a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f29e:	2700      	movs	r7, #0
 800f2a0:	fbb1 fcf6 	udiv	ip, r1, r6
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f2aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f2ae:	2b09      	cmp	r3, #9
 800f2b0:	d817      	bhi.n	800f2e2 <_strtol_l.isra.0+0x9a>
 800f2b2:	461c      	mov	r4, r3
 800f2b4:	42a6      	cmp	r6, r4
 800f2b6:	dd23      	ble.n	800f300 <_strtol_l.isra.0+0xb8>
 800f2b8:	1c7b      	adds	r3, r7, #1
 800f2ba:	d007      	beq.n	800f2cc <_strtol_l.isra.0+0x84>
 800f2bc:	4584      	cmp	ip, r0
 800f2be:	d31c      	bcc.n	800f2fa <_strtol_l.isra.0+0xb2>
 800f2c0:	d101      	bne.n	800f2c6 <_strtol_l.isra.0+0x7e>
 800f2c2:	45a6      	cmp	lr, r4
 800f2c4:	db19      	blt.n	800f2fa <_strtol_l.isra.0+0xb2>
 800f2c6:	fb00 4006 	mla	r0, r0, r6, r4
 800f2ca:	2701      	movs	r7, #1
 800f2cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2d0:	e7eb      	b.n	800f2aa <_strtol_l.isra.0+0x62>
 800f2d2:	462f      	mov	r7, r5
 800f2d4:	e7bf      	b.n	800f256 <_strtol_l.isra.0+0xe>
 800f2d6:	2c2b      	cmp	r4, #43	; 0x2b
 800f2d8:	bf04      	itt	eq
 800f2da:	1cbd      	addeq	r5, r7, #2
 800f2dc:	787c      	ldrbeq	r4, [r7, #1]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	e7c9      	b.n	800f276 <_strtol_l.isra.0+0x2e>
 800f2e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f2e6:	2b19      	cmp	r3, #25
 800f2e8:	d801      	bhi.n	800f2ee <_strtol_l.isra.0+0xa6>
 800f2ea:	3c37      	subs	r4, #55	; 0x37
 800f2ec:	e7e2      	b.n	800f2b4 <_strtol_l.isra.0+0x6c>
 800f2ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f2f2:	2b19      	cmp	r3, #25
 800f2f4:	d804      	bhi.n	800f300 <_strtol_l.isra.0+0xb8>
 800f2f6:	3c57      	subs	r4, #87	; 0x57
 800f2f8:	e7dc      	b.n	800f2b4 <_strtol_l.isra.0+0x6c>
 800f2fa:	f04f 37ff 	mov.w	r7, #4294967295
 800f2fe:	e7e5      	b.n	800f2cc <_strtol_l.isra.0+0x84>
 800f300:	1c7b      	adds	r3, r7, #1
 800f302:	d108      	bne.n	800f316 <_strtol_l.isra.0+0xce>
 800f304:	2322      	movs	r3, #34	; 0x22
 800f306:	f8c8 3000 	str.w	r3, [r8]
 800f30a:	4608      	mov	r0, r1
 800f30c:	f1ba 0f00 	cmp.w	sl, #0
 800f310:	d107      	bne.n	800f322 <_strtol_l.isra.0+0xda>
 800f312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f316:	b102      	cbz	r2, 800f31a <_strtol_l.isra.0+0xd2>
 800f318:	4240      	negs	r0, r0
 800f31a:	f1ba 0f00 	cmp.w	sl, #0
 800f31e:	d0f8      	beq.n	800f312 <_strtol_l.isra.0+0xca>
 800f320:	b10f      	cbz	r7, 800f326 <_strtol_l.isra.0+0xde>
 800f322:	f105 39ff 	add.w	r9, r5, #4294967295
 800f326:	f8ca 9000 	str.w	r9, [sl]
 800f32a:	e7f2      	b.n	800f312 <_strtol_l.isra.0+0xca>
 800f32c:	2430      	movs	r4, #48	; 0x30
 800f32e:	2e00      	cmp	r6, #0
 800f330:	d1af      	bne.n	800f292 <_strtol_l.isra.0+0x4a>
 800f332:	2608      	movs	r6, #8
 800f334:	e7ad      	b.n	800f292 <_strtol_l.isra.0+0x4a>
 800f336:	2c30      	cmp	r4, #48	; 0x30
 800f338:	d0a3      	beq.n	800f282 <_strtol_l.isra.0+0x3a>
 800f33a:	260a      	movs	r6, #10
 800f33c:	e7a9      	b.n	800f292 <_strtol_l.isra.0+0x4a>
	...

0800f340 <_strtol_r>:
 800f340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f342:	4c06      	ldr	r4, [pc, #24]	; (800f35c <_strtol_r+0x1c>)
 800f344:	4d06      	ldr	r5, [pc, #24]	; (800f360 <_strtol_r+0x20>)
 800f346:	6824      	ldr	r4, [r4, #0]
 800f348:	6a24      	ldr	r4, [r4, #32]
 800f34a:	2c00      	cmp	r4, #0
 800f34c:	bf08      	it	eq
 800f34e:	462c      	moveq	r4, r5
 800f350:	9400      	str	r4, [sp, #0]
 800f352:	f7ff ff79 	bl	800f248 <_strtol_l.isra.0>
 800f356:	b003      	add	sp, #12
 800f358:	bd30      	pop	{r4, r5, pc}
 800f35a:	bf00      	nop
 800f35c:	200002d0 	.word	0x200002d0
 800f360:	20000334 	.word	0x20000334

0800f364 <quorem>:
 800f364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	6903      	ldr	r3, [r0, #16]
 800f36a:	690c      	ldr	r4, [r1, #16]
 800f36c:	42a3      	cmp	r3, r4
 800f36e:	4680      	mov	r8, r0
 800f370:	f2c0 8082 	blt.w	800f478 <quorem+0x114>
 800f374:	3c01      	subs	r4, #1
 800f376:	f101 0714 	add.w	r7, r1, #20
 800f37a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f37e:	f100 0614 	add.w	r6, r0, #20
 800f382:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f386:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f38a:	eb06 030c 	add.w	r3, r6, ip
 800f38e:	3501      	adds	r5, #1
 800f390:	eb07 090c 	add.w	r9, r7, ip
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	fbb0 f5f5 	udiv	r5, r0, r5
 800f39a:	b395      	cbz	r5, 800f402 <quorem+0x9e>
 800f39c:	f04f 0a00 	mov.w	sl, #0
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	46b6      	mov	lr, r6
 800f3a4:	46d3      	mov	fp, sl
 800f3a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f3aa:	b293      	uxth	r3, r2
 800f3ac:	fb05 a303 	mla	r3, r5, r3, sl
 800f3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	ebab 0303 	sub.w	r3, fp, r3
 800f3ba:	0c12      	lsrs	r2, r2, #16
 800f3bc:	f8de b000 	ldr.w	fp, [lr]
 800f3c0:	fb05 a202 	mla	r2, r5, r2, sl
 800f3c4:	fa13 f38b 	uxtah	r3, r3, fp
 800f3c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f3cc:	fa1f fb82 	uxth.w	fp, r2
 800f3d0:	f8de 2000 	ldr.w	r2, [lr]
 800f3d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f3d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3e2:	4581      	cmp	r9, r0
 800f3e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f3e8:	f84e 3b04 	str.w	r3, [lr], #4
 800f3ec:	d2db      	bcs.n	800f3a6 <quorem+0x42>
 800f3ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800f3f2:	b933      	cbnz	r3, 800f402 <quorem+0x9e>
 800f3f4:	9b01      	ldr	r3, [sp, #4]
 800f3f6:	3b04      	subs	r3, #4
 800f3f8:	429e      	cmp	r6, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	d330      	bcc.n	800f460 <quorem+0xfc>
 800f3fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800f402:	4640      	mov	r0, r8
 800f404:	f001 fc60 	bl	8010cc8 <__mcmp>
 800f408:	2800      	cmp	r0, #0
 800f40a:	db25      	blt.n	800f458 <quorem+0xf4>
 800f40c:	3501      	adds	r5, #1
 800f40e:	4630      	mov	r0, r6
 800f410:	f04f 0c00 	mov.w	ip, #0
 800f414:	f857 2b04 	ldr.w	r2, [r7], #4
 800f418:	f8d0 e000 	ldr.w	lr, [r0]
 800f41c:	b293      	uxth	r3, r2
 800f41e:	ebac 0303 	sub.w	r3, ip, r3
 800f422:	0c12      	lsrs	r2, r2, #16
 800f424:	fa13 f38e 	uxtah	r3, r3, lr
 800f428:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f42c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f430:	b29b      	uxth	r3, r3
 800f432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f436:	45b9      	cmp	r9, r7
 800f438:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f43c:	f840 3b04 	str.w	r3, [r0], #4
 800f440:	d2e8      	bcs.n	800f414 <quorem+0xb0>
 800f442:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f446:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f44a:	b92a      	cbnz	r2, 800f458 <quorem+0xf4>
 800f44c:	3b04      	subs	r3, #4
 800f44e:	429e      	cmp	r6, r3
 800f450:	461a      	mov	r2, r3
 800f452:	d30b      	bcc.n	800f46c <quorem+0x108>
 800f454:	f8c8 4010 	str.w	r4, [r8, #16]
 800f458:	4628      	mov	r0, r5
 800f45a:	b003      	add	sp, #12
 800f45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f460:	6812      	ldr	r2, [r2, #0]
 800f462:	3b04      	subs	r3, #4
 800f464:	2a00      	cmp	r2, #0
 800f466:	d1ca      	bne.n	800f3fe <quorem+0x9a>
 800f468:	3c01      	subs	r4, #1
 800f46a:	e7c5      	b.n	800f3f8 <quorem+0x94>
 800f46c:	6812      	ldr	r2, [r2, #0]
 800f46e:	3b04      	subs	r3, #4
 800f470:	2a00      	cmp	r2, #0
 800f472:	d1ef      	bne.n	800f454 <quorem+0xf0>
 800f474:	3c01      	subs	r4, #1
 800f476:	e7ea      	b.n	800f44e <quorem+0xea>
 800f478:	2000      	movs	r0, #0
 800f47a:	e7ee      	b.n	800f45a <quorem+0xf6>
 800f47c:	0000      	movs	r0, r0
	...

0800f480 <_dtoa_r>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	ec57 6b10 	vmov	r6, r7, d0
 800f488:	b097      	sub	sp, #92	; 0x5c
 800f48a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f48c:	9106      	str	r1, [sp, #24]
 800f48e:	4604      	mov	r4, r0
 800f490:	920b      	str	r2, [sp, #44]	; 0x2c
 800f492:	9312      	str	r3, [sp, #72]	; 0x48
 800f494:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f498:	e9cd 6700 	strd	r6, r7, [sp]
 800f49c:	b93d      	cbnz	r5, 800f4ae <_dtoa_r+0x2e>
 800f49e:	2010      	movs	r0, #16
 800f4a0:	f7fe f95a 	bl	800d758 <malloc>
 800f4a4:	6260      	str	r0, [r4, #36]	; 0x24
 800f4a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f4aa:	6005      	str	r5, [r0, #0]
 800f4ac:	60c5      	str	r5, [r0, #12]
 800f4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4b0:	6819      	ldr	r1, [r3, #0]
 800f4b2:	b151      	cbz	r1, 800f4ca <_dtoa_r+0x4a>
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	604a      	str	r2, [r1, #4]
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	4093      	lsls	r3, r2
 800f4bc:	608b      	str	r3, [r1, #8]
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f001 f9e2 	bl	8010888 <_Bfree>
 800f4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	1e3b      	subs	r3, r7, #0
 800f4cc:	bfbb      	ittet	lt
 800f4ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4d2:	9301      	strlt	r3, [sp, #4]
 800f4d4:	2300      	movge	r3, #0
 800f4d6:	2201      	movlt	r2, #1
 800f4d8:	bfac      	ite	ge
 800f4da:	f8c8 3000 	strge.w	r3, [r8]
 800f4de:	f8c8 2000 	strlt.w	r2, [r8]
 800f4e2:	4baf      	ldr	r3, [pc, #700]	; (800f7a0 <_dtoa_r+0x320>)
 800f4e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4e8:	ea33 0308 	bics.w	r3, r3, r8
 800f4ec:	d114      	bne.n	800f518 <_dtoa_r+0x98>
 800f4ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4f4:	6013      	str	r3, [r2, #0]
 800f4f6:	9b00      	ldr	r3, [sp, #0]
 800f4f8:	b923      	cbnz	r3, 800f504 <_dtoa_r+0x84>
 800f4fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f000 8542 	beq.w	800ff88 <_dtoa_r+0xb08>
 800f504:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f506:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f7b4 <_dtoa_r+0x334>
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 8544 	beq.w	800ff98 <_dtoa_r+0xb18>
 800f510:	f10b 0303 	add.w	r3, fp, #3
 800f514:	f000 bd3e 	b.w	800ff94 <_dtoa_r+0xb14>
 800f518:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f51c:	2200      	movs	r2, #0
 800f51e:	2300      	movs	r3, #0
 800f520:	4630      	mov	r0, r6
 800f522:	4639      	mov	r1, r7
 800f524:	f7f1 fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 800f528:	4681      	mov	r9, r0
 800f52a:	b168      	cbz	r0, 800f548 <_dtoa_r+0xc8>
 800f52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f52e:	2301      	movs	r3, #1
 800f530:	6013      	str	r3, [r2, #0]
 800f532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 8524 	beq.w	800ff82 <_dtoa_r+0xb02>
 800f53a:	4b9a      	ldr	r3, [pc, #616]	; (800f7a4 <_dtoa_r+0x324>)
 800f53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f53e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	f000 bd28 	b.w	800ff98 <_dtoa_r+0xb18>
 800f548:	aa14      	add	r2, sp, #80	; 0x50
 800f54a:	a915      	add	r1, sp, #84	; 0x54
 800f54c:	ec47 6b10 	vmov	d0, r6, r7
 800f550:	4620      	mov	r0, r4
 800f552:	f001 fca7 	bl	8010ea4 <__d2b>
 800f556:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f55a:	9004      	str	r0, [sp, #16]
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	d07c      	beq.n	800f65a <_dtoa_r+0x1da>
 800f560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f564:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f568:	46b2      	mov	sl, r6
 800f56a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f56e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f572:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f576:	2200      	movs	r2, #0
 800f578:	4b8b      	ldr	r3, [pc, #556]	; (800f7a8 <_dtoa_r+0x328>)
 800f57a:	4650      	mov	r0, sl
 800f57c:	4659      	mov	r1, fp
 800f57e:	f7f0 fe8b 	bl	8000298 <__aeabi_dsub>
 800f582:	a381      	add	r3, pc, #516	; (adr r3, 800f788 <_dtoa_r+0x308>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f1 f83e 	bl	8000608 <__aeabi_dmul>
 800f58c:	a380      	add	r3, pc, #512	; (adr r3, 800f790 <_dtoa_r+0x310>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f0 fe83 	bl	800029c <__adddf3>
 800f596:	4606      	mov	r6, r0
 800f598:	4628      	mov	r0, r5
 800f59a:	460f      	mov	r7, r1
 800f59c:	f7f0 ffca 	bl	8000534 <__aeabi_i2d>
 800f5a0:	a37d      	add	r3, pc, #500	; (adr r3, 800f798 <_dtoa_r+0x318>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f1 f82f 	bl	8000608 <__aeabi_dmul>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	f7f0 fe73 	bl	800029c <__adddf3>
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	f7f1 fad5 	bl	8000b68 <__aeabi_d2iz>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f7f1 fa90 	bl	8000aec <__aeabi_dcmplt>
 800f5cc:	b148      	cbz	r0, 800f5e2 <_dtoa_r+0x162>
 800f5ce:	4650      	mov	r0, sl
 800f5d0:	f7f0 ffb0 	bl	8000534 <__aeabi_i2d>
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	463b      	mov	r3, r7
 800f5d8:	f7f1 fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5dc:	b908      	cbnz	r0, 800f5e2 <_dtoa_r+0x162>
 800f5de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5e2:	f1ba 0f16 	cmp.w	sl, #22
 800f5e6:	d859      	bhi.n	800f69c <_dtoa_r+0x21c>
 800f5e8:	4970      	ldr	r1, [pc, #448]	; (800f7ac <_dtoa_r+0x32c>)
 800f5ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f5ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5f6:	f7f1 fa97 	bl	8000b28 <__aeabi_dcmpgt>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d050      	beq.n	800f6a0 <_dtoa_r+0x220>
 800f5fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f602:	2300      	movs	r3, #0
 800f604:	930f      	str	r3, [sp, #60]	; 0x3c
 800f606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f608:	1b5d      	subs	r5, r3, r5
 800f60a:	f1b5 0801 	subs.w	r8, r5, #1
 800f60e:	bf49      	itett	mi
 800f610:	f1c5 0301 	rsbmi	r3, r5, #1
 800f614:	2300      	movpl	r3, #0
 800f616:	9305      	strmi	r3, [sp, #20]
 800f618:	f04f 0800 	movmi.w	r8, #0
 800f61c:	bf58      	it	pl
 800f61e:	9305      	strpl	r3, [sp, #20]
 800f620:	f1ba 0f00 	cmp.w	sl, #0
 800f624:	db3e      	blt.n	800f6a4 <_dtoa_r+0x224>
 800f626:	2300      	movs	r3, #0
 800f628:	44d0      	add	r8, sl
 800f62a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f62e:	9307      	str	r3, [sp, #28]
 800f630:	9b06      	ldr	r3, [sp, #24]
 800f632:	2b09      	cmp	r3, #9
 800f634:	f200 8090 	bhi.w	800f758 <_dtoa_r+0x2d8>
 800f638:	2b05      	cmp	r3, #5
 800f63a:	bfc4      	itt	gt
 800f63c:	3b04      	subgt	r3, #4
 800f63e:	9306      	strgt	r3, [sp, #24]
 800f640:	9b06      	ldr	r3, [sp, #24]
 800f642:	f1a3 0302 	sub.w	r3, r3, #2
 800f646:	bfcc      	ite	gt
 800f648:	2500      	movgt	r5, #0
 800f64a:	2501      	movle	r5, #1
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	f200 808f 	bhi.w	800f770 <_dtoa_r+0x2f0>
 800f652:	e8df f003 	tbb	[pc, r3]
 800f656:	7f7d      	.short	0x7f7d
 800f658:	7131      	.short	0x7131
 800f65a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f65e:	441d      	add	r5, r3
 800f660:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f664:	2820      	cmp	r0, #32
 800f666:	dd13      	ble.n	800f690 <_dtoa_r+0x210>
 800f668:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f66c:	9b00      	ldr	r3, [sp, #0]
 800f66e:	fa08 f800 	lsl.w	r8, r8, r0
 800f672:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f676:	fa23 f000 	lsr.w	r0, r3, r0
 800f67a:	ea48 0000 	orr.w	r0, r8, r0
 800f67e:	f7f0 ff49 	bl	8000514 <__aeabi_ui2d>
 800f682:	2301      	movs	r3, #1
 800f684:	4682      	mov	sl, r0
 800f686:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f68a:	3d01      	subs	r5, #1
 800f68c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f68e:	e772      	b.n	800f576 <_dtoa_r+0xf6>
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	f1c0 0020 	rsb	r0, r0, #32
 800f696:	fa03 f000 	lsl.w	r0, r3, r0
 800f69a:	e7f0      	b.n	800f67e <_dtoa_r+0x1fe>
 800f69c:	2301      	movs	r3, #1
 800f69e:	e7b1      	b.n	800f604 <_dtoa_r+0x184>
 800f6a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6a2:	e7b0      	b.n	800f606 <_dtoa_r+0x186>
 800f6a4:	9b05      	ldr	r3, [sp, #20]
 800f6a6:	eba3 030a 	sub.w	r3, r3, sl
 800f6aa:	9305      	str	r3, [sp, #20]
 800f6ac:	f1ca 0300 	rsb	r3, sl, #0
 800f6b0:	9307      	str	r3, [sp, #28]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	930e      	str	r3, [sp, #56]	; 0x38
 800f6b6:	e7bb      	b.n	800f630 <_dtoa_r+0x1b0>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dd59      	ble.n	800f776 <_dtoa_r+0x2f6>
 800f6c2:	9302      	str	r3, [sp, #8]
 800f6c4:	4699      	mov	r9, r3
 800f6c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	6072      	str	r2, [r6, #4]
 800f6cc:	2204      	movs	r2, #4
 800f6ce:	f102 0014 	add.w	r0, r2, #20
 800f6d2:	4298      	cmp	r0, r3
 800f6d4:	6871      	ldr	r1, [r6, #4]
 800f6d6:	d953      	bls.n	800f780 <_dtoa_r+0x300>
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f001 f8a1 	bl	8010820 <_Balloc>
 800f6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6e0:	6030      	str	r0, [r6, #0]
 800f6e2:	f1b9 0f0e 	cmp.w	r9, #14
 800f6e6:	f8d3 b000 	ldr.w	fp, [r3]
 800f6ea:	f200 80e6 	bhi.w	800f8ba <_dtoa_r+0x43a>
 800f6ee:	2d00      	cmp	r5, #0
 800f6f0:	f000 80e3 	beq.w	800f8ba <_dtoa_r+0x43a>
 800f6f4:	ed9d 7b00 	vldr	d7, [sp]
 800f6f8:	f1ba 0f00 	cmp.w	sl, #0
 800f6fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f700:	dd74      	ble.n	800f7ec <_dtoa_r+0x36c>
 800f702:	4a2a      	ldr	r2, [pc, #168]	; (800f7ac <_dtoa_r+0x32c>)
 800f704:	f00a 030f 	and.w	r3, sl, #15
 800f708:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f70c:	ed93 7b00 	vldr	d7, [r3]
 800f710:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f714:	06f0      	lsls	r0, r6, #27
 800f716:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f71a:	d565      	bpl.n	800f7e8 <_dtoa_r+0x368>
 800f71c:	4b24      	ldr	r3, [pc, #144]	; (800f7b0 <_dtoa_r+0x330>)
 800f71e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f726:	f7f1 f899 	bl	800085c <__aeabi_ddiv>
 800f72a:	e9cd 0100 	strd	r0, r1, [sp]
 800f72e:	f006 060f 	and.w	r6, r6, #15
 800f732:	2503      	movs	r5, #3
 800f734:	4f1e      	ldr	r7, [pc, #120]	; (800f7b0 <_dtoa_r+0x330>)
 800f736:	e04c      	b.n	800f7d2 <_dtoa_r+0x352>
 800f738:	2301      	movs	r3, #1
 800f73a:	930a      	str	r3, [sp, #40]	; 0x28
 800f73c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f73e:	4453      	add	r3, sl
 800f740:	f103 0901 	add.w	r9, r3, #1
 800f744:	9302      	str	r3, [sp, #8]
 800f746:	464b      	mov	r3, r9
 800f748:	2b01      	cmp	r3, #1
 800f74a:	bfb8      	it	lt
 800f74c:	2301      	movlt	r3, #1
 800f74e:	e7ba      	b.n	800f6c6 <_dtoa_r+0x246>
 800f750:	2300      	movs	r3, #0
 800f752:	e7b2      	b.n	800f6ba <_dtoa_r+0x23a>
 800f754:	2300      	movs	r3, #0
 800f756:	e7f0      	b.n	800f73a <_dtoa_r+0x2ba>
 800f758:	2501      	movs	r5, #1
 800f75a:	2300      	movs	r3, #0
 800f75c:	9306      	str	r3, [sp, #24]
 800f75e:	950a      	str	r5, [sp, #40]	; 0x28
 800f760:	f04f 33ff 	mov.w	r3, #4294967295
 800f764:	9302      	str	r3, [sp, #8]
 800f766:	4699      	mov	r9, r3
 800f768:	2200      	movs	r2, #0
 800f76a:	2312      	movs	r3, #18
 800f76c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f76e:	e7aa      	b.n	800f6c6 <_dtoa_r+0x246>
 800f770:	2301      	movs	r3, #1
 800f772:	930a      	str	r3, [sp, #40]	; 0x28
 800f774:	e7f4      	b.n	800f760 <_dtoa_r+0x2e0>
 800f776:	2301      	movs	r3, #1
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	4699      	mov	r9, r3
 800f77c:	461a      	mov	r2, r3
 800f77e:	e7f5      	b.n	800f76c <_dtoa_r+0x2ec>
 800f780:	3101      	adds	r1, #1
 800f782:	6071      	str	r1, [r6, #4]
 800f784:	0052      	lsls	r2, r2, #1
 800f786:	e7a2      	b.n	800f6ce <_dtoa_r+0x24e>
 800f788:	636f4361 	.word	0x636f4361
 800f78c:	3fd287a7 	.word	0x3fd287a7
 800f790:	8b60c8b3 	.word	0x8b60c8b3
 800f794:	3fc68a28 	.word	0x3fc68a28
 800f798:	509f79fb 	.word	0x509f79fb
 800f79c:	3fd34413 	.word	0x3fd34413
 800f7a0:	7ff00000 	.word	0x7ff00000
 800f7a4:	080133dd 	.word	0x080133dd
 800f7a8:	3ff80000 	.word	0x3ff80000
 800f7ac:	08013500 	.word	0x08013500
 800f7b0:	080134d8 	.word	0x080134d8
 800f7b4:	08013461 	.word	0x08013461
 800f7b8:	07f1      	lsls	r1, r6, #31
 800f7ba:	d508      	bpl.n	800f7ce <_dtoa_r+0x34e>
 800f7bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7c4:	f7f0 ff20 	bl	8000608 <__aeabi_dmul>
 800f7c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7cc:	3501      	adds	r5, #1
 800f7ce:	1076      	asrs	r6, r6, #1
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	2e00      	cmp	r6, #0
 800f7d4:	d1f0      	bne.n	800f7b8 <_dtoa_r+0x338>
 800f7d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f7da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7de:	f7f1 f83d 	bl	800085c <__aeabi_ddiv>
 800f7e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f7e6:	e01a      	b.n	800f81e <_dtoa_r+0x39e>
 800f7e8:	2502      	movs	r5, #2
 800f7ea:	e7a3      	b.n	800f734 <_dtoa_r+0x2b4>
 800f7ec:	f000 80a0 	beq.w	800f930 <_dtoa_r+0x4b0>
 800f7f0:	f1ca 0600 	rsb	r6, sl, #0
 800f7f4:	4b9f      	ldr	r3, [pc, #636]	; (800fa74 <_dtoa_r+0x5f4>)
 800f7f6:	4fa0      	ldr	r7, [pc, #640]	; (800fa78 <_dtoa_r+0x5f8>)
 800f7f8:	f006 020f 	and.w	r2, r6, #15
 800f7fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f808:	f7f0 fefe 	bl	8000608 <__aeabi_dmul>
 800f80c:	e9cd 0100 	strd	r0, r1, [sp]
 800f810:	1136      	asrs	r6, r6, #4
 800f812:	2300      	movs	r3, #0
 800f814:	2502      	movs	r5, #2
 800f816:	2e00      	cmp	r6, #0
 800f818:	d17f      	bne.n	800f91a <_dtoa_r+0x49a>
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1e1      	bne.n	800f7e2 <_dtoa_r+0x362>
 800f81e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f820:	2b00      	cmp	r3, #0
 800f822:	f000 8087 	beq.w	800f934 <_dtoa_r+0x4b4>
 800f826:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f82a:	2200      	movs	r2, #0
 800f82c:	4b93      	ldr	r3, [pc, #588]	; (800fa7c <_dtoa_r+0x5fc>)
 800f82e:	4630      	mov	r0, r6
 800f830:	4639      	mov	r1, r7
 800f832:	f7f1 f95b 	bl	8000aec <__aeabi_dcmplt>
 800f836:	2800      	cmp	r0, #0
 800f838:	d07c      	beq.n	800f934 <_dtoa_r+0x4b4>
 800f83a:	f1b9 0f00 	cmp.w	r9, #0
 800f83e:	d079      	beq.n	800f934 <_dtoa_r+0x4b4>
 800f840:	9b02      	ldr	r3, [sp, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	dd35      	ble.n	800f8b2 <_dtoa_r+0x432>
 800f846:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f84a:	9308      	str	r3, [sp, #32]
 800f84c:	4639      	mov	r1, r7
 800f84e:	2200      	movs	r2, #0
 800f850:	4b8b      	ldr	r3, [pc, #556]	; (800fa80 <_dtoa_r+0x600>)
 800f852:	4630      	mov	r0, r6
 800f854:	f7f0 fed8 	bl	8000608 <__aeabi_dmul>
 800f858:	e9cd 0100 	strd	r0, r1, [sp]
 800f85c:	9f02      	ldr	r7, [sp, #8]
 800f85e:	3501      	adds	r5, #1
 800f860:	4628      	mov	r0, r5
 800f862:	f7f0 fe67 	bl	8000534 <__aeabi_i2d>
 800f866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f86a:	f7f0 fecd 	bl	8000608 <__aeabi_dmul>
 800f86e:	2200      	movs	r2, #0
 800f870:	4b84      	ldr	r3, [pc, #528]	; (800fa84 <_dtoa_r+0x604>)
 800f872:	f7f0 fd13 	bl	800029c <__adddf3>
 800f876:	4605      	mov	r5, r0
 800f878:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	d15d      	bne.n	800f93c <_dtoa_r+0x4bc>
 800f880:	2200      	movs	r2, #0
 800f882:	4b81      	ldr	r3, [pc, #516]	; (800fa88 <_dtoa_r+0x608>)
 800f884:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f888:	f7f0 fd06 	bl	8000298 <__aeabi_dsub>
 800f88c:	462a      	mov	r2, r5
 800f88e:	4633      	mov	r3, r6
 800f890:	e9cd 0100 	strd	r0, r1, [sp]
 800f894:	f7f1 f948 	bl	8000b28 <__aeabi_dcmpgt>
 800f898:	2800      	cmp	r0, #0
 800f89a:	f040 8288 	bne.w	800fdae <_dtoa_r+0x92e>
 800f89e:	462a      	mov	r2, r5
 800f8a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8a8:	f7f1 f920 	bl	8000aec <__aeabi_dcmplt>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	f040 827c 	bne.w	800fdaa <_dtoa_r+0x92a>
 800f8b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8b6:	e9cd 2300 	strd	r2, r3, [sp]
 800f8ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	f2c0 8150 	blt.w	800fb62 <_dtoa_r+0x6e2>
 800f8c2:	f1ba 0f0e 	cmp.w	sl, #14
 800f8c6:	f300 814c 	bgt.w	800fb62 <_dtoa_r+0x6e2>
 800f8ca:	4b6a      	ldr	r3, [pc, #424]	; (800fa74 <_dtoa_r+0x5f4>)
 800f8cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8d0:	ed93 7b00 	vldr	d7, [r3]
 800f8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8dc:	f280 80d8 	bge.w	800fa90 <_dtoa_r+0x610>
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	f300 80d4 	bgt.w	800fa90 <_dtoa_r+0x610>
 800f8e8:	f040 825e 	bne.w	800fda8 <_dtoa_r+0x928>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	4b66      	ldr	r3, [pc, #408]	; (800fa88 <_dtoa_r+0x608>)
 800f8f0:	ec51 0b17 	vmov	r0, r1, d7
 800f8f4:	f7f0 fe88 	bl	8000608 <__aeabi_dmul>
 800f8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8fc:	f7f1 f90a 	bl	8000b14 <__aeabi_dcmpge>
 800f900:	464f      	mov	r7, r9
 800f902:	464e      	mov	r6, r9
 800f904:	2800      	cmp	r0, #0
 800f906:	f040 8234 	bne.w	800fd72 <_dtoa_r+0x8f2>
 800f90a:	2331      	movs	r3, #49	; 0x31
 800f90c:	f10b 0501 	add.w	r5, fp, #1
 800f910:	f88b 3000 	strb.w	r3, [fp]
 800f914:	f10a 0a01 	add.w	sl, sl, #1
 800f918:	e22f      	b.n	800fd7a <_dtoa_r+0x8fa>
 800f91a:	07f2      	lsls	r2, r6, #31
 800f91c:	d505      	bpl.n	800f92a <_dtoa_r+0x4aa>
 800f91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f922:	f7f0 fe71 	bl	8000608 <__aeabi_dmul>
 800f926:	3501      	adds	r5, #1
 800f928:	2301      	movs	r3, #1
 800f92a:	1076      	asrs	r6, r6, #1
 800f92c:	3708      	adds	r7, #8
 800f92e:	e772      	b.n	800f816 <_dtoa_r+0x396>
 800f930:	2502      	movs	r5, #2
 800f932:	e774      	b.n	800f81e <_dtoa_r+0x39e>
 800f934:	f8cd a020 	str.w	sl, [sp, #32]
 800f938:	464f      	mov	r7, r9
 800f93a:	e791      	b.n	800f860 <_dtoa_r+0x3e0>
 800f93c:	4b4d      	ldr	r3, [pc, #308]	; (800fa74 <_dtoa_r+0x5f4>)
 800f93e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f942:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d047      	beq.n	800f9dc <_dtoa_r+0x55c>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	2000      	movs	r0, #0
 800f952:	494e      	ldr	r1, [pc, #312]	; (800fa8c <_dtoa_r+0x60c>)
 800f954:	f7f0 ff82 	bl	800085c <__aeabi_ddiv>
 800f958:	462a      	mov	r2, r5
 800f95a:	4633      	mov	r3, r6
 800f95c:	f7f0 fc9c 	bl	8000298 <__aeabi_dsub>
 800f960:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f964:	465d      	mov	r5, fp
 800f966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f96a:	f7f1 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800f96e:	4606      	mov	r6, r0
 800f970:	f7f0 fde0 	bl	8000534 <__aeabi_i2d>
 800f974:	4602      	mov	r2, r0
 800f976:	460b      	mov	r3, r1
 800f978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f97c:	f7f0 fc8c 	bl	8000298 <__aeabi_dsub>
 800f980:	3630      	adds	r6, #48	; 0x30
 800f982:	f805 6b01 	strb.w	r6, [r5], #1
 800f986:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f98a:	e9cd 0100 	strd	r0, r1, [sp]
 800f98e:	f7f1 f8ad 	bl	8000aec <__aeabi_dcmplt>
 800f992:	2800      	cmp	r0, #0
 800f994:	d163      	bne.n	800fa5e <_dtoa_r+0x5de>
 800f996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f99a:	2000      	movs	r0, #0
 800f99c:	4937      	ldr	r1, [pc, #220]	; (800fa7c <_dtoa_r+0x5fc>)
 800f99e:	f7f0 fc7b 	bl	8000298 <__aeabi_dsub>
 800f9a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f9a6:	f7f1 f8a1 	bl	8000aec <__aeabi_dcmplt>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	f040 80b7 	bne.w	800fb1e <_dtoa_r+0x69e>
 800f9b0:	eba5 030b 	sub.w	r3, r5, fp
 800f9b4:	429f      	cmp	r7, r3
 800f9b6:	f77f af7c 	ble.w	800f8b2 <_dtoa_r+0x432>
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	4b30      	ldr	r3, [pc, #192]	; (800fa80 <_dtoa_r+0x600>)
 800f9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f9c2:	f7f0 fe21 	bl	8000608 <__aeabi_dmul>
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9cc:	4b2c      	ldr	r3, [pc, #176]	; (800fa80 <_dtoa_r+0x600>)
 800f9ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9d2:	f7f0 fe19 	bl	8000608 <__aeabi_dmul>
 800f9d6:	e9cd 0100 	strd	r0, r1, [sp]
 800f9da:	e7c4      	b.n	800f966 <_dtoa_r+0x4e6>
 800f9dc:	462a      	mov	r2, r5
 800f9de:	4633      	mov	r3, r6
 800f9e0:	f7f0 fe12 	bl	8000608 <__aeabi_dmul>
 800f9e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9e8:	eb0b 0507 	add.w	r5, fp, r7
 800f9ec:	465e      	mov	r6, fp
 800f9ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9f2:	f7f1 f8b9 	bl	8000b68 <__aeabi_d2iz>
 800f9f6:	4607      	mov	r7, r0
 800f9f8:	f7f0 fd9c 	bl	8000534 <__aeabi_i2d>
 800f9fc:	3730      	adds	r7, #48	; 0x30
 800f9fe:	4602      	mov	r2, r0
 800fa00:	460b      	mov	r3, r1
 800fa02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa06:	f7f0 fc47 	bl	8000298 <__aeabi_dsub>
 800fa0a:	f806 7b01 	strb.w	r7, [r6], #1
 800fa0e:	42ae      	cmp	r6, r5
 800fa10:	e9cd 0100 	strd	r0, r1, [sp]
 800fa14:	f04f 0200 	mov.w	r2, #0
 800fa18:	d126      	bne.n	800fa68 <_dtoa_r+0x5e8>
 800fa1a:	4b1c      	ldr	r3, [pc, #112]	; (800fa8c <_dtoa_r+0x60c>)
 800fa1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa20:	f7f0 fc3c 	bl	800029c <__adddf3>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa2c:	f7f1 f87c 	bl	8000b28 <__aeabi_dcmpgt>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d174      	bne.n	800fb1e <_dtoa_r+0x69e>
 800fa34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa38:	2000      	movs	r0, #0
 800fa3a:	4914      	ldr	r1, [pc, #80]	; (800fa8c <_dtoa_r+0x60c>)
 800fa3c:	f7f0 fc2c 	bl	8000298 <__aeabi_dsub>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa48:	f7f1 f850 	bl	8000aec <__aeabi_dcmplt>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	f43f af30 	beq.w	800f8b2 <_dtoa_r+0x432>
 800fa52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa56:	2b30      	cmp	r3, #48	; 0x30
 800fa58:	f105 32ff 	add.w	r2, r5, #4294967295
 800fa5c:	d002      	beq.n	800fa64 <_dtoa_r+0x5e4>
 800fa5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa62:	e04a      	b.n	800fafa <_dtoa_r+0x67a>
 800fa64:	4615      	mov	r5, r2
 800fa66:	e7f4      	b.n	800fa52 <_dtoa_r+0x5d2>
 800fa68:	4b05      	ldr	r3, [pc, #20]	; (800fa80 <_dtoa_r+0x600>)
 800fa6a:	f7f0 fdcd 	bl	8000608 <__aeabi_dmul>
 800fa6e:	e9cd 0100 	strd	r0, r1, [sp]
 800fa72:	e7bc      	b.n	800f9ee <_dtoa_r+0x56e>
 800fa74:	08013500 	.word	0x08013500
 800fa78:	080134d8 	.word	0x080134d8
 800fa7c:	3ff00000 	.word	0x3ff00000
 800fa80:	40240000 	.word	0x40240000
 800fa84:	401c0000 	.word	0x401c0000
 800fa88:	40140000 	.word	0x40140000
 800fa8c:	3fe00000 	.word	0x3fe00000
 800fa90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa94:	465d      	mov	r5, fp
 800fa96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	f7f0 fedd 	bl	800085c <__aeabi_ddiv>
 800faa2:	f7f1 f861 	bl	8000b68 <__aeabi_d2iz>
 800faa6:	4680      	mov	r8, r0
 800faa8:	f7f0 fd44 	bl	8000534 <__aeabi_i2d>
 800faac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fab0:	f7f0 fdaa 	bl	8000608 <__aeabi_dmul>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4630      	mov	r0, r6
 800faba:	4639      	mov	r1, r7
 800fabc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fac0:	f7f0 fbea 	bl	8000298 <__aeabi_dsub>
 800fac4:	f805 6b01 	strb.w	r6, [r5], #1
 800fac8:	eba5 060b 	sub.w	r6, r5, fp
 800facc:	45b1      	cmp	r9, r6
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	d139      	bne.n	800fb48 <_dtoa_r+0x6c8>
 800fad4:	f7f0 fbe2 	bl	800029c <__adddf3>
 800fad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fadc:	4606      	mov	r6, r0
 800fade:	460f      	mov	r7, r1
 800fae0:	f7f1 f822 	bl	8000b28 <__aeabi_dcmpgt>
 800fae4:	b9c8      	cbnz	r0, 800fb1a <_dtoa_r+0x69a>
 800fae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faea:	4630      	mov	r0, r6
 800faec:	4639      	mov	r1, r7
 800faee:	f7f0 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 800faf2:	b110      	cbz	r0, 800fafa <_dtoa_r+0x67a>
 800faf4:	f018 0f01 	tst.w	r8, #1
 800faf8:	d10f      	bne.n	800fb1a <_dtoa_r+0x69a>
 800fafa:	9904      	ldr	r1, [sp, #16]
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 fec3 	bl	8010888 <_Bfree>
 800fb02:	2300      	movs	r3, #0
 800fb04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb06:	702b      	strb	r3, [r5, #0]
 800fb08:	f10a 0301 	add.w	r3, sl, #1
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 8241 	beq.w	800ff98 <_dtoa_r+0xb18>
 800fb16:	601d      	str	r5, [r3, #0]
 800fb18:	e23e      	b.n	800ff98 <_dtoa_r+0xb18>
 800fb1a:	f8cd a020 	str.w	sl, [sp, #32]
 800fb1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb22:	2a39      	cmp	r2, #57	; 0x39
 800fb24:	f105 33ff 	add.w	r3, r5, #4294967295
 800fb28:	d108      	bne.n	800fb3c <_dtoa_r+0x6bc>
 800fb2a:	459b      	cmp	fp, r3
 800fb2c:	d10a      	bne.n	800fb44 <_dtoa_r+0x6c4>
 800fb2e:	9b08      	ldr	r3, [sp, #32]
 800fb30:	3301      	adds	r3, #1
 800fb32:	9308      	str	r3, [sp, #32]
 800fb34:	2330      	movs	r3, #48	; 0x30
 800fb36:	f88b 3000 	strb.w	r3, [fp]
 800fb3a:	465b      	mov	r3, fp
 800fb3c:	781a      	ldrb	r2, [r3, #0]
 800fb3e:	3201      	adds	r2, #1
 800fb40:	701a      	strb	r2, [r3, #0]
 800fb42:	e78c      	b.n	800fa5e <_dtoa_r+0x5de>
 800fb44:	461d      	mov	r5, r3
 800fb46:	e7ea      	b.n	800fb1e <_dtoa_r+0x69e>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4b9b      	ldr	r3, [pc, #620]	; (800fdb8 <_dtoa_r+0x938>)
 800fb4c:	f7f0 fd5c 	bl	8000608 <__aeabi_dmul>
 800fb50:	2200      	movs	r2, #0
 800fb52:	2300      	movs	r3, #0
 800fb54:	4606      	mov	r6, r0
 800fb56:	460f      	mov	r7, r1
 800fb58:	f7f0 ffbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d09a      	beq.n	800fa96 <_dtoa_r+0x616>
 800fb60:	e7cb      	b.n	800fafa <_dtoa_r+0x67a>
 800fb62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb64:	2a00      	cmp	r2, #0
 800fb66:	f000 808b 	beq.w	800fc80 <_dtoa_r+0x800>
 800fb6a:	9a06      	ldr	r2, [sp, #24]
 800fb6c:	2a01      	cmp	r2, #1
 800fb6e:	dc6e      	bgt.n	800fc4e <_dtoa_r+0x7ce>
 800fb70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb72:	2a00      	cmp	r2, #0
 800fb74:	d067      	beq.n	800fc46 <_dtoa_r+0x7c6>
 800fb76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb7a:	9f07      	ldr	r7, [sp, #28]
 800fb7c:	9d05      	ldr	r5, [sp, #20]
 800fb7e:	9a05      	ldr	r2, [sp, #20]
 800fb80:	2101      	movs	r1, #1
 800fb82:	441a      	add	r2, r3
 800fb84:	4620      	mov	r0, r4
 800fb86:	9205      	str	r2, [sp, #20]
 800fb88:	4498      	add	r8, r3
 800fb8a:	f000 ff5b 	bl	8010a44 <__i2b>
 800fb8e:	4606      	mov	r6, r0
 800fb90:	2d00      	cmp	r5, #0
 800fb92:	dd0c      	ble.n	800fbae <_dtoa_r+0x72e>
 800fb94:	f1b8 0f00 	cmp.w	r8, #0
 800fb98:	dd09      	ble.n	800fbae <_dtoa_r+0x72e>
 800fb9a:	4545      	cmp	r5, r8
 800fb9c:	9a05      	ldr	r2, [sp, #20]
 800fb9e:	462b      	mov	r3, r5
 800fba0:	bfa8      	it	ge
 800fba2:	4643      	movge	r3, r8
 800fba4:	1ad2      	subs	r2, r2, r3
 800fba6:	9205      	str	r2, [sp, #20]
 800fba8:	1aed      	subs	r5, r5, r3
 800fbaa:	eba8 0803 	sub.w	r8, r8, r3
 800fbae:	9b07      	ldr	r3, [sp, #28]
 800fbb0:	b1eb      	cbz	r3, 800fbee <_dtoa_r+0x76e>
 800fbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d067      	beq.n	800fc88 <_dtoa_r+0x808>
 800fbb8:	b18f      	cbz	r7, 800fbde <_dtoa_r+0x75e>
 800fbba:	4631      	mov	r1, r6
 800fbbc:	463a      	mov	r2, r7
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 ffe0 	bl	8010b84 <__pow5mult>
 800fbc4:	9a04      	ldr	r2, [sp, #16]
 800fbc6:	4601      	mov	r1, r0
 800fbc8:	4606      	mov	r6, r0
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 ff43 	bl	8010a56 <__multiply>
 800fbd0:	9904      	ldr	r1, [sp, #16]
 800fbd2:	9008      	str	r0, [sp, #32]
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 fe57 	bl	8010888 <_Bfree>
 800fbda:	9b08      	ldr	r3, [sp, #32]
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	9b07      	ldr	r3, [sp, #28]
 800fbe0:	1bda      	subs	r2, r3, r7
 800fbe2:	d004      	beq.n	800fbee <_dtoa_r+0x76e>
 800fbe4:	9904      	ldr	r1, [sp, #16]
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f000 ffcc 	bl	8010b84 <__pow5mult>
 800fbec:	9004      	str	r0, [sp, #16]
 800fbee:	2101      	movs	r1, #1
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 ff27 	bl	8010a44 <__i2b>
 800fbf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbf8:	4607      	mov	r7, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 81d0 	beq.w	800ffa0 <_dtoa_r+0xb20>
 800fc00:	461a      	mov	r2, r3
 800fc02:	4601      	mov	r1, r0
 800fc04:	4620      	mov	r0, r4
 800fc06:	f000 ffbd 	bl	8010b84 <__pow5mult>
 800fc0a:	9b06      	ldr	r3, [sp, #24]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	4607      	mov	r7, r0
 800fc10:	dc40      	bgt.n	800fc94 <_dtoa_r+0x814>
 800fc12:	9b00      	ldr	r3, [sp, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d139      	bne.n	800fc8c <_dtoa_r+0x80c>
 800fc18:	9b01      	ldr	r3, [sp, #4]
 800fc1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d136      	bne.n	800fc90 <_dtoa_r+0x810>
 800fc22:	9b01      	ldr	r3, [sp, #4]
 800fc24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc28:	0d1b      	lsrs	r3, r3, #20
 800fc2a:	051b      	lsls	r3, r3, #20
 800fc2c:	b12b      	cbz	r3, 800fc3a <_dtoa_r+0x7ba>
 800fc2e:	9b05      	ldr	r3, [sp, #20]
 800fc30:	3301      	adds	r3, #1
 800fc32:	9305      	str	r3, [sp, #20]
 800fc34:	f108 0801 	add.w	r8, r8, #1
 800fc38:	2301      	movs	r3, #1
 800fc3a:	9307      	str	r3, [sp, #28]
 800fc3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d12a      	bne.n	800fc98 <_dtoa_r+0x818>
 800fc42:	2001      	movs	r0, #1
 800fc44:	e030      	b.n	800fca8 <_dtoa_r+0x828>
 800fc46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc4c:	e795      	b.n	800fb7a <_dtoa_r+0x6fa>
 800fc4e:	9b07      	ldr	r3, [sp, #28]
 800fc50:	f109 37ff 	add.w	r7, r9, #4294967295
 800fc54:	42bb      	cmp	r3, r7
 800fc56:	bfbf      	itttt	lt
 800fc58:	9b07      	ldrlt	r3, [sp, #28]
 800fc5a:	9707      	strlt	r7, [sp, #28]
 800fc5c:	1afa      	sublt	r2, r7, r3
 800fc5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fc60:	bfbb      	ittet	lt
 800fc62:	189b      	addlt	r3, r3, r2
 800fc64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fc66:	1bdf      	subge	r7, r3, r7
 800fc68:	2700      	movlt	r7, #0
 800fc6a:	f1b9 0f00 	cmp.w	r9, #0
 800fc6e:	bfb5      	itete	lt
 800fc70:	9b05      	ldrlt	r3, [sp, #20]
 800fc72:	9d05      	ldrge	r5, [sp, #20]
 800fc74:	eba3 0509 	sublt.w	r5, r3, r9
 800fc78:	464b      	movge	r3, r9
 800fc7a:	bfb8      	it	lt
 800fc7c:	2300      	movlt	r3, #0
 800fc7e:	e77e      	b.n	800fb7e <_dtoa_r+0x6fe>
 800fc80:	9f07      	ldr	r7, [sp, #28]
 800fc82:	9d05      	ldr	r5, [sp, #20]
 800fc84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fc86:	e783      	b.n	800fb90 <_dtoa_r+0x710>
 800fc88:	9a07      	ldr	r2, [sp, #28]
 800fc8a:	e7ab      	b.n	800fbe4 <_dtoa_r+0x764>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e7d4      	b.n	800fc3a <_dtoa_r+0x7ba>
 800fc90:	9b00      	ldr	r3, [sp, #0]
 800fc92:	e7d2      	b.n	800fc3a <_dtoa_r+0x7ba>
 800fc94:	2300      	movs	r3, #0
 800fc96:	9307      	str	r3, [sp, #28]
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fc9e:	6918      	ldr	r0, [r3, #16]
 800fca0:	f000 fe82 	bl	80109a8 <__hi0bits>
 800fca4:	f1c0 0020 	rsb	r0, r0, #32
 800fca8:	4440      	add	r0, r8
 800fcaa:	f010 001f 	ands.w	r0, r0, #31
 800fcae:	d047      	beq.n	800fd40 <_dtoa_r+0x8c0>
 800fcb0:	f1c0 0320 	rsb	r3, r0, #32
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	dd3b      	ble.n	800fd30 <_dtoa_r+0x8b0>
 800fcb8:	9b05      	ldr	r3, [sp, #20]
 800fcba:	f1c0 001c 	rsb	r0, r0, #28
 800fcbe:	4403      	add	r3, r0
 800fcc0:	9305      	str	r3, [sp, #20]
 800fcc2:	4405      	add	r5, r0
 800fcc4:	4480      	add	r8, r0
 800fcc6:	9b05      	ldr	r3, [sp, #20]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	dd05      	ble.n	800fcd8 <_dtoa_r+0x858>
 800fccc:	461a      	mov	r2, r3
 800fcce:	9904      	ldr	r1, [sp, #16]
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f000 ffa5 	bl	8010c20 <__lshift>
 800fcd6:	9004      	str	r0, [sp, #16]
 800fcd8:	f1b8 0f00 	cmp.w	r8, #0
 800fcdc:	dd05      	ble.n	800fcea <_dtoa_r+0x86a>
 800fcde:	4639      	mov	r1, r7
 800fce0:	4642      	mov	r2, r8
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 ff9c 	bl	8010c20 <__lshift>
 800fce8:	4607      	mov	r7, r0
 800fcea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcec:	b353      	cbz	r3, 800fd44 <_dtoa_r+0x8c4>
 800fcee:	4639      	mov	r1, r7
 800fcf0:	9804      	ldr	r0, [sp, #16]
 800fcf2:	f000 ffe9 	bl	8010cc8 <__mcmp>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	da24      	bge.n	800fd44 <_dtoa_r+0x8c4>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	220a      	movs	r2, #10
 800fcfe:	9904      	ldr	r1, [sp, #16]
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 fdd8 	bl	80108b6 <__multadd>
 800fd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd08:	9004      	str	r0, [sp, #16]
 800fd0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f000 814d 	beq.w	800ffae <_dtoa_r+0xb2e>
 800fd14:	2300      	movs	r3, #0
 800fd16:	4631      	mov	r1, r6
 800fd18:	220a      	movs	r2, #10
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f000 fdcb 	bl	80108b6 <__multadd>
 800fd20:	9b02      	ldr	r3, [sp, #8]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	4606      	mov	r6, r0
 800fd26:	dc4f      	bgt.n	800fdc8 <_dtoa_r+0x948>
 800fd28:	9b06      	ldr	r3, [sp, #24]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	dd4c      	ble.n	800fdc8 <_dtoa_r+0x948>
 800fd2e:	e011      	b.n	800fd54 <_dtoa_r+0x8d4>
 800fd30:	d0c9      	beq.n	800fcc6 <_dtoa_r+0x846>
 800fd32:	9a05      	ldr	r2, [sp, #20]
 800fd34:	331c      	adds	r3, #28
 800fd36:	441a      	add	r2, r3
 800fd38:	9205      	str	r2, [sp, #20]
 800fd3a:	441d      	add	r5, r3
 800fd3c:	4498      	add	r8, r3
 800fd3e:	e7c2      	b.n	800fcc6 <_dtoa_r+0x846>
 800fd40:	4603      	mov	r3, r0
 800fd42:	e7f6      	b.n	800fd32 <_dtoa_r+0x8b2>
 800fd44:	f1b9 0f00 	cmp.w	r9, #0
 800fd48:	dc38      	bgt.n	800fdbc <_dtoa_r+0x93c>
 800fd4a:	9b06      	ldr	r3, [sp, #24]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	dd35      	ble.n	800fdbc <_dtoa_r+0x93c>
 800fd50:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd54:	9b02      	ldr	r3, [sp, #8]
 800fd56:	b963      	cbnz	r3, 800fd72 <_dtoa_r+0x8f2>
 800fd58:	4639      	mov	r1, r7
 800fd5a:	2205      	movs	r2, #5
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f000 fdaa 	bl	80108b6 <__multadd>
 800fd62:	4601      	mov	r1, r0
 800fd64:	4607      	mov	r7, r0
 800fd66:	9804      	ldr	r0, [sp, #16]
 800fd68:	f000 ffae 	bl	8010cc8 <__mcmp>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	f73f adcc 	bgt.w	800f90a <_dtoa_r+0x48a>
 800fd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd74:	465d      	mov	r5, fp
 800fd76:	ea6f 0a03 	mvn.w	sl, r3
 800fd7a:	f04f 0900 	mov.w	r9, #0
 800fd7e:	4639      	mov	r1, r7
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 fd81 	bl	8010888 <_Bfree>
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	f43f aeb7 	beq.w	800fafa <_dtoa_r+0x67a>
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d005      	beq.n	800fd9e <_dtoa_r+0x91e>
 800fd92:	45b1      	cmp	r9, r6
 800fd94:	d003      	beq.n	800fd9e <_dtoa_r+0x91e>
 800fd96:	4649      	mov	r1, r9
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 fd75 	bl	8010888 <_Bfree>
 800fd9e:	4631      	mov	r1, r6
 800fda0:	4620      	mov	r0, r4
 800fda2:	f000 fd71 	bl	8010888 <_Bfree>
 800fda6:	e6a8      	b.n	800fafa <_dtoa_r+0x67a>
 800fda8:	2700      	movs	r7, #0
 800fdaa:	463e      	mov	r6, r7
 800fdac:	e7e1      	b.n	800fd72 <_dtoa_r+0x8f2>
 800fdae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fdb2:	463e      	mov	r6, r7
 800fdb4:	e5a9      	b.n	800f90a <_dtoa_r+0x48a>
 800fdb6:	bf00      	nop
 800fdb8:	40240000 	.word	0x40240000
 800fdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdbe:	f8cd 9008 	str.w	r9, [sp, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f000 80fa 	beq.w	800ffbc <_dtoa_r+0xb3c>
 800fdc8:	2d00      	cmp	r5, #0
 800fdca:	dd05      	ble.n	800fdd8 <_dtoa_r+0x958>
 800fdcc:	4631      	mov	r1, r6
 800fdce:	462a      	mov	r2, r5
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 ff25 	bl	8010c20 <__lshift>
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	9b07      	ldr	r3, [sp, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d04c      	beq.n	800fe78 <_dtoa_r+0x9f8>
 800fdde:	6871      	ldr	r1, [r6, #4]
 800fde0:	4620      	mov	r0, r4
 800fde2:	f000 fd1d 	bl	8010820 <_Balloc>
 800fde6:	6932      	ldr	r2, [r6, #16]
 800fde8:	3202      	adds	r2, #2
 800fdea:	4605      	mov	r5, r0
 800fdec:	0092      	lsls	r2, r2, #2
 800fdee:	f106 010c 	add.w	r1, r6, #12
 800fdf2:	300c      	adds	r0, #12
 800fdf4:	f7fd fcb8 	bl	800d768 <memcpy>
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f000 ff0f 	bl	8010c20 <__lshift>
 800fe02:	9b00      	ldr	r3, [sp, #0]
 800fe04:	f8cd b014 	str.w	fp, [sp, #20]
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	46b1      	mov	r9, r6
 800fe0e:	9307      	str	r3, [sp, #28]
 800fe10:	4606      	mov	r6, r0
 800fe12:	4639      	mov	r1, r7
 800fe14:	9804      	ldr	r0, [sp, #16]
 800fe16:	f7ff faa5 	bl	800f364 <quorem>
 800fe1a:	4649      	mov	r1, r9
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe22:	9804      	ldr	r0, [sp, #16]
 800fe24:	f000 ff50 	bl	8010cc8 <__mcmp>
 800fe28:	4632      	mov	r2, r6
 800fe2a:	9000      	str	r0, [sp, #0]
 800fe2c:	4639      	mov	r1, r7
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f000 ff64 	bl	8010cfc <__mdiff>
 800fe34:	68c3      	ldr	r3, [r0, #12]
 800fe36:	4602      	mov	r2, r0
 800fe38:	bb03      	cbnz	r3, 800fe7c <_dtoa_r+0x9fc>
 800fe3a:	4601      	mov	r1, r0
 800fe3c:	9008      	str	r0, [sp, #32]
 800fe3e:	9804      	ldr	r0, [sp, #16]
 800fe40:	f000 ff42 	bl	8010cc8 <__mcmp>
 800fe44:	9a08      	ldr	r2, [sp, #32]
 800fe46:	4603      	mov	r3, r0
 800fe48:	4611      	mov	r1, r2
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	9308      	str	r3, [sp, #32]
 800fe4e:	f000 fd1b 	bl	8010888 <_Bfree>
 800fe52:	9b08      	ldr	r3, [sp, #32]
 800fe54:	b9a3      	cbnz	r3, 800fe80 <_dtoa_r+0xa00>
 800fe56:	9a06      	ldr	r2, [sp, #24]
 800fe58:	b992      	cbnz	r2, 800fe80 <_dtoa_r+0xa00>
 800fe5a:	9a07      	ldr	r2, [sp, #28]
 800fe5c:	b982      	cbnz	r2, 800fe80 <_dtoa_r+0xa00>
 800fe5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fe62:	d029      	beq.n	800feb8 <_dtoa_r+0xa38>
 800fe64:	9b00      	ldr	r3, [sp, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	dd01      	ble.n	800fe6e <_dtoa_r+0x9ee>
 800fe6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fe6e:	9b05      	ldr	r3, [sp, #20]
 800fe70:	1c5d      	adds	r5, r3, #1
 800fe72:	f883 8000 	strb.w	r8, [r3]
 800fe76:	e782      	b.n	800fd7e <_dtoa_r+0x8fe>
 800fe78:	4630      	mov	r0, r6
 800fe7a:	e7c2      	b.n	800fe02 <_dtoa_r+0x982>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e7e3      	b.n	800fe48 <_dtoa_r+0x9c8>
 800fe80:	9a00      	ldr	r2, [sp, #0]
 800fe82:	2a00      	cmp	r2, #0
 800fe84:	db04      	blt.n	800fe90 <_dtoa_r+0xa10>
 800fe86:	d125      	bne.n	800fed4 <_dtoa_r+0xa54>
 800fe88:	9a06      	ldr	r2, [sp, #24]
 800fe8a:	bb1a      	cbnz	r2, 800fed4 <_dtoa_r+0xa54>
 800fe8c:	9a07      	ldr	r2, [sp, #28]
 800fe8e:	bb0a      	cbnz	r2, 800fed4 <_dtoa_r+0xa54>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	ddec      	ble.n	800fe6e <_dtoa_r+0x9ee>
 800fe94:	2201      	movs	r2, #1
 800fe96:	9904      	ldr	r1, [sp, #16]
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fec1 	bl	8010c20 <__lshift>
 800fe9e:	4639      	mov	r1, r7
 800fea0:	9004      	str	r0, [sp, #16]
 800fea2:	f000 ff11 	bl	8010cc8 <__mcmp>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	dc03      	bgt.n	800feb2 <_dtoa_r+0xa32>
 800feaa:	d1e0      	bne.n	800fe6e <_dtoa_r+0x9ee>
 800feac:	f018 0f01 	tst.w	r8, #1
 800feb0:	d0dd      	beq.n	800fe6e <_dtoa_r+0x9ee>
 800feb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800feb6:	d1d8      	bne.n	800fe6a <_dtoa_r+0x9ea>
 800feb8:	9b05      	ldr	r3, [sp, #20]
 800feba:	9a05      	ldr	r2, [sp, #20]
 800febc:	1c5d      	adds	r5, r3, #1
 800febe:	2339      	movs	r3, #57	; 0x39
 800fec0:	7013      	strb	r3, [r2, #0]
 800fec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fec6:	2b39      	cmp	r3, #57	; 0x39
 800fec8:	f105 32ff 	add.w	r2, r5, #4294967295
 800fecc:	d04f      	beq.n	800ff6e <_dtoa_r+0xaee>
 800fece:	3301      	adds	r3, #1
 800fed0:	7013      	strb	r3, [r2, #0]
 800fed2:	e754      	b.n	800fd7e <_dtoa_r+0x8fe>
 800fed4:	9a05      	ldr	r2, [sp, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f102 0501 	add.w	r5, r2, #1
 800fedc:	dd06      	ble.n	800feec <_dtoa_r+0xa6c>
 800fede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fee2:	d0e9      	beq.n	800feb8 <_dtoa_r+0xa38>
 800fee4:	f108 0801 	add.w	r8, r8, #1
 800fee8:	9b05      	ldr	r3, [sp, #20]
 800feea:	e7c2      	b.n	800fe72 <_dtoa_r+0x9f2>
 800feec:	9a02      	ldr	r2, [sp, #8]
 800feee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fef2:	eba5 030b 	sub.w	r3, r5, fp
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d021      	beq.n	800ff3e <_dtoa_r+0xabe>
 800fefa:	2300      	movs	r3, #0
 800fefc:	220a      	movs	r2, #10
 800fefe:	9904      	ldr	r1, [sp, #16]
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 fcd8 	bl	80108b6 <__multadd>
 800ff06:	45b1      	cmp	r9, r6
 800ff08:	9004      	str	r0, [sp, #16]
 800ff0a:	f04f 0300 	mov.w	r3, #0
 800ff0e:	f04f 020a 	mov.w	r2, #10
 800ff12:	4649      	mov	r1, r9
 800ff14:	4620      	mov	r0, r4
 800ff16:	d105      	bne.n	800ff24 <_dtoa_r+0xaa4>
 800ff18:	f000 fccd 	bl	80108b6 <__multadd>
 800ff1c:	4681      	mov	r9, r0
 800ff1e:	4606      	mov	r6, r0
 800ff20:	9505      	str	r5, [sp, #20]
 800ff22:	e776      	b.n	800fe12 <_dtoa_r+0x992>
 800ff24:	f000 fcc7 	bl	80108b6 <__multadd>
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4681      	mov	r9, r0
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	220a      	movs	r2, #10
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fcc0 	bl	80108b6 <__multadd>
 800ff36:	4606      	mov	r6, r0
 800ff38:	e7f2      	b.n	800ff20 <_dtoa_r+0xaa0>
 800ff3a:	f04f 0900 	mov.w	r9, #0
 800ff3e:	2201      	movs	r2, #1
 800ff40:	9904      	ldr	r1, [sp, #16]
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fe6c 	bl	8010c20 <__lshift>
 800ff48:	4639      	mov	r1, r7
 800ff4a:	9004      	str	r0, [sp, #16]
 800ff4c:	f000 febc 	bl	8010cc8 <__mcmp>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	dcb6      	bgt.n	800fec2 <_dtoa_r+0xa42>
 800ff54:	d102      	bne.n	800ff5c <_dtoa_r+0xadc>
 800ff56:	f018 0f01 	tst.w	r8, #1
 800ff5a:	d1b2      	bne.n	800fec2 <_dtoa_r+0xa42>
 800ff5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff60:	2b30      	cmp	r3, #48	; 0x30
 800ff62:	f105 32ff 	add.w	r2, r5, #4294967295
 800ff66:	f47f af0a 	bne.w	800fd7e <_dtoa_r+0x8fe>
 800ff6a:	4615      	mov	r5, r2
 800ff6c:	e7f6      	b.n	800ff5c <_dtoa_r+0xadc>
 800ff6e:	4593      	cmp	fp, r2
 800ff70:	d105      	bne.n	800ff7e <_dtoa_r+0xafe>
 800ff72:	2331      	movs	r3, #49	; 0x31
 800ff74:	f10a 0a01 	add.w	sl, sl, #1
 800ff78:	f88b 3000 	strb.w	r3, [fp]
 800ff7c:	e6ff      	b.n	800fd7e <_dtoa_r+0x8fe>
 800ff7e:	4615      	mov	r5, r2
 800ff80:	e79f      	b.n	800fec2 <_dtoa_r+0xa42>
 800ff82:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ffe8 <_dtoa_r+0xb68>
 800ff86:	e007      	b.n	800ff98 <_dtoa_r+0xb18>
 800ff88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ffec <_dtoa_r+0xb6c>
 800ff8e:	b11b      	cbz	r3, 800ff98 <_dtoa_r+0xb18>
 800ff90:	f10b 0308 	add.w	r3, fp, #8
 800ff94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	4658      	mov	r0, fp
 800ff9a:	b017      	add	sp, #92	; 0x5c
 800ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa0:	9b06      	ldr	r3, [sp, #24]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	f77f ae35 	ble.w	800fc12 <_dtoa_r+0x792>
 800ffa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffaa:	9307      	str	r3, [sp, #28]
 800ffac:	e649      	b.n	800fc42 <_dtoa_r+0x7c2>
 800ffae:	9b02      	ldr	r3, [sp, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dc03      	bgt.n	800ffbc <_dtoa_r+0xb3c>
 800ffb4:	9b06      	ldr	r3, [sp, #24]
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	f73f aecc 	bgt.w	800fd54 <_dtoa_r+0x8d4>
 800ffbc:	465d      	mov	r5, fp
 800ffbe:	4639      	mov	r1, r7
 800ffc0:	9804      	ldr	r0, [sp, #16]
 800ffc2:	f7ff f9cf 	bl	800f364 <quorem>
 800ffc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ffca:	f805 8b01 	strb.w	r8, [r5], #1
 800ffce:	9a02      	ldr	r2, [sp, #8]
 800ffd0:	eba5 030b 	sub.w	r3, r5, fp
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	ddb0      	ble.n	800ff3a <_dtoa_r+0xaba>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	220a      	movs	r2, #10
 800ffdc:	9904      	ldr	r1, [sp, #16]
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f000 fc69 	bl	80108b6 <__multadd>
 800ffe4:	9004      	str	r0, [sp, #16]
 800ffe6:	e7ea      	b.n	800ffbe <_dtoa_r+0xb3e>
 800ffe8:	080133dc 	.word	0x080133dc
 800ffec:	08013458 	.word	0x08013458

0800fff0 <std>:
 800fff0:	2300      	movs	r3, #0
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	e9c0 3300 	strd	r3, r3, [r0]
 800fffa:	6083      	str	r3, [r0, #8]
 800fffc:	8181      	strh	r1, [r0, #12]
 800fffe:	6643      	str	r3, [r0, #100]	; 0x64
 8010000:	81c2      	strh	r2, [r0, #14]
 8010002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010006:	6183      	str	r3, [r0, #24]
 8010008:	4619      	mov	r1, r3
 801000a:	2208      	movs	r2, #8
 801000c:	305c      	adds	r0, #92	; 0x5c
 801000e:	f7fd fbb6 	bl	800d77e <memset>
 8010012:	4b05      	ldr	r3, [pc, #20]	; (8010028 <std+0x38>)
 8010014:	6263      	str	r3, [r4, #36]	; 0x24
 8010016:	4b05      	ldr	r3, [pc, #20]	; (801002c <std+0x3c>)
 8010018:	62a3      	str	r3, [r4, #40]	; 0x28
 801001a:	4b05      	ldr	r3, [pc, #20]	; (8010030 <std+0x40>)
 801001c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801001e:	4b05      	ldr	r3, [pc, #20]	; (8010034 <std+0x44>)
 8010020:	6224      	str	r4, [r4, #32]
 8010022:	6323      	str	r3, [r4, #48]	; 0x30
 8010024:	bd10      	pop	{r4, pc}
 8010026:	bf00      	nop
 8010028:	08011561 	.word	0x08011561
 801002c:	08011583 	.word	0x08011583
 8010030:	080115bb 	.word	0x080115bb
 8010034:	080115df 	.word	0x080115df

08010038 <_cleanup_r>:
 8010038:	4901      	ldr	r1, [pc, #4]	; (8010040 <_cleanup_r+0x8>)
 801003a:	f000 b885 	b.w	8010148 <_fwalk_reent>
 801003e:	bf00      	nop
 8010040:	080118f9 	.word	0x080118f9

08010044 <__sfmoreglue>:
 8010044:	b570      	push	{r4, r5, r6, lr}
 8010046:	1e4a      	subs	r2, r1, #1
 8010048:	2568      	movs	r5, #104	; 0x68
 801004a:	4355      	muls	r5, r2
 801004c:	460e      	mov	r6, r1
 801004e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010052:	f7fd fbeb 	bl	800d82c <_malloc_r>
 8010056:	4604      	mov	r4, r0
 8010058:	b140      	cbz	r0, 801006c <__sfmoreglue+0x28>
 801005a:	2100      	movs	r1, #0
 801005c:	e9c0 1600 	strd	r1, r6, [r0]
 8010060:	300c      	adds	r0, #12
 8010062:	60a0      	str	r0, [r4, #8]
 8010064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010068:	f7fd fb89 	bl	800d77e <memset>
 801006c:	4620      	mov	r0, r4
 801006e:	bd70      	pop	{r4, r5, r6, pc}

08010070 <__sinit>:
 8010070:	6983      	ldr	r3, [r0, #24]
 8010072:	b510      	push	{r4, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	bb33      	cbnz	r3, 80100c6 <__sinit+0x56>
 8010078:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801007c:	6503      	str	r3, [r0, #80]	; 0x50
 801007e:	4b12      	ldr	r3, [pc, #72]	; (80100c8 <__sinit+0x58>)
 8010080:	4a12      	ldr	r2, [pc, #72]	; (80100cc <__sinit+0x5c>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6282      	str	r2, [r0, #40]	; 0x28
 8010086:	4298      	cmp	r0, r3
 8010088:	bf04      	itt	eq
 801008a:	2301      	moveq	r3, #1
 801008c:	6183      	streq	r3, [r0, #24]
 801008e:	f000 f81f 	bl	80100d0 <__sfp>
 8010092:	6060      	str	r0, [r4, #4]
 8010094:	4620      	mov	r0, r4
 8010096:	f000 f81b 	bl	80100d0 <__sfp>
 801009a:	60a0      	str	r0, [r4, #8]
 801009c:	4620      	mov	r0, r4
 801009e:	f000 f817 	bl	80100d0 <__sfp>
 80100a2:	2200      	movs	r2, #0
 80100a4:	60e0      	str	r0, [r4, #12]
 80100a6:	2104      	movs	r1, #4
 80100a8:	6860      	ldr	r0, [r4, #4]
 80100aa:	f7ff ffa1 	bl	800fff0 <std>
 80100ae:	2201      	movs	r2, #1
 80100b0:	2109      	movs	r1, #9
 80100b2:	68a0      	ldr	r0, [r4, #8]
 80100b4:	f7ff ff9c 	bl	800fff0 <std>
 80100b8:	2202      	movs	r2, #2
 80100ba:	2112      	movs	r1, #18
 80100bc:	68e0      	ldr	r0, [r4, #12]
 80100be:	f7ff ff97 	bl	800fff0 <std>
 80100c2:	2301      	movs	r3, #1
 80100c4:	61a3      	str	r3, [r4, #24]
 80100c6:	bd10      	pop	{r4, pc}
 80100c8:	080133c8 	.word	0x080133c8
 80100cc:	08010039 	.word	0x08010039

080100d0 <__sfp>:
 80100d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d2:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <__sfp+0x70>)
 80100d4:	681e      	ldr	r6, [r3, #0]
 80100d6:	69b3      	ldr	r3, [r6, #24]
 80100d8:	4607      	mov	r7, r0
 80100da:	b913      	cbnz	r3, 80100e2 <__sfp+0x12>
 80100dc:	4630      	mov	r0, r6
 80100de:	f7ff ffc7 	bl	8010070 <__sinit>
 80100e2:	3648      	adds	r6, #72	; 0x48
 80100e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	d503      	bpl.n	80100f4 <__sfp+0x24>
 80100ec:	6833      	ldr	r3, [r6, #0]
 80100ee:	b133      	cbz	r3, 80100fe <__sfp+0x2e>
 80100f0:	6836      	ldr	r6, [r6, #0]
 80100f2:	e7f7      	b.n	80100e4 <__sfp+0x14>
 80100f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100f8:	b16d      	cbz	r5, 8010116 <__sfp+0x46>
 80100fa:	3468      	adds	r4, #104	; 0x68
 80100fc:	e7f4      	b.n	80100e8 <__sfp+0x18>
 80100fe:	2104      	movs	r1, #4
 8010100:	4638      	mov	r0, r7
 8010102:	f7ff ff9f 	bl	8010044 <__sfmoreglue>
 8010106:	6030      	str	r0, [r6, #0]
 8010108:	2800      	cmp	r0, #0
 801010a:	d1f1      	bne.n	80100f0 <__sfp+0x20>
 801010c:	230c      	movs	r3, #12
 801010e:	603b      	str	r3, [r7, #0]
 8010110:	4604      	mov	r4, r0
 8010112:	4620      	mov	r0, r4
 8010114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010116:	4b0b      	ldr	r3, [pc, #44]	; (8010144 <__sfp+0x74>)
 8010118:	6665      	str	r5, [r4, #100]	; 0x64
 801011a:	e9c4 5500 	strd	r5, r5, [r4]
 801011e:	60a5      	str	r5, [r4, #8]
 8010120:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010124:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010128:	2208      	movs	r2, #8
 801012a:	4629      	mov	r1, r5
 801012c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010130:	f7fd fb25 	bl	800d77e <memset>
 8010134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801013c:	e7e9      	b.n	8010112 <__sfp+0x42>
 801013e:	bf00      	nop
 8010140:	080133c8 	.word	0x080133c8
 8010144:	ffff0001 	.word	0xffff0001

08010148 <_fwalk_reent>:
 8010148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801014c:	4680      	mov	r8, r0
 801014e:	4689      	mov	r9, r1
 8010150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010154:	2600      	movs	r6, #0
 8010156:	b914      	cbnz	r4, 801015e <_fwalk_reent+0x16>
 8010158:	4630      	mov	r0, r6
 801015a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010162:	3f01      	subs	r7, #1
 8010164:	d501      	bpl.n	801016a <_fwalk_reent+0x22>
 8010166:	6824      	ldr	r4, [r4, #0]
 8010168:	e7f5      	b.n	8010156 <_fwalk_reent+0xe>
 801016a:	89ab      	ldrh	r3, [r5, #12]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d907      	bls.n	8010180 <_fwalk_reent+0x38>
 8010170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010174:	3301      	adds	r3, #1
 8010176:	d003      	beq.n	8010180 <_fwalk_reent+0x38>
 8010178:	4629      	mov	r1, r5
 801017a:	4640      	mov	r0, r8
 801017c:	47c8      	blx	r9
 801017e:	4306      	orrs	r6, r0
 8010180:	3568      	adds	r5, #104	; 0x68
 8010182:	e7ee      	b.n	8010162 <_fwalk_reent+0x1a>

08010184 <rshift>:
 8010184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010186:	6906      	ldr	r6, [r0, #16]
 8010188:	114b      	asrs	r3, r1, #5
 801018a:	429e      	cmp	r6, r3
 801018c:	f100 0414 	add.w	r4, r0, #20
 8010190:	dd30      	ble.n	80101f4 <rshift+0x70>
 8010192:	f011 011f 	ands.w	r1, r1, #31
 8010196:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801019a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801019e:	d108      	bne.n	80101b2 <rshift+0x2e>
 80101a0:	4621      	mov	r1, r4
 80101a2:	42b2      	cmp	r2, r6
 80101a4:	460b      	mov	r3, r1
 80101a6:	d211      	bcs.n	80101cc <rshift+0x48>
 80101a8:	f852 3b04 	ldr.w	r3, [r2], #4
 80101ac:	f841 3b04 	str.w	r3, [r1], #4
 80101b0:	e7f7      	b.n	80101a2 <rshift+0x1e>
 80101b2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80101b6:	f1c1 0c20 	rsb	ip, r1, #32
 80101ba:	40cd      	lsrs	r5, r1
 80101bc:	3204      	adds	r2, #4
 80101be:	4623      	mov	r3, r4
 80101c0:	42b2      	cmp	r2, r6
 80101c2:	4617      	mov	r7, r2
 80101c4:	d30c      	bcc.n	80101e0 <rshift+0x5c>
 80101c6:	601d      	str	r5, [r3, #0]
 80101c8:	b105      	cbz	r5, 80101cc <rshift+0x48>
 80101ca:	3304      	adds	r3, #4
 80101cc:	1b1a      	subs	r2, r3, r4
 80101ce:	42a3      	cmp	r3, r4
 80101d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101d4:	bf08      	it	eq
 80101d6:	2300      	moveq	r3, #0
 80101d8:	6102      	str	r2, [r0, #16]
 80101da:	bf08      	it	eq
 80101dc:	6143      	streq	r3, [r0, #20]
 80101de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101e0:	683f      	ldr	r7, [r7, #0]
 80101e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80101e6:	433d      	orrs	r5, r7
 80101e8:	f843 5b04 	str.w	r5, [r3], #4
 80101ec:	f852 5b04 	ldr.w	r5, [r2], #4
 80101f0:	40cd      	lsrs	r5, r1
 80101f2:	e7e5      	b.n	80101c0 <rshift+0x3c>
 80101f4:	4623      	mov	r3, r4
 80101f6:	e7e9      	b.n	80101cc <rshift+0x48>

080101f8 <__hexdig_fun>:
 80101f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80101fc:	2b09      	cmp	r3, #9
 80101fe:	d802      	bhi.n	8010206 <__hexdig_fun+0xe>
 8010200:	3820      	subs	r0, #32
 8010202:	b2c0      	uxtb	r0, r0
 8010204:	4770      	bx	lr
 8010206:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801020a:	2b05      	cmp	r3, #5
 801020c:	d801      	bhi.n	8010212 <__hexdig_fun+0x1a>
 801020e:	3847      	subs	r0, #71	; 0x47
 8010210:	e7f7      	b.n	8010202 <__hexdig_fun+0xa>
 8010212:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010216:	2b05      	cmp	r3, #5
 8010218:	d801      	bhi.n	801021e <__hexdig_fun+0x26>
 801021a:	3827      	subs	r0, #39	; 0x27
 801021c:	e7f1      	b.n	8010202 <__hexdig_fun+0xa>
 801021e:	2000      	movs	r0, #0
 8010220:	4770      	bx	lr

08010222 <__gethex>:
 8010222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010226:	b08b      	sub	sp, #44	; 0x2c
 8010228:	468a      	mov	sl, r1
 801022a:	9002      	str	r0, [sp, #8]
 801022c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801022e:	9306      	str	r3, [sp, #24]
 8010230:	4690      	mov	r8, r2
 8010232:	f000 fad0 	bl	80107d6 <__localeconv_l>
 8010236:	6803      	ldr	r3, [r0, #0]
 8010238:	9303      	str	r3, [sp, #12]
 801023a:	4618      	mov	r0, r3
 801023c:	f7ef ffd0 	bl	80001e0 <strlen>
 8010240:	9b03      	ldr	r3, [sp, #12]
 8010242:	9001      	str	r0, [sp, #4]
 8010244:	4403      	add	r3, r0
 8010246:	f04f 0b00 	mov.w	fp, #0
 801024a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801024e:	9307      	str	r3, [sp, #28]
 8010250:	f8da 3000 	ldr.w	r3, [sl]
 8010254:	3302      	adds	r3, #2
 8010256:	461f      	mov	r7, r3
 8010258:	f813 0b01 	ldrb.w	r0, [r3], #1
 801025c:	2830      	cmp	r0, #48	; 0x30
 801025e:	d06c      	beq.n	801033a <__gethex+0x118>
 8010260:	f7ff ffca 	bl	80101f8 <__hexdig_fun>
 8010264:	4604      	mov	r4, r0
 8010266:	2800      	cmp	r0, #0
 8010268:	d16a      	bne.n	8010340 <__gethex+0x11e>
 801026a:	9a01      	ldr	r2, [sp, #4]
 801026c:	9903      	ldr	r1, [sp, #12]
 801026e:	4638      	mov	r0, r7
 8010270:	f001 f9b9 	bl	80115e6 <strncmp>
 8010274:	2800      	cmp	r0, #0
 8010276:	d166      	bne.n	8010346 <__gethex+0x124>
 8010278:	9b01      	ldr	r3, [sp, #4]
 801027a:	5cf8      	ldrb	r0, [r7, r3]
 801027c:	18fe      	adds	r6, r7, r3
 801027e:	f7ff ffbb 	bl	80101f8 <__hexdig_fun>
 8010282:	2800      	cmp	r0, #0
 8010284:	d062      	beq.n	801034c <__gethex+0x12a>
 8010286:	4633      	mov	r3, r6
 8010288:	7818      	ldrb	r0, [r3, #0]
 801028a:	2830      	cmp	r0, #48	; 0x30
 801028c:	461f      	mov	r7, r3
 801028e:	f103 0301 	add.w	r3, r3, #1
 8010292:	d0f9      	beq.n	8010288 <__gethex+0x66>
 8010294:	f7ff ffb0 	bl	80101f8 <__hexdig_fun>
 8010298:	fab0 f580 	clz	r5, r0
 801029c:	096d      	lsrs	r5, r5, #5
 801029e:	4634      	mov	r4, r6
 80102a0:	f04f 0b01 	mov.w	fp, #1
 80102a4:	463a      	mov	r2, r7
 80102a6:	4616      	mov	r6, r2
 80102a8:	3201      	adds	r2, #1
 80102aa:	7830      	ldrb	r0, [r6, #0]
 80102ac:	f7ff ffa4 	bl	80101f8 <__hexdig_fun>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d1f8      	bne.n	80102a6 <__gethex+0x84>
 80102b4:	9a01      	ldr	r2, [sp, #4]
 80102b6:	9903      	ldr	r1, [sp, #12]
 80102b8:	4630      	mov	r0, r6
 80102ba:	f001 f994 	bl	80115e6 <strncmp>
 80102be:	b950      	cbnz	r0, 80102d6 <__gethex+0xb4>
 80102c0:	b954      	cbnz	r4, 80102d8 <__gethex+0xb6>
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	18f4      	adds	r4, r6, r3
 80102c6:	4622      	mov	r2, r4
 80102c8:	4616      	mov	r6, r2
 80102ca:	3201      	adds	r2, #1
 80102cc:	7830      	ldrb	r0, [r6, #0]
 80102ce:	f7ff ff93 	bl	80101f8 <__hexdig_fun>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d1f8      	bne.n	80102c8 <__gethex+0xa6>
 80102d6:	b10c      	cbz	r4, 80102dc <__gethex+0xba>
 80102d8:	1ba4      	subs	r4, r4, r6
 80102da:	00a4      	lsls	r4, r4, #2
 80102dc:	7833      	ldrb	r3, [r6, #0]
 80102de:	2b50      	cmp	r3, #80	; 0x50
 80102e0:	d001      	beq.n	80102e6 <__gethex+0xc4>
 80102e2:	2b70      	cmp	r3, #112	; 0x70
 80102e4:	d140      	bne.n	8010368 <__gethex+0x146>
 80102e6:	7873      	ldrb	r3, [r6, #1]
 80102e8:	2b2b      	cmp	r3, #43	; 0x2b
 80102ea:	d031      	beq.n	8010350 <__gethex+0x12e>
 80102ec:	2b2d      	cmp	r3, #45	; 0x2d
 80102ee:	d033      	beq.n	8010358 <__gethex+0x136>
 80102f0:	1c71      	adds	r1, r6, #1
 80102f2:	f04f 0900 	mov.w	r9, #0
 80102f6:	7808      	ldrb	r0, [r1, #0]
 80102f8:	f7ff ff7e 	bl	80101f8 <__hexdig_fun>
 80102fc:	1e43      	subs	r3, r0, #1
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b18      	cmp	r3, #24
 8010302:	d831      	bhi.n	8010368 <__gethex+0x146>
 8010304:	f1a0 0210 	sub.w	r2, r0, #16
 8010308:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801030c:	f7ff ff74 	bl	80101f8 <__hexdig_fun>
 8010310:	1e43      	subs	r3, r0, #1
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b18      	cmp	r3, #24
 8010316:	d922      	bls.n	801035e <__gethex+0x13c>
 8010318:	f1b9 0f00 	cmp.w	r9, #0
 801031c:	d000      	beq.n	8010320 <__gethex+0xfe>
 801031e:	4252      	negs	r2, r2
 8010320:	4414      	add	r4, r2
 8010322:	f8ca 1000 	str.w	r1, [sl]
 8010326:	b30d      	cbz	r5, 801036c <__gethex+0x14a>
 8010328:	f1bb 0f00 	cmp.w	fp, #0
 801032c:	bf0c      	ite	eq
 801032e:	2706      	moveq	r7, #6
 8010330:	2700      	movne	r7, #0
 8010332:	4638      	mov	r0, r7
 8010334:	b00b      	add	sp, #44	; 0x2c
 8010336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033a:	f10b 0b01 	add.w	fp, fp, #1
 801033e:	e78a      	b.n	8010256 <__gethex+0x34>
 8010340:	2500      	movs	r5, #0
 8010342:	462c      	mov	r4, r5
 8010344:	e7ae      	b.n	80102a4 <__gethex+0x82>
 8010346:	463e      	mov	r6, r7
 8010348:	2501      	movs	r5, #1
 801034a:	e7c7      	b.n	80102dc <__gethex+0xba>
 801034c:	4604      	mov	r4, r0
 801034e:	e7fb      	b.n	8010348 <__gethex+0x126>
 8010350:	f04f 0900 	mov.w	r9, #0
 8010354:	1cb1      	adds	r1, r6, #2
 8010356:	e7ce      	b.n	80102f6 <__gethex+0xd4>
 8010358:	f04f 0901 	mov.w	r9, #1
 801035c:	e7fa      	b.n	8010354 <__gethex+0x132>
 801035e:	230a      	movs	r3, #10
 8010360:	fb03 0202 	mla	r2, r3, r2, r0
 8010364:	3a10      	subs	r2, #16
 8010366:	e7cf      	b.n	8010308 <__gethex+0xe6>
 8010368:	4631      	mov	r1, r6
 801036a:	e7da      	b.n	8010322 <__gethex+0x100>
 801036c:	1bf3      	subs	r3, r6, r7
 801036e:	3b01      	subs	r3, #1
 8010370:	4629      	mov	r1, r5
 8010372:	2b07      	cmp	r3, #7
 8010374:	dc49      	bgt.n	801040a <__gethex+0x1e8>
 8010376:	9802      	ldr	r0, [sp, #8]
 8010378:	f000 fa52 	bl	8010820 <_Balloc>
 801037c:	9b01      	ldr	r3, [sp, #4]
 801037e:	f100 0914 	add.w	r9, r0, #20
 8010382:	f04f 0b00 	mov.w	fp, #0
 8010386:	f1c3 0301 	rsb	r3, r3, #1
 801038a:	4605      	mov	r5, r0
 801038c:	f8cd 9010 	str.w	r9, [sp, #16]
 8010390:	46da      	mov	sl, fp
 8010392:	9308      	str	r3, [sp, #32]
 8010394:	42b7      	cmp	r7, r6
 8010396:	d33b      	bcc.n	8010410 <__gethex+0x1ee>
 8010398:	9804      	ldr	r0, [sp, #16]
 801039a:	f840 ab04 	str.w	sl, [r0], #4
 801039e:	eba0 0009 	sub.w	r0, r0, r9
 80103a2:	1080      	asrs	r0, r0, #2
 80103a4:	6128      	str	r0, [r5, #16]
 80103a6:	0147      	lsls	r7, r0, #5
 80103a8:	4650      	mov	r0, sl
 80103aa:	f000 fafd 	bl	80109a8 <__hi0bits>
 80103ae:	f8d8 6000 	ldr.w	r6, [r8]
 80103b2:	1a3f      	subs	r7, r7, r0
 80103b4:	42b7      	cmp	r7, r6
 80103b6:	dd64      	ble.n	8010482 <__gethex+0x260>
 80103b8:	1bbf      	subs	r7, r7, r6
 80103ba:	4639      	mov	r1, r7
 80103bc:	4628      	mov	r0, r5
 80103be:	f000 fe0d 	bl	8010fdc <__any_on>
 80103c2:	4682      	mov	sl, r0
 80103c4:	b178      	cbz	r0, 80103e6 <__gethex+0x1c4>
 80103c6:	1e7b      	subs	r3, r7, #1
 80103c8:	1159      	asrs	r1, r3, #5
 80103ca:	f003 021f 	and.w	r2, r3, #31
 80103ce:	f04f 0a01 	mov.w	sl, #1
 80103d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80103d6:	fa0a f202 	lsl.w	r2, sl, r2
 80103da:	420a      	tst	r2, r1
 80103dc:	d003      	beq.n	80103e6 <__gethex+0x1c4>
 80103de:	4553      	cmp	r3, sl
 80103e0:	dc46      	bgt.n	8010470 <__gethex+0x24e>
 80103e2:	f04f 0a02 	mov.w	sl, #2
 80103e6:	4639      	mov	r1, r7
 80103e8:	4628      	mov	r0, r5
 80103ea:	f7ff fecb 	bl	8010184 <rshift>
 80103ee:	443c      	add	r4, r7
 80103f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103f4:	42a3      	cmp	r3, r4
 80103f6:	da52      	bge.n	801049e <__gethex+0x27c>
 80103f8:	4629      	mov	r1, r5
 80103fa:	9802      	ldr	r0, [sp, #8]
 80103fc:	f000 fa44 	bl	8010888 <_Bfree>
 8010400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010402:	2300      	movs	r3, #0
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	27a3      	movs	r7, #163	; 0xa3
 8010408:	e793      	b.n	8010332 <__gethex+0x110>
 801040a:	3101      	adds	r1, #1
 801040c:	105b      	asrs	r3, r3, #1
 801040e:	e7b0      	b.n	8010372 <__gethex+0x150>
 8010410:	1e73      	subs	r3, r6, #1
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	9a07      	ldr	r2, [sp, #28]
 8010416:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801041a:	4293      	cmp	r3, r2
 801041c:	d018      	beq.n	8010450 <__gethex+0x22e>
 801041e:	f1bb 0f20 	cmp.w	fp, #32
 8010422:	d107      	bne.n	8010434 <__gethex+0x212>
 8010424:	9b04      	ldr	r3, [sp, #16]
 8010426:	f8c3 a000 	str.w	sl, [r3]
 801042a:	3304      	adds	r3, #4
 801042c:	f04f 0a00 	mov.w	sl, #0
 8010430:	9304      	str	r3, [sp, #16]
 8010432:	46d3      	mov	fp, sl
 8010434:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010438:	f7ff fede 	bl	80101f8 <__hexdig_fun>
 801043c:	f000 000f 	and.w	r0, r0, #15
 8010440:	fa00 f00b 	lsl.w	r0, r0, fp
 8010444:	ea4a 0a00 	orr.w	sl, sl, r0
 8010448:	f10b 0b04 	add.w	fp, fp, #4
 801044c:	9b05      	ldr	r3, [sp, #20]
 801044e:	e00d      	b.n	801046c <__gethex+0x24a>
 8010450:	9b05      	ldr	r3, [sp, #20]
 8010452:	9a08      	ldr	r2, [sp, #32]
 8010454:	4413      	add	r3, r2
 8010456:	42bb      	cmp	r3, r7
 8010458:	d3e1      	bcc.n	801041e <__gethex+0x1fc>
 801045a:	4618      	mov	r0, r3
 801045c:	9a01      	ldr	r2, [sp, #4]
 801045e:	9903      	ldr	r1, [sp, #12]
 8010460:	9309      	str	r3, [sp, #36]	; 0x24
 8010462:	f001 f8c0 	bl	80115e6 <strncmp>
 8010466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010468:	2800      	cmp	r0, #0
 801046a:	d1d8      	bne.n	801041e <__gethex+0x1fc>
 801046c:	461e      	mov	r6, r3
 801046e:	e791      	b.n	8010394 <__gethex+0x172>
 8010470:	1eb9      	subs	r1, r7, #2
 8010472:	4628      	mov	r0, r5
 8010474:	f000 fdb2 	bl	8010fdc <__any_on>
 8010478:	2800      	cmp	r0, #0
 801047a:	d0b2      	beq.n	80103e2 <__gethex+0x1c0>
 801047c:	f04f 0a03 	mov.w	sl, #3
 8010480:	e7b1      	b.n	80103e6 <__gethex+0x1c4>
 8010482:	da09      	bge.n	8010498 <__gethex+0x276>
 8010484:	1bf7      	subs	r7, r6, r7
 8010486:	4629      	mov	r1, r5
 8010488:	463a      	mov	r2, r7
 801048a:	9802      	ldr	r0, [sp, #8]
 801048c:	f000 fbc8 	bl	8010c20 <__lshift>
 8010490:	1be4      	subs	r4, r4, r7
 8010492:	4605      	mov	r5, r0
 8010494:	f100 0914 	add.w	r9, r0, #20
 8010498:	f04f 0a00 	mov.w	sl, #0
 801049c:	e7a8      	b.n	80103f0 <__gethex+0x1ce>
 801049e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80104a2:	42a0      	cmp	r0, r4
 80104a4:	dd6a      	ble.n	801057c <__gethex+0x35a>
 80104a6:	1b04      	subs	r4, r0, r4
 80104a8:	42a6      	cmp	r6, r4
 80104aa:	dc2e      	bgt.n	801050a <__gethex+0x2e8>
 80104ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	d022      	beq.n	80104fa <__gethex+0x2d8>
 80104b4:	2b03      	cmp	r3, #3
 80104b6:	d024      	beq.n	8010502 <__gethex+0x2e0>
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d115      	bne.n	80104e8 <__gethex+0x2c6>
 80104bc:	42a6      	cmp	r6, r4
 80104be:	d113      	bne.n	80104e8 <__gethex+0x2c6>
 80104c0:	2e01      	cmp	r6, #1
 80104c2:	dc0b      	bgt.n	80104dc <__gethex+0x2ba>
 80104c4:	9a06      	ldr	r2, [sp, #24]
 80104c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	2301      	movs	r3, #1
 80104ce:	612b      	str	r3, [r5, #16]
 80104d0:	f8c9 3000 	str.w	r3, [r9]
 80104d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104d6:	2762      	movs	r7, #98	; 0x62
 80104d8:	601d      	str	r5, [r3, #0]
 80104da:	e72a      	b.n	8010332 <__gethex+0x110>
 80104dc:	1e71      	subs	r1, r6, #1
 80104de:	4628      	mov	r0, r5
 80104e0:	f000 fd7c 	bl	8010fdc <__any_on>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d1ed      	bne.n	80104c4 <__gethex+0x2a2>
 80104e8:	4629      	mov	r1, r5
 80104ea:	9802      	ldr	r0, [sp, #8]
 80104ec:	f000 f9cc 	bl	8010888 <_Bfree>
 80104f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104f2:	2300      	movs	r3, #0
 80104f4:	6013      	str	r3, [r2, #0]
 80104f6:	2750      	movs	r7, #80	; 0x50
 80104f8:	e71b      	b.n	8010332 <__gethex+0x110>
 80104fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d0e1      	beq.n	80104c4 <__gethex+0x2a2>
 8010500:	e7f2      	b.n	80104e8 <__gethex+0x2c6>
 8010502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1dd      	bne.n	80104c4 <__gethex+0x2a2>
 8010508:	e7ee      	b.n	80104e8 <__gethex+0x2c6>
 801050a:	1e67      	subs	r7, r4, #1
 801050c:	f1ba 0f00 	cmp.w	sl, #0
 8010510:	d131      	bne.n	8010576 <__gethex+0x354>
 8010512:	b127      	cbz	r7, 801051e <__gethex+0x2fc>
 8010514:	4639      	mov	r1, r7
 8010516:	4628      	mov	r0, r5
 8010518:	f000 fd60 	bl	8010fdc <__any_on>
 801051c:	4682      	mov	sl, r0
 801051e:	117a      	asrs	r2, r7, #5
 8010520:	2301      	movs	r3, #1
 8010522:	f007 071f 	and.w	r7, r7, #31
 8010526:	fa03 f707 	lsl.w	r7, r3, r7
 801052a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801052e:	4621      	mov	r1, r4
 8010530:	421f      	tst	r7, r3
 8010532:	4628      	mov	r0, r5
 8010534:	bf18      	it	ne
 8010536:	f04a 0a02 	orrne.w	sl, sl, #2
 801053a:	1b36      	subs	r6, r6, r4
 801053c:	f7ff fe22 	bl	8010184 <rshift>
 8010540:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010544:	2702      	movs	r7, #2
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	d048      	beq.n	80105de <__gethex+0x3bc>
 801054c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010550:	2b02      	cmp	r3, #2
 8010552:	d015      	beq.n	8010580 <__gethex+0x35e>
 8010554:	2b03      	cmp	r3, #3
 8010556:	d017      	beq.n	8010588 <__gethex+0x366>
 8010558:	2b01      	cmp	r3, #1
 801055a:	d109      	bne.n	8010570 <__gethex+0x34e>
 801055c:	f01a 0f02 	tst.w	sl, #2
 8010560:	d006      	beq.n	8010570 <__gethex+0x34e>
 8010562:	f8d9 3000 	ldr.w	r3, [r9]
 8010566:	ea4a 0a03 	orr.w	sl, sl, r3
 801056a:	f01a 0f01 	tst.w	sl, #1
 801056e:	d10e      	bne.n	801058e <__gethex+0x36c>
 8010570:	f047 0710 	orr.w	r7, r7, #16
 8010574:	e033      	b.n	80105de <__gethex+0x3bc>
 8010576:	f04f 0a01 	mov.w	sl, #1
 801057a:	e7d0      	b.n	801051e <__gethex+0x2fc>
 801057c:	2701      	movs	r7, #1
 801057e:	e7e2      	b.n	8010546 <__gethex+0x324>
 8010580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010582:	f1c3 0301 	rsb	r3, r3, #1
 8010586:	9315      	str	r3, [sp, #84]	; 0x54
 8010588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801058a:	2b00      	cmp	r3, #0
 801058c:	d0f0      	beq.n	8010570 <__gethex+0x34e>
 801058e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010592:	f105 0314 	add.w	r3, r5, #20
 8010596:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801059a:	eb03 010a 	add.w	r1, r3, sl
 801059e:	f04f 0c00 	mov.w	ip, #0
 80105a2:	4618      	mov	r0, r3
 80105a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80105ac:	d01c      	beq.n	80105e8 <__gethex+0x3c6>
 80105ae:	3201      	adds	r2, #1
 80105b0:	6002      	str	r2, [r0, #0]
 80105b2:	2f02      	cmp	r7, #2
 80105b4:	f105 0314 	add.w	r3, r5, #20
 80105b8:	d138      	bne.n	801062c <__gethex+0x40a>
 80105ba:	f8d8 2000 	ldr.w	r2, [r8]
 80105be:	3a01      	subs	r2, #1
 80105c0:	42b2      	cmp	r2, r6
 80105c2:	d10a      	bne.n	80105da <__gethex+0x3b8>
 80105c4:	1171      	asrs	r1, r6, #5
 80105c6:	2201      	movs	r2, #1
 80105c8:	f006 061f 	and.w	r6, r6, #31
 80105cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105d0:	fa02 f606 	lsl.w	r6, r2, r6
 80105d4:	421e      	tst	r6, r3
 80105d6:	bf18      	it	ne
 80105d8:	4617      	movne	r7, r2
 80105da:	f047 0720 	orr.w	r7, r7, #32
 80105de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105e0:	601d      	str	r5, [r3, #0]
 80105e2:	9b06      	ldr	r3, [sp, #24]
 80105e4:	601c      	str	r4, [r3, #0]
 80105e6:	e6a4      	b.n	8010332 <__gethex+0x110>
 80105e8:	4299      	cmp	r1, r3
 80105ea:	f843 cc04 	str.w	ip, [r3, #-4]
 80105ee:	d8d8      	bhi.n	80105a2 <__gethex+0x380>
 80105f0:	68ab      	ldr	r3, [r5, #8]
 80105f2:	4599      	cmp	r9, r3
 80105f4:	db12      	blt.n	801061c <__gethex+0x3fa>
 80105f6:	6869      	ldr	r1, [r5, #4]
 80105f8:	9802      	ldr	r0, [sp, #8]
 80105fa:	3101      	adds	r1, #1
 80105fc:	f000 f910 	bl	8010820 <_Balloc>
 8010600:	692a      	ldr	r2, [r5, #16]
 8010602:	3202      	adds	r2, #2
 8010604:	f105 010c 	add.w	r1, r5, #12
 8010608:	4683      	mov	fp, r0
 801060a:	0092      	lsls	r2, r2, #2
 801060c:	300c      	adds	r0, #12
 801060e:	f7fd f8ab 	bl	800d768 <memcpy>
 8010612:	4629      	mov	r1, r5
 8010614:	9802      	ldr	r0, [sp, #8]
 8010616:	f000 f937 	bl	8010888 <_Bfree>
 801061a:	465d      	mov	r5, fp
 801061c:	692b      	ldr	r3, [r5, #16]
 801061e:	1c5a      	adds	r2, r3, #1
 8010620:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010624:	612a      	str	r2, [r5, #16]
 8010626:	2201      	movs	r2, #1
 8010628:	615a      	str	r2, [r3, #20]
 801062a:	e7c2      	b.n	80105b2 <__gethex+0x390>
 801062c:	692a      	ldr	r2, [r5, #16]
 801062e:	454a      	cmp	r2, r9
 8010630:	dd0b      	ble.n	801064a <__gethex+0x428>
 8010632:	2101      	movs	r1, #1
 8010634:	4628      	mov	r0, r5
 8010636:	f7ff fda5 	bl	8010184 <rshift>
 801063a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801063e:	3401      	adds	r4, #1
 8010640:	42a3      	cmp	r3, r4
 8010642:	f6ff aed9 	blt.w	80103f8 <__gethex+0x1d6>
 8010646:	2701      	movs	r7, #1
 8010648:	e7c7      	b.n	80105da <__gethex+0x3b8>
 801064a:	f016 061f 	ands.w	r6, r6, #31
 801064e:	d0fa      	beq.n	8010646 <__gethex+0x424>
 8010650:	449a      	add	sl, r3
 8010652:	f1c6 0620 	rsb	r6, r6, #32
 8010656:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801065a:	f000 f9a5 	bl	80109a8 <__hi0bits>
 801065e:	42b0      	cmp	r0, r6
 8010660:	dbe7      	blt.n	8010632 <__gethex+0x410>
 8010662:	e7f0      	b.n	8010646 <__gethex+0x424>

08010664 <L_shift>:
 8010664:	f1c2 0208 	rsb	r2, r2, #8
 8010668:	0092      	lsls	r2, r2, #2
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	f1c2 0620 	rsb	r6, r2, #32
 8010670:	6843      	ldr	r3, [r0, #4]
 8010672:	6804      	ldr	r4, [r0, #0]
 8010674:	fa03 f506 	lsl.w	r5, r3, r6
 8010678:	432c      	orrs	r4, r5
 801067a:	40d3      	lsrs	r3, r2
 801067c:	6004      	str	r4, [r0, #0]
 801067e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010682:	4288      	cmp	r0, r1
 8010684:	d3f4      	bcc.n	8010670 <L_shift+0xc>
 8010686:	bd70      	pop	{r4, r5, r6, pc}

08010688 <__match>:
 8010688:	b530      	push	{r4, r5, lr}
 801068a:	6803      	ldr	r3, [r0, #0]
 801068c:	3301      	adds	r3, #1
 801068e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010692:	b914      	cbnz	r4, 801069a <__match+0x12>
 8010694:	6003      	str	r3, [r0, #0]
 8010696:	2001      	movs	r0, #1
 8010698:	bd30      	pop	{r4, r5, pc}
 801069a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801069e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80106a2:	2d19      	cmp	r5, #25
 80106a4:	bf98      	it	ls
 80106a6:	3220      	addls	r2, #32
 80106a8:	42a2      	cmp	r2, r4
 80106aa:	d0f0      	beq.n	801068e <__match+0x6>
 80106ac:	2000      	movs	r0, #0
 80106ae:	e7f3      	b.n	8010698 <__match+0x10>

080106b0 <__hexnan>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	680b      	ldr	r3, [r1, #0]
 80106b6:	6801      	ldr	r1, [r0, #0]
 80106b8:	115f      	asrs	r7, r3, #5
 80106ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80106be:	f013 031f 	ands.w	r3, r3, #31
 80106c2:	b087      	sub	sp, #28
 80106c4:	bf18      	it	ne
 80106c6:	3704      	addne	r7, #4
 80106c8:	2500      	movs	r5, #0
 80106ca:	1f3e      	subs	r6, r7, #4
 80106cc:	4682      	mov	sl, r0
 80106ce:	4690      	mov	r8, r2
 80106d0:	9301      	str	r3, [sp, #4]
 80106d2:	f847 5c04 	str.w	r5, [r7, #-4]
 80106d6:	46b1      	mov	r9, r6
 80106d8:	4634      	mov	r4, r6
 80106da:	9502      	str	r5, [sp, #8]
 80106dc:	46ab      	mov	fp, r5
 80106de:	784a      	ldrb	r2, [r1, #1]
 80106e0:	1c4b      	adds	r3, r1, #1
 80106e2:	9303      	str	r3, [sp, #12]
 80106e4:	b342      	cbz	r2, 8010738 <__hexnan+0x88>
 80106e6:	4610      	mov	r0, r2
 80106e8:	9105      	str	r1, [sp, #20]
 80106ea:	9204      	str	r2, [sp, #16]
 80106ec:	f7ff fd84 	bl	80101f8 <__hexdig_fun>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d143      	bne.n	801077c <__hexnan+0xcc>
 80106f4:	9a04      	ldr	r2, [sp, #16]
 80106f6:	9905      	ldr	r1, [sp, #20]
 80106f8:	2a20      	cmp	r2, #32
 80106fa:	d818      	bhi.n	801072e <__hexnan+0x7e>
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	459b      	cmp	fp, r3
 8010700:	dd13      	ble.n	801072a <__hexnan+0x7a>
 8010702:	454c      	cmp	r4, r9
 8010704:	d206      	bcs.n	8010714 <__hexnan+0x64>
 8010706:	2d07      	cmp	r5, #7
 8010708:	dc04      	bgt.n	8010714 <__hexnan+0x64>
 801070a:	462a      	mov	r2, r5
 801070c:	4649      	mov	r1, r9
 801070e:	4620      	mov	r0, r4
 8010710:	f7ff ffa8 	bl	8010664 <L_shift>
 8010714:	4544      	cmp	r4, r8
 8010716:	d944      	bls.n	80107a2 <__hexnan+0xf2>
 8010718:	2300      	movs	r3, #0
 801071a:	f1a4 0904 	sub.w	r9, r4, #4
 801071e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010722:	f8cd b008 	str.w	fp, [sp, #8]
 8010726:	464c      	mov	r4, r9
 8010728:	461d      	mov	r5, r3
 801072a:	9903      	ldr	r1, [sp, #12]
 801072c:	e7d7      	b.n	80106de <__hexnan+0x2e>
 801072e:	2a29      	cmp	r2, #41	; 0x29
 8010730:	d14a      	bne.n	80107c8 <__hexnan+0x118>
 8010732:	3102      	adds	r1, #2
 8010734:	f8ca 1000 	str.w	r1, [sl]
 8010738:	f1bb 0f00 	cmp.w	fp, #0
 801073c:	d044      	beq.n	80107c8 <__hexnan+0x118>
 801073e:	454c      	cmp	r4, r9
 8010740:	d206      	bcs.n	8010750 <__hexnan+0xa0>
 8010742:	2d07      	cmp	r5, #7
 8010744:	dc04      	bgt.n	8010750 <__hexnan+0xa0>
 8010746:	462a      	mov	r2, r5
 8010748:	4649      	mov	r1, r9
 801074a:	4620      	mov	r0, r4
 801074c:	f7ff ff8a 	bl	8010664 <L_shift>
 8010750:	4544      	cmp	r4, r8
 8010752:	d928      	bls.n	80107a6 <__hexnan+0xf6>
 8010754:	4643      	mov	r3, r8
 8010756:	f854 2b04 	ldr.w	r2, [r4], #4
 801075a:	f843 2b04 	str.w	r2, [r3], #4
 801075e:	42a6      	cmp	r6, r4
 8010760:	d2f9      	bcs.n	8010756 <__hexnan+0xa6>
 8010762:	2200      	movs	r2, #0
 8010764:	f843 2b04 	str.w	r2, [r3], #4
 8010768:	429e      	cmp	r6, r3
 801076a:	d2fb      	bcs.n	8010764 <__hexnan+0xb4>
 801076c:	6833      	ldr	r3, [r6, #0]
 801076e:	b91b      	cbnz	r3, 8010778 <__hexnan+0xc8>
 8010770:	4546      	cmp	r6, r8
 8010772:	d127      	bne.n	80107c4 <__hexnan+0x114>
 8010774:	2301      	movs	r3, #1
 8010776:	6033      	str	r3, [r6, #0]
 8010778:	2005      	movs	r0, #5
 801077a:	e026      	b.n	80107ca <__hexnan+0x11a>
 801077c:	3501      	adds	r5, #1
 801077e:	2d08      	cmp	r5, #8
 8010780:	f10b 0b01 	add.w	fp, fp, #1
 8010784:	dd06      	ble.n	8010794 <__hexnan+0xe4>
 8010786:	4544      	cmp	r4, r8
 8010788:	d9cf      	bls.n	801072a <__hexnan+0x7a>
 801078a:	2300      	movs	r3, #0
 801078c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010790:	2501      	movs	r5, #1
 8010792:	3c04      	subs	r4, #4
 8010794:	6822      	ldr	r2, [r4, #0]
 8010796:	f000 000f 	and.w	r0, r0, #15
 801079a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801079e:	6020      	str	r0, [r4, #0]
 80107a0:	e7c3      	b.n	801072a <__hexnan+0x7a>
 80107a2:	2508      	movs	r5, #8
 80107a4:	e7c1      	b.n	801072a <__hexnan+0x7a>
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d0df      	beq.n	801076c <__hexnan+0xbc>
 80107ac:	f04f 32ff 	mov.w	r2, #4294967295
 80107b0:	f1c3 0320 	rsb	r3, r3, #32
 80107b4:	fa22 f303 	lsr.w	r3, r2, r3
 80107b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80107bc:	401a      	ands	r2, r3
 80107be:	f847 2c04 	str.w	r2, [r7, #-4]
 80107c2:	e7d3      	b.n	801076c <__hexnan+0xbc>
 80107c4:	3e04      	subs	r6, #4
 80107c6:	e7d1      	b.n	801076c <__hexnan+0xbc>
 80107c8:	2004      	movs	r0, #4
 80107ca:	b007      	add	sp, #28
 80107cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107d0 <__locale_ctype_ptr_l>:
 80107d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80107d4:	4770      	bx	lr

080107d6 <__localeconv_l>:
 80107d6:	30f0      	adds	r0, #240	; 0xf0
 80107d8:	4770      	bx	lr
	...

080107dc <_localeconv_r>:
 80107dc:	4b04      	ldr	r3, [pc, #16]	; (80107f0 <_localeconv_r+0x14>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6a18      	ldr	r0, [r3, #32]
 80107e2:	4b04      	ldr	r3, [pc, #16]	; (80107f4 <_localeconv_r+0x18>)
 80107e4:	2800      	cmp	r0, #0
 80107e6:	bf08      	it	eq
 80107e8:	4618      	moveq	r0, r3
 80107ea:	30f0      	adds	r0, #240	; 0xf0
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	200002d0 	.word	0x200002d0
 80107f4:	20000334 	.word	0x20000334

080107f8 <__ascii_mbtowc>:
 80107f8:	b082      	sub	sp, #8
 80107fa:	b901      	cbnz	r1, 80107fe <__ascii_mbtowc+0x6>
 80107fc:	a901      	add	r1, sp, #4
 80107fe:	b142      	cbz	r2, 8010812 <__ascii_mbtowc+0x1a>
 8010800:	b14b      	cbz	r3, 8010816 <__ascii_mbtowc+0x1e>
 8010802:	7813      	ldrb	r3, [r2, #0]
 8010804:	600b      	str	r3, [r1, #0]
 8010806:	7812      	ldrb	r2, [r2, #0]
 8010808:	1c10      	adds	r0, r2, #0
 801080a:	bf18      	it	ne
 801080c:	2001      	movne	r0, #1
 801080e:	b002      	add	sp, #8
 8010810:	4770      	bx	lr
 8010812:	4610      	mov	r0, r2
 8010814:	e7fb      	b.n	801080e <__ascii_mbtowc+0x16>
 8010816:	f06f 0001 	mvn.w	r0, #1
 801081a:	e7f8      	b.n	801080e <__ascii_mbtowc+0x16>

0801081c <__malloc_lock>:
 801081c:	4770      	bx	lr

0801081e <__malloc_unlock>:
 801081e:	4770      	bx	lr

08010820 <_Balloc>:
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010824:	4604      	mov	r4, r0
 8010826:	460e      	mov	r6, r1
 8010828:	b93d      	cbnz	r5, 801083a <_Balloc+0x1a>
 801082a:	2010      	movs	r0, #16
 801082c:	f7fc ff94 	bl	800d758 <malloc>
 8010830:	6260      	str	r0, [r4, #36]	; 0x24
 8010832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010836:	6005      	str	r5, [r0, #0]
 8010838:	60c5      	str	r5, [r0, #12]
 801083a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801083c:	68eb      	ldr	r3, [r5, #12]
 801083e:	b183      	cbz	r3, 8010862 <_Balloc+0x42>
 8010840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010848:	b9b8      	cbnz	r0, 801087a <_Balloc+0x5a>
 801084a:	2101      	movs	r1, #1
 801084c:	fa01 f506 	lsl.w	r5, r1, r6
 8010850:	1d6a      	adds	r2, r5, #5
 8010852:	0092      	lsls	r2, r2, #2
 8010854:	4620      	mov	r0, r4
 8010856:	f000 fbe2 	bl	801101e <_calloc_r>
 801085a:	b160      	cbz	r0, 8010876 <_Balloc+0x56>
 801085c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010860:	e00e      	b.n	8010880 <_Balloc+0x60>
 8010862:	2221      	movs	r2, #33	; 0x21
 8010864:	2104      	movs	r1, #4
 8010866:	4620      	mov	r0, r4
 8010868:	f000 fbd9 	bl	801101e <_calloc_r>
 801086c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801086e:	60e8      	str	r0, [r5, #12]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1e4      	bne.n	8010840 <_Balloc+0x20>
 8010876:	2000      	movs	r0, #0
 8010878:	bd70      	pop	{r4, r5, r6, pc}
 801087a:	6802      	ldr	r2, [r0, #0]
 801087c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010880:	2300      	movs	r3, #0
 8010882:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010886:	e7f7      	b.n	8010878 <_Balloc+0x58>

08010888 <_Bfree>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801088c:	4606      	mov	r6, r0
 801088e:	460d      	mov	r5, r1
 8010890:	b93c      	cbnz	r4, 80108a2 <_Bfree+0x1a>
 8010892:	2010      	movs	r0, #16
 8010894:	f7fc ff60 	bl	800d758 <malloc>
 8010898:	6270      	str	r0, [r6, #36]	; 0x24
 801089a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801089e:	6004      	str	r4, [r0, #0]
 80108a0:	60c4      	str	r4, [r0, #12]
 80108a2:	b13d      	cbz	r5, 80108b4 <_Bfree+0x2c>
 80108a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80108a6:	686a      	ldr	r2, [r5, #4]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108ae:	6029      	str	r1, [r5, #0]
 80108b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80108b4:	bd70      	pop	{r4, r5, r6, pc}

080108b6 <__multadd>:
 80108b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ba:	690d      	ldr	r5, [r1, #16]
 80108bc:	461f      	mov	r7, r3
 80108be:	4606      	mov	r6, r0
 80108c0:	460c      	mov	r4, r1
 80108c2:	f101 0c14 	add.w	ip, r1, #20
 80108c6:	2300      	movs	r3, #0
 80108c8:	f8dc 0000 	ldr.w	r0, [ip]
 80108cc:	b281      	uxth	r1, r0
 80108ce:	fb02 7101 	mla	r1, r2, r1, r7
 80108d2:	0c0f      	lsrs	r7, r1, #16
 80108d4:	0c00      	lsrs	r0, r0, #16
 80108d6:	fb02 7000 	mla	r0, r2, r0, r7
 80108da:	b289      	uxth	r1, r1
 80108dc:	3301      	adds	r3, #1
 80108de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80108e2:	429d      	cmp	r5, r3
 80108e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80108e8:	f84c 1b04 	str.w	r1, [ip], #4
 80108ec:	dcec      	bgt.n	80108c8 <__multadd+0x12>
 80108ee:	b1d7      	cbz	r7, 8010926 <__multadd+0x70>
 80108f0:	68a3      	ldr	r3, [r4, #8]
 80108f2:	42ab      	cmp	r3, r5
 80108f4:	dc12      	bgt.n	801091c <__multadd+0x66>
 80108f6:	6861      	ldr	r1, [r4, #4]
 80108f8:	4630      	mov	r0, r6
 80108fa:	3101      	adds	r1, #1
 80108fc:	f7ff ff90 	bl	8010820 <_Balloc>
 8010900:	6922      	ldr	r2, [r4, #16]
 8010902:	3202      	adds	r2, #2
 8010904:	f104 010c 	add.w	r1, r4, #12
 8010908:	4680      	mov	r8, r0
 801090a:	0092      	lsls	r2, r2, #2
 801090c:	300c      	adds	r0, #12
 801090e:	f7fc ff2b 	bl	800d768 <memcpy>
 8010912:	4621      	mov	r1, r4
 8010914:	4630      	mov	r0, r6
 8010916:	f7ff ffb7 	bl	8010888 <_Bfree>
 801091a:	4644      	mov	r4, r8
 801091c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010920:	3501      	adds	r5, #1
 8010922:	615f      	str	r7, [r3, #20]
 8010924:	6125      	str	r5, [r4, #16]
 8010926:	4620      	mov	r0, r4
 8010928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801092c <__s2b>:
 801092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010930:	460c      	mov	r4, r1
 8010932:	4615      	mov	r5, r2
 8010934:	461f      	mov	r7, r3
 8010936:	2209      	movs	r2, #9
 8010938:	3308      	adds	r3, #8
 801093a:	4606      	mov	r6, r0
 801093c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010940:	2100      	movs	r1, #0
 8010942:	2201      	movs	r2, #1
 8010944:	429a      	cmp	r2, r3
 8010946:	db20      	blt.n	801098a <__s2b+0x5e>
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff ff69 	bl	8010820 <_Balloc>
 801094e:	9b08      	ldr	r3, [sp, #32]
 8010950:	6143      	str	r3, [r0, #20]
 8010952:	2d09      	cmp	r5, #9
 8010954:	f04f 0301 	mov.w	r3, #1
 8010958:	6103      	str	r3, [r0, #16]
 801095a:	dd19      	ble.n	8010990 <__s2b+0x64>
 801095c:	f104 0809 	add.w	r8, r4, #9
 8010960:	46c1      	mov	r9, r8
 8010962:	442c      	add	r4, r5
 8010964:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010968:	4601      	mov	r1, r0
 801096a:	3b30      	subs	r3, #48	; 0x30
 801096c:	220a      	movs	r2, #10
 801096e:	4630      	mov	r0, r6
 8010970:	f7ff ffa1 	bl	80108b6 <__multadd>
 8010974:	45a1      	cmp	r9, r4
 8010976:	d1f5      	bne.n	8010964 <__s2b+0x38>
 8010978:	eb08 0405 	add.w	r4, r8, r5
 801097c:	3c08      	subs	r4, #8
 801097e:	1b2d      	subs	r5, r5, r4
 8010980:	1963      	adds	r3, r4, r5
 8010982:	42bb      	cmp	r3, r7
 8010984:	db07      	blt.n	8010996 <__s2b+0x6a>
 8010986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801098a:	0052      	lsls	r2, r2, #1
 801098c:	3101      	adds	r1, #1
 801098e:	e7d9      	b.n	8010944 <__s2b+0x18>
 8010990:	340a      	adds	r4, #10
 8010992:	2509      	movs	r5, #9
 8010994:	e7f3      	b.n	801097e <__s2b+0x52>
 8010996:	f814 3b01 	ldrb.w	r3, [r4], #1
 801099a:	4601      	mov	r1, r0
 801099c:	3b30      	subs	r3, #48	; 0x30
 801099e:	220a      	movs	r2, #10
 80109a0:	4630      	mov	r0, r6
 80109a2:	f7ff ff88 	bl	80108b6 <__multadd>
 80109a6:	e7eb      	b.n	8010980 <__s2b+0x54>

080109a8 <__hi0bits>:
 80109a8:	0c02      	lsrs	r2, r0, #16
 80109aa:	0412      	lsls	r2, r2, #16
 80109ac:	4603      	mov	r3, r0
 80109ae:	b9b2      	cbnz	r2, 80109de <__hi0bits+0x36>
 80109b0:	0403      	lsls	r3, r0, #16
 80109b2:	2010      	movs	r0, #16
 80109b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80109b8:	bf04      	itt	eq
 80109ba:	021b      	lsleq	r3, r3, #8
 80109bc:	3008      	addeq	r0, #8
 80109be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80109c2:	bf04      	itt	eq
 80109c4:	011b      	lsleq	r3, r3, #4
 80109c6:	3004      	addeq	r0, #4
 80109c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80109cc:	bf04      	itt	eq
 80109ce:	009b      	lsleq	r3, r3, #2
 80109d0:	3002      	addeq	r0, #2
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	db06      	blt.n	80109e4 <__hi0bits+0x3c>
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	d503      	bpl.n	80109e2 <__hi0bits+0x3a>
 80109da:	3001      	adds	r0, #1
 80109dc:	4770      	bx	lr
 80109de:	2000      	movs	r0, #0
 80109e0:	e7e8      	b.n	80109b4 <__hi0bits+0xc>
 80109e2:	2020      	movs	r0, #32
 80109e4:	4770      	bx	lr

080109e6 <__lo0bits>:
 80109e6:	6803      	ldr	r3, [r0, #0]
 80109e8:	f013 0207 	ands.w	r2, r3, #7
 80109ec:	4601      	mov	r1, r0
 80109ee:	d00b      	beq.n	8010a08 <__lo0bits+0x22>
 80109f0:	07da      	lsls	r2, r3, #31
 80109f2:	d423      	bmi.n	8010a3c <__lo0bits+0x56>
 80109f4:	0798      	lsls	r0, r3, #30
 80109f6:	bf49      	itett	mi
 80109f8:	085b      	lsrmi	r3, r3, #1
 80109fa:	089b      	lsrpl	r3, r3, #2
 80109fc:	2001      	movmi	r0, #1
 80109fe:	600b      	strmi	r3, [r1, #0]
 8010a00:	bf5c      	itt	pl
 8010a02:	600b      	strpl	r3, [r1, #0]
 8010a04:	2002      	movpl	r0, #2
 8010a06:	4770      	bx	lr
 8010a08:	b298      	uxth	r0, r3
 8010a0a:	b9a8      	cbnz	r0, 8010a38 <__lo0bits+0x52>
 8010a0c:	0c1b      	lsrs	r3, r3, #16
 8010a0e:	2010      	movs	r0, #16
 8010a10:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a14:	bf04      	itt	eq
 8010a16:	0a1b      	lsreq	r3, r3, #8
 8010a18:	3008      	addeq	r0, #8
 8010a1a:	071a      	lsls	r2, r3, #28
 8010a1c:	bf04      	itt	eq
 8010a1e:	091b      	lsreq	r3, r3, #4
 8010a20:	3004      	addeq	r0, #4
 8010a22:	079a      	lsls	r2, r3, #30
 8010a24:	bf04      	itt	eq
 8010a26:	089b      	lsreq	r3, r3, #2
 8010a28:	3002      	addeq	r0, #2
 8010a2a:	07da      	lsls	r2, r3, #31
 8010a2c:	d402      	bmi.n	8010a34 <__lo0bits+0x4e>
 8010a2e:	085b      	lsrs	r3, r3, #1
 8010a30:	d006      	beq.n	8010a40 <__lo0bits+0x5a>
 8010a32:	3001      	adds	r0, #1
 8010a34:	600b      	str	r3, [r1, #0]
 8010a36:	4770      	bx	lr
 8010a38:	4610      	mov	r0, r2
 8010a3a:	e7e9      	b.n	8010a10 <__lo0bits+0x2a>
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	4770      	bx	lr
 8010a40:	2020      	movs	r0, #32
 8010a42:	4770      	bx	lr

08010a44 <__i2b>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	460c      	mov	r4, r1
 8010a48:	2101      	movs	r1, #1
 8010a4a:	f7ff fee9 	bl	8010820 <_Balloc>
 8010a4e:	2201      	movs	r2, #1
 8010a50:	6144      	str	r4, [r0, #20]
 8010a52:	6102      	str	r2, [r0, #16]
 8010a54:	bd10      	pop	{r4, pc}

08010a56 <__multiply>:
 8010a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5a:	4614      	mov	r4, r2
 8010a5c:	690a      	ldr	r2, [r1, #16]
 8010a5e:	6923      	ldr	r3, [r4, #16]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	bfb8      	it	lt
 8010a64:	460b      	movlt	r3, r1
 8010a66:	4688      	mov	r8, r1
 8010a68:	bfbc      	itt	lt
 8010a6a:	46a0      	movlt	r8, r4
 8010a6c:	461c      	movlt	r4, r3
 8010a6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a7e:	eb07 0609 	add.w	r6, r7, r9
 8010a82:	42b3      	cmp	r3, r6
 8010a84:	bfb8      	it	lt
 8010a86:	3101      	addlt	r1, #1
 8010a88:	f7ff feca 	bl	8010820 <_Balloc>
 8010a8c:	f100 0514 	add.w	r5, r0, #20
 8010a90:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010a94:	462b      	mov	r3, r5
 8010a96:	2200      	movs	r2, #0
 8010a98:	4573      	cmp	r3, lr
 8010a9a:	d316      	bcc.n	8010aca <__multiply+0x74>
 8010a9c:	f104 0214 	add.w	r2, r4, #20
 8010aa0:	f108 0114 	add.w	r1, r8, #20
 8010aa4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010aa8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	9b00      	ldr	r3, [sp, #0]
 8010ab0:	9201      	str	r2, [sp, #4]
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d80c      	bhi.n	8010ad0 <__multiply+0x7a>
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	dd03      	ble.n	8010ac2 <__multiply+0x6c>
 8010aba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d05d      	beq.n	8010b7e <__multiply+0x128>
 8010ac2:	6106      	str	r6, [r0, #16]
 8010ac4:	b003      	add	sp, #12
 8010ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aca:	f843 2b04 	str.w	r2, [r3], #4
 8010ace:	e7e3      	b.n	8010a98 <__multiply+0x42>
 8010ad0:	f8b2 b000 	ldrh.w	fp, [r2]
 8010ad4:	f1bb 0f00 	cmp.w	fp, #0
 8010ad8:	d023      	beq.n	8010b22 <__multiply+0xcc>
 8010ada:	4689      	mov	r9, r1
 8010adc:	46ac      	mov	ip, r5
 8010ade:	f04f 0800 	mov.w	r8, #0
 8010ae2:	f859 4b04 	ldr.w	r4, [r9], #4
 8010ae6:	f8dc a000 	ldr.w	sl, [ip]
 8010aea:	b2a3      	uxth	r3, r4
 8010aec:	fa1f fa8a 	uxth.w	sl, sl
 8010af0:	fb0b a303 	mla	r3, fp, r3, sl
 8010af4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010af8:	f8dc 4000 	ldr.w	r4, [ip]
 8010afc:	4443      	add	r3, r8
 8010afe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b02:	fb0b 840a 	mla	r4, fp, sl, r8
 8010b06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010b0a:	46e2      	mov	sl, ip
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b12:	454f      	cmp	r7, r9
 8010b14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b18:	f84a 3b04 	str.w	r3, [sl], #4
 8010b1c:	d82b      	bhi.n	8010b76 <__multiply+0x120>
 8010b1e:	f8cc 8004 	str.w	r8, [ip, #4]
 8010b22:	9b01      	ldr	r3, [sp, #4]
 8010b24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010b28:	3204      	adds	r2, #4
 8010b2a:	f1ba 0f00 	cmp.w	sl, #0
 8010b2e:	d020      	beq.n	8010b72 <__multiply+0x11c>
 8010b30:	682b      	ldr	r3, [r5, #0]
 8010b32:	4689      	mov	r9, r1
 8010b34:	46a8      	mov	r8, r5
 8010b36:	f04f 0b00 	mov.w	fp, #0
 8010b3a:	f8b9 c000 	ldrh.w	ip, [r9]
 8010b3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010b42:	fb0a 440c 	mla	r4, sl, ip, r4
 8010b46:	445c      	add	r4, fp
 8010b48:	46c4      	mov	ip, r8
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b50:	f84c 3b04 	str.w	r3, [ip], #4
 8010b54:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010b5c:	0c1b      	lsrs	r3, r3, #16
 8010b5e:	fb0a b303 	mla	r3, sl, r3, fp
 8010b62:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010b66:	454f      	cmp	r7, r9
 8010b68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010b6c:	d805      	bhi.n	8010b7a <__multiply+0x124>
 8010b6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8010b72:	3504      	adds	r5, #4
 8010b74:	e79b      	b.n	8010aae <__multiply+0x58>
 8010b76:	46d4      	mov	ip, sl
 8010b78:	e7b3      	b.n	8010ae2 <__multiply+0x8c>
 8010b7a:	46e0      	mov	r8, ip
 8010b7c:	e7dd      	b.n	8010b3a <__multiply+0xe4>
 8010b7e:	3e01      	subs	r6, #1
 8010b80:	e799      	b.n	8010ab6 <__multiply+0x60>
	...

08010b84 <__pow5mult>:
 8010b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b88:	4615      	mov	r5, r2
 8010b8a:	f012 0203 	ands.w	r2, r2, #3
 8010b8e:	4606      	mov	r6, r0
 8010b90:	460f      	mov	r7, r1
 8010b92:	d007      	beq.n	8010ba4 <__pow5mult+0x20>
 8010b94:	3a01      	subs	r2, #1
 8010b96:	4c21      	ldr	r4, [pc, #132]	; (8010c1c <__pow5mult+0x98>)
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b9e:	f7ff fe8a 	bl	80108b6 <__multadd>
 8010ba2:	4607      	mov	r7, r0
 8010ba4:	10ad      	asrs	r5, r5, #2
 8010ba6:	d035      	beq.n	8010c14 <__pow5mult+0x90>
 8010ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010baa:	b93c      	cbnz	r4, 8010bbc <__pow5mult+0x38>
 8010bac:	2010      	movs	r0, #16
 8010bae:	f7fc fdd3 	bl	800d758 <malloc>
 8010bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8010bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bb8:	6004      	str	r4, [r0, #0]
 8010bba:	60c4      	str	r4, [r0, #12]
 8010bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010bc4:	b94c      	cbnz	r4, 8010bda <__pow5mult+0x56>
 8010bc6:	f240 2171 	movw	r1, #625	; 0x271
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f7ff ff3a 	bl	8010a44 <__i2b>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	f04f 0800 	mov.w	r8, #0
 8010bde:	07eb      	lsls	r3, r5, #31
 8010be0:	d50a      	bpl.n	8010bf8 <__pow5mult+0x74>
 8010be2:	4639      	mov	r1, r7
 8010be4:	4622      	mov	r2, r4
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ff ff35 	bl	8010a56 <__multiply>
 8010bec:	4639      	mov	r1, r7
 8010bee:	4681      	mov	r9, r0
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f7ff fe49 	bl	8010888 <_Bfree>
 8010bf6:	464f      	mov	r7, r9
 8010bf8:	106d      	asrs	r5, r5, #1
 8010bfa:	d00b      	beq.n	8010c14 <__pow5mult+0x90>
 8010bfc:	6820      	ldr	r0, [r4, #0]
 8010bfe:	b938      	cbnz	r0, 8010c10 <__pow5mult+0x8c>
 8010c00:	4622      	mov	r2, r4
 8010c02:	4621      	mov	r1, r4
 8010c04:	4630      	mov	r0, r6
 8010c06:	f7ff ff26 	bl	8010a56 <__multiply>
 8010c0a:	6020      	str	r0, [r4, #0]
 8010c0c:	f8c0 8000 	str.w	r8, [r0]
 8010c10:	4604      	mov	r4, r0
 8010c12:	e7e4      	b.n	8010bde <__pow5mult+0x5a>
 8010c14:	4638      	mov	r0, r7
 8010c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c1a:	bf00      	nop
 8010c1c:	080135c8 	.word	0x080135c8

08010c20 <__lshift>:
 8010c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c24:	460c      	mov	r4, r1
 8010c26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c2a:	6923      	ldr	r3, [r4, #16]
 8010c2c:	6849      	ldr	r1, [r1, #4]
 8010c2e:	eb0a 0903 	add.w	r9, sl, r3
 8010c32:	68a3      	ldr	r3, [r4, #8]
 8010c34:	4607      	mov	r7, r0
 8010c36:	4616      	mov	r6, r2
 8010c38:	f109 0501 	add.w	r5, r9, #1
 8010c3c:	42ab      	cmp	r3, r5
 8010c3e:	db32      	blt.n	8010ca6 <__lshift+0x86>
 8010c40:	4638      	mov	r0, r7
 8010c42:	f7ff fded 	bl	8010820 <_Balloc>
 8010c46:	2300      	movs	r3, #0
 8010c48:	4680      	mov	r8, r0
 8010c4a:	f100 0114 	add.w	r1, r0, #20
 8010c4e:	461a      	mov	r2, r3
 8010c50:	4553      	cmp	r3, sl
 8010c52:	db2b      	blt.n	8010cac <__lshift+0x8c>
 8010c54:	6920      	ldr	r0, [r4, #16]
 8010c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c5a:	f104 0314 	add.w	r3, r4, #20
 8010c5e:	f016 021f 	ands.w	r2, r6, #31
 8010c62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c6a:	d025      	beq.n	8010cb8 <__lshift+0x98>
 8010c6c:	f1c2 0e20 	rsb	lr, r2, #32
 8010c70:	2000      	movs	r0, #0
 8010c72:	681e      	ldr	r6, [r3, #0]
 8010c74:	468a      	mov	sl, r1
 8010c76:	4096      	lsls	r6, r2
 8010c78:	4330      	orrs	r0, r6
 8010c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8010c7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010c82:	459c      	cmp	ip, r3
 8010c84:	fa20 f00e 	lsr.w	r0, r0, lr
 8010c88:	d814      	bhi.n	8010cb4 <__lshift+0x94>
 8010c8a:	6048      	str	r0, [r1, #4]
 8010c8c:	b108      	cbz	r0, 8010c92 <__lshift+0x72>
 8010c8e:	f109 0502 	add.w	r5, r9, #2
 8010c92:	3d01      	subs	r5, #1
 8010c94:	4638      	mov	r0, r7
 8010c96:	f8c8 5010 	str.w	r5, [r8, #16]
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	f7ff fdf4 	bl	8010888 <_Bfree>
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca6:	3101      	adds	r1, #1
 8010ca8:	005b      	lsls	r3, r3, #1
 8010caa:	e7c7      	b.n	8010c3c <__lshift+0x1c>
 8010cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	e7cd      	b.n	8010c50 <__lshift+0x30>
 8010cb4:	4651      	mov	r1, sl
 8010cb6:	e7dc      	b.n	8010c72 <__lshift+0x52>
 8010cb8:	3904      	subs	r1, #4
 8010cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cc2:	459c      	cmp	ip, r3
 8010cc4:	d8f9      	bhi.n	8010cba <__lshift+0x9a>
 8010cc6:	e7e4      	b.n	8010c92 <__lshift+0x72>

08010cc8 <__mcmp>:
 8010cc8:	6903      	ldr	r3, [r0, #16]
 8010cca:	690a      	ldr	r2, [r1, #16]
 8010ccc:	1a9b      	subs	r3, r3, r2
 8010cce:	b530      	push	{r4, r5, lr}
 8010cd0:	d10c      	bne.n	8010cec <__mcmp+0x24>
 8010cd2:	0092      	lsls	r2, r2, #2
 8010cd4:	3014      	adds	r0, #20
 8010cd6:	3114      	adds	r1, #20
 8010cd8:	1884      	adds	r4, r0, r2
 8010cda:	4411      	add	r1, r2
 8010cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ce4:	4295      	cmp	r5, r2
 8010ce6:	d003      	beq.n	8010cf0 <__mcmp+0x28>
 8010ce8:	d305      	bcc.n	8010cf6 <__mcmp+0x2e>
 8010cea:	2301      	movs	r3, #1
 8010cec:	4618      	mov	r0, r3
 8010cee:	bd30      	pop	{r4, r5, pc}
 8010cf0:	42a0      	cmp	r0, r4
 8010cf2:	d3f3      	bcc.n	8010cdc <__mcmp+0x14>
 8010cf4:	e7fa      	b.n	8010cec <__mcmp+0x24>
 8010cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cfa:	e7f7      	b.n	8010cec <__mcmp+0x24>

08010cfc <__mdiff>:
 8010cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d00:	460d      	mov	r5, r1
 8010d02:	4607      	mov	r7, r0
 8010d04:	4611      	mov	r1, r2
 8010d06:	4628      	mov	r0, r5
 8010d08:	4614      	mov	r4, r2
 8010d0a:	f7ff ffdd 	bl	8010cc8 <__mcmp>
 8010d0e:	1e06      	subs	r6, r0, #0
 8010d10:	d108      	bne.n	8010d24 <__mdiff+0x28>
 8010d12:	4631      	mov	r1, r6
 8010d14:	4638      	mov	r0, r7
 8010d16:	f7ff fd83 	bl	8010820 <_Balloc>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d24:	bfa4      	itt	ge
 8010d26:	4623      	movge	r3, r4
 8010d28:	462c      	movge	r4, r5
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	6861      	ldr	r1, [r4, #4]
 8010d2e:	bfa6      	itte	ge
 8010d30:	461d      	movge	r5, r3
 8010d32:	2600      	movge	r6, #0
 8010d34:	2601      	movlt	r6, #1
 8010d36:	f7ff fd73 	bl	8010820 <_Balloc>
 8010d3a:	692b      	ldr	r3, [r5, #16]
 8010d3c:	60c6      	str	r6, [r0, #12]
 8010d3e:	6926      	ldr	r6, [r4, #16]
 8010d40:	f105 0914 	add.w	r9, r5, #20
 8010d44:	f104 0214 	add.w	r2, r4, #20
 8010d48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010d4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010d50:	f100 0514 	add.w	r5, r0, #20
 8010d54:	f04f 0e00 	mov.w	lr, #0
 8010d58:	f852 ab04 	ldr.w	sl, [r2], #4
 8010d5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010d60:	fa1e f18a 	uxtah	r1, lr, sl
 8010d64:	b2a3      	uxth	r3, r4
 8010d66:	1ac9      	subs	r1, r1, r3
 8010d68:	0c23      	lsrs	r3, r4, #16
 8010d6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010d6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010d72:	b289      	uxth	r1, r1
 8010d74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010d78:	45c8      	cmp	r8, r9
 8010d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010d7e:	4694      	mov	ip, r2
 8010d80:	f845 3b04 	str.w	r3, [r5], #4
 8010d84:	d8e8      	bhi.n	8010d58 <__mdiff+0x5c>
 8010d86:	45bc      	cmp	ip, r7
 8010d88:	d304      	bcc.n	8010d94 <__mdiff+0x98>
 8010d8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010d8e:	b183      	cbz	r3, 8010db2 <__mdiff+0xb6>
 8010d90:	6106      	str	r6, [r0, #16]
 8010d92:	e7c5      	b.n	8010d20 <__mdiff+0x24>
 8010d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010d98:	fa1e f381 	uxtah	r3, lr, r1
 8010d9c:	141a      	asrs	r2, r3, #16
 8010d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010da8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010dac:	f845 3b04 	str.w	r3, [r5], #4
 8010db0:	e7e9      	b.n	8010d86 <__mdiff+0x8a>
 8010db2:	3e01      	subs	r6, #1
 8010db4:	e7e9      	b.n	8010d8a <__mdiff+0x8e>
	...

08010db8 <__ulp>:
 8010db8:	4b12      	ldr	r3, [pc, #72]	; (8010e04 <__ulp+0x4c>)
 8010dba:	ee10 2a90 	vmov	r2, s1
 8010dbe:	401a      	ands	r2, r3
 8010dc0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dd04      	ble.n	8010dd2 <__ulp+0x1a>
 8010dc8:	2000      	movs	r0, #0
 8010dca:	4619      	mov	r1, r3
 8010dcc:	ec41 0b10 	vmov	d0, r0, r1
 8010dd0:	4770      	bx	lr
 8010dd2:	425b      	negs	r3, r3
 8010dd4:	151b      	asrs	r3, r3, #20
 8010dd6:	2b13      	cmp	r3, #19
 8010dd8:	f04f 0000 	mov.w	r0, #0
 8010ddc:	f04f 0100 	mov.w	r1, #0
 8010de0:	dc04      	bgt.n	8010dec <__ulp+0x34>
 8010de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010de6:	fa42 f103 	asr.w	r1, r2, r3
 8010dea:	e7ef      	b.n	8010dcc <__ulp+0x14>
 8010dec:	3b14      	subs	r3, #20
 8010dee:	2b1e      	cmp	r3, #30
 8010df0:	f04f 0201 	mov.w	r2, #1
 8010df4:	bfda      	itte	le
 8010df6:	f1c3 031f 	rsble	r3, r3, #31
 8010dfa:	fa02 f303 	lslle.w	r3, r2, r3
 8010dfe:	4613      	movgt	r3, r2
 8010e00:	4618      	mov	r0, r3
 8010e02:	e7e3      	b.n	8010dcc <__ulp+0x14>
 8010e04:	7ff00000 	.word	0x7ff00000

08010e08 <__b2d>:
 8010e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0a:	6905      	ldr	r5, [r0, #16]
 8010e0c:	f100 0714 	add.w	r7, r0, #20
 8010e10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010e14:	1f2e      	subs	r6, r5, #4
 8010e16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f7ff fdc4 	bl	80109a8 <__hi0bits>
 8010e20:	f1c0 0320 	rsb	r3, r0, #32
 8010e24:	280a      	cmp	r0, #10
 8010e26:	600b      	str	r3, [r1, #0]
 8010e28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010ea0 <__b2d+0x98>
 8010e2c:	dc14      	bgt.n	8010e58 <__b2d+0x50>
 8010e2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010e32:	fa24 f10e 	lsr.w	r1, r4, lr
 8010e36:	42b7      	cmp	r7, r6
 8010e38:	ea41 030c 	orr.w	r3, r1, ip
 8010e3c:	bf34      	ite	cc
 8010e3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e42:	2100      	movcs	r1, #0
 8010e44:	3015      	adds	r0, #21
 8010e46:	fa04 f000 	lsl.w	r0, r4, r0
 8010e4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8010e4e:	ea40 0201 	orr.w	r2, r0, r1
 8010e52:	ec43 2b10 	vmov	d0, r2, r3
 8010e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e58:	42b7      	cmp	r7, r6
 8010e5a:	bf3a      	itte	cc
 8010e5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010e60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e64:	2100      	movcs	r1, #0
 8010e66:	380b      	subs	r0, #11
 8010e68:	d015      	beq.n	8010e96 <__b2d+0x8e>
 8010e6a:	4084      	lsls	r4, r0
 8010e6c:	f1c0 0520 	rsb	r5, r0, #32
 8010e70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010e74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010e78:	42be      	cmp	r6, r7
 8010e7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8010e7e:	ea44 030c 	orr.w	r3, r4, ip
 8010e82:	bf8c      	ite	hi
 8010e84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010e88:	2400      	movls	r4, #0
 8010e8a:	fa01 f000 	lsl.w	r0, r1, r0
 8010e8e:	40ec      	lsrs	r4, r5
 8010e90:	ea40 0204 	orr.w	r2, r0, r4
 8010e94:	e7dd      	b.n	8010e52 <__b2d+0x4a>
 8010e96:	ea44 030c 	orr.w	r3, r4, ip
 8010e9a:	460a      	mov	r2, r1
 8010e9c:	e7d9      	b.n	8010e52 <__b2d+0x4a>
 8010e9e:	bf00      	nop
 8010ea0:	3ff00000 	.word	0x3ff00000

08010ea4 <__d2b>:
 8010ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ea8:	460e      	mov	r6, r1
 8010eaa:	2101      	movs	r1, #1
 8010eac:	ec59 8b10 	vmov	r8, r9, d0
 8010eb0:	4615      	mov	r5, r2
 8010eb2:	f7ff fcb5 	bl	8010820 <_Balloc>
 8010eb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010eba:	4607      	mov	r7, r0
 8010ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ec0:	bb34      	cbnz	r4, 8010f10 <__d2b+0x6c>
 8010ec2:	9301      	str	r3, [sp, #4]
 8010ec4:	f1b8 0300 	subs.w	r3, r8, #0
 8010ec8:	d027      	beq.n	8010f1a <__d2b+0x76>
 8010eca:	a802      	add	r0, sp, #8
 8010ecc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010ed0:	f7ff fd89 	bl	80109e6 <__lo0bits>
 8010ed4:	9900      	ldr	r1, [sp, #0]
 8010ed6:	b1f0      	cbz	r0, 8010f16 <__d2b+0x72>
 8010ed8:	9a01      	ldr	r2, [sp, #4]
 8010eda:	f1c0 0320 	rsb	r3, r0, #32
 8010ede:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee2:	430b      	orrs	r3, r1
 8010ee4:	40c2      	lsrs	r2, r0
 8010ee6:	617b      	str	r3, [r7, #20]
 8010ee8:	9201      	str	r2, [sp, #4]
 8010eea:	9b01      	ldr	r3, [sp, #4]
 8010eec:	61bb      	str	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	bf14      	ite	ne
 8010ef2:	2102      	movne	r1, #2
 8010ef4:	2101      	moveq	r1, #1
 8010ef6:	6139      	str	r1, [r7, #16]
 8010ef8:	b1c4      	cbz	r4, 8010f2c <__d2b+0x88>
 8010efa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010efe:	4404      	add	r4, r0
 8010f00:	6034      	str	r4, [r6, #0]
 8010f02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f06:	6028      	str	r0, [r5, #0]
 8010f08:	4638      	mov	r0, r7
 8010f0a:	b003      	add	sp, #12
 8010f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f14:	e7d5      	b.n	8010ec2 <__d2b+0x1e>
 8010f16:	6179      	str	r1, [r7, #20]
 8010f18:	e7e7      	b.n	8010eea <__d2b+0x46>
 8010f1a:	a801      	add	r0, sp, #4
 8010f1c:	f7ff fd63 	bl	80109e6 <__lo0bits>
 8010f20:	9b01      	ldr	r3, [sp, #4]
 8010f22:	617b      	str	r3, [r7, #20]
 8010f24:	2101      	movs	r1, #1
 8010f26:	6139      	str	r1, [r7, #16]
 8010f28:	3020      	adds	r0, #32
 8010f2a:	e7e5      	b.n	8010ef8 <__d2b+0x54>
 8010f2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f34:	6030      	str	r0, [r6, #0]
 8010f36:	6918      	ldr	r0, [r3, #16]
 8010f38:	f7ff fd36 	bl	80109a8 <__hi0bits>
 8010f3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010f40:	e7e1      	b.n	8010f06 <__d2b+0x62>

08010f42 <__ratio>:
 8010f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f46:	4688      	mov	r8, r1
 8010f48:	4669      	mov	r1, sp
 8010f4a:	4681      	mov	r9, r0
 8010f4c:	f7ff ff5c 	bl	8010e08 <__b2d>
 8010f50:	a901      	add	r1, sp, #4
 8010f52:	4640      	mov	r0, r8
 8010f54:	ec57 6b10 	vmov	r6, r7, d0
 8010f58:	f7ff ff56 	bl	8010e08 <__b2d>
 8010f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010f64:	eba3 0c02 	sub.w	ip, r3, r2
 8010f68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010f72:	ec5b ab10 	vmov	sl, fp, d0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	bfce      	itee	gt
 8010f7a:	463a      	movgt	r2, r7
 8010f7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f80:	465a      	movle	r2, fp
 8010f82:	4659      	mov	r1, fp
 8010f84:	463d      	mov	r5, r7
 8010f86:	bfd4      	ite	le
 8010f88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010f8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010f90:	4630      	mov	r0, r6
 8010f92:	ee10 2a10 	vmov	r2, s0
 8010f96:	460b      	mov	r3, r1
 8010f98:	4629      	mov	r1, r5
 8010f9a:	f7ef fc5f 	bl	800085c <__aeabi_ddiv>
 8010f9e:	ec41 0b10 	vmov	d0, r0, r1
 8010fa2:	b003      	add	sp, #12
 8010fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fa8 <__copybits>:
 8010fa8:	3901      	subs	r1, #1
 8010faa:	b510      	push	{r4, lr}
 8010fac:	1149      	asrs	r1, r1, #5
 8010fae:	6914      	ldr	r4, [r2, #16]
 8010fb0:	3101      	adds	r1, #1
 8010fb2:	f102 0314 	add.w	r3, r2, #20
 8010fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010fbe:	42a3      	cmp	r3, r4
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	d303      	bcc.n	8010fcc <__copybits+0x24>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	428a      	cmp	r2, r1
 8010fc8:	d305      	bcc.n	8010fd6 <__copybits+0x2e>
 8010fca:	bd10      	pop	{r4, pc}
 8010fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd0:	f840 2b04 	str.w	r2, [r0], #4
 8010fd4:	e7f3      	b.n	8010fbe <__copybits+0x16>
 8010fd6:	f842 3b04 	str.w	r3, [r2], #4
 8010fda:	e7f4      	b.n	8010fc6 <__copybits+0x1e>

08010fdc <__any_on>:
 8010fdc:	f100 0214 	add.w	r2, r0, #20
 8010fe0:	6900      	ldr	r0, [r0, #16]
 8010fe2:	114b      	asrs	r3, r1, #5
 8010fe4:	4298      	cmp	r0, r3
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	db11      	blt.n	801100e <__any_on+0x32>
 8010fea:	dd0a      	ble.n	8011002 <__any_on+0x26>
 8010fec:	f011 011f 	ands.w	r1, r1, #31
 8010ff0:	d007      	beq.n	8011002 <__any_on+0x26>
 8010ff2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010ff6:	fa24 f001 	lsr.w	r0, r4, r1
 8010ffa:	fa00 f101 	lsl.w	r1, r0, r1
 8010ffe:	428c      	cmp	r4, r1
 8011000:	d10b      	bne.n	801101a <__any_on+0x3e>
 8011002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011006:	4293      	cmp	r3, r2
 8011008:	d803      	bhi.n	8011012 <__any_on+0x36>
 801100a:	2000      	movs	r0, #0
 801100c:	bd10      	pop	{r4, pc}
 801100e:	4603      	mov	r3, r0
 8011010:	e7f7      	b.n	8011002 <__any_on+0x26>
 8011012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011016:	2900      	cmp	r1, #0
 8011018:	d0f5      	beq.n	8011006 <__any_on+0x2a>
 801101a:	2001      	movs	r0, #1
 801101c:	e7f6      	b.n	801100c <__any_on+0x30>

0801101e <_calloc_r>:
 801101e:	b538      	push	{r3, r4, r5, lr}
 8011020:	fb02 f401 	mul.w	r4, r2, r1
 8011024:	4621      	mov	r1, r4
 8011026:	f7fc fc01 	bl	800d82c <_malloc_r>
 801102a:	4605      	mov	r5, r0
 801102c:	b118      	cbz	r0, 8011036 <_calloc_r+0x18>
 801102e:	4622      	mov	r2, r4
 8011030:	2100      	movs	r1, #0
 8011032:	f7fc fba4 	bl	800d77e <memset>
 8011036:	4628      	mov	r0, r5
 8011038:	bd38      	pop	{r3, r4, r5, pc}

0801103a <__ssputs_r>:
 801103a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801103e:	688e      	ldr	r6, [r1, #8]
 8011040:	429e      	cmp	r6, r3
 8011042:	4682      	mov	sl, r0
 8011044:	460c      	mov	r4, r1
 8011046:	4690      	mov	r8, r2
 8011048:	4699      	mov	r9, r3
 801104a:	d837      	bhi.n	80110bc <__ssputs_r+0x82>
 801104c:	898a      	ldrh	r2, [r1, #12]
 801104e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011052:	d031      	beq.n	80110b8 <__ssputs_r+0x7e>
 8011054:	6825      	ldr	r5, [r4, #0]
 8011056:	6909      	ldr	r1, [r1, #16]
 8011058:	1a6f      	subs	r7, r5, r1
 801105a:	6965      	ldr	r5, [r4, #20]
 801105c:	2302      	movs	r3, #2
 801105e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011062:	fb95 f5f3 	sdiv	r5, r5, r3
 8011066:	f109 0301 	add.w	r3, r9, #1
 801106a:	443b      	add	r3, r7
 801106c:	429d      	cmp	r5, r3
 801106e:	bf38      	it	cc
 8011070:	461d      	movcc	r5, r3
 8011072:	0553      	lsls	r3, r2, #21
 8011074:	d530      	bpl.n	80110d8 <__ssputs_r+0x9e>
 8011076:	4629      	mov	r1, r5
 8011078:	f7fc fbd8 	bl	800d82c <_malloc_r>
 801107c:	4606      	mov	r6, r0
 801107e:	b950      	cbnz	r0, 8011096 <__ssputs_r+0x5c>
 8011080:	230c      	movs	r3, #12
 8011082:	f8ca 3000 	str.w	r3, [sl]
 8011086:	89a3      	ldrh	r3, [r4, #12]
 8011088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801108c:	81a3      	strh	r3, [r4, #12]
 801108e:	f04f 30ff 	mov.w	r0, #4294967295
 8011092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011096:	463a      	mov	r2, r7
 8011098:	6921      	ldr	r1, [r4, #16]
 801109a:	f7fc fb65 	bl	800d768 <memcpy>
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	6126      	str	r6, [r4, #16]
 80110ac:	6165      	str	r5, [r4, #20]
 80110ae:	443e      	add	r6, r7
 80110b0:	1bed      	subs	r5, r5, r7
 80110b2:	6026      	str	r6, [r4, #0]
 80110b4:	60a5      	str	r5, [r4, #8]
 80110b6:	464e      	mov	r6, r9
 80110b8:	454e      	cmp	r6, r9
 80110ba:	d900      	bls.n	80110be <__ssputs_r+0x84>
 80110bc:	464e      	mov	r6, r9
 80110be:	4632      	mov	r2, r6
 80110c0:	4641      	mov	r1, r8
 80110c2:	6820      	ldr	r0, [r4, #0]
 80110c4:	f000 fcb8 	bl	8011a38 <memmove>
 80110c8:	68a3      	ldr	r3, [r4, #8]
 80110ca:	1b9b      	subs	r3, r3, r6
 80110cc:	60a3      	str	r3, [r4, #8]
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	441e      	add	r6, r3
 80110d2:	6026      	str	r6, [r4, #0]
 80110d4:	2000      	movs	r0, #0
 80110d6:	e7dc      	b.n	8011092 <__ssputs_r+0x58>
 80110d8:	462a      	mov	r2, r5
 80110da:	f000 fcc6 	bl	8011a6a <_realloc_r>
 80110de:	4606      	mov	r6, r0
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d1e2      	bne.n	80110aa <__ssputs_r+0x70>
 80110e4:	6921      	ldr	r1, [r4, #16]
 80110e6:	4650      	mov	r0, sl
 80110e8:	f7fc fb52 	bl	800d790 <_free_r>
 80110ec:	e7c8      	b.n	8011080 <__ssputs_r+0x46>
	...

080110f0 <_svfiprintf_r>:
 80110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f4:	461d      	mov	r5, r3
 80110f6:	898b      	ldrh	r3, [r1, #12]
 80110f8:	061f      	lsls	r7, r3, #24
 80110fa:	b09d      	sub	sp, #116	; 0x74
 80110fc:	4680      	mov	r8, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	4616      	mov	r6, r2
 8011102:	d50f      	bpl.n	8011124 <_svfiprintf_r+0x34>
 8011104:	690b      	ldr	r3, [r1, #16]
 8011106:	b96b      	cbnz	r3, 8011124 <_svfiprintf_r+0x34>
 8011108:	2140      	movs	r1, #64	; 0x40
 801110a:	f7fc fb8f 	bl	800d82c <_malloc_r>
 801110e:	6020      	str	r0, [r4, #0]
 8011110:	6120      	str	r0, [r4, #16]
 8011112:	b928      	cbnz	r0, 8011120 <_svfiprintf_r+0x30>
 8011114:	230c      	movs	r3, #12
 8011116:	f8c8 3000 	str.w	r3, [r8]
 801111a:	f04f 30ff 	mov.w	r0, #4294967295
 801111e:	e0c8      	b.n	80112b2 <_svfiprintf_r+0x1c2>
 8011120:	2340      	movs	r3, #64	; 0x40
 8011122:	6163      	str	r3, [r4, #20]
 8011124:	2300      	movs	r3, #0
 8011126:	9309      	str	r3, [sp, #36]	; 0x24
 8011128:	2320      	movs	r3, #32
 801112a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801112e:	2330      	movs	r3, #48	; 0x30
 8011130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011134:	9503      	str	r5, [sp, #12]
 8011136:	f04f 0b01 	mov.w	fp, #1
 801113a:	4637      	mov	r7, r6
 801113c:	463d      	mov	r5, r7
 801113e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011142:	b10b      	cbz	r3, 8011148 <_svfiprintf_r+0x58>
 8011144:	2b25      	cmp	r3, #37	; 0x25
 8011146:	d13e      	bne.n	80111c6 <_svfiprintf_r+0xd6>
 8011148:	ebb7 0a06 	subs.w	sl, r7, r6
 801114c:	d00b      	beq.n	8011166 <_svfiprintf_r+0x76>
 801114e:	4653      	mov	r3, sl
 8011150:	4632      	mov	r2, r6
 8011152:	4621      	mov	r1, r4
 8011154:	4640      	mov	r0, r8
 8011156:	f7ff ff70 	bl	801103a <__ssputs_r>
 801115a:	3001      	adds	r0, #1
 801115c:	f000 80a4 	beq.w	80112a8 <_svfiprintf_r+0x1b8>
 8011160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011162:	4453      	add	r3, sl
 8011164:	9309      	str	r3, [sp, #36]	; 0x24
 8011166:	783b      	ldrb	r3, [r7, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 809d 	beq.w	80112a8 <_svfiprintf_r+0x1b8>
 801116e:	2300      	movs	r3, #0
 8011170:	f04f 32ff 	mov.w	r2, #4294967295
 8011174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011178:	9304      	str	r3, [sp, #16]
 801117a:	9307      	str	r3, [sp, #28]
 801117c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011180:	931a      	str	r3, [sp, #104]	; 0x68
 8011182:	462f      	mov	r7, r5
 8011184:	2205      	movs	r2, #5
 8011186:	f817 1b01 	ldrb.w	r1, [r7], #1
 801118a:	4850      	ldr	r0, [pc, #320]	; (80112cc <_svfiprintf_r+0x1dc>)
 801118c:	f7ef f830 	bl	80001f0 <memchr>
 8011190:	9b04      	ldr	r3, [sp, #16]
 8011192:	b9d0      	cbnz	r0, 80111ca <_svfiprintf_r+0xda>
 8011194:	06d9      	lsls	r1, r3, #27
 8011196:	bf44      	itt	mi
 8011198:	2220      	movmi	r2, #32
 801119a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801119e:	071a      	lsls	r2, r3, #28
 80111a0:	bf44      	itt	mi
 80111a2:	222b      	movmi	r2, #43	; 0x2b
 80111a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80111a8:	782a      	ldrb	r2, [r5, #0]
 80111aa:	2a2a      	cmp	r2, #42	; 0x2a
 80111ac:	d015      	beq.n	80111da <_svfiprintf_r+0xea>
 80111ae:	9a07      	ldr	r2, [sp, #28]
 80111b0:	462f      	mov	r7, r5
 80111b2:	2000      	movs	r0, #0
 80111b4:	250a      	movs	r5, #10
 80111b6:	4639      	mov	r1, r7
 80111b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111bc:	3b30      	subs	r3, #48	; 0x30
 80111be:	2b09      	cmp	r3, #9
 80111c0:	d94d      	bls.n	801125e <_svfiprintf_r+0x16e>
 80111c2:	b1b8      	cbz	r0, 80111f4 <_svfiprintf_r+0x104>
 80111c4:	e00f      	b.n	80111e6 <_svfiprintf_r+0xf6>
 80111c6:	462f      	mov	r7, r5
 80111c8:	e7b8      	b.n	801113c <_svfiprintf_r+0x4c>
 80111ca:	4a40      	ldr	r2, [pc, #256]	; (80112cc <_svfiprintf_r+0x1dc>)
 80111cc:	1a80      	subs	r0, r0, r2
 80111ce:	fa0b f000 	lsl.w	r0, fp, r0
 80111d2:	4318      	orrs	r0, r3
 80111d4:	9004      	str	r0, [sp, #16]
 80111d6:	463d      	mov	r5, r7
 80111d8:	e7d3      	b.n	8011182 <_svfiprintf_r+0x92>
 80111da:	9a03      	ldr	r2, [sp, #12]
 80111dc:	1d11      	adds	r1, r2, #4
 80111de:	6812      	ldr	r2, [r2, #0]
 80111e0:	9103      	str	r1, [sp, #12]
 80111e2:	2a00      	cmp	r2, #0
 80111e4:	db01      	blt.n	80111ea <_svfiprintf_r+0xfa>
 80111e6:	9207      	str	r2, [sp, #28]
 80111e8:	e004      	b.n	80111f4 <_svfiprintf_r+0x104>
 80111ea:	4252      	negs	r2, r2
 80111ec:	f043 0302 	orr.w	r3, r3, #2
 80111f0:	9207      	str	r2, [sp, #28]
 80111f2:	9304      	str	r3, [sp, #16]
 80111f4:	783b      	ldrb	r3, [r7, #0]
 80111f6:	2b2e      	cmp	r3, #46	; 0x2e
 80111f8:	d10c      	bne.n	8011214 <_svfiprintf_r+0x124>
 80111fa:	787b      	ldrb	r3, [r7, #1]
 80111fc:	2b2a      	cmp	r3, #42	; 0x2a
 80111fe:	d133      	bne.n	8011268 <_svfiprintf_r+0x178>
 8011200:	9b03      	ldr	r3, [sp, #12]
 8011202:	1d1a      	adds	r2, r3, #4
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	9203      	str	r2, [sp, #12]
 8011208:	2b00      	cmp	r3, #0
 801120a:	bfb8      	it	lt
 801120c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011210:	3702      	adds	r7, #2
 8011212:	9305      	str	r3, [sp, #20]
 8011214:	4d2e      	ldr	r5, [pc, #184]	; (80112d0 <_svfiprintf_r+0x1e0>)
 8011216:	7839      	ldrb	r1, [r7, #0]
 8011218:	2203      	movs	r2, #3
 801121a:	4628      	mov	r0, r5
 801121c:	f7ee ffe8 	bl	80001f0 <memchr>
 8011220:	b138      	cbz	r0, 8011232 <_svfiprintf_r+0x142>
 8011222:	2340      	movs	r3, #64	; 0x40
 8011224:	1b40      	subs	r0, r0, r5
 8011226:	fa03 f000 	lsl.w	r0, r3, r0
 801122a:	9b04      	ldr	r3, [sp, #16]
 801122c:	4303      	orrs	r3, r0
 801122e:	3701      	adds	r7, #1
 8011230:	9304      	str	r3, [sp, #16]
 8011232:	7839      	ldrb	r1, [r7, #0]
 8011234:	4827      	ldr	r0, [pc, #156]	; (80112d4 <_svfiprintf_r+0x1e4>)
 8011236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801123a:	2206      	movs	r2, #6
 801123c:	1c7e      	adds	r6, r7, #1
 801123e:	f7ee ffd7 	bl	80001f0 <memchr>
 8011242:	2800      	cmp	r0, #0
 8011244:	d038      	beq.n	80112b8 <_svfiprintf_r+0x1c8>
 8011246:	4b24      	ldr	r3, [pc, #144]	; (80112d8 <_svfiprintf_r+0x1e8>)
 8011248:	bb13      	cbnz	r3, 8011290 <_svfiprintf_r+0x1a0>
 801124a:	9b03      	ldr	r3, [sp, #12]
 801124c:	3307      	adds	r3, #7
 801124e:	f023 0307 	bic.w	r3, r3, #7
 8011252:	3308      	adds	r3, #8
 8011254:	9303      	str	r3, [sp, #12]
 8011256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011258:	444b      	add	r3, r9
 801125a:	9309      	str	r3, [sp, #36]	; 0x24
 801125c:	e76d      	b.n	801113a <_svfiprintf_r+0x4a>
 801125e:	fb05 3202 	mla	r2, r5, r2, r3
 8011262:	2001      	movs	r0, #1
 8011264:	460f      	mov	r7, r1
 8011266:	e7a6      	b.n	80111b6 <_svfiprintf_r+0xc6>
 8011268:	2300      	movs	r3, #0
 801126a:	3701      	adds	r7, #1
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	4619      	mov	r1, r3
 8011270:	250a      	movs	r5, #10
 8011272:	4638      	mov	r0, r7
 8011274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011278:	3a30      	subs	r2, #48	; 0x30
 801127a:	2a09      	cmp	r2, #9
 801127c:	d903      	bls.n	8011286 <_svfiprintf_r+0x196>
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0c8      	beq.n	8011214 <_svfiprintf_r+0x124>
 8011282:	9105      	str	r1, [sp, #20]
 8011284:	e7c6      	b.n	8011214 <_svfiprintf_r+0x124>
 8011286:	fb05 2101 	mla	r1, r5, r1, r2
 801128a:	2301      	movs	r3, #1
 801128c:	4607      	mov	r7, r0
 801128e:	e7f0      	b.n	8011272 <_svfiprintf_r+0x182>
 8011290:	ab03      	add	r3, sp, #12
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	4622      	mov	r2, r4
 8011296:	4b11      	ldr	r3, [pc, #68]	; (80112dc <_svfiprintf_r+0x1ec>)
 8011298:	a904      	add	r1, sp, #16
 801129a:	4640      	mov	r0, r8
 801129c:	f7fc fbb4 	bl	800da08 <_printf_float>
 80112a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80112a4:	4681      	mov	r9, r0
 80112a6:	d1d6      	bne.n	8011256 <_svfiprintf_r+0x166>
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	065b      	lsls	r3, r3, #25
 80112ac:	f53f af35 	bmi.w	801111a <_svfiprintf_r+0x2a>
 80112b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112b2:	b01d      	add	sp, #116	; 0x74
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b8:	ab03      	add	r3, sp, #12
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	4622      	mov	r2, r4
 80112be:	4b07      	ldr	r3, [pc, #28]	; (80112dc <_svfiprintf_r+0x1ec>)
 80112c0:	a904      	add	r1, sp, #16
 80112c2:	4640      	mov	r0, r8
 80112c4:	f7fc fe56 	bl	800df74 <_printf_i>
 80112c8:	e7ea      	b.n	80112a0 <_svfiprintf_r+0x1b0>
 80112ca:	bf00      	nop
 80112cc:	080135d4 	.word	0x080135d4
 80112d0:	080135da 	.word	0x080135da
 80112d4:	080135de 	.word	0x080135de
 80112d8:	0800da09 	.word	0x0800da09
 80112dc:	0801103b 	.word	0x0801103b

080112e0 <__sfputc_r>:
 80112e0:	6893      	ldr	r3, [r2, #8]
 80112e2:	3b01      	subs	r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	b410      	push	{r4}
 80112e8:	6093      	str	r3, [r2, #8]
 80112ea:	da08      	bge.n	80112fe <__sfputc_r+0x1e>
 80112ec:	6994      	ldr	r4, [r2, #24]
 80112ee:	42a3      	cmp	r3, r4
 80112f0:	db01      	blt.n	80112f6 <__sfputc_r+0x16>
 80112f2:	290a      	cmp	r1, #10
 80112f4:	d103      	bne.n	80112fe <__sfputc_r+0x1e>
 80112f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112fa:	f000 b987 	b.w	801160c <__swbuf_r>
 80112fe:	6813      	ldr	r3, [r2, #0]
 8011300:	1c58      	adds	r0, r3, #1
 8011302:	6010      	str	r0, [r2, #0]
 8011304:	7019      	strb	r1, [r3, #0]
 8011306:	4608      	mov	r0, r1
 8011308:	f85d 4b04 	ldr.w	r4, [sp], #4
 801130c:	4770      	bx	lr

0801130e <__sfputs_r>:
 801130e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	4614      	mov	r4, r2
 8011316:	18d5      	adds	r5, r2, r3
 8011318:	42ac      	cmp	r4, r5
 801131a:	d101      	bne.n	8011320 <__sfputs_r+0x12>
 801131c:	2000      	movs	r0, #0
 801131e:	e007      	b.n	8011330 <__sfputs_r+0x22>
 8011320:	463a      	mov	r2, r7
 8011322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011326:	4630      	mov	r0, r6
 8011328:	f7ff ffda 	bl	80112e0 <__sfputc_r>
 801132c:	1c43      	adds	r3, r0, #1
 801132e:	d1f3      	bne.n	8011318 <__sfputs_r+0xa>
 8011330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011334 <_vfiprintf_r>:
 8011334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	460c      	mov	r4, r1
 801133a:	b09d      	sub	sp, #116	; 0x74
 801133c:	4617      	mov	r7, r2
 801133e:	461d      	mov	r5, r3
 8011340:	4606      	mov	r6, r0
 8011342:	b118      	cbz	r0, 801134c <_vfiprintf_r+0x18>
 8011344:	6983      	ldr	r3, [r0, #24]
 8011346:	b90b      	cbnz	r3, 801134c <_vfiprintf_r+0x18>
 8011348:	f7fe fe92 	bl	8010070 <__sinit>
 801134c:	4b7c      	ldr	r3, [pc, #496]	; (8011540 <_vfiprintf_r+0x20c>)
 801134e:	429c      	cmp	r4, r3
 8011350:	d158      	bne.n	8011404 <_vfiprintf_r+0xd0>
 8011352:	6874      	ldr	r4, [r6, #4]
 8011354:	89a3      	ldrh	r3, [r4, #12]
 8011356:	0718      	lsls	r0, r3, #28
 8011358:	d55e      	bpl.n	8011418 <_vfiprintf_r+0xe4>
 801135a:	6923      	ldr	r3, [r4, #16]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d05b      	beq.n	8011418 <_vfiprintf_r+0xe4>
 8011360:	2300      	movs	r3, #0
 8011362:	9309      	str	r3, [sp, #36]	; 0x24
 8011364:	2320      	movs	r3, #32
 8011366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801136a:	2330      	movs	r3, #48	; 0x30
 801136c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011370:	9503      	str	r5, [sp, #12]
 8011372:	f04f 0b01 	mov.w	fp, #1
 8011376:	46b8      	mov	r8, r7
 8011378:	4645      	mov	r5, r8
 801137a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801137e:	b10b      	cbz	r3, 8011384 <_vfiprintf_r+0x50>
 8011380:	2b25      	cmp	r3, #37	; 0x25
 8011382:	d154      	bne.n	801142e <_vfiprintf_r+0xfa>
 8011384:	ebb8 0a07 	subs.w	sl, r8, r7
 8011388:	d00b      	beq.n	80113a2 <_vfiprintf_r+0x6e>
 801138a:	4653      	mov	r3, sl
 801138c:	463a      	mov	r2, r7
 801138e:	4621      	mov	r1, r4
 8011390:	4630      	mov	r0, r6
 8011392:	f7ff ffbc 	bl	801130e <__sfputs_r>
 8011396:	3001      	adds	r0, #1
 8011398:	f000 80c2 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 801139c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801139e:	4453      	add	r3, sl
 80113a0:	9309      	str	r3, [sp, #36]	; 0x24
 80113a2:	f898 3000 	ldrb.w	r3, [r8]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 80ba 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 80113ac:	2300      	movs	r3, #0
 80113ae:	f04f 32ff 	mov.w	r2, #4294967295
 80113b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113b6:	9304      	str	r3, [sp, #16]
 80113b8:	9307      	str	r3, [sp, #28]
 80113ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113be:	931a      	str	r3, [sp, #104]	; 0x68
 80113c0:	46a8      	mov	r8, r5
 80113c2:	2205      	movs	r2, #5
 80113c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80113c8:	485e      	ldr	r0, [pc, #376]	; (8011544 <_vfiprintf_r+0x210>)
 80113ca:	f7ee ff11 	bl	80001f0 <memchr>
 80113ce:	9b04      	ldr	r3, [sp, #16]
 80113d0:	bb78      	cbnz	r0, 8011432 <_vfiprintf_r+0xfe>
 80113d2:	06d9      	lsls	r1, r3, #27
 80113d4:	bf44      	itt	mi
 80113d6:	2220      	movmi	r2, #32
 80113d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80113dc:	071a      	lsls	r2, r3, #28
 80113de:	bf44      	itt	mi
 80113e0:	222b      	movmi	r2, #43	; 0x2b
 80113e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80113e6:	782a      	ldrb	r2, [r5, #0]
 80113e8:	2a2a      	cmp	r2, #42	; 0x2a
 80113ea:	d02a      	beq.n	8011442 <_vfiprintf_r+0x10e>
 80113ec:	9a07      	ldr	r2, [sp, #28]
 80113ee:	46a8      	mov	r8, r5
 80113f0:	2000      	movs	r0, #0
 80113f2:	250a      	movs	r5, #10
 80113f4:	4641      	mov	r1, r8
 80113f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113fa:	3b30      	subs	r3, #48	; 0x30
 80113fc:	2b09      	cmp	r3, #9
 80113fe:	d969      	bls.n	80114d4 <_vfiprintf_r+0x1a0>
 8011400:	b360      	cbz	r0, 801145c <_vfiprintf_r+0x128>
 8011402:	e024      	b.n	801144e <_vfiprintf_r+0x11a>
 8011404:	4b50      	ldr	r3, [pc, #320]	; (8011548 <_vfiprintf_r+0x214>)
 8011406:	429c      	cmp	r4, r3
 8011408:	d101      	bne.n	801140e <_vfiprintf_r+0xda>
 801140a:	68b4      	ldr	r4, [r6, #8]
 801140c:	e7a2      	b.n	8011354 <_vfiprintf_r+0x20>
 801140e:	4b4f      	ldr	r3, [pc, #316]	; (801154c <_vfiprintf_r+0x218>)
 8011410:	429c      	cmp	r4, r3
 8011412:	bf08      	it	eq
 8011414:	68f4      	ldreq	r4, [r6, #12]
 8011416:	e79d      	b.n	8011354 <_vfiprintf_r+0x20>
 8011418:	4621      	mov	r1, r4
 801141a:	4630      	mov	r0, r6
 801141c:	f000 f968 	bl	80116f0 <__swsetup_r>
 8011420:	2800      	cmp	r0, #0
 8011422:	d09d      	beq.n	8011360 <_vfiprintf_r+0x2c>
 8011424:	f04f 30ff 	mov.w	r0, #4294967295
 8011428:	b01d      	add	sp, #116	; 0x74
 801142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801142e:	46a8      	mov	r8, r5
 8011430:	e7a2      	b.n	8011378 <_vfiprintf_r+0x44>
 8011432:	4a44      	ldr	r2, [pc, #272]	; (8011544 <_vfiprintf_r+0x210>)
 8011434:	1a80      	subs	r0, r0, r2
 8011436:	fa0b f000 	lsl.w	r0, fp, r0
 801143a:	4318      	orrs	r0, r3
 801143c:	9004      	str	r0, [sp, #16]
 801143e:	4645      	mov	r5, r8
 8011440:	e7be      	b.n	80113c0 <_vfiprintf_r+0x8c>
 8011442:	9a03      	ldr	r2, [sp, #12]
 8011444:	1d11      	adds	r1, r2, #4
 8011446:	6812      	ldr	r2, [r2, #0]
 8011448:	9103      	str	r1, [sp, #12]
 801144a:	2a00      	cmp	r2, #0
 801144c:	db01      	blt.n	8011452 <_vfiprintf_r+0x11e>
 801144e:	9207      	str	r2, [sp, #28]
 8011450:	e004      	b.n	801145c <_vfiprintf_r+0x128>
 8011452:	4252      	negs	r2, r2
 8011454:	f043 0302 	orr.w	r3, r3, #2
 8011458:	9207      	str	r2, [sp, #28]
 801145a:	9304      	str	r3, [sp, #16]
 801145c:	f898 3000 	ldrb.w	r3, [r8]
 8011460:	2b2e      	cmp	r3, #46	; 0x2e
 8011462:	d10e      	bne.n	8011482 <_vfiprintf_r+0x14e>
 8011464:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011468:	2b2a      	cmp	r3, #42	; 0x2a
 801146a:	d138      	bne.n	80114de <_vfiprintf_r+0x1aa>
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	1d1a      	adds	r2, r3, #4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	9203      	str	r2, [sp, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	bfb8      	it	lt
 8011478:	f04f 33ff 	movlt.w	r3, #4294967295
 801147c:	f108 0802 	add.w	r8, r8, #2
 8011480:	9305      	str	r3, [sp, #20]
 8011482:	4d33      	ldr	r5, [pc, #204]	; (8011550 <_vfiprintf_r+0x21c>)
 8011484:	f898 1000 	ldrb.w	r1, [r8]
 8011488:	2203      	movs	r2, #3
 801148a:	4628      	mov	r0, r5
 801148c:	f7ee feb0 	bl	80001f0 <memchr>
 8011490:	b140      	cbz	r0, 80114a4 <_vfiprintf_r+0x170>
 8011492:	2340      	movs	r3, #64	; 0x40
 8011494:	1b40      	subs	r0, r0, r5
 8011496:	fa03 f000 	lsl.w	r0, r3, r0
 801149a:	9b04      	ldr	r3, [sp, #16]
 801149c:	4303      	orrs	r3, r0
 801149e:	f108 0801 	add.w	r8, r8, #1
 80114a2:	9304      	str	r3, [sp, #16]
 80114a4:	f898 1000 	ldrb.w	r1, [r8]
 80114a8:	482a      	ldr	r0, [pc, #168]	; (8011554 <_vfiprintf_r+0x220>)
 80114aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ae:	2206      	movs	r2, #6
 80114b0:	f108 0701 	add.w	r7, r8, #1
 80114b4:	f7ee fe9c 	bl	80001f0 <memchr>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d037      	beq.n	801152c <_vfiprintf_r+0x1f8>
 80114bc:	4b26      	ldr	r3, [pc, #152]	; (8011558 <_vfiprintf_r+0x224>)
 80114be:	bb1b      	cbnz	r3, 8011508 <_vfiprintf_r+0x1d4>
 80114c0:	9b03      	ldr	r3, [sp, #12]
 80114c2:	3307      	adds	r3, #7
 80114c4:	f023 0307 	bic.w	r3, r3, #7
 80114c8:	3308      	adds	r3, #8
 80114ca:	9303      	str	r3, [sp, #12]
 80114cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ce:	444b      	add	r3, r9
 80114d0:	9309      	str	r3, [sp, #36]	; 0x24
 80114d2:	e750      	b.n	8011376 <_vfiprintf_r+0x42>
 80114d4:	fb05 3202 	mla	r2, r5, r2, r3
 80114d8:	2001      	movs	r0, #1
 80114da:	4688      	mov	r8, r1
 80114dc:	e78a      	b.n	80113f4 <_vfiprintf_r+0xc0>
 80114de:	2300      	movs	r3, #0
 80114e0:	f108 0801 	add.w	r8, r8, #1
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	4619      	mov	r1, r3
 80114e8:	250a      	movs	r5, #10
 80114ea:	4640      	mov	r0, r8
 80114ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114f0:	3a30      	subs	r2, #48	; 0x30
 80114f2:	2a09      	cmp	r2, #9
 80114f4:	d903      	bls.n	80114fe <_vfiprintf_r+0x1ca>
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d0c3      	beq.n	8011482 <_vfiprintf_r+0x14e>
 80114fa:	9105      	str	r1, [sp, #20]
 80114fc:	e7c1      	b.n	8011482 <_vfiprintf_r+0x14e>
 80114fe:	fb05 2101 	mla	r1, r5, r1, r2
 8011502:	2301      	movs	r3, #1
 8011504:	4680      	mov	r8, r0
 8011506:	e7f0      	b.n	80114ea <_vfiprintf_r+0x1b6>
 8011508:	ab03      	add	r3, sp, #12
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	4622      	mov	r2, r4
 801150e:	4b13      	ldr	r3, [pc, #76]	; (801155c <_vfiprintf_r+0x228>)
 8011510:	a904      	add	r1, sp, #16
 8011512:	4630      	mov	r0, r6
 8011514:	f7fc fa78 	bl	800da08 <_printf_float>
 8011518:	f1b0 3fff 	cmp.w	r0, #4294967295
 801151c:	4681      	mov	r9, r0
 801151e:	d1d5      	bne.n	80114cc <_vfiprintf_r+0x198>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	065b      	lsls	r3, r3, #25
 8011524:	f53f af7e 	bmi.w	8011424 <_vfiprintf_r+0xf0>
 8011528:	9809      	ldr	r0, [sp, #36]	; 0x24
 801152a:	e77d      	b.n	8011428 <_vfiprintf_r+0xf4>
 801152c:	ab03      	add	r3, sp, #12
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	4622      	mov	r2, r4
 8011532:	4b0a      	ldr	r3, [pc, #40]	; (801155c <_vfiprintf_r+0x228>)
 8011534:	a904      	add	r1, sp, #16
 8011536:	4630      	mov	r0, r6
 8011538:	f7fc fd1c 	bl	800df74 <_printf_i>
 801153c:	e7ec      	b.n	8011518 <_vfiprintf_r+0x1e4>
 801153e:	bf00      	nop
 8011540:	08013488 	.word	0x08013488
 8011544:	080135d4 	.word	0x080135d4
 8011548:	080134a8 	.word	0x080134a8
 801154c:	08013468 	.word	0x08013468
 8011550:	080135da 	.word	0x080135da
 8011554:	080135de 	.word	0x080135de
 8011558:	0800da09 	.word	0x0800da09
 801155c:	0801130f 	.word	0x0801130f

08011560 <__sread>:
 8011560:	b510      	push	{r4, lr}
 8011562:	460c      	mov	r4, r1
 8011564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011568:	f000 faa6 	bl	8011ab8 <_read_r>
 801156c:	2800      	cmp	r0, #0
 801156e:	bfab      	itete	ge
 8011570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011572:	89a3      	ldrhlt	r3, [r4, #12]
 8011574:	181b      	addge	r3, r3, r0
 8011576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801157a:	bfac      	ite	ge
 801157c:	6563      	strge	r3, [r4, #84]	; 0x54
 801157e:	81a3      	strhlt	r3, [r4, #12]
 8011580:	bd10      	pop	{r4, pc}

08011582 <__swrite>:
 8011582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011586:	461f      	mov	r7, r3
 8011588:	898b      	ldrh	r3, [r1, #12]
 801158a:	05db      	lsls	r3, r3, #23
 801158c:	4605      	mov	r5, r0
 801158e:	460c      	mov	r4, r1
 8011590:	4616      	mov	r6, r2
 8011592:	d505      	bpl.n	80115a0 <__swrite+0x1e>
 8011594:	2302      	movs	r3, #2
 8011596:	2200      	movs	r2, #0
 8011598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159c:	f000 f9d6 	bl	801194c <_lseek_r>
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115aa:	81a3      	strh	r3, [r4, #12]
 80115ac:	4632      	mov	r2, r6
 80115ae:	463b      	mov	r3, r7
 80115b0:	4628      	mov	r0, r5
 80115b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b6:	f000 b889 	b.w	80116cc <_write_r>

080115ba <__sseek>:
 80115ba:	b510      	push	{r4, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115c2:	f000 f9c3 	bl	801194c <_lseek_r>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	89a3      	ldrh	r3, [r4, #12]
 80115ca:	bf15      	itete	ne
 80115cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115d6:	81a3      	strheq	r3, [r4, #12]
 80115d8:	bf18      	it	ne
 80115da:	81a3      	strhne	r3, [r4, #12]
 80115dc:	bd10      	pop	{r4, pc}

080115de <__sclose>:
 80115de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e2:	f000 b8f3 	b.w	80117cc <_close_r>

080115e6 <strncmp>:
 80115e6:	b510      	push	{r4, lr}
 80115e8:	b16a      	cbz	r2, 8011606 <strncmp+0x20>
 80115ea:	3901      	subs	r1, #1
 80115ec:	1884      	adds	r4, r0, r2
 80115ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80115f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d103      	bne.n	8011602 <strncmp+0x1c>
 80115fa:	42a0      	cmp	r0, r4
 80115fc:	d001      	beq.n	8011602 <strncmp+0x1c>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1f5      	bne.n	80115ee <strncmp+0x8>
 8011602:	1a98      	subs	r0, r3, r2
 8011604:	bd10      	pop	{r4, pc}
 8011606:	4610      	mov	r0, r2
 8011608:	e7fc      	b.n	8011604 <strncmp+0x1e>
	...

0801160c <__swbuf_r>:
 801160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160e:	460e      	mov	r6, r1
 8011610:	4614      	mov	r4, r2
 8011612:	4605      	mov	r5, r0
 8011614:	b118      	cbz	r0, 801161e <__swbuf_r+0x12>
 8011616:	6983      	ldr	r3, [r0, #24]
 8011618:	b90b      	cbnz	r3, 801161e <__swbuf_r+0x12>
 801161a:	f7fe fd29 	bl	8010070 <__sinit>
 801161e:	4b21      	ldr	r3, [pc, #132]	; (80116a4 <__swbuf_r+0x98>)
 8011620:	429c      	cmp	r4, r3
 8011622:	d12a      	bne.n	801167a <__swbuf_r+0x6e>
 8011624:	686c      	ldr	r4, [r5, #4]
 8011626:	69a3      	ldr	r3, [r4, #24]
 8011628:	60a3      	str	r3, [r4, #8]
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	071a      	lsls	r2, r3, #28
 801162e:	d52e      	bpl.n	801168e <__swbuf_r+0x82>
 8011630:	6923      	ldr	r3, [r4, #16]
 8011632:	b363      	cbz	r3, 801168e <__swbuf_r+0x82>
 8011634:	6923      	ldr	r3, [r4, #16]
 8011636:	6820      	ldr	r0, [r4, #0]
 8011638:	1ac0      	subs	r0, r0, r3
 801163a:	6963      	ldr	r3, [r4, #20]
 801163c:	b2f6      	uxtb	r6, r6
 801163e:	4283      	cmp	r3, r0
 8011640:	4637      	mov	r7, r6
 8011642:	dc04      	bgt.n	801164e <__swbuf_r+0x42>
 8011644:	4621      	mov	r1, r4
 8011646:	4628      	mov	r0, r5
 8011648:	f000 f956 	bl	80118f8 <_fflush_r>
 801164c:	bb28      	cbnz	r0, 801169a <__swbuf_r+0x8e>
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	3b01      	subs	r3, #1
 8011652:	60a3      	str	r3, [r4, #8]
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	6022      	str	r2, [r4, #0]
 801165a:	701e      	strb	r6, [r3, #0]
 801165c:	6963      	ldr	r3, [r4, #20]
 801165e:	3001      	adds	r0, #1
 8011660:	4283      	cmp	r3, r0
 8011662:	d004      	beq.n	801166e <__swbuf_r+0x62>
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	07db      	lsls	r3, r3, #31
 8011668:	d519      	bpl.n	801169e <__swbuf_r+0x92>
 801166a:	2e0a      	cmp	r6, #10
 801166c:	d117      	bne.n	801169e <__swbuf_r+0x92>
 801166e:	4621      	mov	r1, r4
 8011670:	4628      	mov	r0, r5
 8011672:	f000 f941 	bl	80118f8 <_fflush_r>
 8011676:	b190      	cbz	r0, 801169e <__swbuf_r+0x92>
 8011678:	e00f      	b.n	801169a <__swbuf_r+0x8e>
 801167a:	4b0b      	ldr	r3, [pc, #44]	; (80116a8 <__swbuf_r+0x9c>)
 801167c:	429c      	cmp	r4, r3
 801167e:	d101      	bne.n	8011684 <__swbuf_r+0x78>
 8011680:	68ac      	ldr	r4, [r5, #8]
 8011682:	e7d0      	b.n	8011626 <__swbuf_r+0x1a>
 8011684:	4b09      	ldr	r3, [pc, #36]	; (80116ac <__swbuf_r+0xa0>)
 8011686:	429c      	cmp	r4, r3
 8011688:	bf08      	it	eq
 801168a:	68ec      	ldreq	r4, [r5, #12]
 801168c:	e7cb      	b.n	8011626 <__swbuf_r+0x1a>
 801168e:	4621      	mov	r1, r4
 8011690:	4628      	mov	r0, r5
 8011692:	f000 f82d 	bl	80116f0 <__swsetup_r>
 8011696:	2800      	cmp	r0, #0
 8011698:	d0cc      	beq.n	8011634 <__swbuf_r+0x28>
 801169a:	f04f 37ff 	mov.w	r7, #4294967295
 801169e:	4638      	mov	r0, r7
 80116a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a2:	bf00      	nop
 80116a4:	08013488 	.word	0x08013488
 80116a8:	080134a8 	.word	0x080134a8
 80116ac:	08013468 	.word	0x08013468

080116b0 <__ascii_wctomb>:
 80116b0:	b149      	cbz	r1, 80116c6 <__ascii_wctomb+0x16>
 80116b2:	2aff      	cmp	r2, #255	; 0xff
 80116b4:	bf85      	ittet	hi
 80116b6:	238a      	movhi	r3, #138	; 0x8a
 80116b8:	6003      	strhi	r3, [r0, #0]
 80116ba:	700a      	strbls	r2, [r1, #0]
 80116bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80116c0:	bf98      	it	ls
 80116c2:	2001      	movls	r0, #1
 80116c4:	4770      	bx	lr
 80116c6:	4608      	mov	r0, r1
 80116c8:	4770      	bx	lr
	...

080116cc <_write_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4c07      	ldr	r4, [pc, #28]	; (80116ec <_write_r+0x20>)
 80116d0:	4605      	mov	r5, r0
 80116d2:	4608      	mov	r0, r1
 80116d4:	4611      	mov	r1, r2
 80116d6:	2200      	movs	r2, #0
 80116d8:	6022      	str	r2, [r4, #0]
 80116da:	461a      	mov	r2, r3
 80116dc:	f7f0 fe32 	bl	8002344 <_write>
 80116e0:	1c43      	adds	r3, r0, #1
 80116e2:	d102      	bne.n	80116ea <_write_r+0x1e>
 80116e4:	6823      	ldr	r3, [r4, #0]
 80116e6:	b103      	cbz	r3, 80116ea <_write_r+0x1e>
 80116e8:	602b      	str	r3, [r5, #0]
 80116ea:	bd38      	pop	{r3, r4, r5, pc}
 80116ec:	20000c6c 	.word	0x20000c6c

080116f0 <__swsetup_r>:
 80116f0:	4b32      	ldr	r3, [pc, #200]	; (80117bc <__swsetup_r+0xcc>)
 80116f2:	b570      	push	{r4, r5, r6, lr}
 80116f4:	681d      	ldr	r5, [r3, #0]
 80116f6:	4606      	mov	r6, r0
 80116f8:	460c      	mov	r4, r1
 80116fa:	b125      	cbz	r5, 8011706 <__swsetup_r+0x16>
 80116fc:	69ab      	ldr	r3, [r5, #24]
 80116fe:	b913      	cbnz	r3, 8011706 <__swsetup_r+0x16>
 8011700:	4628      	mov	r0, r5
 8011702:	f7fe fcb5 	bl	8010070 <__sinit>
 8011706:	4b2e      	ldr	r3, [pc, #184]	; (80117c0 <__swsetup_r+0xd0>)
 8011708:	429c      	cmp	r4, r3
 801170a:	d10f      	bne.n	801172c <__swsetup_r+0x3c>
 801170c:	686c      	ldr	r4, [r5, #4]
 801170e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011712:	b29a      	uxth	r2, r3
 8011714:	0715      	lsls	r5, r2, #28
 8011716:	d42c      	bmi.n	8011772 <__swsetup_r+0x82>
 8011718:	06d0      	lsls	r0, r2, #27
 801171a:	d411      	bmi.n	8011740 <__swsetup_r+0x50>
 801171c:	2209      	movs	r2, #9
 801171e:	6032      	str	r2, [r6, #0]
 8011720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011724:	81a3      	strh	r3, [r4, #12]
 8011726:	f04f 30ff 	mov.w	r0, #4294967295
 801172a:	e03e      	b.n	80117aa <__swsetup_r+0xba>
 801172c:	4b25      	ldr	r3, [pc, #148]	; (80117c4 <__swsetup_r+0xd4>)
 801172e:	429c      	cmp	r4, r3
 8011730:	d101      	bne.n	8011736 <__swsetup_r+0x46>
 8011732:	68ac      	ldr	r4, [r5, #8]
 8011734:	e7eb      	b.n	801170e <__swsetup_r+0x1e>
 8011736:	4b24      	ldr	r3, [pc, #144]	; (80117c8 <__swsetup_r+0xd8>)
 8011738:	429c      	cmp	r4, r3
 801173a:	bf08      	it	eq
 801173c:	68ec      	ldreq	r4, [r5, #12]
 801173e:	e7e6      	b.n	801170e <__swsetup_r+0x1e>
 8011740:	0751      	lsls	r1, r2, #29
 8011742:	d512      	bpl.n	801176a <__swsetup_r+0x7a>
 8011744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011746:	b141      	cbz	r1, 801175a <__swsetup_r+0x6a>
 8011748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801174c:	4299      	cmp	r1, r3
 801174e:	d002      	beq.n	8011756 <__swsetup_r+0x66>
 8011750:	4630      	mov	r0, r6
 8011752:	f7fc f81d 	bl	800d790 <_free_r>
 8011756:	2300      	movs	r3, #0
 8011758:	6363      	str	r3, [r4, #52]	; 0x34
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011760:	81a3      	strh	r3, [r4, #12]
 8011762:	2300      	movs	r3, #0
 8011764:	6063      	str	r3, [r4, #4]
 8011766:	6923      	ldr	r3, [r4, #16]
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	f043 0308 	orr.w	r3, r3, #8
 8011770:	81a3      	strh	r3, [r4, #12]
 8011772:	6923      	ldr	r3, [r4, #16]
 8011774:	b94b      	cbnz	r3, 801178a <__swsetup_r+0x9a>
 8011776:	89a3      	ldrh	r3, [r4, #12]
 8011778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011780:	d003      	beq.n	801178a <__swsetup_r+0x9a>
 8011782:	4621      	mov	r1, r4
 8011784:	4630      	mov	r0, r6
 8011786:	f000 f917 	bl	80119b8 <__smakebuf_r>
 801178a:	89a2      	ldrh	r2, [r4, #12]
 801178c:	f012 0301 	ands.w	r3, r2, #1
 8011790:	d00c      	beq.n	80117ac <__swsetup_r+0xbc>
 8011792:	2300      	movs	r3, #0
 8011794:	60a3      	str	r3, [r4, #8]
 8011796:	6963      	ldr	r3, [r4, #20]
 8011798:	425b      	negs	r3, r3
 801179a:	61a3      	str	r3, [r4, #24]
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	b953      	cbnz	r3, 80117b6 <__swsetup_r+0xc6>
 80117a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117a8:	d1ba      	bne.n	8011720 <__swsetup_r+0x30>
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	0792      	lsls	r2, r2, #30
 80117ae:	bf58      	it	pl
 80117b0:	6963      	ldrpl	r3, [r4, #20]
 80117b2:	60a3      	str	r3, [r4, #8]
 80117b4:	e7f2      	b.n	801179c <__swsetup_r+0xac>
 80117b6:	2000      	movs	r0, #0
 80117b8:	e7f7      	b.n	80117aa <__swsetup_r+0xba>
 80117ba:	bf00      	nop
 80117bc:	200002d0 	.word	0x200002d0
 80117c0:	08013488 	.word	0x08013488
 80117c4:	080134a8 	.word	0x080134a8
 80117c8:	08013468 	.word	0x08013468

080117cc <_close_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4c06      	ldr	r4, [pc, #24]	; (80117e8 <_close_r+0x1c>)
 80117d0:	2300      	movs	r3, #0
 80117d2:	4605      	mov	r5, r0
 80117d4:	4608      	mov	r0, r1
 80117d6:	6023      	str	r3, [r4, #0]
 80117d8:	f7f0 fa69 	bl	8001cae <_close>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_close_r+0x1a>
 80117e0:	6823      	ldr	r3, [r4, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_close_r+0x1a>
 80117e4:	602b      	str	r3, [r5, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	20000c6c 	.word	0x20000c6c

080117ec <__sflush_r>:
 80117ec:	898a      	ldrh	r2, [r1, #12]
 80117ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f2:	4605      	mov	r5, r0
 80117f4:	0710      	lsls	r0, r2, #28
 80117f6:	460c      	mov	r4, r1
 80117f8:	d458      	bmi.n	80118ac <__sflush_r+0xc0>
 80117fa:	684b      	ldr	r3, [r1, #4]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	dc05      	bgt.n	801180c <__sflush_r+0x20>
 8011800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011802:	2b00      	cmp	r3, #0
 8011804:	dc02      	bgt.n	801180c <__sflush_r+0x20>
 8011806:	2000      	movs	r0, #0
 8011808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801180c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801180e:	2e00      	cmp	r6, #0
 8011810:	d0f9      	beq.n	8011806 <__sflush_r+0x1a>
 8011812:	2300      	movs	r3, #0
 8011814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011818:	682f      	ldr	r7, [r5, #0]
 801181a:	6a21      	ldr	r1, [r4, #32]
 801181c:	602b      	str	r3, [r5, #0]
 801181e:	d032      	beq.n	8011886 <__sflush_r+0x9a>
 8011820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	075a      	lsls	r2, r3, #29
 8011826:	d505      	bpl.n	8011834 <__sflush_r+0x48>
 8011828:	6863      	ldr	r3, [r4, #4]
 801182a:	1ac0      	subs	r0, r0, r3
 801182c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801182e:	b10b      	cbz	r3, 8011834 <__sflush_r+0x48>
 8011830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011832:	1ac0      	subs	r0, r0, r3
 8011834:	2300      	movs	r3, #0
 8011836:	4602      	mov	r2, r0
 8011838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801183a:	6a21      	ldr	r1, [r4, #32]
 801183c:	4628      	mov	r0, r5
 801183e:	47b0      	blx	r6
 8011840:	1c43      	adds	r3, r0, #1
 8011842:	89a3      	ldrh	r3, [r4, #12]
 8011844:	d106      	bne.n	8011854 <__sflush_r+0x68>
 8011846:	6829      	ldr	r1, [r5, #0]
 8011848:	291d      	cmp	r1, #29
 801184a:	d848      	bhi.n	80118de <__sflush_r+0xf2>
 801184c:	4a29      	ldr	r2, [pc, #164]	; (80118f4 <__sflush_r+0x108>)
 801184e:	40ca      	lsrs	r2, r1
 8011850:	07d6      	lsls	r6, r2, #31
 8011852:	d544      	bpl.n	80118de <__sflush_r+0xf2>
 8011854:	2200      	movs	r2, #0
 8011856:	6062      	str	r2, [r4, #4]
 8011858:	04d9      	lsls	r1, r3, #19
 801185a:	6922      	ldr	r2, [r4, #16]
 801185c:	6022      	str	r2, [r4, #0]
 801185e:	d504      	bpl.n	801186a <__sflush_r+0x7e>
 8011860:	1c42      	adds	r2, r0, #1
 8011862:	d101      	bne.n	8011868 <__sflush_r+0x7c>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	b903      	cbnz	r3, 801186a <__sflush_r+0x7e>
 8011868:	6560      	str	r0, [r4, #84]	; 0x54
 801186a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801186c:	602f      	str	r7, [r5, #0]
 801186e:	2900      	cmp	r1, #0
 8011870:	d0c9      	beq.n	8011806 <__sflush_r+0x1a>
 8011872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011876:	4299      	cmp	r1, r3
 8011878:	d002      	beq.n	8011880 <__sflush_r+0x94>
 801187a:	4628      	mov	r0, r5
 801187c:	f7fb ff88 	bl	800d790 <_free_r>
 8011880:	2000      	movs	r0, #0
 8011882:	6360      	str	r0, [r4, #52]	; 0x34
 8011884:	e7c0      	b.n	8011808 <__sflush_r+0x1c>
 8011886:	2301      	movs	r3, #1
 8011888:	4628      	mov	r0, r5
 801188a:	47b0      	blx	r6
 801188c:	1c41      	adds	r1, r0, #1
 801188e:	d1c8      	bne.n	8011822 <__sflush_r+0x36>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0c5      	beq.n	8011822 <__sflush_r+0x36>
 8011896:	2b1d      	cmp	r3, #29
 8011898:	d001      	beq.n	801189e <__sflush_r+0xb2>
 801189a:	2b16      	cmp	r3, #22
 801189c:	d101      	bne.n	80118a2 <__sflush_r+0xb6>
 801189e:	602f      	str	r7, [r5, #0]
 80118a0:	e7b1      	b.n	8011806 <__sflush_r+0x1a>
 80118a2:	89a3      	ldrh	r3, [r4, #12]
 80118a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118a8:	81a3      	strh	r3, [r4, #12]
 80118aa:	e7ad      	b.n	8011808 <__sflush_r+0x1c>
 80118ac:	690f      	ldr	r7, [r1, #16]
 80118ae:	2f00      	cmp	r7, #0
 80118b0:	d0a9      	beq.n	8011806 <__sflush_r+0x1a>
 80118b2:	0793      	lsls	r3, r2, #30
 80118b4:	680e      	ldr	r6, [r1, #0]
 80118b6:	bf08      	it	eq
 80118b8:	694b      	ldreq	r3, [r1, #20]
 80118ba:	600f      	str	r7, [r1, #0]
 80118bc:	bf18      	it	ne
 80118be:	2300      	movne	r3, #0
 80118c0:	eba6 0807 	sub.w	r8, r6, r7
 80118c4:	608b      	str	r3, [r1, #8]
 80118c6:	f1b8 0f00 	cmp.w	r8, #0
 80118ca:	dd9c      	ble.n	8011806 <__sflush_r+0x1a>
 80118cc:	4643      	mov	r3, r8
 80118ce:	463a      	mov	r2, r7
 80118d0:	6a21      	ldr	r1, [r4, #32]
 80118d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118d4:	4628      	mov	r0, r5
 80118d6:	47b0      	blx	r6
 80118d8:	2800      	cmp	r0, #0
 80118da:	dc06      	bgt.n	80118ea <__sflush_r+0xfe>
 80118dc:	89a3      	ldrh	r3, [r4, #12]
 80118de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e2:	81a3      	strh	r3, [r4, #12]
 80118e4:	f04f 30ff 	mov.w	r0, #4294967295
 80118e8:	e78e      	b.n	8011808 <__sflush_r+0x1c>
 80118ea:	4407      	add	r7, r0
 80118ec:	eba8 0800 	sub.w	r8, r8, r0
 80118f0:	e7e9      	b.n	80118c6 <__sflush_r+0xda>
 80118f2:	bf00      	nop
 80118f4:	20400001 	.word	0x20400001

080118f8 <_fflush_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	690b      	ldr	r3, [r1, #16]
 80118fc:	4605      	mov	r5, r0
 80118fe:	460c      	mov	r4, r1
 8011900:	b1db      	cbz	r3, 801193a <_fflush_r+0x42>
 8011902:	b118      	cbz	r0, 801190c <_fflush_r+0x14>
 8011904:	6983      	ldr	r3, [r0, #24]
 8011906:	b90b      	cbnz	r3, 801190c <_fflush_r+0x14>
 8011908:	f7fe fbb2 	bl	8010070 <__sinit>
 801190c:	4b0c      	ldr	r3, [pc, #48]	; (8011940 <_fflush_r+0x48>)
 801190e:	429c      	cmp	r4, r3
 8011910:	d109      	bne.n	8011926 <_fflush_r+0x2e>
 8011912:	686c      	ldr	r4, [r5, #4]
 8011914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011918:	b17b      	cbz	r3, 801193a <_fflush_r+0x42>
 801191a:	4621      	mov	r1, r4
 801191c:	4628      	mov	r0, r5
 801191e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011922:	f7ff bf63 	b.w	80117ec <__sflush_r>
 8011926:	4b07      	ldr	r3, [pc, #28]	; (8011944 <_fflush_r+0x4c>)
 8011928:	429c      	cmp	r4, r3
 801192a:	d101      	bne.n	8011930 <_fflush_r+0x38>
 801192c:	68ac      	ldr	r4, [r5, #8]
 801192e:	e7f1      	b.n	8011914 <_fflush_r+0x1c>
 8011930:	4b05      	ldr	r3, [pc, #20]	; (8011948 <_fflush_r+0x50>)
 8011932:	429c      	cmp	r4, r3
 8011934:	bf08      	it	eq
 8011936:	68ec      	ldreq	r4, [r5, #12]
 8011938:	e7ec      	b.n	8011914 <_fflush_r+0x1c>
 801193a:	2000      	movs	r0, #0
 801193c:	bd38      	pop	{r3, r4, r5, pc}
 801193e:	bf00      	nop
 8011940:	08013488 	.word	0x08013488
 8011944:	080134a8 	.word	0x080134a8
 8011948:	08013468 	.word	0x08013468

0801194c <_lseek_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4c07      	ldr	r4, [pc, #28]	; (801196c <_lseek_r+0x20>)
 8011950:	4605      	mov	r5, r0
 8011952:	4608      	mov	r0, r1
 8011954:	4611      	mov	r1, r2
 8011956:	2200      	movs	r2, #0
 8011958:	6022      	str	r2, [r4, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	f7f0 f9ce 	bl	8001cfc <_lseek>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_lseek_r+0x1e>
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	b103      	cbz	r3, 801196a <_lseek_r+0x1e>
 8011968:	602b      	str	r3, [r5, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	20000c6c 	.word	0x20000c6c

08011970 <__swhatbuf_r>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	460e      	mov	r6, r1
 8011974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011978:	2900      	cmp	r1, #0
 801197a:	b096      	sub	sp, #88	; 0x58
 801197c:	4614      	mov	r4, r2
 801197e:	461d      	mov	r5, r3
 8011980:	da07      	bge.n	8011992 <__swhatbuf_r+0x22>
 8011982:	2300      	movs	r3, #0
 8011984:	602b      	str	r3, [r5, #0]
 8011986:	89b3      	ldrh	r3, [r6, #12]
 8011988:	061a      	lsls	r2, r3, #24
 801198a:	d410      	bmi.n	80119ae <__swhatbuf_r+0x3e>
 801198c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011990:	e00e      	b.n	80119b0 <__swhatbuf_r+0x40>
 8011992:	466a      	mov	r2, sp
 8011994:	f000 f8a2 	bl	8011adc <_fstat_r>
 8011998:	2800      	cmp	r0, #0
 801199a:	dbf2      	blt.n	8011982 <__swhatbuf_r+0x12>
 801199c:	9a01      	ldr	r2, [sp, #4]
 801199e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119a6:	425a      	negs	r2, r3
 80119a8:	415a      	adcs	r2, r3
 80119aa:	602a      	str	r2, [r5, #0]
 80119ac:	e7ee      	b.n	801198c <__swhatbuf_r+0x1c>
 80119ae:	2340      	movs	r3, #64	; 0x40
 80119b0:	2000      	movs	r0, #0
 80119b2:	6023      	str	r3, [r4, #0]
 80119b4:	b016      	add	sp, #88	; 0x58
 80119b6:	bd70      	pop	{r4, r5, r6, pc}

080119b8 <__smakebuf_r>:
 80119b8:	898b      	ldrh	r3, [r1, #12]
 80119ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119bc:	079d      	lsls	r5, r3, #30
 80119be:	4606      	mov	r6, r0
 80119c0:	460c      	mov	r4, r1
 80119c2:	d507      	bpl.n	80119d4 <__smakebuf_r+0x1c>
 80119c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	6123      	str	r3, [r4, #16]
 80119cc:	2301      	movs	r3, #1
 80119ce:	6163      	str	r3, [r4, #20]
 80119d0:	b002      	add	sp, #8
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	ab01      	add	r3, sp, #4
 80119d6:	466a      	mov	r2, sp
 80119d8:	f7ff ffca 	bl	8011970 <__swhatbuf_r>
 80119dc:	9900      	ldr	r1, [sp, #0]
 80119de:	4605      	mov	r5, r0
 80119e0:	4630      	mov	r0, r6
 80119e2:	f7fb ff23 	bl	800d82c <_malloc_r>
 80119e6:	b948      	cbnz	r0, 80119fc <__smakebuf_r+0x44>
 80119e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119ec:	059a      	lsls	r2, r3, #22
 80119ee:	d4ef      	bmi.n	80119d0 <__smakebuf_r+0x18>
 80119f0:	f023 0303 	bic.w	r3, r3, #3
 80119f4:	f043 0302 	orr.w	r3, r3, #2
 80119f8:	81a3      	strh	r3, [r4, #12]
 80119fa:	e7e3      	b.n	80119c4 <__smakebuf_r+0xc>
 80119fc:	4b0d      	ldr	r3, [pc, #52]	; (8011a34 <__smakebuf_r+0x7c>)
 80119fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a00:	89a3      	ldrh	r3, [r4, #12]
 8011a02:	6020      	str	r0, [r4, #0]
 8011a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a08:	81a3      	strh	r3, [r4, #12]
 8011a0a:	9b00      	ldr	r3, [sp, #0]
 8011a0c:	6163      	str	r3, [r4, #20]
 8011a0e:	9b01      	ldr	r3, [sp, #4]
 8011a10:	6120      	str	r0, [r4, #16]
 8011a12:	b15b      	cbz	r3, 8011a2c <__smakebuf_r+0x74>
 8011a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a18:	4630      	mov	r0, r6
 8011a1a:	f000 f871 	bl	8011b00 <_isatty_r>
 8011a1e:	b128      	cbz	r0, 8011a2c <__smakebuf_r+0x74>
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	f023 0303 	bic.w	r3, r3, #3
 8011a26:	f043 0301 	orr.w	r3, r3, #1
 8011a2a:	81a3      	strh	r3, [r4, #12]
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	431d      	orrs	r5, r3
 8011a30:	81a5      	strh	r5, [r4, #12]
 8011a32:	e7cd      	b.n	80119d0 <__smakebuf_r+0x18>
 8011a34:	08010039 	.word	0x08010039

08011a38 <memmove>:
 8011a38:	4288      	cmp	r0, r1
 8011a3a:	b510      	push	{r4, lr}
 8011a3c:	eb01 0302 	add.w	r3, r1, r2
 8011a40:	d807      	bhi.n	8011a52 <memmove+0x1a>
 8011a42:	1e42      	subs	r2, r0, #1
 8011a44:	4299      	cmp	r1, r3
 8011a46:	d00a      	beq.n	8011a5e <memmove+0x26>
 8011a48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011a50:	e7f8      	b.n	8011a44 <memmove+0xc>
 8011a52:	4283      	cmp	r3, r0
 8011a54:	d9f5      	bls.n	8011a42 <memmove+0xa>
 8011a56:	1881      	adds	r1, r0, r2
 8011a58:	1ad2      	subs	r2, r2, r3
 8011a5a:	42d3      	cmn	r3, r2
 8011a5c:	d100      	bne.n	8011a60 <memmove+0x28>
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011a68:	e7f7      	b.n	8011a5a <memmove+0x22>

08011a6a <_realloc_r>:
 8011a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a6c:	4607      	mov	r7, r0
 8011a6e:	4614      	mov	r4, r2
 8011a70:	460e      	mov	r6, r1
 8011a72:	b921      	cbnz	r1, 8011a7e <_realloc_r+0x14>
 8011a74:	4611      	mov	r1, r2
 8011a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a7a:	f7fb bed7 	b.w	800d82c <_malloc_r>
 8011a7e:	b922      	cbnz	r2, 8011a8a <_realloc_r+0x20>
 8011a80:	f7fb fe86 	bl	800d790 <_free_r>
 8011a84:	4625      	mov	r5, r4
 8011a86:	4628      	mov	r0, r5
 8011a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a8a:	f000 f849 	bl	8011b20 <_malloc_usable_size_r>
 8011a8e:	42a0      	cmp	r0, r4
 8011a90:	d20f      	bcs.n	8011ab2 <_realloc_r+0x48>
 8011a92:	4621      	mov	r1, r4
 8011a94:	4638      	mov	r0, r7
 8011a96:	f7fb fec9 	bl	800d82c <_malloc_r>
 8011a9a:	4605      	mov	r5, r0
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d0f2      	beq.n	8011a86 <_realloc_r+0x1c>
 8011aa0:	4631      	mov	r1, r6
 8011aa2:	4622      	mov	r2, r4
 8011aa4:	f7fb fe60 	bl	800d768 <memcpy>
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	4638      	mov	r0, r7
 8011aac:	f7fb fe70 	bl	800d790 <_free_r>
 8011ab0:	e7e9      	b.n	8011a86 <_realloc_r+0x1c>
 8011ab2:	4635      	mov	r5, r6
 8011ab4:	e7e7      	b.n	8011a86 <_realloc_r+0x1c>
	...

08011ab8 <_read_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4c07      	ldr	r4, [pc, #28]	; (8011ad8 <_read_r+0x20>)
 8011abc:	4605      	mov	r5, r0
 8011abe:	4608      	mov	r0, r1
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	6022      	str	r2, [r4, #0]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f7f0 f8d4 	bl	8001c74 <_read>
 8011acc:	1c43      	adds	r3, r0, #1
 8011ace:	d102      	bne.n	8011ad6 <_read_r+0x1e>
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	b103      	cbz	r3, 8011ad6 <_read_r+0x1e>
 8011ad4:	602b      	str	r3, [r5, #0]
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	20000c6c 	.word	0x20000c6c

08011adc <_fstat_r>:
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4c07      	ldr	r4, [pc, #28]	; (8011afc <_fstat_r+0x20>)
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	4608      	mov	r0, r1
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	f7f0 f8ec 	bl	8001cc6 <_fstat>
 8011aee:	1c43      	adds	r3, r0, #1
 8011af0:	d102      	bne.n	8011af8 <_fstat_r+0x1c>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	b103      	cbz	r3, 8011af8 <_fstat_r+0x1c>
 8011af6:	602b      	str	r3, [r5, #0]
 8011af8:	bd38      	pop	{r3, r4, r5, pc}
 8011afa:	bf00      	nop
 8011afc:	20000c6c 	.word	0x20000c6c

08011b00 <_isatty_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4c06      	ldr	r4, [pc, #24]	; (8011b1c <_isatty_r+0x1c>)
 8011b04:	2300      	movs	r3, #0
 8011b06:	4605      	mov	r5, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	6023      	str	r3, [r4, #0]
 8011b0c:	f7f0 f8eb 	bl	8001ce6 <_isatty>
 8011b10:	1c43      	adds	r3, r0, #1
 8011b12:	d102      	bne.n	8011b1a <_isatty_r+0x1a>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	b103      	cbz	r3, 8011b1a <_isatty_r+0x1a>
 8011b18:	602b      	str	r3, [r5, #0]
 8011b1a:	bd38      	pop	{r3, r4, r5, pc}
 8011b1c:	20000c6c 	.word	0x20000c6c

08011b20 <_malloc_usable_size_r>:
 8011b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b24:	1f18      	subs	r0, r3, #4
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	bfbc      	itt	lt
 8011b2a:	580b      	ldrlt	r3, [r1, r0]
 8011b2c:	18c0      	addlt	r0, r0, r3
 8011b2e:	4770      	bx	lr

08011b30 <cos>:
 8011b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b32:	ec51 0b10 	vmov	r0, r1, d0
 8011b36:	4a1e      	ldr	r2, [pc, #120]	; (8011bb0 <cos+0x80>)
 8011b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	dc06      	bgt.n	8011b4e <cos+0x1e>
 8011b40:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011ba8 <cos+0x78>
 8011b44:	f000 fc60 	bl	8012408 <__kernel_cos>
 8011b48:	ec51 0b10 	vmov	r0, r1, d0
 8011b4c:	e007      	b.n	8011b5e <cos+0x2e>
 8011b4e:	4a19      	ldr	r2, [pc, #100]	; (8011bb4 <cos+0x84>)
 8011b50:	4293      	cmp	r3, r2
 8011b52:	dd09      	ble.n	8011b68 <cos+0x38>
 8011b54:	ee10 2a10 	vmov	r2, s0
 8011b58:	460b      	mov	r3, r1
 8011b5a:	f7ee fb9d 	bl	8000298 <__aeabi_dsub>
 8011b5e:	ec41 0b10 	vmov	d0, r0, r1
 8011b62:	b005      	add	sp, #20
 8011b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b68:	4668      	mov	r0, sp
 8011b6a:	f000 f9a9 	bl	8011ec0 <__ieee754_rem_pio2>
 8011b6e:	f000 0003 	and.w	r0, r0, #3
 8011b72:	2801      	cmp	r0, #1
 8011b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b78:	ed9d 0b00 	vldr	d0, [sp]
 8011b7c:	d007      	beq.n	8011b8e <cos+0x5e>
 8011b7e:	2802      	cmp	r0, #2
 8011b80:	d00e      	beq.n	8011ba0 <cos+0x70>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d0de      	beq.n	8011b44 <cos+0x14>
 8011b86:	2001      	movs	r0, #1
 8011b88:	f001 f846 	bl	8012c18 <__kernel_sin>
 8011b8c:	e7dc      	b.n	8011b48 <cos+0x18>
 8011b8e:	f001 f843 	bl	8012c18 <__kernel_sin>
 8011b92:	ec53 2b10 	vmov	r2, r3, d0
 8011b96:	ee10 0a10 	vmov	r0, s0
 8011b9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b9e:	e7de      	b.n	8011b5e <cos+0x2e>
 8011ba0:	f000 fc32 	bl	8012408 <__kernel_cos>
 8011ba4:	e7f5      	b.n	8011b92 <cos+0x62>
 8011ba6:	bf00      	nop
	...
 8011bb0:	3fe921fb 	.word	0x3fe921fb
 8011bb4:	7fefffff 	.word	0x7fefffff

08011bb8 <sin>:
 8011bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bba:	ec51 0b10 	vmov	r0, r1, d0
 8011bbe:	4a20      	ldr	r2, [pc, #128]	; (8011c40 <sin+0x88>)
 8011bc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	dc07      	bgt.n	8011bd8 <sin+0x20>
 8011bc8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011c38 <sin+0x80>
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f001 f823 	bl	8012c18 <__kernel_sin>
 8011bd2:	ec51 0b10 	vmov	r0, r1, d0
 8011bd6:	e007      	b.n	8011be8 <sin+0x30>
 8011bd8:	4a1a      	ldr	r2, [pc, #104]	; (8011c44 <sin+0x8c>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	dd09      	ble.n	8011bf2 <sin+0x3a>
 8011bde:	ee10 2a10 	vmov	r2, s0
 8011be2:	460b      	mov	r3, r1
 8011be4:	f7ee fb58 	bl	8000298 <__aeabi_dsub>
 8011be8:	ec41 0b10 	vmov	d0, r0, r1
 8011bec:	b005      	add	sp, #20
 8011bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bf2:	4668      	mov	r0, sp
 8011bf4:	f000 f964 	bl	8011ec0 <__ieee754_rem_pio2>
 8011bf8:	f000 0003 	and.w	r0, r0, #3
 8011bfc:	2801      	cmp	r0, #1
 8011bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c02:	ed9d 0b00 	vldr	d0, [sp]
 8011c06:	d004      	beq.n	8011c12 <sin+0x5a>
 8011c08:	2802      	cmp	r0, #2
 8011c0a:	d005      	beq.n	8011c18 <sin+0x60>
 8011c0c:	b970      	cbnz	r0, 8011c2c <sin+0x74>
 8011c0e:	2001      	movs	r0, #1
 8011c10:	e7dd      	b.n	8011bce <sin+0x16>
 8011c12:	f000 fbf9 	bl	8012408 <__kernel_cos>
 8011c16:	e7dc      	b.n	8011bd2 <sin+0x1a>
 8011c18:	2001      	movs	r0, #1
 8011c1a:	f000 fffd 	bl	8012c18 <__kernel_sin>
 8011c1e:	ec53 2b10 	vmov	r2, r3, d0
 8011c22:	ee10 0a10 	vmov	r0, s0
 8011c26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c2a:	e7dd      	b.n	8011be8 <sin+0x30>
 8011c2c:	f000 fbec 	bl	8012408 <__kernel_cos>
 8011c30:	e7f5      	b.n	8011c1e <sin+0x66>
 8011c32:	bf00      	nop
 8011c34:	f3af 8000 	nop.w
	...
 8011c40:	3fe921fb 	.word	0x3fe921fb
 8011c44:	7fefffff 	.word	0x7fefffff

08011c48 <atan2>:
 8011c48:	f000 b85a 	b.w	8011d00 <__ieee754_atan2>

08011c4c <sqrt>:
 8011c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c50:	ed2d 8b02 	vpush	{d8}
 8011c54:	b08b      	sub	sp, #44	; 0x2c
 8011c56:	ec55 4b10 	vmov	r4, r5, d0
 8011c5a:	f000 fb23 	bl	80122a4 <__ieee754_sqrt>
 8011c5e:	4b26      	ldr	r3, [pc, #152]	; (8011cf8 <sqrt+0xac>)
 8011c60:	eeb0 8a40 	vmov.f32	s16, s0
 8011c64:	eef0 8a60 	vmov.f32	s17, s1
 8011c68:	f993 6000 	ldrsb.w	r6, [r3]
 8011c6c:	1c73      	adds	r3, r6, #1
 8011c6e:	d02a      	beq.n	8011cc6 <sqrt+0x7a>
 8011c70:	4622      	mov	r2, r4
 8011c72:	462b      	mov	r3, r5
 8011c74:	4620      	mov	r0, r4
 8011c76:	4629      	mov	r1, r5
 8011c78:	f7ee ff60 	bl	8000b3c <__aeabi_dcmpun>
 8011c7c:	4607      	mov	r7, r0
 8011c7e:	bb10      	cbnz	r0, 8011cc6 <sqrt+0x7a>
 8011c80:	f04f 0800 	mov.w	r8, #0
 8011c84:	f04f 0900 	mov.w	r9, #0
 8011c88:	4642      	mov	r2, r8
 8011c8a:	464b      	mov	r3, r9
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7ee ff2c 	bl	8000aec <__aeabi_dcmplt>
 8011c94:	b1b8      	cbz	r0, 8011cc6 <sqrt+0x7a>
 8011c96:	2301      	movs	r3, #1
 8011c98:	9300      	str	r3, [sp, #0]
 8011c9a:	4b18      	ldr	r3, [pc, #96]	; (8011cfc <sqrt+0xb0>)
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	9708      	str	r7, [sp, #32]
 8011ca0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011ca4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011ca8:	b9b6      	cbnz	r6, 8011cd8 <sqrt+0x8c>
 8011caa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011cae:	4668      	mov	r0, sp
 8011cb0:	f001 fa9e 	bl	80131f0 <matherr>
 8011cb4:	b1d0      	cbz	r0, 8011cec <sqrt+0xa0>
 8011cb6:	9b08      	ldr	r3, [sp, #32]
 8011cb8:	b11b      	cbz	r3, 8011cc2 <sqrt+0x76>
 8011cba:	f7fb fd23 	bl	800d704 <__errno>
 8011cbe:	9b08      	ldr	r3, [sp, #32]
 8011cc0:	6003      	str	r3, [r0, #0]
 8011cc2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8011cca:	eef0 0a68 	vmov.f32	s1, s17
 8011cce:	b00b      	add	sp, #44	; 0x2c
 8011cd0:	ecbd 8b02 	vpop	{d8}
 8011cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cd8:	4642      	mov	r2, r8
 8011cda:	464b      	mov	r3, r9
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4649      	mov	r1, r9
 8011ce0:	f7ee fdbc 	bl	800085c <__aeabi_ddiv>
 8011ce4:	2e02      	cmp	r6, #2
 8011ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011cea:	d1e0      	bne.n	8011cae <sqrt+0x62>
 8011cec:	f7fb fd0a 	bl	800d704 <__errno>
 8011cf0:	2321      	movs	r3, #33	; 0x21
 8011cf2:	6003      	str	r3, [r0, #0]
 8011cf4:	e7df      	b.n	8011cb6 <sqrt+0x6a>
 8011cf6:	bf00      	nop
 8011cf8:	200004a0 	.word	0x200004a0
 8011cfc:	080136e6 	.word	0x080136e6

08011d00 <__ieee754_atan2>:
 8011d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d04:	ec57 6b11 	vmov	r6, r7, d1
 8011d08:	4273      	negs	r3, r6
 8011d0a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011d0e:	4333      	orrs	r3, r6
 8011d10:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8011eb8 <__ieee754_atan2+0x1b8>
 8011d14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011d18:	4573      	cmp	r3, lr
 8011d1a:	ec51 0b10 	vmov	r0, r1, d0
 8011d1e:	ee11 8a10 	vmov	r8, s2
 8011d22:	d80a      	bhi.n	8011d3a <__ieee754_atan2+0x3a>
 8011d24:	4244      	negs	r4, r0
 8011d26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d2a:	4304      	orrs	r4, r0
 8011d2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011d30:	4574      	cmp	r4, lr
 8011d32:	468c      	mov	ip, r1
 8011d34:	ee10 9a10 	vmov	r9, s0
 8011d38:	d907      	bls.n	8011d4a <__ieee754_atan2+0x4a>
 8011d3a:	4632      	mov	r2, r6
 8011d3c:	463b      	mov	r3, r7
 8011d3e:	f7ee faad 	bl	800029c <__adddf3>
 8011d42:	ec41 0b10 	vmov	d0, r0, r1
 8011d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011d4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011d52:	4334      	orrs	r4, r6
 8011d54:	d103      	bne.n	8011d5e <__ieee754_atan2+0x5e>
 8011d56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d5a:	f001 b819 	b.w	8012d90 <atan>
 8011d5e:	17bc      	asrs	r4, r7, #30
 8011d60:	f004 0402 	and.w	r4, r4, #2
 8011d64:	ea53 0909 	orrs.w	r9, r3, r9
 8011d68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011d6c:	d107      	bne.n	8011d7e <__ieee754_atan2+0x7e>
 8011d6e:	2c02      	cmp	r4, #2
 8011d70:	d073      	beq.n	8011e5a <__ieee754_atan2+0x15a>
 8011d72:	2c03      	cmp	r4, #3
 8011d74:	d1e5      	bne.n	8011d42 <__ieee754_atan2+0x42>
 8011d76:	a13e      	add	r1, pc, #248	; (adr r1, 8011e70 <__ieee754_atan2+0x170>)
 8011d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d7c:	e7e1      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011d7e:	ea52 0808 	orrs.w	r8, r2, r8
 8011d82:	d106      	bne.n	8011d92 <__ieee754_atan2+0x92>
 8011d84:	f1bc 0f00 	cmp.w	ip, #0
 8011d88:	da6b      	bge.n	8011e62 <__ieee754_atan2+0x162>
 8011d8a:	a13b      	add	r1, pc, #236	; (adr r1, 8011e78 <__ieee754_atan2+0x178>)
 8011d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d90:	e7d7      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011d92:	4572      	cmp	r2, lr
 8011d94:	d120      	bne.n	8011dd8 <__ieee754_atan2+0xd8>
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d111      	bne.n	8011dbe <__ieee754_atan2+0xbe>
 8011d9a:	2c02      	cmp	r4, #2
 8011d9c:	d007      	beq.n	8011dae <__ieee754_atan2+0xae>
 8011d9e:	2c03      	cmp	r4, #3
 8011da0:	d009      	beq.n	8011db6 <__ieee754_atan2+0xb6>
 8011da2:	2c01      	cmp	r4, #1
 8011da4:	d155      	bne.n	8011e52 <__ieee754_atan2+0x152>
 8011da6:	a136      	add	r1, pc, #216	; (adr r1, 8011e80 <__ieee754_atan2+0x180>)
 8011da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dac:	e7c9      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011dae:	a136      	add	r1, pc, #216	; (adr r1, 8011e88 <__ieee754_atan2+0x188>)
 8011db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011db4:	e7c5      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011db6:	a136      	add	r1, pc, #216	; (adr r1, 8011e90 <__ieee754_atan2+0x190>)
 8011db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dbc:	e7c1      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011dbe:	2c02      	cmp	r4, #2
 8011dc0:	d04b      	beq.n	8011e5a <__ieee754_atan2+0x15a>
 8011dc2:	2c03      	cmp	r4, #3
 8011dc4:	d0d7      	beq.n	8011d76 <__ieee754_atan2+0x76>
 8011dc6:	2c01      	cmp	r4, #1
 8011dc8:	f04f 0000 	mov.w	r0, #0
 8011dcc:	d102      	bne.n	8011dd4 <__ieee754_atan2+0xd4>
 8011dce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011dd2:	e7b6      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	e7b4      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011dd8:	4573      	cmp	r3, lr
 8011dda:	d0d3      	beq.n	8011d84 <__ieee754_atan2+0x84>
 8011ddc:	1a9b      	subs	r3, r3, r2
 8011dde:	151b      	asrs	r3, r3, #20
 8011de0:	2b3c      	cmp	r3, #60	; 0x3c
 8011de2:	dc1e      	bgt.n	8011e22 <__ieee754_atan2+0x122>
 8011de4:	2f00      	cmp	r7, #0
 8011de6:	da01      	bge.n	8011dec <__ieee754_atan2+0xec>
 8011de8:	333c      	adds	r3, #60	; 0x3c
 8011dea:	db1e      	blt.n	8011e2a <__ieee754_atan2+0x12a>
 8011dec:	4632      	mov	r2, r6
 8011dee:	463b      	mov	r3, r7
 8011df0:	f7ee fd34 	bl	800085c <__aeabi_ddiv>
 8011df4:	ec41 0b10 	vmov	d0, r0, r1
 8011df8:	f001 f96a 	bl	80130d0 <fabs>
 8011dfc:	f000 ffc8 	bl	8012d90 <atan>
 8011e00:	ec51 0b10 	vmov	r0, r1, d0
 8011e04:	2c01      	cmp	r4, #1
 8011e06:	d013      	beq.n	8011e30 <__ieee754_atan2+0x130>
 8011e08:	2c02      	cmp	r4, #2
 8011e0a:	d015      	beq.n	8011e38 <__ieee754_atan2+0x138>
 8011e0c:	2c00      	cmp	r4, #0
 8011e0e:	d098      	beq.n	8011d42 <__ieee754_atan2+0x42>
 8011e10:	a321      	add	r3, pc, #132	; (adr r3, 8011e98 <__ieee754_atan2+0x198>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7ee fa3f 	bl	8000298 <__aeabi_dsub>
 8011e1a:	a321      	add	r3, pc, #132	; (adr r3, 8011ea0 <__ieee754_atan2+0x1a0>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	e014      	b.n	8011e4c <__ieee754_atan2+0x14c>
 8011e22:	a121      	add	r1, pc, #132	; (adr r1, 8011ea8 <__ieee754_atan2+0x1a8>)
 8011e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e28:	e7ec      	b.n	8011e04 <__ieee754_atan2+0x104>
 8011e2a:	2000      	movs	r0, #0
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	e7e9      	b.n	8011e04 <__ieee754_atan2+0x104>
 8011e30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e34:	4619      	mov	r1, r3
 8011e36:	e784      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011e38:	a317      	add	r3, pc, #92	; (adr r3, 8011e98 <__ieee754_atan2+0x198>)
 8011e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3e:	f7ee fa2b 	bl	8000298 <__aeabi_dsub>
 8011e42:	4602      	mov	r2, r0
 8011e44:	460b      	mov	r3, r1
 8011e46:	a116      	add	r1, pc, #88	; (adr r1, 8011ea0 <__ieee754_atan2+0x1a0>)
 8011e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e4c:	f7ee fa24 	bl	8000298 <__aeabi_dsub>
 8011e50:	e777      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011e52:	a117      	add	r1, pc, #92	; (adr r1, 8011eb0 <__ieee754_atan2+0x1b0>)
 8011e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e58:	e773      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011e5a:	a111      	add	r1, pc, #68	; (adr r1, 8011ea0 <__ieee754_atan2+0x1a0>)
 8011e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e60:	e76f      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011e62:	a111      	add	r1, pc, #68	; (adr r1, 8011ea8 <__ieee754_atan2+0x1a8>)
 8011e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e68:	e76b      	b.n	8011d42 <__ieee754_atan2+0x42>
 8011e6a:	bf00      	nop
 8011e6c:	f3af 8000 	nop.w
 8011e70:	54442d18 	.word	0x54442d18
 8011e74:	c00921fb 	.word	0xc00921fb
 8011e78:	54442d18 	.word	0x54442d18
 8011e7c:	bff921fb 	.word	0xbff921fb
 8011e80:	54442d18 	.word	0x54442d18
 8011e84:	bfe921fb 	.word	0xbfe921fb
 8011e88:	7f3321d2 	.word	0x7f3321d2
 8011e8c:	4002d97c 	.word	0x4002d97c
 8011e90:	7f3321d2 	.word	0x7f3321d2
 8011e94:	c002d97c 	.word	0xc002d97c
 8011e98:	33145c07 	.word	0x33145c07
 8011e9c:	3ca1a626 	.word	0x3ca1a626
 8011ea0:	54442d18 	.word	0x54442d18
 8011ea4:	400921fb 	.word	0x400921fb
 8011ea8:	54442d18 	.word	0x54442d18
 8011eac:	3ff921fb 	.word	0x3ff921fb
 8011eb0:	54442d18 	.word	0x54442d18
 8011eb4:	3fe921fb 	.word	0x3fe921fb
 8011eb8:	7ff00000 	.word	0x7ff00000
 8011ebc:	00000000 	.word	0x00000000

08011ec0 <__ieee754_rem_pio2>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	ec57 6b10 	vmov	r6, r7, d0
 8011ec8:	4bc3      	ldr	r3, [pc, #780]	; (80121d8 <__ieee754_rem_pio2+0x318>)
 8011eca:	b08d      	sub	sp, #52	; 0x34
 8011ecc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011ed0:	4598      	cmp	r8, r3
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	9704      	str	r7, [sp, #16]
 8011ed6:	dc07      	bgt.n	8011ee8 <__ieee754_rem_pio2+0x28>
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2300      	movs	r3, #0
 8011edc:	ed84 0b00 	vstr	d0, [r4]
 8011ee0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	e027      	b.n	8011f38 <__ieee754_rem_pio2+0x78>
 8011ee8:	4bbc      	ldr	r3, [pc, #752]	; (80121dc <__ieee754_rem_pio2+0x31c>)
 8011eea:	4598      	cmp	r8, r3
 8011eec:	dc75      	bgt.n	8011fda <__ieee754_rem_pio2+0x11a>
 8011eee:	9b04      	ldr	r3, [sp, #16]
 8011ef0:	4dbb      	ldr	r5, [pc, #748]	; (80121e0 <__ieee754_rem_pio2+0x320>)
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	ee10 0a10 	vmov	r0, s0
 8011ef8:	a3a9      	add	r3, pc, #676	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x2e0>)
 8011efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efe:	4639      	mov	r1, r7
 8011f00:	dd36      	ble.n	8011f70 <__ieee754_rem_pio2+0xb0>
 8011f02:	f7ee f9c9 	bl	8000298 <__aeabi_dsub>
 8011f06:	45a8      	cmp	r8, r5
 8011f08:	4606      	mov	r6, r0
 8011f0a:	460f      	mov	r7, r1
 8011f0c:	d018      	beq.n	8011f40 <__ieee754_rem_pio2+0x80>
 8011f0e:	a3a6      	add	r3, pc, #664	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x2e8>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7ee f9c0 	bl	8000298 <__aeabi_dsub>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	e9c4 2300 	strd	r2, r3, [r4]
 8011f20:	4630      	mov	r0, r6
 8011f22:	4639      	mov	r1, r7
 8011f24:	f7ee f9b8 	bl	8000298 <__aeabi_dsub>
 8011f28:	a39f      	add	r3, pc, #636	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x2e8>)
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	f7ee f9b3 	bl	8000298 <__aeabi_dsub>
 8011f32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f36:	2501      	movs	r5, #1
 8011f38:	4628      	mov	r0, r5
 8011f3a:	b00d      	add	sp, #52	; 0x34
 8011f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f40:	a39b      	add	r3, pc, #620	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x2f0>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	f7ee f9a7 	bl	8000298 <__aeabi_dsub>
 8011f4a:	a39b      	add	r3, pc, #620	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2f8>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	4606      	mov	r6, r0
 8011f52:	460f      	mov	r7, r1
 8011f54:	f7ee f9a0 	bl	8000298 <__aeabi_dsub>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	e9c4 2300 	strd	r2, r3, [r4]
 8011f60:	4630      	mov	r0, r6
 8011f62:	4639      	mov	r1, r7
 8011f64:	f7ee f998 	bl	8000298 <__aeabi_dsub>
 8011f68:	a393      	add	r3, pc, #588	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2f8>)
 8011f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6e:	e7de      	b.n	8011f2e <__ieee754_rem_pio2+0x6e>
 8011f70:	f7ee f994 	bl	800029c <__adddf3>
 8011f74:	45a8      	cmp	r8, r5
 8011f76:	4606      	mov	r6, r0
 8011f78:	460f      	mov	r7, r1
 8011f7a:	d016      	beq.n	8011faa <__ieee754_rem_pio2+0xea>
 8011f7c:	a38a      	add	r3, pc, #552	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x2e8>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	f7ee f98b 	bl	800029c <__adddf3>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	e9c4 2300 	strd	r2, r3, [r4]
 8011f8e:	4630      	mov	r0, r6
 8011f90:	4639      	mov	r1, r7
 8011f92:	f7ee f981 	bl	8000298 <__aeabi_dsub>
 8011f96:	a384      	add	r3, pc, #528	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x2e8>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	f7ee f97e 	bl	800029c <__adddf3>
 8011fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8011fa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011fa8:	e7c6      	b.n	8011f38 <__ieee754_rem_pio2+0x78>
 8011faa:	a381      	add	r3, pc, #516	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x2f0>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	f7ee f974 	bl	800029c <__adddf3>
 8011fb4:	a380      	add	r3, pc, #512	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2f8>)
 8011fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fba:	4606      	mov	r6, r0
 8011fbc:	460f      	mov	r7, r1
 8011fbe:	f7ee f96d 	bl	800029c <__adddf3>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	e9c4 2300 	strd	r2, r3, [r4]
 8011fca:	4630      	mov	r0, r6
 8011fcc:	4639      	mov	r1, r7
 8011fce:	f7ee f963 	bl	8000298 <__aeabi_dsub>
 8011fd2:	a379      	add	r3, pc, #484	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2f8>)
 8011fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd8:	e7e0      	b.n	8011f9c <__ieee754_rem_pio2+0xdc>
 8011fda:	4b82      	ldr	r3, [pc, #520]	; (80121e4 <__ieee754_rem_pio2+0x324>)
 8011fdc:	4598      	cmp	r8, r3
 8011fde:	f300 80d0 	bgt.w	8012182 <__ieee754_rem_pio2+0x2c2>
 8011fe2:	f001 f875 	bl	80130d0 <fabs>
 8011fe6:	ec57 6b10 	vmov	r6, r7, d0
 8011fea:	ee10 0a10 	vmov	r0, s0
 8011fee:	a374      	add	r3, pc, #464	; (adr r3, 80121c0 <__ieee754_rem_pio2+0x300>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	4639      	mov	r1, r7
 8011ff6:	f7ee fb07 	bl	8000608 <__aeabi_dmul>
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4b7a      	ldr	r3, [pc, #488]	; (80121e8 <__ieee754_rem_pio2+0x328>)
 8011ffe:	f7ee f94d 	bl	800029c <__adddf3>
 8012002:	f7ee fdb1 	bl	8000b68 <__aeabi_d2iz>
 8012006:	4605      	mov	r5, r0
 8012008:	f7ee fa94 	bl	8000534 <__aeabi_i2d>
 801200c:	a364      	add	r3, pc, #400	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x2e0>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012016:	f7ee faf7 	bl	8000608 <__aeabi_dmul>
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	4630      	mov	r0, r6
 8012020:	4639      	mov	r1, r7
 8012022:	f7ee f939 	bl	8000298 <__aeabi_dsub>
 8012026:	a360      	add	r3, pc, #384	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x2e8>)
 8012028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202c:	4682      	mov	sl, r0
 801202e:	468b      	mov	fp, r1
 8012030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012034:	f7ee fae8 	bl	8000608 <__aeabi_dmul>
 8012038:	2d1f      	cmp	r5, #31
 801203a:	4606      	mov	r6, r0
 801203c:	460f      	mov	r7, r1
 801203e:	dc0c      	bgt.n	801205a <__ieee754_rem_pio2+0x19a>
 8012040:	1e6a      	subs	r2, r5, #1
 8012042:	4b6a      	ldr	r3, [pc, #424]	; (80121ec <__ieee754_rem_pio2+0x32c>)
 8012044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012048:	4543      	cmp	r3, r8
 801204a:	d006      	beq.n	801205a <__ieee754_rem_pio2+0x19a>
 801204c:	4632      	mov	r2, r6
 801204e:	463b      	mov	r3, r7
 8012050:	4650      	mov	r0, sl
 8012052:	4659      	mov	r1, fp
 8012054:	f7ee f920 	bl	8000298 <__aeabi_dsub>
 8012058:	e00e      	b.n	8012078 <__ieee754_rem_pio2+0x1b8>
 801205a:	4632      	mov	r2, r6
 801205c:	463b      	mov	r3, r7
 801205e:	4650      	mov	r0, sl
 8012060:	4659      	mov	r1, fp
 8012062:	f7ee f919 	bl	8000298 <__aeabi_dsub>
 8012066:	ea4f 5328 	mov.w	r3, r8, asr #20
 801206a:	9305      	str	r3, [sp, #20]
 801206c:	9a05      	ldr	r2, [sp, #20]
 801206e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	2b10      	cmp	r3, #16
 8012076:	dc02      	bgt.n	801207e <__ieee754_rem_pio2+0x1be>
 8012078:	e9c4 0100 	strd	r0, r1, [r4]
 801207c:	e039      	b.n	80120f2 <__ieee754_rem_pio2+0x232>
 801207e:	a34c      	add	r3, pc, #304	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x2f0>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012088:	f7ee fabe 	bl	8000608 <__aeabi_dmul>
 801208c:	4606      	mov	r6, r0
 801208e:	460f      	mov	r7, r1
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	4650      	mov	r0, sl
 8012096:	4659      	mov	r1, fp
 8012098:	f7ee f8fe 	bl	8000298 <__aeabi_dsub>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	4680      	mov	r8, r0
 80120a2:	4689      	mov	r9, r1
 80120a4:	4650      	mov	r0, sl
 80120a6:	4659      	mov	r1, fp
 80120a8:	f7ee f8f6 	bl	8000298 <__aeabi_dsub>
 80120ac:	4632      	mov	r2, r6
 80120ae:	463b      	mov	r3, r7
 80120b0:	f7ee f8f2 	bl	8000298 <__aeabi_dsub>
 80120b4:	a340      	add	r3, pc, #256	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2f8>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	4606      	mov	r6, r0
 80120bc:	460f      	mov	r7, r1
 80120be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120c2:	f7ee faa1 	bl	8000608 <__aeabi_dmul>
 80120c6:	4632      	mov	r2, r6
 80120c8:	463b      	mov	r3, r7
 80120ca:	f7ee f8e5 	bl	8000298 <__aeabi_dsub>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4606      	mov	r6, r0
 80120d4:	460f      	mov	r7, r1
 80120d6:	4640      	mov	r0, r8
 80120d8:	4649      	mov	r1, r9
 80120da:	f7ee f8dd 	bl	8000298 <__aeabi_dsub>
 80120de:	9a05      	ldr	r2, [sp, #20]
 80120e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	2b31      	cmp	r3, #49	; 0x31
 80120e8:	dc20      	bgt.n	801212c <__ieee754_rem_pio2+0x26c>
 80120ea:	e9c4 0100 	strd	r0, r1, [r4]
 80120ee:	46c2      	mov	sl, r8
 80120f0:	46cb      	mov	fp, r9
 80120f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80120f6:	4650      	mov	r0, sl
 80120f8:	4642      	mov	r2, r8
 80120fa:	464b      	mov	r3, r9
 80120fc:	4659      	mov	r1, fp
 80120fe:	f7ee f8cb 	bl	8000298 <__aeabi_dsub>
 8012102:	463b      	mov	r3, r7
 8012104:	4632      	mov	r2, r6
 8012106:	f7ee f8c7 	bl	8000298 <__aeabi_dsub>
 801210a:	9b04      	ldr	r3, [sp, #16]
 801210c:	2b00      	cmp	r3, #0
 801210e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012112:	f6bf af11 	bge.w	8011f38 <__ieee754_rem_pio2+0x78>
 8012116:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801211a:	6063      	str	r3, [r4, #4]
 801211c:	f8c4 8000 	str.w	r8, [r4]
 8012120:	60a0      	str	r0, [r4, #8]
 8012122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012126:	60e3      	str	r3, [r4, #12]
 8012128:	426d      	negs	r5, r5
 801212a:	e705      	b.n	8011f38 <__ieee754_rem_pio2+0x78>
 801212c:	a326      	add	r3, pc, #152	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x308>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012136:	f7ee fa67 	bl	8000608 <__aeabi_dmul>
 801213a:	4606      	mov	r6, r0
 801213c:	460f      	mov	r7, r1
 801213e:	4602      	mov	r2, r0
 8012140:	460b      	mov	r3, r1
 8012142:	4640      	mov	r0, r8
 8012144:	4649      	mov	r1, r9
 8012146:	f7ee f8a7 	bl	8000298 <__aeabi_dsub>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4682      	mov	sl, r0
 8012150:	468b      	mov	fp, r1
 8012152:	4640      	mov	r0, r8
 8012154:	4649      	mov	r1, r9
 8012156:	f7ee f89f 	bl	8000298 <__aeabi_dsub>
 801215a:	4632      	mov	r2, r6
 801215c:	463b      	mov	r3, r7
 801215e:	f7ee f89b 	bl	8000298 <__aeabi_dsub>
 8012162:	a31b      	add	r3, pc, #108	; (adr r3, 80121d0 <__ieee754_rem_pio2+0x310>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	4606      	mov	r6, r0
 801216a:	460f      	mov	r7, r1
 801216c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012170:	f7ee fa4a 	bl	8000608 <__aeabi_dmul>
 8012174:	4632      	mov	r2, r6
 8012176:	463b      	mov	r3, r7
 8012178:	f7ee f88e 	bl	8000298 <__aeabi_dsub>
 801217c:	4606      	mov	r6, r0
 801217e:	460f      	mov	r7, r1
 8012180:	e764      	b.n	801204c <__ieee754_rem_pio2+0x18c>
 8012182:	4b1b      	ldr	r3, [pc, #108]	; (80121f0 <__ieee754_rem_pio2+0x330>)
 8012184:	4598      	cmp	r8, r3
 8012186:	dd35      	ble.n	80121f4 <__ieee754_rem_pio2+0x334>
 8012188:	ee10 2a10 	vmov	r2, s0
 801218c:	463b      	mov	r3, r7
 801218e:	4630      	mov	r0, r6
 8012190:	4639      	mov	r1, r7
 8012192:	f7ee f881 	bl	8000298 <__aeabi_dsub>
 8012196:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801219a:	e9c4 0100 	strd	r0, r1, [r4]
 801219e:	e6a1      	b.n	8011ee4 <__ieee754_rem_pio2+0x24>
 80121a0:	54400000 	.word	0x54400000
 80121a4:	3ff921fb 	.word	0x3ff921fb
 80121a8:	1a626331 	.word	0x1a626331
 80121ac:	3dd0b461 	.word	0x3dd0b461
 80121b0:	1a600000 	.word	0x1a600000
 80121b4:	3dd0b461 	.word	0x3dd0b461
 80121b8:	2e037073 	.word	0x2e037073
 80121bc:	3ba3198a 	.word	0x3ba3198a
 80121c0:	6dc9c883 	.word	0x6dc9c883
 80121c4:	3fe45f30 	.word	0x3fe45f30
 80121c8:	2e000000 	.word	0x2e000000
 80121cc:	3ba3198a 	.word	0x3ba3198a
 80121d0:	252049c1 	.word	0x252049c1
 80121d4:	397b839a 	.word	0x397b839a
 80121d8:	3fe921fb 	.word	0x3fe921fb
 80121dc:	4002d97b 	.word	0x4002d97b
 80121e0:	3ff921fb 	.word	0x3ff921fb
 80121e4:	413921fb 	.word	0x413921fb
 80121e8:	3fe00000 	.word	0x3fe00000
 80121ec:	080136ec 	.word	0x080136ec
 80121f0:	7fefffff 	.word	0x7fefffff
 80121f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80121f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80121fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012200:	4630      	mov	r0, r6
 8012202:	460f      	mov	r7, r1
 8012204:	f7ee fcb0 	bl	8000b68 <__aeabi_d2iz>
 8012208:	f7ee f994 	bl	8000534 <__aeabi_i2d>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012218:	f7ee f83e 	bl	8000298 <__aeabi_dsub>
 801221c:	2200      	movs	r2, #0
 801221e:	4b1f      	ldr	r3, [pc, #124]	; (801229c <__ieee754_rem_pio2+0x3dc>)
 8012220:	f7ee f9f2 	bl	8000608 <__aeabi_dmul>
 8012224:	460f      	mov	r7, r1
 8012226:	4606      	mov	r6, r0
 8012228:	f7ee fc9e 	bl	8000b68 <__aeabi_d2iz>
 801222c:	f7ee f982 	bl	8000534 <__aeabi_i2d>
 8012230:	4602      	mov	r2, r0
 8012232:	460b      	mov	r3, r1
 8012234:	4630      	mov	r0, r6
 8012236:	4639      	mov	r1, r7
 8012238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801223c:	f7ee f82c 	bl	8000298 <__aeabi_dsub>
 8012240:	2200      	movs	r2, #0
 8012242:	4b16      	ldr	r3, [pc, #88]	; (801229c <__ieee754_rem_pio2+0x3dc>)
 8012244:	f7ee f9e0 	bl	8000608 <__aeabi_dmul>
 8012248:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801224c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012250:	f04f 0803 	mov.w	r8, #3
 8012254:	2600      	movs	r6, #0
 8012256:	2700      	movs	r7, #0
 8012258:	4632      	mov	r2, r6
 801225a:	463b      	mov	r3, r7
 801225c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012260:	f108 3aff 	add.w	sl, r8, #4294967295
 8012264:	f7ee fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 8012268:	b9b0      	cbnz	r0, 8012298 <__ieee754_rem_pio2+0x3d8>
 801226a:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <__ieee754_rem_pio2+0x3e0>)
 801226c:	9301      	str	r3, [sp, #4]
 801226e:	2302      	movs	r3, #2
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	462a      	mov	r2, r5
 8012274:	4643      	mov	r3, r8
 8012276:	4621      	mov	r1, r4
 8012278:	a806      	add	r0, sp, #24
 801227a:	f000 f98d 	bl	8012598 <__kernel_rem_pio2>
 801227e:	9b04      	ldr	r3, [sp, #16]
 8012280:	2b00      	cmp	r3, #0
 8012282:	4605      	mov	r5, r0
 8012284:	f6bf ae58 	bge.w	8011f38 <__ieee754_rem_pio2+0x78>
 8012288:	6863      	ldr	r3, [r4, #4]
 801228a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801228e:	6063      	str	r3, [r4, #4]
 8012290:	68e3      	ldr	r3, [r4, #12]
 8012292:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012296:	e746      	b.n	8012126 <__ieee754_rem_pio2+0x266>
 8012298:	46d0      	mov	r8, sl
 801229a:	e7dd      	b.n	8012258 <__ieee754_rem_pio2+0x398>
 801229c:	41700000 	.word	0x41700000
 80122a0:	0801376c 	.word	0x0801376c

080122a4 <__ieee754_sqrt>:
 80122a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a8:	4955      	ldr	r1, [pc, #340]	; (8012400 <__ieee754_sqrt+0x15c>)
 80122aa:	ec55 4b10 	vmov	r4, r5, d0
 80122ae:	43a9      	bics	r1, r5
 80122b0:	462b      	mov	r3, r5
 80122b2:	462a      	mov	r2, r5
 80122b4:	d112      	bne.n	80122dc <__ieee754_sqrt+0x38>
 80122b6:	ee10 2a10 	vmov	r2, s0
 80122ba:	ee10 0a10 	vmov	r0, s0
 80122be:	4629      	mov	r1, r5
 80122c0:	f7ee f9a2 	bl	8000608 <__aeabi_dmul>
 80122c4:	4602      	mov	r2, r0
 80122c6:	460b      	mov	r3, r1
 80122c8:	4620      	mov	r0, r4
 80122ca:	4629      	mov	r1, r5
 80122cc:	f7ed ffe6 	bl	800029c <__adddf3>
 80122d0:	4604      	mov	r4, r0
 80122d2:	460d      	mov	r5, r1
 80122d4:	ec45 4b10 	vmov	d0, r4, r5
 80122d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122dc:	2d00      	cmp	r5, #0
 80122de:	ee10 0a10 	vmov	r0, s0
 80122e2:	4621      	mov	r1, r4
 80122e4:	dc0f      	bgt.n	8012306 <__ieee754_sqrt+0x62>
 80122e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122ea:	4330      	orrs	r0, r6
 80122ec:	d0f2      	beq.n	80122d4 <__ieee754_sqrt+0x30>
 80122ee:	b155      	cbz	r5, 8012306 <__ieee754_sqrt+0x62>
 80122f0:	ee10 2a10 	vmov	r2, s0
 80122f4:	4620      	mov	r0, r4
 80122f6:	4629      	mov	r1, r5
 80122f8:	f7ed ffce 	bl	8000298 <__aeabi_dsub>
 80122fc:	4602      	mov	r2, r0
 80122fe:	460b      	mov	r3, r1
 8012300:	f7ee faac 	bl	800085c <__aeabi_ddiv>
 8012304:	e7e4      	b.n	80122d0 <__ieee754_sqrt+0x2c>
 8012306:	151b      	asrs	r3, r3, #20
 8012308:	d073      	beq.n	80123f2 <__ieee754_sqrt+0x14e>
 801230a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801230e:	07dd      	lsls	r5, r3, #31
 8012310:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012314:	bf48      	it	mi
 8012316:	0fc8      	lsrmi	r0, r1, #31
 8012318:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801231c:	bf44      	itt	mi
 801231e:	0049      	lslmi	r1, r1, #1
 8012320:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012324:	2500      	movs	r5, #0
 8012326:	1058      	asrs	r0, r3, #1
 8012328:	0fcb      	lsrs	r3, r1, #31
 801232a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801232e:	0049      	lsls	r1, r1, #1
 8012330:	2316      	movs	r3, #22
 8012332:	462c      	mov	r4, r5
 8012334:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012338:	19a7      	adds	r7, r4, r6
 801233a:	4297      	cmp	r7, r2
 801233c:	bfde      	ittt	le
 801233e:	19bc      	addle	r4, r7, r6
 8012340:	1bd2      	suble	r2, r2, r7
 8012342:	19ad      	addle	r5, r5, r6
 8012344:	0fcf      	lsrs	r7, r1, #31
 8012346:	3b01      	subs	r3, #1
 8012348:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801234c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012350:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012354:	d1f0      	bne.n	8012338 <__ieee754_sqrt+0x94>
 8012356:	f04f 0c20 	mov.w	ip, #32
 801235a:	469e      	mov	lr, r3
 801235c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012360:	42a2      	cmp	r2, r4
 8012362:	eb06 070e 	add.w	r7, r6, lr
 8012366:	dc02      	bgt.n	801236e <__ieee754_sqrt+0xca>
 8012368:	d112      	bne.n	8012390 <__ieee754_sqrt+0xec>
 801236a:	428f      	cmp	r7, r1
 801236c:	d810      	bhi.n	8012390 <__ieee754_sqrt+0xec>
 801236e:	2f00      	cmp	r7, #0
 8012370:	eb07 0e06 	add.w	lr, r7, r6
 8012374:	da42      	bge.n	80123fc <__ieee754_sqrt+0x158>
 8012376:	f1be 0f00 	cmp.w	lr, #0
 801237a:	db3f      	blt.n	80123fc <__ieee754_sqrt+0x158>
 801237c:	f104 0801 	add.w	r8, r4, #1
 8012380:	1b12      	subs	r2, r2, r4
 8012382:	428f      	cmp	r7, r1
 8012384:	bf88      	it	hi
 8012386:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801238a:	1bc9      	subs	r1, r1, r7
 801238c:	4433      	add	r3, r6
 801238e:	4644      	mov	r4, r8
 8012390:	0052      	lsls	r2, r2, #1
 8012392:	f1bc 0c01 	subs.w	ip, ip, #1
 8012396:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801239a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801239e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80123a2:	d1dd      	bne.n	8012360 <__ieee754_sqrt+0xbc>
 80123a4:	430a      	orrs	r2, r1
 80123a6:	d006      	beq.n	80123b6 <__ieee754_sqrt+0x112>
 80123a8:	1c5c      	adds	r4, r3, #1
 80123aa:	bf13      	iteet	ne
 80123ac:	3301      	addne	r3, #1
 80123ae:	3501      	addeq	r5, #1
 80123b0:	4663      	moveq	r3, ip
 80123b2:	f023 0301 	bicne.w	r3, r3, #1
 80123b6:	106a      	asrs	r2, r5, #1
 80123b8:	085b      	lsrs	r3, r3, #1
 80123ba:	07e9      	lsls	r1, r5, #31
 80123bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80123c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80123c4:	bf48      	it	mi
 80123c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80123ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80123ce:	461c      	mov	r4, r3
 80123d0:	e780      	b.n	80122d4 <__ieee754_sqrt+0x30>
 80123d2:	0aca      	lsrs	r2, r1, #11
 80123d4:	3815      	subs	r0, #21
 80123d6:	0549      	lsls	r1, r1, #21
 80123d8:	2a00      	cmp	r2, #0
 80123da:	d0fa      	beq.n	80123d2 <__ieee754_sqrt+0x12e>
 80123dc:	02d6      	lsls	r6, r2, #11
 80123de:	d50a      	bpl.n	80123f6 <__ieee754_sqrt+0x152>
 80123e0:	f1c3 0420 	rsb	r4, r3, #32
 80123e4:	fa21 f404 	lsr.w	r4, r1, r4
 80123e8:	1e5d      	subs	r5, r3, #1
 80123ea:	4099      	lsls	r1, r3
 80123ec:	4322      	orrs	r2, r4
 80123ee:	1b43      	subs	r3, r0, r5
 80123f0:	e78b      	b.n	801230a <__ieee754_sqrt+0x66>
 80123f2:	4618      	mov	r0, r3
 80123f4:	e7f0      	b.n	80123d8 <__ieee754_sqrt+0x134>
 80123f6:	0052      	lsls	r2, r2, #1
 80123f8:	3301      	adds	r3, #1
 80123fa:	e7ef      	b.n	80123dc <__ieee754_sqrt+0x138>
 80123fc:	46a0      	mov	r8, r4
 80123fe:	e7bf      	b.n	8012380 <__ieee754_sqrt+0xdc>
 8012400:	7ff00000 	.word	0x7ff00000
 8012404:	00000000 	.word	0x00000000

08012408 <__kernel_cos>:
 8012408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	ec59 8b10 	vmov	r8, r9, d0
 8012410:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012414:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012418:	ed2d 8b02 	vpush	{d8}
 801241c:	eeb0 8a41 	vmov.f32	s16, s2
 8012420:	eef0 8a61 	vmov.f32	s17, s3
 8012424:	da07      	bge.n	8012436 <__kernel_cos+0x2e>
 8012426:	ee10 0a10 	vmov	r0, s0
 801242a:	4649      	mov	r1, r9
 801242c:	f7ee fb9c 	bl	8000b68 <__aeabi_d2iz>
 8012430:	2800      	cmp	r0, #0
 8012432:	f000 8089 	beq.w	8012548 <__kernel_cos+0x140>
 8012436:	4642      	mov	r2, r8
 8012438:	464b      	mov	r3, r9
 801243a:	4640      	mov	r0, r8
 801243c:	4649      	mov	r1, r9
 801243e:	f7ee f8e3 	bl	8000608 <__aeabi_dmul>
 8012442:	2200      	movs	r2, #0
 8012444:	4b4e      	ldr	r3, [pc, #312]	; (8012580 <__kernel_cos+0x178>)
 8012446:	4604      	mov	r4, r0
 8012448:	460d      	mov	r5, r1
 801244a:	f7ee f8dd 	bl	8000608 <__aeabi_dmul>
 801244e:	a340      	add	r3, pc, #256	; (adr r3, 8012550 <__kernel_cos+0x148>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	4682      	mov	sl, r0
 8012456:	468b      	mov	fp, r1
 8012458:	4620      	mov	r0, r4
 801245a:	4629      	mov	r1, r5
 801245c:	f7ee f8d4 	bl	8000608 <__aeabi_dmul>
 8012460:	a33d      	add	r3, pc, #244	; (adr r3, 8012558 <__kernel_cos+0x150>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f7ed ff19 	bl	800029c <__adddf3>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ee f8cb 	bl	8000608 <__aeabi_dmul>
 8012472:	a33b      	add	r3, pc, #236	; (adr r3, 8012560 <__kernel_cos+0x158>)
 8012474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012478:	f7ed ff0e 	bl	8000298 <__aeabi_dsub>
 801247c:	4622      	mov	r2, r4
 801247e:	462b      	mov	r3, r5
 8012480:	f7ee f8c2 	bl	8000608 <__aeabi_dmul>
 8012484:	a338      	add	r3, pc, #224	; (adr r3, 8012568 <__kernel_cos+0x160>)
 8012486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248a:	f7ed ff07 	bl	800029c <__adddf3>
 801248e:	4622      	mov	r2, r4
 8012490:	462b      	mov	r3, r5
 8012492:	f7ee f8b9 	bl	8000608 <__aeabi_dmul>
 8012496:	a336      	add	r3, pc, #216	; (adr r3, 8012570 <__kernel_cos+0x168>)
 8012498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249c:	f7ed fefc 	bl	8000298 <__aeabi_dsub>
 80124a0:	4622      	mov	r2, r4
 80124a2:	462b      	mov	r3, r5
 80124a4:	f7ee f8b0 	bl	8000608 <__aeabi_dmul>
 80124a8:	a333      	add	r3, pc, #204	; (adr r3, 8012578 <__kernel_cos+0x170>)
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	f7ed fef5 	bl	800029c <__adddf3>
 80124b2:	4622      	mov	r2, r4
 80124b4:	462b      	mov	r3, r5
 80124b6:	f7ee f8a7 	bl	8000608 <__aeabi_dmul>
 80124ba:	4622      	mov	r2, r4
 80124bc:	462b      	mov	r3, r5
 80124be:	f7ee f8a3 	bl	8000608 <__aeabi_dmul>
 80124c2:	ec53 2b18 	vmov	r2, r3, d8
 80124c6:	4604      	mov	r4, r0
 80124c8:	460d      	mov	r5, r1
 80124ca:	4640      	mov	r0, r8
 80124cc:	4649      	mov	r1, r9
 80124ce:	f7ee f89b 	bl	8000608 <__aeabi_dmul>
 80124d2:	460b      	mov	r3, r1
 80124d4:	4602      	mov	r2, r0
 80124d6:	4629      	mov	r1, r5
 80124d8:	4620      	mov	r0, r4
 80124da:	f7ed fedd 	bl	8000298 <__aeabi_dsub>
 80124de:	4b29      	ldr	r3, [pc, #164]	; (8012584 <__kernel_cos+0x17c>)
 80124e0:	429e      	cmp	r6, r3
 80124e2:	4680      	mov	r8, r0
 80124e4:	4689      	mov	r9, r1
 80124e6:	dc11      	bgt.n	801250c <__kernel_cos+0x104>
 80124e8:	4602      	mov	r2, r0
 80124ea:	460b      	mov	r3, r1
 80124ec:	4650      	mov	r0, sl
 80124ee:	4659      	mov	r1, fp
 80124f0:	f7ed fed2 	bl	8000298 <__aeabi_dsub>
 80124f4:	460b      	mov	r3, r1
 80124f6:	4924      	ldr	r1, [pc, #144]	; (8012588 <__kernel_cos+0x180>)
 80124f8:	4602      	mov	r2, r0
 80124fa:	2000      	movs	r0, #0
 80124fc:	f7ed fecc 	bl	8000298 <__aeabi_dsub>
 8012500:	ecbd 8b02 	vpop	{d8}
 8012504:	ec41 0b10 	vmov	d0, r0, r1
 8012508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250c:	4b1f      	ldr	r3, [pc, #124]	; (801258c <__kernel_cos+0x184>)
 801250e:	491e      	ldr	r1, [pc, #120]	; (8012588 <__kernel_cos+0x180>)
 8012510:	429e      	cmp	r6, r3
 8012512:	bfcc      	ite	gt
 8012514:	4d1e      	ldrgt	r5, [pc, #120]	; (8012590 <__kernel_cos+0x188>)
 8012516:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801251a:	2400      	movs	r4, #0
 801251c:	4622      	mov	r2, r4
 801251e:	462b      	mov	r3, r5
 8012520:	2000      	movs	r0, #0
 8012522:	f7ed feb9 	bl	8000298 <__aeabi_dsub>
 8012526:	4622      	mov	r2, r4
 8012528:	4606      	mov	r6, r0
 801252a:	460f      	mov	r7, r1
 801252c:	462b      	mov	r3, r5
 801252e:	4650      	mov	r0, sl
 8012530:	4659      	mov	r1, fp
 8012532:	f7ed feb1 	bl	8000298 <__aeabi_dsub>
 8012536:	4642      	mov	r2, r8
 8012538:	464b      	mov	r3, r9
 801253a:	f7ed fead 	bl	8000298 <__aeabi_dsub>
 801253e:	4602      	mov	r2, r0
 8012540:	460b      	mov	r3, r1
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	e7d9      	b.n	80124fc <__kernel_cos+0xf4>
 8012548:	2000      	movs	r0, #0
 801254a:	490f      	ldr	r1, [pc, #60]	; (8012588 <__kernel_cos+0x180>)
 801254c:	e7d8      	b.n	8012500 <__kernel_cos+0xf8>
 801254e:	bf00      	nop
 8012550:	be8838d4 	.word	0xbe8838d4
 8012554:	bda8fae9 	.word	0xbda8fae9
 8012558:	bdb4b1c4 	.word	0xbdb4b1c4
 801255c:	3e21ee9e 	.word	0x3e21ee9e
 8012560:	809c52ad 	.word	0x809c52ad
 8012564:	3e927e4f 	.word	0x3e927e4f
 8012568:	19cb1590 	.word	0x19cb1590
 801256c:	3efa01a0 	.word	0x3efa01a0
 8012570:	16c15177 	.word	0x16c15177
 8012574:	3f56c16c 	.word	0x3f56c16c
 8012578:	5555554c 	.word	0x5555554c
 801257c:	3fa55555 	.word	0x3fa55555
 8012580:	3fe00000 	.word	0x3fe00000
 8012584:	3fd33332 	.word	0x3fd33332
 8012588:	3ff00000 	.word	0x3ff00000
 801258c:	3fe90000 	.word	0x3fe90000
 8012590:	3fd20000 	.word	0x3fd20000
 8012594:	00000000 	.word	0x00000000

08012598 <__kernel_rem_pio2>:
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	ed2d 8b02 	vpush	{d8}
 80125a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80125a4:	1ed4      	subs	r4, r2, #3
 80125a6:	9308      	str	r3, [sp, #32]
 80125a8:	9101      	str	r1, [sp, #4]
 80125aa:	4bc5      	ldr	r3, [pc, #788]	; (80128c0 <__kernel_rem_pio2+0x328>)
 80125ac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80125ae:	9009      	str	r0, [sp, #36]	; 0x24
 80125b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125b4:	9304      	str	r3, [sp, #16]
 80125b6:	9b08      	ldr	r3, [sp, #32]
 80125b8:	3b01      	subs	r3, #1
 80125ba:	9307      	str	r3, [sp, #28]
 80125bc:	2318      	movs	r3, #24
 80125be:	fb94 f4f3 	sdiv	r4, r4, r3
 80125c2:	f06f 0317 	mvn.w	r3, #23
 80125c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80125ca:	fb04 3303 	mla	r3, r4, r3, r3
 80125ce:	eb03 0a02 	add.w	sl, r3, r2
 80125d2:	9b04      	ldr	r3, [sp, #16]
 80125d4:	9a07      	ldr	r2, [sp, #28]
 80125d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80128b0 <__kernel_rem_pio2+0x318>
 80125da:	eb03 0802 	add.w	r8, r3, r2
 80125de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125e0:	1aa7      	subs	r7, r4, r2
 80125e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80125e6:	ae22      	add	r6, sp, #136	; 0x88
 80125e8:	2500      	movs	r5, #0
 80125ea:	4545      	cmp	r5, r8
 80125ec:	dd13      	ble.n	8012616 <__kernel_rem_pio2+0x7e>
 80125ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80128b0 <__kernel_rem_pio2+0x318>
 80125f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80125f6:	2600      	movs	r6, #0
 80125f8:	9b04      	ldr	r3, [sp, #16]
 80125fa:	429e      	cmp	r6, r3
 80125fc:	dc32      	bgt.n	8012664 <__kernel_rem_pio2+0xcc>
 80125fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012600:	9302      	str	r3, [sp, #8]
 8012602:	9b08      	ldr	r3, [sp, #32]
 8012604:	199d      	adds	r5, r3, r6
 8012606:	ab22      	add	r3, sp, #136	; 0x88
 8012608:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801260c:	9306      	str	r3, [sp, #24]
 801260e:	ec59 8b18 	vmov	r8, r9, d8
 8012612:	2700      	movs	r7, #0
 8012614:	e01f      	b.n	8012656 <__kernel_rem_pio2+0xbe>
 8012616:	42ef      	cmn	r7, r5
 8012618:	d407      	bmi.n	801262a <__kernel_rem_pio2+0x92>
 801261a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801261e:	f7ed ff89 	bl	8000534 <__aeabi_i2d>
 8012622:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012626:	3501      	adds	r5, #1
 8012628:	e7df      	b.n	80125ea <__kernel_rem_pio2+0x52>
 801262a:	ec51 0b18 	vmov	r0, r1, d8
 801262e:	e7f8      	b.n	8012622 <__kernel_rem_pio2+0x8a>
 8012630:	9906      	ldr	r1, [sp, #24]
 8012632:	9d02      	ldr	r5, [sp, #8]
 8012634:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012638:	9106      	str	r1, [sp, #24]
 801263a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801263e:	9502      	str	r5, [sp, #8]
 8012640:	f7ed ffe2 	bl	8000608 <__aeabi_dmul>
 8012644:	4602      	mov	r2, r0
 8012646:	460b      	mov	r3, r1
 8012648:	4640      	mov	r0, r8
 801264a:	4649      	mov	r1, r9
 801264c:	f7ed fe26 	bl	800029c <__adddf3>
 8012650:	3701      	adds	r7, #1
 8012652:	4680      	mov	r8, r0
 8012654:	4689      	mov	r9, r1
 8012656:	9b07      	ldr	r3, [sp, #28]
 8012658:	429f      	cmp	r7, r3
 801265a:	dde9      	ble.n	8012630 <__kernel_rem_pio2+0x98>
 801265c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012660:	3601      	adds	r6, #1
 8012662:	e7c9      	b.n	80125f8 <__kernel_rem_pio2+0x60>
 8012664:	9b04      	ldr	r3, [sp, #16]
 8012666:	aa0e      	add	r2, sp, #56	; 0x38
 8012668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801266c:	930c      	str	r3, [sp, #48]	; 0x30
 801266e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012670:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012674:	9c04      	ldr	r4, [sp, #16]
 8012676:	930b      	str	r3, [sp, #44]	; 0x2c
 8012678:	ab9a      	add	r3, sp, #616	; 0x268
 801267a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801267e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012682:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012686:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801268a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801268e:	ab9a      	add	r3, sp, #616	; 0x268
 8012690:	445b      	add	r3, fp
 8012692:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012696:	2500      	movs	r5, #0
 8012698:	1b63      	subs	r3, r4, r5
 801269a:	2b00      	cmp	r3, #0
 801269c:	dc78      	bgt.n	8012790 <__kernel_rem_pio2+0x1f8>
 801269e:	4650      	mov	r0, sl
 80126a0:	ec49 8b10 	vmov	d0, r8, r9
 80126a4:	f000 fda8 	bl	80131f8 <scalbn>
 80126a8:	ec57 6b10 	vmov	r6, r7, d0
 80126ac:	2200      	movs	r2, #0
 80126ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126b2:	ee10 0a10 	vmov	r0, s0
 80126b6:	4639      	mov	r1, r7
 80126b8:	f7ed ffa6 	bl	8000608 <__aeabi_dmul>
 80126bc:	ec41 0b10 	vmov	d0, r0, r1
 80126c0:	f000 fd12 	bl	80130e8 <floor>
 80126c4:	2200      	movs	r2, #0
 80126c6:	ec51 0b10 	vmov	r0, r1, d0
 80126ca:	4b7e      	ldr	r3, [pc, #504]	; (80128c4 <__kernel_rem_pio2+0x32c>)
 80126cc:	f7ed ff9c 	bl	8000608 <__aeabi_dmul>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	4630      	mov	r0, r6
 80126d6:	4639      	mov	r1, r7
 80126d8:	f7ed fdde 	bl	8000298 <__aeabi_dsub>
 80126dc:	460f      	mov	r7, r1
 80126de:	4606      	mov	r6, r0
 80126e0:	f7ee fa42 	bl	8000b68 <__aeabi_d2iz>
 80126e4:	9006      	str	r0, [sp, #24]
 80126e6:	f7ed ff25 	bl	8000534 <__aeabi_i2d>
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	4630      	mov	r0, r6
 80126f0:	4639      	mov	r1, r7
 80126f2:	f7ed fdd1 	bl	8000298 <__aeabi_dsub>
 80126f6:	f1ba 0f00 	cmp.w	sl, #0
 80126fa:	4606      	mov	r6, r0
 80126fc:	460f      	mov	r7, r1
 80126fe:	dd6c      	ble.n	80127da <__kernel_rem_pio2+0x242>
 8012700:	1e62      	subs	r2, r4, #1
 8012702:	ab0e      	add	r3, sp, #56	; 0x38
 8012704:	f1ca 0118 	rsb	r1, sl, #24
 8012708:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801270c:	9d06      	ldr	r5, [sp, #24]
 801270e:	fa40 f301 	asr.w	r3, r0, r1
 8012712:	441d      	add	r5, r3
 8012714:	408b      	lsls	r3, r1
 8012716:	1ac0      	subs	r0, r0, r3
 8012718:	ab0e      	add	r3, sp, #56	; 0x38
 801271a:	9506      	str	r5, [sp, #24]
 801271c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012720:	f1ca 0317 	rsb	r3, sl, #23
 8012724:	fa40 f303 	asr.w	r3, r0, r3
 8012728:	9302      	str	r3, [sp, #8]
 801272a:	9b02      	ldr	r3, [sp, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	dd62      	ble.n	80127f6 <__kernel_rem_pio2+0x25e>
 8012730:	9b06      	ldr	r3, [sp, #24]
 8012732:	2200      	movs	r2, #0
 8012734:	3301      	adds	r3, #1
 8012736:	9306      	str	r3, [sp, #24]
 8012738:	4615      	mov	r5, r2
 801273a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801273e:	4294      	cmp	r4, r2
 8012740:	f300 8095 	bgt.w	801286e <__kernel_rem_pio2+0x2d6>
 8012744:	f1ba 0f00 	cmp.w	sl, #0
 8012748:	dd07      	ble.n	801275a <__kernel_rem_pio2+0x1c2>
 801274a:	f1ba 0f01 	cmp.w	sl, #1
 801274e:	f000 80a2 	beq.w	8012896 <__kernel_rem_pio2+0x2fe>
 8012752:	f1ba 0f02 	cmp.w	sl, #2
 8012756:	f000 80c1 	beq.w	80128dc <__kernel_rem_pio2+0x344>
 801275a:	9b02      	ldr	r3, [sp, #8]
 801275c:	2b02      	cmp	r3, #2
 801275e:	d14a      	bne.n	80127f6 <__kernel_rem_pio2+0x25e>
 8012760:	4632      	mov	r2, r6
 8012762:	463b      	mov	r3, r7
 8012764:	2000      	movs	r0, #0
 8012766:	4958      	ldr	r1, [pc, #352]	; (80128c8 <__kernel_rem_pio2+0x330>)
 8012768:	f7ed fd96 	bl	8000298 <__aeabi_dsub>
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	2d00      	cmp	r5, #0
 8012772:	d040      	beq.n	80127f6 <__kernel_rem_pio2+0x25e>
 8012774:	4650      	mov	r0, sl
 8012776:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80128b8 <__kernel_rem_pio2+0x320>
 801277a:	f000 fd3d 	bl	80131f8 <scalbn>
 801277e:	4630      	mov	r0, r6
 8012780:	4639      	mov	r1, r7
 8012782:	ec53 2b10 	vmov	r2, r3, d0
 8012786:	f7ed fd87 	bl	8000298 <__aeabi_dsub>
 801278a:	4606      	mov	r6, r0
 801278c:	460f      	mov	r7, r1
 801278e:	e032      	b.n	80127f6 <__kernel_rem_pio2+0x25e>
 8012790:	2200      	movs	r2, #0
 8012792:	4b4e      	ldr	r3, [pc, #312]	; (80128cc <__kernel_rem_pio2+0x334>)
 8012794:	4640      	mov	r0, r8
 8012796:	4649      	mov	r1, r9
 8012798:	f7ed ff36 	bl	8000608 <__aeabi_dmul>
 801279c:	f7ee f9e4 	bl	8000b68 <__aeabi_d2iz>
 80127a0:	f7ed fec8 	bl	8000534 <__aeabi_i2d>
 80127a4:	2200      	movs	r2, #0
 80127a6:	4b4a      	ldr	r3, [pc, #296]	; (80128d0 <__kernel_rem_pio2+0x338>)
 80127a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127ac:	f7ed ff2c 	bl	8000608 <__aeabi_dmul>
 80127b0:	4602      	mov	r2, r0
 80127b2:	460b      	mov	r3, r1
 80127b4:	4640      	mov	r0, r8
 80127b6:	4649      	mov	r1, r9
 80127b8:	f7ed fd6e 	bl	8000298 <__aeabi_dsub>
 80127bc:	f7ee f9d4 	bl	8000b68 <__aeabi_d2iz>
 80127c0:	ab0e      	add	r3, sp, #56	; 0x38
 80127c2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80127c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80127ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ce:	f7ed fd65 	bl	800029c <__adddf3>
 80127d2:	3501      	adds	r5, #1
 80127d4:	4680      	mov	r8, r0
 80127d6:	4689      	mov	r9, r1
 80127d8:	e75e      	b.n	8012698 <__kernel_rem_pio2+0x100>
 80127da:	d105      	bne.n	80127e8 <__kernel_rem_pio2+0x250>
 80127dc:	1e63      	subs	r3, r4, #1
 80127de:	aa0e      	add	r2, sp, #56	; 0x38
 80127e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127e4:	15c3      	asrs	r3, r0, #23
 80127e6:	e79f      	b.n	8012728 <__kernel_rem_pio2+0x190>
 80127e8:	2200      	movs	r2, #0
 80127ea:	4b3a      	ldr	r3, [pc, #232]	; (80128d4 <__kernel_rem_pio2+0x33c>)
 80127ec:	f7ee f992 	bl	8000b14 <__aeabi_dcmpge>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d139      	bne.n	8012868 <__kernel_rem_pio2+0x2d0>
 80127f4:	9002      	str	r0, [sp, #8]
 80127f6:	2200      	movs	r2, #0
 80127f8:	2300      	movs	r3, #0
 80127fa:	4630      	mov	r0, r6
 80127fc:	4639      	mov	r1, r7
 80127fe:	f7ee f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8012802:	2800      	cmp	r0, #0
 8012804:	f000 80c7 	beq.w	8012996 <__kernel_rem_pio2+0x3fe>
 8012808:	1e65      	subs	r5, r4, #1
 801280a:	462b      	mov	r3, r5
 801280c:	2200      	movs	r2, #0
 801280e:	9904      	ldr	r1, [sp, #16]
 8012810:	428b      	cmp	r3, r1
 8012812:	da6a      	bge.n	80128ea <__kernel_rem_pio2+0x352>
 8012814:	2a00      	cmp	r2, #0
 8012816:	f000 8088 	beq.w	801292a <__kernel_rem_pio2+0x392>
 801281a:	ab0e      	add	r3, sp, #56	; 0x38
 801281c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012820:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012824:	2b00      	cmp	r3, #0
 8012826:	f000 80b4 	beq.w	8012992 <__kernel_rem_pio2+0x3fa>
 801282a:	4650      	mov	r0, sl
 801282c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80128b8 <__kernel_rem_pio2+0x320>
 8012830:	f000 fce2 	bl	80131f8 <scalbn>
 8012834:	00ec      	lsls	r4, r5, #3
 8012836:	ab72      	add	r3, sp, #456	; 0x1c8
 8012838:	191e      	adds	r6, r3, r4
 801283a:	ec59 8b10 	vmov	r8, r9, d0
 801283e:	f106 0a08 	add.w	sl, r6, #8
 8012842:	462f      	mov	r7, r5
 8012844:	2f00      	cmp	r7, #0
 8012846:	f280 80df 	bge.w	8012a08 <__kernel_rem_pio2+0x470>
 801284a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80128b0 <__kernel_rem_pio2+0x318>
 801284e:	f04f 0a00 	mov.w	sl, #0
 8012852:	eba5 030a 	sub.w	r3, r5, sl
 8012856:	2b00      	cmp	r3, #0
 8012858:	f2c0 810a 	blt.w	8012a70 <__kernel_rem_pio2+0x4d8>
 801285c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80128d8 <__kernel_rem_pio2+0x340>
 8012860:	ec59 8b18 	vmov	r8, r9, d8
 8012864:	2700      	movs	r7, #0
 8012866:	e0f5      	b.n	8012a54 <__kernel_rem_pio2+0x4bc>
 8012868:	2302      	movs	r3, #2
 801286a:	9302      	str	r3, [sp, #8]
 801286c:	e760      	b.n	8012730 <__kernel_rem_pio2+0x198>
 801286e:	ab0e      	add	r3, sp, #56	; 0x38
 8012870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012874:	b94d      	cbnz	r5, 801288a <__kernel_rem_pio2+0x2f2>
 8012876:	b12b      	cbz	r3, 8012884 <__kernel_rem_pio2+0x2ec>
 8012878:	a80e      	add	r0, sp, #56	; 0x38
 801287a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801287e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012882:	2301      	movs	r3, #1
 8012884:	3201      	adds	r2, #1
 8012886:	461d      	mov	r5, r3
 8012888:	e759      	b.n	801273e <__kernel_rem_pio2+0x1a6>
 801288a:	a80e      	add	r0, sp, #56	; 0x38
 801288c:	1acb      	subs	r3, r1, r3
 801288e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012892:	462b      	mov	r3, r5
 8012894:	e7f6      	b.n	8012884 <__kernel_rem_pio2+0x2ec>
 8012896:	1e62      	subs	r2, r4, #1
 8012898:	ab0e      	add	r3, sp, #56	; 0x38
 801289a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801289e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128a2:	a90e      	add	r1, sp, #56	; 0x38
 80128a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128a8:	e757      	b.n	801275a <__kernel_rem_pio2+0x1c2>
 80128aa:	bf00      	nop
 80128ac:	f3af 8000 	nop.w
	...
 80128bc:	3ff00000 	.word	0x3ff00000
 80128c0:	080138b8 	.word	0x080138b8
 80128c4:	40200000 	.word	0x40200000
 80128c8:	3ff00000 	.word	0x3ff00000
 80128cc:	3e700000 	.word	0x3e700000
 80128d0:	41700000 	.word	0x41700000
 80128d4:	3fe00000 	.word	0x3fe00000
 80128d8:	08013878 	.word	0x08013878
 80128dc:	1e62      	subs	r2, r4, #1
 80128de:	ab0e      	add	r3, sp, #56	; 0x38
 80128e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80128e8:	e7db      	b.n	80128a2 <__kernel_rem_pio2+0x30a>
 80128ea:	a90e      	add	r1, sp, #56	; 0x38
 80128ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80128f0:	3b01      	subs	r3, #1
 80128f2:	430a      	orrs	r2, r1
 80128f4:	e78b      	b.n	801280e <__kernel_rem_pio2+0x276>
 80128f6:	3301      	adds	r3, #1
 80128f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d0fa      	beq.n	80128f6 <__kernel_rem_pio2+0x35e>
 8012900:	9a08      	ldr	r2, [sp, #32]
 8012902:	4422      	add	r2, r4
 8012904:	00d2      	lsls	r2, r2, #3
 8012906:	a922      	add	r1, sp, #136	; 0x88
 8012908:	18e3      	adds	r3, r4, r3
 801290a:	9206      	str	r2, [sp, #24]
 801290c:	440a      	add	r2, r1
 801290e:	9302      	str	r3, [sp, #8]
 8012910:	f10b 0108 	add.w	r1, fp, #8
 8012914:	f102 0308 	add.w	r3, r2, #8
 8012918:	1c66      	adds	r6, r4, #1
 801291a:	910a      	str	r1, [sp, #40]	; 0x28
 801291c:	2500      	movs	r5, #0
 801291e:	930d      	str	r3, [sp, #52]	; 0x34
 8012920:	9b02      	ldr	r3, [sp, #8]
 8012922:	42b3      	cmp	r3, r6
 8012924:	da04      	bge.n	8012930 <__kernel_rem_pio2+0x398>
 8012926:	461c      	mov	r4, r3
 8012928:	e6a6      	b.n	8012678 <__kernel_rem_pio2+0xe0>
 801292a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801292c:	2301      	movs	r3, #1
 801292e:	e7e3      	b.n	80128f8 <__kernel_rem_pio2+0x360>
 8012930:	9b06      	ldr	r3, [sp, #24]
 8012932:	18ef      	adds	r7, r5, r3
 8012934:	ab22      	add	r3, sp, #136	; 0x88
 8012936:	441f      	add	r7, r3
 8012938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801293a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801293e:	f7ed fdf9 	bl	8000534 <__aeabi_i2d>
 8012942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012944:	461c      	mov	r4, r3
 8012946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012948:	e9c7 0100 	strd	r0, r1, [r7]
 801294c:	eb03 0b05 	add.w	fp, r3, r5
 8012950:	2700      	movs	r7, #0
 8012952:	f04f 0800 	mov.w	r8, #0
 8012956:	f04f 0900 	mov.w	r9, #0
 801295a:	9b07      	ldr	r3, [sp, #28]
 801295c:	429f      	cmp	r7, r3
 801295e:	dd08      	ble.n	8012972 <__kernel_rem_pio2+0x3da>
 8012960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012962:	aa72      	add	r2, sp, #456	; 0x1c8
 8012964:	18eb      	adds	r3, r5, r3
 8012966:	4413      	add	r3, r2
 8012968:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801296c:	3601      	adds	r6, #1
 801296e:	3508      	adds	r5, #8
 8012970:	e7d6      	b.n	8012920 <__kernel_rem_pio2+0x388>
 8012972:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012976:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801297a:	f7ed fe45 	bl	8000608 <__aeabi_dmul>
 801297e:	4602      	mov	r2, r0
 8012980:	460b      	mov	r3, r1
 8012982:	4640      	mov	r0, r8
 8012984:	4649      	mov	r1, r9
 8012986:	f7ed fc89 	bl	800029c <__adddf3>
 801298a:	3701      	adds	r7, #1
 801298c:	4680      	mov	r8, r0
 801298e:	4689      	mov	r9, r1
 8012990:	e7e3      	b.n	801295a <__kernel_rem_pio2+0x3c2>
 8012992:	3d01      	subs	r5, #1
 8012994:	e741      	b.n	801281a <__kernel_rem_pio2+0x282>
 8012996:	f1ca 0000 	rsb	r0, sl, #0
 801299a:	ec47 6b10 	vmov	d0, r6, r7
 801299e:	f000 fc2b 	bl	80131f8 <scalbn>
 80129a2:	ec57 6b10 	vmov	r6, r7, d0
 80129a6:	2200      	movs	r2, #0
 80129a8:	4b99      	ldr	r3, [pc, #612]	; (8012c10 <__kernel_rem_pio2+0x678>)
 80129aa:	ee10 0a10 	vmov	r0, s0
 80129ae:	4639      	mov	r1, r7
 80129b0:	f7ee f8b0 	bl	8000b14 <__aeabi_dcmpge>
 80129b4:	b1f8      	cbz	r0, 80129f6 <__kernel_rem_pio2+0x45e>
 80129b6:	2200      	movs	r2, #0
 80129b8:	4b96      	ldr	r3, [pc, #600]	; (8012c14 <__kernel_rem_pio2+0x67c>)
 80129ba:	4630      	mov	r0, r6
 80129bc:	4639      	mov	r1, r7
 80129be:	f7ed fe23 	bl	8000608 <__aeabi_dmul>
 80129c2:	f7ee f8d1 	bl	8000b68 <__aeabi_d2iz>
 80129c6:	4680      	mov	r8, r0
 80129c8:	f7ed fdb4 	bl	8000534 <__aeabi_i2d>
 80129cc:	2200      	movs	r2, #0
 80129ce:	4b90      	ldr	r3, [pc, #576]	; (8012c10 <__kernel_rem_pio2+0x678>)
 80129d0:	f7ed fe1a 	bl	8000608 <__aeabi_dmul>
 80129d4:	460b      	mov	r3, r1
 80129d6:	4602      	mov	r2, r0
 80129d8:	4639      	mov	r1, r7
 80129da:	4630      	mov	r0, r6
 80129dc:	f7ed fc5c 	bl	8000298 <__aeabi_dsub>
 80129e0:	f7ee f8c2 	bl	8000b68 <__aeabi_d2iz>
 80129e4:	1c65      	adds	r5, r4, #1
 80129e6:	ab0e      	add	r3, sp, #56	; 0x38
 80129e8:	f10a 0a18 	add.w	sl, sl, #24
 80129ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80129f4:	e719      	b.n	801282a <__kernel_rem_pio2+0x292>
 80129f6:	4630      	mov	r0, r6
 80129f8:	4639      	mov	r1, r7
 80129fa:	f7ee f8b5 	bl	8000b68 <__aeabi_d2iz>
 80129fe:	ab0e      	add	r3, sp, #56	; 0x38
 8012a00:	4625      	mov	r5, r4
 8012a02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a06:	e710      	b.n	801282a <__kernel_rem_pio2+0x292>
 8012a08:	ab0e      	add	r3, sp, #56	; 0x38
 8012a0a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012a0e:	f7ed fd91 	bl	8000534 <__aeabi_i2d>
 8012a12:	4642      	mov	r2, r8
 8012a14:	464b      	mov	r3, r9
 8012a16:	f7ed fdf7 	bl	8000608 <__aeabi_dmul>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012a20:	4b7c      	ldr	r3, [pc, #496]	; (8012c14 <__kernel_rem_pio2+0x67c>)
 8012a22:	4640      	mov	r0, r8
 8012a24:	4649      	mov	r1, r9
 8012a26:	f7ed fdef 	bl	8000608 <__aeabi_dmul>
 8012a2a:	3f01      	subs	r7, #1
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	4689      	mov	r9, r1
 8012a30:	e708      	b.n	8012844 <__kernel_rem_pio2+0x2ac>
 8012a32:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012a3e:	f7ed fde3 	bl	8000608 <__aeabi_dmul>
 8012a42:	4602      	mov	r2, r0
 8012a44:	460b      	mov	r3, r1
 8012a46:	4640      	mov	r0, r8
 8012a48:	4649      	mov	r1, r9
 8012a4a:	f7ed fc27 	bl	800029c <__adddf3>
 8012a4e:	3701      	adds	r7, #1
 8012a50:	4680      	mov	r8, r0
 8012a52:	4689      	mov	r9, r1
 8012a54:	9b04      	ldr	r3, [sp, #16]
 8012a56:	429f      	cmp	r7, r3
 8012a58:	dc01      	bgt.n	8012a5e <__kernel_rem_pio2+0x4c6>
 8012a5a:	45ba      	cmp	sl, r7
 8012a5c:	dae9      	bge.n	8012a32 <__kernel_rem_pio2+0x49a>
 8012a5e:	ab4a      	add	r3, sp, #296	; 0x128
 8012a60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a64:	e9c3 8900 	strd	r8, r9, [r3]
 8012a68:	f10a 0a01 	add.w	sl, sl, #1
 8012a6c:	3e08      	subs	r6, #8
 8012a6e:	e6f0      	b.n	8012852 <__kernel_rem_pio2+0x2ba>
 8012a70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a72:	2b03      	cmp	r3, #3
 8012a74:	d85b      	bhi.n	8012b2e <__kernel_rem_pio2+0x596>
 8012a76:	e8df f003 	tbb	[pc, r3]
 8012a7a:	264a      	.short	0x264a
 8012a7c:	0226      	.short	0x0226
 8012a7e:	ab9a      	add	r3, sp, #616	; 0x268
 8012a80:	441c      	add	r4, r3
 8012a82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012a86:	46a2      	mov	sl, r4
 8012a88:	46ab      	mov	fp, r5
 8012a8a:	f1bb 0f00 	cmp.w	fp, #0
 8012a8e:	dc6c      	bgt.n	8012b6a <__kernel_rem_pio2+0x5d2>
 8012a90:	46a2      	mov	sl, r4
 8012a92:	46ab      	mov	fp, r5
 8012a94:	f1bb 0f01 	cmp.w	fp, #1
 8012a98:	f300 8086 	bgt.w	8012ba8 <__kernel_rem_pio2+0x610>
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	2d01      	cmp	r5, #1
 8012aa2:	f300 80a0 	bgt.w	8012be6 <__kernel_rem_pio2+0x64e>
 8012aa6:	9b02      	ldr	r3, [sp, #8]
 8012aa8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012aac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f040 809e 	bne.w	8012bf2 <__kernel_rem_pio2+0x65a>
 8012ab6:	9b01      	ldr	r3, [sp, #4]
 8012ab8:	e9c3 7800 	strd	r7, r8, [r3]
 8012abc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012ac0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012ac4:	e033      	b.n	8012b2e <__kernel_rem_pio2+0x596>
 8012ac6:	3408      	adds	r4, #8
 8012ac8:	ab4a      	add	r3, sp, #296	; 0x128
 8012aca:	441c      	add	r4, r3
 8012acc:	462e      	mov	r6, r5
 8012ace:	2000      	movs	r0, #0
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	da3a      	bge.n	8012b4c <__kernel_rem_pio2+0x5b4>
 8012ad6:	9b02      	ldr	r3, [sp, #8]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d03d      	beq.n	8012b58 <__kernel_rem_pio2+0x5c0>
 8012adc:	4602      	mov	r2, r0
 8012ade:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ae2:	9c01      	ldr	r4, [sp, #4]
 8012ae4:	e9c4 2300 	strd	r2, r3, [r4]
 8012ae8:	4602      	mov	r2, r0
 8012aea:	460b      	mov	r3, r1
 8012aec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012af0:	f7ed fbd2 	bl	8000298 <__aeabi_dsub>
 8012af4:	ae4c      	add	r6, sp, #304	; 0x130
 8012af6:	2401      	movs	r4, #1
 8012af8:	42a5      	cmp	r5, r4
 8012afa:	da30      	bge.n	8012b5e <__kernel_rem_pio2+0x5c6>
 8012afc:	9b02      	ldr	r3, [sp, #8]
 8012afe:	b113      	cbz	r3, 8012b06 <__kernel_rem_pio2+0x56e>
 8012b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b04:	4619      	mov	r1, r3
 8012b06:	9b01      	ldr	r3, [sp, #4]
 8012b08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b0c:	e00f      	b.n	8012b2e <__kernel_rem_pio2+0x596>
 8012b0e:	ab9a      	add	r3, sp, #616	; 0x268
 8012b10:	441c      	add	r4, r3
 8012b12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b16:	2000      	movs	r0, #0
 8012b18:	2100      	movs	r1, #0
 8012b1a:	2d00      	cmp	r5, #0
 8012b1c:	da10      	bge.n	8012b40 <__kernel_rem_pio2+0x5a8>
 8012b1e:	9b02      	ldr	r3, [sp, #8]
 8012b20:	b113      	cbz	r3, 8012b28 <__kernel_rem_pio2+0x590>
 8012b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b26:	4619      	mov	r1, r3
 8012b28:	9b01      	ldr	r3, [sp, #4]
 8012b2a:	e9c3 0100 	strd	r0, r1, [r3]
 8012b2e:	9b06      	ldr	r3, [sp, #24]
 8012b30:	f003 0007 	and.w	r0, r3, #7
 8012b34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012b38:	ecbd 8b02 	vpop	{d8}
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b44:	f7ed fbaa 	bl	800029c <__adddf3>
 8012b48:	3d01      	subs	r5, #1
 8012b4a:	e7e6      	b.n	8012b1a <__kernel_rem_pio2+0x582>
 8012b4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b50:	f7ed fba4 	bl	800029c <__adddf3>
 8012b54:	3e01      	subs	r6, #1
 8012b56:	e7bc      	b.n	8012ad2 <__kernel_rem_pio2+0x53a>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	e7c1      	b.n	8012ae2 <__kernel_rem_pio2+0x54a>
 8012b5e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b62:	f7ed fb9b 	bl	800029c <__adddf3>
 8012b66:	3401      	adds	r4, #1
 8012b68:	e7c6      	b.n	8012af8 <__kernel_rem_pio2+0x560>
 8012b6a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012b6e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012b72:	4640      	mov	r0, r8
 8012b74:	ec53 2b17 	vmov	r2, r3, d7
 8012b78:	4649      	mov	r1, r9
 8012b7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b7e:	f7ed fb8d 	bl	800029c <__adddf3>
 8012b82:	4602      	mov	r2, r0
 8012b84:	460b      	mov	r3, r1
 8012b86:	4606      	mov	r6, r0
 8012b88:	460f      	mov	r7, r1
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed fb83 	bl	8000298 <__aeabi_dsub>
 8012b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b96:	f7ed fb81 	bl	800029c <__adddf3>
 8012b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b9e:	e9ca 0100 	strd	r0, r1, [sl]
 8012ba2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012ba6:	e770      	b.n	8012a8a <__kernel_rem_pio2+0x4f2>
 8012ba8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012bac:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	ec53 2b17 	vmov	r2, r3, d7
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012bbc:	f7ed fb6e 	bl	800029c <__adddf3>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	4680      	mov	r8, r0
 8012bc6:	4689      	mov	r9, r1
 8012bc8:	4630      	mov	r0, r6
 8012bca:	4639      	mov	r1, r7
 8012bcc:	f7ed fb64 	bl	8000298 <__aeabi_dsub>
 8012bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bd4:	f7ed fb62 	bl	800029c <__adddf3>
 8012bd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012bdc:	e9ca 0100 	strd	r0, r1, [sl]
 8012be0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012be4:	e756      	b.n	8012a94 <__kernel_rem_pio2+0x4fc>
 8012be6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bea:	f7ed fb57 	bl	800029c <__adddf3>
 8012bee:	3d01      	subs	r5, #1
 8012bf0:	e756      	b.n	8012aa0 <__kernel_rem_pio2+0x508>
 8012bf2:	9b01      	ldr	r3, [sp, #4]
 8012bf4:	9a01      	ldr	r2, [sp, #4]
 8012bf6:	601f      	str	r7, [r3, #0]
 8012bf8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012bfc:	605c      	str	r4, [r3, #4]
 8012bfe:	609d      	str	r5, [r3, #8]
 8012c00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c04:	60d3      	str	r3, [r2, #12]
 8012c06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c0a:	6110      	str	r0, [r2, #16]
 8012c0c:	6153      	str	r3, [r2, #20]
 8012c0e:	e78e      	b.n	8012b2e <__kernel_rem_pio2+0x596>
 8012c10:	41700000 	.word	0x41700000
 8012c14:	3e700000 	.word	0x3e700000

08012c18 <__kernel_sin>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	ec55 4b10 	vmov	r4, r5, d0
 8012c20:	b085      	sub	sp, #20
 8012c22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c2a:	ed8d 1b00 	vstr	d1, [sp]
 8012c2e:	9002      	str	r0, [sp, #8]
 8012c30:	da06      	bge.n	8012c40 <__kernel_sin+0x28>
 8012c32:	ee10 0a10 	vmov	r0, s0
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7ed ff96 	bl	8000b68 <__aeabi_d2iz>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	d051      	beq.n	8012ce4 <__kernel_sin+0xcc>
 8012c40:	4622      	mov	r2, r4
 8012c42:	462b      	mov	r3, r5
 8012c44:	4620      	mov	r0, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed fcde 	bl	8000608 <__aeabi_dmul>
 8012c4c:	4682      	mov	sl, r0
 8012c4e:	468b      	mov	fp, r1
 8012c50:	4602      	mov	r2, r0
 8012c52:	460b      	mov	r3, r1
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fcd6 	bl	8000608 <__aeabi_dmul>
 8012c5c:	a341      	add	r3, pc, #260	; (adr r3, 8012d64 <__kernel_sin+0x14c>)
 8012c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c62:	4680      	mov	r8, r0
 8012c64:	4689      	mov	r9, r1
 8012c66:	4650      	mov	r0, sl
 8012c68:	4659      	mov	r1, fp
 8012c6a:	f7ed fccd 	bl	8000608 <__aeabi_dmul>
 8012c6e:	a33f      	add	r3, pc, #252	; (adr r3, 8012d6c <__kernel_sin+0x154>)
 8012c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c74:	f7ed fb10 	bl	8000298 <__aeabi_dsub>
 8012c78:	4652      	mov	r2, sl
 8012c7a:	465b      	mov	r3, fp
 8012c7c:	f7ed fcc4 	bl	8000608 <__aeabi_dmul>
 8012c80:	a33c      	add	r3, pc, #240	; (adr r3, 8012d74 <__kernel_sin+0x15c>)
 8012c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c86:	f7ed fb09 	bl	800029c <__adddf3>
 8012c8a:	4652      	mov	r2, sl
 8012c8c:	465b      	mov	r3, fp
 8012c8e:	f7ed fcbb 	bl	8000608 <__aeabi_dmul>
 8012c92:	a33a      	add	r3, pc, #232	; (adr r3, 8012d7c <__kernel_sin+0x164>)
 8012c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c98:	f7ed fafe 	bl	8000298 <__aeabi_dsub>
 8012c9c:	4652      	mov	r2, sl
 8012c9e:	465b      	mov	r3, fp
 8012ca0:	f7ed fcb2 	bl	8000608 <__aeabi_dmul>
 8012ca4:	a337      	add	r3, pc, #220	; (adr r3, 8012d84 <__kernel_sin+0x16c>)
 8012ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012caa:	f7ed faf7 	bl	800029c <__adddf3>
 8012cae:	9b02      	ldr	r3, [sp, #8]
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	b9db      	cbnz	r3, 8012cee <__kernel_sin+0xd6>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	460b      	mov	r3, r1
 8012cba:	4650      	mov	r0, sl
 8012cbc:	4659      	mov	r1, fp
 8012cbe:	f7ed fca3 	bl	8000608 <__aeabi_dmul>
 8012cc2:	a325      	add	r3, pc, #148	; (adr r3, 8012d58 <__kernel_sin+0x140>)
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	f7ed fae6 	bl	8000298 <__aeabi_dsub>
 8012ccc:	4642      	mov	r2, r8
 8012cce:	464b      	mov	r3, r9
 8012cd0:	f7ed fc9a 	bl	8000608 <__aeabi_dmul>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4620      	mov	r0, r4
 8012cda:	4629      	mov	r1, r5
 8012cdc:	f7ed fade 	bl	800029c <__adddf3>
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	ec45 4b10 	vmov	d0, r4, r5
 8012ce8:	b005      	add	sp, #20
 8012cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cee:	2200      	movs	r2, #0
 8012cf0:	4b1b      	ldr	r3, [pc, #108]	; (8012d60 <__kernel_sin+0x148>)
 8012cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cf6:	f7ed fc87 	bl	8000608 <__aeabi_dmul>
 8012cfa:	4632      	mov	r2, r6
 8012cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d00:	463b      	mov	r3, r7
 8012d02:	4640      	mov	r0, r8
 8012d04:	4649      	mov	r1, r9
 8012d06:	f7ed fc7f 	bl	8000608 <__aeabi_dmul>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d12:	f7ed fac1 	bl	8000298 <__aeabi_dsub>
 8012d16:	4652      	mov	r2, sl
 8012d18:	465b      	mov	r3, fp
 8012d1a:	f7ed fc75 	bl	8000608 <__aeabi_dmul>
 8012d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d22:	f7ed fab9 	bl	8000298 <__aeabi_dsub>
 8012d26:	a30c      	add	r3, pc, #48	; (adr r3, 8012d58 <__kernel_sin+0x140>)
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	460f      	mov	r7, r1
 8012d30:	4640      	mov	r0, r8
 8012d32:	4649      	mov	r1, r9
 8012d34:	f7ed fc68 	bl	8000608 <__aeabi_dmul>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	4639      	mov	r1, r7
 8012d40:	f7ed faac 	bl	800029c <__adddf3>
 8012d44:	4602      	mov	r2, r0
 8012d46:	460b      	mov	r3, r1
 8012d48:	4620      	mov	r0, r4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	f7ed faa4 	bl	8000298 <__aeabi_dsub>
 8012d50:	e7c6      	b.n	8012ce0 <__kernel_sin+0xc8>
 8012d52:	bf00      	nop
 8012d54:	f3af 8000 	nop.w
 8012d58:	55555549 	.word	0x55555549
 8012d5c:	3fc55555 	.word	0x3fc55555
 8012d60:	3fe00000 	.word	0x3fe00000
 8012d64:	5acfd57c 	.word	0x5acfd57c
 8012d68:	3de5d93a 	.word	0x3de5d93a
 8012d6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d70:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d74:	57b1fe7d 	.word	0x57b1fe7d
 8012d78:	3ec71de3 	.word	0x3ec71de3
 8012d7c:	19c161d5 	.word	0x19c161d5
 8012d80:	3f2a01a0 	.word	0x3f2a01a0
 8012d84:	1110f8a6 	.word	0x1110f8a6
 8012d88:	3f811111 	.word	0x3f811111
 8012d8c:	00000000 	.word	0x00000000

08012d90 <atan>:
 8012d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d94:	ec55 4b10 	vmov	r4, r5, d0
 8012d98:	4bc3      	ldr	r3, [pc, #780]	; (80130a8 <atan+0x318>)
 8012d9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d9e:	429e      	cmp	r6, r3
 8012da0:	46ab      	mov	fp, r5
 8012da2:	dd18      	ble.n	8012dd6 <atan+0x46>
 8012da4:	4bc1      	ldr	r3, [pc, #772]	; (80130ac <atan+0x31c>)
 8012da6:	429e      	cmp	r6, r3
 8012da8:	dc01      	bgt.n	8012dae <atan+0x1e>
 8012daa:	d109      	bne.n	8012dc0 <atan+0x30>
 8012dac:	b144      	cbz	r4, 8012dc0 <atan+0x30>
 8012dae:	4622      	mov	r2, r4
 8012db0:	462b      	mov	r3, r5
 8012db2:	4620      	mov	r0, r4
 8012db4:	4629      	mov	r1, r5
 8012db6:	f7ed fa71 	bl	800029c <__adddf3>
 8012dba:	4604      	mov	r4, r0
 8012dbc:	460d      	mov	r5, r1
 8012dbe:	e006      	b.n	8012dce <atan+0x3e>
 8012dc0:	f1bb 0f00 	cmp.w	fp, #0
 8012dc4:	f340 8131 	ble.w	801302a <atan+0x29a>
 8012dc8:	a59b      	add	r5, pc, #620	; (adr r5, 8013038 <atan+0x2a8>)
 8012dca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012dce:	ec45 4b10 	vmov	d0, r4, r5
 8012dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dd6:	4bb6      	ldr	r3, [pc, #728]	; (80130b0 <atan+0x320>)
 8012dd8:	429e      	cmp	r6, r3
 8012dda:	dc14      	bgt.n	8012e06 <atan+0x76>
 8012ddc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012de0:	429e      	cmp	r6, r3
 8012de2:	dc0d      	bgt.n	8012e00 <atan+0x70>
 8012de4:	a396      	add	r3, pc, #600	; (adr r3, 8013040 <atan+0x2b0>)
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	ee10 0a10 	vmov	r0, s0
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fa54 	bl	800029c <__adddf3>
 8012df4:	2200      	movs	r2, #0
 8012df6:	4baf      	ldr	r3, [pc, #700]	; (80130b4 <atan+0x324>)
 8012df8:	f7ed fe96 	bl	8000b28 <__aeabi_dcmpgt>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d1e6      	bne.n	8012dce <atan+0x3e>
 8012e00:	f04f 3aff 	mov.w	sl, #4294967295
 8012e04:	e02b      	b.n	8012e5e <atan+0xce>
 8012e06:	f000 f963 	bl	80130d0 <fabs>
 8012e0a:	4bab      	ldr	r3, [pc, #684]	; (80130b8 <atan+0x328>)
 8012e0c:	429e      	cmp	r6, r3
 8012e0e:	ec55 4b10 	vmov	r4, r5, d0
 8012e12:	f300 80bf 	bgt.w	8012f94 <atan+0x204>
 8012e16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012e1a:	429e      	cmp	r6, r3
 8012e1c:	f300 80a0 	bgt.w	8012f60 <atan+0x1d0>
 8012e20:	ee10 2a10 	vmov	r2, s0
 8012e24:	ee10 0a10 	vmov	r0, s0
 8012e28:	462b      	mov	r3, r5
 8012e2a:	4629      	mov	r1, r5
 8012e2c:	f7ed fa36 	bl	800029c <__adddf3>
 8012e30:	2200      	movs	r2, #0
 8012e32:	4ba0      	ldr	r3, [pc, #640]	; (80130b4 <atan+0x324>)
 8012e34:	f7ed fa30 	bl	8000298 <__aeabi_dsub>
 8012e38:	2200      	movs	r2, #0
 8012e3a:	4606      	mov	r6, r0
 8012e3c:	460f      	mov	r7, r1
 8012e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e42:	4620      	mov	r0, r4
 8012e44:	4629      	mov	r1, r5
 8012e46:	f7ed fa29 	bl	800029c <__adddf3>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4630      	mov	r0, r6
 8012e50:	4639      	mov	r1, r7
 8012e52:	f7ed fd03 	bl	800085c <__aeabi_ddiv>
 8012e56:	f04f 0a00 	mov.w	sl, #0
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	460d      	mov	r5, r1
 8012e5e:	4622      	mov	r2, r4
 8012e60:	462b      	mov	r3, r5
 8012e62:	4620      	mov	r0, r4
 8012e64:	4629      	mov	r1, r5
 8012e66:	f7ed fbcf 	bl	8000608 <__aeabi_dmul>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	4680      	mov	r8, r0
 8012e70:	4689      	mov	r9, r1
 8012e72:	f7ed fbc9 	bl	8000608 <__aeabi_dmul>
 8012e76:	a374      	add	r3, pc, #464	; (adr r3, 8013048 <atan+0x2b8>)
 8012e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	460f      	mov	r7, r1
 8012e80:	f7ed fbc2 	bl	8000608 <__aeabi_dmul>
 8012e84:	a372      	add	r3, pc, #456	; (adr r3, 8013050 <atan+0x2c0>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	f7ed fa07 	bl	800029c <__adddf3>
 8012e8e:	4632      	mov	r2, r6
 8012e90:	463b      	mov	r3, r7
 8012e92:	f7ed fbb9 	bl	8000608 <__aeabi_dmul>
 8012e96:	a370      	add	r3, pc, #448	; (adr r3, 8013058 <atan+0x2c8>)
 8012e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9c:	f7ed f9fe 	bl	800029c <__adddf3>
 8012ea0:	4632      	mov	r2, r6
 8012ea2:	463b      	mov	r3, r7
 8012ea4:	f7ed fbb0 	bl	8000608 <__aeabi_dmul>
 8012ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8013060 <atan+0x2d0>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f7ed f9f5 	bl	800029c <__adddf3>
 8012eb2:	4632      	mov	r2, r6
 8012eb4:	463b      	mov	r3, r7
 8012eb6:	f7ed fba7 	bl	8000608 <__aeabi_dmul>
 8012eba:	a36b      	add	r3, pc, #428	; (adr r3, 8013068 <atan+0x2d8>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed f9ec 	bl	800029c <__adddf3>
 8012ec4:	4632      	mov	r2, r6
 8012ec6:	463b      	mov	r3, r7
 8012ec8:	f7ed fb9e 	bl	8000608 <__aeabi_dmul>
 8012ecc:	a368      	add	r3, pc, #416	; (adr r3, 8013070 <atan+0x2e0>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	f7ed f9e3 	bl	800029c <__adddf3>
 8012ed6:	4642      	mov	r2, r8
 8012ed8:	464b      	mov	r3, r9
 8012eda:	f7ed fb95 	bl	8000608 <__aeabi_dmul>
 8012ede:	a366      	add	r3, pc, #408	; (adr r3, 8013078 <atan+0x2e8>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	4680      	mov	r8, r0
 8012ee6:	4689      	mov	r9, r1
 8012ee8:	4630      	mov	r0, r6
 8012eea:	4639      	mov	r1, r7
 8012eec:	f7ed fb8c 	bl	8000608 <__aeabi_dmul>
 8012ef0:	a363      	add	r3, pc, #396	; (adr r3, 8013080 <atan+0x2f0>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed f9cf 	bl	8000298 <__aeabi_dsub>
 8012efa:	4632      	mov	r2, r6
 8012efc:	463b      	mov	r3, r7
 8012efe:	f7ed fb83 	bl	8000608 <__aeabi_dmul>
 8012f02:	a361      	add	r3, pc, #388	; (adr r3, 8013088 <atan+0x2f8>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed f9c6 	bl	8000298 <__aeabi_dsub>
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	463b      	mov	r3, r7
 8012f10:	f7ed fb7a 	bl	8000608 <__aeabi_dmul>
 8012f14:	a35e      	add	r3, pc, #376	; (adr r3, 8013090 <atan+0x300>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	f7ed f9bd 	bl	8000298 <__aeabi_dsub>
 8012f1e:	4632      	mov	r2, r6
 8012f20:	463b      	mov	r3, r7
 8012f22:	f7ed fb71 	bl	8000608 <__aeabi_dmul>
 8012f26:	a35c      	add	r3, pc, #368	; (adr r3, 8013098 <atan+0x308>)
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	f7ed f9b4 	bl	8000298 <__aeabi_dsub>
 8012f30:	4632      	mov	r2, r6
 8012f32:	463b      	mov	r3, r7
 8012f34:	f7ed fb68 	bl	8000608 <__aeabi_dmul>
 8012f38:	4602      	mov	r2, r0
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	4640      	mov	r0, r8
 8012f3e:	4649      	mov	r1, r9
 8012f40:	f7ed f9ac 	bl	800029c <__adddf3>
 8012f44:	4622      	mov	r2, r4
 8012f46:	462b      	mov	r3, r5
 8012f48:	f7ed fb5e 	bl	8000608 <__aeabi_dmul>
 8012f4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012f50:	4602      	mov	r2, r0
 8012f52:	460b      	mov	r3, r1
 8012f54:	d14b      	bne.n	8012fee <atan+0x25e>
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	f7ed f99d 	bl	8000298 <__aeabi_dsub>
 8012f5e:	e72c      	b.n	8012dba <atan+0x2a>
 8012f60:	ee10 0a10 	vmov	r0, s0
 8012f64:	2200      	movs	r2, #0
 8012f66:	4b53      	ldr	r3, [pc, #332]	; (80130b4 <atan+0x324>)
 8012f68:	4629      	mov	r1, r5
 8012f6a:	f7ed f995 	bl	8000298 <__aeabi_dsub>
 8012f6e:	2200      	movs	r2, #0
 8012f70:	4606      	mov	r6, r0
 8012f72:	460f      	mov	r7, r1
 8012f74:	4b4f      	ldr	r3, [pc, #316]	; (80130b4 <atan+0x324>)
 8012f76:	4620      	mov	r0, r4
 8012f78:	4629      	mov	r1, r5
 8012f7a:	f7ed f98f 	bl	800029c <__adddf3>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	460b      	mov	r3, r1
 8012f82:	4630      	mov	r0, r6
 8012f84:	4639      	mov	r1, r7
 8012f86:	f7ed fc69 	bl	800085c <__aeabi_ddiv>
 8012f8a:	f04f 0a01 	mov.w	sl, #1
 8012f8e:	4604      	mov	r4, r0
 8012f90:	460d      	mov	r5, r1
 8012f92:	e764      	b.n	8012e5e <atan+0xce>
 8012f94:	4b49      	ldr	r3, [pc, #292]	; (80130bc <atan+0x32c>)
 8012f96:	429e      	cmp	r6, r3
 8012f98:	dc1d      	bgt.n	8012fd6 <atan+0x246>
 8012f9a:	ee10 0a10 	vmov	r0, s0
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	4b47      	ldr	r3, [pc, #284]	; (80130c0 <atan+0x330>)
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	f7ed f978 	bl	8000298 <__aeabi_dsub>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	4606      	mov	r6, r0
 8012fac:	460f      	mov	r7, r1
 8012fae:	4b44      	ldr	r3, [pc, #272]	; (80130c0 <atan+0x330>)
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	4629      	mov	r1, r5
 8012fb4:	f7ed fb28 	bl	8000608 <__aeabi_dmul>
 8012fb8:	2200      	movs	r2, #0
 8012fba:	4b3e      	ldr	r3, [pc, #248]	; (80130b4 <atan+0x324>)
 8012fbc:	f7ed f96e 	bl	800029c <__adddf3>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f7ed fc48 	bl	800085c <__aeabi_ddiv>
 8012fcc:	f04f 0a02 	mov.w	sl, #2
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	e743      	b.n	8012e5e <atan+0xce>
 8012fd6:	462b      	mov	r3, r5
 8012fd8:	ee10 2a10 	vmov	r2, s0
 8012fdc:	2000      	movs	r0, #0
 8012fde:	4939      	ldr	r1, [pc, #228]	; (80130c4 <atan+0x334>)
 8012fe0:	f7ed fc3c 	bl	800085c <__aeabi_ddiv>
 8012fe4:	f04f 0a03 	mov.w	sl, #3
 8012fe8:	4604      	mov	r4, r0
 8012fea:	460d      	mov	r5, r1
 8012fec:	e737      	b.n	8012e5e <atan+0xce>
 8012fee:	4b36      	ldr	r3, [pc, #216]	; (80130c8 <atan+0x338>)
 8012ff0:	4e36      	ldr	r6, [pc, #216]	; (80130cc <atan+0x33c>)
 8012ff2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8012ff6:	4456      	add	r6, sl
 8012ff8:	449a      	add	sl, r3
 8012ffa:	e9da 2300 	ldrd	r2, r3, [sl]
 8012ffe:	f7ed f94b 	bl	8000298 <__aeabi_dsub>
 8013002:	4622      	mov	r2, r4
 8013004:	462b      	mov	r3, r5
 8013006:	f7ed f947 	bl	8000298 <__aeabi_dsub>
 801300a:	4602      	mov	r2, r0
 801300c:	460b      	mov	r3, r1
 801300e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013012:	f7ed f941 	bl	8000298 <__aeabi_dsub>
 8013016:	f1bb 0f00 	cmp.w	fp, #0
 801301a:	4604      	mov	r4, r0
 801301c:	460d      	mov	r5, r1
 801301e:	f6bf aed6 	bge.w	8012dce <atan+0x3e>
 8013022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013026:	461d      	mov	r5, r3
 8013028:	e6d1      	b.n	8012dce <atan+0x3e>
 801302a:	a51d      	add	r5, pc, #116	; (adr r5, 80130a0 <atan+0x310>)
 801302c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013030:	e6cd      	b.n	8012dce <atan+0x3e>
 8013032:	bf00      	nop
 8013034:	f3af 8000 	nop.w
 8013038:	54442d18 	.word	0x54442d18
 801303c:	3ff921fb 	.word	0x3ff921fb
 8013040:	8800759c 	.word	0x8800759c
 8013044:	7e37e43c 	.word	0x7e37e43c
 8013048:	e322da11 	.word	0xe322da11
 801304c:	3f90ad3a 	.word	0x3f90ad3a
 8013050:	24760deb 	.word	0x24760deb
 8013054:	3fa97b4b 	.word	0x3fa97b4b
 8013058:	a0d03d51 	.word	0xa0d03d51
 801305c:	3fb10d66 	.word	0x3fb10d66
 8013060:	c54c206e 	.word	0xc54c206e
 8013064:	3fb745cd 	.word	0x3fb745cd
 8013068:	920083ff 	.word	0x920083ff
 801306c:	3fc24924 	.word	0x3fc24924
 8013070:	5555550d 	.word	0x5555550d
 8013074:	3fd55555 	.word	0x3fd55555
 8013078:	2c6a6c2f 	.word	0x2c6a6c2f
 801307c:	bfa2b444 	.word	0xbfa2b444
 8013080:	52defd9a 	.word	0x52defd9a
 8013084:	3fadde2d 	.word	0x3fadde2d
 8013088:	af749a6d 	.word	0xaf749a6d
 801308c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013090:	fe231671 	.word	0xfe231671
 8013094:	3fbc71c6 	.word	0x3fbc71c6
 8013098:	9998ebc4 	.word	0x9998ebc4
 801309c:	3fc99999 	.word	0x3fc99999
 80130a0:	54442d18 	.word	0x54442d18
 80130a4:	bff921fb 	.word	0xbff921fb
 80130a8:	440fffff 	.word	0x440fffff
 80130ac:	7ff00000 	.word	0x7ff00000
 80130b0:	3fdbffff 	.word	0x3fdbffff
 80130b4:	3ff00000 	.word	0x3ff00000
 80130b8:	3ff2ffff 	.word	0x3ff2ffff
 80130bc:	40037fff 	.word	0x40037fff
 80130c0:	3ff80000 	.word	0x3ff80000
 80130c4:	bff00000 	.word	0xbff00000
 80130c8:	080138e8 	.word	0x080138e8
 80130cc:	080138c8 	.word	0x080138c8

080130d0 <fabs>:
 80130d0:	ec51 0b10 	vmov	r0, r1, d0
 80130d4:	ee10 2a10 	vmov	r2, s0
 80130d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130dc:	ec43 2b10 	vmov	d0, r2, r3
 80130e0:	4770      	bx	lr
 80130e2:	0000      	movs	r0, r0
 80130e4:	0000      	movs	r0, r0
	...

080130e8 <floor>:
 80130e8:	ec51 0b10 	vmov	r0, r1, d0
 80130ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80130f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80130f8:	2e13      	cmp	r6, #19
 80130fa:	460c      	mov	r4, r1
 80130fc:	ee10 5a10 	vmov	r5, s0
 8013100:	4680      	mov	r8, r0
 8013102:	dc34      	bgt.n	801316e <floor+0x86>
 8013104:	2e00      	cmp	r6, #0
 8013106:	da16      	bge.n	8013136 <floor+0x4e>
 8013108:	a335      	add	r3, pc, #212	; (adr r3, 80131e0 <floor+0xf8>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	f7ed f8c5 	bl	800029c <__adddf3>
 8013112:	2200      	movs	r2, #0
 8013114:	2300      	movs	r3, #0
 8013116:	f7ed fd07 	bl	8000b28 <__aeabi_dcmpgt>
 801311a:	b148      	cbz	r0, 8013130 <floor+0x48>
 801311c:	2c00      	cmp	r4, #0
 801311e:	da59      	bge.n	80131d4 <floor+0xec>
 8013120:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013124:	4a30      	ldr	r2, [pc, #192]	; (80131e8 <floor+0x100>)
 8013126:	432b      	orrs	r3, r5
 8013128:	2500      	movs	r5, #0
 801312a:	42ab      	cmp	r3, r5
 801312c:	bf18      	it	ne
 801312e:	4614      	movne	r4, r2
 8013130:	4621      	mov	r1, r4
 8013132:	4628      	mov	r0, r5
 8013134:	e025      	b.n	8013182 <floor+0x9a>
 8013136:	4f2d      	ldr	r7, [pc, #180]	; (80131ec <floor+0x104>)
 8013138:	4137      	asrs	r7, r6
 801313a:	ea01 0307 	and.w	r3, r1, r7
 801313e:	4303      	orrs	r3, r0
 8013140:	d01f      	beq.n	8013182 <floor+0x9a>
 8013142:	a327      	add	r3, pc, #156	; (adr r3, 80131e0 <floor+0xf8>)
 8013144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013148:	f7ed f8a8 	bl	800029c <__adddf3>
 801314c:	2200      	movs	r2, #0
 801314e:	2300      	movs	r3, #0
 8013150:	f7ed fcea 	bl	8000b28 <__aeabi_dcmpgt>
 8013154:	2800      	cmp	r0, #0
 8013156:	d0eb      	beq.n	8013130 <floor+0x48>
 8013158:	2c00      	cmp	r4, #0
 801315a:	bfbe      	ittt	lt
 801315c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013160:	fa43 f606 	asrlt.w	r6, r3, r6
 8013164:	19a4      	addlt	r4, r4, r6
 8013166:	ea24 0407 	bic.w	r4, r4, r7
 801316a:	2500      	movs	r5, #0
 801316c:	e7e0      	b.n	8013130 <floor+0x48>
 801316e:	2e33      	cmp	r6, #51	; 0x33
 8013170:	dd0b      	ble.n	801318a <floor+0xa2>
 8013172:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013176:	d104      	bne.n	8013182 <floor+0x9a>
 8013178:	ee10 2a10 	vmov	r2, s0
 801317c:	460b      	mov	r3, r1
 801317e:	f7ed f88d 	bl	800029c <__adddf3>
 8013182:	ec41 0b10 	vmov	d0, r0, r1
 8013186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801318e:	f04f 33ff 	mov.w	r3, #4294967295
 8013192:	fa23 f707 	lsr.w	r7, r3, r7
 8013196:	4207      	tst	r7, r0
 8013198:	d0f3      	beq.n	8013182 <floor+0x9a>
 801319a:	a311      	add	r3, pc, #68	; (adr r3, 80131e0 <floor+0xf8>)
 801319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a0:	f7ed f87c 	bl	800029c <__adddf3>
 80131a4:	2200      	movs	r2, #0
 80131a6:	2300      	movs	r3, #0
 80131a8:	f7ed fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d0bf      	beq.n	8013130 <floor+0x48>
 80131b0:	2c00      	cmp	r4, #0
 80131b2:	da02      	bge.n	80131ba <floor+0xd2>
 80131b4:	2e14      	cmp	r6, #20
 80131b6:	d103      	bne.n	80131c0 <floor+0xd8>
 80131b8:	3401      	adds	r4, #1
 80131ba:	ea25 0507 	bic.w	r5, r5, r7
 80131be:	e7b7      	b.n	8013130 <floor+0x48>
 80131c0:	2301      	movs	r3, #1
 80131c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80131c6:	fa03 f606 	lsl.w	r6, r3, r6
 80131ca:	4435      	add	r5, r6
 80131cc:	4545      	cmp	r5, r8
 80131ce:	bf38      	it	cc
 80131d0:	18e4      	addcc	r4, r4, r3
 80131d2:	e7f2      	b.n	80131ba <floor+0xd2>
 80131d4:	2500      	movs	r5, #0
 80131d6:	462c      	mov	r4, r5
 80131d8:	e7aa      	b.n	8013130 <floor+0x48>
 80131da:	bf00      	nop
 80131dc:	f3af 8000 	nop.w
 80131e0:	8800759c 	.word	0x8800759c
 80131e4:	7e37e43c 	.word	0x7e37e43c
 80131e8:	bff00000 	.word	0xbff00000
 80131ec:	000fffff 	.word	0x000fffff

080131f0 <matherr>:
 80131f0:	2000      	movs	r0, #0
 80131f2:	4770      	bx	lr
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <scalbn>:
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	ec55 4b10 	vmov	r4, r5, d0
 80131fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013202:	4606      	mov	r6, r0
 8013204:	462b      	mov	r3, r5
 8013206:	b9aa      	cbnz	r2, 8013234 <scalbn+0x3c>
 8013208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801320c:	4323      	orrs	r3, r4
 801320e:	d03b      	beq.n	8013288 <scalbn+0x90>
 8013210:	4b31      	ldr	r3, [pc, #196]	; (80132d8 <scalbn+0xe0>)
 8013212:	4629      	mov	r1, r5
 8013214:	2200      	movs	r2, #0
 8013216:	ee10 0a10 	vmov	r0, s0
 801321a:	f7ed f9f5 	bl	8000608 <__aeabi_dmul>
 801321e:	4b2f      	ldr	r3, [pc, #188]	; (80132dc <scalbn+0xe4>)
 8013220:	429e      	cmp	r6, r3
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	da12      	bge.n	801324e <scalbn+0x56>
 8013228:	a327      	add	r3, pc, #156	; (adr r3, 80132c8 <scalbn+0xd0>)
 801322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322e:	f7ed f9eb 	bl	8000608 <__aeabi_dmul>
 8013232:	e009      	b.n	8013248 <scalbn+0x50>
 8013234:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013238:	428a      	cmp	r2, r1
 801323a:	d10c      	bne.n	8013256 <scalbn+0x5e>
 801323c:	ee10 2a10 	vmov	r2, s0
 8013240:	4620      	mov	r0, r4
 8013242:	4629      	mov	r1, r5
 8013244:	f7ed f82a 	bl	800029c <__adddf3>
 8013248:	4604      	mov	r4, r0
 801324a:	460d      	mov	r5, r1
 801324c:	e01c      	b.n	8013288 <scalbn+0x90>
 801324e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013252:	460b      	mov	r3, r1
 8013254:	3a36      	subs	r2, #54	; 0x36
 8013256:	4432      	add	r2, r6
 8013258:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801325c:	428a      	cmp	r2, r1
 801325e:	dd0b      	ble.n	8013278 <scalbn+0x80>
 8013260:	ec45 4b11 	vmov	d1, r4, r5
 8013264:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80132d0 <scalbn+0xd8>
 8013268:	f000 f83c 	bl	80132e4 <copysign>
 801326c:	a318      	add	r3, pc, #96	; (adr r3, 80132d0 <scalbn+0xd8>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	ec51 0b10 	vmov	r0, r1, d0
 8013276:	e7da      	b.n	801322e <scalbn+0x36>
 8013278:	2a00      	cmp	r2, #0
 801327a:	dd08      	ble.n	801328e <scalbn+0x96>
 801327c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013284:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013288:	ec45 4b10 	vmov	d0, r4, r5
 801328c:	bd70      	pop	{r4, r5, r6, pc}
 801328e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013292:	da0d      	bge.n	80132b0 <scalbn+0xb8>
 8013294:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013298:	429e      	cmp	r6, r3
 801329a:	ec45 4b11 	vmov	d1, r4, r5
 801329e:	dce1      	bgt.n	8013264 <scalbn+0x6c>
 80132a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80132c8 <scalbn+0xd0>
 80132a4:	f000 f81e 	bl	80132e4 <copysign>
 80132a8:	a307      	add	r3, pc, #28	; (adr r3, 80132c8 <scalbn+0xd0>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	e7e0      	b.n	8013272 <scalbn+0x7a>
 80132b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132b4:	3236      	adds	r2, #54	; 0x36
 80132b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80132be:	4620      	mov	r0, r4
 80132c0:	4629      	mov	r1, r5
 80132c2:	2200      	movs	r2, #0
 80132c4:	4b06      	ldr	r3, [pc, #24]	; (80132e0 <scalbn+0xe8>)
 80132c6:	e7b2      	b.n	801322e <scalbn+0x36>
 80132c8:	c2f8f359 	.word	0xc2f8f359
 80132cc:	01a56e1f 	.word	0x01a56e1f
 80132d0:	8800759c 	.word	0x8800759c
 80132d4:	7e37e43c 	.word	0x7e37e43c
 80132d8:	43500000 	.word	0x43500000
 80132dc:	ffff3cb0 	.word	0xffff3cb0
 80132e0:	3c900000 	.word	0x3c900000

080132e4 <copysign>:
 80132e4:	ec51 0b10 	vmov	r0, r1, d0
 80132e8:	ee11 0a90 	vmov	r0, s3
 80132ec:	ee10 2a10 	vmov	r2, s0
 80132f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80132f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80132f8:	ea41 0300 	orr.w	r3, r1, r0
 80132fc:	ec43 2b10 	vmov	d0, r2, r3
 8013300:	4770      	bx	lr
	...

08013304 <_init>:
 8013304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013306:	bf00      	nop
 8013308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801330a:	bc08      	pop	{r3}
 801330c:	469e      	mov	lr, r3
 801330e:	4770      	bx	lr

08013310 <_fini>:
 8013310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013312:	bf00      	nop
 8013314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013316:	bc08      	pop	{r3}
 8013318:	469e      	mov	lr, r3
 801331a:	4770      	bx	lr
