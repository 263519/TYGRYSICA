
ciach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08010680  08010680  00020680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a80  08010a80  000304a0  2**0
                  CONTENTS
  4 .ARM          00000000  08010a80  08010a80  000304a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010a80  08010a80  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a80  08010a80  00020a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a84  08010a84  00020a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  08010a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  200004a0  08010f28  000304a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08010f28  00030974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d23  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003835  00000000  00000000  000531f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  00056a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  00058190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025cf3  00000000  00000000  00059760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000178bd  00000000  00000000  0007f453  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcfcb  00000000  00000000  00096d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173cdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a4  00000000  00000000  00173d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010668 	.word	0x08010668

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	08010668 	.word	0x08010668

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f001 f8a2 	bl	8001e50 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 faaf 	bl	8001274 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f001 fa86 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 fa99 	bl	8001274 <Error_Handler>
  }

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004c8 	.word	0x200004c8
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x74>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d124      	bne.n	8000dc0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_Pin;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SHARP_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fe7a 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50000100 	.word	0x50000100
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 ffc7 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f64f 719e 	movw	r1, #65438	; 0xff9e
 8000e40:	4827      	ldr	r0, [pc, #156]	; (8000ee0 <MX_GPIO_Init+0x110>)
 8000e42:	f001 ffc1 	bl	8002dc8 <HAL_GPIO_WritePin>
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000e5e:	f001 fe29 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e62:	2320      	movs	r3, #32
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f001 fe1a 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO1_TOF1_Pin|GPIO1_TOF2_Pin;
 8000e80:	2330      	movs	r3, #48	; 0x30
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000e94:	f001 fe0e 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e98:	f64f 739e 	movw	r3, #65438	; 0xff9e
 8000e9c:	60fb      	str	r3, [r7, #12]
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0x110>)
 8000eb2:	f001 fdff 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000ece:	f001 fdf1 	bl	8002ab4 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48000800 	.word	0x48000800

08000ee8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C2_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000ef4:	f240 220b 	movw	r2, #523	; 0x20b
 8000ef8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f26:	f001 ff81 	bl	8002e2c <HAL_I2C_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f9a0 	bl	8001274 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f38:	f002 ffc0 	bl	8003ebc <HAL_I2CEx_ConfigAnalogFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f42:	f000 f997 	bl	8001274 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f4a:	f003 f802 	bl	8003f52 <HAL_I2CEx_ConfigDigitalFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 f98e 	bl	8001274 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000564 	.word	0x20000564
 8000f60:	40005800 	.word	0x40005800

08000f64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C3_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C3_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fa0:	f001 ff44 	bl	8002e2c <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 f963 	bl	8001274 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fb2:	f002 ff83 	bl	8003ebc <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f95a 	bl	8001274 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fc4:	f002 ffc5 	bl	8003f52 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f951 	bl	8001274 <Error_Handler>
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000518 	.word	0x20000518
 8000fdc:	40007800 	.word	0x40007800
 8000fe0:	2000090e 	.word	0x2000090e

08000fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_I2C_MspInit+0x118>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12a      	bne.n	800105c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a3d      	ldr	r2, [pc, #244]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GYRO_TOF_SCL_Pin|GYRO_TOF_SDA_Pin;
 800101e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001030:	2304      	movs	r3, #4
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 fd39 	bl	8002ab4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800105a:	e04b      	b.n	80010f4 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_I2C_MspInit+0x120>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d146      	bne.n	80010f4 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOF2_SDA_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SDA_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_I2C_MspInit+0x124>)
 80010b4:	f001 fcfe 	bl	8002ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOF2_SCL_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SCL_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f001 fcec 	bl	8002ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010e6:	61d3      	str	r3, [r2, #28]
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005800 	.word	0x40005800
 8001100:	40021000 	.word	0x40021000
 8001104:	40007800 	.word	0x40007800
 8001108:	48000800 	.word	0x48000800

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 fe15 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f841 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f7ff fe59 	bl	8000dd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111e:	f000 fc0f 	bl	8001940 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001122:	f7ff fdb9 	bl	8000c98 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001126:	f7ff fedf 	bl	8000ee8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800112a:	f7ff ff1b 	bl	8000f64 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800112e:	f000 fc37 	bl	80019a0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001132:	f000 fb47 	bl	80017c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001136:	f000 f8a5 	bl	8001284 <MPU6050_Init>
  VL53L0X_Init();
 800113a:	f000 fceb 	bl	8001b14 <VL53L0X_Init>

//	  MPU6050_ReadAccelerometerScaled(&acc_x, &acc_y, &acc_z);
//	  printf("acc_x: %f, acc_y: %f,acc_z: %f\r\n",acc_x, acc_y, acc_z);
//	  MPU6050_ReadAccelerometerScaled(&gyr_x, &gyr_y, &gyr_z);
//	  printf("gyr_x: %f, gyr_y: %f,gyr_z: %f\r\n",gyr_x, gyr_y, gyr_z);
	  MPU6050_GetRP(&r, &p);
 800113e:	4913      	ldr	r1, [pc, #76]	; (800118c <main+0x80>)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <main+0x84>)
 8001142:	f000 f9ad 	bl	80014a0 <MPU6050_GetRP>
	  printf("Roll: %f, Pitch: %f\r\n", r, p);
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <main+0x84>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa04 	bl	8000558 <__aeabi_f2d>
 8001150:	4605      	mov	r5, r0
 8001152:	460e      	mov	r6, r1
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <main+0x80>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9fd 	bl	8000558 <__aeabi_f2d>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	e9cd 3400 	strd	r3, r4, [sp]
 8001166:	462a      	mov	r2, r5
 8001168:	4633      	mov	r3, r6
 800116a:	480a      	ldr	r0, [pc, #40]	; (8001194 <main+0x88>)
 800116c:	f00b fb48 	bl	800c800 <iprintf>
//	  MPU6050_ReadAccelerometerRaw(&acc_x, &acc_y, &acc_z);
//	  printf("acc_x: %d, acc_y: %d,acc_z: %d\r\n",acc_x, acc_y, acc_z);
//	  MPU6050_ReadAccelerometerRaw(&gyr_x, &gyr_y, &gyr_z);
//	  printf("gyr_x: %d, gyr_y: %d,gyr_z: %d\r\n",gyr_x, gyr_y, gyr_z);

	  VL53L0X_MeasureDistance(&tof2_distance);
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <main+0x8c>)
 8001172:	f000 fd89 	bl	8001c88 <VL53L0X_MeasureDistance>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001176:	2120      	movs	r1, #32
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f001 fe3c 	bl	8002df8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f000 fe42 	bl	8001e0c <HAL_Delay>
  {
 8001188:	e7d9      	b.n	800113e <main+0x32>
 800118a:	bf00      	nop
 800118c:	200005b4 	.word	0x200005b4
 8001190:	200005c0 	.word	0x200005c0
 8001194:	08010680 	.word	0x08010680
 8001198:	200005b0 	.word	0x200005b0

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0a6      	sub	sp, #152	; 0x98
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011a6:	2228      	movs	r2, #40	; 0x28
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00a fce1 	bl	800bb72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2258      	movs	r2, #88	; 0x58
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a fcd3 	bl	800bb72 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fef6 	bl	8003fec <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001206:	f000 f835 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001220:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fdf6 	bl	8004e18 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001232:	f000 f81f 	bl	8001274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SystemClock_Config+0xd4>)
 8001238:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001250:	2300      	movs	r3, #0
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f004 f814 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001262:	f000 f807 	bl	8001274 <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3798      	adds	r7, #152	; 0x98
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	002400c6 	.word	0x002400c6

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <MPU6050_Init>:
#define I2C_TIMEOUT 10

float acc_scale;
float gyr_scale;

void MPU6050_Init(){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af04      	add	r7, sp, #16
	  // try to connect once, timeout 100 ms
	  HAL_I2C_IsDeviceReady(&hi2c2,MPU6050_ADDRESS, 1, I2C_TIMEOUT);
 800128a:	230a      	movs	r3, #10
 800128c:	2201      	movs	r2, #1
 800128e:	21d0      	movs	r1, #208	; 0xd0
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MPU6050_Init+0x40>)
 8001292:	f002 fa73 	bl	800377c <HAL_I2C_IsDeviceReady>

	  MPU6050_SelectGyrscopeAccelerometerRatio(AFS_SEL_ACC_2G, FS_SEL_GYRO_250);
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f000 f849 	bl	8001330 <MPU6050_SelectGyrscopeAccelerometerRatio>
	  // EXIT SLEEP MODE
	  uint8_t select_data = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &select_data, 1, I2C_TIMEOUT);
 80012a2:	230a      	movs	r3, #10
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	226b      	movs	r2, #107	; 0x6b
 80012b2:	21d0      	movs	r1, #208	; 0xd0
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MPU6050_Init+0x40>)
 80012b6:	f002 f833 	bl	8003320 <HAL_I2C_Mem_Write>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000564 	.word	0x20000564

080012c8 <MPU6050_ReadAccelerometerRaw>:

void MPU6050_ReadAccelerometerRaw(int16_t *x, int16_t *y, int16_t *z){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, data, 6, I2C_TIMEOUT);
 80012d4:	230a      	movs	r3, #10
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2306      	movs	r3, #6
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	223b      	movs	r2, #59	; 0x3b
 80012e6:	21d0      	movs	r1, #208	; 0xd0
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <MPU6050_ReadAccelerometerRaw+0x64>)
 80012ea:	f002 f92d 	bl	8003548 <HAL_I2C_Mem_Read>

	*x = ((int16_t)data[0] << 8) | data[1];
 80012ee:	7c3b      	ldrb	r3, [r7, #16]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7c7b      	ldrb	r3, [r7, #17]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t)data[2] << 8) | data[3];
 8001300:	7cbb      	ldrb	r3, [r7, #18]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21a      	sxth	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t)data[4] << 8) | data[5];
 8001312:	7d3b      	ldrb	r3, [r7, #20]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7d7b      	ldrb	r3, [r7, #21]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21a      	sxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	801a      	strh	r2, [r3, #0]

}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000564 	.word	0x20000564

08001330 <MPU6050_SelectGyrscopeAccelerometerRatio>:
	*y = ((int16_t)data[2] << 8) | data[3];
	*z = ((int16_t)data[4] << 8) | data[5];

}

void MPU6050_SelectGyrscopeAccelerometerRatio(uint8_t acc_range, uint8_t gyro_range){
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af04      	add	r7, sp, #16
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
	  // GYRO CONFIG
	  uint8_t select_data = FS_SEL_GYRO_500;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,GYRO_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 8001344:	230a      	movs	r3, #10
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f107 030f 	add.w	r3, r7, #15
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	221b      	movs	r2, #27
 8001356:	21d0      	movs	r1, #208	; 0xd0
 8001358:	482a      	ldr	r0, [pc, #168]	; (8001404 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 800135a:	f001 ffe1 	bl	8003320 <HAL_I2C_Mem_Write>

	  // ACCEL CONFIG
	  select_data =  AFS_SEL_ACC_4G;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,ACCEL_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 8001362:	230a      	movs	r3, #10
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030f 	add.w	r3, r7, #15
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	221c      	movs	r2, #28
 8001374:	21d0      	movs	r1, #208	; 0xd0
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 8001378:	f001 ffd2 	bl	8003320 <HAL_I2C_Mem_Write>

	switch(gyro_range){
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d81e      	bhi.n	80013c0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <MPU6050_SelectGyrscopeAccelerometerRatio+0x58>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001399 	.word	0x08001399
 800138c:	080013a3 	.word	0x080013a3
 8001390:	080013ad 	.word	0x080013ad
 8001394:	080013b7 	.word	0x080013b7
		// LSB SENSITIVITY - LSB/g - register map of device
		case 0:
			acc_scale = 16384.f;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 800139a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800139e:	601a      	str	r2, [r3, #0]
			break;
 80013a0:	e00e      	b.n	80013c0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 1:
			acc_scale = 8192.f;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013a4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80013a8:	601a      	str	r2, [r3, #0]
			break;
 80013aa:	e009      	b.n	80013c0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 2:
			acc_scale = 4096.f;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013ae:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80013b2:	601a      	str	r2, [r3, #0]
			break;
 80013b4:	e004      	b.n	80013c0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 3:
			acc_scale = 2048.f;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013b8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80013bc:	601a      	str	r2, [r3, #0]
			break;
 80013be:	bf00      	nop
	}

	switch(acc_range){
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d81a      	bhi.n	80013fc <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <MPU6050_SelectGyrscopeAccelerometerRatio+0x9c>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e5 	.word	0x080013e5
 80013d4:	080013ed 	.word	0x080013ed
 80013d8:	080013f5 	.word	0x080013f5

		case 0:
			gyr_scale = 131.f;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe0>)
 80013e0:	601a      	str	r2, [r3, #0]
			break;
 80013e2:	e00b      	b.n	80013fc <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 1:
			gyr_scale = 65.5f;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe4>)
 80013e8:	601a      	str	r2, [r3, #0]
			break;
 80013ea:	e007      	b.n	80013fc <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 2:
			gyr_scale = 32.8f;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe8>)
 80013f0:	601a      	str	r2, [r3, #0]
			break;
 80013f2:	e003      	b.n	80013fc <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 3:
			gyr_scale = 16.4f;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <MPU6050_SelectGyrscopeAccelerometerRatio+0xec>)
 80013f8:	601a      	str	r2, [r3, #0]
			break;
 80013fa:	bf00      	nop
		}

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000564 	.word	0x20000564
 8001408:	200005d8 	.word	0x200005d8
 800140c:	200005d4 	.word	0x200005d4
 8001410:	43030000 	.word	0x43030000
 8001414:	42830000 	.word	0x42830000
 8001418:	42033333 	.word	0x42033333
 800141c:	41833333 	.word	0x41833333

08001420 <MPU6050_ReadAccelerometerScaled>:
	*x = (float)gyr_x / gyr_scale;
	*y = (float)gyr_y / gyr_scale;
	*z = (float)gyr_y / gyr_scale;
}

void MPU6050_ReadAccelerometerScaled(float *x, float *y, float *z){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	int16_t acc_x, acc_y, acc_z;
	MPU6050_ReadAccelerometerRaw(&acc_x, &acc_y, &acc_z);
 800142c:	f107 0212 	add.w	r2, r7, #18
 8001430:	f107 0114 	add.w	r1, r7, #20
 8001434:	f107 0316 	add.w	r3, r7, #22
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff45 	bl	80012c8 <MPU6050_ReadAccelerometerRaw>

	*x = (float)acc_x / acc_scale;
 800143e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MPU6050_ReadAccelerometerScaled+0x7c>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)acc_y / acc_scale;
 800145a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <MPU6050_ReadAccelerometerScaled+0x7c>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)acc_y / acc_scale;
 8001476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MPU6050_ReadAccelerometerScaled+0x7c>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a00 	vstr	s15, [r3]
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200005d8 	.word	0x200005d8

080014a0 <MPU6050_GetRP>:

void MPU6050_GetRP(float *r, float *p){
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
	float a_x, a_y, a_z;
	MPU6050_ReadAccelerometerScaled(&a_x, &a_y, &a_z);
 80014ac:	f107 020c 	add.w	r2, r7, #12
 80014b0:	f107 0110 	add.w	r1, r7, #16
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ffb1 	bl	8001420 <MPU6050_ReadAccelerometerScaled>

	*r = atan2(a_y, a_z) * 180.0 / M_PI;
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f849 	bl	8000558 <__aeabi_f2d>
 80014c6:	4680      	mov	r8, r0
 80014c8:	4689      	mov	r9, r1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f843 	bl	8000558 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b11 	vmov	d1, r2, r3
 80014da:	ec49 8b10 	vmov	d0, r8, r9
 80014de:	f00e fd2b 	bl	800ff38 <atan2>
 80014e2:	ec51 0b10 	vmov	r0, r1, d0
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <MPU6050_GetRP+0x140>)
 80014ec:	f7ff f88c 	bl	8000608 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	a337      	add	r3, pc, #220	; (adr r3, 80015d8 <MPU6050_GetRP+0x138>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f9ad 	bl	800085c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb75 	bl	8000bf8 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]
	*p = -(atan2(a_x, sqrt(a_y*a_y + a_z*a_z)) * 180.0) / M_PI;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	4680      	mov	r8, r0
 800151e:	4689      	mov	r9, r1
 8001520:	ed97 7a04 	vldr	s14, [r7, #16]
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001530:	edd7 7a03 	vldr	s15, [r7, #12]
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	ee17 0a90 	vmov	r0, s15
 8001540:	f7ff f80a 	bl	8000558 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	ec43 2b10 	vmov	d0, r2, r3
 800154c:	f00e fcf6 	bl	800ff3c <sqrt>
 8001550:	eeb0 7a40 	vmov.f32	s14, s0
 8001554:	eef0 7a60 	vmov.f32	s15, s1
 8001558:	eeb0 1a47 	vmov.f32	s2, s14
 800155c:	eef0 1a67 	vmov.f32	s3, s15
 8001560:	ec49 8b10 	vmov	d0, r8, r9
 8001564:	f00e fce8 	bl	800ff38 <atan2>
 8001568:	ec51 0b10 	vmov	r0, r1, d0
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MPU6050_GetRP+0x140>)
 8001572:	f7ff f849 	bl	8000608 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4614      	mov	r4, r2
 800157c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001580:	a315      	add	r3, pc, #84	; (adr r3, 80015d8 <MPU6050_GetRP+0x138>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7ff f967 	bl	800085c <__aeabi_ddiv>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	f7ff fb2f 	bl	8000bf8 <__aeabi_d2f>
 800159a:	4602      	mov	r2, r0
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	601a      	str	r2, [r3, #0]

	*r += 135.0f;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015e4 <MPU6050_GetRP+0x144>
 80015aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edc3 7a00 	vstr	s15, [r3]
	*p += 69.0f;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015e8 <MPU6050_GetRP+0x148>
 80015be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	edc3 7a00 	vstr	s15, [r3]

}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	40668000 	.word	0x40668000
 80015e4:	43070000 	.word	0x43070000
 80015e8:	428a0000 	.word	0x428a0000

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x44>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6193      	str	r3, [r2, #24]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x44>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x44>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x44>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f001 fa12 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 fba0 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e00a      	b.n	80016b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016a2:	f3af 8000 	nop.w
 80016a6:	4601      	mov	r1, r0
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	b2ca      	uxtb	r2, r1
 80016b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf0      	blt.n	80016a2 <_read+0x12>
	}

return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f2:	605a      	str	r2, [r3, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f00a f9d0 	bl	800bb08 <__errno>
 8001768:	4602      	mov	r2, r0
 800176a:	230c      	movs	r3, #12
 800176c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20010000 	.word	0x20010000
 8001794:	00000400 	.word	0x00000400
 8001798:	200004bc 	.word	0x200004bc
 800179c:	20000978 	.word	0x20000978

080017a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <MX_TIM4_Init+0xc4>)
 80017ea:	4a28      	ldr	r2, [pc, #160]	; (800188c <MX_TIM4_Init+0xc8>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MX_TIM4_Init+0xc4>)
 80017f0:	2247      	movs	r2, #71	; 0x47
 80017f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <MX_TIM4_Init+0xc4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_TIM4_Init+0xc4>)
 80017fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_TIM4_Init+0xc4>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_TIM4_Init+0xc4>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800180e:	481e      	ldr	r0, [pc, #120]	; (8001888 <MX_TIM4_Init+0xc4>)
 8001810:	f003 ff56 	bl	80056c0 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800181a:	f7ff fd2b 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4816      	ldr	r0, [pc, #88]	; (8001888 <MX_TIM4_Init+0xc4>)
 800182e:	f004 fc57 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001838:	f7ff fd1c 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	; 0x60
 800183e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_TIM4_Init+0xc4>)
 8001854:	f003 ff8c 	bl	8005770 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800185e:	f7ff fd09 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	2204      	movs	r2, #4
 8001866:	4619      	mov	r1, r3
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <MX_TIM4_Init+0xc4>)
 800186a:	f003 ff81 	bl	8005770 <HAL_TIM_PWM_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001874:	f7ff fcfe 	bl	8001274 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <MX_TIM4_Init+0xc4>)
 800187a:	f000 f829 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005dc 	.word	0x200005dc
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_TIM_PWM_MspInit+0x38>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10b      	bne.n	80018ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40000800 	.word	0x40000800
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_TIM_MspPostInit+0x68>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11d      	bne.n	800192e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_TIM_MspPostInit+0x6c>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_TIM_MspPostInit+0x6c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_Pin|PWM_MOTOR_2_Pin;
 800190a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800190e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800191c:	230a      	movs	r3, #10
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f001 f8c3 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40000800 	.word	0x40000800
 800193c:	40021000 	.word	0x40021000

08001940 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <MX_USART2_UART_Init+0x5c>)
 8001948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART2_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART2_UART_Init+0x58>)
 8001984:	f004 fc38 	bl	80061f8 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800198e:	f7ff fc71 	bl	8001274 <Error_Handler>
  }

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200006ac 	.word	0x200006ac
 800199c:	40004400 	.word	0x40004400

080019a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_USART3_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART3_UART_Init+0x58>)
 80019e4:	f004 fc08 	bl	80061f8 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019ee:	f7ff fc41 	bl	8001274 <Error_Handler>
  }

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000628 	.word	0x20000628
 80019fc:	40004800 	.word	0x40004800

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_UART_MspInit+0xdc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d129      	bne.n	8001a76 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a52:	230c      	movs	r3, #12
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a62:	2307      	movs	r3, #7
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f001 f820 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a74:	e02d      	b.n	8001ad2 <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_UART_MspInit+0xe4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d128      	bne.n	8001ad2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8a:	61d3      	str	r3, [r2, #28]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa2:	6153      	str	r3, [r2, #20]
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0xe0>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_TX_Pin|STM_RX_Pin;
 8001ab0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <HAL_UART_MspInit+0xe8>)
 8001ace:	f000 fff1 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40004800 	.word	0x40004800
 8001ae8:	48000800 	.word	0x48000800

08001aec <_write>:

/* USER CODE BEGIN 1 */
/*!
 * Redefiniton of function _write to print things on a serial port
 */
int _write(int file, char *ptr, int len){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2332      	movs	r3, #50	; 0x32
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <_write+0x24>)
 8001b02:	f004 fbc7 	bl	8006294 <HAL_UART_Transmit>
	return len;
 8001b06:	687b      	ldr	r3, [r7, #4]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200006ac 	.word	0x200006ac

08001b14 <VL53L0X_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;


void VL53L0X_Init(){
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	af00      	add	r7, sp, #0



	 /* USER CODE BEGIN 2 */

	  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <VL53L0X_Init+0x144>)
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <VL53L0X_Init+0x148>)
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b20:	6020      	str	r0, [r4, #0]
 8001b22:	6061      	str	r1, [r4, #4]
 8001b24:	60a2      	str	r2, [r4, #8]
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	789b      	ldrb	r3, [r3, #2]
 8001b2a:	81a2      	strh	r2, [r4, #12]
 8001b2c:	73a3      	strb	r3, [r4, #14]
 8001b2e:	230e      	movs	r3, #14
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <VL53L0X_Init+0x14c>)
 8001b34:	701a      	strb	r2, [r3, #0]

	  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 8001b36:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <VL53L0X_Init+0x144>)
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <VL53L0X_Init+0x150>)
 8001b3a:	4615      	mov	r5, r2
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	6028      	str	r0, [r5, #0]
 8001b42:	6069      	str	r1, [r5, #4]
 8001b44:	60aa      	str	r2, [r5, #8]
 8001b46:	60eb      	str	r3, [r5, #12]
 8001b48:	cc03      	ldmia	r4!, {r0, r1}
 8001b4a:	6128      	str	r0, [r5, #16]
 8001b4c:	6169      	str	r1, [r5, #20]
 8001b4e:	8823      	ldrh	r3, [r4, #0]
 8001b50:	78a2      	ldrb	r2, [r4, #2]
 8001b52:	832b      	strh	r3, [r5, #24]
 8001b54:	4613      	mov	r3, r2
 8001b56:	76ab      	strb	r3, [r5, #26]
 8001b58:	231a      	movs	r3, #26
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <VL53L0X_Init+0x14c>)
 8001b5e:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <VL53L0X_Init+0x14c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	2364      	movs	r3, #100	; 0x64
 8001b68:	493b      	ldr	r1, [pc, #236]	; (8001c58 <VL53L0X_Init+0x144>)
 8001b6a:	483f      	ldr	r0, [pc, #252]	; (8001c68 <VL53L0X_Init+0x154>)
 8001b6c:	f004 fb92 	bl	8006294 <HAL_UART_Transmit>

	  Dev->I2cHandle = &hi2c3;
 8001b70:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <VL53L0X_Init+0x158>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <VL53L0X_Init+0x15c>)
 8001b76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev->I2cDevAddr = 0x52;
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <VL53L0X_Init+0x158>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2252      	movs	r2, #82	; 0x52
 8001b80:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8a:	483a      	ldr	r0, [pc, #232]	; (8001c74 <VL53L0X_Init+0x160>)
 8001b8c:	f001 f91c 	bl	8002dc8 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001b90:	2014      	movs	r0, #20
 8001b92:	f000 f93b 	bl	8001e0c <HAL_Delay>
	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_SET); // Enable XSHUT
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9c:	4835      	ldr	r0, [pc, #212]	; (8001c74 <VL53L0X_Init+0x160>)
 8001b9e:	f001 f913 	bl	8002dc8 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001ba2:	2014      	movs	r0, #20
 8001ba4:	f000 f932 	bl	8001e0c <HAL_Delay>

	  //
	  // VL53L0X init for Single Measurement
	  //

	  VL53L0X_WaitDeviceBooted( Dev );
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <VL53L0X_Init+0x158>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fa81 	bl	80070b4 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 ff96 	bl	8006ae8 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 f8f5 	bl	8006db0 <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <VL53L0X_Init+0x164>)
 8001bcc:	492b      	ldr	r1, [pc, #172]	; (8001c7c <VL53L0X_Init+0x168>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 ffac 	bl	8007b2c <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <VL53L0X_Init+0x16c>)
 8001bda:	492a      	ldr	r1, [pc, #168]	; (8001c84 <VL53L0X_Init+0x170>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f006 fc33 	bl	8008448 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <VL53L0X_Init+0x158>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fb01 	bl	80071f0 <VL53L0X_SetDeviceMode>


	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 fd92 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <VL53L0X_Init+0x158>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fd8b 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <VL53L0X_Init+0x158>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f641 1299 	movw	r2, #6553	; 0x1999
 8001c12:	2101      	movs	r1, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fe33 	bl	8007880 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <VL53L0X_Init+0x158>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 fe2b 	bl	8007880 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <VL53L0X_Init+0x158>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fb56 	bl	80072e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <VL53L0X_Init+0x158>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2212      	movs	r2, #18
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 fb75 	bl	8007330 <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <VL53L0X_Init+0x158>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	220e      	movs	r2, #14
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 fb6e 	bl	8007330 <VL53L0X_SetVcselPulsePeriod>
	  /* USER CODE END 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	20000750 	.word	0x20000750
 8001c5c:	08010698 	.word	0x08010698
 8001c60:	2000074c 	.word	0x2000074c
 8001c64:	080106a8 	.word	0x080106a8
 8001c68:	200006ac 	.word	0x200006ac
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20000518 	.word	0x20000518
 8001c74:	48000400 	.word	0x48000400
 8001c78:	20000794 	.word	0x20000794
 8001c7c:	20000928 	.word	0x20000928
 8001c80:	2000074d 	.word	0x2000074d
 8001c84:	20000790 	.word	0x20000790

08001c88 <VL53L0X_MeasureDistance>:

void VL53L0X_MeasureDistance(int *distance){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <VL53L0X_MeasureDistance+0x4c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4910      	ldr	r1, [pc, #64]	; (8001cd8 <VL53L0X_MeasureDistance+0x50>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f006 f9ea 	bl	8008070 <VL53L0X_PerformSingleRangingMeasurement>

		  if(RangingData.RangeStatus == 0)
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <VL53L0X_MeasureDistance+0x50>)
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d112      	bne.n	8001cca <VL53L0X_MeasureDistance+0x42>
		  {
			  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <VL53L0X_MeasureDistance+0x50>)
 8001ca6:	891b      	ldrh	r3, [r3, #8]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	490c      	ldr	r1, [pc, #48]	; (8001cdc <VL53L0X_MeasureDistance+0x54>)
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <VL53L0X_MeasureDistance+0x58>)
 8001cae:	f00a fdc5 	bl	800c83c <siprintf>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <VL53L0X_MeasureDistance+0x5c>)
 8001cb8:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3, Message, MessageLen, 100);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <VL53L0X_MeasureDistance+0x5c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	2364      	movs	r3, #100	; 0x64
 8001cc2:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <VL53L0X_MeasureDistance+0x58>)
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <VL53L0X_MeasureDistance+0x60>)
 8001cc6:	f004 fae5 	bl	8006294 <HAL_UART_Transmit>

		  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	20000730 	.word	0x20000730
 8001cdc:	080106c4 	.word	0x080106c4
 8001ce0:	20000750 	.word	0x20000750
 8001ce4:	2000074c 	.word	0x2000074c
 8001ce8:	20000628 	.word	0x20000628

08001cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d16:	f7ff fd43 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f009 fefb 	bl	800bb14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1e:	f7ff f9f5 	bl	800110c <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8001d30:	08010a88 	.word	0x08010a88
  ldr r2, =_sbss
 8001d34:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8001d38:	20000974 	.word	0x20000974

08001d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_2_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_Init+0x28>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_Init+0x28>)
 8001d4a:	f043 0310 	orr.w	r3, r3, #16
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 fe7b 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fc46 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fe85 	bl	8002a9a <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 fe5b 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000008 	.word	0x20000008

08001dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	2000092c 	.word	0x2000092c

08001df4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2000092c 	.word	0x2000092c

08001e0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_Delay+0x40>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000000c 	.word	0x2000000c

08001e50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b09a      	sub	sp, #104	; 0x68
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e1e3      	b.n	8002238 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d176      	bne.n	8001f70 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d152      	bne.n	8001f30 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7fe ff55 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13b      	bne.n	8001f30 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fcaf 	bl	800281c <ADC_Disable>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12f      	bne.n	8001f30 <HAL_ADC_Init+0xe0>
 8001ed0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12b      	bne.n	8001f30 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee0:	f023 0302 	bic.w	r3, r3, #2
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001efa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <HAL_ADC_Init+0x308>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a92      	ldr	r2, [pc, #584]	; (800215c <HAL_ADC_Init+0x30c>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9a      	lsrs	r2, r3, #18
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4c:	d110      	bne.n	8001f70 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f023 0312 	bic.w	r3, r3, #18
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 8150 	bne.w	800221e <HAL_ADC_Init+0x3ce>
 8001f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 814b 	bne.w	800221e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8143 	bne.w	800221e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fa0:	f043 0202 	orr.w	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb0:	d004      	beq.n	8001fbc <HAL_ADC_Init+0x16c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_ADC_Init+0x310>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_Init+0x170>
 8001fbc:	4b69      	ldr	r3, [pc, #420]	; (8002164 <HAL_ADC_Init+0x314>)
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADC_Init+0x172>
 8001fc0:	4b69      	ldr	r3, [pc, #420]	; (8002168 <HAL_ADC_Init+0x318>)
 8001fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fcc:	d102      	bne.n	8001fd4 <HAL_ADC_Init+0x184>
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_ADC_Init+0x310>)
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e01a      	b.n	800200a <HAL_ADC_Init+0x1ba>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a61      	ldr	r2, [pc, #388]	; (8002160 <HAL_ADC_Init+0x310>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d103      	bne.n	8001fe6 <HAL_ADC_Init+0x196>
 8001fde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e011      	b.n	800200a <HAL_ADC_Init+0x1ba>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a60      	ldr	r2, [pc, #384]	; (800216c <HAL_ADC_Init+0x31c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d102      	bne.n	8001ff6 <HAL_ADC_Init+0x1a6>
 8001ff0:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <HAL_ADC_Init+0x320>)
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e009      	b.n	800200a <HAL_ADC_Init+0x1ba>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <HAL_ADC_Init+0x320>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d102      	bne.n	8002006 <HAL_ADC_Init+0x1b6>
 8002000:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_ADC_Init+0x31c>)
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e001      	b.n	800200a <HAL_ADC_Init+0x1ba>
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d108      	bne.n	800202a <HAL_ADC_Init+0x1da>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x1da>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_ADC_Init+0x1dc>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11c      	bne.n	800206a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002030:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_ADC_Init+0x202>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x202>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_ADC_Init+0x204>
 8002052:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e5b      	ldrb	r3, [r3, #25]
 800206e:	035b      	lsls	r3, r3, #13
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002074:	2a01      	cmp	r2, #1
 8002076:	d002      	beq.n	800207e <HAL_ADC_Init+0x22e>
 8002078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207c:	e000      	b.n	8002080 <HAL_ADC_Init+0x230>
 800207e:	2200      	movs	r2, #0
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4313      	orrs	r3, r2
 800208e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002090:	4313      	orrs	r3, r2
 8002092:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d11b      	bne.n	80020d6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7e5b      	ldrb	r3, [r3, #25]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	045a      	lsls	r2, r3, #17
 80020ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	663b      	str	r3, [r7, #96]	; 0x60
 80020b8:	e00d      	b.n	80020d6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d054      	beq.n	8002188 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_ADC_Init+0x31c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_Init+0x2a2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_ADC_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d140      	bne.n	8002174 <HAL_ADC_Init+0x324>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80020fa:	d02a      	beq.n	8002152 <HAL_ADC_Init+0x302>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002104:	d022      	beq.n	800214c <HAL_ADC_Init+0x2fc>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800210e:	d01a      	beq.n	8002146 <HAL_ADC_Init+0x2f6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002118:	d012      	beq.n	8002140 <HAL_ADC_Init+0x2f0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002122:	d00a      	beq.n	800213a <HAL_ADC_Init+0x2ea>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800212c:	d002      	beq.n	8002134 <HAL_ADC_Init+0x2e4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	e023      	b.n	800217c <HAL_ADC_Init+0x32c>
 8002134:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002138:	e020      	b.n	800217c <HAL_ADC_Init+0x32c>
 800213a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800213e:	e01d      	b.n	800217c <HAL_ADC_Init+0x32c>
 8002140:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002144:	e01a      	b.n	800217c <HAL_ADC_Init+0x32c>
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	e017      	b.n	800217c <HAL_ADC_Init+0x32c>
 800214c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002150:	e014      	b.n	800217c <HAL_ADC_Init+0x32c>
 8002152:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002156:	e011      	b.n	800217c <HAL_ADC_Init+0x32c>
 8002158:	20000000 	.word	0x20000000
 800215c:	431bde83 	.word	0x431bde83
 8002160:	50000100 	.word	0x50000100
 8002164:	50000300 	.word	0x50000300
 8002168:	50000700 	.word	0x50000700
 800216c:	50000400 	.word	0x50000400
 8002170:	50000500 	.word	0x50000500
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002180:	4313      	orrs	r3, r2
 8002182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002184:	4313      	orrs	r3, r2
 8002186:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d114      	bne.n	80021c0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a4:	f023 0302 	bic.w	r3, r3, #2
 80021a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e1b      	ldrb	r3, [r3, #24]
 80021ae:	039a      	lsls	r2, r3, #14
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4313      	orrs	r3, r2
 80021ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021bc:	4313      	orrs	r3, r2
 80021be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_ADC_Init+0x3f0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80021d0:	430b      	orrs	r3, r1
 80021d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10c      	bne.n	80021f6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f023 010f 	bic.w	r1, r3, #15
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	1e5a      	subs	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
 80021f4:	e007      	b.n	8002206 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 020f 	bic.w	r2, r2, #15
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f023 0303 	bic.w	r3, r3, #3
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
 800221c:	e00a      	b.n	8002234 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f023 0312 	bic.w	r3, r3, #18
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002238:	4618      	mov	r0, r3
 800223a:	3768      	adds	r7, #104	; 0x68
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	fff0c007 	.word	0xfff0c007

08002244 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b09b      	sub	sp, #108	; 0x6c
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x22>
 8002262:	2302      	movs	r3, #2
 8002264:	e2cb      	b.n	80027fe <HAL_ADC_ConfigChannel+0x5ba>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 82af 	bne.w	80027dc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d81c      	bhi.n	80022c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	461a      	mov	r2, r3
 800229a:	231f      	movs	r3, #31
 800229c:	4093      	lsls	r3, r2
 800229e:	43db      	mvns	r3, r3
 80022a0:	4019      	ands	r1, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	e063      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d81e      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	3b1e      	subs	r3, #30
 80022dc:	221f      	movs	r2, #31
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4019      	ands	r1, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	3b1e      	subs	r3, #30
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
 8002304:	e040      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b0e      	cmp	r3, #14
 800230c:	d81e      	bhi.n	800234c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3b3c      	subs	r3, #60	; 0x3c
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	3b3c      	subs	r3, #60	; 0x3c
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
 800234a:	e01d      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	3b5a      	subs	r3, #90	; 0x5a
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	4019      	ands	r1, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	3b5a      	subs	r3, #90	; 0x5a
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80e5 	bne.w	8002562 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d91c      	bls.n	80023da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6999      	ldr	r1, [r3, #24]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	3b1e      	subs	r3, #30
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e019      	b.n	800240e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6959      	ldr	r1, [r3, #20]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	3b01      	subs	r3, #1
 800242c:	2b03      	cmp	r3, #3
 800242e:	d84f      	bhi.n	80024d0 <HAL_ADC_ConfigChannel+0x28c>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_ADC_ConfigChannel+0x1f4>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800246b 	.word	0x0800246b
 8002440:	0800248d 	.word	0x0800248d
 8002444:	080024af 	.word	0x080024af
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244e:	4b9f      	ldr	r3, [pc, #636]	; (80026cc <HAL_ADC_ConfigChannel+0x488>)
 8002450:	4013      	ands	r3, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	0691      	lsls	r1, r2, #26
 8002458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800245a:	430a      	orrs	r2, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002466:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002468:	e07e      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002470:	4b96      	ldr	r3, [pc, #600]	; (80026cc <HAL_ADC_ConfigChannel+0x488>)
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	0691      	lsls	r1, r2, #26
 800247a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800247c:	430a      	orrs	r2, r1
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002488:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800248a:	e06d      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002492:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_ADC_ConfigChannel+0x488>)
 8002494:	4013      	ands	r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	0691      	lsls	r1, r2, #26
 800249c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800249e:	430a      	orrs	r2, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024aa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ac:	e05c      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024b4:	4b85      	ldr	r3, [pc, #532]	; (80026cc <HAL_ADC_ConfigChannel+0x488>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	0691      	lsls	r1, r2, #26
 80024be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c0:	430a      	orrs	r2, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024cc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ce:	e04b      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002516:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002560:	e001      	b.n	8002566 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002566:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x344>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x344>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_ADC_ConfigChannel+0x346>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8131 	bne.w	80027f2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d00f      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	400a      	ands	r2, r1
 80025b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025b6:	e049      	b.n	800264c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d91c      	bls.n	8002614 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6999      	ldr	r1, [r3, #24]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1b      	subs	r3, #27
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4019      	ands	r1, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6898      	ldr	r0, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1b      	subs	r3, #27
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	e01b      	b.n	800264c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6959      	ldr	r1, [r3, #20]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	4019      	ands	r1, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6898      	ldr	r0, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002654:	d004      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x41c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_ADC_ConfigChannel+0x48c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x420>
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_ADC_ConfigChannel+0x490>)
 8002662:	e000      	b.n	8002666 <HAL_ADC_ConfigChannel+0x422>
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_ADC_ConfigChannel+0x494>)
 8002666:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002680:	2b11      	cmp	r3, #17
 8002682:	d105      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002694:	2b12      	cmp	r3, #18
 8002696:	f040 80ac 	bne.w	80027f2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800269a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80a5 	bne.w	80027f2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d102      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x474>
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_ADC_ConfigChannel+0x48c>)
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e023      	b.n	8002700 <HAL_ADC_ConfigChannel+0x4bc>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_ADC_ConfigChannel+0x48c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10c      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x498>
 80026c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e01a      	b.n	8002700 <HAL_ADC_ConfigChannel+0x4bc>
 80026ca:	bf00      	nop
 80026cc:	83fff000 	.word	0x83fff000
 80026d0:	50000100 	.word	0x50000100
 80026d4:	50000300 	.word	0x50000300
 80026d8:	50000700 	.word	0x50000700
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	; (800280c <HAL_ADC_ConfigChannel+0x5c8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d102      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x4a8>
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_ADC_ConfigChannel+0x5cc>)
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e009      	b.n	8002700 <HAL_ADC_ConfigChannel+0x4bc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_ADC_ConfigChannel+0x5cc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4b8>
 80026f6:	4b45      	ldr	r3, [pc, #276]	; (800280c <HAL_ADC_ConfigChannel+0x5c8>)
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e001      	b.n	8002700 <HAL_ADC_ConfigChannel+0x4bc>
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x4dc>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x4dc>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x4de>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d150      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002726:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x504>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x504>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_ADC_ConfigChannel+0x506>
 8002748:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13c      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d11d      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x54e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275e:	d118      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_ADC_ConfigChannel+0x5d0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_ADC_ConfigChannel+0x5d4>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9a      	lsrs	r2, r3, #18
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002782:	e002      	b.n	800278a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3b01      	subs	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002790:	e02e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b11      	cmp	r3, #17
 8002798:	d10b      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x56e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027b0:	e01e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b12      	cmp	r3, #18
 80027b8:	d11a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c6:	e013      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027da:	e00a      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027fe:	4618      	mov	r0, r3
 8002800:	376c      	adds	r7, #108	; 0x6c
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	50000400 	.word	0x50000400
 8002810:	50000500 	.word	0x50000500
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <ADC_Disable+0x2c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <ADC_Disable+0x2c>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <ADC_Disable+0x2e>
 8002848:	2300      	movs	r3, #0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d047      	beq.n	80028de <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030d 	and.w	r3, r3, #13
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10f      	bne.n	800287c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0202 	orr.w	r2, r2, #2
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2203      	movs	r2, #3
 8002872:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002874:	f7ff fabe 	bl	8001df4 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800287a:	e029      	b.n	80028d0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e023      	b.n	80028e0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002898:	f7ff faac 	bl	8001df4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d914      	bls.n	80028d0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10d      	bne.n	80028d0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e007      	b.n	80028e0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d0dc      	beq.n	8002898 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff47 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff5c 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffb0 	bl	8002a08 <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e160      	b.n	8002d86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8152 	beq.w	8002d80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d017      	beq.n	8002b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d123      	bne.n	8002be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	6939      	ldr	r1, [r7, #16]
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80ac 	beq.w	8002d80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c28:	4b5e      	ldr	r3, [pc, #376]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6193      	str	r3, [r2, #24]
 8002c34:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c40:	4a59      	ldr	r2, [pc, #356]	; (8002da8 <HAL_GPIO_Init+0x2f4>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c6a:	d025      	beq.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01f      	beq.n	8002cb4 <HAL_GPIO_Init+0x200>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d019      	beq.n	8002cb0 <HAL_GPIO_Init+0x1fc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_GPIO_Init+0x304>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_GPIO_Init+0x1f4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <HAL_GPIO_Init+0x308>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <HAL_GPIO_Init+0x1f0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <HAL_GPIO_Init+0x30c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <HAL_GPIO_Init+0x1ec>
 8002c9c:	2306      	movs	r3, #6
 8002c9e:	e00c      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	e00a      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002ca4:	2305      	movs	r3, #5
 8002ca6:	e008      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e006      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002cac:	2303      	movs	r3, #3
 8002cae:	e004      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e002      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_GPIO_Init+0x206>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	f002 0203 	and.w	r2, r2, #3
 8002cc0:	0092      	lsls	r2, r2, #2
 8002cc2:	4093      	lsls	r3, r2
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cca:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_GPIO_Init+0x2f4>)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d26:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f ae97 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010000 	.word	0x40010000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	48000800 	.word	0x48000800
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	48001000 	.word	0x48001000
 8002dbc:	48001400 	.word	0x48001400
 8002dc0:	48001800 	.word	0x48001800
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43d9      	mvns	r1, r3
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	400b      	ands	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e081      	b.n	8002f42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f8c6 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e006      	b.n	8002eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d104      	bne.n	8002ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	f040 80da 	bne.w	8003122 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x30>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0d3      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f84:	f7fe ff36 	bl	8001df4 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fdc4 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0be      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	893a      	ldrh	r2, [r7, #8]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2bff      	cmp	r3, #255	; 0xff
 8002fd6:	d90e      	bls.n	8002ff6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 ff36 	bl	8003e60 <I2C_TransferConfig>
 8002ff4:	e06c      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_I2C_Master_Transmit+0x1e0>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 ff25 	bl	8003e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003016:	e05b      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	6a39      	ldr	r1, [r7, #32]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fdc1 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e07b      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d034      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d130      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fd53 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04d      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d90e      	bls.n	80030b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	8979      	ldrh	r1, [r7, #10]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fed9 	bl	8003e60 <I2C_TransferConfig>
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fec8 	bl	8003e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d19e      	bne.n	8003018 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fda0 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e01a      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2220      	movs	r2, #32
 80030f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_I2C_Master_Transmit+0x1e4>)
 8003102:	400b      	ands	r3, r1
 8003104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	80002000 	.word	0x80002000
 8003130:	fe00e800 	.word	0xfe00e800

08003134 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	817b      	strh	r3, [r7, #10]
 8003144:	4613      	mov	r3, r2
 8003146:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b20      	cmp	r3, #32
 8003152:	f040 80db 	bne.w	800330c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_I2C_Master_Receive+0x30>
 8003160:	2302      	movs	r3, #2
 8003162:	e0d4      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fe42 	bl	8001df4 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2319      	movs	r3, #25
 8003178:	2201      	movs	r2, #1
 800317a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fcd0 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0bf      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2210      	movs	r2, #16
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	893a      	ldrh	r2, [r7, #8]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2bff      	cmp	r3, #255	; 0xff
 80031be:	d90e      	bls.n	80031de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	8979      	ldrh	r1, [r7, #10]
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_I2C_Master_Receive+0x1e4>)
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fe42 	bl	8003e60 <I2C_TransferConfig>
 80031dc:	e06d      	b.n	80032ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	8979      	ldrh	r1, [r7, #10]
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_I2C_Master_Receive+0x1e4>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fe31 	bl	8003e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031fe:	e05c      	b.n	80032ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	6a39      	ldr	r1, [r7, #32]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fd49 	bl	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e07c      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d034      	beq.n	80032ba <HAL_I2C_Master_Receive+0x186>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d130      	bne.n	80032ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fc5e 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04d      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d90e      	bls.n	800329a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	b2da      	uxtb	r2, r3
 8003288:	8979      	ldrh	r1, [r7, #10]
 800328a:	2300      	movs	r3, #0
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fde4 	bl	8003e60 <I2C_TransferConfig>
 8003298:	e00f      	b.n	80032ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	2300      	movs	r3, #0
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fdd3 	bl	8003e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d19d      	bne.n	8003200 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fcab 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e01a      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_I2C_Master_Receive+0x1e8>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	80002400 	.word	0x80002400
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80f9 	bne.w	800353a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_I2C_Mem_Write+0x34>
 800334e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0ed      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_I2C_Mem_Write+0x4e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0e6      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003376:	f7fe fd3d 	bl	8001df4 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fbcb 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d1      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	; 0x21
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	; 0x40
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033c0:	88f8      	ldrh	r0, [r7, #6]
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4603      	mov	r3, r0
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fadb 	bl	800398c <I2C_RequestMemoryWrite>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0a9      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2bff      	cmp	r3, #255	; 0xff
 80033f0:	d90e      	bls.n	8003410 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	8979      	ldrh	r1, [r7, #10]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fd29 	bl	8003e60 <I2C_TransferConfig>
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	b2da      	uxtb	r2, r3
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fd18 	bl	8003e60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fbb5 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e07b      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d034      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d130      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fb47 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e04d      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2bff      	cmp	r3, #255	; 0xff
 80034a8:	d90e      	bls.n	80034c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fccd 	bl	8003e60 <I2C_TransferConfig>
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fcbc 	bl	8003e60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d19e      	bne.n	8003430 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fb94 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01a      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2220      	movs	r2, #32
 800350c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_I2C_Mem_Write+0x224>)
 800351a:	400b      	ands	r3, r1
 800351c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fe00e800 	.word	0xfe00e800

08003548 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 80fd 	bne.w	800376a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_I2C_Mem_Read+0x34>
 8003576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0f1      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Mem_Read+0x4e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ea      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800359e:	f7fe fc29 	bl	8001df4 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2319      	movs	r3, #25
 80035aa:	2201      	movs	r2, #1
 80035ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fab7 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d5      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2222      	movs	r2, #34	; 0x22
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e8:	88f8      	ldrh	r0, [r7, #6]
 80035ea:	893a      	ldrh	r2, [r7, #8]
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4603      	mov	r3, r0
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa1b 	bl	8003a34 <I2C_RequestMemoryRead>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0ad      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2bff      	cmp	r3, #255	; 0xff
 8003618:	d90e      	bls.n	8003638 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	b2da      	uxtb	r2, r3
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_I2C_Mem_Read+0x22c>)
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fc15 	bl	8003e60 <I2C_TransferConfig>
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_I2C_Mem_Read+0x22c>)
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fc04 	bl	8003e60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2200      	movs	r2, #0
 8003660:	2104      	movs	r1, #4
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa5e 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07c      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d034      	beq.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d130      	bne.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fa2f 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e04d      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	; 0xff
 80036d8:	d90e      	bls.n	80036f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	2300      	movs	r3, #0
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fbb5 	bl	8003e60 <I2C_TransferConfig>
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	b2da      	uxtb	r2, r3
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fba4 	bl	8003e60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d19a      	bne.n	8003658 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa7c 	bl	8003c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e01a      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2220      	movs	r2, #32
 800373c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_I2C_Mem_Read+0x230>)
 800374a:	400b      	ands	r3, r1
 800374c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	80002400 	.word	0x80002400
 8003778:	fe00e800 	.word	0xfe00e800

0800377c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	f040 80f1 	bne.w	8003980 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0e7      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2C_IsDeviceReady+0x44>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0e0      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_IsDeviceReady+0x72>
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037ec:	e004      	b.n	80037f8 <HAL_I2C_IsDeviceReady+0x7c>
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe faf9 	bl	8001df4 <HAL_GetTick>
 8003802:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b20      	cmp	r3, #32
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003830:	e034      	b.n	800389c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d01a      	beq.n	8003870 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe fadb 	bl	8001df4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <HAL_I2C_IsDeviceReady+0xd4>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e088      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b10      	cmp	r3, #16
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_I2C_IsDeviceReady+0x12c>
 80038a2:	7fbb      	ldrb	r3, [r7, #30]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0c4      	beq.n	8003832 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d01a      	beq.n	80038ec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	2120      	movs	r1, #32
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f92f 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e058      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2220      	movs	r2, #32
 80038d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e04a      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2120      	movs	r1, #32
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f914 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e03d      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2220      	movs	r2, #32
 8003914:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d118      	bne.n	8003950 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2200      	movs	r2, #0
 8003936:	2120      	movs	r1, #32
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8f3 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01c      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	f63f af3b 	bhi.w	80037d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <I2C_RequestMemoryWrite+0xa4>)
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fa53 	bl	8003e60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f8f0 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e02c      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
 80039de:	e015      	b.n	8003a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8d6 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e012      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f884 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	80002000 	.word	0x80002000

08003a34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	8979      	ldrh	r1, [r7, #10]
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <I2C_RequestMemoryRead+0xa4>)
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fa00 	bl	8003e60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f89d 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e02c      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e015      	b.n	8003ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f883 	bl	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e012      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f831 	bl	8003b24 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	80002000 	.word	0x80002000

08003adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d103      	bne.n	8003afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d007      	beq.n	8003b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	619a      	str	r2, [r3, #24]
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b34:	e022      	b.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01e      	beq.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe f959 	bl	8001df4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00f      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d0cd      	beq.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb0:	e02c      	b.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f8dc 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e02a      	b.n	8003c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d01e      	beq.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe f911 	bl	8001df4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d1cb      	bne.n	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c30:	e028      	b.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f89c 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e026      	b.n	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7fe f8d5 	bl	8001df4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d113      	bne.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d1cf      	bne.n	8003c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca8:	e055      	b.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f860 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e053      	b.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d129      	bne.n	8003d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d105      	bne.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e03f      	b.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2220      	movs	r2, #32
 8003cec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003cfa:	400b      	ands	r3, r1
 8003cfc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e022      	b.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fe f868 	bl	8001df4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e007      	b.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d1a2      	bne.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d161      	bne.n	8003e52 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9c:	d02b      	beq.n	8003df6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dac:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dae:	e022      	b.n	8003df6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d01e      	beq.n	8003df6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db8:	f7fe f81c 	bl	8001df4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <I2C_IsAcknowledgeFailed+0x5a>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d113      	bne.n	8003df6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e02e      	b.n	8003e54 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d1d5      	bne.n	8003db0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2220      	movs	r2, #32
 8003e12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fe61 	bl	8003adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <I2C_IsAcknowledgeFailed+0xe8>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fe00e800 	.word	0xfe00e800

08003e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	0d5b      	lsrs	r3, r3, #21
 8003e7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <I2C_TransferConfig+0x58>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	43db      	mvns	r3, r3
 8003e86:	ea02 0103 	and.w	r1, r2, r3
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e90:	7a7b      	ldrb	r3, [r7, #9]
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	03ff63ff 	.word	0x03ff63ff

08003ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d138      	bne.n	8003f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e032      	b.n	8003f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	; 0x24
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d139      	bne.n	8003fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e033      	b.n	8003fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2224      	movs	r2, #36	; 0x24
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f000 bf01 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8160 	beq.w	80042d6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004016:	4bae      	ldr	r3, [pc, #696]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004022:	4bab      	ldr	r3, [pc, #684]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d159      	bne.n	80040e2 <HAL_RCC_OscConfig+0xf6>
 800402e:	4ba8      	ldr	r3, [pc, #672]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d152      	bne.n	80040e2 <HAL_RCC_OscConfig+0xf6>
 800403c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004040:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004050:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0x82>
 8004068:	4b99      	ldr	r3, [pc, #612]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0xae>
 800406e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004086:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800408a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004096:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80040a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80040a6:	fa92 f2a2 	rbit	r2, r2
 80040aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80040ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80040b2:	fab2 f282 	clz	r2, r2
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f042 0220 	orr.w	r2, r2, #32
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f002 021f 	and.w	r2, r2, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8102 	beq.w	80042d4 <HAL_RCC_OscConfig+0x2e8>
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 80fc 	bne.w	80042d4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f000 be93 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d106      	bne.n	80040fc <HAL_RCC_OscConfig+0x110>
 80040ee:	4b78      	ldr	r3, [pc, #480]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a77      	ldr	r2, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e030      	b.n	800415e <HAL_RCC_OscConfig+0x172>
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x134>
 8004106:	4b72      	ldr	r3, [pc, #456]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01e      	b.n	800415e <HAL_RCC_OscConfig+0x172>
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800412a:	d10c      	bne.n	8004146 <HAL_RCC_OscConfig+0x15a>
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a64      	ldr	r2, [pc, #400]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e00b      	b.n	800415e <HAL_RCC_OscConfig+0x172>
 8004146:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a61      	ldr	r2, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b5f      	ldr	r3, [pc, #380]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5e      	ldr	r2, [pc, #376]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d059      	beq.n	800421c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd fe44 	bl	8001df4 <HAL_GetTick>
 800416c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004172:	f7fd fe3f 	bl	8001df4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d902      	bls.n	8004188 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	f000 be40 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800418c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800419c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_OscConfig+0x1ce>
 80041b4:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x1fa>
 80041ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80041ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80041d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041e2:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80041ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80041f2:	fa92 f2a2 	rbit	r2, r2
 80041f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80041fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041fe:	fab2 f282 	clz	r2, r2
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	f042 0220 	orr.w	r2, r2, #32
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f002 021f 	and.w	r2, r2, #31
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f202 	lsl.w	r2, r1, r2
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ab      	beq.n	8004172 <HAL_RCC_OscConfig+0x186>
 800421a:	e05c      	b.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fdea 	bl	8001df4 <HAL_GetTick>
 8004220:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004226:	f7fd fde5 	bl	8001df4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d902      	bls.n	800423c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	f000 bde6 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
 800423c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004240:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004250:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d102      	bne.n	800426e <HAL_RCC_OscConfig+0x282>
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	e015      	b.n	800429a <HAL_RCC_OscConfig+0x2ae>
 800426e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004272:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004286:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800428a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_RCC_OscConfig+0x2e4>)
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800429e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80042a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80042a6:	fa92 f2a2 	rbit	r2, r2
 80042aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80042ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80042b2:	fab2 f282 	clz	r2, r2
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f042 0220 	orr.w	r2, r2, #32
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	f002 021f 	and.w	r2, r2, #31
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f202 	lsl.w	r2, r1, r2
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ab      	bne.n	8004226 <HAL_RCC_OscConfig+0x23a>
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
 80042d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8170 	beq.w	80045c6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042e6:	4bd0      	ldr	r3, [pc, #832]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00c      	beq.n	800430c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042f2:	4bcd      	ldr	r3, [pc, #820]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d16d      	bne.n	80043da <HAL_RCC_OscConfig+0x3ee>
 80042fe:	4bca      	ldr	r3, [pc, #808]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d166      	bne.n	80043da <HAL_RCC_OscConfig+0x3ee>
 800430c:	2302      	movs	r3, #2
 800430e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800431e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_RCC_OscConfig+0x350>
 8004336:	4bbc      	ldr	r3, [pc, #752]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	e013      	b.n	8004364 <HAL_RCC_OscConfig+0x378>
 800433c:	2302      	movs	r3, #2
 800433e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800434e:	2302      	movs	r3, #2
 8004350:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004354:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004360:	4bb1      	ldr	r3, [pc, #708]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2202      	movs	r2, #2
 8004366:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800436a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004376:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800437a:	fab2 f282 	clz	r2, r2
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	f042 0220 	orr.w	r2, r2, #32
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	f002 021f 	and.w	r2, r2, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3ba>
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d002      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f000 bd31 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	21f8      	movs	r1, #248	; 0xf8
 80043b6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80043be:	fa91 f1a1 	rbit	r1, r1
 80043c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80043c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80043ca:	fab1 f181 	clz	r1, r1
 80043ce:	b2c9      	uxtb	r1, r1
 80043d0:	408b      	lsls	r3, r1
 80043d2:	4995      	ldr	r1, [pc, #596]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d8:	e0f5      	b.n	80045c6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8085 	beq.w	80044f0 <HAL_RCC_OscConfig+0x504>
 80043e6:	2301      	movs	r3, #1
 80043e8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80043f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004406:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	2301      	movs	r3, #1
 8004410:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fd fcef 	bl	8001df4 <HAL_GetTick>
 8004416:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441c:	f7fd fcea 	bl	8001df4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d902      	bls.n	8004432 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	f000 bceb 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004432:	2302      	movs	r3, #2
 8004434:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004444:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d102      	bne.n	8004462 <HAL_RCC_OscConfig+0x476>
 800445c:	4b72      	ldr	r3, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	e013      	b.n	800448a <HAL_RCC_OscConfig+0x49e>
 8004462:	2302      	movs	r3, #2
 8004464:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004474:	2302      	movs	r3, #2
 8004476:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800447a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004486:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2202      	movs	r2, #2
 800448c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004490:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004494:	fa92 f2a2 	rbit	r2, r2
 8004498:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800449c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80044a0:	fab2 f282 	clz	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	f042 0220 	orr.w	r2, r2, #32
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f002 021f 	and.w	r2, r2, #31
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f202 	lsl.w	r2, r1, r2
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0af      	beq.n	800441c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	21f8      	movs	r1, #248	; 0xf8
 80044cc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80044d4:	fa91 f1a1 	rbit	r1, r1
 80044d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80044dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044e0:	fab1 f181 	clz	r1, r1
 80044e4:	b2c9      	uxtb	r1, r1
 80044e6:	408b      	lsls	r3, r1
 80044e8:	494f      	ldr	r1, [pc, #316]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
 80044ee:	e06a      	b.n	80045c6 <HAL_RCC_OscConfig+0x5da>
 80044f0:	2301      	movs	r3, #1
 80044f2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004502:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fd fc6a 	bl	8001df4 <HAL_GetTick>
 8004520:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7fd fc65 	bl	8001df4 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f000 bc66 	b.w	8004e08 <HAL_RCC_OscConfig+0xe1c>
 800453c:	2302      	movs	r3, #2
 800453e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800454e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_RCC_OscConfig+0x580>
 8004566:	4b30      	ldr	r3, [pc, #192]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	e013      	b.n	8004594 <HAL_RCC_OscConfig+0x5a8>
 800456c:	2302      	movs	r3, #2
 800456e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800457e:	2302      	movs	r3, #2
 8004580:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004584:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_OscConfig+0x63c>)
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2202      	movs	r2, #2
 8004596:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800459a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800459e:	fa92 f2a2 	rbit	r2, r2
 80045a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80045a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80045aa:	fab2 f282 	clz	r2, r2
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	f042 0220 	orr.w	r2, r2, #32
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	f002 021f 	and.w	r2, r2, #31
 80045ba:	2101      	movs	r1, #1
 80045bc:	fa01 f202 	lsl.w	r2, r1, r2
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1af      	bne.n	8004526 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80da 	beq.w	800478a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d069      	beq.n	80046b4 <HAL_RCC_OscConfig+0x6c8>
 80045e0:	2301      	movs	r3, #1
 80045e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80045f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x640>)
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	461a      	mov	r2, r3
 8004606:	2301      	movs	r3, #1
 8004608:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fd fbf3 	bl	8001df4 <HAL_GetTick>
 800460e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	e00d      	b.n	8004630 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004614:	f7fd fbee 	bl	8001df4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d905      	bls.n	8004630 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e3ef      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004628:	40021000 	.word	0x40021000
 800462c:	10908120 	.word	0x10908120
 8004630:	2302      	movs	r3, #2
 8004632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	fa93 f2a3 	rbit	r2, r3
 800466e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004672:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004674:	4ba4      	ldr	r3, [pc, #656]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004678:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800467c:	2102      	movs	r1, #2
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	fa93 f1a3 	rbit	r1, r3
 800468a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800468e:	6019      	str	r1, [r3, #0]
  return result;
 8004690:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0b0      	beq.n	8004614 <HAL_RCC_OscConfig+0x628>
 80046b2:	e06a      	b.n	800478a <HAL_RCC_OscConfig+0x79e>
 80046b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046ca:	601a      	str	r2, [r3, #0]
  return result;
 80046cc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4b8c      	ldr	r3, [pc, #560]	; (800490c <HAL_RCC_OscConfig+0x920>)
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fd fb85 	bl	8001df4 <HAL_GetTick>
 80046ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ee:	e009      	b.n	8004704 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd fb80 	bl	8001df4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e381      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004704:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004708:	2202      	movs	r2, #2
 800470a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	fa93 f2a3 	rbit	r2, r3
 8004716:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004720:	2202      	movs	r2, #2
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	fa93 f2a3 	rbit	r2, r3
 800472e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004738:	2202      	movs	r2, #2
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	fa93 f2a3 	rbit	r2, r3
 8004746:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800474a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b6e      	ldr	r3, [pc, #440]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 800474e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004750:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004754:	2102      	movs	r1, #2
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f1a3 	rbit	r1, r3
 8004762:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004766:	6019      	str	r1, [r3, #0]
  return result;
 8004768:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004778:	b2db      	uxtb	r3, r3
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1b2      	bne.n	80046f0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8157 	beq.w	8004a48 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d112      	bne.n	80047d2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b56      	ldr	r3, [pc, #344]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4a55      	ldr	r2, [pc, #340]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b6:	61d3      	str	r3, [r2, #28]
 80047b8:	4b53      	ldr	r3, [pc, #332]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <HAL_RCC_OscConfig+0x924>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11a      	bne.n	8004814 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <HAL_RCC_OscConfig+0x924>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a4b      	ldr	r2, [pc, #300]	; (8004910 <HAL_RCC_OscConfig+0x924>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fb03 	bl	8001df4 <HAL_GetTick>
 80047ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	e009      	b.n	8004808 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fd fafe 	bl	8001df4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b64      	cmp	r3, #100	; 0x64
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e2ff      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_RCC_OscConfig+0x924>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ef      	beq.n	80047f4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x840>
 800481e:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a39      	ldr	r2, [pc, #228]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6213      	str	r3, [r2, #32]
 800482a:	e02f      	b.n	800488c <HAL_RCC_OscConfig+0x8a0>
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x864>
 8004836:	4b34      	ldr	r3, [pc, #208]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a33      	ldr	r2, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	6213      	str	r3, [r2, #32]
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6213      	str	r3, [r2, #32]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0x8a0>
 8004850:	1d3b      	adds	r3, r7, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b05      	cmp	r3, #5
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x888>
 800485a:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	6213      	str	r3, [r2, #32]
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6213      	str	r3, [r2, #32]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0x8a0>
 8004874:	4b24      	ldr	r3, [pc, #144]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6213      	str	r3, [r2, #32]
 8004880:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004886:	f023 0304 	bic.w	r3, r3, #4
 800488a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d06a      	beq.n	800496c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fd faad 	bl	8001df4 <HAL_GetTick>
 800489a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fd faa8 	bl	8001df4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e2a7      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 80048b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048bc:	2202      	movs	r2, #2
 80048be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	fa93 f2a3 	rbit	r2, r3
 80048ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048d4:	2202      	movs	r2, #2
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	fa93 f2a3 	rbit	r2, r3
 80048e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048e6:	601a      	str	r2, [r3, #0]
  return result;
 80048e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d108      	bne.n	8004914 <HAL_RCC_OscConfig+0x928>
 8004902:	4b01      	ldr	r3, [pc, #4]	; (8004908 <HAL_RCC_OscConfig+0x91c>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	e013      	b.n	8004930 <HAL_RCC_OscConfig+0x944>
 8004908:	40021000 	.word	0x40021000
 800490c:	10908120 	.word	0x10908120
 8004910:	40007000 	.word	0x40007000
 8004914:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004918:	2202      	movs	r2, #2
 800491a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	fa93 f2a3 	rbit	r2, r3
 8004926:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	4bc0      	ldr	r3, [pc, #768]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004934:	2102      	movs	r1, #2
 8004936:	6011      	str	r1, [r2, #0]
 8004938:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	fa92 f1a2 	rbit	r1, r2
 8004942:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004946:	6011      	str	r1, [r2, #0]
  return result;
 8004948:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	fab2 f282 	clz	r2, r2
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	f002 021f 	and.w	r2, r2, #31
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d09a      	beq.n	80048a0 <HAL_RCC_OscConfig+0x8b4>
 800496a:	e063      	b.n	8004a34 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fd fa42 	bl	8001df4 <HAL_GetTick>
 8004970:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004974:	e00b      	b.n	800498e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004976:	f7fd fa3d 	bl	8001df4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e23c      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 800498e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004992:	2202      	movs	r2, #2
 8004994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	fa93 f2a3 	rbit	r2, r3
 80049a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049aa:	2202      	movs	r2, #2
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	fa93 f2a3 	rbit	r2, r3
 80049b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049bc:	601a      	str	r2, [r3, #0]
  return result;
 80049be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f043 0302 	orr.w	r3, r3, #2
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d102      	bne.n	80049de <HAL_RCC_OscConfig+0x9f2>
 80049d8:	4b95      	ldr	r3, [pc, #596]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	e00d      	b.n	80049fa <HAL_RCC_OscConfig+0xa0e>
 80049de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049e2:	2202      	movs	r2, #2
 80049e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	fa93 f2a3 	rbit	r2, r3
 80049f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	4b8e      	ldr	r3, [pc, #568]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80049fe:	2102      	movs	r1, #2
 8004a00:	6011      	str	r1, [r2, #0]
 8004a02:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	fa92 f1a2 	rbit	r1, r2
 8004a0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a10:	6011      	str	r1, [r2, #0]
  return result;
 8004a12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	fab2 f282 	clz	r2, r2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f002 021f 	and.w	r2, r2, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1a0      	bne.n	8004976 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a34:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4a7b      	ldr	r2, [pc, #492]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 81d9 	beq.w	8004e06 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a54:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f000 81a6 	beq.w	8004dae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	f040 811e 	bne.w	8004caa <HAL_RCC_OscConfig+0xcbe>
 8004a6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	fa93 f2a3 	rbit	r2, r3
 8004a82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a86:	601a      	str	r2, [r3, #0]
  return result;
 8004a88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd f9a6 	bl	8001df4 <HAL_GetTick>
 8004aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aac:	e009      	b.n	8004ac2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd f9a1 	bl	8001df4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1a2      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004ac2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	fa93 f2a3 	rbit	r2, r3
 8004ad6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ada:	601a      	str	r2, [r3, #0]
  return result;
 8004adc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_RCC_OscConfig+0xb10>
 8004af6:	4b4e      	ldr	r3, [pc, #312]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e01b      	b.n	8004b34 <HAL_RCC_OscConfig+0xb48>
 8004afc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	fa93 f2a3 	rbit	r2, r3
 8004b10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	fa93 f2a3 	rbit	r2, r3
 8004b2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004b38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b3c:	6011      	str	r1, [r2, #0]
 8004b3e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	fa92 f1a2 	rbit	r1, r2
 8004b48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b4c:	6011      	str	r1, [r2, #0]
  return result;
 8004b4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	fab2 f282 	clz	r2, r2
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	f042 0220 	orr.w	r2, r2, #32
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	f002 021f 	and.w	r2, r2, #31
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d19e      	bne.n	8004aae <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b70:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	f023 020f 	bic.w	r2, r3, #15
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	492c      	ldr	r1, [pc, #176]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a19      	ldr	r1, [r3, #32]
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	4925      	ldr	r1, [pc, #148]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
 8004ba0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	fa93 f2a3 	rbit	r2, r3
 8004bb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bb8:	601a      	str	r2, [r3, #0]
  return result;
 8004bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bbe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd f90d 	bl	8001df4 <HAL_GetTick>
 8004bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bde:	e009      	b.n	8004bf4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd f908 	bl	8001df4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e109      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	fa93 f2a3 	rbit	r2, r3
 8004c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c0c:	601a      	str	r2, [r3, #0]
  return result;
 8004c0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <HAL_RCC_OscConfig+0xc48>
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <HAL_RCC_OscConfig+0xc44>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	e01e      	b.n	8004c6c <HAL_RCC_OscConfig+0xc80>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	fa93 f2a3 	rbit	r2, r3
 8004c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <HAL_RCC_OscConfig+0xe28>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	fa92 f1a2 	rbit	r1, r2
 8004c80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c84:	6011      	str	r1, [r2, #0]
  return result;
 8004c86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	fab2 f282 	clz	r2, r2
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	f042 0220 	orr.w	r2, r2, #32
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	f002 021f 	and.w	r2, r2, #31
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d09b      	beq.n	8004be0 <HAL_RCC_OscConfig+0xbf4>
 8004ca8:	e0ad      	b.n	8004e06 <HAL_RCC_OscConfig+0xe1a>
 8004caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	fa93 f2a3 	rbit	r2, r3
 8004cbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cc2:	601a      	str	r2, [r3, #0]
  return result;
 8004cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd f888 	bl	8001df4 <HAL_GetTick>
 8004ce4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce8:	e009      	b.n	8004cfe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fd f883 	bl	8001df4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e084      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
 8004cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	fa93 f2a3 	rbit	r2, r3
 8004d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d16:	601a      	str	r2, [r3, #0]
  return result;
 8004d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d102      	bne.n	8004d38 <HAL_RCC_OscConfig+0xd4c>
 8004d32:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_RCC_OscConfig+0xe28>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	e01b      	b.n	8004d70 <HAL_RCC_OscConfig+0xd84>
 8004d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fa93 f2a3 	rbit	r2, r3
 8004d4c:	f107 0320 	add.w	r3, r7, #32
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f107 031c 	add.w	r3, r7, #28
 8004d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f107 031c 	add.w	r3, r7, #28
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	fa93 f2a3 	rbit	r2, r3
 8004d66:	f107 0318 	add.w	r3, r7, #24
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <HAL_RCC_OscConfig+0xe28>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f107 0214 	add.w	r2, r7, #20
 8004d74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	f107 0214 	add.w	r2, r7, #20
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	fa92 f1a2 	rbit	r1, r2
 8004d84:	f107 0210 	add.w	r2, r7, #16
 8004d88:	6011      	str	r1, [r2, #0]
  return result;
 8004d8a:	f107 0210 	add.w	r2, r7, #16
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d19e      	bne.n	8004cea <HAL_RCC_OscConfig+0xcfe>
 8004dac:	e02b      	b.n	8004e06 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e025      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dbc:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <HAL_RCC_OscConfig+0xe28>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004dc4:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <HAL_RCC_OscConfig+0xe28>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dd0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d111      	bne.n	8004e02 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004dde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d108      	bne.n	8004e02 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000

08004e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b09e      	sub	sp, #120	; 0x78
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e162      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b90      	ldr	r3, [pc, #576]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d910      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 0207 	bic.w	r2, r3, #7
 8004e46:	498b      	ldr	r1, [pc, #556]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b89      	ldr	r3, [pc, #548]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e14a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b82      	ldr	r3, [pc, #520]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	497f      	ldr	r1, [pc, #508]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80dc 	beq.w	8005044 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d13c      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xf6>
 8004e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d102      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xa6>
 8004eb8:	4b6f      	ldr	r3, [pc, #444]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	e00f      	b.n	8004ede <HAL_RCC_ClockConfig+0xc6>
 8004ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
 8004ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eda:	4b67      	ldr	r3, [pc, #412]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ee2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ee6:	fa92 f2a2 	rbit	r2, r2
 8004eea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eee:	fab2 f282 	clz	r2, r2
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	f042 0220 	orr.w	r2, r2, #32
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	f002 021f 	and.w	r2, r2, #31
 8004efe:	2101      	movs	r1, #1
 8004f00:	fa01 f202 	lsl.w	r2, r1, r2
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d17b      	bne.n	8005002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0f3      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d13c      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x178>
 8004f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d102      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x128>
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	e00f      	b.n	8004f60 <HAL_RCC_ClockConfig+0x148>
 8004f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f52:	643b      	str	r3, [r7, #64]	; 0x40
 8004f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f5c:	4b46      	ldr	r3, [pc, #280]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f64:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f68:	fa92 f2a2 	rbit	r2, r2
 8004f6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f70:	fab2 f282 	clz	r2, r2
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	f042 0220 	orr.w	r2, r2, #32
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	f002 021f 	and.w	r2, r2, #31
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f202 	lsl.w	r2, r1, r2
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d13a      	bne.n	8005002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0b2      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
 8004f90:	2302      	movs	r3, #2
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	fa93 f3a3 	rbit	r3, r3
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1a0>
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	e00d      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x1bc>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	fa93 f3a3 	rbit	r3, r3
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	61ba      	str	r2, [r7, #24]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	fa92 f2a2 	rbit	r2, r2
 8004fde:	617a      	str	r2, [r7, #20]
  return result;
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	fab2 f282 	clz	r2, r2
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	f042 0220 	orr.w	r2, r2, #32
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	f002 021f 	and.w	r2, r2, #31
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e079      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005002:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f023 0203 	bic.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	491a      	ldr	r1, [pc, #104]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005014:	f7fc feee 	bl	8001df4 <HAL_GetTick>
 8005018:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	e00a      	b.n	8005032 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501c:	f7fc feea 	bl	8001df4 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e061      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_ClockConfig+0x260>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 020c 	and.w	r2, r3, #12
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d1eb      	bne.n	800501c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d214      	bcs.n	800507c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 0207 	bic.w	r2, r3, #7
 800505a:	4906      	ldr	r1, [pc, #24]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCC_ClockConfig+0x25c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e040      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2de>
 8005074:	40022000 	.word	0x40022000
 8005078:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_RCC_ClockConfig+0x2e8>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	491a      	ldr	r1, [pc, #104]	; (8005100 <HAL_RCC_ClockConfig+0x2e8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_RCC_ClockConfig+0x2e8>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4912      	ldr	r1, [pc, #72]	; (8005100 <HAL_RCC_ClockConfig+0x2e8>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050ba:	f000 f829 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCC_ClockConfig+0x2e8>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c8:	22f0      	movs	r2, #240	; 0xf0
 80050ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	fa92 f2a2 	rbit	r2, r2
 80050d2:	60fa      	str	r2, [r7, #12]
  return result;
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	fab2 f282 	clz	r2, r2
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	40d3      	lsrs	r3, r2
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x2ec>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	fa21 f303 	lsr.w	r3, r1, r3
 80050e6:	4a08      	ldr	r2, [pc, #32]	; (8005108 <HAL_RCC_ClockConfig+0x2f0>)
 80050e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_RCC_ClockConfig+0x2f4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc fe3c 	bl	8001d6c <HAL_InitTick>
  
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3778      	adds	r7, #120	; 0x78
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000
 8005104:	080106dc 	.word	0x080106dc
 8005108:	20000000 	.word	0x20000000
 800510c:	20000008 	.word	0x20000008

08005110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	b08b      	sub	sp, #44	; 0x2c
 8005114:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800512a:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d002      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x30>
 800513a:	2b08      	cmp	r3, #8
 800513c:	d003      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x36>
 800513e:	e03f      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005142:	623b      	str	r3, [r7, #32]
      break;
 8005144:	e03f      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800514c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005150:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	607a      	str	r2, [r7, #4]
  return result;
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	fab2 f282 	clz	r2, r2
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	40d3      	lsrs	r3, r2
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	220f      	movs	r2, #15
 8005174:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	fa92 f2a2 	rbit	r2, r2
 800517c:	60fa      	str	r2, [r7, #12]
  return result;
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	fab2 f282 	clz	r2, r2
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	40d3      	lsrs	r3, r2
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005198:	4a0f      	ldr	r2, [pc, #60]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	e007      	b.n	80051ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051aa:	4a0b      	ldr	r2, [pc, #44]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	fb02 f303 	mul.w	r3, r2, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	623b      	str	r3, [r7, #32]
      break;
 80051be:	e002      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80051c2:	623b      	str	r3, [r7, #32]
      break;
 80051c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	372c      	adds	r7, #44	; 0x2c
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40021000 	.word	0x40021000
 80051d8:	007a1200 	.word	0x007a1200
 80051dc:	080106f4 	.word	0x080106f4
 80051e0:	08010704 	.word	0x08010704

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000000 	.word	0x20000000

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005202:	f7ff ffef 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005206:	4601      	mov	r1, r0
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005210:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	fa92 f2a2 	rbit	r2, r2
 800521c:	603a      	str	r2, [r7, #0]
  return result;
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	fab2 f282 	clz	r2, r2
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	40d3      	lsrs	r3, r2
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <HAL_RCC_GetPCLK1Freq+0x40>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	080106ec 	.word	0x080106ec

08005240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005246:	f7ff ffcd 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800524a:	4601      	mov	r1, r0
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005254:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	fa92 f2a2 	rbit	r2, r2
 8005260:	603a      	str	r2, [r7, #0]
  return result;
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	fab2 f282 	clz	r2, r2
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	40d3      	lsrs	r3, r2
 800526c:	4a04      	ldr	r2, [pc, #16]	; (8005280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800526e:	5cd3      	ldrb	r3, [r2, r3]
 8005270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	080106ec 	.word	0x080106ec

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b092      	sub	sp, #72	; 0x48
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80d4 	beq.w	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a8:	4b4e      	ldr	r3, [pc, #312]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10e      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4a4a      	ldr	r2, [pc, #296]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	61d3      	str	r3, [r2, #28]
 80052c0:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b45      	ldr	r3, [pc, #276]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fc fd83 	bl	8001df4 <HAL_GetTick>
 80052ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fc fd7f 	bl	8001df4 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e1d6      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b38      	ldr	r3, [pc, #224]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005310:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8084 	beq.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800532c:	429a      	cmp	r2, r3
 800532e:	d07c      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	2301      	movs	r3, #1
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04b      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fc fd2f 	bl	8001df4 <HAL_GetTick>
 8005396:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005398:	e00a      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539a:	f7fc fd2b 	bl	8001df4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e180      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80053b0:	2302      	movs	r3, #2
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	2302      	movs	r3, #2
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
  return result;
 80053c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d108      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80053de:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	e00d      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
 80053ec:	10908100 	.word	0x10908100
 80053f0:	2302      	movs	r3, #2
 80053f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	4ba0      	ldr	r3, [pc, #640]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2202      	movs	r2, #2
 8005402:	613a      	str	r2, [r7, #16]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	fa92 f2a2 	rbit	r2, r2
 800540a:	60fa      	str	r2, [r7, #12]
  return result;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	fab2 f282 	clz	r2, r2
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f002 021f 	and.w	r2, r2, #31
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0b7      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800542a:	4b95      	ldr	r3, [pc, #596]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4992      	ldr	r1, [pc, #584]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800543c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005440:	2b01      	cmp	r3, #1
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005444:	4b8e      	ldr	r3, [pc, #568]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4a8d      	ldr	r2, [pc, #564]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800544a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800545c:	4b88      	ldr	r3, [pc, #544]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4985      	ldr	r1, [pc, #532]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800546a:	4313      	orrs	r3, r2
 800546c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800547a:	4b81      	ldr	r3, [pc, #516]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	497e      	ldr	r1, [pc, #504]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005498:	4b79      	ldr	r3, [pc, #484]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4976      	ldr	r1, [pc, #472]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f023 0210 	bic.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	496f      	ldr	r1, [pc, #444]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80054d4:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	4967      	ldr	r1, [pc, #412]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054f2:	4b63      	ldr	r3, [pc, #396]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f023 0220 	bic.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4960      	ldr	r1, [pc, #384]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005500:	4313      	orrs	r3, r2
 8005502:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005510:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	4958      	ldr	r1, [pc, #352]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800552e:	4b54      	ldr	r3, [pc, #336]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4951      	ldr	r1, [pc, #324]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	4949      	ldr	r1, [pc, #292]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4942      	ldr	r1, [pc, #264]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	493a      	ldr	r1, [pc, #232]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80055a6:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4933      	ldr	r1, [pc, #204]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055c4:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	492b      	ldr	r1, [pc, #172]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055e2:	4b27      	ldr	r3, [pc, #156]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	4924      	ldr	r1, [pc, #144]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	491c      	ldr	r1, [pc, #112]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	4915      	ldr	r1, [pc, #84]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	490d      	ldr	r1, [pc, #52]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	4906      	ldr	r1, [pc, #24]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005678:	4b01      	ldr	r3, [pc, #4]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	490b      	ldr	r1, [pc, #44]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800568e:	4313      	orrs	r3, r2
 8005690:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3748      	adds	r7, #72	; 0x48
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e049      	b.n	8005766 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc f8d2 	bl	8001890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 f94a 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800578a:	2302      	movs	r3, #2
 800578c:	e0ff      	b.n	800598e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b14      	cmp	r3, #20
 800579a:	f200 80f0 	bhi.w	800597e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	0800597f 	.word	0x0800597f
 80057ac:	0800597f 	.word	0x0800597f
 80057b0:	0800597f 	.word	0x0800597f
 80057b4:	08005839 	.word	0x08005839
 80057b8:	0800597f 	.word	0x0800597f
 80057bc:	0800597f 	.word	0x0800597f
 80057c0:	0800597f 	.word	0x0800597f
 80057c4:	0800587b 	.word	0x0800587b
 80057c8:	0800597f 	.word	0x0800597f
 80057cc:	0800597f 	.word	0x0800597f
 80057d0:	0800597f 	.word	0x0800597f
 80057d4:	080058bb 	.word	0x080058bb
 80057d8:	0800597f 	.word	0x0800597f
 80057dc:	0800597f 	.word	0x0800597f
 80057e0:	0800597f 	.word	0x0800597f
 80057e4:	080058fd 	.word	0x080058fd
 80057e8:	0800597f 	.word	0x0800597f
 80057ec:	0800597f 	.word	0x0800597f
 80057f0:	0800597f 	.word	0x0800597f
 80057f4:	0800593d 	.word	0x0800593d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f968 	bl	8005ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0208 	orr.w	r2, r2, #8
 8005812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0204 	bic.w	r2, r2, #4
 8005822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6999      	ldr	r1, [r3, #24]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	619a      	str	r2, [r3, #24]
      break;
 8005836:	e0a5      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f9e2 	bl	8005c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6999      	ldr	r1, [r3, #24]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	021a      	lsls	r2, r3, #8
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	619a      	str	r2, [r3, #24]
      break;
 8005878:	e084      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fa55 	bl	8005d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0208 	orr.w	r2, r2, #8
 8005894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0204 	bic.w	r2, r2, #4
 80058a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	61da      	str	r2, [r3, #28]
      break;
 80058b8:	e064      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fac7 	bl	8005e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69d9      	ldr	r1, [r3, #28]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	021a      	lsls	r2, r3, #8
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	61da      	str	r2, [r3, #28]
      break;
 80058fa:	e043      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fb16 	bl	8005f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0208 	orr.w	r2, r2, #8
 8005916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0204 	bic.w	r2, r2, #4
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800593a:	e023      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fb60 	bl	8006008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	021a      	lsls	r2, r3, #8
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800597c:	e002      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
      break;
 8005982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598c:	7dfb      	ldrb	r3, [r7, #23]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a42      	ldr	r2, [pc, #264]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a3e      	ldr	r2, [pc, #248]	; (8005abc <TIM_Base_SetConfig+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3d      	ldr	r2, [pc, #244]	; (8005ac0 <TIM_Base_SetConfig+0x128>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3c      	ldr	r2, [pc, #240]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a31      	ldr	r2, [pc, #196]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01f      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d01b      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2e      	ldr	r2, [pc, #184]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d017      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2d      	ldr	r2, [pc, #180]	; (8005abc <TIM_Base_SetConfig+0x124>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <TIM_Base_SetConfig+0x128>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2b      	ldr	r2, [pc, #172]	; (8005acc <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <TIM_Base_SetConfig+0x100>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <TIM_Base_SetConfig+0x128>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00f      	beq.n	8005a98 <TIM_Base_SetConfig+0x100>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00b      	beq.n	8005a98 <TIM_Base_SetConfig+0x100>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a12      	ldr	r2, [pc, #72]	; (8005acc <TIM_Base_SetConfig+0x134>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <TIM_Base_SetConfig+0x100>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_Base_SetConfig+0x100>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d103      	bne.n	8005aa0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40015000 	.word	0x40015000
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 0302 	bic.w	r3, r3, #2
 8005b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <TIM_OC1_SetConfig+0x11c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <TIM_OC1_SetConfig+0x88>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	; (8005bf4 <TIM_OC1_SetConfig+0x120>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00f      	beq.n	8005b5c <TIM_OC1_SetConfig+0x88>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <TIM_OC1_SetConfig+0x124>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC1_SetConfig+0x88>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <TIM_OC1_SetConfig+0x128>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC1_SetConfig+0x88>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <TIM_OC1_SetConfig+0x12c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC1_SetConfig+0x88>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <TIM_OC1_SetConfig+0x130>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10c      	bne.n	8005b76 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0308 	bic.w	r3, r3, #8
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <TIM_OC1_SetConfig+0x11c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xd2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <TIM_OC1_SetConfig+0x120>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xd2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <TIM_OC1_SetConfig+0x124>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xd2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <TIM_OC1_SetConfig+0x128>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xd2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <TIM_OC1_SetConfig+0x12c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xd2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <TIM_OC1_SetConfig+0x130>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d111      	bne.n	8005bca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800
 8005c04:	40015000 	.word	0x40015000

08005c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0320 	bic.w	r3, r3, #32
 8005c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <TIM_OC2_SetConfig+0x110>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_OC2_SetConfig+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	; (8005d1c <TIM_OC2_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC2_SetConfig+0x74>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2a      	ldr	r2, [pc, #168]	; (8005d20 <TIM_OC2_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10d      	bne.n	8005c98 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <TIM_OC2_SetConfig+0x110>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xc0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <TIM_OC2_SetConfig+0x114>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xc0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <TIM_OC2_SetConfig+0x11c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xc0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <TIM_OC2_SetConfig+0x120>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xc0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_OC2_SetConfig+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0xc0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC2_SetConfig+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d113      	bne.n	8005cf0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40015000 	.word	0x40015000
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	; (8005e3c <TIM_OC3_SetConfig+0x10c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_OC3_SetConfig+0x72>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_OC3_SetConfig+0x110>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0x72>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <TIM_OC3_SetConfig+0x114>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10d      	bne.n	8005dbe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <TIM_OC3_SetConfig+0x10c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_OC3_SetConfig+0xbe>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <TIM_OC3_SetConfig+0x110>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_OC3_SetConfig+0xbe>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <TIM_OC3_SetConfig+0x118>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_OC3_SetConfig+0xbe>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <TIM_OC3_SetConfig+0x11c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_OC3_SetConfig+0xbe>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <TIM_OC3_SetConfig+0x120>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_OC3_SetConfig+0xbe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <TIM_OC3_SetConfig+0x114>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d113      	bne.n	8005e16 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40015000 	.word	0x40015000
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	031b      	lsls	r3, r3, #12
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <TIM_OC4_SetConfig+0xc8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d013      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <TIM_OC4_SetConfig+0xcc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <TIM_OC4_SetConfig+0xd0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC4_SetConfig+0xd4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <TIM_OC4_SetConfig+0xd8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <TIM_OC4_SetConfig+0xdc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d109      	bne.n	8005ef4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800
 8005f30:	40015000 	.word	0x40015000

08005f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <TIM_OC5_SetConfig+0xbc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <TIM_OC5_SetConfig+0x82>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <TIM_OC5_SetConfig+0xc0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_OC5_SetConfig+0x82>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <TIM_OC5_SetConfig+0xc4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_OC5_SetConfig+0x82>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <TIM_OC5_SetConfig+0xc8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_OC5_SetConfig+0x82>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <TIM_OC5_SetConfig+0xcc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC5_SetConfig+0x82>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <TIM_OC5_SetConfig+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d109      	bne.n	8005fca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800
 8006004:	40015000 	.word	0x40015000

08006008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800604e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	051b      	lsls	r3, r3, #20
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <TIM_OC6_SetConfig+0xc0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_OC6_SetConfig+0x84>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a19      	ldr	r2, [pc, #100]	; (80060cc <TIM_OC6_SetConfig+0xc4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_OC6_SetConfig+0x84>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <TIM_OC6_SetConfig+0xc8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC6_SetConfig+0x84>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <TIM_OC6_SetConfig+0xcc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC6_SetConfig+0x84>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <TIM_OC6_SetConfig+0xd0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC6_SetConfig+0x84>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <TIM_OC6_SetConfig+0xd4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	40015000 	.word	0x40015000

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e06d      	b.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a30      	ldr	r2, [pc, #192]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800613c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d01d      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d018      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10c      	bne.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400
 80061e8:	40015000 	.word	0x40015000
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40014000 	.word	0x40014000

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e040      	b.n	800628c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb fbf0 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8c0 	bl	80063bc <UART_SetConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e022      	b.n	800628c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa88 	bl	8006764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fb0f 	bl	80068a8 <UART_CheckIdleState>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 8082 	bne.w	80063b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Transmit+0x26>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07a      	b.n	80063b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x38>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e073      	b.n	80063b4 <HAL_UART_Transmit+0x120>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	; 0x21
 80062e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e2:	f7fb fd87 	bl	8001df4 <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d108      	bne.n	8006314 <HAL_UART_Transmit+0x80>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e003      	b.n	800631c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006324:	e02d      	b.n	8006382 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2200      	movs	r2, #0
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fb02 	bl	800693a <UART_WaitOnFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e039      	b.n	80063b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	881a      	ldrh	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006352:	b292      	uxth	r2, r2
 8006354:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	3302      	adds	r3, #2
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e008      	b.n	8006370 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	b292      	uxth	r2, r2
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1cb      	bne.n	8006326 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	2140      	movs	r1, #64	; 0x40
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 face 	bl	800693a <UART_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e005      	b.n	80063b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4baa      	ldr	r3, [pc, #680]	; (8006690 <UART_SetConfig+0x2d4>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a98      	ldr	r2, [pc, #608]	; (8006694 <UART_SetConfig+0x2d8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d121      	bne.n	800647c <UART_SetConfig+0xc0>
 8006438:	4b97      	ldr	r3, [pc, #604]	; (8006698 <UART_SetConfig+0x2dc>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2b03      	cmp	r3, #3
 8006442:	d817      	bhi.n	8006474 <UART_SetConfig+0xb8>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x90>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	0800645d 	.word	0x0800645d
 8006450:	08006469 	.word	0x08006469
 8006454:	0800646f 	.word	0x0800646f
 8006458:	08006463 	.word	0x08006463
 800645c:	2301      	movs	r3, #1
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e0b2      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006462:	2302      	movs	r3, #2
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e0af      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006468:	2304      	movs	r3, #4
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e0ac      	b.n	80065c8 <UART_SetConfig+0x20c>
 800646e:	2308      	movs	r3, #8
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e0a9      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	bf00      	nop
 800647a:	e0a5      	b.n	80065c8 <UART_SetConfig+0x20c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a86      	ldr	r2, [pc, #536]	; (800669c <UART_SetConfig+0x2e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d123      	bne.n	80064ce <UART_SetConfig+0x112>
 8006486:	4b84      	ldr	r3, [pc, #528]	; (8006698 <UART_SetConfig+0x2dc>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d012      	beq.n	80064ba <UART_SetConfig+0xfe>
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d802      	bhi.n	80064a0 <UART_SetConfig+0xe4>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <UART_SetConfig+0xf2>
 800649e:	e012      	b.n	80064c6 <UART_SetConfig+0x10a>
 80064a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064a4:	d00c      	beq.n	80064c0 <UART_SetConfig+0x104>
 80064a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064aa:	d003      	beq.n	80064b4 <UART_SetConfig+0xf8>
 80064ac:	e00b      	b.n	80064c6 <UART_SetConfig+0x10a>
 80064ae:	2300      	movs	r3, #0
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e089      	b.n	80065c8 <UART_SetConfig+0x20c>
 80064b4:	2302      	movs	r3, #2
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e086      	b.n	80065c8 <UART_SetConfig+0x20c>
 80064ba:	2304      	movs	r3, #4
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e083      	b.n	80065c8 <UART_SetConfig+0x20c>
 80064c0:	2308      	movs	r3, #8
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e080      	b.n	80065c8 <UART_SetConfig+0x20c>
 80064c6:	2310      	movs	r3, #16
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	bf00      	nop
 80064cc:	e07c      	b.n	80065c8 <UART_SetConfig+0x20c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a73      	ldr	r2, [pc, #460]	; (80066a0 <UART_SetConfig+0x2e4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d123      	bne.n	8006520 <UART_SetConfig+0x164>
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <UART_SetConfig+0x2dc>)
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80064e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064e4:	d012      	beq.n	800650c <UART_SetConfig+0x150>
 80064e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ea:	d802      	bhi.n	80064f2 <UART_SetConfig+0x136>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <UART_SetConfig+0x144>
 80064f0:	e012      	b.n	8006518 <UART_SetConfig+0x15c>
 80064f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064f6:	d00c      	beq.n	8006512 <UART_SetConfig+0x156>
 80064f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064fc:	d003      	beq.n	8006506 <UART_SetConfig+0x14a>
 80064fe:	e00b      	b.n	8006518 <UART_SetConfig+0x15c>
 8006500:	2300      	movs	r3, #0
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e060      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e05d      	b.n	80065c8 <UART_SetConfig+0x20c>
 800650c:	2304      	movs	r3, #4
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e05a      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006512:	2308      	movs	r3, #8
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e057      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	bf00      	nop
 800651e:	e053      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a5f      	ldr	r2, [pc, #380]	; (80066a4 <UART_SetConfig+0x2e8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d123      	bne.n	8006572 <UART_SetConfig+0x1b6>
 800652a:	4b5b      	ldr	r3, [pc, #364]	; (8006698 <UART_SetConfig+0x2dc>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006536:	d012      	beq.n	800655e <UART_SetConfig+0x1a2>
 8006538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653c:	d802      	bhi.n	8006544 <UART_SetConfig+0x188>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <UART_SetConfig+0x196>
 8006542:	e012      	b.n	800656a <UART_SetConfig+0x1ae>
 8006544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006548:	d00c      	beq.n	8006564 <UART_SetConfig+0x1a8>
 800654a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800654e:	d003      	beq.n	8006558 <UART_SetConfig+0x19c>
 8006550:	e00b      	b.n	800656a <UART_SetConfig+0x1ae>
 8006552:	2300      	movs	r3, #0
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e037      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006558:	2302      	movs	r3, #2
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e034      	b.n	80065c8 <UART_SetConfig+0x20c>
 800655e:	2304      	movs	r3, #4
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e031      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006564:	2308      	movs	r3, #8
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e02e      	b.n	80065c8 <UART_SetConfig+0x20c>
 800656a:	2310      	movs	r3, #16
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	bf00      	nop
 8006570:	e02a      	b.n	80065c8 <UART_SetConfig+0x20c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a4c      	ldr	r2, [pc, #304]	; (80066a8 <UART_SetConfig+0x2ec>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d123      	bne.n	80065c4 <UART_SetConfig+0x208>
 800657c:	4b46      	ldr	r3, [pc, #280]	; (8006698 <UART_SetConfig+0x2dc>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006588:	d012      	beq.n	80065b0 <UART_SetConfig+0x1f4>
 800658a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658e:	d802      	bhi.n	8006596 <UART_SetConfig+0x1da>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <UART_SetConfig+0x1e8>
 8006594:	e012      	b.n	80065bc <UART_SetConfig+0x200>
 8006596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800659a:	d00c      	beq.n	80065b6 <UART_SetConfig+0x1fa>
 800659c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065a0:	d003      	beq.n	80065aa <UART_SetConfig+0x1ee>
 80065a2:	e00b      	b.n	80065bc <UART_SetConfig+0x200>
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e00e      	b.n	80065c8 <UART_SetConfig+0x20c>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e00b      	b.n	80065c8 <UART_SetConfig+0x20c>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e008      	b.n	80065c8 <UART_SetConfig+0x20c>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e005      	b.n	80065c8 <UART_SetConfig+0x20c>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	bf00      	nop
 80065c2:	e001      	b.n	80065c8 <UART_SetConfig+0x20c>
 80065c4:	2310      	movs	r3, #16
 80065c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	d16e      	bne.n	80066b0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80065d2:	7ffb      	ldrb	r3, [r7, #31]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d828      	bhi.n	800662a <UART_SetConfig+0x26e>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <UART_SetConfig+0x224>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	0800662b 	.word	0x0800662b
 80065f0:	0800661b 	.word	0x0800661b
 80065f4:	0800662b 	.word	0x0800662b
 80065f8:	0800662b 	.word	0x0800662b
 80065fc:	0800662b 	.word	0x0800662b
 8006600:	08006623 	.word	0x08006623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006604:	f7fe fdfa 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8006608:	61b8      	str	r0, [r7, #24]
        break;
 800660a:	e013      	b.n	8006634 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800660c:	f7fe fe18 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 8006610:	61b8      	str	r0, [r7, #24]
        break;
 8006612:	e00f      	b.n	8006634 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <UART_SetConfig+0x2f0>)
 8006616:	61bb      	str	r3, [r7, #24]
        break;
 8006618:	e00c      	b.n	8006634 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661a:	f7fe fd79 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 800661e:	61b8      	str	r0, [r7, #24]
        break;
 8006620:	e008      	b.n	8006634 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	61bb      	str	r3, [r7, #24]
        break;
 8006628:	e004      	b.n	8006634 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	77bb      	strb	r3, [r7, #30]
        break;
 8006632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 8086 	beq.w	8006748 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	005a      	lsls	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	441a      	add	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	b29b      	uxth	r3, r3
 8006652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d916      	bls.n	8006688 <UART_SetConfig+0x2cc>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d212      	bcs.n	8006688 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f023 030f 	bic.w	r3, r3, #15
 800666a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b29a      	uxth	r2, r3
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	4313      	orrs	r3, r2
 800667c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	89fa      	ldrh	r2, [r7, #14]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e05f      	b.n	8006748 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
 800668c:	e05c      	b.n	8006748 <UART_SetConfig+0x38c>
 800668e:	bf00      	nop
 8006690:	efff69f3 	.word	0xefff69f3
 8006694:	40013800 	.word	0x40013800
 8006698:	40021000 	.word	0x40021000
 800669c:	40004400 	.word	0x40004400
 80066a0:	40004800 	.word	0x40004800
 80066a4:	40004c00 	.word	0x40004c00
 80066a8:	40005000 	.word	0x40005000
 80066ac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b0:	7ffb      	ldrb	r3, [r7, #31]
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d827      	bhi.n	8006706 <UART_SetConfig+0x34a>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x300>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	08006707 	.word	0x08006707
 80066cc:	080066f7 	.word	0x080066f7
 80066d0:	08006707 	.word	0x08006707
 80066d4:	08006707 	.word	0x08006707
 80066d8:	08006707 	.word	0x08006707
 80066dc:	080066ff 	.word	0x080066ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fe fd8c 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 80066e4:	61b8      	str	r0, [r7, #24]
        break;
 80066e6:	e013      	b.n	8006710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fe fdaa 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 80066ec:	61b8      	str	r0, [r7, #24]
        break;
 80066ee:	e00f      	b.n	8006710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f0:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <UART_SetConfig+0x3a4>)
 80066f2:	61bb      	str	r3, [r7, #24]
        break;
 80066f4:	e00c      	b.n	8006710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fe fd0b 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80066fa:	61b8      	str	r0, [r7, #24]
        break;
 80066fc:	e008      	b.n	8006710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	61bb      	str	r3, [r7, #24]
        break;
 8006704:	e004      	b.n	8006710 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77bb      	strb	r3, [r7, #30]
        break;
 800670e:	bf00      	nop
    }

    if (pclk != 0U)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d018      	beq.n	8006748 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	085a      	lsrs	r2, r3, #1
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	441a      	add	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	b29b      	uxth	r3, r3
 800672a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	d908      	bls.n	8006744 <UART_SetConfig+0x388>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006738:	d204      	bcs.n	8006744 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	e001      	b.n	8006748 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006754:	7fbb      	ldrb	r3, [r7, #30]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	007a1200 	.word	0x007a1200

08006764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01a      	beq.n	800687a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006862:	d10a      	bne.n	800687a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b8:	f7fb fa9c 	bl	8001df4 <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d10e      	bne.n	80068ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f82d 	bl	800693a <UART_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e023      	b.n	8006932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d10e      	bne.n	8006916 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f817 	bl	800693a <UART_WaitOnFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e00d      	b.n	8006932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b09c      	sub	sp, #112	; 0x70
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	4613      	mov	r3, r2
 8006948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694a:	e0a5      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	f000 80a1 	beq.w	8006a98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fb fa4d 	bl	8001df4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <UART_WaitOnFlagUntilTimeout+0x32>
 8006966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006968:	2b00      	cmp	r3, #0
 800696a:	d13e      	bne.n	80069ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006980:	667b      	str	r3, [r7, #100]	; 0x64
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800698c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006990:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e6      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	663b      	str	r3, [r7, #96]	; 0x60
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069be:	64ba      	str	r2, [r7, #72]	; 0x48
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e5      	bne.n	800699e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e067      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d04f      	beq.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a06:	d147      	bne.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a64:	623a      	str	r2, [r7, #32]
 8006a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	69f9      	ldr	r1, [r7, #28]
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e010      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	f43f af4a 	beq.w	800694c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3770      	adds	r7, #112	; 0x70
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fccd 	bl	8008472 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006ae8:	b5b0      	push	{r4, r5, r7, lr}
 8006aea:	b096      	sub	sp, #88	; 0x58
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006af6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2188      	movs	r1, #136	; 0x88
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f004 fed0 	bl	800b8a8 <VL53L0X_WrByte>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b1c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b26:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a9e      	ldr	r2, [pc, #632]	; (8006da8 <VL53L0X_DataInit+0x2c0>)
 8006b2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a9d      	ldr	r2, [pc, #628]	; (8006dac <VL53L0X_DataInit+0x2c4>)
 8006b36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006b40:	f107 0310 	add.w	r3, r7, #16
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fac2 	bl	80070d0 <VL53L0X_GetDeviceParameters>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006b52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d112      	bne.n	8006b80 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f103 0410 	add.w	r4, r3, #16
 8006b68:	f107 0510 	add.w	r5, r7, #16
 8006b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2264      	movs	r2, #100	; 0x64
 8006b84:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006b8e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b98:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ba2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006bae:	2201      	movs	r2, #1
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f004 fe78 	bl	800b8a8 <VL53L0X_WrByte>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	21ff      	movs	r1, #255	; 0xff
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f004 fe6c 	bl	800b8a8 <VL53L0X_WrByte>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006bde:	2200      	movs	r2, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f004 fe60 	bl	800b8a8 <VL53L0X_WrByte>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006bf6:	f107 030f 	add.w	r3, r7, #15
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2191      	movs	r1, #145	; 0x91
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f004 fed4 	bl	800b9ac <VL53L0X_RdByte>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006c12:	7bfa      	ldrb	r2, [r7, #15]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f004 fe42 	bl	800b8a8 <VL53L0X_WrByte>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c32:	2200      	movs	r2, #0
 8006c34:	21ff      	movs	r1, #255	; 0xff
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f004 fe36 	bl	800b8a8 <VL53L0X_WrByte>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f004 fe2a 	bl	800b8a8 <VL53L0X_WrByte>
 8006c54:	4603      	mov	r3, r0
 8006c56:	461a      	mov	r2, r3
 8006c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006c62:	2300      	movs	r3, #0
 8006c64:	653b      	str	r3, [r7, #80]	; 0x50
 8006c66:	e014      	b.n	8006c92 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d114      	bne.n	8006c9a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2201      	movs	r2, #1
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fd51 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8e:	3301      	adds	r3, #1
 8006c90:	653b      	str	r3, [r7, #80]	; 0x50
 8006c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	dde7      	ble.n	8006c68 <VL53L0X_DataInit+0x180>
 8006c98:	e000      	b.n	8006c9c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006c9a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d107      	bne.n	8006cb4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fd39 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006cb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d107      	bne.n	8006ccc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2103      	movs	r1, #3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd2d 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006ccc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d107      	bne.n	8006ce4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2104      	movs	r1, #4
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd21 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006ce4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d107      	bne.n	8006cfc <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006cec:	2200      	movs	r2, #0
 8006cee:	2105      	movs	r1, #5
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fd15 	bl	8007720 <VL53L0X_SetLimitCheckEnable>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006cfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d108      	bne.n	8006d16 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006d04:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fdb8 	bl	8007880 <VL53L0X_SetLimitCheckValue>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d108      	bne.n	8006d30 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fdab 	bl	8007880 <VL53L0X_SetLimitCheckValue>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d108      	bne.n	8006d4a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006d38:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fd9e 	bl	8007880 <VL53L0X_SetLimitCheckValue>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d107      	bne.n	8006d62 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006d52:	2200      	movs	r2, #0
 8006d54:	2103      	movs	r1, #3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fd92 	bl	8007880 <VL53L0X_SetLimitCheckValue>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10f      	bne.n	8006d8a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	22ff      	movs	r2, #255	; 0xff
 8006d6e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d72:	22ff      	movs	r2, #255	; 0xff
 8006d74:	2101      	movs	r1, #1
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f004 fd96 	bl	800b8a8 <VL53L0X_WrByte>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006d8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006d9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3758      	adds	r7, #88	; 0x58
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bdb0      	pop	{r4, r5, r7, pc}
 8006da6:	bf00      	nop
 8006da8:	00016b85 	.word	0x00016b85
 8006dac:	000970a4 	.word	0x000970a4

08006db0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b09e      	sub	sp, #120	; 0x78
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006dbe:	f107 031c 	add.w	r3, r7, #28
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f004 fed3 	bl	800bb72 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f002 fa95 	bl	800931e <VL53L0X_get_info_from_device>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d80d      	bhi.n	8006e30 <VL53L0X_StaticInit+0x80>
 8006e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d806      	bhi.n	8006e30 <VL53L0X_StaticInit+0x80>
 8006e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10e      	bne.n	8006e48 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d90b      	bls.n	8006e48 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006e30:	f107 0218 	add.w	r2, r7, #24
 8006e34:	f107 0314 	add.w	r3, r7, #20
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fd14 	bl	8008868 <VL53L0X_perform_ref_spad_management>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006e46:	e009      	b.n	8006e5c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 ff15 	bl	8008c80 <VL53L0X_set_reference_spads>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006e5c:	4b94      	ldr	r3, [pc, #592]	; (80070b0 <VL53L0X_StaticInit+0x300>)
 8006e5e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006e60:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10f      	bne.n	8006e88 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e82:	e001      	b.n	8006e88 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006e84:	4b8a      	ldr	r3, [pc, #552]	; (80070b0 <VL53L0X_StaticInit+0x300>)
 8006e86:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006e88:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006e90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f003 fde8 	bl	800aa68 <VL53L0X_load_tuning_settings>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	2304      	movs	r3, #4
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f90d 	bl	80080d0 <VL53L0X_SetGpioConfig>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ebc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d121      	bne.n	8006f08 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	21ff      	movs	r1, #255	; 0xff
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f004 fced 	bl	800b8a8 <VL53L0X_WrByte>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006ed4:	f107 031a 	add.w	r3, r7, #26
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2184      	movs	r1, #132	; 0x84
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f004 fd8f 	bl	800ba00 <VL53L0X_RdWord>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	21ff      	movs	r1, #255	; 0xff
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f004 fcd7 	bl	800b8a8 <VL53L0X_WrByte>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f08:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006f10:	8b7b      	ldrh	r3, [r7, #26]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006f1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8d0 	bl	80070d0 <VL53L0X_GetDeviceParameters>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006f36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d110      	bne.n	8006f60 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006f3e:	f107 0319 	add.w	r3, r7, #25
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f9ae 	bl	80072a6 <VL53L0X_GetFractionEnable>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006f50:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006f58:	7e7a      	ldrb	r2, [r7, #25]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006f60:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10e      	bne.n	8006f86 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f103 0410 	add.w	r4, r3, #16
 8006f6e:	f107 051c 	add.w	r5, r7, #28
 8006f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d111      	bne.n	8006fb2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006f8e:	f107 0319 	add.w	r3, r7, #25
 8006f92:	461a      	mov	r2, r3
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f004 fd08 	bl	800b9ac <VL53L0X_RdByte>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006fa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006faa:	7e7a      	ldrb	r2, [r7, #25]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006fb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d107      	bne.n	8006fca <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9e6 	bl	8007390 <VL53L0X_SetSequenceStepEnable>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006fca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9da 	bl	8007390 <VL53L0X_SetSequenceStepEnable>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006fe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2203      	movs	r2, #3
 8006fee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ff2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006ffa:	f107 0313 	add.w	r3, r7, #19
 8006ffe:	461a      	mov	r2, r3
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9ac 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800700e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007016:	7cfa      	ldrb	r2, [r7, #19]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800701e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007026:	f107 0313 	add.w	r3, r7, #19
 800702a:	461a      	mov	r2, r3
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f996 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800703a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007042:	7cfa      	ldrb	r2, [r7, #19]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800704a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007052:	f107 030c 	add.w	r3, r7, #12
 8007056:	461a      	mov	r2, r3
 8007058:	2103      	movs	r1, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f002 fee0 	bl	8009e20 <get_sequence_step_timeout>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007066:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007076:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	461a      	mov	r2, r3
 8007084:	2104      	movs	r1, #4
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f002 feca 	bl	8009e20 <get_sequence_step_timeout>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007092:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3770      	adds	r7, #112	; 0x70
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bdb0      	pop	{r4, r5, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000010 	.word	0x20000010

080070b4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80070bc:	239d      	movs	r3, #157	; 0x9d
 80070be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80070c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8cc 	bl	8007280 <VL53L0X_GetDeviceMode>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d107      	bne.n	8007104 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa94 	bl	8007628 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d107      	bne.n	800712a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	3310      	adds	r3, #16
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 faca 	bl	80076ba <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800712a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	3314      	adds	r3, #20
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fcc2 	bl	8006ac2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d134      	bne.n	80071b4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800714a:	2300      	movs	r3, #0
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	e02a      	b.n	80071a6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d12a      	bne.n	80071ae <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	b299      	uxth	r1, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3308      	adds	r3, #8
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4413      	add	r3, r2
 8007166:	3304      	adds	r3, #4
 8007168:	461a      	mov	r2, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fbea 	bl	8007944 <VL53L0X_GetLimitCheckValue>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	4313      	orrs	r3, r2
 8007178:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800717a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d117      	bne.n	80071b2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	b299      	uxth	r1, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3318      	adds	r3, #24
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	4413      	add	r3, r2
 800718e:	461a      	mov	r2, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb51 	bl	8007838 <VL53L0X_GetLimitCheckEnable>
 8007196:	4603      	mov	r3, r0
 8007198:	461a      	mov	r2, r3
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	4313      	orrs	r3, r2
 800719e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b05      	cmp	r3, #5
 80071aa:	ddd1      	ble.n	8007150 <VL53L0X_GetDeviceParameters+0x80>
 80071ac:	e002      	b.n	80071b4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80071ae:	bf00      	nop
 80071b0:	e000      	b.n	80071b4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80071b2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	333c      	adds	r3, #60	; 0x3c
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc4c 	bl	8007a60 <VL53L0X_GetWrapAroundCheckEnable>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80071cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d107      	bne.n	80071e4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f895 	bl	800730a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	2b15      	cmp	r3, #21
 8007204:	d832      	bhi.n	800726c <VL53L0X_SetDeviceMode+0x7c>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <VL53L0X_SetDeviceMode+0x1c>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007265 	.word	0x08007265
 8007210:	08007265 	.word	0x08007265
 8007214:	0800726d 	.word	0x0800726d
 8007218:	08007265 	.word	0x08007265
 800721c:	0800726d 	.word	0x0800726d
 8007220:	0800726d 	.word	0x0800726d
 8007224:	0800726d 	.word	0x0800726d
 8007228:	0800726d 	.word	0x0800726d
 800722c:	0800726d 	.word	0x0800726d
 8007230:	0800726d 	.word	0x0800726d
 8007234:	0800726d 	.word	0x0800726d
 8007238:	0800726d 	.word	0x0800726d
 800723c:	0800726d 	.word	0x0800726d
 8007240:	0800726d 	.word	0x0800726d
 8007244:	0800726d 	.word	0x0800726d
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800726d 	.word	0x0800726d
 8007250:	0800726d 	.word	0x0800726d
 8007254:	0800726d 	.word	0x0800726d
 8007258:	0800726d 	.word	0x0800726d
 800725c:	08007265 	.word	0x08007265
 8007260:	08007265 	.word	0x08007265
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	741a      	strb	r2, [r3, #16]
		break;
 800726a:	e001      	b.n	8007270 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800726c:	23f8      	movs	r3, #248	; 0xf8
 800726e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7c1a      	ldrb	r2, [r3, #16]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	2109      	movs	r1, #9
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f004 fb77 	bl	800b9ac <VL53L0X_RdByte>
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80072c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80072d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f003 fa26 	bl	800a746 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80072fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f003 faf3 	bl	800a906 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
 800733c:	4613      	mov	r3, r2
 800733e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007344:	78ba      	ldrb	r2, [r7, #2]
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 ff3b 	bl	800a1c6 <VL53L0X_set_vcsel_pulse_period>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	460b      	mov	r3, r1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4619      	mov	r1, r3
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f003 f9ad 	bl	800a6d8 <VL53L0X_get_vcsel_pulse_period>
 800737e:	4603      	mov	r3, r0
 8007380:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
 800739c:	4613      	mov	r3, r2
 800739e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80073ac:	f107 030f 	add.w	r3, r7, #15
 80073b0:	461a      	mov	r2, r3
 80073b2:	2101      	movs	r1, #1
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f004 faf9 	bl	800b9ac <VL53L0X_RdByte>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80073c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d15a      	bne.n	8007480 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80073ca:	78bb      	ldrb	r3, [r7, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d12b      	bne.n	8007428 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d825      	bhi.n	8007422 <VL53L0X_SetSequenceStepEnable+0x92>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <VL53L0X_SetSequenceStepEnable+0x4c>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	080073f1 	.word	0x080073f1
 80073e0:	080073fb 	.word	0x080073fb
 80073e4:	08007405 	.word	0x08007405
 80073e8:	0800740f 	.word	0x0800740f
 80073ec:	08007419 	.word	0x08007419
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80073f0:	7dbb      	ldrb	r3, [r7, #22]
 80073f2:	f043 0310 	orr.w	r3, r3, #16
 80073f6:	75bb      	strb	r3, [r7, #22]
				break;
 80073f8:	e043      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80073fa:	7dbb      	ldrb	r3, [r7, #22]
 80073fc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007400:	75bb      	strb	r3, [r7, #22]
				break;
 8007402:	e03e      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007404:	7dbb      	ldrb	r3, [r7, #22]
 8007406:	f043 0304 	orr.w	r3, r3, #4
 800740a:	75bb      	strb	r3, [r7, #22]
				break;
 800740c:	e039      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800740e:	7dbb      	ldrb	r3, [r7, #22]
 8007410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007414:	75bb      	strb	r3, [r7, #22]
				break;
 8007416:	e034      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007418:	7dbb      	ldrb	r3, [r7, #22]
 800741a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800741e:	75bb      	strb	r3, [r7, #22]
				break;
 8007420:	e02f      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007422:	23fc      	movs	r3, #252	; 0xfc
 8007424:	75fb      	strb	r3, [r7, #23]
 8007426:	e02c      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d825      	bhi.n	800747a <VL53L0X_SetSequenceStepEnable+0xea>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007449 	.word	0x08007449
 8007438:	08007453 	.word	0x08007453
 800743c:	0800745d 	.word	0x0800745d
 8007440:	08007467 	.word	0x08007467
 8007444:	08007471 	.word	0x08007471
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007448:	7dbb      	ldrb	r3, [r7, #22]
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	75bb      	strb	r3, [r7, #22]
				break;
 8007450:	e017      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007458:	75bb      	strb	r3, [r7, #22]
				break;
 800745a:	e012      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800745c:	7dbb      	ldrb	r3, [r7, #22]
 800745e:	f023 0304 	bic.w	r3, r3, #4
 8007462:	75bb      	strb	r3, [r7, #22]
				break;
 8007464:	e00d      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007466:	7dbb      	ldrb	r3, [r7, #22]
 8007468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746c:	75bb      	strb	r3, [r7, #22]
				break;
 800746e:	e008      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007470:	7dbb      	ldrb	r3, [r7, #22]
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	75bb      	strb	r3, [r7, #22]
				break;
 8007478:	e003      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800747a:	23fc      	movs	r3, #252	; 0xfc
 800747c:	75fb      	strb	r3, [r7, #23]
 800747e:	e000      	b.n	8007482 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007480:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	7dba      	ldrb	r2, [r7, #22]
 8007486:	429a      	cmp	r2, r3
 8007488:	d01e      	beq.n	80074c8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800748a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007492:	7dbb      	ldrb	r3, [r7, #22]
 8007494:	461a      	mov	r2, r3
 8007496:	2101      	movs	r1, #1
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f004 fa05 	bl	800b8a8 <VL53L0X_WrByte>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80074a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7dba      	ldrb	r2, [r7, #22]
 80074ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80074b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80074c0:	6939      	ldr	r1, [r7, #16]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ff0e 	bl	80072e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80074c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	607b      	str	r3, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	72fb      	strb	r3, [r7, #11]
 80074e2:	4613      	mov	r3, r2
 80074e4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d836      	bhi.n	8007564 <sequence_step_enabled+0x90>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <sequence_step_enabled+0x28>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007511 	.word	0x08007511
 8007500:	08007523 	.word	0x08007523
 8007504:	08007535 	.word	0x08007535
 8007508:	08007547 	.word	0x08007547
 800750c:	08007559 	.word	0x08007559
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007510:	7abb      	ldrb	r3, [r7, #10]
 8007512:	111b      	asrs	r3, r3, #4
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	701a      	strb	r2, [r3, #0]
		break;
 8007520:	e022      	b.n	8007568 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007522:	7abb      	ldrb	r3, [r7, #10]
 8007524:	10db      	asrs	r3, r3, #3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	b2da      	uxtb	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	701a      	strb	r2, [r3, #0]
		break;
 8007532:	e019      	b.n	8007568 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007534:	7abb      	ldrb	r3, [r7, #10]
 8007536:	109b      	asrs	r3, r3, #2
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	701a      	strb	r2, [r3, #0]
		break;
 8007544:	e010      	b.n	8007568 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007546:	7abb      	ldrb	r3, [r7, #10]
 8007548:	119b      	asrs	r3, r3, #6
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	701a      	strb	r2, [r3, #0]
		break;
 8007556:	e007      	b.n	8007568 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007558:	7abb      	ldrb	r3, [r7, #10]
 800755a:	09db      	lsrs	r3, r3, #7
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	701a      	strb	r2, [r3, #0]
		break;
 8007562:	e001      	b.n	8007568 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007564:	23fc      	movs	r3, #252	; 0xfc
 8007566:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800758a:	f107 030e 	add.w	r3, r7, #14
 800758e:	461a      	mov	r2, r3
 8007590:	2101      	movs	r1, #1
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f004 fa0a 	bl	800b9ac <VL53L0X_RdByte>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800759c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d107      	bne.n	80075b4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80075a4:	7bba      	ldrb	r2, [r7, #14]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ff92 	bl	80074d4 <sequence_step_enabled>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80075bc:	7bba      	ldrb	r2, [r7, #14]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	3302      	adds	r3, #2
 80075c2:	2101      	movs	r1, #1
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff85 	bl	80074d4 <sequence_step_enabled>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80075d6:	7bba      	ldrb	r2, [r7, #14]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	2102      	movs	r1, #2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff ff78 	bl	80074d4 <sequence_step_enabled>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d108      	bne.n	8007602 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80075f0:	7bba      	ldrb	r2, [r7, #14]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3303      	adds	r3, #3
 80075f6:	2103      	movs	r1, #3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff6b 	bl	80074d4 <sequence_step_enabled>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d108      	bne.n	800761c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800760a:	7bba      	ldrb	r2, [r7, #14]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	3304      	adds	r3, #4
 8007610:	2104      	movs	r1, #4
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff ff5e 	bl	80074d4 <sequence_step_enabled>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800761c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	461a      	mov	r2, r3
 800763c:	21f8      	movs	r1, #248	; 0xf8
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f004 f9de 	bl	800ba00 <VL53L0X_RdWord>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d108      	bne.n	8007662 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007650:	f107 0308 	add.w	r3, r7, #8
 8007654:	461a      	mov	r2, r3
 8007656:	2104      	movs	r1, #4
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f004 fa09 	bl	800ba70 <VL53L0X_RdDWord>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10c      	bne.n	8007684 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800766a:	89bb      	ldrh	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	89ba      	ldrh	r2, [r7, #12]
 8007674:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7f1b      	ldrb	r3, [r3, #28]
 80076a2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	7bba      	ldrb	r2, [r7, #14]
 80076a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80076aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80076c8:	f107 030e 	add.w	r3, r7, #14
 80076cc:	461a      	mov	r2, r3
 80076ce:	2120      	movs	r1, #32
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f004 f995 	bl	800ba00 <VL53L0X_RdWord>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80076da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d118      	bne.n	8007714 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	771a      	strb	r2, [r3, #28]
 80076fa:	e00b      	b.n	8007714 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007714:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	807b      	strh	r3, [r7, #2]
 800772c:	4613      	mov	r3, r2
 800772e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007740:	887b      	ldrh	r3, [r7, #2]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d902      	bls.n	800774c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007746:	23fc      	movs	r3, #252	; 0xfc
 8007748:	75fb      	strb	r3, [r7, #23]
 800774a:	e05b      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800774c:	787b      	ldrb	r3, [r7, #1]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800775a:	2301      	movs	r3, #1
 800775c:	73bb      	strb	r3, [r7, #14]
 800775e:	e00a      	b.n	8007776 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007760:	887b      	ldrh	r3, [r7, #2]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	330c      	adds	r3, #12
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007776:	887b      	ldrh	r3, [r7, #2]
 8007778:	2b05      	cmp	r3, #5
 800777a:	d841      	bhi.n	8007800 <VL53L0X_SetLimitCheckEnable+0xe0>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <VL53L0X_SetLimitCheckEnable+0x64>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	0800779d 	.word	0x0800779d
 8007788:	080077a7 	.word	0x080077a7
 800778c:	080077bd 	.word	0x080077bd
 8007790:	080077c7 	.word	0x080077c7
 8007794:	080077d1 	.word	0x080077d1
 8007798:	080077e9 	.word	0x080077e9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	7bfa      	ldrb	r2, [r7, #15]
 80077a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80077a4:	e02e      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	2144      	movs	r1, #68	; 0x44
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f004 f89d 	bl	800b8f0 <VL53L0X_WrWord>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

			break;
 80077ba:	e023      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7bfa      	ldrb	r2, [r7, #15]
 80077c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80077c4:	e01e      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7bfa      	ldrb	r2, [r7, #15]
 80077ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80077ce:	e019      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	22fe      	movs	r2, #254	; 0xfe
 80077da:	2160      	movs	r1, #96	; 0x60
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f004 f8b1 	bl	800b944 <VL53L0X_UpdateByte>
 80077e2:	4603      	mov	r3, r0
 80077e4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80077e6:	e00d      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	22ef      	movs	r2, #239	; 0xef
 80077f2:	2160      	movs	r1, #96	; 0x60
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f004 f8a5 	bl	800b944 <VL53L0X_UpdateByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80077fe:	e001      	b.n	8007804 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007800:	23fc      	movs	r3, #252	; 0xfc
 8007802:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10f      	bne.n	800782c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800780c:	787b      	ldrb	r3, [r7, #1]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800781e:	e005      	b.n	800782c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007820:	887b      	ldrh	r3, [r7, #2]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800782c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	460b      	mov	r3, r1
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d905      	bls.n	800785c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007850:	23fc      	movs	r3, #252	; 0xfc
 8007852:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e008      	b.n	800786e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007866:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7dba      	ldrb	r2, [r7, #22]
 800786c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800786e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800788e:	2300      	movs	r3, #0
 8007890:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007892:	897b      	ldrh	r3, [r7, #10]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800789c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800789e:	7dbb      	ldrb	r3, [r7, #22]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d107      	bne.n	80078b4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078a4:	897b      	ldrh	r3, [r7, #10]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	330c      	adds	r3, #12
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	e040      	b.n	8007936 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80078b4:	897b      	ldrh	r3, [r7, #10]
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d830      	bhi.n	800791c <VL53L0X_SetLimitCheckValue+0x9c>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <VL53L0X_SetLimitCheckValue+0x40>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078e1 	.word	0x080078e1
 80078c8:	080078f7 	.word	0x080078f7
 80078cc:	080078ff 	.word	0x080078ff
 80078d0:	08007907 	.word	0x08007907
 80078d4:	08007907 	.word	0x08007907

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80078de:	e01f      	b.n	8007920 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	2144      	movs	r1, #68	; 0x44
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f004 f800 	bl	800b8f0 <VL53L0X_WrWord>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80078f4:	e014      	b.n	8007920 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80078fc:	e010      	b.n	8007920 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007904:	e00c      	b.n	8007920 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800790a:	b29b      	uxth	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	2164      	movs	r1, #100	; 0x64
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f003 ffed 	bl	800b8f0 <VL53L0X_WrWord>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800791a:	e001      	b.n	8007920 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800791c:	23fc      	movs	r3, #252	; 0xfc
 800791e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007928:	897b      	ldrh	r3, [r7, #10]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	330c      	adds	r3, #12
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	460b      	mov	r3, r1
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007952:	2300      	movs	r3, #0
 8007954:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800795a:	897b      	ldrh	r3, [r7, #10]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d847      	bhi.n	80079f0 <VL53L0X_GetLimitCheckValue+0xac>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <VL53L0X_GetLimitCheckValue+0x24>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007981 	.word	0x08007981
 800796c:	0800798d 	.word	0x0800798d
 8007970:	080079b3 	.word	0x080079b3
 8007974:	080079bf 	.word	0x080079bf
 8007978:	080079cb 	.word	0x080079cb
 800797c:	080079cb 	.word	0x080079cb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	77bb      	strb	r3, [r7, #30]
		break;
 800798a:	e033      	b.n	80079f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800798c:	f107 0316 	add.w	r3, r7, #22
 8007990:	461a      	mov	r2, r3
 8007992:	2144      	movs	r1, #68	; 0x44
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f004 f833 	bl	800ba00 <VL53L0X_RdWord>
 800799a:	4603      	mov	r3, r0
 800799c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800799e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d102      	bne.n	80079ac <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80079ac:	2301      	movs	r3, #1
 80079ae:	77bb      	strb	r3, [r7, #30]
		break;
 80079b0:	e020      	b.n	80079f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	77bb      	strb	r3, [r7, #30]
		break;
 80079bc:	e01a      	b.n	80079f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	77bb      	strb	r3, [r7, #30]
		break;
 80079c8:	e014      	b.n	80079f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80079ca:	f107 0316 	add.w	r3, r7, #22
 80079ce:	461a      	mov	r2, r3
 80079d0:	2164      	movs	r1, #100	; 0x64
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f004 f814 	bl	800ba00 <VL53L0X_RdWord>
 80079d8:	4603      	mov	r3, r0
 80079da:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80079dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d102      	bne.n	80079ea <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80079e4:	8afb      	ldrh	r3, [r7, #22]
 80079e6:	025b      	lsls	r3, r3, #9
 80079e8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	77bb      	strb	r3, [r7, #30]
		break;
 80079ee:	e001      	b.n	80079f4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079f0:	23fc      	movs	r3, #252	; 0xfc
 80079f2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80079f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d12a      	bne.n	8007a52 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80079fc:	7fbb      	ldrb	r3, [r7, #30]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d124      	bne.n	8007a4c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007a08:	897b      	ldrh	r3, [r7, #10]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007a1c:	897b      	ldrh	r3, [r7, #10]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007a28:	e013      	b.n	8007a52 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007a30:	897b      	ldrh	r3, [r7, #10]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	330c      	adds	r3, #12
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007a3e:	897b      	ldrh	r3, [r7, #10]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007a4a:	e002      	b.n	8007a52 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a52:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop

08007a60 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007a6e:	f107 030e 	add.w	r3, r7, #14
 8007a72:	461a      	mov	r2, r3
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f003 ff98 	bl	800b9ac <VL53L0X_RdByte>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10e      	bne.n	8007aa6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007a88:	7bba      	ldrb	r2, [r7, #14]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	b25b      	sxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da03      	bge.n	8007aa0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007ad0:	f107 030e 	add.w	r3, r7, #14
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fbd2 	bl	8007280 <VL53L0X_GetDeviceMode>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d107      	bne.n	8007af8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f898 	bl	8007c24 <VL53L0X_StartMeasurement>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fb3f 	bl	8009184 <VL53L0X_measurement_poll_for_completion>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fae1 	bl	800910a <VL53L0X_perform_ref_calibration>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007b6e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007b70:	7dbb      	ldrb	r3, [r7, #22]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d005      	beq.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d002      	beq.n	8007b82 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007b7c:	7dbb      	ldrb	r3, [r7, #22]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d147      	bne.n	8007c12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	f107 0210 	add.w	r2, r7, #16
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fbc3 	bl	8008318 <VL53L0X_GetInterruptThresholds>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007b9c:	d803      	bhi.n	8007ba6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007b9e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007ba0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007ba4:	d935      	bls.n	8007c12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d131      	bne.n	8007c12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007bb4:	491a      	ldr	r1, [pc, #104]	; (8007c20 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 ff56 	bl	800aa68 <VL53L0X_load_tuning_settings>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75fb      	strb	r3, [r7, #23]
 8007bc0:	e027      	b.n	8007c12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	21ff      	movs	r1, #255	; 0xff
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f003 fe6e 	bl	800b8a8 <VL53L0X_WrByte>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2170      	movs	r1, #112	; 0x70
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f003 fe64 	bl	800b8a8 <VL53L0X_WrByte>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007bea:	2200      	movs	r2, #0
 8007bec:	21ff      	movs	r1, #255	; 0xff
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f003 fe5a 	bl	800b8a8 <VL53L0X_WrByte>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2180      	movs	r1, #128	; 0x80
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f003 fe50 	bl	800b8a8 <VL53L0X_WrByte>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007c12:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000104 	.word	0x20000104

08007c24 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007c34:	f107 030e 	add.w	r3, r7, #14
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fb20 	bl	8007280 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007c40:	2201      	movs	r2, #1
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f003 fe2f 	bl	800b8a8 <VL53L0X_WrByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c4e:	2201      	movs	r2, #1
 8007c50:	21ff      	movs	r1, #255	; 0xff
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 fe28 	bl	800b8a8 <VL53L0X_WrByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f003 fe21 	bl	800b8a8 <VL53L0X_WrByte>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007c70:	461a      	mov	r2, r3
 8007c72:	2191      	movs	r1, #145	; 0x91
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f003 fe17 	bl	800b8a8 <VL53L0X_WrByte>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007c7e:	2201      	movs	r2, #1
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f003 fe10 	bl	800b8a8 <VL53L0X_WrByte>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	21ff      	movs	r1, #255	; 0xff
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f003 fe09 	bl	800b8a8 <VL53L0X_WrByte>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f003 fe02 	bl	800b8a8 <VL53L0X_WrByte>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d037      	beq.n	8007d1e <VL53L0X_StartMeasurement+0xfa>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d04f      	beq.n	8007d52 <VL53L0X_StartMeasurement+0x12e>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d167      	bne.n	8007d86 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f003 fdf4 	bl	800b8a8 <VL53L0X_WrByte>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d15d      	bne.n	8007d8c <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8007cda:	f107 030d 	add.w	r3, r7, #13
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f003 fe62 	bl	800b9ac <VL53L0X_RdByte>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007cf2:	7b7a      	ldrb	r2, [r7, #13]
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d107      	bne.n	8007d10 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8007d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d0e:	d3e1      	bcc.n	8007cd4 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d16:	d339      	bcc.n	8007d8c <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007d18:	23f9      	movs	r3, #249	; 0xf9
 8007d1a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007d1c:	e036      	b.n	8007d8c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d105      	bne.n	8007d32 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007d26:	2101      	movs	r1, #1
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff15 	bl	8007b58 <VL53L0X_CheckAndLoadInterruptSettings>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007d32:	2202      	movs	r2, #2
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f003 fdb6 	bl	800b8a8 <VL53L0X_WrByte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d123      	bne.n	8007d90 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007d50:	e01e      	b.n	8007d90 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff fefb 	bl	8007b58 <VL53L0X_CheckAndLoadInterruptSettings>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007d66:	2204      	movs	r2, #4
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f003 fd9c 	bl	800b8a8 <VL53L0X_WrByte>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10b      	bne.n	8007d94 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007d84:	e006      	b.n	8007d94 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007d86:	23f8      	movs	r3, #248	; 0xf8
 8007d88:	75fb      	strb	r3, [r7, #23]
 8007d8a:	e004      	b.n	8007d96 <VL53L0X_StartMeasurement+0x172>
		break;
 8007d8c:	bf00      	nop
 8007d8e:	e002      	b.n	8007d96 <VL53L0X_StartMeasurement+0x172>
		break;
 8007d90:	bf00      	nop
 8007d92:	e000      	b.n	8007d96 <VL53L0X_StartMeasurement+0x172>
		break;
 8007d94:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007db6:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d112      	bne.n	8007de4 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007dbe:	f107 0308 	add.w	r3, r7, #8
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb1d 	bl	8008404 <VL53L0X_GetInterruptMaskStatus>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d103      	bne.n	8007ddc <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e01c      	b.n	8007e16 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e018      	b.n	8007e16 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007de4:	f107 030d 	add.w	r3, r7, #13
 8007de8:	461a      	mov	r2, r3
 8007dea:	2114      	movs	r1, #20
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f003 fddd 	bl	800b9ac <VL53L0X_RdByte>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007dfe:	7b7b      	ldrb	r3, [r7, #13]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007e24:	b5b0      	push	{r4, r5, r7, lr}
 8007e26:	b096      	sub	sp, #88	; 0x58
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007e34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e38:	230c      	movs	r3, #12
 8007e3a:	2114      	movs	r1, #20
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f003 fd07 	bl	800b850 <VL53L0X_ReadMulti>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007e48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 80d2 	bne.w	8007ff6 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007e5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4413      	add	r3, r2
 8007e70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2200      	movs	r2, #0
 8007e78:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	025b      	lsls	r3, r3, #9
 8007e90:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e96:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007e98:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007eae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007eb2:	025b      	lsls	r3, r3, #9
 8007eb4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007eba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007ed6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007edc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007ee6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007eee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef8:	d047      	beq.n	8007f8a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007efa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007efc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f08:	4a58      	ldr	r2, [pc, #352]	; (800806c <VL53L0X_GetRangingMeasurementData+0x248>)
 8007f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8007f0e:	1192      	asrs	r2, r2, #6
 8007f10:	17db      	asrs	r3, r3, #31
 8007f12:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007f14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7f1b      	ldrb	r3, [r3, #28]
 8007f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d02d      	beq.n	8007f8a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007f2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f30:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007f34:	fb02 f303 	mul.w	r3, r2, r3
 8007f38:	121b      	asrs	r3, r3, #8
 8007f3a:	461a      	mov	r2, r3
				if ((SignalRate
 8007f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10d      	bne.n	8007f5e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8007f42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8007f4a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007f4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007f52:	e016      	b.n	8007f82 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8007f54:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007f58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007f5c:	e011      	b.n	8007f82 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007f5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f64:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f6a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007f72:	121b      	asrs	r3, r3, #8
 8007f74:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f78:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007f7a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007f7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007f82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007f8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007f92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f96:	089b      	lsrs	r3, r3, #2
 8007f98:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007f9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	019b      	lsls	r3, r3, #6
 8007fa6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	75da      	strb	r2, [r3, #23]
 8007fac:	e006      	b.n	8007fbc <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007fb4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007fbc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007fc0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007fc4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f003 f9f0 	bl	800b3b8 <VL53L0X_get_pal_range_status>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007fe6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007fee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d12f      	bne.n	800805e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f107 040c 	add.w	r4, r7, #12
 8008004:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800800a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800800c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008010:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008018:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008026:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800802c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008032:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008038:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800803e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008044:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800804e:	f107 050c 	add.w	r5, r7, #12
 8008052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800805a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800805e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008062:	4618      	mov	r0, r3
 8008064:	3750      	adds	r7, #80	; 0x50
 8008066:	46bd      	mov	sp, r7
 8008068:	bdb0      	pop	{r4, r5, r7, pc}
 800806a:	bf00      	nop
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800807e:	2100      	movs	r1, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff f8b5 	bl	80071f0 <VL53L0X_SetDeviceMode>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800808a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d104      	bne.n	800809c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff fd16 	bl	8007ac4 <VL53L0X_PerformSingleMeasurement>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800809c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff febc 	bl	8007e24 <VL53L0X_GetRangingMeasurementData>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80080b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80080b8:	2100      	movs	r1, #0
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f962 	bl	8008384 <VL53L0X_ClearInterruptMask>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80080c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	4608      	mov	r0, r1
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	4603      	mov	r3, r0
 80080e0:	70fb      	strb	r3, [r7, #3]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70bb      	strb	r3, [r7, #2]
 80080e6:	4613      	mov	r3, r2
 80080e8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80080f4:	23f6      	movs	r3, #246	; 0xf6
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e107      	b.n	800830a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80080fa:	78bb      	ldrb	r3, [r7, #2]
 80080fc:	2b14      	cmp	r3, #20
 80080fe:	d110      	bne.n	8008122 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008100:	7e3b      	ldrb	r3, [r7, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008106:	2310      	movs	r3, #16
 8008108:	73bb      	strb	r3, [r7, #14]
 800810a:	e001      	b.n	8008110 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800810c:	2301      	movs	r3, #1
 800810e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	461a      	mov	r2, r3
 8008114:	2184      	movs	r1, #132	; 0x84
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f003 fbc6 	bl	800b8a8 <VL53L0X_WrByte>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	e0f3      	b.n	800830a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008122:	78bb      	ldrb	r3, [r7, #2]
 8008124:	2b15      	cmp	r3, #21
 8008126:	f040 8097 	bne.w	8008258 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800812a:	2201      	movs	r2, #1
 800812c:	21ff      	movs	r1, #255	; 0xff
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f003 fbba 	bl	800b8a8 <VL53L0X_WrByte>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4313      	orrs	r3, r2
 800813c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f003 fbb0 	bl	800b8a8 <VL53L0X_WrByte>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4313      	orrs	r3, r2
 8008150:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008152:	2200      	movs	r2, #0
 8008154:	21ff      	movs	r1, #255	; 0xff
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f003 fba6 	bl	800b8a8 <VL53L0X_WrByte>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	4313      	orrs	r3, r2
 8008164:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008166:	2201      	movs	r2, #1
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f003 fb9c 	bl	800b8a8 <VL53L0X_WrByte>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4313      	orrs	r3, r2
 8008178:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800817a:	2202      	movs	r2, #2
 800817c:	2185      	movs	r1, #133	; 0x85
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f003 fb92 	bl	800b8a8 <VL53L0X_WrByte>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4313      	orrs	r3, r2
 800818c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800818e:	2204      	movs	r2, #4
 8008190:	21ff      	movs	r1, #255	; 0xff
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f003 fb88 	bl	800b8a8 <VL53L0X_WrByte>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4313      	orrs	r3, r2
 80081a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80081a2:	2200      	movs	r2, #0
 80081a4:	21cd      	movs	r1, #205	; 0xcd
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f003 fb7e 	bl	800b8a8 <VL53L0X_WrByte>
 80081ac:	4603      	mov	r3, r0
 80081ae:	461a      	mov	r2, r3
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80081b6:	2211      	movs	r2, #17
 80081b8:	21cc      	movs	r1, #204	; 0xcc
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f003 fb74 	bl	800b8a8 <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80081ca:	2207      	movs	r2, #7
 80081cc:	21ff      	movs	r1, #255	; 0xff
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f003 fb6a 	bl	800b8a8 <VL53L0X_WrByte>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	4313      	orrs	r3, r2
 80081dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80081de:	2200      	movs	r2, #0
 80081e0:	21be      	movs	r1, #190	; 0xbe
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f003 fb60 	bl	800b8a8 <VL53L0X_WrByte>
 80081e8:	4603      	mov	r3, r0
 80081ea:	461a      	mov	r2, r3
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80081f2:	2206      	movs	r2, #6
 80081f4:	21ff      	movs	r1, #255	; 0xff
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f003 fb56 	bl	800b8a8 <VL53L0X_WrByte>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4313      	orrs	r3, r2
 8008204:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008206:	2209      	movs	r2, #9
 8008208:	21cc      	movs	r1, #204	; 0xcc
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f003 fb4c 	bl	800b8a8 <VL53L0X_WrByte>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4313      	orrs	r3, r2
 8008218:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800821a:	2200      	movs	r2, #0
 800821c:	21ff      	movs	r1, #255	; 0xff
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f003 fb42 	bl	800b8a8 <VL53L0X_WrByte>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	4313      	orrs	r3, r2
 800822c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800822e:	2201      	movs	r2, #1
 8008230:	21ff      	movs	r1, #255	; 0xff
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f003 fb38 	bl	800b8a8 <VL53L0X_WrByte>
 8008238:	4603      	mov	r3, r0
 800823a:	461a      	mov	r2, r3
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	4313      	orrs	r3, r2
 8008240:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f003 fb2e 	bl	800b8a8 <VL53L0X_WrByte>
 800824c:	4603      	mov	r3, r0
 800824e:	461a      	mov	r2, r3
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	4313      	orrs	r3, r2
 8008254:	73fb      	strb	r3, [r7, #15]
 8008256:	e058      	b.n	800830a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d121      	bne.n	80082a4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008260:	787b      	ldrb	r3, [r7, #1]
 8008262:	2b04      	cmp	r3, #4
 8008264:	d81b      	bhi.n	800829e <VL53L0X_SetGpioConfig+0x1ce>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <VL53L0X_SetGpioConfig+0x19c>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008281 	.word	0x08008281
 8008270:	08008287 	.word	0x08008287
 8008274:	0800828d 	.word	0x0800828d
 8008278:	08008293 	.word	0x08008293
 800827c:	08008299 	.word	0x08008299
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]
				break;
 8008284:	e00f      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008286:	2301      	movs	r3, #1
 8008288:	73bb      	strb	r3, [r7, #14]
				break;
 800828a:	e00c      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800828c:	2302      	movs	r3, #2
 800828e:	73bb      	strb	r3, [r7, #14]
				break;
 8008290:	e009      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008292:	2303      	movs	r3, #3
 8008294:	73bb      	strb	r3, [r7, #14]
				break;
 8008296:	e006      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008298:	2304      	movs	r3, #4
 800829a:	73bb      	strb	r3, [r7, #14]
				break;
 800829c:	e003      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800829e:	23f5      	movs	r3, #245	; 0xf5
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	e000      	b.n	80082a6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80082a4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80082a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d107      	bne.n	80082be <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	461a      	mov	r2, r3
 80082b2:	210a      	movs	r1, #10
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f003 faf7 	bl	800b8a8 <VL53L0X_WrByte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10f      	bne.n	80082e6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80082c6:	7e3b      	ldrb	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]
 80082d0:	e001      	b.n	80082d6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80082d2:	2310      	movs	r3, #16
 80082d4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	22ef      	movs	r2, #239	; 0xef
 80082da:	2184      	movs	r1, #132	; 0x84
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f003 fb31 	bl	800b944 <VL53L0X_UpdateByte>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80082e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	787a      	ldrb	r2, [r7, #1]
 80082f2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80082f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f83f 	bl	8008384 <VL53L0X_ClearInterruptMask>
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800830a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop

08008318 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	460b      	mov	r3, r1
 8008326:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008328:	2300      	movs	r3, #0
 800832a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800832c:	f107 0314 	add.w	r3, r7, #20
 8008330:	461a      	mov	r2, r3
 8008332:	210e      	movs	r1, #14
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f003 fb63 	bl	800ba00 <VL53L0X_RdWord>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800833e:	8abb      	ldrh	r3, [r7, #20]
 8008340:	045b      	lsls	r3, r3, #17
 8008342:	461a      	mov	r2, r3
 8008344:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <VL53L0X_GetInterruptThresholds+0x68>)
 8008346:	4013      	ands	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800834c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10f      	bne.n	8008374 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008354:	f107 0314 	add.w	r3, r7, #20
 8008358:	461a      	mov	r2, r3
 800835a:	210c      	movs	r1, #12
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f003 fb4f 	bl	800ba00 <VL53L0X_RdWord>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008366:	8abb      	ldrh	r3, [r7, #20]
 8008368:	045b      	lsls	r3, r3, #17
 800836a:	461a      	mov	r2, r3
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <VL53L0X_GetInterruptThresholds+0x68>)
 800836e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	1ffe0000 	.word	0x1ffe0000

08008384 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008396:	2201      	movs	r2, #1
 8008398:	210b      	movs	r1, #11
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f003 fa84 	bl	800b8a8 <VL53L0X_WrByte>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80083a4:	2200      	movs	r2, #0
 80083a6:	210b      	movs	r1, #11
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f003 fa7d 	bl	800b8a8 <VL53L0X_WrByte>
 80083ae:	4603      	mov	r3, r0
 80083b0:	461a      	mov	r2, r3
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80083b8:	f107 030d 	add.w	r3, r7, #13
 80083bc:	461a      	mov	r2, r3
 80083be:	2113      	movs	r1, #19
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 faf3 	bl	800b9ac <VL53L0X_RdByte>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	3301      	adds	r3, #1
 80083d4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80083d6:	7b7b      	ldrb	r3, [r7, #13]
 80083d8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d803      	bhi.n	80083ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80083e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0d3      	beq.n	8008396 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80083f4:	23f4      	movs	r3, #244	; 0xf4
 80083f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80083f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008412:	f107 030e 	add.w	r3, r7, #14
 8008416:	461a      	mov	r2, r3
 8008418:	2113      	movs	r1, #19
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f003 fac6 	bl	800b9ac <VL53L0X_RdByte>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	f003 0207 	and.w	r2, r3, #7
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 0318 	and.w	r3, r3, #24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008438:	23fa      	movs	r3, #250	; 0xfa
 800843a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800843c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fa03 	bl	8008868 <VL53L0X_perform_ref_spad_management>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008480:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008484:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800848a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800848c:	f107 0308 	add.w	r3, r7, #8
 8008490:	461a      	mov	r2, r3
 8008492:	2128      	movs	r1, #40	; 0x28
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f003 fab3 	bl	800ba00 <VL53L0X_RdWord>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800849e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d11e      	bne.n	80084e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80084a6:	893b      	ldrh	r3, [r7, #8]
 80084a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	dd0b      	ble.n	80084d4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80084bc:	893a      	ldrh	r2, [r7, #8]
 80084be:	897b      	ldrh	r3, [r7, #10]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	b21b      	sxth	r3, r3
 80084c6:	461a      	mov	r2, r3
					* 250;
 80084c8:	23fa      	movs	r3, #250	; 0xfa
 80084ca:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e007      	b.n	80084e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80084d4:	893b      	ldrh	r3, [r7, #8]
 80084d6:	b21b      	sxth	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	23fa      	movs	r3, #250	; 0xfa
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80084e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b08b      	sub	sp, #44	; 0x2c
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80084fe:	2308      	movs	r3, #8
 8008500:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f04f 32ff 	mov.w	r2, #4294967295
 800850c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008520:	69b9      	ldr	r1, [r7, #24]
 8008522:	fb01 f202 	mul.w	r2, r1, r2
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
 800852e:	e030      	b.n	8008592 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	4413      	add	r3, r2
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800853e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	429a      	cmp	r2, r3
 8008544:	d11e      	bne.n	8008584 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008546:	7ffa      	ldrb	r2, [r7, #31]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	fa42 f303 	asr.w	r3, r2, r3
 800854e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008554:	e016      	b.n	8008584 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008556:	7ffb      	ldrb	r3, [r7, #31]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <get_next_good_spad+0x88>
				success = 1;
 8008560:	2301      	movs	r3, #1
 8008562:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	fb02 f203 	mul.w	r2, r2, r3
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	4413      	add	r3, r2
 8008570:	461a      	mov	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	601a      	str	r2, [r3, #0]
				break;
 8008576:	e009      	b.n	800858c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008578:	7ffb      	ldrb	r3, [r7, #31]
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	3301      	adds	r3, #1
 8008582:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008584:	6a3a      	ldr	r2, [r7, #32]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	429a      	cmp	r2, r3
 800858a:	d3e4      	bcc.n	8008556 <get_next_good_spad+0x66>
				coarseIndex++) {
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	3301      	adds	r3, #1
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d202      	bcs.n	80085a0 <get_next_good_spad+0xb0>
 800859a:	7fbb      	ldrb	r3, [r7, #30]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0c7      	beq.n	8008530 <get_next_good_spad+0x40>
		}
	}
}
 80085a0:	bf00      	nop
 80085a2:	372c      	adds	r7, #44	; 0x2c
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80085b4:	2301      	movs	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	099b      	lsrs	r3, r3, #6
 80085bc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <is_aperture+0x30>)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <is_aperture+0x22>
		isAperture = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	200002bc 	.word	0x200002bc

080085e0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80085f0:	2308      	movs	r3, #8
 80085f2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	fbb3 f2f2 	udiv	r2, r3, r2
 8008606:	69b9      	ldr	r1, [r7, #24]
 8008608:	fb01 f202 	mul.w	r2, r1, r2
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d302      	bcc.n	800861e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008618:	23ce      	movs	r3, #206	; 0xce
 800861a:	77fb      	strb	r3, [r7, #31]
 800861c:	e010      	b.n	8008640 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b25a      	sxtb	r2, r3
 8008628:	2101      	movs	r1, #1
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	fa01 f303 	lsl.w	r3, r1, r3
 8008630:	b25b      	sxtb	r3, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	b259      	sxtb	r1, r3
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	4413      	add	r3, r2
 800863c:	b2ca      	uxtb	r2, r1
 800863e:	701a      	strb	r2, [r3, #0]

	return status;
 8008640:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3724      	adds	r7, #36	; 0x24
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800865a:	2306      	movs	r3, #6
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	21b0      	movs	r1, #176	; 0xb0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f003 f8c5 	bl	800b7f0 <VL53L0X_WriteMulti>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800866a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008680:	2306      	movs	r3, #6
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	21b0      	movs	r1, #176	; 0xb0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f003 f8e2 	bl	800b850 <VL53L0X_ReadMulti>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	460b      	mov	r3, r1
 80086aa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80086ac:	2300      	movs	r3, #0
 80086ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80086b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80086b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80086ba:	2300      	movs	r3, #0
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086be:	e02b      	b.n	8008718 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80086c0:	f107 031c 	add.w	r3, r7, #28
 80086c4:	6a3a      	ldr	r2, [r7, #32]
 80086c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff11 	bl	80084f0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d103      	bne.n	80086de <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80086d6:	23ce      	movs	r3, #206	; 0xce
 80086d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80086dc:	e020      	b.n	8008720 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e4:	4413      	add	r3, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff ff60 	bl	80085ac <is_aperture>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d003      	beq.n	80086fe <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80086f6:	23ce      	movs	r3, #206	; 0xce
 80086f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80086fc:	e010      	b.n	8008720 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008706:	6838      	ldr	r0, [r7, #0]
 8008708:	f7ff ff6a 	bl	80085e0 <enable_spad_bit>
		currentSpad++;
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	3301      	adds	r3, #1
 8008710:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	3301      	adds	r3, #1
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
 8008718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	429a      	cmp	r2, r3
 800871e:	d3cf      	bcc.n	80086c0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008726:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ff8d 	bl	8008650 <set_ref_spad_map>
 8008736:	4603      	mov	r3, r0
 8008738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800873c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008740:	2b00      	cmp	r3, #0
 8008742:	d121      	bne.n	8008788 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008744:	f107 0314 	add.w	r3, r7, #20
 8008748:	4619      	mov	r1, r3
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff ff93 	bl	8008676 <get_ref_spad_map>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800875a:	e011      	b.n	8008780 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	4413      	add	r3, r2
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	f107 0114 	add.w	r1, r7, #20
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	440b      	add	r3, r1
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d003      	beq.n	800877a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008772:	23ce      	movs	r3, #206	; 0xce
 8008774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008778:	e006      	b.n	8008788 <enable_ref_spads+0xec>
			}
			i++;
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	3301      	adds	r3, #1
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	429a      	cmp	r2, r3
 8008786:	d3e9      	bcc.n	800875c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008788:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800878c:	4618      	mov	r0, r3
 800878e:	3730      	adds	r7, #48	; 0x30
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80087b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80087b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d107      	bne.n	80087cc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80087bc:	22c0      	movs	r2, #192	; 0xc0
 80087be:	2101      	movs	r1, #1
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 f871 	bl	800b8a8 <VL53L0X_WrByte>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80087cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d108      	bne.n	80087e6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80087d4:	f107 0308 	add.w	r3, r7, #8
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fc48 	bl	8008070 <VL53L0X_PerformSingleRangingMeasurement>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80087e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087ee:	2201      	movs	r2, #1
 80087f0:	21ff      	movs	r1, #255	; 0xff
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f003 f858 	bl	800b8a8 <VL53L0X_WrByte>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80087fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	21b6      	movs	r1, #182	; 0xb6
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f003 f8f8 	bl	800ba00 <VL53L0X_RdWord>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008816:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800881e:	2200      	movs	r2, #0
 8008820:	21ff      	movs	r1, #255	; 0xff
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 f840 	bl	800b8a8 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800882e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008832:	2b00      	cmp	r3, #0
 8008834:	d112      	bne.n	800885c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800883a:	461a      	mov	r2, r3
 800883c:	2101      	movs	r1, #1
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f003 f832 	bl	800b8a8 <VL53L0X_WrByte>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800884a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800884e:	2b00      	cmp	r3, #0
 8008850:	d104      	bne.n	800885c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008858:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800885c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	; 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b09d      	sub	sp, #116	; 0x74
 800886c:	af06      	add	r7, sp, #24
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008874:	2300      	movs	r3, #0
 8008876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800887a:	23b4      	movs	r3, #180	; 0xb4
 800887c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008880:	2303      	movs	r3, #3
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008884:	232c      	movs	r3, #44	; 0x2c
 8008886:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008894:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008898:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80088a2:	2306      	movs	r3, #6
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80088cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d2:	e009      	b.n	80088e8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d8:	4413      	add	r3, r2
 80088da:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	3301      	adds	r3, #1
 80088e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d3f1      	bcc.n	80088d4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80088f0:	2201      	movs	r2, #1
 80088f2:	21ff      	movs	r1, #255	; 0xff
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f002 ffd7 	bl	800b8a8 <VL53L0X_WrByte>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008904:	2b00      	cmp	r3, #0
 8008906:	d107      	bne.n	8008918 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008908:	2200      	movs	r2, #0
 800890a:	214f      	movs	r1, #79	; 0x4f
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f002 ffcb 	bl	800b8a8 <VL53L0X_WrByte>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008920:	222c      	movs	r2, #44	; 0x2c
 8008922:	214e      	movs	r1, #78	; 0x4e
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f002 ffbf 	bl	800b8a8 <VL53L0X_WrByte>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008938:	2200      	movs	r2, #0
 800893a:	21ff      	movs	r1, #255	; 0xff
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f002 ffb3 	bl	800b8a8 <VL53L0X_WrByte>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008948:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008950:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008954:	461a      	mov	r2, r3
 8008956:	21b6      	movs	r1, #182	; 0xb6
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f002 ffa5 	bl	800b8a8 <VL53L0X_WrByte>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800896c:	2200      	movs	r2, #0
 800896e:	2180      	movs	r1, #128	; 0x80
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f002 ff99 	bl	800b8a8 <VL53L0X_WrByte>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800897c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008984:	f107 0210 	add.w	r2, r7, #16
 8008988:	f107 0111 	add.w	r1, r7, #17
 800898c:	2300      	movs	r3, #0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fbbb 	bl	800910a <VL53L0X_perform_ref_calibration>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800899a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d121      	bne.n	80089e6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80089a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80089ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80089be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80089c2:	f107 0218 	add.w	r2, r7, #24
 80089c6:	9204      	str	r2, [sp, #16]
 80089c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ca:	9203      	str	r2, [sp, #12]
 80089cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ce:	9202      	str	r2, [sp, #8]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	4623      	mov	r3, r4
 80089d8:	4602      	mov	r2, r0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f7ff fe5e 	bl	800869c <enable_ref_spads>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d174      	bne.n	8008ad8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80089f2:	f107 0312 	add.w	r3, r7, #18
 80089f6:	4619      	mov	r1, r3
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7ff fecb 	bl	8008794 <perform_ref_signal_measurement>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008a04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d161      	bne.n	8008ad0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008a0c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d25d      	bcs.n	8008ad0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008a14:	2300      	movs	r3, #0
 8008a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a18:	e009      	b.n	8008a2e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008a24:	2200      	movs	r2, #0
 8008a26:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d3f1      	bcc.n	8008a1a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008a36:	e002      	b.n	8008a3e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008a3e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a44:	4413      	add	r3, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fdb0 	bl	80085ac <is_aperture>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d103      	bne.n	8008a5a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d3ee      	bcc.n	8008a38 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a60:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008a6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008a72:	f107 0218 	add.w	r2, r7, #24
 8008a76:	9204      	str	r2, [sp, #16]
 8008a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a7a:	9203      	str	r2, [sp, #12]
 8008a7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a7e:	9202      	str	r2, [sp, #8]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4623      	mov	r3, r4
 8008a88:	4602      	mov	r2, r0
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff fe06 	bl	800869c <enable_ref_spads>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008a96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d11b      	bne.n	8008ad6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008aa2:	f107 0312 	add.w	r3, r7, #18
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff fe73 	bl	8008794 <perform_ref_signal_measurement>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008ab4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10c      	bne.n	8008ad6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008abc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008abe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d208      	bcs.n	8008ad6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008ace:	e002      	b.n	8008ad6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad4:	e000      	b.n	8008ad8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008ad6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 80af 	bne.w	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008ae2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008ae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	f240 80aa 	bls.w	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008afc:	f107 031c 	add.w	r3, r7, #28
 8008b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b02:	4618      	mov	r0, r3
 8008b04:	f003 f82a 	bl	800bb5c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008b08:	8a7b      	ldrh	r3, [r7, #18]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfb8      	it	lt
 8008b14:	425b      	neglt	r3, r3
 8008b16:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008b1e:	e086      	b.n	8008c2e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008b26:	f107 0314 	add.w	r3, r7, #20
 8008b2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b2e:	f7ff fcdf 	bl	80084f0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d103      	bne.n	8008b42 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008b3a:	23ce      	movs	r3, #206	; 0xce
 8008b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008b40:	e07e      	b.n	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008b42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4413      	add	r3, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fd2e 	bl	80085ac <is_aperture>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d003      	beq.n	8008b62 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008b60:	e06e      	b.n	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	3301      	adds	r3, #1
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fd32 	bl	80085e0 <enable_spad_bit>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008b82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008b96:	4619      	mov	r1, r3
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fd59 	bl	8008650 <set_ref_spad_map>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008ba4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d146      	bne.n	8008c3a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008bac:	f107 0312 	add.w	r3, r7, #18
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff fdee 	bl	8008794 <perform_ref_signal_measurement>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008bbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d13b      	bne.n	8008c3e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008bc6:	8a7b      	ldrh	r3, [r7, #18]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfb8      	it	lt
 8008bd2:	425b      	neglt	r3, r3
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008bd6:	8a7b      	ldrh	r3, [r7, #18]
 8008bd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d21c      	bcs.n	8008c18 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d914      	bls.n	8008c10 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008be6:	f107 031c 	add.w	r3, r7, #28
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fd2f 	bl	8008650 <set_ref_spad_map>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008bfe:	f107 011c 	add.w	r1, r7, #28
 8008c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c04:	4618      	mov	r0, r3
 8008c06:	f002 ffa9 	bl	800bb5c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e00a      	b.n	8008c2e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008c22:	f107 031c 	add.w	r3, r7, #28
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f002 ff97 	bl	800bb5c <memcpy>
		while (!complete) {
 8008c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f43f af74 	beq.w	8008b20 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008c38:	e002      	b.n	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008c3a:	bf00      	nop
 8008c3c:	e000      	b.n	8008c40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008c3e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d115      	bne.n	8008c74 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c4c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008c54:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	375c      	adds	r7, #92	; 0x5c
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}

08008c80 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b093      	sub	sp, #76	; 0x4c
 8008c84:	af06      	add	r7, sp, #24
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008c98:	23b4      	movs	r3, #180	; 0xb4
 8008c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008c9e:	2306      	movs	r3, #6
 8008ca0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008ca2:	232c      	movs	r3, #44	; 0x2c
 8008ca4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	21ff      	movs	r1, #255	; 0xff
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f002 fdfc 	bl	800b8a8 <VL53L0X_WrByte>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d107      	bne.n	8008cce <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	214f      	movs	r1, #79	; 0x4f
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f002 fdf0 	bl	800b8a8 <VL53L0X_WrByte>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008cce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d107      	bne.n	8008ce6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008cd6:	222c      	movs	r2, #44	; 0x2c
 8008cd8:	214e      	movs	r1, #78	; 0x4e
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f002 fde4 	bl	800b8a8 <VL53L0X_WrByte>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008ce6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	21ff      	movs	r1, #255	; 0xff
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f002 fdd8 	bl	800b8a8 <VL53L0X_WrByte>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008cfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	21b6      	movs	r1, #182	; 0xb6
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f002 fdca 	bl	800b8a8 <VL53L0X_WrByte>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1e:	e009      	b.n	8008d34 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	3301      	adds	r3, #1
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d3f1      	bcc.n	8008d20 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d011      	beq.n	8008d66 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008d42:	e002      	b.n	8008d4a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	3301      	adds	r3, #1
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008d4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	4413      	add	r3, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fc2a 	bl	80085ac <is_aperture>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <VL53L0X_set_reference_spads+0xe6>
 8008d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d3ee      	bcc.n	8008d44 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d76:	79f9      	ldrb	r1, [r7, #7]
 8008d78:	f107 0214 	add.w	r2, r7, #20
 8008d7c:	9204      	str	r2, [sp, #16]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	9203      	str	r2, [sp, #12]
 8008d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d84:	9202      	str	r2, [sp, #8]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fc83 	bl	800869c <enable_ref_spads>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008d9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	79fa      	ldrb	r2, [r7, #7]
 8008dba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008dbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3734      	adds	r7, #52	; 0x34
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}

08008dca <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	f043 0301 	orr.w	r3, r3, #1
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	461a      	mov	r2, r3
 8008dec:	2100      	movs	r1, #0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f002 fd5a 	bl	800b8a8 <VL53L0X_WrByte>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d104      	bne.n	8008e0a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f9bf 	bl	8009184 <VL53L0X_measurement_poll_for_completion>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fab5 	bl	8008384 <VL53L0X_ClearInterruptMask>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008e26:	2200      	movs	r2, #0
 8008e28:	2100      	movs	r1, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 fd3c 	bl	800b8a8 <VL53L0X_WrByte>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	4608      	mov	r0, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	70fb      	strb	r3, [r7, #3]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70bb      	strb	r3, [r7, #2]
 8008e56:	4613      	mov	r3, r2
 8008e58:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e62:	2201      	movs	r2, #1
 8008e64:	21ff      	movs	r1, #255	; 0xff
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f002 fd1e 	bl	800b8a8 <VL53L0X_WrByte>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008e76:	2200      	movs	r2, #0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f002 fd14 	bl	800b8a8 <VL53L0X_WrByte>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	21ff      	movs	r1, #255	; 0xff
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f002 fd0a 	bl	800b8a8 <VL53L0X_WrByte>
 8008e94:	4603      	mov	r3, r0
 8008e96:	461a      	mov	r2, r3
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01e      	beq.n	8008ee2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	21cb      	movs	r1, #203	; 0xcb
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f002 fd7b 	bl	800b9ac <VL53L0X_RdByte>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d02a      	beq.n	8008f1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008ec8:	f107 030e 	add.w	r3, r7, #14
 8008ecc:	461a      	mov	r2, r3
 8008ece:	21ee      	movs	r1, #238	; 0xee
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f002 fd6b 	bl	800b9ac <VL53L0X_RdByte>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	73fb      	strb	r3, [r7, #15]
 8008ee0:	e01d      	b.n	8008f1e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008eea:	78bb      	ldrb	r3, [r7, #2]
 8008eec:	461a      	mov	r2, r3
 8008eee:	21cb      	movs	r1, #203	; 0xcb
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f002 fcd9 	bl	800b8a8 <VL53L0X_WrByte>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	461a      	mov	r2, r3
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008f08:	787b      	ldrb	r3, [r7, #1]
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	21ee      	movs	r1, #238	; 0xee
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f002 fd18 	bl	800b944 <VL53L0X_UpdateByte>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f1e:	2201      	movs	r2, #1
 8008f20:	21ff      	movs	r1, #255	; 0xff
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f002 fcc0 	bl	800b8a8 <VL53L0X_WrByte>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008f32:	2201      	movs	r2, #1
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f002 fcb6 	bl	800b8a8 <VL53L0X_WrByte>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f46:	2200      	movs	r2, #0
 8008f48:	21ff      	movs	r1, #255	; 0xff
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f002 fcac 	bl	800b8a8 <VL53L0X_WrByte>
 8008f50:	4603      	mov	r3, r0
 8008f52:	461a      	mov	r2, r3
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	f023 0310 	bic.w	r3, r3, #16
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	701a      	strb	r2, [r3, #0]

	return Status;
 8008f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b08a      	sub	sp, #40	; 0x28
 8008f76:	af04      	add	r7, sp, #16
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	460b      	mov	r3, r1
 8008f82:	71fb      	strb	r3, [r7, #7]
 8008f84:	4613      	mov	r3, r2
 8008f86:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008f9c:	79bb      	ldrb	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008fa8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008faa:	2201      	movs	r2, #1
 8008fac:	2101      	movs	r1, #1
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f002 fc7a 	bl	800b8a8 <VL53L0X_WrByte>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008fc0:	2140      	movs	r1, #64	; 0x40
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff ff01 	bl	8008dca <VL53L0X_perform_single_ref_calibration>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d115      	bne.n	8009000 <VL53L0X_perform_vhv_calibration+0x8e>
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d112      	bne.n	8009000 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008fda:	7d39      	ldrb	r1, [r7, #20]
 8008fdc:	7d7a      	ldrb	r2, [r7, #21]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9302      	str	r3, [sp, #8]
 8008fe6:	f107 0313 	add.w	r3, r7, #19
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff ff23 	bl	8008e40 <VL53L0X_ref_calibration_io>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
 8008ffe:	e002      	b.n	8009006 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d112      	bne.n	8009034 <VL53L0X_perform_vhv_calibration+0xc2>
 800900e:	79bb      	ldrb	r3, [r7, #6]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00f      	beq.n	8009034 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009014:	7dbb      	ldrb	r3, [r7, #22]
 8009016:	461a      	mov	r2, r3
 8009018:	2101      	movs	r1, #1
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f002 fc44 	bl	800b8a8 <VL53L0X_WrByte>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	7dba      	ldrb	r2, [r7, #22]
 8009030:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b08a      	sub	sp, #40	; 0x28
 8009044:	af04      	add	r7, sp, #16
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4611      	mov	r1, r2
 800904c:	461a      	mov	r2, r3
 800904e:	460b      	mov	r3, r1
 8009050:	71fb      	strb	r3, [r7, #7]
 8009052:	4613      	mov	r3, r2
 8009054:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009056:	2300      	movs	r3, #0
 8009058:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009066:	79bb      	ldrb	r3, [r7, #6]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009072:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009074:	2202      	movs	r2, #2
 8009076:	2101      	movs	r1, #1
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f002 fc15 	bl	800b8a8 <VL53L0X_WrByte>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800908a:	2100      	movs	r1, #0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fe9c 	bl	8008dca <VL53L0X_perform_single_ref_calibration>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d115      	bne.n	80090ca <VL53L0X_perform_phase_calibration+0x8a>
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d112      	bne.n	80090ca <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80090a4:	7d39      	ldrb	r1, [r7, #20]
 80090a6:	7d7a      	ldrb	r2, [r7, #21]
 80090a8:	2301      	movs	r3, #1
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	2300      	movs	r3, #0
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	f107 0313 	add.w	r3, r7, #19
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	460b      	mov	r3, r1
 80090bc:	2101      	movs	r1, #1
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff febe 	bl	8008e40 <VL53L0X_ref_calibration_io>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]
 80090c8:	e002      	b.n	80090d0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80090d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d112      	bne.n	80090fe <VL53L0X_perform_phase_calibration+0xbe>
 80090d8:	79bb      	ldrb	r3, [r7, #6]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00f      	beq.n	80090fe <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80090de:	7dbb      	ldrb	r3, [r7, #22]
 80090e0:	461a      	mov	r2, r3
 80090e2:	2101      	movs	r1, #1
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f002 fbdf 	bl	800b8a8 <VL53L0X_WrByte>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80090ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d103      	bne.n	80090fe <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	7dba      	ldrb	r2, [r7, #22]
 80090fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80090fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009126:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	2300      	movs	r3, #0
 800912c:	68b9      	ldr	r1, [r7, #8]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff ff1f 	bl	8008f72 <VL53L0X_perform_vhv_calibration>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d107      	bne.n	8009150 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	2300      	movs	r3, #0
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7ff ff7a 	bl	8009040 <VL53L0X_perform_phase_calibration>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10f      	bne.n	8009178 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009158:	7dbb      	ldrb	r3, [r7, #22]
 800915a:	461a      	mov	r2, r3
 800915c:	2101      	movs	r1, #1
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f002 fba2 	bl	800b8a8 <VL53L0X_WrByte>
 8009164:	4603      	mov	r3, r0
 8009166:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	7dba      	ldrb	r2, [r7, #22]
 8009174:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800918c:	2300      	movs	r3, #0
 800918e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009198:	f107 030f 	add.w	r3, r7, #15
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fe fdff 	bl	8007da2 <VL53L0X_GetMeasurementDataReady>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80091a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d00f      	beq.n	80091d6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	3301      	adds	r3, #1
 80091ba:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091c2:	d302      	bcc.n	80091ca <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80091c4:	23f9      	movs	r3, #249	; 0xf9
 80091c6:	75fb      	strb	r3, [r7, #23]
			break;
 80091c8:	e006      	b.n	80091d8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f002 fc8c 	bl	800bae8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80091d0:	e7e2      	b.n	8009198 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80091d6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80091d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	3301      	adds	r3, #1
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	4603      	mov	r3, r0
 8009212:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	085b      	lsrs	r3, r3, #1
 800921c:	b2db      	uxtb	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800923c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009240:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009242:	e002      	b.n	800924a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d8f8      	bhi.n	8009244 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009252:	e017      	b.n	8009284 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	d30b      	bcc.n	8009278 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4413      	add	r3, r2
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	4413      	add	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	e002      	b.n	800927e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	089b      	lsrs	r3, r3, #2
 8009282:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e4      	bne.n	8009254 <VL53L0X_isqrt+0x24>
	}

	return res;
 800928a:	68fb      	ldr	r3, [r7, #12]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80092a4:	2200      	movs	r2, #0
 80092a6:	2183      	movs	r1, #131	; 0x83
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f002 fafd 	bl	800b8a8 <VL53L0X_WrByte>
 80092ae:	4603      	mov	r3, r0
 80092b0:	461a      	mov	r2, r3
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80092b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d11e      	bne.n	80092fe <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80092c4:	f107 030f 	add.w	r3, r7, #15
 80092c8:	461a      	mov	r2, r3
 80092ca:	2183      	movs	r1, #131	; 0x83
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f002 fb6d 	bl	800b9ac <VL53L0X_RdByte>
 80092d2:	4603      	mov	r3, r0
 80092d4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <VL53L0X_device_read_strobe+0x5a>
 80092dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3301      	adds	r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80092f0:	d3e8      	bcc.n	80092c4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80092f8:	d301      	bcc.n	80092fe <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80092fa:	23f9      	movs	r3, #249	; 0xf9
 80092fc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80092fe:	2201      	movs	r2, #1
 8009300:	2183      	movs	r1, #131	; 0x83
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f002 fad0 	bl	800b8a8 <VL53L0X_WrByte>
 8009308:	4603      	mov	r3, r0
 800930a:	461a      	mov	r2, r3
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	4313      	orrs	r3, r2
 8009310:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009312:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b098      	sub	sp, #96	; 0x60
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800932a:	2300      	movs	r3, #0
 800932c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800934e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009352:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009366:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800936a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800936e:	2b07      	cmp	r3, #7
 8009370:	f000 8408 	beq.w	8009b84 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009374:	2201      	movs	r2, #1
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f002 fa95 	bl	800b8a8 <VL53L0X_WrByte>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009386:	4313      	orrs	r3, r2
 8009388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800938c:	2201      	movs	r2, #1
 800938e:	21ff      	movs	r1, #255	; 0xff
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f002 fa89 	bl	800b8a8 <VL53L0X_WrByte>
 8009396:	4603      	mov	r3, r0
 8009398:	461a      	mov	r2, r3
 800939a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800939e:	4313      	orrs	r3, r2
 80093a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f002 fa7d 	bl	800b8a8 <VL53L0X_WrByte>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80093bc:	2206      	movs	r2, #6
 80093be:	21ff      	movs	r1, #255	; 0xff
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f002 fa71 	bl	800b8a8 <VL53L0X_WrByte>
 80093c6:	4603      	mov	r3, r0
 80093c8:	461a      	mov	r2, r3
 80093ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80093d4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80093d8:	461a      	mov	r2, r3
 80093da:	2183      	movs	r1, #131	; 0x83
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f002 fae5 	bl	800b9ac <VL53L0X_RdByte>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80093f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093f4:	f043 0304 	orr.w	r3, r3, #4
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	2183      	movs	r1, #131	; 0x83
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f002 fa52 	bl	800b8a8 <VL53L0X_WrByte>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800940c:	4313      	orrs	r3, r2
 800940e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009412:	2207      	movs	r2, #7
 8009414:	21ff      	movs	r1, #255	; 0xff
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f002 fa46 	bl	800b8a8 <VL53L0X_WrByte>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009424:	4313      	orrs	r3, r2
 8009426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800942a:	2201      	movs	r2, #1
 800942c:	2181      	movs	r1, #129	; 0x81
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f002 fa3a 	bl	800b8a8 <VL53L0X_WrByte>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800943c:	4313      	orrs	r3, r2
 800943e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 fb50 	bl	800bae8 <VL53L0X_PollingDelay>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009450:	4313      	orrs	r3, r2
 8009452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009456:	2201      	movs	r2, #1
 8009458:	2180      	movs	r1, #128	; 0x80
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f002 fa24 	bl	800b8a8 <VL53L0X_WrByte>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009468:	4313      	orrs	r3, r2
 800946a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8098 	beq.w	80095aa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800947a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800947e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 8091 	bne.w	80095aa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009488:	226b      	movs	r2, #107	; 0x6b
 800948a:	2194      	movs	r1, #148	; 0x94
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f002 fa0b 	bl	800b8a8 <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800949a:	4313      	orrs	r3, r2
 800949c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fef9 	bl	8009298 <VL53L0X_device_read_strobe>
 80094a6:	4603      	mov	r3, r0
 80094a8:	461a      	mov	r2, r3
 80094aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094b8:	461a      	mov	r2, r3
 80094ba:	2190      	movs	r1, #144	; 0x90
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f002 fad7 	bl	800ba70 <VL53L0X_RdDWord>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	0bdb      	lsrs	r3, r3, #15
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80094ec:	2224      	movs	r2, #36	; 0x24
 80094ee:	2194      	movs	r1, #148	; 0x94
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f002 f9d9 	bl	800b8a8 <VL53L0X_WrByte>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fe:	4313      	orrs	r3, r2
 8009500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fec7 	bl	8009298 <VL53L0X_device_read_strobe>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009512:	4313      	orrs	r3, r2
 8009514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800951c:	461a      	mov	r2, r3
 800951e:	2190      	movs	r1, #144	; 0x90
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f002 faa5 	bl	800ba70 <VL53L0X_RdDWord>
 8009526:	4603      	mov	r3, r0
 8009528:	461a      	mov	r2, r3
 800952a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800952e:	4313      	orrs	r3, r2
 8009530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	0e1b      	lsrs	r3, r3, #24
 8009538:	b2db      	uxtb	r3, r3
 800953a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	b2db      	uxtb	r3, r3
 8009542:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b2db      	uxtb	r3, r3
 800954a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	b2db      	uxtb	r3, r3
 8009550:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009552:	2225      	movs	r2, #37	; 0x25
 8009554:	2194      	movs	r1, #148	; 0x94
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f002 f9a6 	bl	800b8a8 <VL53L0X_WrByte>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009564:	4313      	orrs	r3, r2
 8009566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fe94 	bl	8009298 <VL53L0X_device_read_strobe>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009578:	4313      	orrs	r3, r2
 800957a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800957e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009582:	461a      	mov	r2, r3
 8009584:	2190      	movs	r1, #144	; 0x90
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f002 fa72 	bl	800ba70 <VL53L0X_RdDWord>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009594:	4313      	orrs	r3, r2
 8009596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	0e1b      	lsrs	r3, r3, #24
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8189 	beq.w	80098c8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80095b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095ba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f040 8182 	bne.w	80098c8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80095c4:	2202      	movs	r2, #2
 80095c6:	2194      	movs	r1, #148	; 0x94
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f002 f96d 	bl	800b8a8 <VL53L0X_WrByte>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fe5b 	bl	8009298 <VL53L0X_device_read_strobe>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80095f0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80095f4:	461a      	mov	r2, r3
 80095f6:	2190      	movs	r1, #144	; 0x90
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f002 f9d7 	bl	800b9ac <VL53L0X_RdByte>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009606:	4313      	orrs	r3, r2
 8009608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800960c:	227b      	movs	r2, #123	; 0x7b
 800960e:	2194      	movs	r1, #148	; 0x94
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 f949 	bl	800b8a8 <VL53L0X_WrByte>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800961e:	4313      	orrs	r3, r2
 8009620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fe37 	bl	8009298 <VL53L0X_device_read_strobe>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009632:	4313      	orrs	r3, r2
 8009634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009638:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800963c:	461a      	mov	r2, r3
 800963e:	2190      	movs	r1, #144	; 0x90
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 f9b3 	bl	800b9ac <VL53L0X_RdByte>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800964e:	4313      	orrs	r3, r2
 8009650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009654:	2277      	movs	r2, #119	; 0x77
 8009656:	2194      	movs	r1, #148	; 0x94
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 f925 	bl	800b8a8 <VL53L0X_WrByte>
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009666:	4313      	orrs	r3, r2
 8009668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fe13 	bl	8009298 <VL53L0X_device_read_strobe>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967a:	4313      	orrs	r3, r2
 800967c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009684:	461a      	mov	r2, r3
 8009686:	2190      	movs	r1, #144	; 0x90
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f002 f9f1 	bl	800ba70 <VL53L0X_RdDWord>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009696:	4313      	orrs	r3, r2
 8009698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	0e5b      	lsrs	r3, r3, #25
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	0c9b      	lsrs	r3, r3, #18
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	0adb      	lsrs	r3, r3, #11
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	091b      	lsrs	r3, r3, #4
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80096e6:	2278      	movs	r2, #120	; 0x78
 80096e8:	2194      	movs	r1, #148	; 0x94
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f002 f8dc 	bl	800b8a8 <VL53L0X_WrByte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fdca 	bl	8009298 <VL53L0X_device_read_strobe>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800970c:	4313      	orrs	r3, r2
 800970e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009716:	461a      	mov	r2, r3
 8009718:	2190      	movs	r1, #144	; 0x90
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f002 f9a8 	bl	800ba70 <VL53L0X_RdDWord>
 8009720:	4603      	mov	r3, r0
 8009722:	461a      	mov	r2, r3
 8009724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009728:	4313      	orrs	r3, r2
 800972a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	0f5b      	lsrs	r3, r3, #29
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800973a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800973e:	4413      	add	r3, r2
 8009740:	b2db      	uxtb	r3, r3
 8009742:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	0d9b      	lsrs	r3, r3, #22
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974e:	b2db      	uxtb	r3, r3
 8009750:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	0bdb      	lsrs	r3, r3, #15
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975c:	b2db      	uxtb	r3, r3
 800975e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976a:	b2db      	uxtb	r3, r3
 800976c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009778:	b2db      	uxtb	r3, r3
 800977a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	b2db      	uxtb	r3, r3
 8009780:	019b      	lsls	r3, r3, #6
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800978e:	2279      	movs	r2, #121	; 0x79
 8009790:	2194      	movs	r1, #148	; 0x94
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f002 f888 	bl	800b8a8 <VL53L0X_WrByte>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097a0:	4313      	orrs	r3, r2
 80097a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fd76 	bl	8009298 <VL53L0X_device_read_strobe>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097be:	461a      	mov	r2, r3
 80097c0:	2190      	movs	r1, #144	; 0x90
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 f954 	bl	800ba70 <VL53L0X_RdDWord>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	0e9b      	lsrs	r3, r3, #26
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80097e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097e6:	4413      	add	r3, r2
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	0cdb      	lsrs	r3, r3, #19
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	0b1b      	lsrs	r3, r3, #12
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009804:	b2db      	uxtb	r3, r3
 8009806:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009812:	b2db      	uxtb	r3, r3
 8009814:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	b2db      	uxtb	r3, r3
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009828:	227a      	movs	r2, #122	; 0x7a
 800982a:	2194      	movs	r1, #148	; 0x94
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f002 f83b 	bl	800b8a8 <VL53L0X_WrByte>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800983a:	4313      	orrs	r3, r2
 800983c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fd29 	bl	8009298 <VL53L0X_device_read_strobe>
 8009846:	4603      	mov	r3, r0
 8009848:	461a      	mov	r2, r3
 800984a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800984e:	4313      	orrs	r3, r2
 8009850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009858:	461a      	mov	r2, r3
 800985a:	2190      	movs	r1, #144	; 0x90
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f002 f907 	bl	800ba70 <VL53L0X_RdDWord>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800986a:	4313      	orrs	r3, r2
 800986c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	0f9b      	lsrs	r3, r3, #30
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800987c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009880:	4413      	add	r3, r2
 8009882:	b2db      	uxtb	r3, r3
 8009884:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	0ddb      	lsrs	r3, r3, #23
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009890:	b2db      	uxtb	r3, r3
 8009892:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	0c1b      	lsrs	r3, r3, #16
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	0a5b      	lsrs	r3, r3, #9
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 80f1 	beq.w	8009ab6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80098d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098d8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f040 80ea 	bne.w	8009ab6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80098e2:	227b      	movs	r2, #123	; 0x7b
 80098e4:	2194      	movs	r1, #148	; 0x94
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 ffde 	bl	800b8a8 <VL53L0X_WrByte>
 80098ec:	4603      	mov	r3, r0
 80098ee:	461a      	mov	r2, r3
 80098f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff fccc 	bl	8009298 <VL53L0X_device_read_strobe>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009908:	4313      	orrs	r3, r2
 800990a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800990e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009912:	461a      	mov	r2, r3
 8009914:	2190      	movs	r1, #144	; 0x90
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f002 f8aa 	bl	800ba70 <VL53L0X_RdDWord>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009924:	4313      	orrs	r3, r2
 8009926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800992a:	227c      	movs	r2, #124	; 0x7c
 800992c:	2194      	movs	r1, #148	; 0x94
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 ffba 	bl	800b8a8 <VL53L0X_WrByte>
 8009934:	4603      	mov	r3, r0
 8009936:	461a      	mov	r2, r3
 8009938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800993c:	4313      	orrs	r3, r2
 800993e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff fca8 	bl	8009298 <VL53L0X_device_read_strobe>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009950:	4313      	orrs	r3, r2
 8009952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800995a:	461a      	mov	r2, r3
 800995c:	2190      	movs	r1, #144	; 0x90
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f002 f886 	bl	800ba70 <VL53L0X_RdDWord>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800996c:	4313      	orrs	r3, r2
 800996e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009972:	2273      	movs	r2, #115	; 0x73
 8009974:	2194      	movs	r1, #148	; 0x94
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 ff96 	bl	800b8a8 <VL53L0X_WrByte>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009984:	4313      	orrs	r3, r2
 8009986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fc84 	bl	8009298 <VL53L0X_device_read_strobe>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009998:	4313      	orrs	r3, r2
 800999a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800999e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a2:	461a      	mov	r2, r3
 80099a4:	2190      	movs	r1, #144	; 0x90
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f002 f862 	bl	800ba70 <VL53L0X_RdDWord>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80099be:	b29b      	uxth	r3, r3
 80099c0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80099c2:	2274      	movs	r2, #116	; 0x74
 80099c4:	2194      	movs	r1, #148	; 0x94
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 ff6e 	bl	800b8a8 <VL53L0X_WrByte>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff fc5c 	bl	8009298 <VL53L0X_device_read_strobe>
 80099e0:	4603      	mov	r3, r0
 80099e2:	461a      	mov	r2, r3
 80099e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e8:	4313      	orrs	r3, r2
 80099ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099f2:	461a      	mov	r2, r3
 80099f4:	2190      	movs	r1, #144	; 0x90
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f002 f83a 	bl	800ba70 <VL53L0X_RdDWord>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a04:	4313      	orrs	r3, r2
 8009a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a10:	4313      	orrs	r3, r2
 8009a12:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009a14:	2275      	movs	r2, #117	; 0x75
 8009a16:	2194      	movs	r1, #148	; 0x94
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 ff45 	bl	800b8a8 <VL53L0X_WrByte>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	461a      	mov	r2, r3
 8009a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a26:	4313      	orrs	r3, r2
 8009a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fc33 	bl	8009298 <VL53L0X_device_read_strobe>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a44:	461a      	mov	r2, r3
 8009a46:	2190      	movs	r1, #144	; 0x90
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f002 f811 	bl	800ba70 <VL53L0X_RdDWord>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009a64:	2276      	movs	r2, #118	; 0x76
 8009a66:	2194      	movs	r1, #148	; 0x94
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 ff1d 	bl	800b8a8 <VL53L0X_WrByte>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fc0b 	bl	8009298 <VL53L0X_device_read_strobe>
 8009a82:	4603      	mov	r3, r0
 8009a84:	461a      	mov	r2, r3
 8009a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a94:	461a      	mov	r2, r3
 8009a96:	2190      	movs	r1, #144	; 0x90
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 ffe9 	bl	800ba70 <VL53L0X_RdDWord>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2181      	movs	r1, #129	; 0x81
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 fef4 	bl	800b8a8 <VL53L0X_WrByte>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009ace:	2206      	movs	r2, #6
 8009ad0:	21ff      	movs	r1, #255	; 0xff
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 fee8 	bl	800b8a8 <VL53L0X_WrByte>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	461a      	mov	r2, r3
 8009adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009ae6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009aea:	461a      	mov	r2, r3
 8009aec:	2183      	movs	r1, #131	; 0x83
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 ff5c 	bl	800b9ac <VL53L0X_RdByte>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b06:	f023 0304 	bic.w	r3, r3, #4
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2183      	movs	r1, #131	; 0x83
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 fec9 	bl	800b8a8 <VL53L0X_WrByte>
 8009b16:	4603      	mov	r3, r0
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b24:	2201      	movs	r2, #1
 8009b26:	21ff      	movs	r1, #255	; 0xff
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 febd 	bl	800b8a8 <VL53L0X_WrByte>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	461a      	mov	r2, r3
 8009b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b36:	4313      	orrs	r3, r2
 8009b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 feb1 	bl	800b8a8 <VL53L0X_WrByte>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009b54:	2200      	movs	r2, #0
 8009b56:	21ff      	movs	r1, #255	; 0xff
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 fea5 	bl	800b8a8 <VL53L0X_WrByte>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	461a      	mov	r2, r3
 8009b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 fe99 	bl	800b8a8 <VL53L0X_WrByte>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009b84:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 808f 	bne.w	8009cac <VL53L0X_get_info_from_device+0x98e>
 8009b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b92:	2b07      	cmp	r3, #7
 8009b94:	f000 808a 	beq.w	8009cac <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d024      	beq.n	8009bec <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ba6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d11e      	bne.n	8009bec <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009bb4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009bbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bc6:	e00e      	b.n	8009be6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009bc8:	f107 0208 	add.w	r2, r7, #8
 8009bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bce:	4413      	add	r3, r2
 8009bd0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009bdc:	460a      	mov	r2, r1
 8009bde:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be2:	3301      	adds	r3, #1
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	2b05      	cmp	r3, #5
 8009bea:	dded      	ble.n	8009bc8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009bec:	78fb      	ldrb	r3, [r7, #3]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d018      	beq.n	8009c28 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bfa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d112      	bne.n	8009c28 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	33f3      	adds	r3, #243	; 0xf3
 8009c1a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009c1c:	f107 0310 	add.w	r3, r7, #16
 8009c20:	4619      	mov	r1, r3
 8009c22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c24:	f002 fe2a 	bl	800c87c <strcpy>

		}

		if (((option & 4) == 4) &&
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d030      	beq.n	8009c94 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c36:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d12a      	bne.n	8009c94 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c50:	025b      	lsls	r3, r3, #9
 8009c52:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d011      	beq.n	8009c8c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c76:	fb02 f303 	mul.w	r3, r2, r3
 8009c7a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009c7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009c80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009c84:	425b      	negs	r3, r3
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009c8c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009c94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009ca2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3760      	adds	r7, #96	; 0x60
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009cb8:	b490      	push	{r4, r7}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009cc4:	f240 6377 	movw	r3, #1655	; 0x677
 8009cc8:	f04f 0400 	mov.w	r4, #0
 8009ccc:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8009cd0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009cd4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	fb02 f303 	mul.w	r3, r2, r3
 8009ce4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bc90      	pop	{r4, r7}
 8009cf0:	4770      	bx	lr

08009cf2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d017      	beq.n	8009d3c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d12:	e005      	b.n	8009d20 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	085b      	lsrs	r3, r3, #1
 8009d18:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f4      	bne.n	8009d14 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009d2a:	89fb      	ldrh	r3, [r7, #14]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009d38:	4413      	add	r3, r2
 8009d3a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009d3c:	8afb      	ldrh	r3, [r7, #22]

}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	4603      	mov	r3, r0
 8009d52:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009d5c:	88fa      	ldrh	r2, [r7, #6]
 8009d5e:	0a12      	lsrs	r2, r2, #8
 8009d60:	b292      	uxth	r2, r2
 8009d62:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
	...

08009d78 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff ff92 	bl	8009cb8 <VL53L0X_calc_macro_period_ps>
 8009d94:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009d9c:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <VL53L0X_calc_timeout_mclks+0x50>)
 8009d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009da2:	099b      	lsrs	r3, r3, #6
 8009da4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dac:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	085b      	lsrs	r3, r3, #1
 8009db4:	441a      	add	r2, r3
	timeout_period_mclks =
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dbc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	10624dd3 	.word	0x10624dd3

08009dcc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009de0:	787b      	ldrb	r3, [r7, #1]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff67 	bl	8009cb8 <VL53L0X_calc_macro_period_ps>
 8009dea:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009df2:	4a0a      	ldr	r2, [pc, #40]	; (8009e1c <VL53L0X_calc_timeout_us+0x50>)
 8009df4:	fba2 2303 	umull	r2, r3, r2, r3
 8009df8:	099b      	lsrs	r3, r3, #6
 8009dfa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	fb02 f303 	mul.w	r3, r2, r3
 8009e04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009e08:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <VL53L0X_calc_timeout_us+0x50>)
 8009e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0e:	099b      	lsrs	r3, r3, #6
 8009e10:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009e12:	697b      	ldr	r3, [r7, #20]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	10624dd3 	.word	0x10624dd3

08009e20 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <get_sequence_step_timeout+0x38>
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d002      	beq.n	8009e58 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d128      	bne.n	8009eaa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009e58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f7fd fa7d 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009e74:	f107 0320 	add.w	r3, r7, #32
 8009e78:	461a      	mov	r2, r3
 8009e7a:	2146      	movs	r1, #70	; 0x46
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 fd95 	bl	800b9ac <VL53L0X_RdByte>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff ff5b 	bl	8009d4a <VL53L0X_decode_timeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009e98:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7ff ff93 	bl	8009dcc <VL53L0X_calc_timeout_us>
 8009ea6:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ea8:	e092      	b.n	8009fd0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009eaa:	7afb      	ldrb	r3, [r7, #11]
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d135      	bne.n	8009f1c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009eb0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7fd fa51 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009ec4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 8081 	bne.w	8009fd0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ece:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7fd fa42 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009eea:	f107 031e 	add.w	r3, r7, #30
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2151      	movs	r1, #81	; 0x51
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f001 fd84 	bl	800ba00 <VL53L0X_RdWord>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff ff22 	bl	8009d4a <VL53L0X_decode_timeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009f0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009f0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f10:	4619      	mov	r1, r3
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff ff5a 	bl	8009dcc <VL53L0X_calc_timeout_us>
 8009f18:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f1a:	e059      	b.n	8009fd0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d156      	bne.n	8009fd0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009f22:	f107 0314 	add.w	r3, r7, #20
 8009f26:	4619      	mov	r1, r3
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f7fd fb25 	bl	8007578 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01d      	beq.n	8009f74 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2100      	movs	r1, #0
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7fd fa0d 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10f      	bne.n	8009f74 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009f54:	f107 031e 	add.w	r3, r7, #30
 8009f58:	461a      	mov	r2, r3
 8009f5a:	2151      	movs	r1, #81	; 0x51
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f001 fd4f 	bl	800ba00 <VL53L0X_RdWord>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009f68:	8bfb      	ldrh	r3, [r7, #30]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff feed 	bl	8009d4a <VL53L0X_decode_timeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009f74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d109      	bne.n	8009f90 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009f7c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009f80:	461a      	mov	r2, r3
 8009f82:	2101      	movs	r1, #1
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7fd f9eb 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009f90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10f      	bne.n	8009fb8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009f98:	f107 031c 	add.w	r3, r7, #28
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	2171      	movs	r1, #113	; 0x71
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f001 fd2d 	bl	800ba00 <VL53L0X_RdWord>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009fac:	8bbb      	ldrh	r3, [r7, #28]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fecb 	bl	8009d4a <VL53L0X_decode_timeout>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009fc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff feff 	bl	8009dcc <VL53L0X_calc_timeout_us>
 8009fce:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd4:	601a      	str	r2, [r3, #0]

	return Status;
 8009fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3730      	adds	r7, #48	; 0x30
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b08a      	sub	sp, #40	; 0x28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	460b      	mov	r3, r1
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d005      	beq.n	800a008 <set_sequence_step_timeout+0x26>
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d002      	beq.n	800a008 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d138      	bne.n	800a07a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a008:	f107 031b 	add.w	r3, r7, #27
 800a00c:	461a      	mov	r2, r3
 800a00e:	2100      	movs	r1, #0
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7fd f9a5 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a01c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11a      	bne.n	800a05a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a024:	7efb      	ldrb	r3, [r7, #27]
 800a026:	461a      	mov	r2, r3
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff fea4 	bl	8009d78 <VL53L0X_calc_timeout_mclks>
 800a030:	4603      	mov	r3, r0
 800a032:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a034:	8bbb      	ldrh	r3, [r7, #28]
 800a036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03a:	d903      	bls.n	800a044 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a03c:	23ff      	movs	r3, #255	; 0xff
 800a03e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a042:	e004      	b.n	800a04e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a044:	8bbb      	ldrh	r3, [r7, #28]
 800a046:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a048:	3b01      	subs	r3, #1
 800a04a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a04e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a05a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f040 80ab 	bne.w	800a1ba <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a068:	461a      	mov	r2, r3
 800a06a:	2146      	movs	r1, #70	; 0x46
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f001 fc1b 	bl	800b8a8 <VL53L0X_WrByte>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a078:	e09f      	b.n	800a1ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d135      	bne.n	800a0ec <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11b      	bne.n	800a0c0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a088:	f107 031b 	add.w	r3, r7, #27
 800a08c:	461a      	mov	r2, r3
 800a08e:	2100      	movs	r1, #0
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7fd f965 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a09c:	7efb      	ldrb	r3, [r7, #27]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7ff fe68 	bl	8009d78 <VL53L0X_calc_timeout_mclks>
 800a0a8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fe1f 	bl	8009cf2 <VL53L0X_encode_timeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a0b8:	8b3a      	ldrh	r2, [r7, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d108      	bne.n	800a0da <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a0c8:	8b3b      	ldrh	r3, [r7, #24]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	2151      	movs	r1, #81	; 0x51
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f001 fc0e 	bl	800b8f0 <VL53L0X_WrWord>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a0da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d16b      	bne.n	800a1ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a0ea:	e066      	b.n	800a1ba <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d160      	bne.n	800a1b4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a0f2:	f107 0310 	add.w	r3, r7, #16
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7fd fa3d 	bl	8007578 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a102:	7cfb      	ldrb	r3, [r7, #19]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d01d      	beq.n	800a144 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a108:	f107 031b 	add.w	r3, r7, #27
 800a10c:	461a      	mov	r2, r3
 800a10e:	2100      	movs	r1, #0
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7fd f925 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 800a116:	4603      	mov	r3, r0
 800a118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a11c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10f      	bne.n	800a144 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a124:	f107 0318 	add.w	r3, r7, #24
 800a128:	461a      	mov	r2, r3
 800a12a:	2151      	movs	r1, #81	; 0x51
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f001 fc67 	bl	800ba00 <VL53L0X_RdWord>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a138:	8b3b      	ldrh	r3, [r7, #24]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fe05 	bl	8009d4a <VL53L0X_decode_timeout>
 800a140:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a142:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a14c:	f107 031b 	add.w	r3, r7, #27
 800a150:	461a      	mov	r2, r3
 800a152:	2101      	movs	r1, #1
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7fd f903 	bl	8007360 <VL53L0X_GetVcselPulsePeriod>
 800a15a:	4603      	mov	r3, r0
 800a15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a164:	2b00      	cmp	r3, #0
 800a166:	d128      	bne.n	800a1ba <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a168:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800a16a:	461a      	mov	r2, r3
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff fe02 	bl	8009d78 <VL53L0X_calc_timeout_mclks>
 800a174:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	4413      	add	r3, r2
 800a17c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800a17e:	6a38      	ldr	r0, [r7, #32]
 800a180:	f7ff fdb7 	bl	8009cf2 <VL53L0X_encode_timeout>
 800a184:	4603      	mov	r3, r0
 800a186:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800a188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d108      	bne.n	800a1a2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a190:	8bfb      	ldrh	r3, [r7, #30]
 800a192:	461a      	mov	r2, r3
 800a194:	2171      	movs	r1, #113	; 0x71
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f001 fbaa 	bl	800b8f0 <VL53L0X_WrWord>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a1a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d107      	bne.n	800a1ba <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a1b2:	e002      	b.n	800a1ba <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1b4:	23fc      	movs	r3, #252	; 0xfc
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a1ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3728      	adds	r7, #40	; 0x28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b08a      	sub	sp, #40	; 0x28
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a1dc:	230c      	movs	r3, #12
 800a1de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a1e2:	2312      	movs	r3, #18
 800a1e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a1ee:	230e      	movs	r3, #14
 800a1f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a1f8:	78bb      	ldrb	r3, [r7, #2]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a204:	23fc      	movs	r3, #252	; 0xfc
 800a206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a20a:	e020      	b.n	800a24e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10d      	bne.n	800a22e <VL53L0X_set_vcsel_pulse_period+0x68>
 800a212:	78ba      	ldrb	r2, [r7, #2]
 800a214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a218:	429a      	cmp	r2, r3
 800a21a:	d304      	bcc.n	800a226 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a21c:	78ba      	ldrb	r2, [r7, #2]
 800a21e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a222:	429a      	cmp	r2, r3
 800a224:	d903      	bls.n	800a22e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a226:	23fc      	movs	r3, #252	; 0xfc
 800a228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a22c:	e00f      	b.n	800a24e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a22e:	78fb      	ldrb	r3, [r7, #3]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10c      	bne.n	800a24e <VL53L0X_set_vcsel_pulse_period+0x88>
 800a234:	78ba      	ldrb	r2, [r7, #2]
 800a236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d304      	bcc.n	800a248 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a23e:	78ba      	ldrb	r2, [r7, #2]
 800a240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a244:	429a      	cmp	r2, r3
 800a246:	d902      	bls.n	800a24e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a248:	23fc      	movs	r3, #252	; 0xfc
 800a24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a24e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a25a:	e239      	b.n	800a6d0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d150      	bne.n	800a304 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a262:	78bb      	ldrb	r3, [r7, #2]
 800a264:	2b0c      	cmp	r3, #12
 800a266:	d110      	bne.n	800a28a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a268:	2218      	movs	r2, #24
 800a26a:	2157      	movs	r1, #87	; 0x57
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 fb1b 	bl	800b8a8 <VL53L0X_WrByte>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a278:	2208      	movs	r2, #8
 800a27a:	2156      	movs	r1, #86	; 0x56
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fb13 	bl	800b8a8 <VL53L0X_WrByte>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a288:	e17f      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a28a:	78bb      	ldrb	r3, [r7, #2]
 800a28c:	2b0e      	cmp	r3, #14
 800a28e:	d110      	bne.n	800a2b2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a290:	2230      	movs	r2, #48	; 0x30
 800a292:	2157      	movs	r1, #87	; 0x57
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 fb07 	bl	800b8a8 <VL53L0X_WrByte>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a2a0:	2208      	movs	r2, #8
 800a2a2:	2156      	movs	r1, #86	; 0x56
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 faff 	bl	800b8a8 <VL53L0X_WrByte>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2b0:	e16b      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a2b2:	78bb      	ldrb	r3, [r7, #2]
 800a2b4:	2b10      	cmp	r3, #16
 800a2b6:	d110      	bne.n	800a2da <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a2b8:	2240      	movs	r2, #64	; 0x40
 800a2ba:	2157      	movs	r1, #87	; 0x57
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 faf3 	bl	800b8a8 <VL53L0X_WrByte>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	2156      	movs	r1, #86	; 0x56
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 faeb 	bl	800b8a8 <VL53L0X_WrByte>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2d8:	e157      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a2da:	78bb      	ldrb	r3, [r7, #2]
 800a2dc:	2b12      	cmp	r3, #18
 800a2de:	f040 8154 	bne.w	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a2e2:	2250      	movs	r2, #80	; 0x50
 800a2e4:	2157      	movs	r1, #87	; 0x57
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 fade 	bl	800b8a8 <VL53L0X_WrByte>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	2156      	movs	r1, #86	; 0x56
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fad6 	bl	800b8a8 <VL53L0X_WrByte>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a302:	e142      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	2b01      	cmp	r3, #1
 800a308:	f040 813f 	bne.w	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a30c:	78bb      	ldrb	r3, [r7, #2]
 800a30e:	2b08      	cmp	r3, #8
 800a310:	d14c      	bne.n	800a3ac <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a312:	2210      	movs	r2, #16
 800a314:	2148      	movs	r1, #72	; 0x48
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 fac6 	bl	800b8a8 <VL53L0X_WrByte>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a322:	2208      	movs	r2, #8
 800a324:	2147      	movs	r1, #71	; 0x47
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fabe 	bl	800b8a8 <VL53L0X_WrByte>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a332:	2202      	movs	r2, #2
 800a334:	2132      	movs	r1, #50	; 0x32
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fab6 	bl	800b8a8 <VL53L0X_WrByte>
 800a33c:	4603      	mov	r3, r0
 800a33e:	461a      	mov	r2, r3
 800a340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a344:	4313      	orrs	r3, r2
 800a346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a34a:	220c      	movs	r2, #12
 800a34c:	2130      	movs	r1, #48	; 0x30
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 faaa 	bl	800b8a8 <VL53L0X_WrByte>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a35c:	4313      	orrs	r3, r2
 800a35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a362:	2201      	movs	r2, #1
 800a364:	21ff      	movs	r1, #255	; 0xff
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fa9e 	bl	800b8a8 <VL53L0X_WrByte>
 800a36c:	4603      	mov	r3, r0
 800a36e:	461a      	mov	r2, r3
 800a370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a374:	4313      	orrs	r3, r2
 800a376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a37a:	2230      	movs	r2, #48	; 0x30
 800a37c:	2130      	movs	r1, #48	; 0x30
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f001 fa92 	bl	800b8a8 <VL53L0X_WrByte>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a38c:	4313      	orrs	r3, r2
 800a38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a392:	2200      	movs	r2, #0
 800a394:	21ff      	movs	r1, #255	; 0xff
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 fa86 	bl	800b8a8 <VL53L0X_WrByte>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3aa:	e0ee      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a3ac:	78bb      	ldrb	r3, [r7, #2]
 800a3ae:	2b0a      	cmp	r3, #10
 800a3b0:	d14c      	bne.n	800a44c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a3b2:	2228      	movs	r2, #40	; 0x28
 800a3b4:	2148      	movs	r1, #72	; 0x48
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 fa76 	bl	800b8a8 <VL53L0X_WrByte>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a3c2:	2208      	movs	r2, #8
 800a3c4:	2147      	movs	r1, #71	; 0x47
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 fa6e 	bl	800b8a8 <VL53L0X_WrByte>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	2132      	movs	r1, #50	; 0x32
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 fa66 	bl	800b8a8 <VL53L0X_WrByte>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a3ea:	2209      	movs	r2, #9
 800a3ec:	2130      	movs	r1, #48	; 0x30
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 fa5a 	bl	800b8a8 <VL53L0X_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a402:	2201      	movs	r2, #1
 800a404:	21ff      	movs	r1, #255	; 0xff
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 fa4e 	bl	800b8a8 <VL53L0X_WrByte>
 800a40c:	4603      	mov	r3, r0
 800a40e:	461a      	mov	r2, r3
 800a410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a414:	4313      	orrs	r3, r2
 800a416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a41a:	2220      	movs	r2, #32
 800a41c:	2130      	movs	r1, #48	; 0x30
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 fa42 	bl	800b8a8 <VL53L0X_WrByte>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a42c:	4313      	orrs	r3, r2
 800a42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a432:	2200      	movs	r2, #0
 800a434:	21ff      	movs	r1, #255	; 0xff
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fa36 	bl	800b8a8 <VL53L0X_WrByte>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a444:	4313      	orrs	r3, r2
 800a446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a44a:	e09e      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a44c:	78bb      	ldrb	r3, [r7, #2]
 800a44e:	2b0c      	cmp	r3, #12
 800a450:	d14c      	bne.n	800a4ec <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a452:	2238      	movs	r2, #56	; 0x38
 800a454:	2148      	movs	r1, #72	; 0x48
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 fa26 	bl	800b8a8 <VL53L0X_WrByte>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a462:	2208      	movs	r2, #8
 800a464:	2147      	movs	r1, #71	; 0x47
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 fa1e 	bl	800b8a8 <VL53L0X_WrByte>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a472:	2203      	movs	r2, #3
 800a474:	2132      	movs	r1, #50	; 0x32
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 fa16 	bl	800b8a8 <VL53L0X_WrByte>
 800a47c:	4603      	mov	r3, r0
 800a47e:	461a      	mov	r2, r3
 800a480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a484:	4313      	orrs	r3, r2
 800a486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a48a:	2208      	movs	r2, #8
 800a48c:	2130      	movs	r1, #48	; 0x30
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fa0a 	bl	800b8a8 <VL53L0X_WrByte>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a49c:	4313      	orrs	r3, r2
 800a49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	21ff      	movs	r1, #255	; 0xff
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 f9fe 	bl	800b8a8 <VL53L0X_WrByte>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	2130      	movs	r1, #48	; 0x30
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 f9f2 	bl	800b8a8 <VL53L0X_WrByte>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	21ff      	movs	r1, #255	; 0xff
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 f9e6 	bl	800b8a8 <VL53L0X_WrByte>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4ea:	e04e      	b.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a4ec:	78bb      	ldrb	r3, [r7, #2]
 800a4ee:	2b0e      	cmp	r3, #14
 800a4f0:	d14b      	bne.n	800a58a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a4f2:	2248      	movs	r2, #72	; 0x48
 800a4f4:	2148      	movs	r1, #72	; 0x48
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 f9d6 	bl	800b8a8 <VL53L0X_WrByte>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a502:	2208      	movs	r2, #8
 800a504:	2147      	movs	r1, #71	; 0x47
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 f9ce 	bl	800b8a8 <VL53L0X_WrByte>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a512:	2203      	movs	r2, #3
 800a514:	2132      	movs	r1, #50	; 0x32
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f001 f9c6 	bl	800b8a8 <VL53L0X_WrByte>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a524:	4313      	orrs	r3, r2
 800a526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a52a:	2207      	movs	r2, #7
 800a52c:	2130      	movs	r1, #48	; 0x30
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 f9ba 	bl	800b8a8 <VL53L0X_WrByte>
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a53c:	4313      	orrs	r3, r2
 800a53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a542:	2201      	movs	r2, #1
 800a544:	21ff      	movs	r1, #255	; 0xff
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 f9ae 	bl	800b8a8 <VL53L0X_WrByte>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a554:	4313      	orrs	r3, r2
 800a556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a55a:	2220      	movs	r2, #32
 800a55c:	2130      	movs	r1, #48	; 0x30
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f9a2 	bl	800b8a8 <VL53L0X_WrByte>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a572:	2200      	movs	r2, #0
 800a574:	21ff      	movs	r1, #255	; 0xff
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 f996 	bl	800b8a8 <VL53L0X_WrByte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a584:	4313      	orrs	r3, r2
 800a586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a58a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d17f      	bne.n	800a692 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a592:	78bb      	ldrb	r3, [r7, #2]
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fe38 	bl	800920a <VL53L0X_encode_vcsel_period>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d045      	beq.n	800a636 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a5aa:	e06e      	b.n	800a68a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a5ac:	f107 0314 	add.w	r3, r7, #20
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2103      	movs	r1, #3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff fc33 	bl	8009e20 <get_sequence_step_timeout>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a5c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d109      	bne.n	800a5dc <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a5c8:	f107 0310 	add.w	r3, r7, #16
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fc25 	bl	8009e20 <get_sequence_step_timeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a5dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a5e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	2150      	movs	r1, #80	; 0x50
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 f95b 	bl	800b8a8 <VL53L0X_WrByte>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a5f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d108      	bne.n	800a612 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	461a      	mov	r2, r3
 800a604:	2103      	movs	r1, #3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff fceb 	bl	8009fe2 <set_sequence_step_timeout>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	461a      	mov	r2, r3
 800a61e:	2102      	movs	r1, #2
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fcde 	bl	8009fe2 <set_sequence_step_timeout>
 800a626:	4603      	mov	r3, r0
 800a628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	78ba      	ldrb	r2, [r7, #2]
 800a630:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a634:	e02e      	b.n	800a694 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a636:	f107 0318 	add.w	r3, r7, #24
 800a63a:	461a      	mov	r2, r3
 800a63c:	2104      	movs	r1, #4
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fbee 	bl	8009e20 <get_sequence_step_timeout>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a64a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a652:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a656:	461a      	mov	r2, r3
 800a658:	2170      	movs	r1, #112	; 0x70
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 f924 	bl	800b8a8 <VL53L0X_WrByte>
 800a660:	4603      	mov	r3, r0
 800a662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d108      	bne.n	800a680 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	461a      	mov	r2, r3
 800a672:	2104      	movs	r1, #4
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fcb4 	bl	8009fe2 <set_sequence_step_timeout>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	78ba      	ldrb	r2, [r7, #2]
 800a684:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a688:	e004      	b.n	800a694 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a68a:	23fc      	movs	r3, #252	; 0xfc
 800a68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a690:	e000      	b.n	800a694 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a692:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d109      	bne.n	800a6b0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a6a2:	69f9      	ldr	r1, [r7, #28]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7fc fe1d 	bl	80072e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a6b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d109      	bne.n	800a6cc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a6b8:	f107 010f 	add.w	r1, r7, #15
 800a6bc:	2301      	movs	r3, #1
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7fe fcbd 	bl	8009040 <VL53L0X_perform_phase_calibration>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a6cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3728      	adds	r7, #40	; 0x28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d00a      	beq.n	800a70a <VL53L0X_get_vcsel_pulse_period+0x32>
 800a6f4:	e013      	b.n	800a71e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a6f6:	f107 0316 	add.w	r3, r7, #22
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2150      	movs	r1, #80	; 0x50
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f001 f954 	bl	800b9ac <VL53L0X_RdByte>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a708:	e00b      	b.n	800a722 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a70a:	f107 0316 	add.w	r3, r7, #22
 800a70e:	461a      	mov	r2, r3
 800a710:	2170      	movs	r1, #112	; 0x70
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f001 f94a 	bl	800b9ac <VL53L0X_RdByte>
 800a718:	4603      	mov	r3, r0
 800a71a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a71c:	e001      	b.n	800a722 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a71e:	23fc      	movs	r3, #252	; 0xfc
 800a720:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d107      	bne.n	800a73a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe fd59 	bl	80091e4 <VL53L0X_decode_vcsel_period>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	701a      	strb	r2, [r3, #0]

	return Status;
 800a73a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b092      	sub	sp, #72	; 0x48
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a750:	2300      	movs	r3, #0
 800a752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a756:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a75a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a75c:	f240 7376 	movw	r3, #1910	; 0x776
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a762:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a766:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a768:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a76e:	f240 234e 	movw	r3, #590	; 0x24e
 800a772:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a774:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a77a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a780:	f240 2326 	movw	r3, #550	; 0x226
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a78a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a78e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d205      	bcs.n	800a7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a79c:	23fc      	movs	r3, #252	; 0xfc
 800a79e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a7a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a7a6:	e0aa      	b.n	800a8fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a7a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a7b4:	f107 0314 	add.w	r3, r7, #20
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fc fedc 	bl	8007578 <VL53L0X_GetSequenceStepEnables>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a7c6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d15b      	bne.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a7ce:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d105      	bne.n	800a7e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a7d4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a7da:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d052      	beq.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fb19 	bl	8009e20 <get_sequence_step_timeout>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a7f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a7fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a800:	e07d      	b.n	800a8fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a802:	7d3b      	ldrb	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00f      	beq.n	800a828 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a808:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a80c:	4413      	add	r3, r2
 800a80e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a814:	429a      	cmp	r2, r3
 800a816:	d204      	bcs.n	800a822 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	643b      	str	r3, [r7, #64]	; 0x40
 800a820:	e002      	b.n	800a828 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a822:	23fc      	movs	r3, #252	; 0xfc
 800a824:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a828:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a830:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a834:	e063      	b.n	800a8fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a836:	7dbb      	ldrb	r3, [r7, #22]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d011      	beq.n	800a860 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	4413      	add	r3, r2
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d204      	bcs.n	800a858 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a84e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	643b      	str	r3, [r7, #64]	; 0x40
 800a856:	e016      	b.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a858:	23fc      	movs	r3, #252	; 0xfc
 800a85a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a85e:	e012      	b.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a860:	7d7b      	ldrb	r3, [r7, #21]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00f      	beq.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a86a:	4413      	add	r3, r2
 800a86c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a86e:	69fa      	ldr	r2, [r7, #28]
 800a870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a872:	429a      	cmp	r2, r3
 800a874:	d204      	bcs.n	800a880 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	643b      	str	r3, [r7, #64]	; 0x40
 800a87e:	e002      	b.n	800a886 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a880:	23fc      	movs	r3, #252	; 0xfc
 800a882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a886:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a88e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a892:	e034      	b.n	800a8fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d019      	beq.n	800a8ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a89a:	f107 030c 	add.w	r3, r7, #12
 800a89e:	461a      	mov	r2, r3
 800a8a0:	2103      	movs	r1, #3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fabc 	bl	8009e20 <get_sequence_step_timeout>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b2:	4413      	add	r3, r2
 800a8b4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d204      	bcs.n	800a8c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a8be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8c6:	e002      	b.n	800a8ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8c8:	23fc      	movs	r3, #252	; 0xfc
 800a8ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a8ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d111      	bne.n	800a8fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a8d6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00e      	beq.n	800a8fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a8dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a8e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8e6:	2104      	movs	r1, #4
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff fb7a 	bl	8009fe2 <set_sequence_step_timeout>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a8fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3748      	adds	r7, #72	; 0x48
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b090      	sub	sp, #64	; 0x40
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a910:	2300      	movs	r3, #0
 800a912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a916:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a91a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a91c:	f240 7376 	movw	r3, #1910	; 0x776
 800a920:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a922:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a926:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a928:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a92c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a92e:	f240 234e 	movw	r3, #590	; 0x24e
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a934:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a938:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a93a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a940:	f240 2326 	movw	r3, #550	; 0x226
 800a944:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a94a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	441a      	add	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a954:	f107 0318 	add.w	r3, r7, #24
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fc fe0c 	bl	8007578 <VL53L0X_GetSequenceStepEnables>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a966:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a96e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a972:	e075      	b.n	800aa60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a974:	7e3b      	ldrb	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a97a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a980:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a982:	2b00      	cmp	r3, #0
 800a984:	d030      	beq.n	800a9e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a986:	f107 0310 	add.w	r3, r7, #16
 800a98a:	461a      	mov	r2, r3
 800a98c:	2102      	movs	r1, #2
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fa46 	bl	8009e20 <get_sequence_step_timeout>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a99a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d122      	bne.n	800a9e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a9a2:	7e3b      	ldrb	r3, [r7, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d007      	beq.n	800a9b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a9ac:	6939      	ldr	r1, [r7, #16]
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9b2:	441a      	add	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a9b8:	7ebb      	ldrb	r3, [r7, #26]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d009      	beq.n	800a9d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a9c2:	6939      	ldr	r1, [r7, #16]
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	440b      	add	r3, r1
 800a9c8:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9ca:	441a      	add	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	e00a      	b.n	800a9e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a9d2:	7e7b      	ldrb	r3, [r7, #25]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d007      	beq.n	800a9e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a9dc:	6939      	ldr	r1, [r7, #16]
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a9e2:	441a      	add	r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d114      	bne.n	800aa1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a9f0:	7efb      	ldrb	r3, [r7, #27]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d011      	beq.n	800aa1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	2103      	movs	r1, #3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff fa0e 	bl	8009e20 <get_sequence_step_timeout>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800aa0e:	68f9      	ldr	r1, [r7, #12]
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa14:	441a      	add	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d114      	bne.n	800aa4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800aa22:	7f3b      	ldrb	r3, [r7, #28]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d011      	beq.n	800aa4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2104      	movs	r1, #4
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff f9f5 	bl	8009e20 <get_sequence_step_timeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800aa40:	6979      	ldr	r1, [r7, #20]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800aa46:	441a      	add	r2, r3
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3740      	adds	r7, #64	; 0x40
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aa7a:	e0c6      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	4413      	add	r3, r2
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	74fb      	strb	r3, [r7, #19]
		Index++;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800aa8c:	7cfb      	ldrb	r3, [r7, #19]
 800aa8e:	2bff      	cmp	r3, #255	; 0xff
 800aa90:	f040 808d 	bne.w	800abae <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4413      	add	r3, r2
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	747b      	strb	r3, [r7, #17]
			Index++;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800aaa4:	7c7b      	ldrb	r3, [r7, #17]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d87e      	bhi.n	800aba8 <VL53L0X_load_tuning_settings+0x140>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <VL53L0X_load_tuning_settings+0x48>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800aafb 	.word	0x0800aafb
 800aab8:	0800ab35 	.word	0x0800ab35
 800aabc:	0800ab6f 	.word	0x0800ab6f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4413      	add	r3, r2
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	743b      	strb	r3, [r7, #16]
				Index++;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	3301      	adds	r3, #1
 800aace:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4413      	add	r3, r2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	3301      	adds	r3, #1
 800aade:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aae0:	7c3b      	ldrb	r3, [r7, #16]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4413      	add	r3, r2
 800aaee:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	89ba      	ldrh	r2, [r7, #12]
 800aaf4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800aaf8:	e087      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	4413      	add	r3, r2
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	3301      	adds	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	3301      	adds	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ab1a:	7c3b      	ldrb	r3, [r7, #16]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4413      	add	r3, r2
 800ab28:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	89ba      	ldrh	r2, [r7, #12]
 800ab2e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ab32:	e06a      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4413      	add	r3, r2
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	3301      	adds	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	4413      	add	r3, r2
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	3301      	adds	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ab54:	7c3b      	ldrb	r3, [r7, #16]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	4413      	add	r3, r2
 800ab62:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	89ba      	ldrh	r2, [r7, #12]
 800ab68:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ab6c:	e04d      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	4413      	add	r3, r2
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	743b      	strb	r3, [r7, #16]
				Index++;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	4413      	add	r3, r2
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ab8e:	7c3b      	ldrb	r3, [r7, #16]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	89ba      	ldrh	r2, [r7, #12]
 800aba2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800aba6:	e030      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aba8:	23fc      	movs	r3, #252	; 0xfc
 800abaa:	77fb      	strb	r3, [r7, #31]
 800abac:	e02d      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800abae:	7cfb      	ldrb	r3, [r7, #19]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d828      	bhi.n	800ac06 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4413      	add	r3, r2
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	74bb      	strb	r3, [r7, #18]
			Index++;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	3301      	adds	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800abc4:	2300      	movs	r3, #0
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	e00f      	b.n	800abea <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	4413      	add	r3, r2
 800abd0:	7819      	ldrb	r1, [r3, #0]
 800abd2:	f107 0208 	add.w	r2, r7, #8
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	4413      	add	r3, r2
 800abda:	460a      	mov	r2, r1
 800abdc:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	3301      	adds	r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	3301      	adds	r3, #1
 800abe8:	61bb      	str	r3, [r7, #24]
 800abea:	7cfb      	ldrb	r3, [r7, #19]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	429a      	cmp	r2, r3
 800abf0:	dbeb      	blt.n	800abca <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800abf2:	7cfb      	ldrb	r3, [r7, #19]
 800abf4:	f107 0208 	add.w	r2, r7, #8
 800abf8:	7cb9      	ldrb	r1, [r7, #18]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fdf8 	bl	800b7f0 <VL53L0X_WriteMulti>
 800ac00:	4603      	mov	r3, r0
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e001      	b.n	800ac0a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac06:	23fc      	movs	r3, #252	; 0xfc
 800ac08:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	4413      	add	r3, r2
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <VL53L0X_load_tuning_settings+0x1b8>
 800ac16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f43f af2e 	beq.w	800aa7c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ac42:	f107 0313 	add.w	r3, r7, #19
 800ac46:	4619      	mov	r1, r3
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7fc fd21 	bl	8007690 <VL53L0X_GetXTalkCompensationEnable>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ac52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d111      	bne.n	800ac7e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ac5a:	7cfb      	ldrb	r3, [r7, #19]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	8a9b      	ldrh	r3, [r3, #20]
 800ac6a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	fb02 f303 	mul.w	r3, r2, r3
 800ac72:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3380      	adds	r3, #128	; 0x80
 800ac78:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ac7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b086      	sub	sp, #24
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800aca2:	f107 0310 	add.w	r3, r7, #16
 800aca6:	461a      	mov	r2, r3
 800aca8:	68b9      	ldr	r1, [r7, #8]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff ffbe 	bl	800ac2c <VL53L0X_get_total_xtalk_rate>
 800acb0:	4603      	mov	r3, r0
 800acb2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800acb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d105      	bne.n	800acc8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	441a      	add	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	601a      	str	r2, [r3, #0]

	return Status;
 800acc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b09a      	sub	sp, #104	; 0x68
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ace2:	2312      	movs	r3, #18
 800ace4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ace6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acea:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800acec:	2342      	movs	r3, #66	; 0x42
 800acee:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800acf0:	2306      	movs	r3, #6
 800acf2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800acf4:	2307      	movs	r3, #7
 800acf6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ad0c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ad0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	3380      	adds	r3, #128	; 0x80
 800ad1c:	0a1b      	lsrs	r3, r3, #8
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad24:	fb02 f303 	mul.w	r3, r2, r3
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01b      	beq.n	800ad6c <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	029b      	lsls	r3, r3, #10
 800ad38:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ad3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad40:	4413      	add	r3, r2
 800ad42:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ad44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ad4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad50:	4613      	mov	r3, r2
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	4413      	add	r3, r2
 800ad56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ad58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad5c:	fb02 f303 	mul.w	r3, r2, r3
 800ad60:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ad62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad68:	0c1b      	lsrs	r3, r3, #16
 800ad6a:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad70:	fb02 f303 	mul.w	r3, r2, r3
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad7c:	0c1b      	lsrs	r3, r3, #16
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad84:	fb02 f303 	mul.w	r3, r2, r3
 800ad88:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ad8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad90:	0c1b      	lsrs	r3, r3, #16
 800ad92:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ad94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad96:	085a      	lsrs	r2, r3, #1
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	441a      	add	r2, r3
 800ad9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada8:	fb02 f303 	mul.w	r3, r2, r3
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb4:	d302      	bcc.n	800adbc <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800adb6:	4b55      	ldr	r3, [pc, #340]	; (800af0c <VL53L0X_calc_dmax+0x238>)
 800adb8:	663b      	str	r3, [r7, #96]	; 0x60
 800adba:	e016      	b.n	800adea <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800adbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adbe:	085a      	lsrs	r2, r3, #1
 800adc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adc2:	441a      	add	r2, r3
 800adc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adca:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800adcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800add0:	fb02 f303 	mul.w	r3, r2, r3
 800add4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800add6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800add8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800addc:	0c1b      	lsrs	r3, r3, #16
 800adde:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ade0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ade2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ade4:	fb02 f303 	mul.w	r3, r2, r3
 800ade8:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800adea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adec:	039b      	lsls	r3, r3, #14
 800adee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800adf2:	4a47      	ldr	r2, [pc, #284]	; (800af10 <VL53L0X_calc_dmax+0x23c>)
 800adf4:	fba2 2303 	umull	r2, r3, r2, r3
 800adf8:	099b      	lsrs	r3, r3, #6
 800adfa:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae00:	fb02 f303 	mul.w	r3, r2, r3
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ae06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	3308      	adds	r3, #8
 800ae14:	091b      	lsrs	r3, r3, #4
 800ae16:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ae18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ae20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae22:	4613      	mov	r3, r2
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae32:	0b9b      	lsrs	r3, r3, #14
 800ae34:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ae36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae3a:	4413      	add	r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ae3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae40:	085b      	lsrs	r3, r3, #1
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	4413      	add	r3, r2
 800ae46:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae50:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	039b      	lsls	r3, r3, #14
 800ae56:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	085b      	lsrs	r3, r3, #1
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	4413      	add	r3, r2
 800ae60:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae70:	fb02 f303 	mul.w	r3, r2, r3
 800ae74:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae7c:	4a24      	ldr	r2, [pc, #144]	; (800af10 <VL53L0X_calc_dmax+0x23c>)
 800ae7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae82:	099b      	lsrs	r3, r3, #6
 800ae84:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae92:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <VL53L0X_calc_dmax+0x23c>)
 800ae94:	fba2 2303 	umull	r2, r3, r2, r3
 800ae98:	099b      	lsrs	r3, r3, #6
 800ae9a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ae9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae9e:	3380      	adds	r3, #128	; 0x80
 800aea0:	0a1b      	lsrs	r3, r3, #8
 800aea2:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d008      	beq.n	800aebc <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	085a      	lsrs	r2, r3, #1
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	441a      	add	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800aeba:	e001      	b.n	800aec0 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800aec0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aec2:	f7fe f9b5 	bl	8009230 <VL53L0X_isqrt>
 800aec6:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d008      	beq.n	800aee0 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	085a      	lsrs	r2, r3, #1
 800aed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed4:	441a      	add	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aedc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aede:	e001      	b.n	800aee4 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800aee4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aee6:	f7fe f9a3 	bl	8009230 <VL53L0X_isqrt>
 800aeea:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800aeec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d902      	bls.n	800af00 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800aefa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aefc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aefe:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800af00:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800af04:	4618      	mov	r0, r3
 800af06:	3768      	adds	r7, #104	; 0x68
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	fff00000 	.word	0xfff00000
 800af10:	10624dd3 	.word	0x10624dd3

0800af14 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b0b4      	sub	sp, #208	; 0xd0
 800af18:	af04      	add	r7, sp, #16
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800af22:	f44f 7348 	mov.w	r3, #800	; 0x320
 800af26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800af2a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800af2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800af32:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800af36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800af3a:	f241 235c 	movw	r3, #4700	; 0x125c
 800af3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800af42:	4b9e      	ldr	r3, [pc, #632]	; (800b1bc <VL53L0X_calc_sigma_estimate+0x2a8>)
 800af44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800af48:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800af4c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800af4e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800af52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af56:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800af5c:	4b98      	ldr	r3, [pc, #608]	; (800b1c0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800af5e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800af60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af64:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800af66:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800af6a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800af6c:	f240 6377 	movw	r3, #1655	; 0x677
 800af70:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af72:	2300      	movs	r3, #0
 800af74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af86:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800af8a:	0c1b      	lsrs	r3, r3, #16
 800af8c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800af94:	f107 0310 	add.w	r3, r7, #16
 800af98:	461a      	mov	r2, r3
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7ff fe74 	bl	800ac8a <VL53L0X_get_total_signal_rate>
 800afa2:	4603      	mov	r3, r0
 800afa4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800afa8:	f107 0314 	add.w	r3, r7, #20
 800afac:	461a      	mov	r2, r3
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fe3b 	bl	800ac2c <VL53L0X_get_total_xtalk_rate>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800afc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afd8:	fb02 f303 	mul.w	r3, r2, r3
 800afdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800afe0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800afe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d902      	bls.n	800aff0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800afea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800aff0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d168      	bne.n	800b0ca <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800affe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b008:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b00c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b010:	461a      	mov	r2, r3
 800b012:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7fe feae 	bl	8009d78 <VL53L0X_calc_timeout_mclks>
 800b01c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b02e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b032:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b036:	461a      	mov	r2, r3
 800b038:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7fe fe9b 	bl	8009d78 <VL53L0X_calc_timeout_mclks>
 800b042:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b044:	2303      	movs	r3, #3
 800b046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b04a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b04e:	2b08      	cmp	r3, #8
 800b050:	d102      	bne.n	800b058 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b052:	2302      	movs	r3, #2
 800b054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b05c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b05e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b062:	fb02 f303 	mul.w	r3, r2, r3
 800b066:	02db      	lsls	r3, r3, #11
 800b068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b06c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b070:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b074:	4a53      	ldr	r2, [pc, #332]	; (800b1c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b076:	fba2 2303 	umull	r2, r3, r2, r3
 800b07a:	099b      	lsrs	r3, r3, #6
 800b07c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b080:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b084:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b086:	fb02 f303 	mul.w	r3, r2, r3
 800b08a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b08e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b092:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b096:	4a4b      	ldr	r2, [pc, #300]	; (800b1c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b098:	fba2 2303 	umull	r2, r3, r2, r3
 800b09c:	099b      	lsrs	r3, r3, #6
 800b09e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	3380      	adds	r3, #128	; 0x80
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b0b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0bc:	3380      	adds	r3, #128	; 0x80
 800b0be:	0a1b      	lsrs	r3, r3, #8
 800b0c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	021b      	lsls	r3, r3, #8
 800b0c8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b0ca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b0d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b0d6:	e165      	b.n	800b3a4 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800b0d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10c      	bne.n	800b0f8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0e4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e153      	b.n	800b3a0 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b0f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d102      	bne.n	800b106 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b100:	2301      	movs	r3, #1
 800b102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b10c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b10e:	041a      	lsls	r2, r3, #16
 800b110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b112:	fbb2 f3f3 	udiv	r3, r2, r3
 800b116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b11a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b11e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b120:	429a      	cmp	r2, r3
 800b122:	d902      	bls.n	800b12a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b12a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b12e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b132:	fb02 f303 	mul.w	r3, r2, r3
 800b136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b13a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b13e:	4613      	mov	r3, r2
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe f872 	bl	8009230 <VL53L0X_isqrt>
 800b14c:	4603      	mov	r3, r0
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	891b      	ldrh	r3, [r3, #8]
 800b156:	461a      	mov	r2, r3
 800b158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b162:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b168:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b16a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b16c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b170:	4a14      	ldr	r2, [pc, #80]	; (800b1c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b172:	fba2 2303 	umull	r2, r3, r2, r3
 800b176:	099b      	lsrs	r3, r3, #6
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b17a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b182:	4a10      	ldr	r2, [pc, #64]	; (800b1c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b184:	fba2 2303 	umull	r2, r3, r2, r3
 800b188:	099b      	lsrs	r3, r3, #6
 800b18a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18e:	021b      	lsls	r3, r3, #8
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	bfb8      	it	lt
 800b19e:	425b      	neglt	r3, r3
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	7e1b      	ldrb	r3, [r3, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00b      	beq.n	800b1c8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b1b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b1b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1b8:	e035      	b.n	800b226 <VL53L0X_calc_sigma_estimate+0x312>
 800b1ba:	bf00      	nop
 800b1bc:	028f87ae 	.word	0x028f87ae
 800b1c0:	0006999a 	.word	0x0006999a
 800b1c4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b1dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1e0:	fb02 f303 	mul.w	r3, r2, r3
 800b1e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b1e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ee:	4413      	add	r3, r2
 800b1f0:	0c1b      	lsrs	r3, r3, #16
 800b1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b1fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b20c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b210:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b214:	fb02 f303 	mul.w	r3, r2, r3
 800b218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b21c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b220:	0b9b      	lsrs	r3, r3, #14
 800b222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b238:	0c1b      	lsrs	r3, r3, #16
 800b23a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b24a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
 800b25e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	4413      	add	r3, r2
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26a:	f7fd ffe1 	bl	8009230 <VL53L0X_isqrt>
 800b26e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	3332      	adds	r3, #50	; 0x32
 800b27a:	4a4c      	ldr	r2, [pc, #304]	; (800b3ac <VL53L0X_calc_sigma_estimate+0x498>)
 800b27c:	fba2 2303 	umull	r2, r3, r2, r3
 800b280:	095a      	lsrs	r2, r3, #5
 800b282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b284:	fbb2 f3f3 	udiv	r3, r2, r3
 800b288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b28c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b290:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b294:	fb02 f303 	mul.w	r3, r2, r3
 800b298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b29c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b2aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2ae:	4a40      	ldr	r2, [pc, #256]	; (800b3b0 <VL53L0X_calc_sigma_estimate+0x49c>)
 800b2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b4:	0b5b      	lsrs	r3, r3, #13
 800b2b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b2ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d902      	bls.n	800b2ca <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b2c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b2ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2d2:	4413      	add	r3, r2
 800b2d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b2d8:	4a36      	ldr	r2, [pc, #216]	; (800b3b4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800b2da:	fba2 2303 	umull	r2, r3, r2, r3
 800b2de:	099b      	lsrs	r3, r3, #6
 800b2e0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b2e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ea:	441a      	add	r2, r3
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fd ff9c 	bl	8009230 <VL53L0X_isqrt>
 800b2f8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	021b      	lsls	r3, r3, #8
 800b2fe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b306:	4a2b      	ldr	r2, [pc, #172]	; (800b3b4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800b308:	fba2 2303 	umull	r2, r3, r2, r3
 800b30c:	099b      	lsrs	r3, r3, #6
 800b30e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b314:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b318:	fb02 f303 	mul.w	r3, r2, r3
 800b31c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	69fa      	ldr	r2, [r7, #28]
 800b322:	fb02 f303 	mul.w	r3, r2, r3
 800b326:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	4413      	add	r3, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fd ff7e 	bl	8009230 <VL53L0X_isqrt>
 800b334:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b33c:	fb02 f303 	mul.w	r3, r2, r3
 800b340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <VL53L0X_calc_sigma_estimate+0x44a>
 800b34a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <VL53L0X_calc_sigma_estimate+0x44a>
 800b352:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b356:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d903      	bls.n	800b366 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b35e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b36c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b378:	6939      	ldr	r1, [r7, #16]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b382:	9302      	str	r3, [sp, #8]
 800b384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7ff fc9d 	bl	800acd4 <VL53L0X_calc_dmax>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	37c0      	adds	r7, #192	; 0xc0
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	51eb851f 	.word	0x51eb851f
 800b3b0:	d1b71759 	.word	0xd1b71759
 800b3b4:	10624dd3 	.word	0x10624dd3

0800b3b8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b090      	sub	sp, #64	; 0x40
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	72fb      	strb	r3, [r7, #11]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	10db      	asrs	r3, r3, #3
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	f003 030f 	and.w	r3, r3, #15
 800b414:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b418:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d017      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
 800b420:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b424:	2b05      	cmp	r3, #5
 800b426:	d013      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b428:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b42c:	2b07      	cmp	r3, #7
 800b42e:	d00f      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b430:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b434:	2b0c      	cmp	r3, #12
 800b436:	d00b      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b438:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b43c:	2b0d      	cmp	r3, #13
 800b43e:	d007      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b440:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b444:	2b0e      	cmp	r3, #14
 800b446:	d003      	beq.n	800b450 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b448:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b44c:	2b0f      	cmp	r3, #15
 800b44e:	d103      	bne.n	800b458 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b456:	e002      	b.n	800b45e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b45e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b462:	2b00      	cmp	r3, #0
 800b464:	d109      	bne.n	800b47a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b466:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b46a:	461a      	mov	r2, r3
 800b46c:	2100      	movs	r1, #0
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7fc f9e2 	bl	8007838 <VL53L0X_GetLimitCheckEnable>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b47a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d02e      	beq.n	800b4e0 <VL53L0X_get_pal_range_status+0x128>
 800b482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b486:	2b00      	cmp	r3, #0
 800b488:	d12a      	bne.n	800b4e0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b48a:	f107 0310 	add.w	r3, r7, #16
 800b48e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fd3d 	bl	800af14 <VL53L0X_calc_sigma_estimate>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b4a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d103      	bne.n	800b4b0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b4b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d113      	bne.n	800b4e0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b4b8:	f107 0320 	add.w	r3, r7, #32
 800b4bc:	461a      	mov	r2, r3
 800b4be:	2100      	movs	r1, #0
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7fc fa3f 	bl	8007944 <VL53L0X_GetLimitCheckValue>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d902      	bls.n	800b4e0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b4e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d109      	bne.n	800b4fc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b4e8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f7fc f9a1 	bl	8007838 <VL53L0X_GetLimitCheckEnable>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b4fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b500:	2b00      	cmp	r3, #0
 800b502:	d044      	beq.n	800b58e <VL53L0X_get_pal_range_status+0x1d6>
 800b504:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d140      	bne.n	800b58e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b50c:	f107 031c 	add.w	r3, r7, #28
 800b510:	461a      	mov	r2, r3
 800b512:	2102      	movs	r1, #2
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7fc fa15 	bl	8007944 <VL53L0X_GetLimitCheckValue>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b520:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b524:	2b00      	cmp	r3, #0
 800b526:	d107      	bne.n	800b538 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b528:	2201      	movs	r2, #1
 800b52a:	21ff      	movs	r1, #255	; 0xff
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 f9bb 	bl	800b8a8 <VL53L0X_WrByte>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d109      	bne.n	800b554 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b540:	f107 0316 	add.w	r3, r7, #22
 800b544:	461a      	mov	r2, r3
 800b546:	21b6      	movs	r1, #182	; 0xb6
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 fa59 	bl	800ba00 <VL53L0X_RdWord>
 800b54e:	4603      	mov	r3, r0
 800b550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b554:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b55c:	2200      	movs	r2, #0
 800b55e:	21ff      	movs	r1, #255	; 0xff
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f9a1 	bl	800b8a8 <VL53L0X_WrByte>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b56c:	8afb      	ldrh	r3, [r7, #22]
 800b56e:	025b      	lsls	r3, r3, #9
 800b570:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b576:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d006      	beq.n	800b58e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b580:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b584:	429a      	cmp	r2, r3
 800b586:	d902      	bls.n	800b58e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b588:	2301      	movs	r3, #1
 800b58a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b58e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b59a:	461a      	mov	r2, r3
 800b59c:	2103      	movs	r1, #3
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7fc f94a 	bl	8007838 <VL53L0X_GetLimitCheckEnable>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b5aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d023      	beq.n	800b5fa <VL53L0X_get_pal_range_status+0x242>
 800b5b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d11f      	bne.n	800b5fa <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b5ba:	893b      	ldrh	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c4:	e005      	b.n	800b5d2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	021a      	lsls	r2, r3, #8
 800b5ca:	893b      	ldrh	r3, [r7, #8]
 800b5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	2103      	movs	r1, #3
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7fc f9b2 	bl	8007944 <VL53L0X_GetLimitCheckValue>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b5ec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d202      	bcs.n	800b5fa <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d14a      	bne.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b602:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b606:	2b01      	cmp	r3, #1
 800b608:	d103      	bne.n	800b612 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60c:	22ff      	movs	r2, #255	; 0xff
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e042      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b612:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b616:	2b01      	cmp	r3, #1
 800b618:	d007      	beq.n	800b62a <VL53L0X_get_pal_range_status+0x272>
 800b61a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d003      	beq.n	800b62a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b622:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b626:	2b03      	cmp	r3, #3
 800b628:	d103      	bne.n	800b632 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62c:	2205      	movs	r2, #5
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	e032      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b632:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b636:	2b06      	cmp	r3, #6
 800b638:	d003      	beq.n	800b642 <VL53L0X_get_pal_range_status+0x28a>
 800b63a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d103      	bne.n	800b64a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b644:	2204      	movs	r2, #4
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e026      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b64a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b64e:	2b08      	cmp	r3, #8
 800b650:	d007      	beq.n	800b662 <VL53L0X_get_pal_range_status+0x2aa>
 800b652:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b656:	2b0a      	cmp	r3, #10
 800b658:	d003      	beq.n	800b662 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b65a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d103      	bne.n	800b66a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b664:	2203      	movs	r2, #3
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e016      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b66a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d003      	beq.n	800b67a <VL53L0X_get_pal_range_status+0x2c2>
 800b672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b676:	2b01      	cmp	r3, #1
 800b678:	d103      	bne.n	800b682 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67c:	2202      	movs	r2, #2
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	e00a      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b682:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b686:	2b01      	cmp	r3, #1
 800b688:	d103      	bne.n	800b692 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68c:	2201      	movs	r2, #1
 800b68e:	701a      	strb	r2, [r3, #0]
 800b690:	e002      	b.n	800b698 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b694:	2200      	movs	r2, #0
 800b696:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6a6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7fc f8c2 	bl	8007838 <VL53L0X_GetLimitCheckEnable>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b6ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d14f      	bne.n	800b762 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b6c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <VL53L0X_get_pal_range_status+0x31a>
 800b6ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d103      	bne.n	800b6da <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6d8:	e002      	b.n	800b6e0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b6e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b6ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d003      	beq.n	800b6fa <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b6f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d103      	bne.n	800b702 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b700:	e002      	b.n	800b708 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b70e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b712:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <VL53L0X_get_pal_range_status+0x36a>
 800b71a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d103      	bne.n	800b72a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b728:	e002      	b.n	800b730 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b73a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <VL53L0X_get_pal_range_status+0x392>
 800b742:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b746:	2b01      	cmp	r3, #1
 800b748:	d103      	bne.n	800b752 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b750:	e002      	b.n	800b758 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b75e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b762:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b766:	4618      	mov	r0, r3
 800b768:	3740      	adds	r7, #64	; 0x40
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b76e:	b580      	push	{r7, lr}
 800b770:	b088      	sub	sp, #32
 800b772:	af02      	add	r7, sp, #8
 800b774:	60f8      	str	r0, [r7, #12]
 800b776:	60b9      	str	r1, [r7, #8]
 800b778:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	330a      	adds	r3, #10
 800b77e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b78c:	b299      	uxth	r1, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	b29a      	uxth	r2, r3
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	4613      	mov	r3, r2
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	f7f7 fbd7 	bl	8002f4c <HAL_I2C_Master_Transmit>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b7a2:	693b      	ldr	r3, [r7, #16]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	330a      	adds	r3, #10
 800b7bc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	b299      	uxth	r1, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	f7f7 fca9 	bl	8003134 <HAL_I2C_Master_Receive>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b7e6:	693b      	ldr	r3, [r7, #16]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2b3f      	cmp	r3, #63	; 0x3f
 800b808:	d902      	bls.n	800b810 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b80a:	f06f 0303 	mvn.w	r3, #3
 800b80e:	e016      	b.n	800b83e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b810:	4a0d      	ldr	r2, [pc, #52]	; (800b848 <VL53L0X_WriteMulti+0x58>)
 800b812:	7afb      	ldrb	r3, [r7, #11]
 800b814:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	480c      	ldr	r0, [pc, #48]	; (800b84c <VL53L0X_WriteMulti+0x5c>)
 800b81c:	f000 f99e 	bl	800bb5c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	461a      	mov	r2, r3
 800b826:	4908      	ldr	r1, [pc, #32]	; (800b848 <VL53L0X_WriteMulti+0x58>)
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff ffa0 	bl	800b76e <_I2CWrite>
 800b82e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b836:	23ec      	movs	r3, #236	; 0xec
 800b838:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b83a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000930 	.word	0x20000930
 800b84c:	20000931 	.word	0x20000931

0800b850 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	460b      	mov	r3, r1
 800b85e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b860:	2300      	movs	r3, #0
 800b862:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b864:	f107 030b 	add.w	r3, r7, #11
 800b868:	2201      	movs	r2, #1
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff ff7e 	bl	800b76e <_I2CWrite>
 800b872:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b87a:	23ec      	movs	r3, #236	; 0xec
 800b87c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b87e:	e00c      	b.n	800b89a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f7ff ff91 	bl	800b7ac <_I2CRead>
 800b88a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b892:	23ec      	movs	r3, #236	; 0xec
 800b894:	75fb      	strb	r3, [r7, #23]
 800b896:	e000      	b.n	800b89a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b898:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
	...

0800b8a8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b8bc:	4a0b      	ldr	r2, [pc, #44]	; (800b8ec <VL53L0X_WrByte+0x44>)
 800b8be:	78fb      	ldrb	r3, [r7, #3]
 800b8c0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <VL53L0X_WrByte+0x44>)
 800b8c4:	78bb      	ldrb	r3, [r7, #2]
 800b8c6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	4908      	ldr	r1, [pc, #32]	; (800b8ec <VL53L0X_WrByte+0x44>)
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff ff4e 	bl	800b76e <_I2CWrite>
 800b8d2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b8da:	23ec      	movs	r3, #236	; 0xec
 800b8dc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20000930 	.word	0x20000930

0800b8f0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b904:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <VL53L0X_WrWord+0x50>)
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b90a:	883b      	ldrh	r3, [r7, #0]
 800b90c:	0a1b      	lsrs	r3, r3, #8
 800b90e:	b29b      	uxth	r3, r3
 800b910:	b2da      	uxtb	r2, r3
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <VL53L0X_WrWord+0x50>)
 800b914:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b916:	883b      	ldrh	r3, [r7, #0]
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <VL53L0X_WrWord+0x50>)
 800b91c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b91e:	2203      	movs	r2, #3
 800b920:	4907      	ldr	r1, [pc, #28]	; (800b940 <VL53L0X_WrWord+0x50>)
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff ff23 	bl	800b76e <_I2CWrite>
 800b928:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b930:	23ec      	movs	r3, #236	; 0xec
 800b932:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000930 	.word	0x20000930

0800b944 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	4608      	mov	r0, r1
 800b94e:	4611      	mov	r1, r2
 800b950:	461a      	mov	r2, r3
 800b952:	4603      	mov	r3, r0
 800b954:	70fb      	strb	r3, [r7, #3]
 800b956:	460b      	mov	r3, r1
 800b958:	70bb      	strb	r3, [r7, #2]
 800b95a:	4613      	mov	r3, r2
 800b95c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b962:	f107 020e 	add.w	r2, r7, #14
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f81e 	bl	800b9ac <VL53L0X_RdByte>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d110      	bne.n	800b99e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b97c:	7bba      	ldrb	r2, [r7, #14]
 800b97e:	78bb      	ldrb	r3, [r7, #2]
 800b980:	4013      	ands	r3, r2
 800b982:	b2da      	uxtb	r2, r3
 800b984:	787b      	ldrb	r3, [r7, #1]
 800b986:	4313      	orrs	r3, r2
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b98c:	7bba      	ldrb	r2, [r7, #14]
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7ff ff88 	bl	800b8a8 <VL53L0X_WrByte>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	e000      	b.n	800b9a0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b99e:	bf00      	nop
done:
    return Status;
 800b9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b9be:	f107 030b 	add.w	r3, r7, #11
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff fed1 	bl	800b76e <_I2CWrite>
 800b9cc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9d4:	23ec      	movs	r3, #236	; 0xec
 800b9d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b9d8:	e00c      	b.n	800b9f4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b9da:	2201      	movs	r2, #1
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fee4 	bl	800b7ac <_I2CRead>
 800b9e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9ec:	23ec      	movs	r3, #236	; 0xec
 800b9ee:	75fb      	strb	r3, [r7, #23]
 800b9f0:	e000      	b.n	800b9f4 <VL53L0X_RdByte+0x48>
    }
done:
 800b9f2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b9f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba12:	f107 030b 	add.w	r3, r7, #11
 800ba16:	2201      	movs	r2, #1
 800ba18:	4619      	mov	r1, r3
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff fea7 	bl	800b76e <_I2CWrite>
 800ba20:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba28:	23ec      	movs	r3, #236	; 0xec
 800ba2a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba2c:	e017      	b.n	800ba5e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ba2e:	2202      	movs	r2, #2
 800ba30:	490e      	ldr	r1, [pc, #56]	; (800ba6c <VL53L0X_RdWord+0x6c>)
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff feba 	bl	800b7ac <_I2CRead>
 800ba38:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba40:	23ec      	movs	r3, #236	; 0xec
 800ba42:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba44:	e00b      	b.n	800ba5e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <VL53L0X_RdWord+0x6c>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <VL53L0X_RdWord+0x6c>)
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ba5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000930 	.word	0x20000930

0800ba70 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ba82:	f107 030b 	add.w	r3, r7, #11
 800ba86:	2201      	movs	r2, #1
 800ba88:	4619      	mov	r1, r3
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f7ff fe6f 	bl	800b76e <_I2CWrite>
 800ba90:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba98:	23ec      	movs	r3, #236	; 0xec
 800ba9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ba9c:	e01b      	b.n	800bad6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ba9e:	2204      	movs	r2, #4
 800baa0:	4910      	ldr	r1, [pc, #64]	; (800bae4 <VL53L0X_RdDWord+0x74>)
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff fe82 	bl	800b7ac <_I2CRead>
 800baa8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bab0:	23ec      	movs	r3, #236	; 0xec
 800bab2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bab4:	e00f      	b.n	800bad6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bab6:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <VL53L0X_RdDWord+0x74>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	061a      	lsls	r2, r3, #24
 800babc:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <VL53L0X_RdDWord+0x74>)
 800babe:	785b      	ldrb	r3, [r3, #1]
 800bac0:	041b      	lsls	r3, r3, #16
 800bac2:	441a      	add	r2, r3
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <VL53L0X_RdDWord+0x74>)
 800bac6:	789b      	ldrb	r3, [r3, #2]
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	4413      	add	r3, r2
 800bacc:	4a05      	ldr	r2, [pc, #20]	; (800bae4 <VL53L0X_RdDWord+0x74>)
 800bace:	78d2      	ldrb	r2, [r2, #3]
 800bad0:	441a      	add	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000930 	.word	0x20000930

0800bae8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800baf4:	2002      	movs	r0, #2
 800baf6:	f7f6 f989 	bl	8001e0c <HAL_Delay>
    return status;
 800bafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <__errno>:
 800bb08:	4b01      	ldr	r3, [pc, #4]	; (800bb10 <__errno+0x8>)
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	200002cc 	.word	0x200002cc

0800bb14 <__libc_init_array>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4e0d      	ldr	r6, [pc, #52]	; (800bb4c <__libc_init_array+0x38>)
 800bb18:	4c0d      	ldr	r4, [pc, #52]	; (800bb50 <__libc_init_array+0x3c>)
 800bb1a:	1ba4      	subs	r4, r4, r6
 800bb1c:	10a4      	asrs	r4, r4, #2
 800bb1e:	2500      	movs	r5, #0
 800bb20:	42a5      	cmp	r5, r4
 800bb22:	d109      	bne.n	800bb38 <__libc_init_array+0x24>
 800bb24:	4e0b      	ldr	r6, [pc, #44]	; (800bb54 <__libc_init_array+0x40>)
 800bb26:	4c0c      	ldr	r4, [pc, #48]	; (800bb58 <__libc_init_array+0x44>)
 800bb28:	f004 fd9e 	bl	8010668 <_init>
 800bb2c:	1ba4      	subs	r4, r4, r6
 800bb2e:	10a4      	asrs	r4, r4, #2
 800bb30:	2500      	movs	r5, #0
 800bb32:	42a5      	cmp	r5, r4
 800bb34:	d105      	bne.n	800bb42 <__libc_init_array+0x2e>
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb3c:	4798      	blx	r3
 800bb3e:	3501      	adds	r5, #1
 800bb40:	e7ee      	b.n	800bb20 <__libc_init_array+0xc>
 800bb42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb46:	4798      	blx	r3
 800bb48:	3501      	adds	r5, #1
 800bb4a:	e7f2      	b.n	800bb32 <__libc_init_array+0x1e>
 800bb4c:	08010a80 	.word	0x08010a80
 800bb50:	08010a80 	.word	0x08010a80
 800bb54:	08010a80 	.word	0x08010a80
 800bb58:	08010a84 	.word	0x08010a84

0800bb5c <memcpy>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	1e43      	subs	r3, r0, #1
 800bb60:	440a      	add	r2, r1
 800bb62:	4291      	cmp	r1, r2
 800bb64:	d100      	bne.n	800bb68 <memcpy+0xc>
 800bb66:	bd10      	pop	{r4, pc}
 800bb68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb70:	e7f7      	b.n	800bb62 <memcpy+0x6>

0800bb72 <memset>:
 800bb72:	4402      	add	r2, r0
 800bb74:	4603      	mov	r3, r0
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d100      	bne.n	800bb7c <memset+0xa>
 800bb7a:	4770      	bx	lr
 800bb7c:	f803 1b01 	strb.w	r1, [r3], #1
 800bb80:	e7f9      	b.n	800bb76 <memset+0x4>

0800bb82 <__cvt>:
 800bb82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb86:	ec55 4b10 	vmov	r4, r5, d0
 800bb8a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bb8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb90:	2d00      	cmp	r5, #0
 800bb92:	460e      	mov	r6, r1
 800bb94:	4691      	mov	r9, r2
 800bb96:	4619      	mov	r1, r3
 800bb98:	bfb8      	it	lt
 800bb9a:	4622      	movlt	r2, r4
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	f027 0720 	bic.w	r7, r7, #32
 800bba2:	bfbb      	ittet	lt
 800bba4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bba8:	461d      	movlt	r5, r3
 800bbaa:	2300      	movge	r3, #0
 800bbac:	232d      	movlt	r3, #45	; 0x2d
 800bbae:	bfb8      	it	lt
 800bbb0:	4614      	movlt	r4, r2
 800bbb2:	2f46      	cmp	r7, #70	; 0x46
 800bbb4:	700b      	strb	r3, [r1, #0]
 800bbb6:	d004      	beq.n	800bbc2 <__cvt+0x40>
 800bbb8:	2f45      	cmp	r7, #69	; 0x45
 800bbba:	d100      	bne.n	800bbbe <__cvt+0x3c>
 800bbbc:	3601      	adds	r6, #1
 800bbbe:	2102      	movs	r1, #2
 800bbc0:	e000      	b.n	800bbc4 <__cvt+0x42>
 800bbc2:	2103      	movs	r1, #3
 800bbc4:	ab03      	add	r3, sp, #12
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	ab02      	add	r3, sp, #8
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4632      	mov	r2, r6
 800bbce:	4653      	mov	r3, sl
 800bbd0:	ec45 4b10 	vmov	d0, r4, r5
 800bbd4:	f001 fd98 	bl	800d708 <_dtoa_r>
 800bbd8:	2f47      	cmp	r7, #71	; 0x47
 800bbda:	4680      	mov	r8, r0
 800bbdc:	d102      	bne.n	800bbe4 <__cvt+0x62>
 800bbde:	f019 0f01 	tst.w	r9, #1
 800bbe2:	d026      	beq.n	800bc32 <__cvt+0xb0>
 800bbe4:	2f46      	cmp	r7, #70	; 0x46
 800bbe6:	eb08 0906 	add.w	r9, r8, r6
 800bbea:	d111      	bne.n	800bc10 <__cvt+0x8e>
 800bbec:	f898 3000 	ldrb.w	r3, [r8]
 800bbf0:	2b30      	cmp	r3, #48	; 0x30
 800bbf2:	d10a      	bne.n	800bc0a <__cvt+0x88>
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 ff6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc00:	b918      	cbnz	r0, 800bc0a <__cvt+0x88>
 800bc02:	f1c6 0601 	rsb	r6, r6, #1
 800bc06:	f8ca 6000 	str.w	r6, [sl]
 800bc0a:	f8da 3000 	ldr.w	r3, [sl]
 800bc0e:	4499      	add	r9, r3
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc1c:	b938      	cbnz	r0, 800bc2e <__cvt+0xac>
 800bc1e:	2230      	movs	r2, #48	; 0x30
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	454b      	cmp	r3, r9
 800bc24:	d205      	bcs.n	800bc32 <__cvt+0xb0>
 800bc26:	1c59      	adds	r1, r3, #1
 800bc28:	9103      	str	r1, [sp, #12]
 800bc2a:	701a      	strb	r2, [r3, #0]
 800bc2c:	e7f8      	b.n	800bc20 <__cvt+0x9e>
 800bc2e:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc36:	eba3 0308 	sub.w	r3, r3, r8
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	b004      	add	sp, #16
 800bc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bc44 <__exponent>:
 800bc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc46:	2900      	cmp	r1, #0
 800bc48:	4604      	mov	r4, r0
 800bc4a:	bfba      	itte	lt
 800bc4c:	4249      	neglt	r1, r1
 800bc4e:	232d      	movlt	r3, #45	; 0x2d
 800bc50:	232b      	movge	r3, #43	; 0x2b
 800bc52:	2909      	cmp	r1, #9
 800bc54:	f804 2b02 	strb.w	r2, [r4], #2
 800bc58:	7043      	strb	r3, [r0, #1]
 800bc5a:	dd20      	ble.n	800bc9e <__exponent+0x5a>
 800bc5c:	f10d 0307 	add.w	r3, sp, #7
 800bc60:	461f      	mov	r7, r3
 800bc62:	260a      	movs	r6, #10
 800bc64:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc68:	fb06 1115 	mls	r1, r6, r5, r1
 800bc6c:	3130      	adds	r1, #48	; 0x30
 800bc6e:	2d09      	cmp	r5, #9
 800bc70:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc74:	f103 32ff 	add.w	r2, r3, #4294967295
 800bc78:	4629      	mov	r1, r5
 800bc7a:	dc09      	bgt.n	800bc90 <__exponent+0x4c>
 800bc7c:	3130      	adds	r1, #48	; 0x30
 800bc7e:	3b02      	subs	r3, #2
 800bc80:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc84:	42bb      	cmp	r3, r7
 800bc86:	4622      	mov	r2, r4
 800bc88:	d304      	bcc.n	800bc94 <__exponent+0x50>
 800bc8a:	1a10      	subs	r0, r2, r0
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc90:	4613      	mov	r3, r2
 800bc92:	e7e7      	b.n	800bc64 <__exponent+0x20>
 800bc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc98:	f804 2b01 	strb.w	r2, [r4], #1
 800bc9c:	e7f2      	b.n	800bc84 <__exponent+0x40>
 800bc9e:	2330      	movs	r3, #48	; 0x30
 800bca0:	4419      	add	r1, r3
 800bca2:	7083      	strb	r3, [r0, #2]
 800bca4:	1d02      	adds	r2, r0, #4
 800bca6:	70c1      	strb	r1, [r0, #3]
 800bca8:	e7ef      	b.n	800bc8a <__exponent+0x46>
	...

0800bcac <_printf_float>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	b08d      	sub	sp, #52	; 0x34
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bcb8:	4616      	mov	r6, r2
 800bcba:	461f      	mov	r7, r3
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	f002 fed1 	bl	800ea64 <_localeconv_r>
 800bcc2:	6803      	ldr	r3, [r0, #0]
 800bcc4:	9304      	str	r3, [sp, #16]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f4 fa8a 	bl	80001e0 <strlen>
 800bccc:	2300      	movs	r3, #0
 800bcce:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd4:	9005      	str	r0, [sp, #20]
 800bcd6:	3307      	adds	r3, #7
 800bcd8:	f023 0307 	bic.w	r3, r3, #7
 800bcdc:	f103 0208 	add.w	r2, r3, #8
 800bce0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bce4:	f8d4 b000 	ldr.w	fp, [r4]
 800bce8:	f8c8 2000 	str.w	r2, [r8]
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcf4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bcf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcfc:	9307      	str	r3, [sp, #28]
 800bcfe:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd02:	f04f 32ff 	mov.w	r2, #4294967295
 800bd06:	4ba7      	ldr	r3, [pc, #668]	; (800bfa4 <_printf_float+0x2f8>)
 800bd08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0c:	f7f4 ff16 	bl	8000b3c <__aeabi_dcmpun>
 800bd10:	bb70      	cbnz	r0, 800bd70 <_printf_float+0xc4>
 800bd12:	f04f 32ff 	mov.w	r2, #4294967295
 800bd16:	4ba3      	ldr	r3, [pc, #652]	; (800bfa4 <_printf_float+0x2f8>)
 800bd18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd1c:	f7f4 fef0 	bl	8000b00 <__aeabi_dcmple>
 800bd20:	bb30      	cbnz	r0, 800bd70 <_printf_float+0xc4>
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 fedf 	bl	8000aec <__aeabi_dcmplt>
 800bd2e:	b110      	cbz	r0, 800bd36 <_printf_float+0x8a>
 800bd30:	232d      	movs	r3, #45	; 0x2d
 800bd32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd36:	4a9c      	ldr	r2, [pc, #624]	; (800bfa8 <_printf_float+0x2fc>)
 800bd38:	4b9c      	ldr	r3, [pc, #624]	; (800bfac <_printf_float+0x300>)
 800bd3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bd3e:	bf8c      	ite	hi
 800bd40:	4690      	movhi	r8, r2
 800bd42:	4698      	movls	r8, r3
 800bd44:	2303      	movs	r3, #3
 800bd46:	f02b 0204 	bic.w	r2, fp, #4
 800bd4a:	6123      	str	r3, [r4, #16]
 800bd4c:	6022      	str	r2, [r4, #0]
 800bd4e:	f04f 0900 	mov.w	r9, #0
 800bd52:	9700      	str	r7, [sp, #0]
 800bd54:	4633      	mov	r3, r6
 800bd56:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 f9e6 	bl	800c12c <_printf_common>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f040 808d 	bne.w	800be80 <_printf_float+0x1d4>
 800bd66:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6a:	b00d      	add	sp, #52	; 0x34
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	4642      	mov	r2, r8
 800bd72:	464b      	mov	r3, r9
 800bd74:	4640      	mov	r0, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	f7f4 fee0 	bl	8000b3c <__aeabi_dcmpun>
 800bd7c:	b110      	cbz	r0, 800bd84 <_printf_float+0xd8>
 800bd7e:	4a8c      	ldr	r2, [pc, #560]	; (800bfb0 <_printf_float+0x304>)
 800bd80:	4b8c      	ldr	r3, [pc, #560]	; (800bfb4 <_printf_float+0x308>)
 800bd82:	e7da      	b.n	800bd3a <_printf_float+0x8e>
 800bd84:	6861      	ldr	r1, [r4, #4]
 800bd86:	1c4b      	adds	r3, r1, #1
 800bd88:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bd8c:	a80a      	add	r0, sp, #40	; 0x28
 800bd8e:	d13e      	bne.n	800be0e <_printf_float+0x162>
 800bd90:	2306      	movs	r3, #6
 800bd92:	6063      	str	r3, [r4, #4]
 800bd94:	2300      	movs	r3, #0
 800bd96:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bd9a:	ab09      	add	r3, sp, #36	; 0x24
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	ec49 8b10 	vmov	d0, r8, r9
 800bda2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bda6:	6022      	str	r2, [r4, #0]
 800bda8:	f8cd a004 	str.w	sl, [sp, #4]
 800bdac:	6861      	ldr	r1, [r4, #4]
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f7ff fee7 	bl	800bb82 <__cvt>
 800bdb4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bdb8:	2b47      	cmp	r3, #71	; 0x47
 800bdba:	4680      	mov	r8, r0
 800bdbc:	d109      	bne.n	800bdd2 <_printf_float+0x126>
 800bdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc0:	1cd8      	adds	r0, r3, #3
 800bdc2:	db02      	blt.n	800bdca <_printf_float+0x11e>
 800bdc4:	6862      	ldr	r2, [r4, #4]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	dd47      	ble.n	800be5a <_printf_float+0x1ae>
 800bdca:	f1aa 0a02 	sub.w	sl, sl, #2
 800bdce:	fa5f fa8a 	uxtb.w	sl, sl
 800bdd2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bdd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdd8:	d824      	bhi.n	800be24 <_printf_float+0x178>
 800bdda:	3901      	subs	r1, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bde2:	9109      	str	r1, [sp, #36]	; 0x24
 800bde4:	f7ff ff2e 	bl	800bc44 <__exponent>
 800bde8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdea:	1813      	adds	r3, r2, r0
 800bdec:	2a01      	cmp	r2, #1
 800bdee:	4681      	mov	r9, r0
 800bdf0:	6123      	str	r3, [r4, #16]
 800bdf2:	dc02      	bgt.n	800bdfa <_printf_float+0x14e>
 800bdf4:	6822      	ldr	r2, [r4, #0]
 800bdf6:	07d1      	lsls	r1, r2, #31
 800bdf8:	d501      	bpl.n	800bdfe <_printf_float+0x152>
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	6123      	str	r3, [r4, #16]
 800bdfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0a5      	beq.n	800bd52 <_printf_float+0xa6>
 800be06:	232d      	movs	r3, #45	; 0x2d
 800be08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be0c:	e7a1      	b.n	800bd52 <_printf_float+0xa6>
 800be0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800be12:	f000 8177 	beq.w	800c104 <_printf_float+0x458>
 800be16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800be1a:	d1bb      	bne.n	800bd94 <_printf_float+0xe8>
 800be1c:	2900      	cmp	r1, #0
 800be1e:	d1b9      	bne.n	800bd94 <_printf_float+0xe8>
 800be20:	2301      	movs	r3, #1
 800be22:	e7b6      	b.n	800bd92 <_printf_float+0xe6>
 800be24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800be28:	d119      	bne.n	800be5e <_printf_float+0x1b2>
 800be2a:	2900      	cmp	r1, #0
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	dd0c      	ble.n	800be4a <_printf_float+0x19e>
 800be30:	6121      	str	r1, [r4, #16]
 800be32:	b913      	cbnz	r3, 800be3a <_printf_float+0x18e>
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	07d2      	lsls	r2, r2, #31
 800be38:	d502      	bpl.n	800be40 <_printf_float+0x194>
 800be3a:	3301      	adds	r3, #1
 800be3c:	440b      	add	r3, r1
 800be3e:	6123      	str	r3, [r4, #16]
 800be40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be42:	65a3      	str	r3, [r4, #88]	; 0x58
 800be44:	f04f 0900 	mov.w	r9, #0
 800be48:	e7d9      	b.n	800bdfe <_printf_float+0x152>
 800be4a:	b913      	cbnz	r3, 800be52 <_printf_float+0x1a6>
 800be4c:	6822      	ldr	r2, [r4, #0]
 800be4e:	07d0      	lsls	r0, r2, #31
 800be50:	d501      	bpl.n	800be56 <_printf_float+0x1aa>
 800be52:	3302      	adds	r3, #2
 800be54:	e7f3      	b.n	800be3e <_printf_float+0x192>
 800be56:	2301      	movs	r3, #1
 800be58:	e7f1      	b.n	800be3e <_printf_float+0x192>
 800be5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800be5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be62:	4293      	cmp	r3, r2
 800be64:	db05      	blt.n	800be72 <_printf_float+0x1c6>
 800be66:	6822      	ldr	r2, [r4, #0]
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	07d1      	lsls	r1, r2, #31
 800be6c:	d5e8      	bpl.n	800be40 <_printf_float+0x194>
 800be6e:	3301      	adds	r3, #1
 800be70:	e7e5      	b.n	800be3e <_printf_float+0x192>
 800be72:	2b00      	cmp	r3, #0
 800be74:	bfd4      	ite	le
 800be76:	f1c3 0302 	rsble	r3, r3, #2
 800be7a:	2301      	movgt	r3, #1
 800be7c:	4413      	add	r3, r2
 800be7e:	e7de      	b.n	800be3e <_printf_float+0x192>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	055a      	lsls	r2, r3, #21
 800be84:	d407      	bmi.n	800be96 <_printf_float+0x1ea>
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	4642      	mov	r2, r8
 800be8a:	4631      	mov	r1, r6
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b8      	blx	r7
 800be90:	3001      	adds	r0, #1
 800be92:	d12b      	bne.n	800beec <_printf_float+0x240>
 800be94:	e767      	b.n	800bd66 <_printf_float+0xba>
 800be96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800be9a:	f240 80dc 	bls.w	800c056 <_printf_float+0x3aa>
 800be9e:	2200      	movs	r2, #0
 800bea0:	2300      	movs	r3, #0
 800bea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bea6:	f7f4 fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d033      	beq.n	800bf16 <_printf_float+0x26a>
 800beae:	2301      	movs	r3, #1
 800beb0:	4a41      	ldr	r2, [pc, #260]	; (800bfb8 <_printf_float+0x30c>)
 800beb2:	4631      	mov	r1, r6
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b8      	blx	r7
 800beb8:	3001      	adds	r0, #1
 800beba:	f43f af54 	beq.w	800bd66 <_printf_float+0xba>
 800bebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bec2:	429a      	cmp	r2, r3
 800bec4:	db02      	blt.n	800becc <_printf_float+0x220>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	07d8      	lsls	r0, r3, #31
 800beca:	d50f      	bpl.n	800beec <_printf_float+0x240>
 800becc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed0:	4631      	mov	r1, r6
 800bed2:	4628      	mov	r0, r5
 800bed4:	47b8      	blx	r7
 800bed6:	3001      	adds	r0, #1
 800bed8:	f43f af45 	beq.w	800bd66 <_printf_float+0xba>
 800bedc:	f04f 0800 	mov.w	r8, #0
 800bee0:	f104 091a 	add.w	r9, r4, #26
 800bee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee6:	3b01      	subs	r3, #1
 800bee8:	4543      	cmp	r3, r8
 800beea:	dc09      	bgt.n	800bf00 <_printf_float+0x254>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	079b      	lsls	r3, r3, #30
 800bef0:	f100 8103 	bmi.w	800c0fa <_printf_float+0x44e>
 800bef4:	68e0      	ldr	r0, [r4, #12]
 800bef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef8:	4298      	cmp	r0, r3
 800befa:	bfb8      	it	lt
 800befc:	4618      	movlt	r0, r3
 800befe:	e734      	b.n	800bd6a <_printf_float+0xbe>
 800bf00:	2301      	movs	r3, #1
 800bf02:	464a      	mov	r2, r9
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f43f af2b 	beq.w	800bd66 <_printf_float+0xba>
 800bf10:	f108 0801 	add.w	r8, r8, #1
 800bf14:	e7e6      	b.n	800bee4 <_printf_float+0x238>
 800bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dc2b      	bgt.n	800bf74 <_printf_float+0x2c8>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4a26      	ldr	r2, [pc, #152]	; (800bfb8 <_printf_float+0x30c>)
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f af1d 	beq.w	800bd66 <_printf_float+0xba>
 800bf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2e:	b923      	cbnz	r3, 800bf3a <_printf_float+0x28e>
 800bf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf32:	b913      	cbnz	r3, 800bf3a <_printf_float+0x28e>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	07d9      	lsls	r1, r3, #31
 800bf38:	d5d8      	bpl.n	800beec <_printf_float+0x240>
 800bf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	f43f af0e 	beq.w	800bd66 <_printf_float+0xba>
 800bf4a:	f04f 0900 	mov.w	r9, #0
 800bf4e:	f104 0a1a 	add.w	sl, r4, #26
 800bf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf54:	425b      	negs	r3, r3
 800bf56:	454b      	cmp	r3, r9
 800bf58:	dc01      	bgt.n	800bf5e <_printf_float+0x2b2>
 800bf5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf5c:	e794      	b.n	800be88 <_printf_float+0x1dc>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	4652      	mov	r2, sl
 800bf62:	4631      	mov	r1, r6
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b8      	blx	r7
 800bf68:	3001      	adds	r0, #1
 800bf6a:	f43f aefc 	beq.w	800bd66 <_printf_float+0xba>
 800bf6e:	f109 0901 	add.w	r9, r9, #1
 800bf72:	e7ee      	b.n	800bf52 <_printf_float+0x2a6>
 800bf74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	bfa8      	it	ge
 800bf7c:	461a      	movge	r2, r3
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	4691      	mov	r9, r2
 800bf82:	dd07      	ble.n	800bf94 <_printf_float+0x2e8>
 800bf84:	4613      	mov	r3, r2
 800bf86:	4631      	mov	r1, r6
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f43f aee9 	beq.w	800bd66 <_printf_float+0xba>
 800bf94:	f104 031a 	add.w	r3, r4, #26
 800bf98:	f04f 0b00 	mov.w	fp, #0
 800bf9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfa0:	9306      	str	r3, [sp, #24]
 800bfa2:	e015      	b.n	800bfd0 <_printf_float+0x324>
 800bfa4:	7fefffff 	.word	0x7fefffff
 800bfa8:	0801071c 	.word	0x0801071c
 800bfac:	08010718 	.word	0x08010718
 800bfb0:	08010724 	.word	0x08010724
 800bfb4:	08010720 	.word	0x08010720
 800bfb8:	08010728 	.word	0x08010728
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	9a06      	ldr	r2, [sp, #24]
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	47b8      	blx	r7
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	f43f aecd 	beq.w	800bd66 <_printf_float+0xba>
 800bfcc:	f10b 0b01 	add.w	fp, fp, #1
 800bfd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bfd4:	ebaa 0309 	sub.w	r3, sl, r9
 800bfd8:	455b      	cmp	r3, fp
 800bfda:	dcef      	bgt.n	800bfbc <_printf_float+0x310>
 800bfdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	44d0      	add	r8, sl
 800bfe4:	db15      	blt.n	800c012 <_printf_float+0x366>
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	07da      	lsls	r2, r3, #31
 800bfea:	d412      	bmi.n	800c012 <_printf_float+0x366>
 800bfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bff0:	eba3 020a 	sub.w	r2, r3, sl
 800bff4:	eba3 0a01 	sub.w	sl, r3, r1
 800bff8:	4592      	cmp	sl, r2
 800bffa:	bfa8      	it	ge
 800bffc:	4692      	movge	sl, r2
 800bffe:	f1ba 0f00 	cmp.w	sl, #0
 800c002:	dc0e      	bgt.n	800c022 <_printf_float+0x376>
 800c004:	f04f 0800 	mov.w	r8, #0
 800c008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c00c:	f104 091a 	add.w	r9, r4, #26
 800c010:	e019      	b.n	800c046 <_printf_float+0x39a>
 800c012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	47b8      	blx	r7
 800c01c:	3001      	adds	r0, #1
 800c01e:	d1e5      	bne.n	800bfec <_printf_float+0x340>
 800c020:	e6a1      	b.n	800bd66 <_printf_float+0xba>
 800c022:	4653      	mov	r3, sl
 800c024:	4642      	mov	r2, r8
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	d1e9      	bne.n	800c004 <_printf_float+0x358>
 800c030:	e699      	b.n	800bd66 <_printf_float+0xba>
 800c032:	2301      	movs	r3, #1
 800c034:	464a      	mov	r2, r9
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	47b8      	blx	r7
 800c03c:	3001      	adds	r0, #1
 800c03e:	f43f ae92 	beq.w	800bd66 <_printf_float+0xba>
 800c042:	f108 0801 	add.w	r8, r8, #1
 800c046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c04a:	1a9b      	subs	r3, r3, r2
 800c04c:	eba3 030a 	sub.w	r3, r3, sl
 800c050:	4543      	cmp	r3, r8
 800c052:	dcee      	bgt.n	800c032 <_printf_float+0x386>
 800c054:	e74a      	b.n	800beec <_printf_float+0x240>
 800c056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c058:	2a01      	cmp	r2, #1
 800c05a:	dc01      	bgt.n	800c060 <_printf_float+0x3b4>
 800c05c:	07db      	lsls	r3, r3, #31
 800c05e:	d53a      	bpl.n	800c0d6 <_printf_float+0x42a>
 800c060:	2301      	movs	r3, #1
 800c062:	4642      	mov	r2, r8
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f ae7b 	beq.w	800bd66 <_printf_float+0xba>
 800c070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c074:	4631      	mov	r1, r6
 800c076:	4628      	mov	r0, r5
 800c078:	47b8      	blx	r7
 800c07a:	3001      	adds	r0, #1
 800c07c:	f108 0801 	add.w	r8, r8, #1
 800c080:	f43f ae71 	beq.w	800bd66 <_printf_float+0xba>
 800c084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c086:	2200      	movs	r2, #0
 800c088:	f103 3aff 	add.w	sl, r3, #4294967295
 800c08c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c090:	2300      	movs	r3, #0
 800c092:	f7f4 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 800c096:	b9c8      	cbnz	r0, 800c0cc <_printf_float+0x420>
 800c098:	4653      	mov	r3, sl
 800c09a:	4642      	mov	r2, r8
 800c09c:	4631      	mov	r1, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	47b8      	blx	r7
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	d10e      	bne.n	800c0c4 <_printf_float+0x418>
 800c0a6:	e65e      	b.n	800bd66 <_printf_float+0xba>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	4652      	mov	r2, sl
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f ae57 	beq.w	800bd66 <_printf_float+0xba>
 800c0b8:	f108 0801 	add.w	r8, r8, #1
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	4543      	cmp	r3, r8
 800c0c2:	dcf1      	bgt.n	800c0a8 <_printf_float+0x3fc>
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0ca:	e6de      	b.n	800be8a <_printf_float+0x1de>
 800c0cc:	f04f 0800 	mov.w	r8, #0
 800c0d0:	f104 0a1a 	add.w	sl, r4, #26
 800c0d4:	e7f2      	b.n	800c0bc <_printf_float+0x410>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e7df      	b.n	800c09a <_printf_float+0x3ee>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	464a      	mov	r2, r9
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b8      	blx	r7
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	f43f ae3e 	beq.w	800bd66 <_printf_float+0xba>
 800c0ea:	f108 0801 	add.w	r8, r8, #1
 800c0ee:	68e3      	ldr	r3, [r4, #12]
 800c0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	4543      	cmp	r3, r8
 800c0f6:	dcf0      	bgt.n	800c0da <_printf_float+0x42e>
 800c0f8:	e6fc      	b.n	800bef4 <_printf_float+0x248>
 800c0fa:	f04f 0800 	mov.w	r8, #0
 800c0fe:	f104 0919 	add.w	r9, r4, #25
 800c102:	e7f4      	b.n	800c0ee <_printf_float+0x442>
 800c104:	2900      	cmp	r1, #0
 800c106:	f43f ae8b 	beq.w	800be20 <_printf_float+0x174>
 800c10a:	2300      	movs	r3, #0
 800c10c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c110:	ab09      	add	r3, sp, #36	; 0x24
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	ec49 8b10 	vmov	d0, r8, r9
 800c118:	6022      	str	r2, [r4, #0]
 800c11a:	f8cd a004 	str.w	sl, [sp, #4]
 800c11e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c122:	4628      	mov	r0, r5
 800c124:	f7ff fd2d 	bl	800bb82 <__cvt>
 800c128:	4680      	mov	r8, r0
 800c12a:	e648      	b.n	800bdbe <_printf_float+0x112>

0800c12c <_printf_common>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	4691      	mov	r9, r2
 800c132:	461f      	mov	r7, r3
 800c134:	688a      	ldr	r2, [r1, #8]
 800c136:	690b      	ldr	r3, [r1, #16]
 800c138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c13c:	4293      	cmp	r3, r2
 800c13e:	bfb8      	it	lt
 800c140:	4613      	movlt	r3, r2
 800c142:	f8c9 3000 	str.w	r3, [r9]
 800c146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c14a:	4606      	mov	r6, r0
 800c14c:	460c      	mov	r4, r1
 800c14e:	b112      	cbz	r2, 800c156 <_printf_common+0x2a>
 800c150:	3301      	adds	r3, #1
 800c152:	f8c9 3000 	str.w	r3, [r9]
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	0699      	lsls	r1, r3, #26
 800c15a:	bf42      	ittt	mi
 800c15c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c160:	3302      	addmi	r3, #2
 800c162:	f8c9 3000 	strmi.w	r3, [r9]
 800c166:	6825      	ldr	r5, [r4, #0]
 800c168:	f015 0506 	ands.w	r5, r5, #6
 800c16c:	d107      	bne.n	800c17e <_printf_common+0x52>
 800c16e:	f104 0a19 	add.w	sl, r4, #25
 800c172:	68e3      	ldr	r3, [r4, #12]
 800c174:	f8d9 2000 	ldr.w	r2, [r9]
 800c178:	1a9b      	subs	r3, r3, r2
 800c17a:	42ab      	cmp	r3, r5
 800c17c:	dc28      	bgt.n	800c1d0 <_printf_common+0xa4>
 800c17e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c182:	6822      	ldr	r2, [r4, #0]
 800c184:	3300      	adds	r3, #0
 800c186:	bf18      	it	ne
 800c188:	2301      	movne	r3, #1
 800c18a:	0692      	lsls	r2, r2, #26
 800c18c:	d42d      	bmi.n	800c1ea <_printf_common+0xbe>
 800c18e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c192:	4639      	mov	r1, r7
 800c194:	4630      	mov	r0, r6
 800c196:	47c0      	blx	r8
 800c198:	3001      	adds	r0, #1
 800c19a:	d020      	beq.n	800c1de <_printf_common+0xb2>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	68e5      	ldr	r5, [r4, #12]
 800c1a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c1a4:	f003 0306 	and.w	r3, r3, #6
 800c1a8:	2b04      	cmp	r3, #4
 800c1aa:	bf08      	it	eq
 800c1ac:	1aad      	subeq	r5, r5, r2
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	6922      	ldr	r2, [r4, #16]
 800c1b2:	bf0c      	ite	eq
 800c1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1b8:	2500      	movne	r5, #0
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	bfc4      	itt	gt
 800c1be:	1a9b      	subgt	r3, r3, r2
 800c1c0:	18ed      	addgt	r5, r5, r3
 800c1c2:	f04f 0900 	mov.w	r9, #0
 800c1c6:	341a      	adds	r4, #26
 800c1c8:	454d      	cmp	r5, r9
 800c1ca:	d11a      	bne.n	800c202 <_printf_common+0xd6>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e008      	b.n	800c1e2 <_printf_common+0xb6>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	47c0      	blx	r8
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d103      	bne.n	800c1e6 <_printf_common+0xba>
 800c1de:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e6:	3501      	adds	r5, #1
 800c1e8:	e7c3      	b.n	800c172 <_printf_common+0x46>
 800c1ea:	18e1      	adds	r1, r4, r3
 800c1ec:	1c5a      	adds	r2, r3, #1
 800c1ee:	2030      	movs	r0, #48	; 0x30
 800c1f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1f4:	4422      	add	r2, r4
 800c1f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1fe:	3302      	adds	r3, #2
 800c200:	e7c5      	b.n	800c18e <_printf_common+0x62>
 800c202:	2301      	movs	r3, #1
 800c204:	4622      	mov	r2, r4
 800c206:	4639      	mov	r1, r7
 800c208:	4630      	mov	r0, r6
 800c20a:	47c0      	blx	r8
 800c20c:	3001      	adds	r0, #1
 800c20e:	d0e6      	beq.n	800c1de <_printf_common+0xb2>
 800c210:	f109 0901 	add.w	r9, r9, #1
 800c214:	e7d8      	b.n	800c1c8 <_printf_common+0x9c>
	...

0800c218 <_printf_i>:
 800c218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c21c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c220:	460c      	mov	r4, r1
 800c222:	7e09      	ldrb	r1, [r1, #24]
 800c224:	b085      	sub	sp, #20
 800c226:	296e      	cmp	r1, #110	; 0x6e
 800c228:	4617      	mov	r7, r2
 800c22a:	4606      	mov	r6, r0
 800c22c:	4698      	mov	r8, r3
 800c22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c230:	f000 80b3 	beq.w	800c39a <_printf_i+0x182>
 800c234:	d822      	bhi.n	800c27c <_printf_i+0x64>
 800c236:	2963      	cmp	r1, #99	; 0x63
 800c238:	d036      	beq.n	800c2a8 <_printf_i+0x90>
 800c23a:	d80a      	bhi.n	800c252 <_printf_i+0x3a>
 800c23c:	2900      	cmp	r1, #0
 800c23e:	f000 80b9 	beq.w	800c3b4 <_printf_i+0x19c>
 800c242:	2958      	cmp	r1, #88	; 0x58
 800c244:	f000 8083 	beq.w	800c34e <_printf_i+0x136>
 800c248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c24c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c250:	e032      	b.n	800c2b8 <_printf_i+0xa0>
 800c252:	2964      	cmp	r1, #100	; 0x64
 800c254:	d001      	beq.n	800c25a <_printf_i+0x42>
 800c256:	2969      	cmp	r1, #105	; 0x69
 800c258:	d1f6      	bne.n	800c248 <_printf_i+0x30>
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	6813      	ldr	r3, [r2, #0]
 800c25e:	0605      	lsls	r5, r0, #24
 800c260:	f103 0104 	add.w	r1, r3, #4
 800c264:	d52a      	bpl.n	800c2bc <_printf_i+0xa4>
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6011      	str	r1, [r2, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	da03      	bge.n	800c276 <_printf_i+0x5e>
 800c26e:	222d      	movs	r2, #45	; 0x2d
 800c270:	425b      	negs	r3, r3
 800c272:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c276:	486f      	ldr	r0, [pc, #444]	; (800c434 <_printf_i+0x21c>)
 800c278:	220a      	movs	r2, #10
 800c27a:	e039      	b.n	800c2f0 <_printf_i+0xd8>
 800c27c:	2973      	cmp	r1, #115	; 0x73
 800c27e:	f000 809d 	beq.w	800c3bc <_printf_i+0x1a4>
 800c282:	d808      	bhi.n	800c296 <_printf_i+0x7e>
 800c284:	296f      	cmp	r1, #111	; 0x6f
 800c286:	d020      	beq.n	800c2ca <_printf_i+0xb2>
 800c288:	2970      	cmp	r1, #112	; 0x70
 800c28a:	d1dd      	bne.n	800c248 <_printf_i+0x30>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	f043 0320 	orr.w	r3, r3, #32
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	e003      	b.n	800c29e <_printf_i+0x86>
 800c296:	2975      	cmp	r1, #117	; 0x75
 800c298:	d017      	beq.n	800c2ca <_printf_i+0xb2>
 800c29a:	2978      	cmp	r1, #120	; 0x78
 800c29c:	d1d4      	bne.n	800c248 <_printf_i+0x30>
 800c29e:	2378      	movs	r3, #120	; 0x78
 800c2a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2a4:	4864      	ldr	r0, [pc, #400]	; (800c438 <_printf_i+0x220>)
 800c2a6:	e055      	b.n	800c354 <_printf_i+0x13c>
 800c2a8:	6813      	ldr	r3, [r2, #0]
 800c2aa:	1d19      	adds	r1, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6011      	str	r1, [r2, #0]
 800c2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e08c      	b.n	800c3d6 <_printf_i+0x1be>
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6011      	str	r1, [r2, #0]
 800c2c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c2c4:	bf18      	it	ne
 800c2c6:	b21b      	sxthne	r3, r3
 800c2c8:	e7cf      	b.n	800c26a <_printf_i+0x52>
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	6825      	ldr	r5, [r4, #0]
 800c2ce:	1d18      	adds	r0, r3, #4
 800c2d0:	6010      	str	r0, [r2, #0]
 800c2d2:	0628      	lsls	r0, r5, #24
 800c2d4:	d501      	bpl.n	800c2da <_printf_i+0xc2>
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	e002      	b.n	800c2e0 <_printf_i+0xc8>
 800c2da:	0668      	lsls	r0, r5, #25
 800c2dc:	d5fb      	bpl.n	800c2d6 <_printf_i+0xbe>
 800c2de:	881b      	ldrh	r3, [r3, #0]
 800c2e0:	4854      	ldr	r0, [pc, #336]	; (800c434 <_printf_i+0x21c>)
 800c2e2:	296f      	cmp	r1, #111	; 0x6f
 800c2e4:	bf14      	ite	ne
 800c2e6:	220a      	movne	r2, #10
 800c2e8:	2208      	moveq	r2, #8
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2f0:	6865      	ldr	r5, [r4, #4]
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	f2c0 8095 	blt.w	800c424 <_printf_i+0x20c>
 800c2fa:	6821      	ldr	r1, [r4, #0]
 800c2fc:	f021 0104 	bic.w	r1, r1, #4
 800c300:	6021      	str	r1, [r4, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d13d      	bne.n	800c382 <_printf_i+0x16a>
 800c306:	2d00      	cmp	r5, #0
 800c308:	f040 808e 	bne.w	800c428 <_printf_i+0x210>
 800c30c:	4665      	mov	r5, ip
 800c30e:	2a08      	cmp	r2, #8
 800c310:	d10b      	bne.n	800c32a <_printf_i+0x112>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	07db      	lsls	r3, r3, #31
 800c316:	d508      	bpl.n	800c32a <_printf_i+0x112>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	6862      	ldr	r2, [r4, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	bfde      	ittt	le
 800c320:	2330      	movle	r3, #48	; 0x30
 800c322:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c32a:	ebac 0305 	sub.w	r3, ip, r5
 800c32e:	6123      	str	r3, [r4, #16]
 800c330:	f8cd 8000 	str.w	r8, [sp]
 800c334:	463b      	mov	r3, r7
 800c336:	aa03      	add	r2, sp, #12
 800c338:	4621      	mov	r1, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff fef6 	bl	800c12c <_printf_common>
 800c340:	3001      	adds	r0, #1
 800c342:	d14d      	bne.n	800c3e0 <_printf_i+0x1c8>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	b005      	add	sp, #20
 800c34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c34e:	4839      	ldr	r0, [pc, #228]	; (800c434 <_printf_i+0x21c>)
 800c350:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c354:	6813      	ldr	r3, [r2, #0]
 800c356:	6821      	ldr	r1, [r4, #0]
 800c358:	1d1d      	adds	r5, r3, #4
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6015      	str	r5, [r2, #0]
 800c35e:	060a      	lsls	r2, r1, #24
 800c360:	d50b      	bpl.n	800c37a <_printf_i+0x162>
 800c362:	07ca      	lsls	r2, r1, #31
 800c364:	bf44      	itt	mi
 800c366:	f041 0120 	orrmi.w	r1, r1, #32
 800c36a:	6021      	strmi	r1, [r4, #0]
 800c36c:	b91b      	cbnz	r3, 800c376 <_printf_i+0x15e>
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	f022 0220 	bic.w	r2, r2, #32
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	2210      	movs	r2, #16
 800c378:	e7b7      	b.n	800c2ea <_printf_i+0xd2>
 800c37a:	064d      	lsls	r5, r1, #25
 800c37c:	bf48      	it	mi
 800c37e:	b29b      	uxthmi	r3, r3
 800c380:	e7ef      	b.n	800c362 <_printf_i+0x14a>
 800c382:	4665      	mov	r5, ip
 800c384:	fbb3 f1f2 	udiv	r1, r3, r2
 800c388:	fb02 3311 	mls	r3, r2, r1, r3
 800c38c:	5cc3      	ldrb	r3, [r0, r3]
 800c38e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c392:	460b      	mov	r3, r1
 800c394:	2900      	cmp	r1, #0
 800c396:	d1f5      	bne.n	800c384 <_printf_i+0x16c>
 800c398:	e7b9      	b.n	800c30e <_printf_i+0xf6>
 800c39a:	6813      	ldr	r3, [r2, #0]
 800c39c:	6825      	ldr	r5, [r4, #0]
 800c39e:	6961      	ldr	r1, [r4, #20]
 800c3a0:	1d18      	adds	r0, r3, #4
 800c3a2:	6010      	str	r0, [r2, #0]
 800c3a4:	0628      	lsls	r0, r5, #24
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	d501      	bpl.n	800c3ae <_printf_i+0x196>
 800c3aa:	6019      	str	r1, [r3, #0]
 800c3ac:	e002      	b.n	800c3b4 <_printf_i+0x19c>
 800c3ae:	066a      	lsls	r2, r5, #25
 800c3b0:	d5fb      	bpl.n	800c3aa <_printf_i+0x192>
 800c3b2:	8019      	strh	r1, [r3, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6123      	str	r3, [r4, #16]
 800c3b8:	4665      	mov	r5, ip
 800c3ba:	e7b9      	b.n	800c330 <_printf_i+0x118>
 800c3bc:	6813      	ldr	r3, [r2, #0]
 800c3be:	1d19      	adds	r1, r3, #4
 800c3c0:	6011      	str	r1, [r2, #0]
 800c3c2:	681d      	ldr	r5, [r3, #0]
 800c3c4:	6862      	ldr	r2, [r4, #4]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7f3 ff11 	bl	80001f0 <memchr>
 800c3ce:	b108      	cbz	r0, 800c3d4 <_printf_i+0x1bc>
 800c3d0:	1b40      	subs	r0, r0, r5
 800c3d2:	6060      	str	r0, [r4, #4]
 800c3d4:	6863      	ldr	r3, [r4, #4]
 800c3d6:	6123      	str	r3, [r4, #16]
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3de:	e7a7      	b.n	800c330 <_printf_i+0x118>
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	462a      	mov	r2, r5
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	47c0      	blx	r8
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d0aa      	beq.n	800c344 <_printf_i+0x12c>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	079b      	lsls	r3, r3, #30
 800c3f2:	d413      	bmi.n	800c41c <_printf_i+0x204>
 800c3f4:	68e0      	ldr	r0, [r4, #12]
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	bfb8      	it	lt
 800c3fc:	4618      	movlt	r0, r3
 800c3fe:	e7a3      	b.n	800c348 <_printf_i+0x130>
 800c400:	2301      	movs	r3, #1
 800c402:	464a      	mov	r2, r9
 800c404:	4639      	mov	r1, r7
 800c406:	4630      	mov	r0, r6
 800c408:	47c0      	blx	r8
 800c40a:	3001      	adds	r0, #1
 800c40c:	d09a      	beq.n	800c344 <_printf_i+0x12c>
 800c40e:	3501      	adds	r5, #1
 800c410:	68e3      	ldr	r3, [r4, #12]
 800c412:	9a03      	ldr	r2, [sp, #12]
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	42ab      	cmp	r3, r5
 800c418:	dcf2      	bgt.n	800c400 <_printf_i+0x1e8>
 800c41a:	e7eb      	b.n	800c3f4 <_printf_i+0x1dc>
 800c41c:	2500      	movs	r5, #0
 800c41e:	f104 0919 	add.w	r9, r4, #25
 800c422:	e7f5      	b.n	800c410 <_printf_i+0x1f8>
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1ac      	bne.n	800c382 <_printf_i+0x16a>
 800c428:	7803      	ldrb	r3, [r0, #0]
 800c42a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c42e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c432:	e76c      	b.n	800c30e <_printf_i+0xf6>
 800c434:	0801072a 	.word	0x0801072a
 800c438:	0801073b 	.word	0x0801073b

0800c43c <_scanf_float>:
 800c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	469a      	mov	sl, r3
 800c442:	688b      	ldr	r3, [r1, #8]
 800c444:	4616      	mov	r6, r2
 800c446:	1e5a      	subs	r2, r3, #1
 800c448:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c44c:	b087      	sub	sp, #28
 800c44e:	bf83      	ittte	hi
 800c450:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c454:	189b      	addhi	r3, r3, r2
 800c456:	9301      	strhi	r3, [sp, #4]
 800c458:	2300      	movls	r3, #0
 800c45a:	bf86      	itte	hi
 800c45c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c460:	608b      	strhi	r3, [r1, #8]
 800c462:	9301      	strls	r3, [sp, #4]
 800c464:	680b      	ldr	r3, [r1, #0]
 800c466:	4688      	mov	r8, r1
 800c468:	f04f 0b00 	mov.w	fp, #0
 800c46c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c470:	f848 3b1c 	str.w	r3, [r8], #28
 800c474:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c478:	4607      	mov	r7, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	4645      	mov	r5, r8
 800c47e:	465a      	mov	r2, fp
 800c480:	46d9      	mov	r9, fp
 800c482:	f8cd b008 	str.w	fp, [sp, #8]
 800c486:	68a1      	ldr	r1, [r4, #8]
 800c488:	b181      	cbz	r1, 800c4ac <_scanf_float+0x70>
 800c48a:	6833      	ldr	r3, [r6, #0]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b49      	cmp	r3, #73	; 0x49
 800c490:	d071      	beq.n	800c576 <_scanf_float+0x13a>
 800c492:	d84d      	bhi.n	800c530 <_scanf_float+0xf4>
 800c494:	2b39      	cmp	r3, #57	; 0x39
 800c496:	d840      	bhi.n	800c51a <_scanf_float+0xde>
 800c498:	2b31      	cmp	r3, #49	; 0x31
 800c49a:	f080 8088 	bcs.w	800c5ae <_scanf_float+0x172>
 800c49e:	2b2d      	cmp	r3, #45	; 0x2d
 800c4a0:	f000 8090 	beq.w	800c5c4 <_scanf_float+0x188>
 800c4a4:	d815      	bhi.n	800c4d2 <_scanf_float+0x96>
 800c4a6:	2b2b      	cmp	r3, #43	; 0x2b
 800c4a8:	f000 808c 	beq.w	800c5c4 <_scanf_float+0x188>
 800c4ac:	f1b9 0f00 	cmp.w	r9, #0
 800c4b0:	d003      	beq.n	800c4ba <_scanf_float+0x7e>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	3a01      	subs	r2, #1
 800c4bc:	2a01      	cmp	r2, #1
 800c4be:	f200 80ea 	bhi.w	800c696 <_scanf_float+0x25a>
 800c4c2:	4545      	cmp	r5, r8
 800c4c4:	f200 80dc 	bhi.w	800c680 <_scanf_float+0x244>
 800c4c8:	2601      	movs	r6, #1
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	b007      	add	sp, #28
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4d4:	f000 809f 	beq.w	800c616 <_scanf_float+0x1da>
 800c4d8:	2b30      	cmp	r3, #48	; 0x30
 800c4da:	d1e7      	bne.n	800c4ac <_scanf_float+0x70>
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c4e2:	d064      	beq.n	800c5ae <_scanf_float+0x172>
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	f109 0901 	add.w	r9, r9, #1
 800c4f0:	b11b      	cbz	r3, 800c4fa <_scanf_float+0xbe>
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	3101      	adds	r1, #1
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	60a1      	str	r1, [r4, #8]
 800c4fa:	68a3      	ldr	r3, [r4, #8]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	60a3      	str	r3, [r4, #8]
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	3301      	adds	r3, #1
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	6873      	ldr	r3, [r6, #4]
 800c508:	3b01      	subs	r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	6073      	str	r3, [r6, #4]
 800c50e:	f340 80ac 	ble.w	800c66a <_scanf_float+0x22e>
 800c512:	6833      	ldr	r3, [r6, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	6033      	str	r3, [r6, #0]
 800c518:	e7b5      	b.n	800c486 <_scanf_float+0x4a>
 800c51a:	2b45      	cmp	r3, #69	; 0x45
 800c51c:	f000 8085 	beq.w	800c62a <_scanf_float+0x1ee>
 800c520:	2b46      	cmp	r3, #70	; 0x46
 800c522:	d06a      	beq.n	800c5fa <_scanf_float+0x1be>
 800c524:	2b41      	cmp	r3, #65	; 0x41
 800c526:	d1c1      	bne.n	800c4ac <_scanf_float+0x70>
 800c528:	2a01      	cmp	r2, #1
 800c52a:	d1bf      	bne.n	800c4ac <_scanf_float+0x70>
 800c52c:	2202      	movs	r2, #2
 800c52e:	e046      	b.n	800c5be <_scanf_float+0x182>
 800c530:	2b65      	cmp	r3, #101	; 0x65
 800c532:	d07a      	beq.n	800c62a <_scanf_float+0x1ee>
 800c534:	d818      	bhi.n	800c568 <_scanf_float+0x12c>
 800c536:	2b54      	cmp	r3, #84	; 0x54
 800c538:	d066      	beq.n	800c608 <_scanf_float+0x1cc>
 800c53a:	d811      	bhi.n	800c560 <_scanf_float+0x124>
 800c53c:	2b4e      	cmp	r3, #78	; 0x4e
 800c53e:	d1b5      	bne.n	800c4ac <_scanf_float+0x70>
 800c540:	2a00      	cmp	r2, #0
 800c542:	d146      	bne.n	800c5d2 <_scanf_float+0x196>
 800c544:	f1b9 0f00 	cmp.w	r9, #0
 800c548:	d145      	bne.n	800c5d6 <_scanf_float+0x19a>
 800c54a:	6821      	ldr	r1, [r4, #0]
 800c54c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c550:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c554:	d13f      	bne.n	800c5d6 <_scanf_float+0x19a>
 800c556:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c55a:	6021      	str	r1, [r4, #0]
 800c55c:	2201      	movs	r2, #1
 800c55e:	e02e      	b.n	800c5be <_scanf_float+0x182>
 800c560:	2b59      	cmp	r3, #89	; 0x59
 800c562:	d01e      	beq.n	800c5a2 <_scanf_float+0x166>
 800c564:	2b61      	cmp	r3, #97	; 0x61
 800c566:	e7de      	b.n	800c526 <_scanf_float+0xea>
 800c568:	2b6e      	cmp	r3, #110	; 0x6e
 800c56a:	d0e9      	beq.n	800c540 <_scanf_float+0x104>
 800c56c:	d815      	bhi.n	800c59a <_scanf_float+0x15e>
 800c56e:	2b66      	cmp	r3, #102	; 0x66
 800c570:	d043      	beq.n	800c5fa <_scanf_float+0x1be>
 800c572:	2b69      	cmp	r3, #105	; 0x69
 800c574:	d19a      	bne.n	800c4ac <_scanf_float+0x70>
 800c576:	f1bb 0f00 	cmp.w	fp, #0
 800c57a:	d138      	bne.n	800c5ee <_scanf_float+0x1b2>
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	d197      	bne.n	800c4b2 <_scanf_float+0x76>
 800c582:	6821      	ldr	r1, [r4, #0]
 800c584:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c588:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c58c:	d195      	bne.n	800c4ba <_scanf_float+0x7e>
 800c58e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c592:	6021      	str	r1, [r4, #0]
 800c594:	f04f 0b01 	mov.w	fp, #1
 800c598:	e011      	b.n	800c5be <_scanf_float+0x182>
 800c59a:	2b74      	cmp	r3, #116	; 0x74
 800c59c:	d034      	beq.n	800c608 <_scanf_float+0x1cc>
 800c59e:	2b79      	cmp	r3, #121	; 0x79
 800c5a0:	d184      	bne.n	800c4ac <_scanf_float+0x70>
 800c5a2:	f1bb 0f07 	cmp.w	fp, #7
 800c5a6:	d181      	bne.n	800c4ac <_scanf_float+0x70>
 800c5a8:	f04f 0b08 	mov.w	fp, #8
 800c5ac:	e007      	b.n	800c5be <_scanf_float+0x182>
 800c5ae:	eb12 0f0b 	cmn.w	r2, fp
 800c5b2:	f47f af7b 	bne.w	800c4ac <_scanf_float+0x70>
 800c5b6:	6821      	ldr	r1, [r4, #0]
 800c5b8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c5bc:	6021      	str	r1, [r4, #0]
 800c5be:	702b      	strb	r3, [r5, #0]
 800c5c0:	3501      	adds	r5, #1
 800c5c2:	e79a      	b.n	800c4fa <_scanf_float+0xbe>
 800c5c4:	6821      	ldr	r1, [r4, #0]
 800c5c6:	0608      	lsls	r0, r1, #24
 800c5c8:	f57f af70 	bpl.w	800c4ac <_scanf_float+0x70>
 800c5cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c5d0:	e7f4      	b.n	800c5bc <_scanf_float+0x180>
 800c5d2:	2a02      	cmp	r2, #2
 800c5d4:	d047      	beq.n	800c666 <_scanf_float+0x22a>
 800c5d6:	f1bb 0f01 	cmp.w	fp, #1
 800c5da:	d003      	beq.n	800c5e4 <_scanf_float+0x1a8>
 800c5dc:	f1bb 0f04 	cmp.w	fp, #4
 800c5e0:	f47f af64 	bne.w	800c4ac <_scanf_float+0x70>
 800c5e4:	f10b 0b01 	add.w	fp, fp, #1
 800c5e8:	fa5f fb8b 	uxtb.w	fp, fp
 800c5ec:	e7e7      	b.n	800c5be <_scanf_float+0x182>
 800c5ee:	f1bb 0f03 	cmp.w	fp, #3
 800c5f2:	d0f7      	beq.n	800c5e4 <_scanf_float+0x1a8>
 800c5f4:	f1bb 0f05 	cmp.w	fp, #5
 800c5f8:	e7f2      	b.n	800c5e0 <_scanf_float+0x1a4>
 800c5fa:	f1bb 0f02 	cmp.w	fp, #2
 800c5fe:	f47f af55 	bne.w	800c4ac <_scanf_float+0x70>
 800c602:	f04f 0b03 	mov.w	fp, #3
 800c606:	e7da      	b.n	800c5be <_scanf_float+0x182>
 800c608:	f1bb 0f06 	cmp.w	fp, #6
 800c60c:	f47f af4e 	bne.w	800c4ac <_scanf_float+0x70>
 800c610:	f04f 0b07 	mov.w	fp, #7
 800c614:	e7d3      	b.n	800c5be <_scanf_float+0x182>
 800c616:	6821      	ldr	r1, [r4, #0]
 800c618:	0588      	lsls	r0, r1, #22
 800c61a:	f57f af47 	bpl.w	800c4ac <_scanf_float+0x70>
 800c61e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c622:	6021      	str	r1, [r4, #0]
 800c624:	f8cd 9008 	str.w	r9, [sp, #8]
 800c628:	e7c9      	b.n	800c5be <_scanf_float+0x182>
 800c62a:	6821      	ldr	r1, [r4, #0]
 800c62c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c630:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c634:	d006      	beq.n	800c644 <_scanf_float+0x208>
 800c636:	0548      	lsls	r0, r1, #21
 800c638:	f57f af38 	bpl.w	800c4ac <_scanf_float+0x70>
 800c63c:	f1b9 0f00 	cmp.w	r9, #0
 800c640:	f43f af3b 	beq.w	800c4ba <_scanf_float+0x7e>
 800c644:	0588      	lsls	r0, r1, #22
 800c646:	bf58      	it	pl
 800c648:	9802      	ldrpl	r0, [sp, #8]
 800c64a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c64e:	bf58      	it	pl
 800c650:	eba9 0000 	subpl.w	r0, r9, r0
 800c654:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c658:	bf58      	it	pl
 800c65a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c65e:	6021      	str	r1, [r4, #0]
 800c660:	f04f 0900 	mov.w	r9, #0
 800c664:	e7ab      	b.n	800c5be <_scanf_float+0x182>
 800c666:	2203      	movs	r2, #3
 800c668:	e7a9      	b.n	800c5be <_scanf_float+0x182>
 800c66a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c66e:	9205      	str	r2, [sp, #20]
 800c670:	4631      	mov	r1, r6
 800c672:	4638      	mov	r0, r7
 800c674:	4798      	blx	r3
 800c676:	9a05      	ldr	r2, [sp, #20]
 800c678:	2800      	cmp	r0, #0
 800c67a:	f43f af04 	beq.w	800c486 <_scanf_float+0x4a>
 800c67e:	e715      	b.n	800c4ac <_scanf_float+0x70>
 800c680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c684:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c688:	4632      	mov	r2, r6
 800c68a:	4638      	mov	r0, r7
 800c68c:	4798      	blx	r3
 800c68e:	6923      	ldr	r3, [r4, #16]
 800c690:	3b01      	subs	r3, #1
 800c692:	6123      	str	r3, [r4, #16]
 800c694:	e715      	b.n	800c4c2 <_scanf_float+0x86>
 800c696:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c69a:	2b06      	cmp	r3, #6
 800c69c:	d80a      	bhi.n	800c6b4 <_scanf_float+0x278>
 800c69e:	f1bb 0f02 	cmp.w	fp, #2
 800c6a2:	d968      	bls.n	800c776 <_scanf_float+0x33a>
 800c6a4:	f1ab 0b03 	sub.w	fp, fp, #3
 800c6a8:	fa5f fb8b 	uxtb.w	fp, fp
 800c6ac:	eba5 0b0b 	sub.w	fp, r5, fp
 800c6b0:	455d      	cmp	r5, fp
 800c6b2:	d14b      	bne.n	800c74c <_scanf_float+0x310>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	05da      	lsls	r2, r3, #23
 800c6b8:	d51f      	bpl.n	800c6fa <_scanf_float+0x2be>
 800c6ba:	055b      	lsls	r3, r3, #21
 800c6bc:	d468      	bmi.n	800c790 <_scanf_float+0x354>
 800c6be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c6c2:	6923      	ldr	r3, [r4, #16]
 800c6c4:	2965      	cmp	r1, #101	; 0x65
 800c6c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6ca:	f105 3bff 	add.w	fp, r5, #4294967295
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	d00d      	beq.n	800c6ee <_scanf_float+0x2b2>
 800c6d2:	2945      	cmp	r1, #69	; 0x45
 800c6d4:	d00b      	beq.n	800c6ee <_scanf_float+0x2b2>
 800c6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6da:	4632      	mov	r2, r6
 800c6dc:	4638      	mov	r0, r7
 800c6de:	4798      	blx	r3
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	f1a5 0b02 	sub.w	fp, r5, #2
 800c6ec:	6123      	str	r3, [r4, #16]
 800c6ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	4798      	blx	r3
 800c6f8:	465d      	mov	r5, fp
 800c6fa:	6826      	ldr	r6, [r4, #0]
 800c6fc:	f016 0610 	ands.w	r6, r6, #16
 800c700:	d17a      	bne.n	800c7f8 <_scanf_float+0x3bc>
 800c702:	702e      	strb	r6, [r5, #0]
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c70e:	d142      	bne.n	800c796 <_scanf_float+0x35a>
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	eba9 0303 	sub.w	r3, r9, r3
 800c716:	425a      	negs	r2, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d149      	bne.n	800c7b0 <_scanf_float+0x374>
 800c71c:	2200      	movs	r2, #0
 800c71e:	4641      	mov	r1, r8
 800c720:	4638      	mov	r0, r7
 800c722:	f000 fec5 	bl	800d4b0 <_strtod_r>
 800c726:	6825      	ldr	r5, [r4, #0]
 800c728:	f8da 3000 	ldr.w	r3, [sl]
 800c72c:	f015 0f02 	tst.w	r5, #2
 800c730:	f103 0204 	add.w	r2, r3, #4
 800c734:	ec59 8b10 	vmov	r8, r9, d0
 800c738:	f8ca 2000 	str.w	r2, [sl]
 800c73c:	d043      	beq.n	800c7c6 <_scanf_float+0x38a>
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	e9c3 8900 	strd	r8, r9, [r3]
 800c744:	68e3      	ldr	r3, [r4, #12]
 800c746:	3301      	adds	r3, #1
 800c748:	60e3      	str	r3, [r4, #12]
 800c74a:	e6be      	b.n	800c4ca <_scanf_float+0x8e>
 800c74c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c750:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c754:	4632      	mov	r2, r6
 800c756:	4638      	mov	r0, r7
 800c758:	4798      	blx	r3
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	6123      	str	r3, [r4, #16]
 800c760:	e7a6      	b.n	800c6b0 <_scanf_float+0x274>
 800c762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c766:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c76a:	4632      	mov	r2, r6
 800c76c:	4638      	mov	r0, r7
 800c76e:	4798      	blx	r3
 800c770:	6923      	ldr	r3, [r4, #16]
 800c772:	3b01      	subs	r3, #1
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	4545      	cmp	r5, r8
 800c778:	d8f3      	bhi.n	800c762 <_scanf_float+0x326>
 800c77a:	e6a5      	b.n	800c4c8 <_scanf_float+0x8c>
 800c77c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c784:	4632      	mov	r2, r6
 800c786:	4638      	mov	r0, r7
 800c788:	4798      	blx	r3
 800c78a:	6923      	ldr	r3, [r4, #16]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	4545      	cmp	r5, r8
 800c792:	d8f3      	bhi.n	800c77c <_scanf_float+0x340>
 800c794:	e698      	b.n	800c4c8 <_scanf_float+0x8c>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0bf      	beq.n	800c71c <_scanf_float+0x2e0>
 800c79c:	9904      	ldr	r1, [sp, #16]
 800c79e:	230a      	movs	r3, #10
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	3101      	adds	r1, #1
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f000 ff0f 	bl	800d5c8 <_strtol_r>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	9d04      	ldr	r5, [sp, #16]
 800c7ae:	1ac2      	subs	r2, r0, r3
 800c7b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c7b4:	429d      	cmp	r5, r3
 800c7b6:	bf28      	it	cs
 800c7b8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c7bc:	490f      	ldr	r1, [pc, #60]	; (800c7fc <_scanf_float+0x3c0>)
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f000 f83c 	bl	800c83c <siprintf>
 800c7c4:	e7aa      	b.n	800c71c <_scanf_float+0x2e0>
 800c7c6:	f015 0504 	ands.w	r5, r5, #4
 800c7ca:	d1b8      	bne.n	800c73e <_scanf_float+0x302>
 800c7cc:	681f      	ldr	r7, [r3, #0]
 800c7ce:	ee10 2a10 	vmov	r2, s0
 800c7d2:	464b      	mov	r3, r9
 800c7d4:	ee10 0a10 	vmov	r0, s0
 800c7d8:	4649      	mov	r1, r9
 800c7da:	f7f4 f9af 	bl	8000b3c <__aeabi_dcmpun>
 800c7de:	b128      	cbz	r0, 800c7ec <_scanf_float+0x3b0>
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f000 f825 	bl	800c830 <nanf>
 800c7e6:	ed87 0a00 	vstr	s0, [r7]
 800c7ea:	e7ab      	b.n	800c744 <_scanf_float+0x308>
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f7f4 fa02 	bl	8000bf8 <__aeabi_d2f>
 800c7f4:	6038      	str	r0, [r7, #0]
 800c7f6:	e7a5      	b.n	800c744 <_scanf_float+0x308>
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	e666      	b.n	800c4ca <_scanf_float+0x8e>
 800c7fc:	0801074c 	.word	0x0801074c

0800c800 <iprintf>:
 800c800:	b40f      	push	{r0, r1, r2, r3}
 800c802:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <iprintf+0x2c>)
 800c804:	b513      	push	{r0, r1, r4, lr}
 800c806:	681c      	ldr	r4, [r3, #0]
 800c808:	b124      	cbz	r4, 800c814 <iprintf+0x14>
 800c80a:	69a3      	ldr	r3, [r4, #24]
 800c80c:	b913      	cbnz	r3, 800c814 <iprintf+0x14>
 800c80e:	4620      	mov	r0, r4
 800c810:	f001 fd72 	bl	800e2f8 <__sinit>
 800c814:	ab05      	add	r3, sp, #20
 800c816:	9a04      	ldr	r2, [sp, #16]
 800c818:	68a1      	ldr	r1, [r4, #8]
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	4620      	mov	r0, r4
 800c81e:	f002 ff7b 	bl	800f718 <_vfiprintf_r>
 800c822:	b002      	add	sp, #8
 800c824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c828:	b004      	add	sp, #16
 800c82a:	4770      	bx	lr
 800c82c:	200002cc 	.word	0x200002cc

0800c830 <nanf>:
 800c830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c838 <nanf+0x8>
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	7fc00000 	.word	0x7fc00000

0800c83c <siprintf>:
 800c83c:	b40e      	push	{r1, r2, r3}
 800c83e:	b500      	push	{lr}
 800c840:	b09c      	sub	sp, #112	; 0x70
 800c842:	ab1d      	add	r3, sp, #116	; 0x74
 800c844:	9002      	str	r0, [sp, #8]
 800c846:	9006      	str	r0, [sp, #24]
 800c848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c84c:	4809      	ldr	r0, [pc, #36]	; (800c874 <siprintf+0x38>)
 800c84e:	9107      	str	r1, [sp, #28]
 800c850:	9104      	str	r1, [sp, #16]
 800c852:	4909      	ldr	r1, [pc, #36]	; (800c878 <siprintf+0x3c>)
 800c854:	f853 2b04 	ldr.w	r2, [r3], #4
 800c858:	9105      	str	r1, [sp, #20]
 800c85a:	6800      	ldr	r0, [r0, #0]
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	a902      	add	r1, sp, #8
 800c860:	f002 fe38 	bl	800f4d4 <_svfiprintf_r>
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	b01c      	add	sp, #112	; 0x70
 800c86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c870:	b003      	add	sp, #12
 800c872:	4770      	bx	lr
 800c874:	200002cc 	.word	0x200002cc
 800c878:	ffff0208 	.word	0xffff0208

0800c87c <strcpy>:
 800c87c:	4603      	mov	r3, r0
 800c87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c882:	f803 2b01 	strb.w	r2, [r3], #1
 800c886:	2a00      	cmp	r2, #0
 800c888:	d1f9      	bne.n	800c87e <strcpy+0x2>
 800c88a:	4770      	bx	lr

0800c88c <sulp>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	ec45 4b10 	vmov	d0, r4, r5
 800c896:	4616      	mov	r6, r2
 800c898:	f002 fbd8 	bl	800f04c <__ulp>
 800c89c:	ec51 0b10 	vmov	r0, r1, d0
 800c8a0:	b17e      	cbz	r6, 800c8c2 <sulp+0x36>
 800c8a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	dd09      	ble.n	800c8c2 <sulp+0x36>
 800c8ae:	051b      	lsls	r3, r3, #20
 800c8b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c8b4:	2400      	movs	r4, #0
 800c8b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	462b      	mov	r3, r5
 800c8be:	f7f3 fea3 	bl	8000608 <__aeabi_dmul>
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	0000      	movs	r0, r0
	...

0800c8c8 <_strtod_l>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	461f      	mov	r7, r3
 800c8ce:	b0a1      	sub	sp, #132	; 0x84
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4681      	mov	r9, r0
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	460e      	mov	r6, r1
 800c8d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8da:	931c      	str	r3, [sp, #112]	; 0x70
 800c8dc:	f002 f8bf 	bl	800ea5e <__localeconv_l>
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	6800      	ldr	r0, [r0, #0]
 800c8e4:	f7f3 fc7c 	bl	80001e0 <strlen>
 800c8e8:	f04f 0a00 	mov.w	sl, #0
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	f04f 0b00 	mov.w	fp, #0
 800c8f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c8f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8f6:	781a      	ldrb	r2, [r3, #0]
 800c8f8:	2a0d      	cmp	r2, #13
 800c8fa:	d832      	bhi.n	800c962 <_strtod_l+0x9a>
 800c8fc:	2a09      	cmp	r2, #9
 800c8fe:	d236      	bcs.n	800c96e <_strtod_l+0xa6>
 800c900:	2a00      	cmp	r2, #0
 800c902:	d03e      	beq.n	800c982 <_strtod_l+0xba>
 800c904:	2300      	movs	r3, #0
 800c906:	930d      	str	r3, [sp, #52]	; 0x34
 800c908:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c90a:	782b      	ldrb	r3, [r5, #0]
 800c90c:	2b30      	cmp	r3, #48	; 0x30
 800c90e:	f040 80ac 	bne.w	800ca6a <_strtod_l+0x1a2>
 800c912:	786b      	ldrb	r3, [r5, #1]
 800c914:	2b58      	cmp	r3, #88	; 0x58
 800c916:	d001      	beq.n	800c91c <_strtod_l+0x54>
 800c918:	2b78      	cmp	r3, #120	; 0x78
 800c91a:	d167      	bne.n	800c9ec <_strtod_l+0x124>
 800c91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	ab1c      	add	r3, sp, #112	; 0x70
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	9702      	str	r7, [sp, #8]
 800c926:	ab1d      	add	r3, sp, #116	; 0x74
 800c928:	4a88      	ldr	r2, [pc, #544]	; (800cb4c <_strtod_l+0x284>)
 800c92a:	a91b      	add	r1, sp, #108	; 0x6c
 800c92c:	4648      	mov	r0, r9
 800c92e:	f001 fdbc 	bl	800e4aa <__gethex>
 800c932:	f010 0407 	ands.w	r4, r0, #7
 800c936:	4606      	mov	r6, r0
 800c938:	d005      	beq.n	800c946 <_strtod_l+0x7e>
 800c93a:	2c06      	cmp	r4, #6
 800c93c:	d12b      	bne.n	800c996 <_strtod_l+0xce>
 800c93e:	3501      	adds	r5, #1
 800c940:	2300      	movs	r3, #0
 800c942:	951b      	str	r5, [sp, #108]	; 0x6c
 800c944:	930d      	str	r3, [sp, #52]	; 0x34
 800c946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f040 859a 	bne.w	800d482 <_strtod_l+0xbba>
 800c94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c950:	b1e3      	cbz	r3, 800c98c <_strtod_l+0xc4>
 800c952:	4652      	mov	r2, sl
 800c954:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c958:	ec43 2b10 	vmov	d0, r2, r3
 800c95c:	b021      	add	sp, #132	; 0x84
 800c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c962:	2a2b      	cmp	r2, #43	; 0x2b
 800c964:	d015      	beq.n	800c992 <_strtod_l+0xca>
 800c966:	2a2d      	cmp	r2, #45	; 0x2d
 800c968:	d004      	beq.n	800c974 <_strtod_l+0xac>
 800c96a:	2a20      	cmp	r2, #32
 800c96c:	d1ca      	bne.n	800c904 <_strtod_l+0x3c>
 800c96e:	3301      	adds	r3, #1
 800c970:	931b      	str	r3, [sp, #108]	; 0x6c
 800c972:	e7bf      	b.n	800c8f4 <_strtod_l+0x2c>
 800c974:	2201      	movs	r2, #1
 800c976:	920d      	str	r2, [sp, #52]	; 0x34
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c97c:	785b      	ldrb	r3, [r3, #1]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1c2      	bne.n	800c908 <_strtod_l+0x40>
 800c982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c984:	961b      	str	r6, [sp, #108]	; 0x6c
 800c986:	2b00      	cmp	r3, #0
 800c988:	f040 8579 	bne.w	800d47e <_strtod_l+0xbb6>
 800c98c:	4652      	mov	r2, sl
 800c98e:	465b      	mov	r3, fp
 800c990:	e7e2      	b.n	800c958 <_strtod_l+0x90>
 800c992:	2200      	movs	r2, #0
 800c994:	e7ef      	b.n	800c976 <_strtod_l+0xae>
 800c996:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c998:	b13a      	cbz	r2, 800c9aa <_strtod_l+0xe2>
 800c99a:	2135      	movs	r1, #53	; 0x35
 800c99c:	a81e      	add	r0, sp, #120	; 0x78
 800c99e:	f002 fc4d 	bl	800f23c <__copybits>
 800c9a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9a4:	4648      	mov	r0, r9
 800c9a6:	f002 f8b9 	bl	800eb1c <_Bfree>
 800c9aa:	3c01      	subs	r4, #1
 800c9ac:	2c04      	cmp	r4, #4
 800c9ae:	d806      	bhi.n	800c9be <_strtod_l+0xf6>
 800c9b0:	e8df f004 	tbb	[pc, r4]
 800c9b4:	1714030a 	.word	0x1714030a
 800c9b8:	0a          	.byte	0x0a
 800c9b9:	00          	.byte	0x00
 800c9ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c9be:	0730      	lsls	r0, r6, #28
 800c9c0:	d5c1      	bpl.n	800c946 <_strtod_l+0x7e>
 800c9c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c9c6:	e7be      	b.n	800c946 <_strtod_l+0x7e>
 800c9c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c9cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c9ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c9d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c9d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9da:	e7f0      	b.n	800c9be <_strtod_l+0xf6>
 800c9dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cb50 <_strtod_l+0x288>
 800c9e0:	e7ed      	b.n	800c9be <_strtod_l+0xf6>
 800c9e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c9e6:	f04f 3aff 	mov.w	sl, #4294967295
 800c9ea:	e7e8      	b.n	800c9be <_strtod_l+0xf6>
 800c9ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	2b30      	cmp	r3, #48	; 0x30
 800c9f6:	d0f9      	beq.n	800c9ec <_strtod_l+0x124>
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d0a4      	beq.n	800c946 <_strtod_l+0x7e>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	2500      	movs	r5, #0
 800ca00:	9306      	str	r3, [sp, #24]
 800ca02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca04:	9308      	str	r3, [sp, #32]
 800ca06:	9507      	str	r5, [sp, #28]
 800ca08:	9505      	str	r5, [sp, #20]
 800ca0a:	220a      	movs	r2, #10
 800ca0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ca0e:	7807      	ldrb	r7, [r0, #0]
 800ca10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ca14:	b2d9      	uxtb	r1, r3
 800ca16:	2909      	cmp	r1, #9
 800ca18:	d929      	bls.n	800ca6e <_strtod_l+0x1a6>
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	f8d8 1000 	ldr.w	r1, [r8]
 800ca20:	f002 ffe3 	bl	800f9ea <strncmp>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d031      	beq.n	800ca8c <_strtod_l+0x1c4>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	9c05      	ldr	r4, [sp, #20]
 800ca2c:	9004      	str	r0, [sp, #16]
 800ca2e:	463b      	mov	r3, r7
 800ca30:	4602      	mov	r2, r0
 800ca32:	2b65      	cmp	r3, #101	; 0x65
 800ca34:	d001      	beq.n	800ca3a <_strtod_l+0x172>
 800ca36:	2b45      	cmp	r3, #69	; 0x45
 800ca38:	d114      	bne.n	800ca64 <_strtod_l+0x19c>
 800ca3a:	b924      	cbnz	r4, 800ca46 <_strtod_l+0x17e>
 800ca3c:	b910      	cbnz	r0, 800ca44 <_strtod_l+0x17c>
 800ca3e:	9b06      	ldr	r3, [sp, #24]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d09e      	beq.n	800c982 <_strtod_l+0xba>
 800ca44:	2400      	movs	r4, #0
 800ca46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ca48:	1c73      	adds	r3, r6, #1
 800ca4a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca4c:	7873      	ldrb	r3, [r6, #1]
 800ca4e:	2b2b      	cmp	r3, #43	; 0x2b
 800ca50:	d078      	beq.n	800cb44 <_strtod_l+0x27c>
 800ca52:	2b2d      	cmp	r3, #45	; 0x2d
 800ca54:	d070      	beq.n	800cb38 <_strtod_l+0x270>
 800ca56:	f04f 0c00 	mov.w	ip, #0
 800ca5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ca5e:	2f09      	cmp	r7, #9
 800ca60:	d97c      	bls.n	800cb5c <_strtod_l+0x294>
 800ca62:	961b      	str	r6, [sp, #108]	; 0x6c
 800ca64:	f04f 0e00 	mov.w	lr, #0
 800ca68:	e09a      	b.n	800cba0 <_strtod_l+0x2d8>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e7c7      	b.n	800c9fe <_strtod_l+0x136>
 800ca6e:	9905      	ldr	r1, [sp, #20]
 800ca70:	2908      	cmp	r1, #8
 800ca72:	bfdd      	ittte	le
 800ca74:	9907      	ldrle	r1, [sp, #28]
 800ca76:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca7a:	9307      	strle	r3, [sp, #28]
 800ca7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ca80:	9b05      	ldr	r3, [sp, #20]
 800ca82:	3001      	adds	r0, #1
 800ca84:	3301      	adds	r3, #1
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	901b      	str	r0, [sp, #108]	; 0x6c
 800ca8a:	e7bf      	b.n	800ca0c <_strtod_l+0x144>
 800ca8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca8e:	191a      	adds	r2, r3, r4
 800ca90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca92:	9a05      	ldr	r2, [sp, #20]
 800ca94:	5d1b      	ldrb	r3, [r3, r4]
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	d037      	beq.n	800cb0a <_strtod_l+0x242>
 800ca9a:	9c05      	ldr	r4, [sp, #20]
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800caa2:	2909      	cmp	r1, #9
 800caa4:	d913      	bls.n	800cace <_strtod_l+0x206>
 800caa6:	2101      	movs	r1, #1
 800caa8:	9104      	str	r1, [sp, #16]
 800caaa:	e7c2      	b.n	800ca32 <_strtod_l+0x16a>
 800caac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	921b      	str	r2, [sp, #108]	; 0x6c
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	3001      	adds	r0, #1
 800cab6:	2b30      	cmp	r3, #48	; 0x30
 800cab8:	d0f8      	beq.n	800caac <_strtod_l+0x1e4>
 800caba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cabe:	2a08      	cmp	r2, #8
 800cac0:	f200 84e4 	bhi.w	800d48c <_strtod_l+0xbc4>
 800cac4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cac6:	9208      	str	r2, [sp, #32]
 800cac8:	4602      	mov	r2, r0
 800caca:	2000      	movs	r0, #0
 800cacc:	4604      	mov	r4, r0
 800cace:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800cad2:	f100 0101 	add.w	r1, r0, #1
 800cad6:	d012      	beq.n	800cafe <_strtod_l+0x236>
 800cad8:	440a      	add	r2, r1
 800cada:	eb00 0c04 	add.w	ip, r0, r4
 800cade:	4621      	mov	r1, r4
 800cae0:	270a      	movs	r7, #10
 800cae2:	458c      	cmp	ip, r1
 800cae4:	d113      	bne.n	800cb0e <_strtod_l+0x246>
 800cae6:	1821      	adds	r1, r4, r0
 800cae8:	2908      	cmp	r1, #8
 800caea:	f104 0401 	add.w	r4, r4, #1
 800caee:	4404      	add	r4, r0
 800caf0:	dc19      	bgt.n	800cb26 <_strtod_l+0x25e>
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	210a      	movs	r1, #10
 800caf6:	fb01 e303 	mla	r3, r1, r3, lr
 800cafa:	9307      	str	r3, [sp, #28]
 800cafc:	2100      	movs	r1, #0
 800cafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb00:	1c58      	adds	r0, r3, #1
 800cb02:	901b      	str	r0, [sp, #108]	; 0x6c
 800cb04:	785b      	ldrb	r3, [r3, #1]
 800cb06:	4608      	mov	r0, r1
 800cb08:	e7c9      	b.n	800ca9e <_strtod_l+0x1d6>
 800cb0a:	9805      	ldr	r0, [sp, #20]
 800cb0c:	e7d3      	b.n	800cab6 <_strtod_l+0x1ee>
 800cb0e:	2908      	cmp	r1, #8
 800cb10:	f101 0101 	add.w	r1, r1, #1
 800cb14:	dc03      	bgt.n	800cb1e <_strtod_l+0x256>
 800cb16:	9b07      	ldr	r3, [sp, #28]
 800cb18:	437b      	muls	r3, r7
 800cb1a:	9307      	str	r3, [sp, #28]
 800cb1c:	e7e1      	b.n	800cae2 <_strtod_l+0x21a>
 800cb1e:	2910      	cmp	r1, #16
 800cb20:	bfd8      	it	le
 800cb22:	437d      	mulle	r5, r7
 800cb24:	e7dd      	b.n	800cae2 <_strtod_l+0x21a>
 800cb26:	2c10      	cmp	r4, #16
 800cb28:	bfdc      	itt	le
 800cb2a:	210a      	movle	r1, #10
 800cb2c:	fb01 e505 	mlale	r5, r1, r5, lr
 800cb30:	e7e4      	b.n	800cafc <_strtod_l+0x234>
 800cb32:	2301      	movs	r3, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	e781      	b.n	800ca3c <_strtod_l+0x174>
 800cb38:	f04f 0c01 	mov.w	ip, #1
 800cb3c:	1cb3      	adds	r3, r6, #2
 800cb3e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb40:	78b3      	ldrb	r3, [r6, #2]
 800cb42:	e78a      	b.n	800ca5a <_strtod_l+0x192>
 800cb44:	f04f 0c00 	mov.w	ip, #0
 800cb48:	e7f8      	b.n	800cb3c <_strtod_l+0x274>
 800cb4a:	bf00      	nop
 800cb4c:	08010754 	.word	0x08010754
 800cb50:	7ff00000 	.word	0x7ff00000
 800cb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb56:	1c5f      	adds	r7, r3, #1
 800cb58:	971b      	str	r7, [sp, #108]	; 0x6c
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	2b30      	cmp	r3, #48	; 0x30
 800cb5e:	d0f9      	beq.n	800cb54 <_strtod_l+0x28c>
 800cb60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800cb64:	2f08      	cmp	r7, #8
 800cb66:	f63f af7d 	bhi.w	800ca64 <_strtod_l+0x19c>
 800cb6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cb6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb70:	930a      	str	r3, [sp, #40]	; 0x28
 800cb72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb74:	1c5f      	adds	r7, r3, #1
 800cb76:	971b      	str	r7, [sp, #108]	; 0x6c
 800cb78:	785b      	ldrb	r3, [r3, #1]
 800cb7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800cb7e:	f1b8 0f09 	cmp.w	r8, #9
 800cb82:	d937      	bls.n	800cbf4 <_strtod_l+0x32c>
 800cb84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb86:	1a7f      	subs	r7, r7, r1
 800cb88:	2f08      	cmp	r7, #8
 800cb8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cb8e:	dc37      	bgt.n	800cc00 <_strtod_l+0x338>
 800cb90:	45be      	cmp	lr, r7
 800cb92:	bfa8      	it	ge
 800cb94:	46be      	movge	lr, r7
 800cb96:	f1bc 0f00 	cmp.w	ip, #0
 800cb9a:	d001      	beq.n	800cba0 <_strtod_l+0x2d8>
 800cb9c:	f1ce 0e00 	rsb	lr, lr, #0
 800cba0:	2c00      	cmp	r4, #0
 800cba2:	d151      	bne.n	800cc48 <_strtod_l+0x380>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f47f aece 	bne.w	800c946 <_strtod_l+0x7e>
 800cbaa:	9a06      	ldr	r2, [sp, #24]
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	f47f aeca 	bne.w	800c946 <_strtod_l+0x7e>
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	f47f aee4 	bne.w	800c982 <_strtod_l+0xba>
 800cbba:	2b4e      	cmp	r3, #78	; 0x4e
 800cbbc:	d027      	beq.n	800cc0e <_strtod_l+0x346>
 800cbbe:	dc21      	bgt.n	800cc04 <_strtod_l+0x33c>
 800cbc0:	2b49      	cmp	r3, #73	; 0x49
 800cbc2:	f47f aede 	bne.w	800c982 <_strtod_l+0xba>
 800cbc6:	49a0      	ldr	r1, [pc, #640]	; (800ce48 <_strtod_l+0x580>)
 800cbc8:	a81b      	add	r0, sp, #108	; 0x6c
 800cbca:	f001 fea1 	bl	800e910 <__match>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	f43f aed7 	beq.w	800c982 <_strtod_l+0xba>
 800cbd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbd6:	499d      	ldr	r1, [pc, #628]	; (800ce4c <_strtod_l+0x584>)
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	a81b      	add	r0, sp, #108	; 0x6c
 800cbdc:	931b      	str	r3, [sp, #108]	; 0x6c
 800cbde:	f001 fe97 	bl	800e910 <__match>
 800cbe2:	b910      	cbnz	r0, 800cbea <_strtod_l+0x322>
 800cbe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	931b      	str	r3, [sp, #108]	; 0x6c
 800cbea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ce60 <_strtod_l+0x598>
 800cbee:	f04f 0a00 	mov.w	sl, #0
 800cbf2:	e6a8      	b.n	800c946 <_strtod_l+0x7e>
 800cbf4:	210a      	movs	r1, #10
 800cbf6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cbfa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cbfe:	e7b8      	b.n	800cb72 <_strtod_l+0x2aa>
 800cc00:	46be      	mov	lr, r7
 800cc02:	e7c8      	b.n	800cb96 <_strtod_l+0x2ce>
 800cc04:	2b69      	cmp	r3, #105	; 0x69
 800cc06:	d0de      	beq.n	800cbc6 <_strtod_l+0x2fe>
 800cc08:	2b6e      	cmp	r3, #110	; 0x6e
 800cc0a:	f47f aeba 	bne.w	800c982 <_strtod_l+0xba>
 800cc0e:	4990      	ldr	r1, [pc, #576]	; (800ce50 <_strtod_l+0x588>)
 800cc10:	a81b      	add	r0, sp, #108	; 0x6c
 800cc12:	f001 fe7d 	bl	800e910 <__match>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f aeb3 	beq.w	800c982 <_strtod_l+0xba>
 800cc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b28      	cmp	r3, #40	; 0x28
 800cc22:	d10e      	bne.n	800cc42 <_strtod_l+0x37a>
 800cc24:	aa1e      	add	r2, sp, #120	; 0x78
 800cc26:	498b      	ldr	r1, [pc, #556]	; (800ce54 <_strtod_l+0x58c>)
 800cc28:	a81b      	add	r0, sp, #108	; 0x6c
 800cc2a:	f001 fe85 	bl	800e938 <__hexnan>
 800cc2e:	2805      	cmp	r0, #5
 800cc30:	d107      	bne.n	800cc42 <_strtod_l+0x37a>
 800cc32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cc34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800cc38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cc3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cc40:	e681      	b.n	800c946 <_strtod_l+0x7e>
 800cc42:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ce68 <_strtod_l+0x5a0>
 800cc46:	e7d2      	b.n	800cbee <_strtod_l+0x326>
 800cc48:	ebae 0302 	sub.w	r3, lr, r2
 800cc4c:	9306      	str	r3, [sp, #24]
 800cc4e:	9b05      	ldr	r3, [sp, #20]
 800cc50:	9807      	ldr	r0, [sp, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	bf08      	it	eq
 800cc56:	4623      	moveq	r3, r4
 800cc58:	2c10      	cmp	r4, #16
 800cc5a:	9305      	str	r3, [sp, #20]
 800cc5c:	46a0      	mov	r8, r4
 800cc5e:	bfa8      	it	ge
 800cc60:	f04f 0810 	movge.w	r8, #16
 800cc64:	f7f3 fc56 	bl	8000514 <__aeabi_ui2d>
 800cc68:	2c09      	cmp	r4, #9
 800cc6a:	4682      	mov	sl, r0
 800cc6c:	468b      	mov	fp, r1
 800cc6e:	dc13      	bgt.n	800cc98 <_strtod_l+0x3d0>
 800cc70:	9b06      	ldr	r3, [sp, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f43f ae67 	beq.w	800c946 <_strtod_l+0x7e>
 800cc78:	9b06      	ldr	r3, [sp, #24]
 800cc7a:	dd7a      	ble.n	800cd72 <_strtod_l+0x4aa>
 800cc7c:	2b16      	cmp	r3, #22
 800cc7e:	dc61      	bgt.n	800cd44 <_strtod_l+0x47c>
 800cc80:	4a75      	ldr	r2, [pc, #468]	; (800ce58 <_strtod_l+0x590>)
 800cc82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800cc86:	e9de 0100 	ldrd	r0, r1, [lr]
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	465b      	mov	r3, fp
 800cc8e:	f7f3 fcbb 	bl	8000608 <__aeabi_dmul>
 800cc92:	4682      	mov	sl, r0
 800cc94:	468b      	mov	fp, r1
 800cc96:	e656      	b.n	800c946 <_strtod_l+0x7e>
 800cc98:	4b6f      	ldr	r3, [pc, #444]	; (800ce58 <_strtod_l+0x590>)
 800cc9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cc9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cca2:	f7f3 fcb1 	bl	8000608 <__aeabi_dmul>
 800cca6:	4606      	mov	r6, r0
 800cca8:	4628      	mov	r0, r5
 800ccaa:	460f      	mov	r7, r1
 800ccac:	f7f3 fc32 	bl	8000514 <__aeabi_ui2d>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 faf0 	bl	800029c <__adddf3>
 800ccbc:	2c0f      	cmp	r4, #15
 800ccbe:	4682      	mov	sl, r0
 800ccc0:	468b      	mov	fp, r1
 800ccc2:	ddd5      	ble.n	800cc70 <_strtod_l+0x3a8>
 800ccc4:	9b06      	ldr	r3, [sp, #24]
 800ccc6:	eba4 0808 	sub.w	r8, r4, r8
 800ccca:	4498      	add	r8, r3
 800cccc:	f1b8 0f00 	cmp.w	r8, #0
 800ccd0:	f340 8096 	ble.w	800ce00 <_strtod_l+0x538>
 800ccd4:	f018 030f 	ands.w	r3, r8, #15
 800ccd8:	d00a      	beq.n	800ccf0 <_strtod_l+0x428>
 800ccda:	495f      	ldr	r1, [pc, #380]	; (800ce58 <_strtod_l+0x590>)
 800ccdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cce0:	4652      	mov	r2, sl
 800cce2:	465b      	mov	r3, fp
 800cce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce8:	f7f3 fc8e 	bl	8000608 <__aeabi_dmul>
 800ccec:	4682      	mov	sl, r0
 800ccee:	468b      	mov	fp, r1
 800ccf0:	f038 080f 	bics.w	r8, r8, #15
 800ccf4:	d073      	beq.n	800cdde <_strtod_l+0x516>
 800ccf6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ccfa:	dd47      	ble.n	800cd8c <_strtod_l+0x4c4>
 800ccfc:	2400      	movs	r4, #0
 800ccfe:	46a0      	mov	r8, r4
 800cd00:	9407      	str	r4, [sp, #28]
 800cd02:	9405      	str	r4, [sp, #20]
 800cd04:	2322      	movs	r3, #34	; 0x22
 800cd06:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ce60 <_strtod_l+0x598>
 800cd0a:	f8c9 3000 	str.w	r3, [r9]
 800cd0e:	f04f 0a00 	mov.w	sl, #0
 800cd12:	9b07      	ldr	r3, [sp, #28]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f43f ae16 	beq.w	800c946 <_strtod_l+0x7e>
 800cd1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd1c:	4648      	mov	r0, r9
 800cd1e:	f001 fefd 	bl	800eb1c <_Bfree>
 800cd22:	9905      	ldr	r1, [sp, #20]
 800cd24:	4648      	mov	r0, r9
 800cd26:	f001 fef9 	bl	800eb1c <_Bfree>
 800cd2a:	4641      	mov	r1, r8
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	f001 fef5 	bl	800eb1c <_Bfree>
 800cd32:	9907      	ldr	r1, [sp, #28]
 800cd34:	4648      	mov	r0, r9
 800cd36:	f001 fef1 	bl	800eb1c <_Bfree>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4648      	mov	r0, r9
 800cd3e:	f001 feed 	bl	800eb1c <_Bfree>
 800cd42:	e600      	b.n	800c946 <_strtod_l+0x7e>
 800cd44:	9a06      	ldr	r2, [sp, #24]
 800cd46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	dbba      	blt.n	800ccc4 <_strtod_l+0x3fc>
 800cd4e:	4d42      	ldr	r5, [pc, #264]	; (800ce58 <_strtod_l+0x590>)
 800cd50:	f1c4 040f 	rsb	r4, r4, #15
 800cd54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800cd58:	4652      	mov	r2, sl
 800cd5a:	465b      	mov	r3, fp
 800cd5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd60:	f7f3 fc52 	bl	8000608 <__aeabi_dmul>
 800cd64:	9b06      	ldr	r3, [sp, #24]
 800cd66:	1b1c      	subs	r4, r3, r4
 800cd68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800cd6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd70:	e78d      	b.n	800cc8e <_strtod_l+0x3c6>
 800cd72:	f113 0f16 	cmn.w	r3, #22
 800cd76:	dba5      	blt.n	800ccc4 <_strtod_l+0x3fc>
 800cd78:	4a37      	ldr	r2, [pc, #220]	; (800ce58 <_strtod_l+0x590>)
 800cd7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800cd7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cd82:	4650      	mov	r0, sl
 800cd84:	4659      	mov	r1, fp
 800cd86:	f7f3 fd69 	bl	800085c <__aeabi_ddiv>
 800cd8a:	e782      	b.n	800cc92 <_strtod_l+0x3ca>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	4e33      	ldr	r6, [pc, #204]	; (800ce5c <_strtod_l+0x594>)
 800cd90:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cd94:	4650      	mov	r0, sl
 800cd96:	4659      	mov	r1, fp
 800cd98:	461d      	mov	r5, r3
 800cd9a:	f1b8 0f01 	cmp.w	r8, #1
 800cd9e:	dc21      	bgt.n	800cde4 <_strtod_l+0x51c>
 800cda0:	b10b      	cbz	r3, 800cda6 <_strtod_l+0x4de>
 800cda2:	4682      	mov	sl, r0
 800cda4:	468b      	mov	fp, r1
 800cda6:	4b2d      	ldr	r3, [pc, #180]	; (800ce5c <_strtod_l+0x594>)
 800cda8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cdac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cdb0:	4652      	mov	r2, sl
 800cdb2:	465b      	mov	r3, fp
 800cdb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cdb8:	f7f3 fc26 	bl	8000608 <__aeabi_dmul>
 800cdbc:	4b28      	ldr	r3, [pc, #160]	; (800ce60 <_strtod_l+0x598>)
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	400b      	ands	r3, r1
 800cdc2:	4928      	ldr	r1, [pc, #160]	; (800ce64 <_strtod_l+0x59c>)
 800cdc4:	428b      	cmp	r3, r1
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	d898      	bhi.n	800ccfc <_strtod_l+0x434>
 800cdca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cdce:	428b      	cmp	r3, r1
 800cdd0:	bf86      	itte	hi
 800cdd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ce6c <_strtod_l+0x5a4>
 800cdd6:	f04f 3aff 	movhi.w	sl, #4294967295
 800cdda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cdde:	2300      	movs	r3, #0
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	e077      	b.n	800ced4 <_strtod_l+0x60c>
 800cde4:	f018 0f01 	tst.w	r8, #1
 800cde8:	d006      	beq.n	800cdf8 <_strtod_l+0x530>
 800cdea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf2:	f7f3 fc09 	bl	8000608 <__aeabi_dmul>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	3501      	adds	r5, #1
 800cdfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cdfe:	e7cc      	b.n	800cd9a <_strtod_l+0x4d2>
 800ce00:	d0ed      	beq.n	800cdde <_strtod_l+0x516>
 800ce02:	f1c8 0800 	rsb	r8, r8, #0
 800ce06:	f018 020f 	ands.w	r2, r8, #15
 800ce0a:	d00a      	beq.n	800ce22 <_strtod_l+0x55a>
 800ce0c:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <_strtod_l+0x590>)
 800ce0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce12:	4650      	mov	r0, sl
 800ce14:	4659      	mov	r1, fp
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7f3 fd1f 	bl	800085c <__aeabi_ddiv>
 800ce1e:	4682      	mov	sl, r0
 800ce20:	468b      	mov	fp, r1
 800ce22:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ce26:	d0da      	beq.n	800cdde <_strtod_l+0x516>
 800ce28:	f1b8 0f1f 	cmp.w	r8, #31
 800ce2c:	dd20      	ble.n	800ce70 <_strtod_l+0x5a8>
 800ce2e:	2400      	movs	r4, #0
 800ce30:	46a0      	mov	r8, r4
 800ce32:	9407      	str	r4, [sp, #28]
 800ce34:	9405      	str	r4, [sp, #20]
 800ce36:	2322      	movs	r3, #34	; 0x22
 800ce38:	f04f 0a00 	mov.w	sl, #0
 800ce3c:	f04f 0b00 	mov.w	fp, #0
 800ce40:	f8c9 3000 	str.w	r3, [r9]
 800ce44:	e765      	b.n	800cd12 <_strtod_l+0x44a>
 800ce46:	bf00      	nop
 800ce48:	0801071d 	.word	0x0801071d
 800ce4c:	080107ab 	.word	0x080107ab
 800ce50:	08010725 	.word	0x08010725
 800ce54:	08010768 	.word	0x08010768
 800ce58:	08010850 	.word	0x08010850
 800ce5c:	08010828 	.word	0x08010828
 800ce60:	7ff00000 	.word	0x7ff00000
 800ce64:	7ca00000 	.word	0x7ca00000
 800ce68:	fff80000 	.word	0xfff80000
 800ce6c:	7fefffff 	.word	0x7fefffff
 800ce70:	f018 0310 	ands.w	r3, r8, #16
 800ce74:	bf18      	it	ne
 800ce76:	236a      	movne	r3, #106	; 0x6a
 800ce78:	4da0      	ldr	r5, [pc, #640]	; (800d0fc <_strtod_l+0x834>)
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	4650      	mov	r0, sl
 800ce7e:	4659      	mov	r1, fp
 800ce80:	2300      	movs	r3, #0
 800ce82:	f1b8 0f00 	cmp.w	r8, #0
 800ce86:	f300 810a 	bgt.w	800d09e <_strtod_l+0x7d6>
 800ce8a:	b10b      	cbz	r3, 800ce90 <_strtod_l+0x5c8>
 800ce8c:	4682      	mov	sl, r0
 800ce8e:	468b      	mov	fp, r1
 800ce90:	9b04      	ldr	r3, [sp, #16]
 800ce92:	b1bb      	cbz	r3, 800cec4 <_strtod_l+0x5fc>
 800ce94:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ce98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	4659      	mov	r1, fp
 800cea0:	dd10      	ble.n	800cec4 <_strtod_l+0x5fc>
 800cea2:	2b1f      	cmp	r3, #31
 800cea4:	f340 8107 	ble.w	800d0b6 <_strtod_l+0x7ee>
 800cea8:	2b34      	cmp	r3, #52	; 0x34
 800ceaa:	bfde      	ittt	le
 800ceac:	3b20      	suble	r3, #32
 800ceae:	f04f 32ff 	movle.w	r2, #4294967295
 800ceb2:	fa02 f303 	lslle.w	r3, r2, r3
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	bfcc      	ite	gt
 800cebc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cec0:	ea03 0b01 	andle.w	fp, r3, r1
 800cec4:	2200      	movs	r2, #0
 800cec6:	2300      	movs	r3, #0
 800cec8:	4650      	mov	r0, sl
 800ceca:	4659      	mov	r1, fp
 800cecc:	f7f3 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1ac      	bne.n	800ce2e <_strtod_l+0x566>
 800ced4:	9b07      	ldr	r3, [sp, #28]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	9a05      	ldr	r2, [sp, #20]
 800ceda:	9908      	ldr	r1, [sp, #32]
 800cedc:	4623      	mov	r3, r4
 800cede:	4648      	mov	r0, r9
 800cee0:	f001 fe6e 	bl	800ebc0 <__s2b>
 800cee4:	9007      	str	r0, [sp, #28]
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f43f af08 	beq.w	800ccfc <_strtod_l+0x434>
 800ceec:	9a06      	ldr	r2, [sp, #24]
 800ceee:	9b06      	ldr	r3, [sp, #24]
 800cef0:	2a00      	cmp	r2, #0
 800cef2:	f1c3 0300 	rsb	r3, r3, #0
 800cef6:	bfa8      	it	ge
 800cef8:	2300      	movge	r3, #0
 800cefa:	930e      	str	r3, [sp, #56]	; 0x38
 800cefc:	2400      	movs	r4, #0
 800cefe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf02:	9316      	str	r3, [sp, #88]	; 0x58
 800cf04:	46a0      	mov	r8, r4
 800cf06:	9b07      	ldr	r3, [sp, #28]
 800cf08:	4648      	mov	r0, r9
 800cf0a:	6859      	ldr	r1, [r3, #4]
 800cf0c:	f001 fdd2 	bl	800eab4 <_Balloc>
 800cf10:	9005      	str	r0, [sp, #20]
 800cf12:	2800      	cmp	r0, #0
 800cf14:	f43f aef6 	beq.w	800cd04 <_strtod_l+0x43c>
 800cf18:	9b07      	ldr	r3, [sp, #28]
 800cf1a:	691a      	ldr	r2, [r3, #16]
 800cf1c:	3202      	adds	r2, #2
 800cf1e:	f103 010c 	add.w	r1, r3, #12
 800cf22:	0092      	lsls	r2, r2, #2
 800cf24:	300c      	adds	r0, #12
 800cf26:	f7fe fe19 	bl	800bb5c <memcpy>
 800cf2a:	aa1e      	add	r2, sp, #120	; 0x78
 800cf2c:	a91d      	add	r1, sp, #116	; 0x74
 800cf2e:	ec4b ab10 	vmov	d0, sl, fp
 800cf32:	4648      	mov	r0, r9
 800cf34:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cf38:	f002 f8fe 	bl	800f138 <__d2b>
 800cf3c:	901c      	str	r0, [sp, #112]	; 0x70
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f43f aee0 	beq.w	800cd04 <_strtod_l+0x43c>
 800cf44:	2101      	movs	r1, #1
 800cf46:	4648      	mov	r0, r9
 800cf48:	f001 fec6 	bl	800ecd8 <__i2b>
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	f43f aed8 	beq.w	800cd04 <_strtod_l+0x43c>
 800cf54:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cf56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf58:	2e00      	cmp	r6, #0
 800cf5a:	bfab      	itete	ge
 800cf5c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cf5e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cf60:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800cf62:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800cf64:	bfac      	ite	ge
 800cf66:	18f7      	addge	r7, r6, r3
 800cf68:	1b9d      	sublt	r5, r3, r6
 800cf6a:	9b04      	ldr	r3, [sp, #16]
 800cf6c:	1af6      	subs	r6, r6, r3
 800cf6e:	4416      	add	r6, r2
 800cf70:	4b63      	ldr	r3, [pc, #396]	; (800d100 <_strtod_l+0x838>)
 800cf72:	3e01      	subs	r6, #1
 800cf74:	429e      	cmp	r6, r3
 800cf76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cf7a:	f280 80af 	bge.w	800d0dc <_strtod_l+0x814>
 800cf7e:	1b9b      	subs	r3, r3, r6
 800cf80:	2b1f      	cmp	r3, #31
 800cf82:	eba2 0203 	sub.w	r2, r2, r3
 800cf86:	f04f 0101 	mov.w	r1, #1
 800cf8a:	f300 809b 	bgt.w	800d0c4 <_strtod_l+0x7fc>
 800cf8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cf92:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf94:	2300      	movs	r3, #0
 800cf96:	930a      	str	r3, [sp, #40]	; 0x28
 800cf98:	18be      	adds	r6, r7, r2
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	42b7      	cmp	r7, r6
 800cf9e:	4415      	add	r5, r2
 800cfa0:	441d      	add	r5, r3
 800cfa2:	463b      	mov	r3, r7
 800cfa4:	bfa8      	it	ge
 800cfa6:	4633      	movge	r3, r6
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	bfa8      	it	ge
 800cfac:	462b      	movge	r3, r5
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfc2      	ittt	gt
 800cfb2:	1af6      	subgt	r6, r6, r3
 800cfb4:	1aed      	subgt	r5, r5, r3
 800cfb6:	1aff      	subgt	r7, r7, r3
 800cfb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfba:	b1bb      	cbz	r3, 800cfec <_strtod_l+0x724>
 800cfbc:	4641      	mov	r1, r8
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f001 ff29 	bl	800ee18 <__pow5mult>
 800cfc6:	4680      	mov	r8, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	f43f ae9b 	beq.w	800cd04 <_strtod_l+0x43c>
 800cfce:	4601      	mov	r1, r0
 800cfd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cfd2:	4648      	mov	r0, r9
 800cfd4:	f001 fe89 	bl	800ecea <__multiply>
 800cfd8:	900c      	str	r0, [sp, #48]	; 0x30
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	f43f ae92 	beq.w	800cd04 <_strtod_l+0x43c>
 800cfe0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cfe2:	4648      	mov	r0, r9
 800cfe4:	f001 fd9a 	bl	800eb1c <_Bfree>
 800cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfea:	931c      	str	r3, [sp, #112]	; 0x70
 800cfec:	2e00      	cmp	r6, #0
 800cfee:	dc7a      	bgt.n	800d0e6 <_strtod_l+0x81e>
 800cff0:	9b06      	ldr	r3, [sp, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	dd08      	ble.n	800d008 <_strtod_l+0x740>
 800cff6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cff8:	9905      	ldr	r1, [sp, #20]
 800cffa:	4648      	mov	r0, r9
 800cffc:	f001 ff0c 	bl	800ee18 <__pow5mult>
 800d000:	9005      	str	r0, [sp, #20]
 800d002:	2800      	cmp	r0, #0
 800d004:	f43f ae7e 	beq.w	800cd04 <_strtod_l+0x43c>
 800d008:	2d00      	cmp	r5, #0
 800d00a:	dd08      	ble.n	800d01e <_strtod_l+0x756>
 800d00c:	462a      	mov	r2, r5
 800d00e:	9905      	ldr	r1, [sp, #20]
 800d010:	4648      	mov	r0, r9
 800d012:	f001 ff4f 	bl	800eeb4 <__lshift>
 800d016:	9005      	str	r0, [sp, #20]
 800d018:	2800      	cmp	r0, #0
 800d01a:	f43f ae73 	beq.w	800cd04 <_strtod_l+0x43c>
 800d01e:	2f00      	cmp	r7, #0
 800d020:	dd08      	ble.n	800d034 <_strtod_l+0x76c>
 800d022:	4641      	mov	r1, r8
 800d024:	463a      	mov	r2, r7
 800d026:	4648      	mov	r0, r9
 800d028:	f001 ff44 	bl	800eeb4 <__lshift>
 800d02c:	4680      	mov	r8, r0
 800d02e:	2800      	cmp	r0, #0
 800d030:	f43f ae68 	beq.w	800cd04 <_strtod_l+0x43c>
 800d034:	9a05      	ldr	r2, [sp, #20]
 800d036:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d038:	4648      	mov	r0, r9
 800d03a:	f001 ffa9 	bl	800ef90 <__mdiff>
 800d03e:	4604      	mov	r4, r0
 800d040:	2800      	cmp	r0, #0
 800d042:	f43f ae5f 	beq.w	800cd04 <_strtod_l+0x43c>
 800d046:	68c3      	ldr	r3, [r0, #12]
 800d048:	930c      	str	r3, [sp, #48]	; 0x30
 800d04a:	2300      	movs	r3, #0
 800d04c:	60c3      	str	r3, [r0, #12]
 800d04e:	4641      	mov	r1, r8
 800d050:	f001 ff84 	bl	800ef5c <__mcmp>
 800d054:	2800      	cmp	r0, #0
 800d056:	da55      	bge.n	800d104 <_strtod_l+0x83c>
 800d058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d05a:	b9e3      	cbnz	r3, 800d096 <_strtod_l+0x7ce>
 800d05c:	f1ba 0f00 	cmp.w	sl, #0
 800d060:	d119      	bne.n	800d096 <_strtod_l+0x7ce>
 800d062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d066:	b9b3      	cbnz	r3, 800d096 <_strtod_l+0x7ce>
 800d068:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d06c:	0d1b      	lsrs	r3, r3, #20
 800d06e:	051b      	lsls	r3, r3, #20
 800d070:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d074:	d90f      	bls.n	800d096 <_strtod_l+0x7ce>
 800d076:	6963      	ldr	r3, [r4, #20]
 800d078:	b913      	cbnz	r3, 800d080 <_strtod_l+0x7b8>
 800d07a:	6923      	ldr	r3, [r4, #16]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	dd0a      	ble.n	800d096 <_strtod_l+0x7ce>
 800d080:	4621      	mov	r1, r4
 800d082:	2201      	movs	r2, #1
 800d084:	4648      	mov	r0, r9
 800d086:	f001 ff15 	bl	800eeb4 <__lshift>
 800d08a:	4641      	mov	r1, r8
 800d08c:	4604      	mov	r4, r0
 800d08e:	f001 ff65 	bl	800ef5c <__mcmp>
 800d092:	2800      	cmp	r0, #0
 800d094:	dc67      	bgt.n	800d166 <_strtod_l+0x89e>
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d171      	bne.n	800d180 <_strtod_l+0x8b8>
 800d09c:	e63d      	b.n	800cd1a <_strtod_l+0x452>
 800d09e:	f018 0f01 	tst.w	r8, #1
 800d0a2:	d004      	beq.n	800d0ae <_strtod_l+0x7e6>
 800d0a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0a8:	f7f3 faae 	bl	8000608 <__aeabi_dmul>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d0b2:	3508      	adds	r5, #8
 800d0b4:	e6e5      	b.n	800ce82 <_strtod_l+0x5ba>
 800d0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d0be:	ea03 0a0a 	and.w	sl, r3, sl
 800d0c2:	e6ff      	b.n	800cec4 <_strtod_l+0x5fc>
 800d0c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d0c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d0cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d0d0:	36e2      	adds	r6, #226	; 0xe2
 800d0d2:	fa01 f306 	lsl.w	r3, r1, r6
 800d0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d0da:	e75d      	b.n	800cf98 <_strtod_l+0x6d0>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	930a      	str	r3, [sp, #40]	; 0x28
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0e4:	e758      	b.n	800cf98 <_strtod_l+0x6d0>
 800d0e6:	4632      	mov	r2, r6
 800d0e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d0ea:	4648      	mov	r0, r9
 800d0ec:	f001 fee2 	bl	800eeb4 <__lshift>
 800d0f0:	901c      	str	r0, [sp, #112]	; 0x70
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	f47f af7c 	bne.w	800cff0 <_strtod_l+0x728>
 800d0f8:	e604      	b.n	800cd04 <_strtod_l+0x43c>
 800d0fa:	bf00      	nop
 800d0fc:	08010780 	.word	0x08010780
 800d100:	fffffc02 	.word	0xfffffc02
 800d104:	465d      	mov	r5, fp
 800d106:	f040 8086 	bne.w	800d216 <_strtod_l+0x94e>
 800d10a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d10c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d110:	b32a      	cbz	r2, 800d15e <_strtod_l+0x896>
 800d112:	4aaf      	ldr	r2, [pc, #700]	; (800d3d0 <_strtod_l+0xb08>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d153      	bne.n	800d1c0 <_strtod_l+0x8f8>
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	4650      	mov	r0, sl
 800d11c:	b1d3      	cbz	r3, 800d154 <_strtod_l+0x88c>
 800d11e:	4aad      	ldr	r2, [pc, #692]	; (800d3d4 <_strtod_l+0xb0c>)
 800d120:	402a      	ands	r2, r5
 800d122:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d126:	f04f 31ff 	mov.w	r1, #4294967295
 800d12a:	d816      	bhi.n	800d15a <_strtod_l+0x892>
 800d12c:	0d12      	lsrs	r2, r2, #20
 800d12e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d132:	fa01 f303 	lsl.w	r3, r1, r3
 800d136:	4298      	cmp	r0, r3
 800d138:	d142      	bne.n	800d1c0 <_strtod_l+0x8f8>
 800d13a:	4ba7      	ldr	r3, [pc, #668]	; (800d3d8 <_strtod_l+0xb10>)
 800d13c:	429d      	cmp	r5, r3
 800d13e:	d102      	bne.n	800d146 <_strtod_l+0x87e>
 800d140:	3001      	adds	r0, #1
 800d142:	f43f addf 	beq.w	800cd04 <_strtod_l+0x43c>
 800d146:	4ba3      	ldr	r3, [pc, #652]	; (800d3d4 <_strtod_l+0xb0c>)
 800d148:	402b      	ands	r3, r5
 800d14a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d14e:	f04f 0a00 	mov.w	sl, #0
 800d152:	e7a0      	b.n	800d096 <_strtod_l+0x7ce>
 800d154:	f04f 33ff 	mov.w	r3, #4294967295
 800d158:	e7ed      	b.n	800d136 <_strtod_l+0x86e>
 800d15a:	460b      	mov	r3, r1
 800d15c:	e7eb      	b.n	800d136 <_strtod_l+0x86e>
 800d15e:	bb7b      	cbnz	r3, 800d1c0 <_strtod_l+0x8f8>
 800d160:	f1ba 0f00 	cmp.w	sl, #0
 800d164:	d12c      	bne.n	800d1c0 <_strtod_l+0x8f8>
 800d166:	9904      	ldr	r1, [sp, #16]
 800d168:	4a9a      	ldr	r2, [pc, #616]	; (800d3d4 <_strtod_l+0xb0c>)
 800d16a:	465b      	mov	r3, fp
 800d16c:	b1f1      	cbz	r1, 800d1ac <_strtod_l+0x8e4>
 800d16e:	ea02 010b 	and.w	r1, r2, fp
 800d172:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d176:	dc19      	bgt.n	800d1ac <_strtod_l+0x8e4>
 800d178:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d17c:	f77f ae5b 	ble.w	800ce36 <_strtod_l+0x56e>
 800d180:	4a96      	ldr	r2, [pc, #600]	; (800d3dc <_strtod_l+0xb14>)
 800d182:	2300      	movs	r3, #0
 800d184:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d188:	4650      	mov	r0, sl
 800d18a:	4659      	mov	r1, fp
 800d18c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d190:	f7f3 fa3a 	bl	8000608 <__aeabi_dmul>
 800d194:	4682      	mov	sl, r0
 800d196:	468b      	mov	fp, r1
 800d198:	2900      	cmp	r1, #0
 800d19a:	f47f adbe 	bne.w	800cd1a <_strtod_l+0x452>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	f47f adbb 	bne.w	800cd1a <_strtod_l+0x452>
 800d1a4:	2322      	movs	r3, #34	; 0x22
 800d1a6:	f8c9 3000 	str.w	r3, [r9]
 800d1aa:	e5b6      	b.n	800cd1a <_strtod_l+0x452>
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d1b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1ba:	f04f 3aff 	mov.w	sl, #4294967295
 800d1be:	e76a      	b.n	800d096 <_strtod_l+0x7ce>
 800d1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c2:	b193      	cbz	r3, 800d1ea <_strtod_l+0x922>
 800d1c4:	422b      	tst	r3, r5
 800d1c6:	f43f af66 	beq.w	800d096 <_strtod_l+0x7ce>
 800d1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1cc:	9a04      	ldr	r2, [sp, #16]
 800d1ce:	4650      	mov	r0, sl
 800d1d0:	4659      	mov	r1, fp
 800d1d2:	b173      	cbz	r3, 800d1f2 <_strtod_l+0x92a>
 800d1d4:	f7ff fb5a 	bl	800c88c <sulp>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1e0:	f7f3 f85c 	bl	800029c <__adddf3>
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	468b      	mov	fp, r1
 800d1e8:	e755      	b.n	800d096 <_strtod_l+0x7ce>
 800d1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1ec:	ea13 0f0a 	tst.w	r3, sl
 800d1f0:	e7e9      	b.n	800d1c6 <_strtod_l+0x8fe>
 800d1f2:	f7ff fb4b 	bl	800c88c <sulp>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1fe:	f7f3 f84b 	bl	8000298 <__aeabi_dsub>
 800d202:	2200      	movs	r2, #0
 800d204:	2300      	movs	r3, #0
 800d206:	4682      	mov	sl, r0
 800d208:	468b      	mov	fp, r1
 800d20a:	f7f3 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800d20e:	2800      	cmp	r0, #0
 800d210:	f47f ae11 	bne.w	800ce36 <_strtod_l+0x56e>
 800d214:	e73f      	b.n	800d096 <_strtod_l+0x7ce>
 800d216:	4641      	mov	r1, r8
 800d218:	4620      	mov	r0, r4
 800d21a:	f001 ffdc 	bl	800f1d6 <__ratio>
 800d21e:	ec57 6b10 	vmov	r6, r7, d0
 800d222:	2200      	movs	r2, #0
 800d224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d228:	ee10 0a10 	vmov	r0, s0
 800d22c:	4639      	mov	r1, r7
 800d22e:	f7f3 fc67 	bl	8000b00 <__aeabi_dcmple>
 800d232:	2800      	cmp	r0, #0
 800d234:	d077      	beq.n	800d326 <_strtod_l+0xa5e>
 800d236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d04a      	beq.n	800d2d2 <_strtod_l+0xa0a>
 800d23c:	4b68      	ldr	r3, [pc, #416]	; (800d3e0 <_strtod_l+0xb18>)
 800d23e:	2200      	movs	r2, #0
 800d240:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d244:	4f66      	ldr	r7, [pc, #408]	; (800d3e0 <_strtod_l+0xb18>)
 800d246:	2600      	movs	r6, #0
 800d248:	4b62      	ldr	r3, [pc, #392]	; (800d3d4 <_strtod_l+0xb0c>)
 800d24a:	402b      	ands	r3, r5
 800d24c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d24e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d250:	4b64      	ldr	r3, [pc, #400]	; (800d3e4 <_strtod_l+0xb1c>)
 800d252:	429a      	cmp	r2, r3
 800d254:	f040 80ce 	bne.w	800d3f4 <_strtod_l+0xb2c>
 800d258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d25c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d260:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d264:	ec4b ab10 	vmov	d0, sl, fp
 800d268:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d26c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d270:	f001 feec 	bl	800f04c <__ulp>
 800d274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d278:	ec53 2b10 	vmov	r2, r3, d0
 800d27c:	f7f3 f9c4 	bl	8000608 <__aeabi_dmul>
 800d280:	4652      	mov	r2, sl
 800d282:	465b      	mov	r3, fp
 800d284:	f7f3 f80a 	bl	800029c <__adddf3>
 800d288:	460b      	mov	r3, r1
 800d28a:	4952      	ldr	r1, [pc, #328]	; (800d3d4 <_strtod_l+0xb0c>)
 800d28c:	4a56      	ldr	r2, [pc, #344]	; (800d3e8 <_strtod_l+0xb20>)
 800d28e:	4019      	ands	r1, r3
 800d290:	4291      	cmp	r1, r2
 800d292:	4682      	mov	sl, r0
 800d294:	d95b      	bls.n	800d34e <_strtod_l+0xa86>
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d103      	bne.n	800d2a8 <_strtod_l+0x9e0>
 800d2a0:	9b08      	ldr	r3, [sp, #32]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	f43f ad2e 	beq.w	800cd04 <_strtod_l+0x43c>
 800d2a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d3d8 <_strtod_l+0xb10>
 800d2ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d2b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d2b2:	4648      	mov	r0, r9
 800d2b4:	f001 fc32 	bl	800eb1c <_Bfree>
 800d2b8:	9905      	ldr	r1, [sp, #20]
 800d2ba:	4648      	mov	r0, r9
 800d2bc:	f001 fc2e 	bl	800eb1c <_Bfree>
 800d2c0:	4641      	mov	r1, r8
 800d2c2:	4648      	mov	r0, r9
 800d2c4:	f001 fc2a 	bl	800eb1c <_Bfree>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4648      	mov	r0, r9
 800d2cc:	f001 fc26 	bl	800eb1c <_Bfree>
 800d2d0:	e619      	b.n	800cf06 <_strtod_l+0x63e>
 800d2d2:	f1ba 0f00 	cmp.w	sl, #0
 800d2d6:	d11a      	bne.n	800d30e <_strtod_l+0xa46>
 800d2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2dc:	b9eb      	cbnz	r3, 800d31a <_strtod_l+0xa52>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	4b3f      	ldr	r3, [pc, #252]	; (800d3e0 <_strtod_l+0xb18>)
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 fc01 	bl	8000aec <__aeabi_dcmplt>
 800d2ea:	b9c8      	cbnz	r0, 800d320 <_strtod_l+0xa58>
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	4639      	mov	r1, r7
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	4b3e      	ldr	r3, [pc, #248]	; (800d3ec <_strtod_l+0xb24>)
 800d2f4:	f7f3 f988 	bl	8000608 <__aeabi_dmul>
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d300:	9618      	str	r6, [sp, #96]	; 0x60
 800d302:	9319      	str	r3, [sp, #100]	; 0x64
 800d304:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d308:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d30c:	e79c      	b.n	800d248 <_strtod_l+0x980>
 800d30e:	f1ba 0f01 	cmp.w	sl, #1
 800d312:	d102      	bne.n	800d31a <_strtod_l+0xa52>
 800d314:	2d00      	cmp	r5, #0
 800d316:	f43f ad8e 	beq.w	800ce36 <_strtod_l+0x56e>
 800d31a:	2200      	movs	r2, #0
 800d31c:	4b34      	ldr	r3, [pc, #208]	; (800d3f0 <_strtod_l+0xb28>)
 800d31e:	e78f      	b.n	800d240 <_strtod_l+0x978>
 800d320:	2600      	movs	r6, #0
 800d322:	4f32      	ldr	r7, [pc, #200]	; (800d3ec <_strtod_l+0xb24>)
 800d324:	e7ea      	b.n	800d2fc <_strtod_l+0xa34>
 800d326:	4b31      	ldr	r3, [pc, #196]	; (800d3ec <_strtod_l+0xb24>)
 800d328:	4630      	mov	r0, r6
 800d32a:	4639      	mov	r1, r7
 800d32c:	2200      	movs	r2, #0
 800d32e:	f7f3 f96b 	bl	8000608 <__aeabi_dmul>
 800d332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d334:	4606      	mov	r6, r0
 800d336:	460f      	mov	r7, r1
 800d338:	b933      	cbnz	r3, 800d348 <_strtod_l+0xa80>
 800d33a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d33e:	9010      	str	r0, [sp, #64]	; 0x40
 800d340:	9311      	str	r3, [sp, #68]	; 0x44
 800d342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d346:	e7df      	b.n	800d308 <_strtod_l+0xa40>
 800d348:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d34c:	e7f9      	b.n	800d342 <_strtod_l+0xa7a>
 800d34e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1ab      	bne.n	800d2b0 <_strtod_l+0x9e8>
 800d358:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d35c:	0d1b      	lsrs	r3, r3, #20
 800d35e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d360:	051b      	lsls	r3, r3, #20
 800d362:	429a      	cmp	r2, r3
 800d364:	465d      	mov	r5, fp
 800d366:	d1a3      	bne.n	800d2b0 <_strtod_l+0x9e8>
 800d368:	4639      	mov	r1, r7
 800d36a:	4630      	mov	r0, r6
 800d36c:	f7f3 fbfc 	bl	8000b68 <__aeabi_d2iz>
 800d370:	f7f3 f8e0 	bl	8000534 <__aeabi_i2d>
 800d374:	460b      	mov	r3, r1
 800d376:	4602      	mov	r2, r0
 800d378:	4639      	mov	r1, r7
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7f2 ff8c 	bl	8000298 <__aeabi_dsub>
 800d380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d382:	4606      	mov	r6, r0
 800d384:	460f      	mov	r7, r1
 800d386:	b933      	cbnz	r3, 800d396 <_strtod_l+0xace>
 800d388:	f1ba 0f00 	cmp.w	sl, #0
 800d38c:	d103      	bne.n	800d396 <_strtod_l+0xace>
 800d38e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d392:	2d00      	cmp	r5, #0
 800d394:	d06d      	beq.n	800d472 <_strtod_l+0xbaa>
 800d396:	a30a      	add	r3, pc, #40	; (adr r3, 800d3c0 <_strtod_l+0xaf8>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f3 fba4 	bl	8000aec <__aeabi_dcmplt>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	f47f acb8 	bne.w	800cd1a <_strtod_l+0x452>
 800d3aa:	a307      	add	r3, pc, #28	; (adr r3, 800d3c8 <_strtod_l+0xb00>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	f7f3 fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	f43f af79 	beq.w	800d2b0 <_strtod_l+0x9e8>
 800d3be:	e4ac      	b.n	800cd1a <_strtod_l+0x452>
 800d3c0:	94a03595 	.word	0x94a03595
 800d3c4:	3fdfffff 	.word	0x3fdfffff
 800d3c8:	35afe535 	.word	0x35afe535
 800d3cc:	3fe00000 	.word	0x3fe00000
 800d3d0:	000fffff 	.word	0x000fffff
 800d3d4:	7ff00000 	.word	0x7ff00000
 800d3d8:	7fefffff 	.word	0x7fefffff
 800d3dc:	39500000 	.word	0x39500000
 800d3e0:	3ff00000 	.word	0x3ff00000
 800d3e4:	7fe00000 	.word	0x7fe00000
 800d3e8:	7c9fffff 	.word	0x7c9fffff
 800d3ec:	3fe00000 	.word	0x3fe00000
 800d3f0:	bff00000 	.word	0xbff00000
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	b333      	cbz	r3, 800d446 <_strtod_l+0xb7e>
 800d3f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3fe:	d822      	bhi.n	800d446 <_strtod_l+0xb7e>
 800d400:	a327      	add	r3, pc, #156	; (adr r3, 800d4a0 <_strtod_l+0xbd8>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fb79 	bl	8000b00 <__aeabi_dcmple>
 800d40e:	b1a0      	cbz	r0, 800d43a <_strtod_l+0xb72>
 800d410:	4639      	mov	r1, r7
 800d412:	4630      	mov	r0, r6
 800d414:	f7f3 fbd0 	bl	8000bb8 <__aeabi_d2uiz>
 800d418:	2800      	cmp	r0, #0
 800d41a:	bf08      	it	eq
 800d41c:	2001      	moveq	r0, #1
 800d41e:	f7f3 f879 	bl	8000514 <__aeabi_ui2d>
 800d422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d424:	4606      	mov	r6, r0
 800d426:	460f      	mov	r7, r1
 800d428:	bb03      	cbnz	r3, 800d46c <_strtod_l+0xba4>
 800d42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d42e:	9012      	str	r0, [sp, #72]	; 0x48
 800d430:	9313      	str	r3, [sp, #76]	; 0x4c
 800d432:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d436:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d43e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d442:	1a9b      	subs	r3, r3, r2
 800d444:	930b      	str	r3, [sp, #44]	; 0x2c
 800d446:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d44a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d44e:	f001 fdfd 	bl	800f04c <__ulp>
 800d452:	4650      	mov	r0, sl
 800d454:	ec53 2b10 	vmov	r2, r3, d0
 800d458:	4659      	mov	r1, fp
 800d45a:	f7f3 f8d5 	bl	8000608 <__aeabi_dmul>
 800d45e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d462:	f7f2 ff1b 	bl	800029c <__adddf3>
 800d466:	4682      	mov	sl, r0
 800d468:	468b      	mov	fp, r1
 800d46a:	e772      	b.n	800d352 <_strtod_l+0xa8a>
 800d46c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d470:	e7df      	b.n	800d432 <_strtod_l+0xb6a>
 800d472:	a30d      	add	r3, pc, #52	; (adr r3, 800d4a8 <_strtod_l+0xbe0>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	f7f3 fb38 	bl	8000aec <__aeabi_dcmplt>
 800d47c:	e79c      	b.n	800d3b8 <_strtod_l+0xaf0>
 800d47e:	2300      	movs	r3, #0
 800d480:	930d      	str	r3, [sp, #52]	; 0x34
 800d482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	f7ff ba61 	b.w	800c94e <_strtod_l+0x86>
 800d48c:	2b65      	cmp	r3, #101	; 0x65
 800d48e:	f04f 0200 	mov.w	r2, #0
 800d492:	f43f ab4e 	beq.w	800cb32 <_strtod_l+0x26a>
 800d496:	2101      	movs	r1, #1
 800d498:	4614      	mov	r4, r2
 800d49a:	9104      	str	r1, [sp, #16]
 800d49c:	f7ff bacb 	b.w	800ca36 <_strtod_l+0x16e>
 800d4a0:	ffc00000 	.word	0xffc00000
 800d4a4:	41dfffff 	.word	0x41dfffff
 800d4a8:	94a03595 	.word	0x94a03595
 800d4ac:	3fcfffff 	.word	0x3fcfffff

0800d4b0 <_strtod_r>:
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <_strtod_r+0x18>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	b410      	push	{r4}
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	4c04      	ldr	r4, [pc, #16]	; (800d4cc <_strtod_r+0x1c>)
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bf08      	it	eq
 800d4be:	4623      	moveq	r3, r4
 800d4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c4:	f7ff ba00 	b.w	800c8c8 <_strtod_l>
 800d4c8:	200002cc 	.word	0x200002cc
 800d4cc:	20000330 	.word	0x20000330

0800d4d0 <_strtol_l.isra.0>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	4689      	mov	r9, r1
 800d4d8:	4692      	mov	sl, r2
 800d4da:	461e      	mov	r6, r3
 800d4dc:	460f      	mov	r7, r1
 800d4de:	463d      	mov	r5, r7
 800d4e0:	9808      	ldr	r0, [sp, #32]
 800d4e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4e6:	f001 fab7 	bl	800ea58 <__locale_ctype_ptr_l>
 800d4ea:	4420      	add	r0, r4
 800d4ec:	7843      	ldrb	r3, [r0, #1]
 800d4ee:	f013 0308 	ands.w	r3, r3, #8
 800d4f2:	d132      	bne.n	800d55a <_strtol_l.isra.0+0x8a>
 800d4f4:	2c2d      	cmp	r4, #45	; 0x2d
 800d4f6:	d132      	bne.n	800d55e <_strtol_l.isra.0+0x8e>
 800d4f8:	787c      	ldrb	r4, [r7, #1]
 800d4fa:	1cbd      	adds	r5, r7, #2
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	2e00      	cmp	r6, #0
 800d500:	d05d      	beq.n	800d5be <_strtol_l.isra.0+0xee>
 800d502:	2e10      	cmp	r6, #16
 800d504:	d109      	bne.n	800d51a <_strtol_l.isra.0+0x4a>
 800d506:	2c30      	cmp	r4, #48	; 0x30
 800d508:	d107      	bne.n	800d51a <_strtol_l.isra.0+0x4a>
 800d50a:	782b      	ldrb	r3, [r5, #0]
 800d50c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d510:	2b58      	cmp	r3, #88	; 0x58
 800d512:	d14f      	bne.n	800d5b4 <_strtol_l.isra.0+0xe4>
 800d514:	786c      	ldrb	r4, [r5, #1]
 800d516:	2610      	movs	r6, #16
 800d518:	3502      	adds	r5, #2
 800d51a:	2a00      	cmp	r2, #0
 800d51c:	bf14      	ite	ne
 800d51e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d522:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d526:	2700      	movs	r7, #0
 800d528:	fbb1 fcf6 	udiv	ip, r1, r6
 800d52c:	4638      	mov	r0, r7
 800d52e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d532:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d536:	2b09      	cmp	r3, #9
 800d538:	d817      	bhi.n	800d56a <_strtol_l.isra.0+0x9a>
 800d53a:	461c      	mov	r4, r3
 800d53c:	42a6      	cmp	r6, r4
 800d53e:	dd23      	ble.n	800d588 <_strtol_l.isra.0+0xb8>
 800d540:	1c7b      	adds	r3, r7, #1
 800d542:	d007      	beq.n	800d554 <_strtol_l.isra.0+0x84>
 800d544:	4584      	cmp	ip, r0
 800d546:	d31c      	bcc.n	800d582 <_strtol_l.isra.0+0xb2>
 800d548:	d101      	bne.n	800d54e <_strtol_l.isra.0+0x7e>
 800d54a:	45a6      	cmp	lr, r4
 800d54c:	db19      	blt.n	800d582 <_strtol_l.isra.0+0xb2>
 800d54e:	fb00 4006 	mla	r0, r0, r6, r4
 800d552:	2701      	movs	r7, #1
 800d554:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d558:	e7eb      	b.n	800d532 <_strtol_l.isra.0+0x62>
 800d55a:	462f      	mov	r7, r5
 800d55c:	e7bf      	b.n	800d4de <_strtol_l.isra.0+0xe>
 800d55e:	2c2b      	cmp	r4, #43	; 0x2b
 800d560:	bf04      	itt	eq
 800d562:	1cbd      	addeq	r5, r7, #2
 800d564:	787c      	ldrbeq	r4, [r7, #1]
 800d566:	461a      	mov	r2, r3
 800d568:	e7c9      	b.n	800d4fe <_strtol_l.isra.0+0x2e>
 800d56a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d56e:	2b19      	cmp	r3, #25
 800d570:	d801      	bhi.n	800d576 <_strtol_l.isra.0+0xa6>
 800d572:	3c37      	subs	r4, #55	; 0x37
 800d574:	e7e2      	b.n	800d53c <_strtol_l.isra.0+0x6c>
 800d576:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d57a:	2b19      	cmp	r3, #25
 800d57c:	d804      	bhi.n	800d588 <_strtol_l.isra.0+0xb8>
 800d57e:	3c57      	subs	r4, #87	; 0x57
 800d580:	e7dc      	b.n	800d53c <_strtol_l.isra.0+0x6c>
 800d582:	f04f 37ff 	mov.w	r7, #4294967295
 800d586:	e7e5      	b.n	800d554 <_strtol_l.isra.0+0x84>
 800d588:	1c7b      	adds	r3, r7, #1
 800d58a:	d108      	bne.n	800d59e <_strtol_l.isra.0+0xce>
 800d58c:	2322      	movs	r3, #34	; 0x22
 800d58e:	f8c8 3000 	str.w	r3, [r8]
 800d592:	4608      	mov	r0, r1
 800d594:	f1ba 0f00 	cmp.w	sl, #0
 800d598:	d107      	bne.n	800d5aa <_strtol_l.isra.0+0xda>
 800d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59e:	b102      	cbz	r2, 800d5a2 <_strtol_l.isra.0+0xd2>
 800d5a0:	4240      	negs	r0, r0
 800d5a2:	f1ba 0f00 	cmp.w	sl, #0
 800d5a6:	d0f8      	beq.n	800d59a <_strtol_l.isra.0+0xca>
 800d5a8:	b10f      	cbz	r7, 800d5ae <_strtol_l.isra.0+0xde>
 800d5aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800d5ae:	f8ca 9000 	str.w	r9, [sl]
 800d5b2:	e7f2      	b.n	800d59a <_strtol_l.isra.0+0xca>
 800d5b4:	2430      	movs	r4, #48	; 0x30
 800d5b6:	2e00      	cmp	r6, #0
 800d5b8:	d1af      	bne.n	800d51a <_strtol_l.isra.0+0x4a>
 800d5ba:	2608      	movs	r6, #8
 800d5bc:	e7ad      	b.n	800d51a <_strtol_l.isra.0+0x4a>
 800d5be:	2c30      	cmp	r4, #48	; 0x30
 800d5c0:	d0a3      	beq.n	800d50a <_strtol_l.isra.0+0x3a>
 800d5c2:	260a      	movs	r6, #10
 800d5c4:	e7a9      	b.n	800d51a <_strtol_l.isra.0+0x4a>
	...

0800d5c8 <_strtol_r>:
 800d5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ca:	4c06      	ldr	r4, [pc, #24]	; (800d5e4 <_strtol_r+0x1c>)
 800d5cc:	4d06      	ldr	r5, [pc, #24]	; (800d5e8 <_strtol_r+0x20>)
 800d5ce:	6824      	ldr	r4, [r4, #0]
 800d5d0:	6a24      	ldr	r4, [r4, #32]
 800d5d2:	2c00      	cmp	r4, #0
 800d5d4:	bf08      	it	eq
 800d5d6:	462c      	moveq	r4, r5
 800d5d8:	9400      	str	r4, [sp, #0]
 800d5da:	f7ff ff79 	bl	800d4d0 <_strtol_l.isra.0>
 800d5de:	b003      	add	sp, #12
 800d5e0:	bd30      	pop	{r4, r5, pc}
 800d5e2:	bf00      	nop
 800d5e4:	200002cc 	.word	0x200002cc
 800d5e8:	20000330 	.word	0x20000330

0800d5ec <quorem>:
 800d5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	6903      	ldr	r3, [r0, #16]
 800d5f2:	690c      	ldr	r4, [r1, #16]
 800d5f4:	42a3      	cmp	r3, r4
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	f2c0 8082 	blt.w	800d700 <quorem+0x114>
 800d5fc:	3c01      	subs	r4, #1
 800d5fe:	f101 0714 	add.w	r7, r1, #20
 800d602:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d606:	f100 0614 	add.w	r6, r0, #20
 800d60a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d60e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d612:	eb06 030c 	add.w	r3, r6, ip
 800d616:	3501      	adds	r5, #1
 800d618:	eb07 090c 	add.w	r9, r7, ip
 800d61c:	9301      	str	r3, [sp, #4]
 800d61e:	fbb0 f5f5 	udiv	r5, r0, r5
 800d622:	b395      	cbz	r5, 800d68a <quorem+0x9e>
 800d624:	f04f 0a00 	mov.w	sl, #0
 800d628:	4638      	mov	r0, r7
 800d62a:	46b6      	mov	lr, r6
 800d62c:	46d3      	mov	fp, sl
 800d62e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d632:	b293      	uxth	r3, r2
 800d634:	fb05 a303 	mla	r3, r5, r3, sl
 800d638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	ebab 0303 	sub.w	r3, fp, r3
 800d642:	0c12      	lsrs	r2, r2, #16
 800d644:	f8de b000 	ldr.w	fp, [lr]
 800d648:	fb05 a202 	mla	r2, r5, r2, sl
 800d64c:	fa13 f38b 	uxtah	r3, r3, fp
 800d650:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d654:	fa1f fb82 	uxth.w	fp, r2
 800d658:	f8de 2000 	ldr.w	r2, [lr]
 800d65c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d664:	b29b      	uxth	r3, r3
 800d666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d66a:	4581      	cmp	r9, r0
 800d66c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d670:	f84e 3b04 	str.w	r3, [lr], #4
 800d674:	d2db      	bcs.n	800d62e <quorem+0x42>
 800d676:	f856 300c 	ldr.w	r3, [r6, ip]
 800d67a:	b933      	cbnz	r3, 800d68a <quorem+0x9e>
 800d67c:	9b01      	ldr	r3, [sp, #4]
 800d67e:	3b04      	subs	r3, #4
 800d680:	429e      	cmp	r6, r3
 800d682:	461a      	mov	r2, r3
 800d684:	d330      	bcc.n	800d6e8 <quorem+0xfc>
 800d686:	f8c8 4010 	str.w	r4, [r8, #16]
 800d68a:	4640      	mov	r0, r8
 800d68c:	f001 fc66 	bl	800ef5c <__mcmp>
 800d690:	2800      	cmp	r0, #0
 800d692:	db25      	blt.n	800d6e0 <quorem+0xf4>
 800d694:	3501      	adds	r5, #1
 800d696:	4630      	mov	r0, r6
 800d698:	f04f 0c00 	mov.w	ip, #0
 800d69c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d6a0:	f8d0 e000 	ldr.w	lr, [r0]
 800d6a4:	b293      	uxth	r3, r2
 800d6a6:	ebac 0303 	sub.w	r3, ip, r3
 800d6aa:	0c12      	lsrs	r2, r2, #16
 800d6ac:	fa13 f38e 	uxtah	r3, r3, lr
 800d6b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6be:	45b9      	cmp	r9, r7
 800d6c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6c4:	f840 3b04 	str.w	r3, [r0], #4
 800d6c8:	d2e8      	bcs.n	800d69c <quorem+0xb0>
 800d6ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d6ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d6d2:	b92a      	cbnz	r2, 800d6e0 <quorem+0xf4>
 800d6d4:	3b04      	subs	r3, #4
 800d6d6:	429e      	cmp	r6, r3
 800d6d8:	461a      	mov	r2, r3
 800d6da:	d30b      	bcc.n	800d6f4 <quorem+0x108>
 800d6dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	b003      	add	sp, #12
 800d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e8:	6812      	ldr	r2, [r2, #0]
 800d6ea:	3b04      	subs	r3, #4
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	d1ca      	bne.n	800d686 <quorem+0x9a>
 800d6f0:	3c01      	subs	r4, #1
 800d6f2:	e7c5      	b.n	800d680 <quorem+0x94>
 800d6f4:	6812      	ldr	r2, [r2, #0]
 800d6f6:	3b04      	subs	r3, #4
 800d6f8:	2a00      	cmp	r2, #0
 800d6fa:	d1ef      	bne.n	800d6dc <quorem+0xf0>
 800d6fc:	3c01      	subs	r4, #1
 800d6fe:	e7ea      	b.n	800d6d6 <quorem+0xea>
 800d700:	2000      	movs	r0, #0
 800d702:	e7ee      	b.n	800d6e2 <quorem+0xf6>
 800d704:	0000      	movs	r0, r0
	...

0800d708 <_dtoa_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	ec57 6b10 	vmov	r6, r7, d0
 800d710:	b097      	sub	sp, #92	; 0x5c
 800d712:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d714:	9106      	str	r1, [sp, #24]
 800d716:	4604      	mov	r4, r0
 800d718:	920b      	str	r2, [sp, #44]	; 0x2c
 800d71a:	9312      	str	r3, [sp, #72]	; 0x48
 800d71c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d720:	e9cd 6700 	strd	r6, r7, [sp]
 800d724:	b93d      	cbnz	r5, 800d736 <_dtoa_r+0x2e>
 800d726:	2010      	movs	r0, #16
 800d728:	f001 f9aa 	bl	800ea80 <malloc>
 800d72c:	6260      	str	r0, [r4, #36]	; 0x24
 800d72e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d732:	6005      	str	r5, [r0, #0]
 800d734:	60c5      	str	r5, [r0, #12]
 800d736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	b151      	cbz	r1, 800d752 <_dtoa_r+0x4a>
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	604a      	str	r2, [r1, #4]
 800d740:	2301      	movs	r3, #1
 800d742:	4093      	lsls	r3, r2
 800d744:	608b      	str	r3, [r1, #8]
 800d746:	4620      	mov	r0, r4
 800d748:	f001 f9e8 	bl	800eb1c <_Bfree>
 800d74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d74e:	2200      	movs	r2, #0
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	1e3b      	subs	r3, r7, #0
 800d754:	bfbb      	ittet	lt
 800d756:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d75a:	9301      	strlt	r3, [sp, #4]
 800d75c:	2300      	movge	r3, #0
 800d75e:	2201      	movlt	r2, #1
 800d760:	bfac      	ite	ge
 800d762:	f8c8 3000 	strge.w	r3, [r8]
 800d766:	f8c8 2000 	strlt.w	r2, [r8]
 800d76a:	4baf      	ldr	r3, [pc, #700]	; (800da28 <_dtoa_r+0x320>)
 800d76c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d770:	ea33 0308 	bics.w	r3, r3, r8
 800d774:	d114      	bne.n	800d7a0 <_dtoa_r+0x98>
 800d776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d778:	f242 730f 	movw	r3, #9999	; 0x270f
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	9b00      	ldr	r3, [sp, #0]
 800d780:	b923      	cbnz	r3, 800d78c <_dtoa_r+0x84>
 800d782:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d786:	2800      	cmp	r0, #0
 800d788:	f000 8542 	beq.w	800e210 <_dtoa_r+0xb08>
 800d78c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d78e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800da3c <_dtoa_r+0x334>
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 8544 	beq.w	800e220 <_dtoa_r+0xb18>
 800d798:	f10b 0303 	add.w	r3, fp, #3
 800d79c:	f000 bd3e 	b.w	800e21c <_dtoa_r+0xb14>
 800d7a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	4639      	mov	r1, r7
 800d7ac:	f7f3 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7b0:	4681      	mov	r9, r0
 800d7b2:	b168      	cbz	r0, 800d7d0 <_dtoa_r+0xc8>
 800d7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 8524 	beq.w	800e20a <_dtoa_r+0xb02>
 800d7c2:	4b9a      	ldr	r3, [pc, #616]	; (800da2c <_dtoa_r+0x324>)
 800d7c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7c6:	f103 3bff 	add.w	fp, r3, #4294967295
 800d7ca:	6013      	str	r3, [r2, #0]
 800d7cc:	f000 bd28 	b.w	800e220 <_dtoa_r+0xb18>
 800d7d0:	aa14      	add	r2, sp, #80	; 0x50
 800d7d2:	a915      	add	r1, sp, #84	; 0x54
 800d7d4:	ec47 6b10 	vmov	d0, r6, r7
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 fcad 	bl	800f138 <__d2b>
 800d7de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d7e2:	9004      	str	r0, [sp, #16]
 800d7e4:	2d00      	cmp	r5, #0
 800d7e6:	d07c      	beq.n	800d8e2 <_dtoa_r+0x1da>
 800d7e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d7f0:	46b2      	mov	sl, r6
 800d7f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d7f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d7fe:	2200      	movs	r2, #0
 800d800:	4b8b      	ldr	r3, [pc, #556]	; (800da30 <_dtoa_r+0x328>)
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fd47 	bl	8000298 <__aeabi_dsub>
 800d80a:	a381      	add	r3, pc, #516	; (adr r3, 800da10 <_dtoa_r+0x308>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	f7f2 fefa 	bl	8000608 <__aeabi_dmul>
 800d814:	a380      	add	r3, pc, #512	; (adr r3, 800da18 <_dtoa_r+0x310>)
 800d816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81a:	f7f2 fd3f 	bl	800029c <__adddf3>
 800d81e:	4606      	mov	r6, r0
 800d820:	4628      	mov	r0, r5
 800d822:	460f      	mov	r7, r1
 800d824:	f7f2 fe86 	bl	8000534 <__aeabi_i2d>
 800d828:	a37d      	add	r3, pc, #500	; (adr r3, 800da20 <_dtoa_r+0x318>)
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	f7f2 feeb 	bl	8000608 <__aeabi_dmul>
 800d832:	4602      	mov	r2, r0
 800d834:	460b      	mov	r3, r1
 800d836:	4630      	mov	r0, r6
 800d838:	4639      	mov	r1, r7
 800d83a:	f7f2 fd2f 	bl	800029c <__adddf3>
 800d83e:	4606      	mov	r6, r0
 800d840:	460f      	mov	r7, r1
 800d842:	f7f3 f991 	bl	8000b68 <__aeabi_d2iz>
 800d846:	2200      	movs	r2, #0
 800d848:	4682      	mov	sl, r0
 800d84a:	2300      	movs	r3, #0
 800d84c:	4630      	mov	r0, r6
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f3 f94c 	bl	8000aec <__aeabi_dcmplt>
 800d854:	b148      	cbz	r0, 800d86a <_dtoa_r+0x162>
 800d856:	4650      	mov	r0, sl
 800d858:	f7f2 fe6c 	bl	8000534 <__aeabi_i2d>
 800d85c:	4632      	mov	r2, r6
 800d85e:	463b      	mov	r3, r7
 800d860:	f7f3 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d864:	b908      	cbnz	r0, 800d86a <_dtoa_r+0x162>
 800d866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d86a:	f1ba 0f16 	cmp.w	sl, #22
 800d86e:	d859      	bhi.n	800d924 <_dtoa_r+0x21c>
 800d870:	4970      	ldr	r1, [pc, #448]	; (800da34 <_dtoa_r+0x32c>)
 800d872:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d87e:	f7f3 f953 	bl	8000b28 <__aeabi_dcmpgt>
 800d882:	2800      	cmp	r0, #0
 800d884:	d050      	beq.n	800d928 <_dtoa_r+0x220>
 800d886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d88a:	2300      	movs	r3, #0
 800d88c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d88e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d890:	1b5d      	subs	r5, r3, r5
 800d892:	f1b5 0801 	subs.w	r8, r5, #1
 800d896:	bf49      	itett	mi
 800d898:	f1c5 0301 	rsbmi	r3, r5, #1
 800d89c:	2300      	movpl	r3, #0
 800d89e:	9305      	strmi	r3, [sp, #20]
 800d8a0:	f04f 0800 	movmi.w	r8, #0
 800d8a4:	bf58      	it	pl
 800d8a6:	9305      	strpl	r3, [sp, #20]
 800d8a8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ac:	db3e      	blt.n	800d92c <_dtoa_r+0x224>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	44d0      	add	r8, sl
 800d8b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d8b6:	9307      	str	r3, [sp, #28]
 800d8b8:	9b06      	ldr	r3, [sp, #24]
 800d8ba:	2b09      	cmp	r3, #9
 800d8bc:	f200 8090 	bhi.w	800d9e0 <_dtoa_r+0x2d8>
 800d8c0:	2b05      	cmp	r3, #5
 800d8c2:	bfc4      	itt	gt
 800d8c4:	3b04      	subgt	r3, #4
 800d8c6:	9306      	strgt	r3, [sp, #24]
 800d8c8:	9b06      	ldr	r3, [sp, #24]
 800d8ca:	f1a3 0302 	sub.w	r3, r3, #2
 800d8ce:	bfcc      	ite	gt
 800d8d0:	2500      	movgt	r5, #0
 800d8d2:	2501      	movle	r5, #1
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	f200 808f 	bhi.w	800d9f8 <_dtoa_r+0x2f0>
 800d8da:	e8df f003 	tbb	[pc, r3]
 800d8de:	7f7d      	.short	0x7f7d
 800d8e0:	7131      	.short	0x7131
 800d8e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d8e6:	441d      	add	r5, r3
 800d8e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d8ec:	2820      	cmp	r0, #32
 800d8ee:	dd13      	ble.n	800d918 <_dtoa_r+0x210>
 800d8f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	fa08 f800 	lsl.w	r8, r8, r0
 800d8fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d8fe:	fa23 f000 	lsr.w	r0, r3, r0
 800d902:	ea48 0000 	orr.w	r0, r8, r0
 800d906:	f7f2 fe05 	bl	8000514 <__aeabi_ui2d>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4682      	mov	sl, r0
 800d90e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d912:	3d01      	subs	r5, #1
 800d914:	9313      	str	r3, [sp, #76]	; 0x4c
 800d916:	e772      	b.n	800d7fe <_dtoa_r+0xf6>
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	f1c0 0020 	rsb	r0, r0, #32
 800d91e:	fa03 f000 	lsl.w	r0, r3, r0
 800d922:	e7f0      	b.n	800d906 <_dtoa_r+0x1fe>
 800d924:	2301      	movs	r3, #1
 800d926:	e7b1      	b.n	800d88c <_dtoa_r+0x184>
 800d928:	900f      	str	r0, [sp, #60]	; 0x3c
 800d92a:	e7b0      	b.n	800d88e <_dtoa_r+0x186>
 800d92c:	9b05      	ldr	r3, [sp, #20]
 800d92e:	eba3 030a 	sub.w	r3, r3, sl
 800d932:	9305      	str	r3, [sp, #20]
 800d934:	f1ca 0300 	rsb	r3, sl, #0
 800d938:	9307      	str	r3, [sp, #28]
 800d93a:	2300      	movs	r3, #0
 800d93c:	930e      	str	r3, [sp, #56]	; 0x38
 800d93e:	e7bb      	b.n	800d8b8 <_dtoa_r+0x1b0>
 800d940:	2301      	movs	r3, #1
 800d942:	930a      	str	r3, [sp, #40]	; 0x28
 800d944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d946:	2b00      	cmp	r3, #0
 800d948:	dd59      	ble.n	800d9fe <_dtoa_r+0x2f6>
 800d94a:	9302      	str	r3, [sp, #8]
 800d94c:	4699      	mov	r9, r3
 800d94e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d950:	2200      	movs	r2, #0
 800d952:	6072      	str	r2, [r6, #4]
 800d954:	2204      	movs	r2, #4
 800d956:	f102 0014 	add.w	r0, r2, #20
 800d95a:	4298      	cmp	r0, r3
 800d95c:	6871      	ldr	r1, [r6, #4]
 800d95e:	d953      	bls.n	800da08 <_dtoa_r+0x300>
 800d960:	4620      	mov	r0, r4
 800d962:	f001 f8a7 	bl	800eab4 <_Balloc>
 800d966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d968:	6030      	str	r0, [r6, #0]
 800d96a:	f1b9 0f0e 	cmp.w	r9, #14
 800d96e:	f8d3 b000 	ldr.w	fp, [r3]
 800d972:	f200 80e6 	bhi.w	800db42 <_dtoa_r+0x43a>
 800d976:	2d00      	cmp	r5, #0
 800d978:	f000 80e3 	beq.w	800db42 <_dtoa_r+0x43a>
 800d97c:	ed9d 7b00 	vldr	d7, [sp]
 800d980:	f1ba 0f00 	cmp.w	sl, #0
 800d984:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d988:	dd74      	ble.n	800da74 <_dtoa_r+0x36c>
 800d98a:	4a2a      	ldr	r2, [pc, #168]	; (800da34 <_dtoa_r+0x32c>)
 800d98c:	f00a 030f 	and.w	r3, sl, #15
 800d990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d994:	ed93 7b00 	vldr	d7, [r3]
 800d998:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d99c:	06f0      	lsls	r0, r6, #27
 800d99e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d9a2:	d565      	bpl.n	800da70 <_dtoa_r+0x368>
 800d9a4:	4b24      	ldr	r3, [pc, #144]	; (800da38 <_dtoa_r+0x330>)
 800d9a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d9aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9ae:	f7f2 ff55 	bl	800085c <__aeabi_ddiv>
 800d9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800d9b6:	f006 060f 	and.w	r6, r6, #15
 800d9ba:	2503      	movs	r5, #3
 800d9bc:	4f1e      	ldr	r7, [pc, #120]	; (800da38 <_dtoa_r+0x330>)
 800d9be:	e04c      	b.n	800da5a <_dtoa_r+0x352>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9c6:	4453      	add	r3, sl
 800d9c8:	f103 0901 	add.w	r9, r3, #1
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	464b      	mov	r3, r9
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	bfb8      	it	lt
 800d9d4:	2301      	movlt	r3, #1
 800d9d6:	e7ba      	b.n	800d94e <_dtoa_r+0x246>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e7b2      	b.n	800d942 <_dtoa_r+0x23a>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e7f0      	b.n	800d9c2 <_dtoa_r+0x2ba>
 800d9e0:	2501      	movs	r5, #1
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	9306      	str	r3, [sp, #24]
 800d9e6:	950a      	str	r5, [sp, #40]	; 0x28
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	4699      	mov	r9, r3
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2312      	movs	r3, #18
 800d9f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9f6:	e7aa      	b.n	800d94e <_dtoa_r+0x246>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d9fc:	e7f4      	b.n	800d9e8 <_dtoa_r+0x2e0>
 800d9fe:	2301      	movs	r3, #1
 800da00:	9302      	str	r3, [sp, #8]
 800da02:	4699      	mov	r9, r3
 800da04:	461a      	mov	r2, r3
 800da06:	e7f5      	b.n	800d9f4 <_dtoa_r+0x2ec>
 800da08:	3101      	adds	r1, #1
 800da0a:	6071      	str	r1, [r6, #4]
 800da0c:	0052      	lsls	r2, r2, #1
 800da0e:	e7a2      	b.n	800d956 <_dtoa_r+0x24e>
 800da10:	636f4361 	.word	0x636f4361
 800da14:	3fd287a7 	.word	0x3fd287a7
 800da18:	8b60c8b3 	.word	0x8b60c8b3
 800da1c:	3fc68a28 	.word	0x3fc68a28
 800da20:	509f79fb 	.word	0x509f79fb
 800da24:	3fd34413 	.word	0x3fd34413
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	08010729 	.word	0x08010729
 800da30:	3ff80000 	.word	0x3ff80000
 800da34:	08010850 	.word	0x08010850
 800da38:	08010828 	.word	0x08010828
 800da3c:	080107b1 	.word	0x080107b1
 800da40:	07f1      	lsls	r1, r6, #31
 800da42:	d508      	bpl.n	800da56 <_dtoa_r+0x34e>
 800da44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da4c:	f7f2 fddc 	bl	8000608 <__aeabi_dmul>
 800da50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da54:	3501      	adds	r5, #1
 800da56:	1076      	asrs	r6, r6, #1
 800da58:	3708      	adds	r7, #8
 800da5a:	2e00      	cmp	r6, #0
 800da5c:	d1f0      	bne.n	800da40 <_dtoa_r+0x338>
 800da5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da66:	f7f2 fef9 	bl	800085c <__aeabi_ddiv>
 800da6a:	e9cd 0100 	strd	r0, r1, [sp]
 800da6e:	e01a      	b.n	800daa6 <_dtoa_r+0x39e>
 800da70:	2502      	movs	r5, #2
 800da72:	e7a3      	b.n	800d9bc <_dtoa_r+0x2b4>
 800da74:	f000 80a0 	beq.w	800dbb8 <_dtoa_r+0x4b0>
 800da78:	f1ca 0600 	rsb	r6, sl, #0
 800da7c:	4b9f      	ldr	r3, [pc, #636]	; (800dcfc <_dtoa_r+0x5f4>)
 800da7e:	4fa0      	ldr	r7, [pc, #640]	; (800dd00 <_dtoa_r+0x5f8>)
 800da80:	f006 020f 	and.w	r2, r6, #15
 800da84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da90:	f7f2 fdba 	bl	8000608 <__aeabi_dmul>
 800da94:	e9cd 0100 	strd	r0, r1, [sp]
 800da98:	1136      	asrs	r6, r6, #4
 800da9a:	2300      	movs	r3, #0
 800da9c:	2502      	movs	r5, #2
 800da9e:	2e00      	cmp	r6, #0
 800daa0:	d17f      	bne.n	800dba2 <_dtoa_r+0x49a>
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1e1      	bne.n	800da6a <_dtoa_r+0x362>
 800daa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 8087 	beq.w	800dbbc <_dtoa_r+0x4b4>
 800daae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dab2:	2200      	movs	r2, #0
 800dab4:	4b93      	ldr	r3, [pc, #588]	; (800dd04 <_dtoa_r+0x5fc>)
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f3 f817 	bl	8000aec <__aeabi_dcmplt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d07c      	beq.n	800dbbc <_dtoa_r+0x4b4>
 800dac2:	f1b9 0f00 	cmp.w	r9, #0
 800dac6:	d079      	beq.n	800dbbc <_dtoa_r+0x4b4>
 800dac8:	9b02      	ldr	r3, [sp, #8]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd35      	ble.n	800db3a <_dtoa_r+0x432>
 800dace:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dad2:	9308      	str	r3, [sp, #32]
 800dad4:	4639      	mov	r1, r7
 800dad6:	2200      	movs	r2, #0
 800dad8:	4b8b      	ldr	r3, [pc, #556]	; (800dd08 <_dtoa_r+0x600>)
 800dada:	4630      	mov	r0, r6
 800dadc:	f7f2 fd94 	bl	8000608 <__aeabi_dmul>
 800dae0:	e9cd 0100 	strd	r0, r1, [sp]
 800dae4:	9f02      	ldr	r7, [sp, #8]
 800dae6:	3501      	adds	r5, #1
 800dae8:	4628      	mov	r0, r5
 800daea:	f7f2 fd23 	bl	8000534 <__aeabi_i2d>
 800daee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daf2:	f7f2 fd89 	bl	8000608 <__aeabi_dmul>
 800daf6:	2200      	movs	r2, #0
 800daf8:	4b84      	ldr	r3, [pc, #528]	; (800dd0c <_dtoa_r+0x604>)
 800dafa:	f7f2 fbcf 	bl	800029c <__adddf3>
 800dafe:	4605      	mov	r5, r0
 800db00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800db04:	2f00      	cmp	r7, #0
 800db06:	d15d      	bne.n	800dbc4 <_dtoa_r+0x4bc>
 800db08:	2200      	movs	r2, #0
 800db0a:	4b81      	ldr	r3, [pc, #516]	; (800dd10 <_dtoa_r+0x608>)
 800db0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db10:	f7f2 fbc2 	bl	8000298 <__aeabi_dsub>
 800db14:	462a      	mov	r2, r5
 800db16:	4633      	mov	r3, r6
 800db18:	e9cd 0100 	strd	r0, r1, [sp]
 800db1c:	f7f3 f804 	bl	8000b28 <__aeabi_dcmpgt>
 800db20:	2800      	cmp	r0, #0
 800db22:	f040 8288 	bne.w	800e036 <_dtoa_r+0x92e>
 800db26:	462a      	mov	r2, r5
 800db28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800db2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db30:	f7f2 ffdc 	bl	8000aec <__aeabi_dcmplt>
 800db34:	2800      	cmp	r0, #0
 800db36:	f040 827c 	bne.w	800e032 <_dtoa_r+0x92a>
 800db3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db3e:	e9cd 2300 	strd	r2, r3, [sp]
 800db42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db44:	2b00      	cmp	r3, #0
 800db46:	f2c0 8150 	blt.w	800ddea <_dtoa_r+0x6e2>
 800db4a:	f1ba 0f0e 	cmp.w	sl, #14
 800db4e:	f300 814c 	bgt.w	800ddea <_dtoa_r+0x6e2>
 800db52:	4b6a      	ldr	r3, [pc, #424]	; (800dcfc <_dtoa_r+0x5f4>)
 800db54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db58:	ed93 7b00 	vldr	d7, [r3]
 800db5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db5e:	2b00      	cmp	r3, #0
 800db60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db64:	f280 80d8 	bge.w	800dd18 <_dtoa_r+0x610>
 800db68:	f1b9 0f00 	cmp.w	r9, #0
 800db6c:	f300 80d4 	bgt.w	800dd18 <_dtoa_r+0x610>
 800db70:	f040 825e 	bne.w	800e030 <_dtoa_r+0x928>
 800db74:	2200      	movs	r2, #0
 800db76:	4b66      	ldr	r3, [pc, #408]	; (800dd10 <_dtoa_r+0x608>)
 800db78:	ec51 0b17 	vmov	r0, r1, d7
 800db7c:	f7f2 fd44 	bl	8000608 <__aeabi_dmul>
 800db80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db84:	f7f2 ffc6 	bl	8000b14 <__aeabi_dcmpge>
 800db88:	464f      	mov	r7, r9
 800db8a:	464e      	mov	r6, r9
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f040 8234 	bne.w	800dffa <_dtoa_r+0x8f2>
 800db92:	2331      	movs	r3, #49	; 0x31
 800db94:	f10b 0501 	add.w	r5, fp, #1
 800db98:	f88b 3000 	strb.w	r3, [fp]
 800db9c:	f10a 0a01 	add.w	sl, sl, #1
 800dba0:	e22f      	b.n	800e002 <_dtoa_r+0x8fa>
 800dba2:	07f2      	lsls	r2, r6, #31
 800dba4:	d505      	bpl.n	800dbb2 <_dtoa_r+0x4aa>
 800dba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbaa:	f7f2 fd2d 	bl	8000608 <__aeabi_dmul>
 800dbae:	3501      	adds	r5, #1
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	1076      	asrs	r6, r6, #1
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	e772      	b.n	800da9e <_dtoa_r+0x396>
 800dbb8:	2502      	movs	r5, #2
 800dbba:	e774      	b.n	800daa6 <_dtoa_r+0x39e>
 800dbbc:	f8cd a020 	str.w	sl, [sp, #32]
 800dbc0:	464f      	mov	r7, r9
 800dbc2:	e791      	b.n	800dae8 <_dtoa_r+0x3e0>
 800dbc4:	4b4d      	ldr	r3, [pc, #308]	; (800dcfc <_dtoa_r+0x5f4>)
 800dbc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dbca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d047      	beq.n	800dc64 <_dtoa_r+0x55c>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	2000      	movs	r0, #0
 800dbda:	494e      	ldr	r1, [pc, #312]	; (800dd14 <_dtoa_r+0x60c>)
 800dbdc:	f7f2 fe3e 	bl	800085c <__aeabi_ddiv>
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	4633      	mov	r3, r6
 800dbe4:	f7f2 fb58 	bl	8000298 <__aeabi_dsub>
 800dbe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dbec:	465d      	mov	r5, fp
 800dbee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbf2:	f7f2 ffb9 	bl	8000b68 <__aeabi_d2iz>
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	f7f2 fc9c 	bl	8000534 <__aeabi_i2d>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc04:	f7f2 fb48 	bl	8000298 <__aeabi_dsub>
 800dc08:	3630      	adds	r6, #48	; 0x30
 800dc0a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc12:	e9cd 0100 	strd	r0, r1, [sp]
 800dc16:	f7f2 ff69 	bl	8000aec <__aeabi_dcmplt>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d163      	bne.n	800dce6 <_dtoa_r+0x5de>
 800dc1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc22:	2000      	movs	r0, #0
 800dc24:	4937      	ldr	r1, [pc, #220]	; (800dd04 <_dtoa_r+0x5fc>)
 800dc26:	f7f2 fb37 	bl	8000298 <__aeabi_dsub>
 800dc2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc2e:	f7f2 ff5d 	bl	8000aec <__aeabi_dcmplt>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f040 80b7 	bne.w	800dda6 <_dtoa_r+0x69e>
 800dc38:	eba5 030b 	sub.w	r3, r5, fp
 800dc3c:	429f      	cmp	r7, r3
 800dc3e:	f77f af7c 	ble.w	800db3a <_dtoa_r+0x432>
 800dc42:	2200      	movs	r2, #0
 800dc44:	4b30      	ldr	r3, [pc, #192]	; (800dd08 <_dtoa_r+0x600>)
 800dc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc4a:	f7f2 fcdd 	bl	8000608 <__aeabi_dmul>
 800dc4e:	2200      	movs	r2, #0
 800dc50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc54:	4b2c      	ldr	r3, [pc, #176]	; (800dd08 <_dtoa_r+0x600>)
 800dc56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc5a:	f7f2 fcd5 	bl	8000608 <__aeabi_dmul>
 800dc5e:	e9cd 0100 	strd	r0, r1, [sp]
 800dc62:	e7c4      	b.n	800dbee <_dtoa_r+0x4e6>
 800dc64:	462a      	mov	r2, r5
 800dc66:	4633      	mov	r3, r6
 800dc68:	f7f2 fcce 	bl	8000608 <__aeabi_dmul>
 800dc6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc70:	eb0b 0507 	add.w	r5, fp, r7
 800dc74:	465e      	mov	r6, fp
 800dc76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc7a:	f7f2 ff75 	bl	8000b68 <__aeabi_d2iz>
 800dc7e:	4607      	mov	r7, r0
 800dc80:	f7f2 fc58 	bl	8000534 <__aeabi_i2d>
 800dc84:	3730      	adds	r7, #48	; 0x30
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc8e:	f7f2 fb03 	bl	8000298 <__aeabi_dsub>
 800dc92:	f806 7b01 	strb.w	r7, [r6], #1
 800dc96:	42ae      	cmp	r6, r5
 800dc98:	e9cd 0100 	strd	r0, r1, [sp]
 800dc9c:	f04f 0200 	mov.w	r2, #0
 800dca0:	d126      	bne.n	800dcf0 <_dtoa_r+0x5e8>
 800dca2:	4b1c      	ldr	r3, [pc, #112]	; (800dd14 <_dtoa_r+0x60c>)
 800dca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dca8:	f7f2 faf8 	bl	800029c <__adddf3>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcb4:	f7f2 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d174      	bne.n	800dda6 <_dtoa_r+0x69e>
 800dcbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	4914      	ldr	r1, [pc, #80]	; (800dd14 <_dtoa_r+0x60c>)
 800dcc4:	f7f2 fae8 	bl	8000298 <__aeabi_dsub>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcd0:	f7f2 ff0c 	bl	8000aec <__aeabi_dcmplt>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f af30 	beq.w	800db3a <_dtoa_r+0x432>
 800dcda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcde:	2b30      	cmp	r3, #48	; 0x30
 800dce0:	f105 32ff 	add.w	r2, r5, #4294967295
 800dce4:	d002      	beq.n	800dcec <_dtoa_r+0x5e4>
 800dce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dcea:	e04a      	b.n	800dd82 <_dtoa_r+0x67a>
 800dcec:	4615      	mov	r5, r2
 800dcee:	e7f4      	b.n	800dcda <_dtoa_r+0x5d2>
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <_dtoa_r+0x600>)
 800dcf2:	f7f2 fc89 	bl	8000608 <__aeabi_dmul>
 800dcf6:	e9cd 0100 	strd	r0, r1, [sp]
 800dcfa:	e7bc      	b.n	800dc76 <_dtoa_r+0x56e>
 800dcfc:	08010850 	.word	0x08010850
 800dd00:	08010828 	.word	0x08010828
 800dd04:	3ff00000 	.word	0x3ff00000
 800dd08:	40240000 	.word	0x40240000
 800dd0c:	401c0000 	.word	0x401c0000
 800dd10:	40140000 	.word	0x40140000
 800dd14:	3fe00000 	.word	0x3fe00000
 800dd18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd1c:	465d      	mov	r5, fp
 800dd1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd22:	4630      	mov	r0, r6
 800dd24:	4639      	mov	r1, r7
 800dd26:	f7f2 fd99 	bl	800085c <__aeabi_ddiv>
 800dd2a:	f7f2 ff1d 	bl	8000b68 <__aeabi_d2iz>
 800dd2e:	4680      	mov	r8, r0
 800dd30:	f7f2 fc00 	bl	8000534 <__aeabi_i2d>
 800dd34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd38:	f7f2 fc66 	bl	8000608 <__aeabi_dmul>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4630      	mov	r0, r6
 800dd42:	4639      	mov	r1, r7
 800dd44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800dd48:	f7f2 faa6 	bl	8000298 <__aeabi_dsub>
 800dd4c:	f805 6b01 	strb.w	r6, [r5], #1
 800dd50:	eba5 060b 	sub.w	r6, r5, fp
 800dd54:	45b1      	cmp	r9, r6
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	d139      	bne.n	800ddd0 <_dtoa_r+0x6c8>
 800dd5c:	f7f2 fa9e 	bl	800029c <__adddf3>
 800dd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd64:	4606      	mov	r6, r0
 800dd66:	460f      	mov	r7, r1
 800dd68:	f7f2 fede 	bl	8000b28 <__aeabi_dcmpgt>
 800dd6c:	b9c8      	cbnz	r0, 800dda2 <_dtoa_r+0x69a>
 800dd6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd72:	4630      	mov	r0, r6
 800dd74:	4639      	mov	r1, r7
 800dd76:	f7f2 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd7a:	b110      	cbz	r0, 800dd82 <_dtoa_r+0x67a>
 800dd7c:	f018 0f01 	tst.w	r8, #1
 800dd80:	d10f      	bne.n	800dda2 <_dtoa_r+0x69a>
 800dd82:	9904      	ldr	r1, [sp, #16]
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 fec9 	bl	800eb1c <_Bfree>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd8e:	702b      	strb	r3, [r5, #0]
 800dd90:	f10a 0301 	add.w	r3, sl, #1
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 8241 	beq.w	800e220 <_dtoa_r+0xb18>
 800dd9e:	601d      	str	r5, [r3, #0]
 800dda0:	e23e      	b.n	800e220 <_dtoa_r+0xb18>
 800dda2:	f8cd a020 	str.w	sl, [sp, #32]
 800dda6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ddaa:	2a39      	cmp	r2, #57	; 0x39
 800ddac:	f105 33ff 	add.w	r3, r5, #4294967295
 800ddb0:	d108      	bne.n	800ddc4 <_dtoa_r+0x6bc>
 800ddb2:	459b      	cmp	fp, r3
 800ddb4:	d10a      	bne.n	800ddcc <_dtoa_r+0x6c4>
 800ddb6:	9b08      	ldr	r3, [sp, #32]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	9308      	str	r3, [sp, #32]
 800ddbc:	2330      	movs	r3, #48	; 0x30
 800ddbe:	f88b 3000 	strb.w	r3, [fp]
 800ddc2:	465b      	mov	r3, fp
 800ddc4:	781a      	ldrb	r2, [r3, #0]
 800ddc6:	3201      	adds	r2, #1
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	e78c      	b.n	800dce6 <_dtoa_r+0x5de>
 800ddcc:	461d      	mov	r5, r3
 800ddce:	e7ea      	b.n	800dda6 <_dtoa_r+0x69e>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	4b9b      	ldr	r3, [pc, #620]	; (800e040 <_dtoa_r+0x938>)
 800ddd4:	f7f2 fc18 	bl	8000608 <__aeabi_dmul>
 800ddd8:	2200      	movs	r2, #0
 800ddda:	2300      	movs	r3, #0
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	f7f2 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d09a      	beq.n	800dd1e <_dtoa_r+0x616>
 800dde8:	e7cb      	b.n	800dd82 <_dtoa_r+0x67a>
 800ddea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddec:	2a00      	cmp	r2, #0
 800ddee:	f000 808b 	beq.w	800df08 <_dtoa_r+0x800>
 800ddf2:	9a06      	ldr	r2, [sp, #24]
 800ddf4:	2a01      	cmp	r2, #1
 800ddf6:	dc6e      	bgt.n	800ded6 <_dtoa_r+0x7ce>
 800ddf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	d067      	beq.n	800dece <_dtoa_r+0x7c6>
 800ddfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de02:	9f07      	ldr	r7, [sp, #28]
 800de04:	9d05      	ldr	r5, [sp, #20]
 800de06:	9a05      	ldr	r2, [sp, #20]
 800de08:	2101      	movs	r1, #1
 800de0a:	441a      	add	r2, r3
 800de0c:	4620      	mov	r0, r4
 800de0e:	9205      	str	r2, [sp, #20]
 800de10:	4498      	add	r8, r3
 800de12:	f000 ff61 	bl	800ecd8 <__i2b>
 800de16:	4606      	mov	r6, r0
 800de18:	2d00      	cmp	r5, #0
 800de1a:	dd0c      	ble.n	800de36 <_dtoa_r+0x72e>
 800de1c:	f1b8 0f00 	cmp.w	r8, #0
 800de20:	dd09      	ble.n	800de36 <_dtoa_r+0x72e>
 800de22:	4545      	cmp	r5, r8
 800de24:	9a05      	ldr	r2, [sp, #20]
 800de26:	462b      	mov	r3, r5
 800de28:	bfa8      	it	ge
 800de2a:	4643      	movge	r3, r8
 800de2c:	1ad2      	subs	r2, r2, r3
 800de2e:	9205      	str	r2, [sp, #20]
 800de30:	1aed      	subs	r5, r5, r3
 800de32:	eba8 0803 	sub.w	r8, r8, r3
 800de36:	9b07      	ldr	r3, [sp, #28]
 800de38:	b1eb      	cbz	r3, 800de76 <_dtoa_r+0x76e>
 800de3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d067      	beq.n	800df10 <_dtoa_r+0x808>
 800de40:	b18f      	cbz	r7, 800de66 <_dtoa_r+0x75e>
 800de42:	4631      	mov	r1, r6
 800de44:	463a      	mov	r2, r7
 800de46:	4620      	mov	r0, r4
 800de48:	f000 ffe6 	bl	800ee18 <__pow5mult>
 800de4c:	9a04      	ldr	r2, [sp, #16]
 800de4e:	4601      	mov	r1, r0
 800de50:	4606      	mov	r6, r0
 800de52:	4620      	mov	r0, r4
 800de54:	f000 ff49 	bl	800ecea <__multiply>
 800de58:	9904      	ldr	r1, [sp, #16]
 800de5a:	9008      	str	r0, [sp, #32]
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fe5d 	bl	800eb1c <_Bfree>
 800de62:	9b08      	ldr	r3, [sp, #32]
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	9b07      	ldr	r3, [sp, #28]
 800de68:	1bda      	subs	r2, r3, r7
 800de6a:	d004      	beq.n	800de76 <_dtoa_r+0x76e>
 800de6c:	9904      	ldr	r1, [sp, #16]
 800de6e:	4620      	mov	r0, r4
 800de70:	f000 ffd2 	bl	800ee18 <__pow5mult>
 800de74:	9004      	str	r0, [sp, #16]
 800de76:	2101      	movs	r1, #1
 800de78:	4620      	mov	r0, r4
 800de7a:	f000 ff2d 	bl	800ecd8 <__i2b>
 800de7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de80:	4607      	mov	r7, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 81d0 	beq.w	800e228 <_dtoa_r+0xb20>
 800de88:	461a      	mov	r2, r3
 800de8a:	4601      	mov	r1, r0
 800de8c:	4620      	mov	r0, r4
 800de8e:	f000 ffc3 	bl	800ee18 <__pow5mult>
 800de92:	9b06      	ldr	r3, [sp, #24]
 800de94:	2b01      	cmp	r3, #1
 800de96:	4607      	mov	r7, r0
 800de98:	dc40      	bgt.n	800df1c <_dtoa_r+0x814>
 800de9a:	9b00      	ldr	r3, [sp, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d139      	bne.n	800df14 <_dtoa_r+0x80c>
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d136      	bne.n	800df18 <_dtoa_r+0x810>
 800deaa:	9b01      	ldr	r3, [sp, #4]
 800deac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800deb0:	0d1b      	lsrs	r3, r3, #20
 800deb2:	051b      	lsls	r3, r3, #20
 800deb4:	b12b      	cbz	r3, 800dec2 <_dtoa_r+0x7ba>
 800deb6:	9b05      	ldr	r3, [sp, #20]
 800deb8:	3301      	adds	r3, #1
 800deba:	9305      	str	r3, [sp, #20]
 800debc:	f108 0801 	add.w	r8, r8, #1
 800dec0:	2301      	movs	r3, #1
 800dec2:	9307      	str	r3, [sp, #28]
 800dec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d12a      	bne.n	800df20 <_dtoa_r+0x818>
 800deca:	2001      	movs	r0, #1
 800decc:	e030      	b.n	800df30 <_dtoa_r+0x828>
 800dece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ded0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ded4:	e795      	b.n	800de02 <_dtoa_r+0x6fa>
 800ded6:	9b07      	ldr	r3, [sp, #28]
 800ded8:	f109 37ff 	add.w	r7, r9, #4294967295
 800dedc:	42bb      	cmp	r3, r7
 800dede:	bfbf      	itttt	lt
 800dee0:	9b07      	ldrlt	r3, [sp, #28]
 800dee2:	9707      	strlt	r7, [sp, #28]
 800dee4:	1afa      	sublt	r2, r7, r3
 800dee6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dee8:	bfbb      	ittet	lt
 800deea:	189b      	addlt	r3, r3, r2
 800deec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800deee:	1bdf      	subge	r7, r3, r7
 800def0:	2700      	movlt	r7, #0
 800def2:	f1b9 0f00 	cmp.w	r9, #0
 800def6:	bfb5      	itete	lt
 800def8:	9b05      	ldrlt	r3, [sp, #20]
 800defa:	9d05      	ldrge	r5, [sp, #20]
 800defc:	eba3 0509 	sublt.w	r5, r3, r9
 800df00:	464b      	movge	r3, r9
 800df02:	bfb8      	it	lt
 800df04:	2300      	movlt	r3, #0
 800df06:	e77e      	b.n	800de06 <_dtoa_r+0x6fe>
 800df08:	9f07      	ldr	r7, [sp, #28]
 800df0a:	9d05      	ldr	r5, [sp, #20]
 800df0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800df0e:	e783      	b.n	800de18 <_dtoa_r+0x710>
 800df10:	9a07      	ldr	r2, [sp, #28]
 800df12:	e7ab      	b.n	800de6c <_dtoa_r+0x764>
 800df14:	2300      	movs	r3, #0
 800df16:	e7d4      	b.n	800dec2 <_dtoa_r+0x7ba>
 800df18:	9b00      	ldr	r3, [sp, #0]
 800df1a:	e7d2      	b.n	800dec2 <_dtoa_r+0x7ba>
 800df1c:	2300      	movs	r3, #0
 800df1e:	9307      	str	r3, [sp, #28]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800df26:	6918      	ldr	r0, [r3, #16]
 800df28:	f000 fe88 	bl	800ec3c <__hi0bits>
 800df2c:	f1c0 0020 	rsb	r0, r0, #32
 800df30:	4440      	add	r0, r8
 800df32:	f010 001f 	ands.w	r0, r0, #31
 800df36:	d047      	beq.n	800dfc8 <_dtoa_r+0x8c0>
 800df38:	f1c0 0320 	rsb	r3, r0, #32
 800df3c:	2b04      	cmp	r3, #4
 800df3e:	dd3b      	ble.n	800dfb8 <_dtoa_r+0x8b0>
 800df40:	9b05      	ldr	r3, [sp, #20]
 800df42:	f1c0 001c 	rsb	r0, r0, #28
 800df46:	4403      	add	r3, r0
 800df48:	9305      	str	r3, [sp, #20]
 800df4a:	4405      	add	r5, r0
 800df4c:	4480      	add	r8, r0
 800df4e:	9b05      	ldr	r3, [sp, #20]
 800df50:	2b00      	cmp	r3, #0
 800df52:	dd05      	ble.n	800df60 <_dtoa_r+0x858>
 800df54:	461a      	mov	r2, r3
 800df56:	9904      	ldr	r1, [sp, #16]
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 ffab 	bl	800eeb4 <__lshift>
 800df5e:	9004      	str	r0, [sp, #16]
 800df60:	f1b8 0f00 	cmp.w	r8, #0
 800df64:	dd05      	ble.n	800df72 <_dtoa_r+0x86a>
 800df66:	4639      	mov	r1, r7
 800df68:	4642      	mov	r2, r8
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 ffa2 	bl	800eeb4 <__lshift>
 800df70:	4607      	mov	r7, r0
 800df72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df74:	b353      	cbz	r3, 800dfcc <_dtoa_r+0x8c4>
 800df76:	4639      	mov	r1, r7
 800df78:	9804      	ldr	r0, [sp, #16]
 800df7a:	f000 ffef 	bl	800ef5c <__mcmp>
 800df7e:	2800      	cmp	r0, #0
 800df80:	da24      	bge.n	800dfcc <_dtoa_r+0x8c4>
 800df82:	2300      	movs	r3, #0
 800df84:	220a      	movs	r2, #10
 800df86:	9904      	ldr	r1, [sp, #16]
 800df88:	4620      	mov	r0, r4
 800df8a:	f000 fdde 	bl	800eb4a <__multadd>
 800df8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df90:	9004      	str	r0, [sp, #16]
 800df92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df96:	2b00      	cmp	r3, #0
 800df98:	f000 814d 	beq.w	800e236 <_dtoa_r+0xb2e>
 800df9c:	2300      	movs	r3, #0
 800df9e:	4631      	mov	r1, r6
 800dfa0:	220a      	movs	r2, #10
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 fdd1 	bl	800eb4a <__multadd>
 800dfa8:	9b02      	ldr	r3, [sp, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	4606      	mov	r6, r0
 800dfae:	dc4f      	bgt.n	800e050 <_dtoa_r+0x948>
 800dfb0:	9b06      	ldr	r3, [sp, #24]
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	dd4c      	ble.n	800e050 <_dtoa_r+0x948>
 800dfb6:	e011      	b.n	800dfdc <_dtoa_r+0x8d4>
 800dfb8:	d0c9      	beq.n	800df4e <_dtoa_r+0x846>
 800dfba:	9a05      	ldr	r2, [sp, #20]
 800dfbc:	331c      	adds	r3, #28
 800dfbe:	441a      	add	r2, r3
 800dfc0:	9205      	str	r2, [sp, #20]
 800dfc2:	441d      	add	r5, r3
 800dfc4:	4498      	add	r8, r3
 800dfc6:	e7c2      	b.n	800df4e <_dtoa_r+0x846>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	e7f6      	b.n	800dfba <_dtoa_r+0x8b2>
 800dfcc:	f1b9 0f00 	cmp.w	r9, #0
 800dfd0:	dc38      	bgt.n	800e044 <_dtoa_r+0x93c>
 800dfd2:	9b06      	ldr	r3, [sp, #24]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	dd35      	ble.n	800e044 <_dtoa_r+0x93c>
 800dfd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	b963      	cbnz	r3, 800dffa <_dtoa_r+0x8f2>
 800dfe0:	4639      	mov	r1, r7
 800dfe2:	2205      	movs	r2, #5
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f000 fdb0 	bl	800eb4a <__multadd>
 800dfea:	4601      	mov	r1, r0
 800dfec:	4607      	mov	r7, r0
 800dfee:	9804      	ldr	r0, [sp, #16]
 800dff0:	f000 ffb4 	bl	800ef5c <__mcmp>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	f73f adcc 	bgt.w	800db92 <_dtoa_r+0x48a>
 800dffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dffc:	465d      	mov	r5, fp
 800dffe:	ea6f 0a03 	mvn.w	sl, r3
 800e002:	f04f 0900 	mov.w	r9, #0
 800e006:	4639      	mov	r1, r7
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 fd87 	bl	800eb1c <_Bfree>
 800e00e:	2e00      	cmp	r6, #0
 800e010:	f43f aeb7 	beq.w	800dd82 <_dtoa_r+0x67a>
 800e014:	f1b9 0f00 	cmp.w	r9, #0
 800e018:	d005      	beq.n	800e026 <_dtoa_r+0x91e>
 800e01a:	45b1      	cmp	r9, r6
 800e01c:	d003      	beq.n	800e026 <_dtoa_r+0x91e>
 800e01e:	4649      	mov	r1, r9
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fd7b 	bl	800eb1c <_Bfree>
 800e026:	4631      	mov	r1, r6
 800e028:	4620      	mov	r0, r4
 800e02a:	f000 fd77 	bl	800eb1c <_Bfree>
 800e02e:	e6a8      	b.n	800dd82 <_dtoa_r+0x67a>
 800e030:	2700      	movs	r7, #0
 800e032:	463e      	mov	r6, r7
 800e034:	e7e1      	b.n	800dffa <_dtoa_r+0x8f2>
 800e036:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e03a:	463e      	mov	r6, r7
 800e03c:	e5a9      	b.n	800db92 <_dtoa_r+0x48a>
 800e03e:	bf00      	nop
 800e040:	40240000 	.word	0x40240000
 800e044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e046:	f8cd 9008 	str.w	r9, [sp, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 80fa 	beq.w	800e244 <_dtoa_r+0xb3c>
 800e050:	2d00      	cmp	r5, #0
 800e052:	dd05      	ble.n	800e060 <_dtoa_r+0x958>
 800e054:	4631      	mov	r1, r6
 800e056:	462a      	mov	r2, r5
 800e058:	4620      	mov	r0, r4
 800e05a:	f000 ff2b 	bl	800eeb4 <__lshift>
 800e05e:	4606      	mov	r6, r0
 800e060:	9b07      	ldr	r3, [sp, #28]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d04c      	beq.n	800e100 <_dtoa_r+0x9f8>
 800e066:	6871      	ldr	r1, [r6, #4]
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fd23 	bl	800eab4 <_Balloc>
 800e06e:	6932      	ldr	r2, [r6, #16]
 800e070:	3202      	adds	r2, #2
 800e072:	4605      	mov	r5, r0
 800e074:	0092      	lsls	r2, r2, #2
 800e076:	f106 010c 	add.w	r1, r6, #12
 800e07a:	300c      	adds	r0, #12
 800e07c:	f7fd fd6e 	bl	800bb5c <memcpy>
 800e080:	2201      	movs	r2, #1
 800e082:	4629      	mov	r1, r5
 800e084:	4620      	mov	r0, r4
 800e086:	f000 ff15 	bl	800eeb4 <__lshift>
 800e08a:	9b00      	ldr	r3, [sp, #0]
 800e08c:	f8cd b014 	str.w	fp, [sp, #20]
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	46b1      	mov	r9, r6
 800e096:	9307      	str	r3, [sp, #28]
 800e098:	4606      	mov	r6, r0
 800e09a:	4639      	mov	r1, r7
 800e09c:	9804      	ldr	r0, [sp, #16]
 800e09e:	f7ff faa5 	bl	800d5ec <quorem>
 800e0a2:	4649      	mov	r1, r9
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e0aa:	9804      	ldr	r0, [sp, #16]
 800e0ac:	f000 ff56 	bl	800ef5c <__mcmp>
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	9000      	str	r0, [sp, #0]
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 ff6a 	bl	800ef90 <__mdiff>
 800e0bc:	68c3      	ldr	r3, [r0, #12]
 800e0be:	4602      	mov	r2, r0
 800e0c0:	bb03      	cbnz	r3, 800e104 <_dtoa_r+0x9fc>
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	9008      	str	r0, [sp, #32]
 800e0c6:	9804      	ldr	r0, [sp, #16]
 800e0c8:	f000 ff48 	bl	800ef5c <__mcmp>
 800e0cc:	9a08      	ldr	r2, [sp, #32]
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	9308      	str	r3, [sp, #32]
 800e0d6:	f000 fd21 	bl	800eb1c <_Bfree>
 800e0da:	9b08      	ldr	r3, [sp, #32]
 800e0dc:	b9a3      	cbnz	r3, 800e108 <_dtoa_r+0xa00>
 800e0de:	9a06      	ldr	r2, [sp, #24]
 800e0e0:	b992      	cbnz	r2, 800e108 <_dtoa_r+0xa00>
 800e0e2:	9a07      	ldr	r2, [sp, #28]
 800e0e4:	b982      	cbnz	r2, 800e108 <_dtoa_r+0xa00>
 800e0e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e0ea:	d029      	beq.n	800e140 <_dtoa_r+0xa38>
 800e0ec:	9b00      	ldr	r3, [sp, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	dd01      	ble.n	800e0f6 <_dtoa_r+0x9ee>
 800e0f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e0f6:	9b05      	ldr	r3, [sp, #20]
 800e0f8:	1c5d      	adds	r5, r3, #1
 800e0fa:	f883 8000 	strb.w	r8, [r3]
 800e0fe:	e782      	b.n	800e006 <_dtoa_r+0x8fe>
 800e100:	4630      	mov	r0, r6
 800e102:	e7c2      	b.n	800e08a <_dtoa_r+0x982>
 800e104:	2301      	movs	r3, #1
 800e106:	e7e3      	b.n	800e0d0 <_dtoa_r+0x9c8>
 800e108:	9a00      	ldr	r2, [sp, #0]
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	db04      	blt.n	800e118 <_dtoa_r+0xa10>
 800e10e:	d125      	bne.n	800e15c <_dtoa_r+0xa54>
 800e110:	9a06      	ldr	r2, [sp, #24]
 800e112:	bb1a      	cbnz	r2, 800e15c <_dtoa_r+0xa54>
 800e114:	9a07      	ldr	r2, [sp, #28]
 800e116:	bb0a      	cbnz	r2, 800e15c <_dtoa_r+0xa54>
 800e118:	2b00      	cmp	r3, #0
 800e11a:	ddec      	ble.n	800e0f6 <_dtoa_r+0x9ee>
 800e11c:	2201      	movs	r2, #1
 800e11e:	9904      	ldr	r1, [sp, #16]
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fec7 	bl	800eeb4 <__lshift>
 800e126:	4639      	mov	r1, r7
 800e128:	9004      	str	r0, [sp, #16]
 800e12a:	f000 ff17 	bl	800ef5c <__mcmp>
 800e12e:	2800      	cmp	r0, #0
 800e130:	dc03      	bgt.n	800e13a <_dtoa_r+0xa32>
 800e132:	d1e0      	bne.n	800e0f6 <_dtoa_r+0x9ee>
 800e134:	f018 0f01 	tst.w	r8, #1
 800e138:	d0dd      	beq.n	800e0f6 <_dtoa_r+0x9ee>
 800e13a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e13e:	d1d8      	bne.n	800e0f2 <_dtoa_r+0x9ea>
 800e140:	9b05      	ldr	r3, [sp, #20]
 800e142:	9a05      	ldr	r2, [sp, #20]
 800e144:	1c5d      	adds	r5, r3, #1
 800e146:	2339      	movs	r3, #57	; 0x39
 800e148:	7013      	strb	r3, [r2, #0]
 800e14a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e14e:	2b39      	cmp	r3, #57	; 0x39
 800e150:	f105 32ff 	add.w	r2, r5, #4294967295
 800e154:	d04f      	beq.n	800e1f6 <_dtoa_r+0xaee>
 800e156:	3301      	adds	r3, #1
 800e158:	7013      	strb	r3, [r2, #0]
 800e15a:	e754      	b.n	800e006 <_dtoa_r+0x8fe>
 800e15c:	9a05      	ldr	r2, [sp, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f102 0501 	add.w	r5, r2, #1
 800e164:	dd06      	ble.n	800e174 <_dtoa_r+0xa6c>
 800e166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e16a:	d0e9      	beq.n	800e140 <_dtoa_r+0xa38>
 800e16c:	f108 0801 	add.w	r8, r8, #1
 800e170:	9b05      	ldr	r3, [sp, #20]
 800e172:	e7c2      	b.n	800e0fa <_dtoa_r+0x9f2>
 800e174:	9a02      	ldr	r2, [sp, #8]
 800e176:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e17a:	eba5 030b 	sub.w	r3, r5, fp
 800e17e:	4293      	cmp	r3, r2
 800e180:	d021      	beq.n	800e1c6 <_dtoa_r+0xabe>
 800e182:	2300      	movs	r3, #0
 800e184:	220a      	movs	r2, #10
 800e186:	9904      	ldr	r1, [sp, #16]
 800e188:	4620      	mov	r0, r4
 800e18a:	f000 fcde 	bl	800eb4a <__multadd>
 800e18e:	45b1      	cmp	r9, r6
 800e190:	9004      	str	r0, [sp, #16]
 800e192:	f04f 0300 	mov.w	r3, #0
 800e196:	f04f 020a 	mov.w	r2, #10
 800e19a:	4649      	mov	r1, r9
 800e19c:	4620      	mov	r0, r4
 800e19e:	d105      	bne.n	800e1ac <_dtoa_r+0xaa4>
 800e1a0:	f000 fcd3 	bl	800eb4a <__multadd>
 800e1a4:	4681      	mov	r9, r0
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	9505      	str	r5, [sp, #20]
 800e1aa:	e776      	b.n	800e09a <_dtoa_r+0x992>
 800e1ac:	f000 fccd 	bl	800eb4a <__multadd>
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	4681      	mov	r9, r0
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	220a      	movs	r2, #10
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fcc6 	bl	800eb4a <__multadd>
 800e1be:	4606      	mov	r6, r0
 800e1c0:	e7f2      	b.n	800e1a8 <_dtoa_r+0xaa0>
 800e1c2:	f04f 0900 	mov.w	r9, #0
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	9904      	ldr	r1, [sp, #16]
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f000 fe72 	bl	800eeb4 <__lshift>
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	9004      	str	r0, [sp, #16]
 800e1d4:	f000 fec2 	bl	800ef5c <__mcmp>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	dcb6      	bgt.n	800e14a <_dtoa_r+0xa42>
 800e1dc:	d102      	bne.n	800e1e4 <_dtoa_r+0xadc>
 800e1de:	f018 0f01 	tst.w	r8, #1
 800e1e2:	d1b2      	bne.n	800e14a <_dtoa_r+0xa42>
 800e1e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1e8:	2b30      	cmp	r3, #48	; 0x30
 800e1ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800e1ee:	f47f af0a 	bne.w	800e006 <_dtoa_r+0x8fe>
 800e1f2:	4615      	mov	r5, r2
 800e1f4:	e7f6      	b.n	800e1e4 <_dtoa_r+0xadc>
 800e1f6:	4593      	cmp	fp, r2
 800e1f8:	d105      	bne.n	800e206 <_dtoa_r+0xafe>
 800e1fa:	2331      	movs	r3, #49	; 0x31
 800e1fc:	f10a 0a01 	add.w	sl, sl, #1
 800e200:	f88b 3000 	strb.w	r3, [fp]
 800e204:	e6ff      	b.n	800e006 <_dtoa_r+0x8fe>
 800e206:	4615      	mov	r5, r2
 800e208:	e79f      	b.n	800e14a <_dtoa_r+0xa42>
 800e20a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e270 <_dtoa_r+0xb68>
 800e20e:	e007      	b.n	800e220 <_dtoa_r+0xb18>
 800e210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e212:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e274 <_dtoa_r+0xb6c>
 800e216:	b11b      	cbz	r3, 800e220 <_dtoa_r+0xb18>
 800e218:	f10b 0308 	add.w	r3, fp, #8
 800e21c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	4658      	mov	r0, fp
 800e222:	b017      	add	sp, #92	; 0x5c
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	9b06      	ldr	r3, [sp, #24]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	f77f ae35 	ble.w	800de9a <_dtoa_r+0x792>
 800e230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e232:	9307      	str	r3, [sp, #28]
 800e234:	e649      	b.n	800deca <_dtoa_r+0x7c2>
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dc03      	bgt.n	800e244 <_dtoa_r+0xb3c>
 800e23c:	9b06      	ldr	r3, [sp, #24]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	f73f aecc 	bgt.w	800dfdc <_dtoa_r+0x8d4>
 800e244:	465d      	mov	r5, fp
 800e246:	4639      	mov	r1, r7
 800e248:	9804      	ldr	r0, [sp, #16]
 800e24a:	f7ff f9cf 	bl	800d5ec <quorem>
 800e24e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e252:	f805 8b01 	strb.w	r8, [r5], #1
 800e256:	9a02      	ldr	r2, [sp, #8]
 800e258:	eba5 030b 	sub.w	r3, r5, fp
 800e25c:	429a      	cmp	r2, r3
 800e25e:	ddb0      	ble.n	800e1c2 <_dtoa_r+0xaba>
 800e260:	2300      	movs	r3, #0
 800e262:	220a      	movs	r2, #10
 800e264:	9904      	ldr	r1, [sp, #16]
 800e266:	4620      	mov	r0, r4
 800e268:	f000 fc6f 	bl	800eb4a <__multadd>
 800e26c:	9004      	str	r0, [sp, #16]
 800e26e:	e7ea      	b.n	800e246 <_dtoa_r+0xb3e>
 800e270:	08010728 	.word	0x08010728
 800e274:	080107a8 	.word	0x080107a8

0800e278 <std>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b510      	push	{r4, lr}
 800e27c:	4604      	mov	r4, r0
 800e27e:	e9c0 3300 	strd	r3, r3, [r0]
 800e282:	6083      	str	r3, [r0, #8]
 800e284:	8181      	strh	r1, [r0, #12]
 800e286:	6643      	str	r3, [r0, #100]	; 0x64
 800e288:	81c2      	strh	r2, [r0, #14]
 800e28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e28e:	6183      	str	r3, [r0, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	2208      	movs	r2, #8
 800e294:	305c      	adds	r0, #92	; 0x5c
 800e296:	f7fd fc6c 	bl	800bb72 <memset>
 800e29a:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <std+0x38>)
 800e29c:	6263      	str	r3, [r4, #36]	; 0x24
 800e29e:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <std+0x3c>)
 800e2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2a2:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <std+0x40>)
 800e2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2a6:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <std+0x44>)
 800e2a8:	6224      	str	r4, [r4, #32]
 800e2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	bf00      	nop
 800e2b0:	0800f965 	.word	0x0800f965
 800e2b4:	0800f987 	.word	0x0800f987
 800e2b8:	0800f9bf 	.word	0x0800f9bf
 800e2bc:	0800f9e3 	.word	0x0800f9e3

0800e2c0 <_cleanup_r>:
 800e2c0:	4901      	ldr	r1, [pc, #4]	; (800e2c8 <_cleanup_r+0x8>)
 800e2c2:	f000 b885 	b.w	800e3d0 <_fwalk_reent>
 800e2c6:	bf00      	nop
 800e2c8:	0800fcfd 	.word	0x0800fcfd

0800e2cc <__sfmoreglue>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	1e4a      	subs	r2, r1, #1
 800e2d0:	2568      	movs	r5, #104	; 0x68
 800e2d2:	4355      	muls	r5, r2
 800e2d4:	460e      	mov	r6, r1
 800e2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2da:	f001 f847 	bl	800f36c <_malloc_r>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	b140      	cbz	r0, 800e2f4 <__sfmoreglue+0x28>
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2e8:	300c      	adds	r0, #12
 800e2ea:	60a0      	str	r0, [r4, #8]
 800e2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2f0:	f7fd fc3f 	bl	800bb72 <memset>
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}

0800e2f8 <__sinit>:
 800e2f8:	6983      	ldr	r3, [r0, #24]
 800e2fa:	b510      	push	{r4, lr}
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	bb33      	cbnz	r3, 800e34e <__sinit+0x56>
 800e300:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e304:	6503      	str	r3, [r0, #80]	; 0x50
 800e306:	4b12      	ldr	r3, [pc, #72]	; (800e350 <__sinit+0x58>)
 800e308:	4a12      	ldr	r2, [pc, #72]	; (800e354 <__sinit+0x5c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6282      	str	r2, [r0, #40]	; 0x28
 800e30e:	4298      	cmp	r0, r3
 800e310:	bf04      	itt	eq
 800e312:	2301      	moveq	r3, #1
 800e314:	6183      	streq	r3, [r0, #24]
 800e316:	f000 f81f 	bl	800e358 <__sfp>
 800e31a:	6060      	str	r0, [r4, #4]
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 f81b 	bl	800e358 <__sfp>
 800e322:	60a0      	str	r0, [r4, #8]
 800e324:	4620      	mov	r0, r4
 800e326:	f000 f817 	bl	800e358 <__sfp>
 800e32a:	2200      	movs	r2, #0
 800e32c:	60e0      	str	r0, [r4, #12]
 800e32e:	2104      	movs	r1, #4
 800e330:	6860      	ldr	r0, [r4, #4]
 800e332:	f7ff ffa1 	bl	800e278 <std>
 800e336:	2201      	movs	r2, #1
 800e338:	2109      	movs	r1, #9
 800e33a:	68a0      	ldr	r0, [r4, #8]
 800e33c:	f7ff ff9c 	bl	800e278 <std>
 800e340:	2202      	movs	r2, #2
 800e342:	2112      	movs	r1, #18
 800e344:	68e0      	ldr	r0, [r4, #12]
 800e346:	f7ff ff97 	bl	800e278 <std>
 800e34a:	2301      	movs	r3, #1
 800e34c:	61a3      	str	r3, [r4, #24]
 800e34e:	bd10      	pop	{r4, pc}
 800e350:	08010714 	.word	0x08010714
 800e354:	0800e2c1 	.word	0x0800e2c1

0800e358 <__sfp>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	4b1b      	ldr	r3, [pc, #108]	; (800e3c8 <__sfp+0x70>)
 800e35c:	681e      	ldr	r6, [r3, #0]
 800e35e:	69b3      	ldr	r3, [r6, #24]
 800e360:	4607      	mov	r7, r0
 800e362:	b913      	cbnz	r3, 800e36a <__sfp+0x12>
 800e364:	4630      	mov	r0, r6
 800e366:	f7ff ffc7 	bl	800e2f8 <__sinit>
 800e36a:	3648      	adds	r6, #72	; 0x48
 800e36c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e370:	3b01      	subs	r3, #1
 800e372:	d503      	bpl.n	800e37c <__sfp+0x24>
 800e374:	6833      	ldr	r3, [r6, #0]
 800e376:	b133      	cbz	r3, 800e386 <__sfp+0x2e>
 800e378:	6836      	ldr	r6, [r6, #0]
 800e37a:	e7f7      	b.n	800e36c <__sfp+0x14>
 800e37c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e380:	b16d      	cbz	r5, 800e39e <__sfp+0x46>
 800e382:	3468      	adds	r4, #104	; 0x68
 800e384:	e7f4      	b.n	800e370 <__sfp+0x18>
 800e386:	2104      	movs	r1, #4
 800e388:	4638      	mov	r0, r7
 800e38a:	f7ff ff9f 	bl	800e2cc <__sfmoreglue>
 800e38e:	6030      	str	r0, [r6, #0]
 800e390:	2800      	cmp	r0, #0
 800e392:	d1f1      	bne.n	800e378 <__sfp+0x20>
 800e394:	230c      	movs	r3, #12
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	4604      	mov	r4, r0
 800e39a:	4620      	mov	r0, r4
 800e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39e:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <__sfp+0x74>)
 800e3a0:	6665      	str	r5, [r4, #100]	; 0x64
 800e3a2:	e9c4 5500 	strd	r5, r5, [r4]
 800e3a6:	60a5      	str	r5, [r4, #8]
 800e3a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e3ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e3b0:	2208      	movs	r2, #8
 800e3b2:	4629      	mov	r1, r5
 800e3b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3b8:	f7fd fbdb 	bl	800bb72 <memset>
 800e3bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3c4:	e7e9      	b.n	800e39a <__sfp+0x42>
 800e3c6:	bf00      	nop
 800e3c8:	08010714 	.word	0x08010714
 800e3cc:	ffff0001 	.word	0xffff0001

0800e3d0 <_fwalk_reent>:
 800e3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3d4:	4680      	mov	r8, r0
 800e3d6:	4689      	mov	r9, r1
 800e3d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3dc:	2600      	movs	r6, #0
 800e3de:	b914      	cbnz	r4, 800e3e6 <_fwalk_reent+0x16>
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e3ea:	3f01      	subs	r7, #1
 800e3ec:	d501      	bpl.n	800e3f2 <_fwalk_reent+0x22>
 800e3ee:	6824      	ldr	r4, [r4, #0]
 800e3f0:	e7f5      	b.n	800e3de <_fwalk_reent+0xe>
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d907      	bls.n	800e408 <_fwalk_reent+0x38>
 800e3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	d003      	beq.n	800e408 <_fwalk_reent+0x38>
 800e400:	4629      	mov	r1, r5
 800e402:	4640      	mov	r0, r8
 800e404:	47c8      	blx	r9
 800e406:	4306      	orrs	r6, r0
 800e408:	3568      	adds	r5, #104	; 0x68
 800e40a:	e7ee      	b.n	800e3ea <_fwalk_reent+0x1a>

0800e40c <rshift>:
 800e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e40e:	6906      	ldr	r6, [r0, #16]
 800e410:	114b      	asrs	r3, r1, #5
 800e412:	429e      	cmp	r6, r3
 800e414:	f100 0414 	add.w	r4, r0, #20
 800e418:	dd30      	ble.n	800e47c <rshift+0x70>
 800e41a:	f011 011f 	ands.w	r1, r1, #31
 800e41e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e422:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e426:	d108      	bne.n	800e43a <rshift+0x2e>
 800e428:	4621      	mov	r1, r4
 800e42a:	42b2      	cmp	r2, r6
 800e42c:	460b      	mov	r3, r1
 800e42e:	d211      	bcs.n	800e454 <rshift+0x48>
 800e430:	f852 3b04 	ldr.w	r3, [r2], #4
 800e434:	f841 3b04 	str.w	r3, [r1], #4
 800e438:	e7f7      	b.n	800e42a <rshift+0x1e>
 800e43a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e43e:	f1c1 0c20 	rsb	ip, r1, #32
 800e442:	40cd      	lsrs	r5, r1
 800e444:	3204      	adds	r2, #4
 800e446:	4623      	mov	r3, r4
 800e448:	42b2      	cmp	r2, r6
 800e44a:	4617      	mov	r7, r2
 800e44c:	d30c      	bcc.n	800e468 <rshift+0x5c>
 800e44e:	601d      	str	r5, [r3, #0]
 800e450:	b105      	cbz	r5, 800e454 <rshift+0x48>
 800e452:	3304      	adds	r3, #4
 800e454:	1b1a      	subs	r2, r3, r4
 800e456:	42a3      	cmp	r3, r4
 800e458:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e45c:	bf08      	it	eq
 800e45e:	2300      	moveq	r3, #0
 800e460:	6102      	str	r2, [r0, #16]
 800e462:	bf08      	it	eq
 800e464:	6143      	streq	r3, [r0, #20]
 800e466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e468:	683f      	ldr	r7, [r7, #0]
 800e46a:	fa07 f70c 	lsl.w	r7, r7, ip
 800e46e:	433d      	orrs	r5, r7
 800e470:	f843 5b04 	str.w	r5, [r3], #4
 800e474:	f852 5b04 	ldr.w	r5, [r2], #4
 800e478:	40cd      	lsrs	r5, r1
 800e47a:	e7e5      	b.n	800e448 <rshift+0x3c>
 800e47c:	4623      	mov	r3, r4
 800e47e:	e7e9      	b.n	800e454 <rshift+0x48>

0800e480 <__hexdig_fun>:
 800e480:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e484:	2b09      	cmp	r3, #9
 800e486:	d802      	bhi.n	800e48e <__hexdig_fun+0xe>
 800e488:	3820      	subs	r0, #32
 800e48a:	b2c0      	uxtb	r0, r0
 800e48c:	4770      	bx	lr
 800e48e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e492:	2b05      	cmp	r3, #5
 800e494:	d801      	bhi.n	800e49a <__hexdig_fun+0x1a>
 800e496:	3847      	subs	r0, #71	; 0x47
 800e498:	e7f7      	b.n	800e48a <__hexdig_fun+0xa>
 800e49a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e49e:	2b05      	cmp	r3, #5
 800e4a0:	d801      	bhi.n	800e4a6 <__hexdig_fun+0x26>
 800e4a2:	3827      	subs	r0, #39	; 0x27
 800e4a4:	e7f1      	b.n	800e48a <__hexdig_fun+0xa>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	4770      	bx	lr

0800e4aa <__gethex>:
 800e4aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ae:	b08b      	sub	sp, #44	; 0x2c
 800e4b0:	468a      	mov	sl, r1
 800e4b2:	9002      	str	r0, [sp, #8]
 800e4b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e4b6:	9306      	str	r3, [sp, #24]
 800e4b8:	4690      	mov	r8, r2
 800e4ba:	f000 fad0 	bl	800ea5e <__localeconv_l>
 800e4be:	6803      	ldr	r3, [r0, #0]
 800e4c0:	9303      	str	r3, [sp, #12]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7f1 fe8c 	bl	80001e0 <strlen>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	9001      	str	r0, [sp, #4]
 800e4cc:	4403      	add	r3, r0
 800e4ce:	f04f 0b00 	mov.w	fp, #0
 800e4d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e4d6:	9307      	str	r3, [sp, #28]
 800e4d8:	f8da 3000 	ldr.w	r3, [sl]
 800e4dc:	3302      	adds	r3, #2
 800e4de:	461f      	mov	r7, r3
 800e4e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4e4:	2830      	cmp	r0, #48	; 0x30
 800e4e6:	d06c      	beq.n	800e5c2 <__gethex+0x118>
 800e4e8:	f7ff ffca 	bl	800e480 <__hexdig_fun>
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d16a      	bne.n	800e5c8 <__gethex+0x11e>
 800e4f2:	9a01      	ldr	r2, [sp, #4]
 800e4f4:	9903      	ldr	r1, [sp, #12]
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	f001 fa77 	bl	800f9ea <strncmp>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d166      	bne.n	800e5ce <__gethex+0x124>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	5cf8      	ldrb	r0, [r7, r3]
 800e504:	18fe      	adds	r6, r7, r3
 800e506:	f7ff ffbb 	bl	800e480 <__hexdig_fun>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d062      	beq.n	800e5d4 <__gethex+0x12a>
 800e50e:	4633      	mov	r3, r6
 800e510:	7818      	ldrb	r0, [r3, #0]
 800e512:	2830      	cmp	r0, #48	; 0x30
 800e514:	461f      	mov	r7, r3
 800e516:	f103 0301 	add.w	r3, r3, #1
 800e51a:	d0f9      	beq.n	800e510 <__gethex+0x66>
 800e51c:	f7ff ffb0 	bl	800e480 <__hexdig_fun>
 800e520:	fab0 f580 	clz	r5, r0
 800e524:	096d      	lsrs	r5, r5, #5
 800e526:	4634      	mov	r4, r6
 800e528:	f04f 0b01 	mov.w	fp, #1
 800e52c:	463a      	mov	r2, r7
 800e52e:	4616      	mov	r6, r2
 800e530:	3201      	adds	r2, #1
 800e532:	7830      	ldrb	r0, [r6, #0]
 800e534:	f7ff ffa4 	bl	800e480 <__hexdig_fun>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d1f8      	bne.n	800e52e <__gethex+0x84>
 800e53c:	9a01      	ldr	r2, [sp, #4]
 800e53e:	9903      	ldr	r1, [sp, #12]
 800e540:	4630      	mov	r0, r6
 800e542:	f001 fa52 	bl	800f9ea <strncmp>
 800e546:	b950      	cbnz	r0, 800e55e <__gethex+0xb4>
 800e548:	b954      	cbnz	r4, 800e560 <__gethex+0xb6>
 800e54a:	9b01      	ldr	r3, [sp, #4]
 800e54c:	18f4      	adds	r4, r6, r3
 800e54e:	4622      	mov	r2, r4
 800e550:	4616      	mov	r6, r2
 800e552:	3201      	adds	r2, #1
 800e554:	7830      	ldrb	r0, [r6, #0]
 800e556:	f7ff ff93 	bl	800e480 <__hexdig_fun>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d1f8      	bne.n	800e550 <__gethex+0xa6>
 800e55e:	b10c      	cbz	r4, 800e564 <__gethex+0xba>
 800e560:	1ba4      	subs	r4, r4, r6
 800e562:	00a4      	lsls	r4, r4, #2
 800e564:	7833      	ldrb	r3, [r6, #0]
 800e566:	2b50      	cmp	r3, #80	; 0x50
 800e568:	d001      	beq.n	800e56e <__gethex+0xc4>
 800e56a:	2b70      	cmp	r3, #112	; 0x70
 800e56c:	d140      	bne.n	800e5f0 <__gethex+0x146>
 800e56e:	7873      	ldrb	r3, [r6, #1]
 800e570:	2b2b      	cmp	r3, #43	; 0x2b
 800e572:	d031      	beq.n	800e5d8 <__gethex+0x12e>
 800e574:	2b2d      	cmp	r3, #45	; 0x2d
 800e576:	d033      	beq.n	800e5e0 <__gethex+0x136>
 800e578:	1c71      	adds	r1, r6, #1
 800e57a:	f04f 0900 	mov.w	r9, #0
 800e57e:	7808      	ldrb	r0, [r1, #0]
 800e580:	f7ff ff7e 	bl	800e480 <__hexdig_fun>
 800e584:	1e43      	subs	r3, r0, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b18      	cmp	r3, #24
 800e58a:	d831      	bhi.n	800e5f0 <__gethex+0x146>
 800e58c:	f1a0 0210 	sub.w	r2, r0, #16
 800e590:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e594:	f7ff ff74 	bl	800e480 <__hexdig_fun>
 800e598:	1e43      	subs	r3, r0, #1
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b18      	cmp	r3, #24
 800e59e:	d922      	bls.n	800e5e6 <__gethex+0x13c>
 800e5a0:	f1b9 0f00 	cmp.w	r9, #0
 800e5a4:	d000      	beq.n	800e5a8 <__gethex+0xfe>
 800e5a6:	4252      	negs	r2, r2
 800e5a8:	4414      	add	r4, r2
 800e5aa:	f8ca 1000 	str.w	r1, [sl]
 800e5ae:	b30d      	cbz	r5, 800e5f4 <__gethex+0x14a>
 800e5b0:	f1bb 0f00 	cmp.w	fp, #0
 800e5b4:	bf0c      	ite	eq
 800e5b6:	2706      	moveq	r7, #6
 800e5b8:	2700      	movne	r7, #0
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	b00b      	add	sp, #44	; 0x2c
 800e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c2:	f10b 0b01 	add.w	fp, fp, #1
 800e5c6:	e78a      	b.n	800e4de <__gethex+0x34>
 800e5c8:	2500      	movs	r5, #0
 800e5ca:	462c      	mov	r4, r5
 800e5cc:	e7ae      	b.n	800e52c <__gethex+0x82>
 800e5ce:	463e      	mov	r6, r7
 800e5d0:	2501      	movs	r5, #1
 800e5d2:	e7c7      	b.n	800e564 <__gethex+0xba>
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	e7fb      	b.n	800e5d0 <__gethex+0x126>
 800e5d8:	f04f 0900 	mov.w	r9, #0
 800e5dc:	1cb1      	adds	r1, r6, #2
 800e5de:	e7ce      	b.n	800e57e <__gethex+0xd4>
 800e5e0:	f04f 0901 	mov.w	r9, #1
 800e5e4:	e7fa      	b.n	800e5dc <__gethex+0x132>
 800e5e6:	230a      	movs	r3, #10
 800e5e8:	fb03 0202 	mla	r2, r3, r2, r0
 800e5ec:	3a10      	subs	r2, #16
 800e5ee:	e7cf      	b.n	800e590 <__gethex+0xe6>
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	e7da      	b.n	800e5aa <__gethex+0x100>
 800e5f4:	1bf3      	subs	r3, r6, r7
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	2b07      	cmp	r3, #7
 800e5fc:	dc49      	bgt.n	800e692 <__gethex+0x1e8>
 800e5fe:	9802      	ldr	r0, [sp, #8]
 800e600:	f000 fa58 	bl	800eab4 <_Balloc>
 800e604:	9b01      	ldr	r3, [sp, #4]
 800e606:	f100 0914 	add.w	r9, r0, #20
 800e60a:	f04f 0b00 	mov.w	fp, #0
 800e60e:	f1c3 0301 	rsb	r3, r3, #1
 800e612:	4605      	mov	r5, r0
 800e614:	f8cd 9010 	str.w	r9, [sp, #16]
 800e618:	46da      	mov	sl, fp
 800e61a:	9308      	str	r3, [sp, #32]
 800e61c:	42b7      	cmp	r7, r6
 800e61e:	d33b      	bcc.n	800e698 <__gethex+0x1ee>
 800e620:	9804      	ldr	r0, [sp, #16]
 800e622:	f840 ab04 	str.w	sl, [r0], #4
 800e626:	eba0 0009 	sub.w	r0, r0, r9
 800e62a:	1080      	asrs	r0, r0, #2
 800e62c:	6128      	str	r0, [r5, #16]
 800e62e:	0147      	lsls	r7, r0, #5
 800e630:	4650      	mov	r0, sl
 800e632:	f000 fb03 	bl	800ec3c <__hi0bits>
 800e636:	f8d8 6000 	ldr.w	r6, [r8]
 800e63a:	1a3f      	subs	r7, r7, r0
 800e63c:	42b7      	cmp	r7, r6
 800e63e:	dd64      	ble.n	800e70a <__gethex+0x260>
 800e640:	1bbf      	subs	r7, r7, r6
 800e642:	4639      	mov	r1, r7
 800e644:	4628      	mov	r0, r5
 800e646:	f000 fe13 	bl	800f270 <__any_on>
 800e64a:	4682      	mov	sl, r0
 800e64c:	b178      	cbz	r0, 800e66e <__gethex+0x1c4>
 800e64e:	1e7b      	subs	r3, r7, #1
 800e650:	1159      	asrs	r1, r3, #5
 800e652:	f003 021f 	and.w	r2, r3, #31
 800e656:	f04f 0a01 	mov.w	sl, #1
 800e65a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e65e:	fa0a f202 	lsl.w	r2, sl, r2
 800e662:	420a      	tst	r2, r1
 800e664:	d003      	beq.n	800e66e <__gethex+0x1c4>
 800e666:	4553      	cmp	r3, sl
 800e668:	dc46      	bgt.n	800e6f8 <__gethex+0x24e>
 800e66a:	f04f 0a02 	mov.w	sl, #2
 800e66e:	4639      	mov	r1, r7
 800e670:	4628      	mov	r0, r5
 800e672:	f7ff fecb 	bl	800e40c <rshift>
 800e676:	443c      	add	r4, r7
 800e678:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e67c:	42a3      	cmp	r3, r4
 800e67e:	da52      	bge.n	800e726 <__gethex+0x27c>
 800e680:	4629      	mov	r1, r5
 800e682:	9802      	ldr	r0, [sp, #8]
 800e684:	f000 fa4a 	bl	800eb1c <_Bfree>
 800e688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e68a:	2300      	movs	r3, #0
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	27a3      	movs	r7, #163	; 0xa3
 800e690:	e793      	b.n	800e5ba <__gethex+0x110>
 800e692:	3101      	adds	r1, #1
 800e694:	105b      	asrs	r3, r3, #1
 800e696:	e7b0      	b.n	800e5fa <__gethex+0x150>
 800e698:	1e73      	subs	r3, r6, #1
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	9a07      	ldr	r2, [sp, #28]
 800e69e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d018      	beq.n	800e6d8 <__gethex+0x22e>
 800e6a6:	f1bb 0f20 	cmp.w	fp, #32
 800e6aa:	d107      	bne.n	800e6bc <__gethex+0x212>
 800e6ac:	9b04      	ldr	r3, [sp, #16]
 800e6ae:	f8c3 a000 	str.w	sl, [r3]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	f04f 0a00 	mov.w	sl, #0
 800e6b8:	9304      	str	r3, [sp, #16]
 800e6ba:	46d3      	mov	fp, sl
 800e6bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e6c0:	f7ff fede 	bl	800e480 <__hexdig_fun>
 800e6c4:	f000 000f 	and.w	r0, r0, #15
 800e6c8:	fa00 f00b 	lsl.w	r0, r0, fp
 800e6cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e6d0:	f10b 0b04 	add.w	fp, fp, #4
 800e6d4:	9b05      	ldr	r3, [sp, #20]
 800e6d6:	e00d      	b.n	800e6f4 <__gethex+0x24a>
 800e6d8:	9b05      	ldr	r3, [sp, #20]
 800e6da:	9a08      	ldr	r2, [sp, #32]
 800e6dc:	4413      	add	r3, r2
 800e6de:	42bb      	cmp	r3, r7
 800e6e0:	d3e1      	bcc.n	800e6a6 <__gethex+0x1fc>
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	9a01      	ldr	r2, [sp, #4]
 800e6e6:	9903      	ldr	r1, [sp, #12]
 800e6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ea:	f001 f97e 	bl	800f9ea <strncmp>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d1d8      	bne.n	800e6a6 <__gethex+0x1fc>
 800e6f4:	461e      	mov	r6, r3
 800e6f6:	e791      	b.n	800e61c <__gethex+0x172>
 800e6f8:	1eb9      	subs	r1, r7, #2
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f000 fdb8 	bl	800f270 <__any_on>
 800e700:	2800      	cmp	r0, #0
 800e702:	d0b2      	beq.n	800e66a <__gethex+0x1c0>
 800e704:	f04f 0a03 	mov.w	sl, #3
 800e708:	e7b1      	b.n	800e66e <__gethex+0x1c4>
 800e70a:	da09      	bge.n	800e720 <__gethex+0x276>
 800e70c:	1bf7      	subs	r7, r6, r7
 800e70e:	4629      	mov	r1, r5
 800e710:	463a      	mov	r2, r7
 800e712:	9802      	ldr	r0, [sp, #8]
 800e714:	f000 fbce 	bl	800eeb4 <__lshift>
 800e718:	1be4      	subs	r4, r4, r7
 800e71a:	4605      	mov	r5, r0
 800e71c:	f100 0914 	add.w	r9, r0, #20
 800e720:	f04f 0a00 	mov.w	sl, #0
 800e724:	e7a8      	b.n	800e678 <__gethex+0x1ce>
 800e726:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e72a:	42a0      	cmp	r0, r4
 800e72c:	dd6a      	ble.n	800e804 <__gethex+0x35a>
 800e72e:	1b04      	subs	r4, r0, r4
 800e730:	42a6      	cmp	r6, r4
 800e732:	dc2e      	bgt.n	800e792 <__gethex+0x2e8>
 800e734:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d022      	beq.n	800e782 <__gethex+0x2d8>
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d024      	beq.n	800e78a <__gethex+0x2e0>
 800e740:	2b01      	cmp	r3, #1
 800e742:	d115      	bne.n	800e770 <__gethex+0x2c6>
 800e744:	42a6      	cmp	r6, r4
 800e746:	d113      	bne.n	800e770 <__gethex+0x2c6>
 800e748:	2e01      	cmp	r6, #1
 800e74a:	dc0b      	bgt.n	800e764 <__gethex+0x2ba>
 800e74c:	9a06      	ldr	r2, [sp, #24]
 800e74e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	2301      	movs	r3, #1
 800e756:	612b      	str	r3, [r5, #16]
 800e758:	f8c9 3000 	str.w	r3, [r9]
 800e75c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e75e:	2762      	movs	r7, #98	; 0x62
 800e760:	601d      	str	r5, [r3, #0]
 800e762:	e72a      	b.n	800e5ba <__gethex+0x110>
 800e764:	1e71      	subs	r1, r6, #1
 800e766:	4628      	mov	r0, r5
 800e768:	f000 fd82 	bl	800f270 <__any_on>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d1ed      	bne.n	800e74c <__gethex+0x2a2>
 800e770:	4629      	mov	r1, r5
 800e772:	9802      	ldr	r0, [sp, #8]
 800e774:	f000 f9d2 	bl	800eb1c <_Bfree>
 800e778:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e77a:	2300      	movs	r3, #0
 800e77c:	6013      	str	r3, [r2, #0]
 800e77e:	2750      	movs	r7, #80	; 0x50
 800e780:	e71b      	b.n	800e5ba <__gethex+0x110>
 800e782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e784:	2b00      	cmp	r3, #0
 800e786:	d0e1      	beq.n	800e74c <__gethex+0x2a2>
 800e788:	e7f2      	b.n	800e770 <__gethex+0x2c6>
 800e78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1dd      	bne.n	800e74c <__gethex+0x2a2>
 800e790:	e7ee      	b.n	800e770 <__gethex+0x2c6>
 800e792:	1e67      	subs	r7, r4, #1
 800e794:	f1ba 0f00 	cmp.w	sl, #0
 800e798:	d131      	bne.n	800e7fe <__gethex+0x354>
 800e79a:	b127      	cbz	r7, 800e7a6 <__gethex+0x2fc>
 800e79c:	4639      	mov	r1, r7
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f000 fd66 	bl	800f270 <__any_on>
 800e7a4:	4682      	mov	sl, r0
 800e7a6:	117a      	asrs	r2, r7, #5
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f007 071f 	and.w	r7, r7, #31
 800e7ae:	fa03 f707 	lsl.w	r7, r3, r7
 800e7b2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	421f      	tst	r7, r3
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	bf18      	it	ne
 800e7be:	f04a 0a02 	orrne.w	sl, sl, #2
 800e7c2:	1b36      	subs	r6, r6, r4
 800e7c4:	f7ff fe22 	bl	800e40c <rshift>
 800e7c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e7cc:	2702      	movs	r7, #2
 800e7ce:	f1ba 0f00 	cmp.w	sl, #0
 800e7d2:	d048      	beq.n	800e866 <__gethex+0x3bc>
 800e7d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7d8:	2b02      	cmp	r3, #2
 800e7da:	d015      	beq.n	800e808 <__gethex+0x35e>
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d017      	beq.n	800e810 <__gethex+0x366>
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d109      	bne.n	800e7f8 <__gethex+0x34e>
 800e7e4:	f01a 0f02 	tst.w	sl, #2
 800e7e8:	d006      	beq.n	800e7f8 <__gethex+0x34e>
 800e7ea:	f8d9 3000 	ldr.w	r3, [r9]
 800e7ee:	ea4a 0a03 	orr.w	sl, sl, r3
 800e7f2:	f01a 0f01 	tst.w	sl, #1
 800e7f6:	d10e      	bne.n	800e816 <__gethex+0x36c>
 800e7f8:	f047 0710 	orr.w	r7, r7, #16
 800e7fc:	e033      	b.n	800e866 <__gethex+0x3bc>
 800e7fe:	f04f 0a01 	mov.w	sl, #1
 800e802:	e7d0      	b.n	800e7a6 <__gethex+0x2fc>
 800e804:	2701      	movs	r7, #1
 800e806:	e7e2      	b.n	800e7ce <__gethex+0x324>
 800e808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e80a:	f1c3 0301 	rsb	r3, r3, #1
 800e80e:	9315      	str	r3, [sp, #84]	; 0x54
 800e810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e812:	2b00      	cmp	r3, #0
 800e814:	d0f0      	beq.n	800e7f8 <__gethex+0x34e>
 800e816:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e81a:	f105 0314 	add.w	r3, r5, #20
 800e81e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e822:	eb03 010a 	add.w	r1, r3, sl
 800e826:	f04f 0c00 	mov.w	ip, #0
 800e82a:	4618      	mov	r0, r3
 800e82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e830:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e834:	d01c      	beq.n	800e870 <__gethex+0x3c6>
 800e836:	3201      	adds	r2, #1
 800e838:	6002      	str	r2, [r0, #0]
 800e83a:	2f02      	cmp	r7, #2
 800e83c:	f105 0314 	add.w	r3, r5, #20
 800e840:	d138      	bne.n	800e8b4 <__gethex+0x40a>
 800e842:	f8d8 2000 	ldr.w	r2, [r8]
 800e846:	3a01      	subs	r2, #1
 800e848:	42b2      	cmp	r2, r6
 800e84a:	d10a      	bne.n	800e862 <__gethex+0x3b8>
 800e84c:	1171      	asrs	r1, r6, #5
 800e84e:	2201      	movs	r2, #1
 800e850:	f006 061f 	and.w	r6, r6, #31
 800e854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e858:	fa02 f606 	lsl.w	r6, r2, r6
 800e85c:	421e      	tst	r6, r3
 800e85e:	bf18      	it	ne
 800e860:	4617      	movne	r7, r2
 800e862:	f047 0720 	orr.w	r7, r7, #32
 800e866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e868:	601d      	str	r5, [r3, #0]
 800e86a:	9b06      	ldr	r3, [sp, #24]
 800e86c:	601c      	str	r4, [r3, #0]
 800e86e:	e6a4      	b.n	800e5ba <__gethex+0x110>
 800e870:	4299      	cmp	r1, r3
 800e872:	f843 cc04 	str.w	ip, [r3, #-4]
 800e876:	d8d8      	bhi.n	800e82a <__gethex+0x380>
 800e878:	68ab      	ldr	r3, [r5, #8]
 800e87a:	4599      	cmp	r9, r3
 800e87c:	db12      	blt.n	800e8a4 <__gethex+0x3fa>
 800e87e:	6869      	ldr	r1, [r5, #4]
 800e880:	9802      	ldr	r0, [sp, #8]
 800e882:	3101      	adds	r1, #1
 800e884:	f000 f916 	bl	800eab4 <_Balloc>
 800e888:	692a      	ldr	r2, [r5, #16]
 800e88a:	3202      	adds	r2, #2
 800e88c:	f105 010c 	add.w	r1, r5, #12
 800e890:	4683      	mov	fp, r0
 800e892:	0092      	lsls	r2, r2, #2
 800e894:	300c      	adds	r0, #12
 800e896:	f7fd f961 	bl	800bb5c <memcpy>
 800e89a:	4629      	mov	r1, r5
 800e89c:	9802      	ldr	r0, [sp, #8]
 800e89e:	f000 f93d 	bl	800eb1c <_Bfree>
 800e8a2:	465d      	mov	r5, fp
 800e8a4:	692b      	ldr	r3, [r5, #16]
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e8ac:	612a      	str	r2, [r5, #16]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	615a      	str	r2, [r3, #20]
 800e8b2:	e7c2      	b.n	800e83a <__gethex+0x390>
 800e8b4:	692a      	ldr	r2, [r5, #16]
 800e8b6:	454a      	cmp	r2, r9
 800e8b8:	dd0b      	ble.n	800e8d2 <__gethex+0x428>
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	4628      	mov	r0, r5
 800e8be:	f7ff fda5 	bl	800e40c <rshift>
 800e8c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	42a3      	cmp	r3, r4
 800e8ca:	f6ff aed9 	blt.w	800e680 <__gethex+0x1d6>
 800e8ce:	2701      	movs	r7, #1
 800e8d0:	e7c7      	b.n	800e862 <__gethex+0x3b8>
 800e8d2:	f016 061f 	ands.w	r6, r6, #31
 800e8d6:	d0fa      	beq.n	800e8ce <__gethex+0x424>
 800e8d8:	449a      	add	sl, r3
 800e8da:	f1c6 0620 	rsb	r6, r6, #32
 800e8de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e8e2:	f000 f9ab 	bl	800ec3c <__hi0bits>
 800e8e6:	42b0      	cmp	r0, r6
 800e8e8:	dbe7      	blt.n	800e8ba <__gethex+0x410>
 800e8ea:	e7f0      	b.n	800e8ce <__gethex+0x424>

0800e8ec <L_shift>:
 800e8ec:	f1c2 0208 	rsb	r2, r2, #8
 800e8f0:	0092      	lsls	r2, r2, #2
 800e8f2:	b570      	push	{r4, r5, r6, lr}
 800e8f4:	f1c2 0620 	rsb	r6, r2, #32
 800e8f8:	6843      	ldr	r3, [r0, #4]
 800e8fa:	6804      	ldr	r4, [r0, #0]
 800e8fc:	fa03 f506 	lsl.w	r5, r3, r6
 800e900:	432c      	orrs	r4, r5
 800e902:	40d3      	lsrs	r3, r2
 800e904:	6004      	str	r4, [r0, #0]
 800e906:	f840 3f04 	str.w	r3, [r0, #4]!
 800e90a:	4288      	cmp	r0, r1
 800e90c:	d3f4      	bcc.n	800e8f8 <L_shift+0xc>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}

0800e910 <__match>:
 800e910:	b530      	push	{r4, r5, lr}
 800e912:	6803      	ldr	r3, [r0, #0]
 800e914:	3301      	adds	r3, #1
 800e916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e91a:	b914      	cbnz	r4, 800e922 <__match+0x12>
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	2001      	movs	r0, #1
 800e920:	bd30      	pop	{r4, r5, pc}
 800e922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e926:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e92a:	2d19      	cmp	r5, #25
 800e92c:	bf98      	it	ls
 800e92e:	3220      	addls	r2, #32
 800e930:	42a2      	cmp	r2, r4
 800e932:	d0f0      	beq.n	800e916 <__match+0x6>
 800e934:	2000      	movs	r0, #0
 800e936:	e7f3      	b.n	800e920 <__match+0x10>

0800e938 <__hexnan>:
 800e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	680b      	ldr	r3, [r1, #0]
 800e93e:	6801      	ldr	r1, [r0, #0]
 800e940:	115f      	asrs	r7, r3, #5
 800e942:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e946:	f013 031f 	ands.w	r3, r3, #31
 800e94a:	b087      	sub	sp, #28
 800e94c:	bf18      	it	ne
 800e94e:	3704      	addne	r7, #4
 800e950:	2500      	movs	r5, #0
 800e952:	1f3e      	subs	r6, r7, #4
 800e954:	4682      	mov	sl, r0
 800e956:	4690      	mov	r8, r2
 800e958:	9301      	str	r3, [sp, #4]
 800e95a:	f847 5c04 	str.w	r5, [r7, #-4]
 800e95e:	46b1      	mov	r9, r6
 800e960:	4634      	mov	r4, r6
 800e962:	9502      	str	r5, [sp, #8]
 800e964:	46ab      	mov	fp, r5
 800e966:	784a      	ldrb	r2, [r1, #1]
 800e968:	1c4b      	adds	r3, r1, #1
 800e96a:	9303      	str	r3, [sp, #12]
 800e96c:	b342      	cbz	r2, 800e9c0 <__hexnan+0x88>
 800e96e:	4610      	mov	r0, r2
 800e970:	9105      	str	r1, [sp, #20]
 800e972:	9204      	str	r2, [sp, #16]
 800e974:	f7ff fd84 	bl	800e480 <__hexdig_fun>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d143      	bne.n	800ea04 <__hexnan+0xcc>
 800e97c:	9a04      	ldr	r2, [sp, #16]
 800e97e:	9905      	ldr	r1, [sp, #20]
 800e980:	2a20      	cmp	r2, #32
 800e982:	d818      	bhi.n	800e9b6 <__hexnan+0x7e>
 800e984:	9b02      	ldr	r3, [sp, #8]
 800e986:	459b      	cmp	fp, r3
 800e988:	dd13      	ble.n	800e9b2 <__hexnan+0x7a>
 800e98a:	454c      	cmp	r4, r9
 800e98c:	d206      	bcs.n	800e99c <__hexnan+0x64>
 800e98e:	2d07      	cmp	r5, #7
 800e990:	dc04      	bgt.n	800e99c <__hexnan+0x64>
 800e992:	462a      	mov	r2, r5
 800e994:	4649      	mov	r1, r9
 800e996:	4620      	mov	r0, r4
 800e998:	f7ff ffa8 	bl	800e8ec <L_shift>
 800e99c:	4544      	cmp	r4, r8
 800e99e:	d944      	bls.n	800ea2a <__hexnan+0xf2>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f1a4 0904 	sub.w	r9, r4, #4
 800e9a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9aa:	f8cd b008 	str.w	fp, [sp, #8]
 800e9ae:	464c      	mov	r4, r9
 800e9b0:	461d      	mov	r5, r3
 800e9b2:	9903      	ldr	r1, [sp, #12]
 800e9b4:	e7d7      	b.n	800e966 <__hexnan+0x2e>
 800e9b6:	2a29      	cmp	r2, #41	; 0x29
 800e9b8:	d14a      	bne.n	800ea50 <__hexnan+0x118>
 800e9ba:	3102      	adds	r1, #2
 800e9bc:	f8ca 1000 	str.w	r1, [sl]
 800e9c0:	f1bb 0f00 	cmp.w	fp, #0
 800e9c4:	d044      	beq.n	800ea50 <__hexnan+0x118>
 800e9c6:	454c      	cmp	r4, r9
 800e9c8:	d206      	bcs.n	800e9d8 <__hexnan+0xa0>
 800e9ca:	2d07      	cmp	r5, #7
 800e9cc:	dc04      	bgt.n	800e9d8 <__hexnan+0xa0>
 800e9ce:	462a      	mov	r2, r5
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7ff ff8a 	bl	800e8ec <L_shift>
 800e9d8:	4544      	cmp	r4, r8
 800e9da:	d928      	bls.n	800ea2e <__hexnan+0xf6>
 800e9dc:	4643      	mov	r3, r8
 800e9de:	f854 2b04 	ldr.w	r2, [r4], #4
 800e9e2:	f843 2b04 	str.w	r2, [r3], #4
 800e9e6:	42a6      	cmp	r6, r4
 800e9e8:	d2f9      	bcs.n	800e9de <__hexnan+0xa6>
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f843 2b04 	str.w	r2, [r3], #4
 800e9f0:	429e      	cmp	r6, r3
 800e9f2:	d2fb      	bcs.n	800e9ec <__hexnan+0xb4>
 800e9f4:	6833      	ldr	r3, [r6, #0]
 800e9f6:	b91b      	cbnz	r3, 800ea00 <__hexnan+0xc8>
 800e9f8:	4546      	cmp	r6, r8
 800e9fa:	d127      	bne.n	800ea4c <__hexnan+0x114>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	6033      	str	r3, [r6, #0]
 800ea00:	2005      	movs	r0, #5
 800ea02:	e026      	b.n	800ea52 <__hexnan+0x11a>
 800ea04:	3501      	adds	r5, #1
 800ea06:	2d08      	cmp	r5, #8
 800ea08:	f10b 0b01 	add.w	fp, fp, #1
 800ea0c:	dd06      	ble.n	800ea1c <__hexnan+0xe4>
 800ea0e:	4544      	cmp	r4, r8
 800ea10:	d9cf      	bls.n	800e9b2 <__hexnan+0x7a>
 800ea12:	2300      	movs	r3, #0
 800ea14:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea18:	2501      	movs	r5, #1
 800ea1a:	3c04      	subs	r4, #4
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	f000 000f 	and.w	r0, r0, #15
 800ea22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ea26:	6020      	str	r0, [r4, #0]
 800ea28:	e7c3      	b.n	800e9b2 <__hexnan+0x7a>
 800ea2a:	2508      	movs	r5, #8
 800ea2c:	e7c1      	b.n	800e9b2 <__hexnan+0x7a>
 800ea2e:	9b01      	ldr	r3, [sp, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d0df      	beq.n	800e9f4 <__hexnan+0xbc>
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295
 800ea38:	f1c3 0320 	rsb	r3, r3, #32
 800ea3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ea44:	401a      	ands	r2, r3
 800ea46:	f847 2c04 	str.w	r2, [r7, #-4]
 800ea4a:	e7d3      	b.n	800e9f4 <__hexnan+0xbc>
 800ea4c:	3e04      	subs	r6, #4
 800ea4e:	e7d1      	b.n	800e9f4 <__hexnan+0xbc>
 800ea50:	2004      	movs	r0, #4
 800ea52:	b007      	add	sp, #28
 800ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea58 <__locale_ctype_ptr_l>:
 800ea58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ea5c:	4770      	bx	lr

0800ea5e <__localeconv_l>:
 800ea5e:	30f0      	adds	r0, #240	; 0xf0
 800ea60:	4770      	bx	lr
	...

0800ea64 <_localeconv_r>:
 800ea64:	4b04      	ldr	r3, [pc, #16]	; (800ea78 <_localeconv_r+0x14>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6a18      	ldr	r0, [r3, #32]
 800ea6a:	4b04      	ldr	r3, [pc, #16]	; (800ea7c <_localeconv_r+0x18>)
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	bf08      	it	eq
 800ea70:	4618      	moveq	r0, r3
 800ea72:	30f0      	adds	r0, #240	; 0xf0
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	200002cc 	.word	0x200002cc
 800ea7c:	20000330 	.word	0x20000330

0800ea80 <malloc>:
 800ea80:	4b02      	ldr	r3, [pc, #8]	; (800ea8c <malloc+0xc>)
 800ea82:	4601      	mov	r1, r0
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	f000 bc71 	b.w	800f36c <_malloc_r>
 800ea8a:	bf00      	nop
 800ea8c:	200002cc 	.word	0x200002cc

0800ea90 <__ascii_mbtowc>:
 800ea90:	b082      	sub	sp, #8
 800ea92:	b901      	cbnz	r1, 800ea96 <__ascii_mbtowc+0x6>
 800ea94:	a901      	add	r1, sp, #4
 800ea96:	b142      	cbz	r2, 800eaaa <__ascii_mbtowc+0x1a>
 800ea98:	b14b      	cbz	r3, 800eaae <__ascii_mbtowc+0x1e>
 800ea9a:	7813      	ldrb	r3, [r2, #0]
 800ea9c:	600b      	str	r3, [r1, #0]
 800ea9e:	7812      	ldrb	r2, [r2, #0]
 800eaa0:	1c10      	adds	r0, r2, #0
 800eaa2:	bf18      	it	ne
 800eaa4:	2001      	movne	r0, #1
 800eaa6:	b002      	add	sp, #8
 800eaa8:	4770      	bx	lr
 800eaaa:	4610      	mov	r0, r2
 800eaac:	e7fb      	b.n	800eaa6 <__ascii_mbtowc+0x16>
 800eaae:	f06f 0001 	mvn.w	r0, #1
 800eab2:	e7f8      	b.n	800eaa6 <__ascii_mbtowc+0x16>

0800eab4 <_Balloc>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eab8:	4604      	mov	r4, r0
 800eaba:	460e      	mov	r6, r1
 800eabc:	b93d      	cbnz	r5, 800eace <_Balloc+0x1a>
 800eabe:	2010      	movs	r0, #16
 800eac0:	f7ff ffde 	bl	800ea80 <malloc>
 800eac4:	6260      	str	r0, [r4, #36]	; 0x24
 800eac6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eaca:	6005      	str	r5, [r0, #0]
 800eacc:	60c5      	str	r5, [r0, #12]
 800eace:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ead0:	68eb      	ldr	r3, [r5, #12]
 800ead2:	b183      	cbz	r3, 800eaf6 <_Balloc+0x42>
 800ead4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eadc:	b9b8      	cbnz	r0, 800eb0e <_Balloc+0x5a>
 800eade:	2101      	movs	r1, #1
 800eae0:	fa01 f506 	lsl.w	r5, r1, r6
 800eae4:	1d6a      	adds	r2, r5, #5
 800eae6:	0092      	lsls	r2, r2, #2
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fbe2 	bl	800f2b2 <_calloc_r>
 800eaee:	b160      	cbz	r0, 800eb0a <_Balloc+0x56>
 800eaf0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800eaf4:	e00e      	b.n	800eb14 <_Balloc+0x60>
 800eaf6:	2221      	movs	r2, #33	; 0x21
 800eaf8:	2104      	movs	r1, #4
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 fbd9 	bl	800f2b2 <_calloc_r>
 800eb00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb02:	60e8      	str	r0, [r5, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e4      	bne.n	800ead4 <_Balloc+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
 800eb0e:	6802      	ldr	r2, [r0, #0]
 800eb10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eb14:	2300      	movs	r3, #0
 800eb16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb1a:	e7f7      	b.n	800eb0c <_Balloc+0x58>

0800eb1c <_Bfree>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800eb20:	4606      	mov	r6, r0
 800eb22:	460d      	mov	r5, r1
 800eb24:	b93c      	cbnz	r4, 800eb36 <_Bfree+0x1a>
 800eb26:	2010      	movs	r0, #16
 800eb28:	f7ff ffaa 	bl	800ea80 <malloc>
 800eb2c:	6270      	str	r0, [r6, #36]	; 0x24
 800eb2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb32:	6004      	str	r4, [r0, #0]
 800eb34:	60c4      	str	r4, [r0, #12]
 800eb36:	b13d      	cbz	r5, 800eb48 <_Bfree+0x2c>
 800eb38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eb3a:	686a      	ldr	r2, [r5, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb42:	6029      	str	r1, [r5, #0]
 800eb44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800eb48:	bd70      	pop	{r4, r5, r6, pc}

0800eb4a <__multadd>:
 800eb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	690d      	ldr	r5, [r1, #16]
 800eb50:	461f      	mov	r7, r3
 800eb52:	4606      	mov	r6, r0
 800eb54:	460c      	mov	r4, r1
 800eb56:	f101 0c14 	add.w	ip, r1, #20
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f8dc 0000 	ldr.w	r0, [ip]
 800eb60:	b281      	uxth	r1, r0
 800eb62:	fb02 7101 	mla	r1, r2, r1, r7
 800eb66:	0c0f      	lsrs	r7, r1, #16
 800eb68:	0c00      	lsrs	r0, r0, #16
 800eb6a:	fb02 7000 	mla	r0, r2, r0, r7
 800eb6e:	b289      	uxth	r1, r1
 800eb70:	3301      	adds	r3, #1
 800eb72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800eb76:	429d      	cmp	r5, r3
 800eb78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800eb7c:	f84c 1b04 	str.w	r1, [ip], #4
 800eb80:	dcec      	bgt.n	800eb5c <__multadd+0x12>
 800eb82:	b1d7      	cbz	r7, 800ebba <__multadd+0x70>
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	42ab      	cmp	r3, r5
 800eb88:	dc12      	bgt.n	800ebb0 <__multadd+0x66>
 800eb8a:	6861      	ldr	r1, [r4, #4]
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	3101      	adds	r1, #1
 800eb90:	f7ff ff90 	bl	800eab4 <_Balloc>
 800eb94:	6922      	ldr	r2, [r4, #16]
 800eb96:	3202      	adds	r2, #2
 800eb98:	f104 010c 	add.w	r1, r4, #12
 800eb9c:	4680      	mov	r8, r0
 800eb9e:	0092      	lsls	r2, r2, #2
 800eba0:	300c      	adds	r0, #12
 800eba2:	f7fc ffdb 	bl	800bb5c <memcpy>
 800eba6:	4621      	mov	r1, r4
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f7ff ffb7 	bl	800eb1c <_Bfree>
 800ebae:	4644      	mov	r4, r8
 800ebb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebb4:	3501      	adds	r5, #1
 800ebb6:	615f      	str	r7, [r3, #20]
 800ebb8:	6125      	str	r5, [r4, #16]
 800ebba:	4620      	mov	r0, r4
 800ebbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebc0 <__s2b>:
 800ebc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	4615      	mov	r5, r2
 800ebc8:	461f      	mov	r7, r3
 800ebca:	2209      	movs	r2, #9
 800ebcc:	3308      	adds	r3, #8
 800ebce:	4606      	mov	r6, r0
 800ebd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	db20      	blt.n	800ec1e <__s2b+0x5e>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7ff ff69 	bl	800eab4 <_Balloc>
 800ebe2:	9b08      	ldr	r3, [sp, #32]
 800ebe4:	6143      	str	r3, [r0, #20]
 800ebe6:	2d09      	cmp	r5, #9
 800ebe8:	f04f 0301 	mov.w	r3, #1
 800ebec:	6103      	str	r3, [r0, #16]
 800ebee:	dd19      	ble.n	800ec24 <__s2b+0x64>
 800ebf0:	f104 0809 	add.w	r8, r4, #9
 800ebf4:	46c1      	mov	r9, r8
 800ebf6:	442c      	add	r4, r5
 800ebf8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	3b30      	subs	r3, #48	; 0x30
 800ec00:	220a      	movs	r2, #10
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7ff ffa1 	bl	800eb4a <__multadd>
 800ec08:	45a1      	cmp	r9, r4
 800ec0a:	d1f5      	bne.n	800ebf8 <__s2b+0x38>
 800ec0c:	eb08 0405 	add.w	r4, r8, r5
 800ec10:	3c08      	subs	r4, #8
 800ec12:	1b2d      	subs	r5, r5, r4
 800ec14:	1963      	adds	r3, r4, r5
 800ec16:	42bb      	cmp	r3, r7
 800ec18:	db07      	blt.n	800ec2a <__s2b+0x6a>
 800ec1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec1e:	0052      	lsls	r2, r2, #1
 800ec20:	3101      	adds	r1, #1
 800ec22:	e7d9      	b.n	800ebd8 <__s2b+0x18>
 800ec24:	340a      	adds	r4, #10
 800ec26:	2509      	movs	r5, #9
 800ec28:	e7f3      	b.n	800ec12 <__s2b+0x52>
 800ec2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec2e:	4601      	mov	r1, r0
 800ec30:	3b30      	subs	r3, #48	; 0x30
 800ec32:	220a      	movs	r2, #10
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7ff ff88 	bl	800eb4a <__multadd>
 800ec3a:	e7eb      	b.n	800ec14 <__s2b+0x54>

0800ec3c <__hi0bits>:
 800ec3c:	0c02      	lsrs	r2, r0, #16
 800ec3e:	0412      	lsls	r2, r2, #16
 800ec40:	4603      	mov	r3, r0
 800ec42:	b9b2      	cbnz	r2, 800ec72 <__hi0bits+0x36>
 800ec44:	0403      	lsls	r3, r0, #16
 800ec46:	2010      	movs	r0, #16
 800ec48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ec4c:	bf04      	itt	eq
 800ec4e:	021b      	lsleq	r3, r3, #8
 800ec50:	3008      	addeq	r0, #8
 800ec52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ec56:	bf04      	itt	eq
 800ec58:	011b      	lsleq	r3, r3, #4
 800ec5a:	3004      	addeq	r0, #4
 800ec5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ec60:	bf04      	itt	eq
 800ec62:	009b      	lsleq	r3, r3, #2
 800ec64:	3002      	addeq	r0, #2
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	db06      	blt.n	800ec78 <__hi0bits+0x3c>
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	d503      	bpl.n	800ec76 <__hi0bits+0x3a>
 800ec6e:	3001      	adds	r0, #1
 800ec70:	4770      	bx	lr
 800ec72:	2000      	movs	r0, #0
 800ec74:	e7e8      	b.n	800ec48 <__hi0bits+0xc>
 800ec76:	2020      	movs	r0, #32
 800ec78:	4770      	bx	lr

0800ec7a <__lo0bits>:
 800ec7a:	6803      	ldr	r3, [r0, #0]
 800ec7c:	f013 0207 	ands.w	r2, r3, #7
 800ec80:	4601      	mov	r1, r0
 800ec82:	d00b      	beq.n	800ec9c <__lo0bits+0x22>
 800ec84:	07da      	lsls	r2, r3, #31
 800ec86:	d423      	bmi.n	800ecd0 <__lo0bits+0x56>
 800ec88:	0798      	lsls	r0, r3, #30
 800ec8a:	bf49      	itett	mi
 800ec8c:	085b      	lsrmi	r3, r3, #1
 800ec8e:	089b      	lsrpl	r3, r3, #2
 800ec90:	2001      	movmi	r0, #1
 800ec92:	600b      	strmi	r3, [r1, #0]
 800ec94:	bf5c      	itt	pl
 800ec96:	600b      	strpl	r3, [r1, #0]
 800ec98:	2002      	movpl	r0, #2
 800ec9a:	4770      	bx	lr
 800ec9c:	b298      	uxth	r0, r3
 800ec9e:	b9a8      	cbnz	r0, 800eccc <__lo0bits+0x52>
 800eca0:	0c1b      	lsrs	r3, r3, #16
 800eca2:	2010      	movs	r0, #16
 800eca4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eca8:	bf04      	itt	eq
 800ecaa:	0a1b      	lsreq	r3, r3, #8
 800ecac:	3008      	addeq	r0, #8
 800ecae:	071a      	lsls	r2, r3, #28
 800ecb0:	bf04      	itt	eq
 800ecb2:	091b      	lsreq	r3, r3, #4
 800ecb4:	3004      	addeq	r0, #4
 800ecb6:	079a      	lsls	r2, r3, #30
 800ecb8:	bf04      	itt	eq
 800ecba:	089b      	lsreq	r3, r3, #2
 800ecbc:	3002      	addeq	r0, #2
 800ecbe:	07da      	lsls	r2, r3, #31
 800ecc0:	d402      	bmi.n	800ecc8 <__lo0bits+0x4e>
 800ecc2:	085b      	lsrs	r3, r3, #1
 800ecc4:	d006      	beq.n	800ecd4 <__lo0bits+0x5a>
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	600b      	str	r3, [r1, #0]
 800ecca:	4770      	bx	lr
 800eccc:	4610      	mov	r0, r2
 800ecce:	e7e9      	b.n	800eca4 <__lo0bits+0x2a>
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	4770      	bx	lr
 800ecd4:	2020      	movs	r0, #32
 800ecd6:	4770      	bx	lr

0800ecd8 <__i2b>:
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	460c      	mov	r4, r1
 800ecdc:	2101      	movs	r1, #1
 800ecde:	f7ff fee9 	bl	800eab4 <_Balloc>
 800ece2:	2201      	movs	r2, #1
 800ece4:	6144      	str	r4, [r0, #20]
 800ece6:	6102      	str	r2, [r0, #16]
 800ece8:	bd10      	pop	{r4, pc}

0800ecea <__multiply>:
 800ecea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecee:	4614      	mov	r4, r2
 800ecf0:	690a      	ldr	r2, [r1, #16]
 800ecf2:	6923      	ldr	r3, [r4, #16]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	bfb8      	it	lt
 800ecf8:	460b      	movlt	r3, r1
 800ecfa:	4688      	mov	r8, r1
 800ecfc:	bfbc      	itt	lt
 800ecfe:	46a0      	movlt	r8, r4
 800ed00:	461c      	movlt	r4, r3
 800ed02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ed0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed12:	eb07 0609 	add.w	r6, r7, r9
 800ed16:	42b3      	cmp	r3, r6
 800ed18:	bfb8      	it	lt
 800ed1a:	3101      	addlt	r1, #1
 800ed1c:	f7ff feca 	bl	800eab4 <_Balloc>
 800ed20:	f100 0514 	add.w	r5, r0, #20
 800ed24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ed28:	462b      	mov	r3, r5
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	4573      	cmp	r3, lr
 800ed2e:	d316      	bcc.n	800ed5e <__multiply+0x74>
 800ed30:	f104 0214 	add.w	r2, r4, #20
 800ed34:	f108 0114 	add.w	r1, r8, #20
 800ed38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ed3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	9b00      	ldr	r3, [sp, #0]
 800ed44:	9201      	str	r2, [sp, #4]
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d80c      	bhi.n	800ed64 <__multiply+0x7a>
 800ed4a:	2e00      	cmp	r6, #0
 800ed4c:	dd03      	ble.n	800ed56 <__multiply+0x6c>
 800ed4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d05d      	beq.n	800ee12 <__multiply+0x128>
 800ed56:	6106      	str	r6, [r0, #16]
 800ed58:	b003      	add	sp, #12
 800ed5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5e:	f843 2b04 	str.w	r2, [r3], #4
 800ed62:	e7e3      	b.n	800ed2c <__multiply+0x42>
 800ed64:	f8b2 b000 	ldrh.w	fp, [r2]
 800ed68:	f1bb 0f00 	cmp.w	fp, #0
 800ed6c:	d023      	beq.n	800edb6 <__multiply+0xcc>
 800ed6e:	4689      	mov	r9, r1
 800ed70:	46ac      	mov	ip, r5
 800ed72:	f04f 0800 	mov.w	r8, #0
 800ed76:	f859 4b04 	ldr.w	r4, [r9], #4
 800ed7a:	f8dc a000 	ldr.w	sl, [ip]
 800ed7e:	b2a3      	uxth	r3, r4
 800ed80:	fa1f fa8a 	uxth.w	sl, sl
 800ed84:	fb0b a303 	mla	r3, fp, r3, sl
 800ed88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ed8c:	f8dc 4000 	ldr.w	r4, [ip]
 800ed90:	4443      	add	r3, r8
 800ed92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ed96:	fb0b 840a 	mla	r4, fp, sl, r8
 800ed9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ed9e:	46e2      	mov	sl, ip
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eda6:	454f      	cmp	r7, r9
 800eda8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800edac:	f84a 3b04 	str.w	r3, [sl], #4
 800edb0:	d82b      	bhi.n	800ee0a <__multiply+0x120>
 800edb2:	f8cc 8004 	str.w	r8, [ip, #4]
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800edbc:	3204      	adds	r2, #4
 800edbe:	f1ba 0f00 	cmp.w	sl, #0
 800edc2:	d020      	beq.n	800ee06 <__multiply+0x11c>
 800edc4:	682b      	ldr	r3, [r5, #0]
 800edc6:	4689      	mov	r9, r1
 800edc8:	46a8      	mov	r8, r5
 800edca:	f04f 0b00 	mov.w	fp, #0
 800edce:	f8b9 c000 	ldrh.w	ip, [r9]
 800edd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800edd6:	fb0a 440c 	mla	r4, sl, ip, r4
 800edda:	445c      	add	r4, fp
 800eddc:	46c4      	mov	ip, r8
 800edde:	b29b      	uxth	r3, r3
 800ede0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ede4:	f84c 3b04 	str.w	r3, [ip], #4
 800ede8:	f859 3b04 	ldr.w	r3, [r9], #4
 800edec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800edf0:	0c1b      	lsrs	r3, r3, #16
 800edf2:	fb0a b303 	mla	r3, sl, r3, fp
 800edf6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800edfa:	454f      	cmp	r7, r9
 800edfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ee00:	d805      	bhi.n	800ee0e <__multiply+0x124>
 800ee02:	f8c8 3004 	str.w	r3, [r8, #4]
 800ee06:	3504      	adds	r5, #4
 800ee08:	e79b      	b.n	800ed42 <__multiply+0x58>
 800ee0a:	46d4      	mov	ip, sl
 800ee0c:	e7b3      	b.n	800ed76 <__multiply+0x8c>
 800ee0e:	46e0      	mov	r8, ip
 800ee10:	e7dd      	b.n	800edce <__multiply+0xe4>
 800ee12:	3e01      	subs	r6, #1
 800ee14:	e799      	b.n	800ed4a <__multiply+0x60>
	...

0800ee18 <__pow5mult>:
 800ee18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	4615      	mov	r5, r2
 800ee1e:	f012 0203 	ands.w	r2, r2, #3
 800ee22:	4606      	mov	r6, r0
 800ee24:	460f      	mov	r7, r1
 800ee26:	d007      	beq.n	800ee38 <__pow5mult+0x20>
 800ee28:	3a01      	subs	r2, #1
 800ee2a:	4c21      	ldr	r4, [pc, #132]	; (800eeb0 <__pow5mult+0x98>)
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee32:	f7ff fe8a 	bl	800eb4a <__multadd>
 800ee36:	4607      	mov	r7, r0
 800ee38:	10ad      	asrs	r5, r5, #2
 800ee3a:	d035      	beq.n	800eea8 <__pow5mult+0x90>
 800ee3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee3e:	b93c      	cbnz	r4, 800ee50 <__pow5mult+0x38>
 800ee40:	2010      	movs	r0, #16
 800ee42:	f7ff fe1d 	bl	800ea80 <malloc>
 800ee46:	6270      	str	r0, [r6, #36]	; 0x24
 800ee48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee4c:	6004      	str	r4, [r0, #0]
 800ee4e:	60c4      	str	r4, [r0, #12]
 800ee50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee58:	b94c      	cbnz	r4, 800ee6e <__pow5mult+0x56>
 800ee5a:	f240 2171 	movw	r1, #625	; 0x271
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f7ff ff3a 	bl	800ecd8 <__i2b>
 800ee64:	2300      	movs	r3, #0
 800ee66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	6003      	str	r3, [r0, #0]
 800ee6e:	f04f 0800 	mov.w	r8, #0
 800ee72:	07eb      	lsls	r3, r5, #31
 800ee74:	d50a      	bpl.n	800ee8c <__pow5mult+0x74>
 800ee76:	4639      	mov	r1, r7
 800ee78:	4622      	mov	r2, r4
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7ff ff35 	bl	800ecea <__multiply>
 800ee80:	4639      	mov	r1, r7
 800ee82:	4681      	mov	r9, r0
 800ee84:	4630      	mov	r0, r6
 800ee86:	f7ff fe49 	bl	800eb1c <_Bfree>
 800ee8a:	464f      	mov	r7, r9
 800ee8c:	106d      	asrs	r5, r5, #1
 800ee8e:	d00b      	beq.n	800eea8 <__pow5mult+0x90>
 800ee90:	6820      	ldr	r0, [r4, #0]
 800ee92:	b938      	cbnz	r0, 800eea4 <__pow5mult+0x8c>
 800ee94:	4622      	mov	r2, r4
 800ee96:	4621      	mov	r1, r4
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff ff26 	bl	800ecea <__multiply>
 800ee9e:	6020      	str	r0, [r4, #0]
 800eea0:	f8c0 8000 	str.w	r8, [r0]
 800eea4:	4604      	mov	r4, r0
 800eea6:	e7e4      	b.n	800ee72 <__pow5mult+0x5a>
 800eea8:	4638      	mov	r0, r7
 800eeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeae:	bf00      	nop
 800eeb0:	08010918 	.word	0x08010918

0800eeb4 <__lshift>:
 800eeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eebe:	6923      	ldr	r3, [r4, #16]
 800eec0:	6849      	ldr	r1, [r1, #4]
 800eec2:	eb0a 0903 	add.w	r9, sl, r3
 800eec6:	68a3      	ldr	r3, [r4, #8]
 800eec8:	4607      	mov	r7, r0
 800eeca:	4616      	mov	r6, r2
 800eecc:	f109 0501 	add.w	r5, r9, #1
 800eed0:	42ab      	cmp	r3, r5
 800eed2:	db32      	blt.n	800ef3a <__lshift+0x86>
 800eed4:	4638      	mov	r0, r7
 800eed6:	f7ff fded 	bl	800eab4 <_Balloc>
 800eeda:	2300      	movs	r3, #0
 800eedc:	4680      	mov	r8, r0
 800eede:	f100 0114 	add.w	r1, r0, #20
 800eee2:	461a      	mov	r2, r3
 800eee4:	4553      	cmp	r3, sl
 800eee6:	db2b      	blt.n	800ef40 <__lshift+0x8c>
 800eee8:	6920      	ldr	r0, [r4, #16]
 800eeea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eeee:	f104 0314 	add.w	r3, r4, #20
 800eef2:	f016 021f 	ands.w	r2, r6, #31
 800eef6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eefa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eefe:	d025      	beq.n	800ef4c <__lshift+0x98>
 800ef00:	f1c2 0e20 	rsb	lr, r2, #32
 800ef04:	2000      	movs	r0, #0
 800ef06:	681e      	ldr	r6, [r3, #0]
 800ef08:	468a      	mov	sl, r1
 800ef0a:	4096      	lsls	r6, r2
 800ef0c:	4330      	orrs	r0, r6
 800ef0e:	f84a 0b04 	str.w	r0, [sl], #4
 800ef12:	f853 0b04 	ldr.w	r0, [r3], #4
 800ef16:	459c      	cmp	ip, r3
 800ef18:	fa20 f00e 	lsr.w	r0, r0, lr
 800ef1c:	d814      	bhi.n	800ef48 <__lshift+0x94>
 800ef1e:	6048      	str	r0, [r1, #4]
 800ef20:	b108      	cbz	r0, 800ef26 <__lshift+0x72>
 800ef22:	f109 0502 	add.w	r5, r9, #2
 800ef26:	3d01      	subs	r5, #1
 800ef28:	4638      	mov	r0, r7
 800ef2a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	f7ff fdf4 	bl	800eb1c <_Bfree>
 800ef34:	4640      	mov	r0, r8
 800ef36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3a:	3101      	adds	r1, #1
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	e7c7      	b.n	800eed0 <__lshift+0x1c>
 800ef40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ef44:	3301      	adds	r3, #1
 800ef46:	e7cd      	b.n	800eee4 <__lshift+0x30>
 800ef48:	4651      	mov	r1, sl
 800ef4a:	e7dc      	b.n	800ef06 <__lshift+0x52>
 800ef4c:	3904      	subs	r1, #4
 800ef4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef52:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef56:	459c      	cmp	ip, r3
 800ef58:	d8f9      	bhi.n	800ef4e <__lshift+0x9a>
 800ef5a:	e7e4      	b.n	800ef26 <__lshift+0x72>

0800ef5c <__mcmp>:
 800ef5c:	6903      	ldr	r3, [r0, #16]
 800ef5e:	690a      	ldr	r2, [r1, #16]
 800ef60:	1a9b      	subs	r3, r3, r2
 800ef62:	b530      	push	{r4, r5, lr}
 800ef64:	d10c      	bne.n	800ef80 <__mcmp+0x24>
 800ef66:	0092      	lsls	r2, r2, #2
 800ef68:	3014      	adds	r0, #20
 800ef6a:	3114      	adds	r1, #20
 800ef6c:	1884      	adds	r4, r0, r2
 800ef6e:	4411      	add	r1, r2
 800ef70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef78:	4295      	cmp	r5, r2
 800ef7a:	d003      	beq.n	800ef84 <__mcmp+0x28>
 800ef7c:	d305      	bcc.n	800ef8a <__mcmp+0x2e>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	4618      	mov	r0, r3
 800ef82:	bd30      	pop	{r4, r5, pc}
 800ef84:	42a0      	cmp	r0, r4
 800ef86:	d3f3      	bcc.n	800ef70 <__mcmp+0x14>
 800ef88:	e7fa      	b.n	800ef80 <__mcmp+0x24>
 800ef8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8e:	e7f7      	b.n	800ef80 <__mcmp+0x24>

0800ef90 <__mdiff>:
 800ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	460d      	mov	r5, r1
 800ef96:	4607      	mov	r7, r0
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	4614      	mov	r4, r2
 800ef9e:	f7ff ffdd 	bl	800ef5c <__mcmp>
 800efa2:	1e06      	subs	r6, r0, #0
 800efa4:	d108      	bne.n	800efb8 <__mdiff+0x28>
 800efa6:	4631      	mov	r1, r6
 800efa8:	4638      	mov	r0, r7
 800efaa:	f7ff fd83 	bl	800eab4 <_Balloc>
 800efae:	2301      	movs	r3, #1
 800efb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800efb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb8:	bfa4      	itt	ge
 800efba:	4623      	movge	r3, r4
 800efbc:	462c      	movge	r4, r5
 800efbe:	4638      	mov	r0, r7
 800efc0:	6861      	ldr	r1, [r4, #4]
 800efc2:	bfa6      	itte	ge
 800efc4:	461d      	movge	r5, r3
 800efc6:	2600      	movge	r6, #0
 800efc8:	2601      	movlt	r6, #1
 800efca:	f7ff fd73 	bl	800eab4 <_Balloc>
 800efce:	692b      	ldr	r3, [r5, #16]
 800efd0:	60c6      	str	r6, [r0, #12]
 800efd2:	6926      	ldr	r6, [r4, #16]
 800efd4:	f105 0914 	add.w	r9, r5, #20
 800efd8:	f104 0214 	add.w	r2, r4, #20
 800efdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800efe0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800efe4:	f100 0514 	add.w	r5, r0, #20
 800efe8:	f04f 0e00 	mov.w	lr, #0
 800efec:	f852 ab04 	ldr.w	sl, [r2], #4
 800eff0:	f859 4b04 	ldr.w	r4, [r9], #4
 800eff4:	fa1e f18a 	uxtah	r1, lr, sl
 800eff8:	b2a3      	uxth	r3, r4
 800effa:	1ac9      	subs	r1, r1, r3
 800effc:	0c23      	lsrs	r3, r4, #16
 800effe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f002:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f006:	b289      	uxth	r1, r1
 800f008:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f00c:	45c8      	cmp	r8, r9
 800f00e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f012:	4694      	mov	ip, r2
 800f014:	f845 3b04 	str.w	r3, [r5], #4
 800f018:	d8e8      	bhi.n	800efec <__mdiff+0x5c>
 800f01a:	45bc      	cmp	ip, r7
 800f01c:	d304      	bcc.n	800f028 <__mdiff+0x98>
 800f01e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f022:	b183      	cbz	r3, 800f046 <__mdiff+0xb6>
 800f024:	6106      	str	r6, [r0, #16]
 800f026:	e7c5      	b.n	800efb4 <__mdiff+0x24>
 800f028:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f02c:	fa1e f381 	uxtah	r3, lr, r1
 800f030:	141a      	asrs	r2, r3, #16
 800f032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f036:	b29b      	uxth	r3, r3
 800f038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f03c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f040:	f845 3b04 	str.w	r3, [r5], #4
 800f044:	e7e9      	b.n	800f01a <__mdiff+0x8a>
 800f046:	3e01      	subs	r6, #1
 800f048:	e7e9      	b.n	800f01e <__mdiff+0x8e>
	...

0800f04c <__ulp>:
 800f04c:	4b12      	ldr	r3, [pc, #72]	; (800f098 <__ulp+0x4c>)
 800f04e:	ee10 2a90 	vmov	r2, s1
 800f052:	401a      	ands	r2, r3
 800f054:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dd04      	ble.n	800f066 <__ulp+0x1a>
 800f05c:	2000      	movs	r0, #0
 800f05e:	4619      	mov	r1, r3
 800f060:	ec41 0b10 	vmov	d0, r0, r1
 800f064:	4770      	bx	lr
 800f066:	425b      	negs	r3, r3
 800f068:	151b      	asrs	r3, r3, #20
 800f06a:	2b13      	cmp	r3, #19
 800f06c:	f04f 0000 	mov.w	r0, #0
 800f070:	f04f 0100 	mov.w	r1, #0
 800f074:	dc04      	bgt.n	800f080 <__ulp+0x34>
 800f076:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f07a:	fa42 f103 	asr.w	r1, r2, r3
 800f07e:	e7ef      	b.n	800f060 <__ulp+0x14>
 800f080:	3b14      	subs	r3, #20
 800f082:	2b1e      	cmp	r3, #30
 800f084:	f04f 0201 	mov.w	r2, #1
 800f088:	bfda      	itte	le
 800f08a:	f1c3 031f 	rsble	r3, r3, #31
 800f08e:	fa02 f303 	lslle.w	r3, r2, r3
 800f092:	4613      	movgt	r3, r2
 800f094:	4618      	mov	r0, r3
 800f096:	e7e3      	b.n	800f060 <__ulp+0x14>
 800f098:	7ff00000 	.word	0x7ff00000

0800f09c <__b2d>:
 800f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09e:	6905      	ldr	r5, [r0, #16]
 800f0a0:	f100 0714 	add.w	r7, r0, #20
 800f0a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f0a8:	1f2e      	subs	r6, r5, #4
 800f0aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f7ff fdc4 	bl	800ec3c <__hi0bits>
 800f0b4:	f1c0 0320 	rsb	r3, r0, #32
 800f0b8:	280a      	cmp	r0, #10
 800f0ba:	600b      	str	r3, [r1, #0]
 800f0bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f134 <__b2d+0x98>
 800f0c0:	dc14      	bgt.n	800f0ec <__b2d+0x50>
 800f0c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f0c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f0ca:	42b7      	cmp	r7, r6
 800f0cc:	ea41 030c 	orr.w	r3, r1, ip
 800f0d0:	bf34      	ite	cc
 800f0d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0d6:	2100      	movcs	r1, #0
 800f0d8:	3015      	adds	r0, #21
 800f0da:	fa04 f000 	lsl.w	r0, r4, r0
 800f0de:	fa21 f10e 	lsr.w	r1, r1, lr
 800f0e2:	ea40 0201 	orr.w	r2, r0, r1
 800f0e6:	ec43 2b10 	vmov	d0, r2, r3
 800f0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ec:	42b7      	cmp	r7, r6
 800f0ee:	bf3a      	itte	cc
 800f0f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f0f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0f8:	2100      	movcs	r1, #0
 800f0fa:	380b      	subs	r0, #11
 800f0fc:	d015      	beq.n	800f12a <__b2d+0x8e>
 800f0fe:	4084      	lsls	r4, r0
 800f100:	f1c0 0520 	rsb	r5, r0, #32
 800f104:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f108:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f10c:	42be      	cmp	r6, r7
 800f10e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f112:	ea44 030c 	orr.w	r3, r4, ip
 800f116:	bf8c      	ite	hi
 800f118:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f11c:	2400      	movls	r4, #0
 800f11e:	fa01 f000 	lsl.w	r0, r1, r0
 800f122:	40ec      	lsrs	r4, r5
 800f124:	ea40 0204 	orr.w	r2, r0, r4
 800f128:	e7dd      	b.n	800f0e6 <__b2d+0x4a>
 800f12a:	ea44 030c 	orr.w	r3, r4, ip
 800f12e:	460a      	mov	r2, r1
 800f130:	e7d9      	b.n	800f0e6 <__b2d+0x4a>
 800f132:	bf00      	nop
 800f134:	3ff00000 	.word	0x3ff00000

0800f138 <__d2b>:
 800f138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f13c:	460e      	mov	r6, r1
 800f13e:	2101      	movs	r1, #1
 800f140:	ec59 8b10 	vmov	r8, r9, d0
 800f144:	4615      	mov	r5, r2
 800f146:	f7ff fcb5 	bl	800eab4 <_Balloc>
 800f14a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f14e:	4607      	mov	r7, r0
 800f150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f154:	bb34      	cbnz	r4, 800f1a4 <__d2b+0x6c>
 800f156:	9301      	str	r3, [sp, #4]
 800f158:	f1b8 0300 	subs.w	r3, r8, #0
 800f15c:	d027      	beq.n	800f1ae <__d2b+0x76>
 800f15e:	a802      	add	r0, sp, #8
 800f160:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f164:	f7ff fd89 	bl	800ec7a <__lo0bits>
 800f168:	9900      	ldr	r1, [sp, #0]
 800f16a:	b1f0      	cbz	r0, 800f1aa <__d2b+0x72>
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	f1c0 0320 	rsb	r3, r0, #32
 800f172:	fa02 f303 	lsl.w	r3, r2, r3
 800f176:	430b      	orrs	r3, r1
 800f178:	40c2      	lsrs	r2, r0
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	9201      	str	r2, [sp, #4]
 800f17e:	9b01      	ldr	r3, [sp, #4]
 800f180:	61bb      	str	r3, [r7, #24]
 800f182:	2b00      	cmp	r3, #0
 800f184:	bf14      	ite	ne
 800f186:	2102      	movne	r1, #2
 800f188:	2101      	moveq	r1, #1
 800f18a:	6139      	str	r1, [r7, #16]
 800f18c:	b1c4      	cbz	r4, 800f1c0 <__d2b+0x88>
 800f18e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f192:	4404      	add	r4, r0
 800f194:	6034      	str	r4, [r6, #0]
 800f196:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f19a:	6028      	str	r0, [r5, #0]
 800f19c:	4638      	mov	r0, r7
 800f19e:	b003      	add	sp, #12
 800f1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1a8:	e7d5      	b.n	800f156 <__d2b+0x1e>
 800f1aa:	6179      	str	r1, [r7, #20]
 800f1ac:	e7e7      	b.n	800f17e <__d2b+0x46>
 800f1ae:	a801      	add	r0, sp, #4
 800f1b0:	f7ff fd63 	bl	800ec7a <__lo0bits>
 800f1b4:	9b01      	ldr	r3, [sp, #4]
 800f1b6:	617b      	str	r3, [r7, #20]
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	6139      	str	r1, [r7, #16]
 800f1bc:	3020      	adds	r0, #32
 800f1be:	e7e5      	b.n	800f18c <__d2b+0x54>
 800f1c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f1c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1c8:	6030      	str	r0, [r6, #0]
 800f1ca:	6918      	ldr	r0, [r3, #16]
 800f1cc:	f7ff fd36 	bl	800ec3c <__hi0bits>
 800f1d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f1d4:	e7e1      	b.n	800f19a <__d2b+0x62>

0800f1d6 <__ratio>:
 800f1d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1da:	4688      	mov	r8, r1
 800f1dc:	4669      	mov	r1, sp
 800f1de:	4681      	mov	r9, r0
 800f1e0:	f7ff ff5c 	bl	800f09c <__b2d>
 800f1e4:	a901      	add	r1, sp, #4
 800f1e6:	4640      	mov	r0, r8
 800f1e8:	ec57 6b10 	vmov	r6, r7, d0
 800f1ec:	f7ff ff56 	bl	800f09c <__b2d>
 800f1f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f1f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f1f8:	eba3 0c02 	sub.w	ip, r3, r2
 800f1fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f200:	1a9b      	subs	r3, r3, r2
 800f202:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f206:	ec5b ab10 	vmov	sl, fp, d0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bfce      	itee	gt
 800f20e:	463a      	movgt	r2, r7
 800f210:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f214:	465a      	movle	r2, fp
 800f216:	4659      	mov	r1, fp
 800f218:	463d      	mov	r5, r7
 800f21a:	bfd4      	ite	le
 800f21c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f220:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f224:	4630      	mov	r0, r6
 800f226:	ee10 2a10 	vmov	r2, s0
 800f22a:	460b      	mov	r3, r1
 800f22c:	4629      	mov	r1, r5
 800f22e:	f7f1 fb15 	bl	800085c <__aeabi_ddiv>
 800f232:	ec41 0b10 	vmov	d0, r0, r1
 800f236:	b003      	add	sp, #12
 800f238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f23c <__copybits>:
 800f23c:	3901      	subs	r1, #1
 800f23e:	b510      	push	{r4, lr}
 800f240:	1149      	asrs	r1, r1, #5
 800f242:	6914      	ldr	r4, [r2, #16]
 800f244:	3101      	adds	r1, #1
 800f246:	f102 0314 	add.w	r3, r2, #20
 800f24a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f24e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f252:	42a3      	cmp	r3, r4
 800f254:	4602      	mov	r2, r0
 800f256:	d303      	bcc.n	800f260 <__copybits+0x24>
 800f258:	2300      	movs	r3, #0
 800f25a:	428a      	cmp	r2, r1
 800f25c:	d305      	bcc.n	800f26a <__copybits+0x2e>
 800f25e:	bd10      	pop	{r4, pc}
 800f260:	f853 2b04 	ldr.w	r2, [r3], #4
 800f264:	f840 2b04 	str.w	r2, [r0], #4
 800f268:	e7f3      	b.n	800f252 <__copybits+0x16>
 800f26a:	f842 3b04 	str.w	r3, [r2], #4
 800f26e:	e7f4      	b.n	800f25a <__copybits+0x1e>

0800f270 <__any_on>:
 800f270:	f100 0214 	add.w	r2, r0, #20
 800f274:	6900      	ldr	r0, [r0, #16]
 800f276:	114b      	asrs	r3, r1, #5
 800f278:	4298      	cmp	r0, r3
 800f27a:	b510      	push	{r4, lr}
 800f27c:	db11      	blt.n	800f2a2 <__any_on+0x32>
 800f27e:	dd0a      	ble.n	800f296 <__any_on+0x26>
 800f280:	f011 011f 	ands.w	r1, r1, #31
 800f284:	d007      	beq.n	800f296 <__any_on+0x26>
 800f286:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f28a:	fa24 f001 	lsr.w	r0, r4, r1
 800f28e:	fa00 f101 	lsl.w	r1, r0, r1
 800f292:	428c      	cmp	r4, r1
 800f294:	d10b      	bne.n	800f2ae <__any_on+0x3e>
 800f296:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d803      	bhi.n	800f2a6 <__any_on+0x36>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	e7f7      	b.n	800f296 <__any_on+0x26>
 800f2a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2aa:	2900      	cmp	r1, #0
 800f2ac:	d0f5      	beq.n	800f29a <__any_on+0x2a>
 800f2ae:	2001      	movs	r0, #1
 800f2b0:	e7f6      	b.n	800f2a0 <__any_on+0x30>

0800f2b2 <_calloc_r>:
 800f2b2:	b538      	push	{r3, r4, r5, lr}
 800f2b4:	fb02 f401 	mul.w	r4, r2, r1
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	f000 f857 	bl	800f36c <_malloc_r>
 800f2be:	4605      	mov	r5, r0
 800f2c0:	b118      	cbz	r0, 800f2ca <_calloc_r+0x18>
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	f7fc fc54 	bl	800bb72 <memset>
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f2d0 <_free_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4605      	mov	r5, r0
 800f2d4:	2900      	cmp	r1, #0
 800f2d6:	d045      	beq.n	800f364 <_free_r+0x94>
 800f2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2dc:	1f0c      	subs	r4, r1, #4
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	bfb8      	it	lt
 800f2e2:	18e4      	addlt	r4, r4, r3
 800f2e4:	f000 fdc3 	bl	800fe6e <__malloc_lock>
 800f2e8:	4a1f      	ldr	r2, [pc, #124]	; (800f368 <_free_r+0x98>)
 800f2ea:	6813      	ldr	r3, [r2, #0]
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	b933      	cbnz	r3, 800f2fe <_free_r+0x2e>
 800f2f0:	6063      	str	r3, [r4, #4]
 800f2f2:	6014      	str	r4, [r2, #0]
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2fa:	f000 bdb9 	b.w	800fe70 <__malloc_unlock>
 800f2fe:	42a3      	cmp	r3, r4
 800f300:	d90c      	bls.n	800f31c <_free_r+0x4c>
 800f302:	6821      	ldr	r1, [r4, #0]
 800f304:	1862      	adds	r2, r4, r1
 800f306:	4293      	cmp	r3, r2
 800f308:	bf04      	itt	eq
 800f30a:	681a      	ldreq	r2, [r3, #0]
 800f30c:	685b      	ldreq	r3, [r3, #4]
 800f30e:	6063      	str	r3, [r4, #4]
 800f310:	bf04      	itt	eq
 800f312:	1852      	addeq	r2, r2, r1
 800f314:	6022      	streq	r2, [r4, #0]
 800f316:	6004      	str	r4, [r0, #0]
 800f318:	e7ec      	b.n	800f2f4 <_free_r+0x24>
 800f31a:	4613      	mov	r3, r2
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	b10a      	cbz	r2, 800f324 <_free_r+0x54>
 800f320:	42a2      	cmp	r2, r4
 800f322:	d9fa      	bls.n	800f31a <_free_r+0x4a>
 800f324:	6819      	ldr	r1, [r3, #0]
 800f326:	1858      	adds	r0, r3, r1
 800f328:	42a0      	cmp	r0, r4
 800f32a:	d10b      	bne.n	800f344 <_free_r+0x74>
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	4401      	add	r1, r0
 800f330:	1858      	adds	r0, r3, r1
 800f332:	4282      	cmp	r2, r0
 800f334:	6019      	str	r1, [r3, #0]
 800f336:	d1dd      	bne.n	800f2f4 <_free_r+0x24>
 800f338:	6810      	ldr	r0, [r2, #0]
 800f33a:	6852      	ldr	r2, [r2, #4]
 800f33c:	605a      	str	r2, [r3, #4]
 800f33e:	4401      	add	r1, r0
 800f340:	6019      	str	r1, [r3, #0]
 800f342:	e7d7      	b.n	800f2f4 <_free_r+0x24>
 800f344:	d902      	bls.n	800f34c <_free_r+0x7c>
 800f346:	230c      	movs	r3, #12
 800f348:	602b      	str	r3, [r5, #0]
 800f34a:	e7d3      	b.n	800f2f4 <_free_r+0x24>
 800f34c:	6820      	ldr	r0, [r4, #0]
 800f34e:	1821      	adds	r1, r4, r0
 800f350:	428a      	cmp	r2, r1
 800f352:	bf04      	itt	eq
 800f354:	6811      	ldreq	r1, [r2, #0]
 800f356:	6852      	ldreq	r2, [r2, #4]
 800f358:	6062      	str	r2, [r4, #4]
 800f35a:	bf04      	itt	eq
 800f35c:	1809      	addeq	r1, r1, r0
 800f35e:	6021      	streq	r1, [r4, #0]
 800f360:	605c      	str	r4, [r3, #4]
 800f362:	e7c7      	b.n	800f2f4 <_free_r+0x24>
 800f364:	bd38      	pop	{r3, r4, r5, pc}
 800f366:	bf00      	nop
 800f368:	200004c0 	.word	0x200004c0

0800f36c <_malloc_r>:
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	1ccd      	adds	r5, r1, #3
 800f370:	f025 0503 	bic.w	r5, r5, #3
 800f374:	3508      	adds	r5, #8
 800f376:	2d0c      	cmp	r5, #12
 800f378:	bf38      	it	cc
 800f37a:	250c      	movcc	r5, #12
 800f37c:	2d00      	cmp	r5, #0
 800f37e:	4606      	mov	r6, r0
 800f380:	db01      	blt.n	800f386 <_malloc_r+0x1a>
 800f382:	42a9      	cmp	r1, r5
 800f384:	d903      	bls.n	800f38e <_malloc_r+0x22>
 800f386:	230c      	movs	r3, #12
 800f388:	6033      	str	r3, [r6, #0]
 800f38a:	2000      	movs	r0, #0
 800f38c:	bd70      	pop	{r4, r5, r6, pc}
 800f38e:	f000 fd6e 	bl	800fe6e <__malloc_lock>
 800f392:	4a21      	ldr	r2, [pc, #132]	; (800f418 <_malloc_r+0xac>)
 800f394:	6814      	ldr	r4, [r2, #0]
 800f396:	4621      	mov	r1, r4
 800f398:	b991      	cbnz	r1, 800f3c0 <_malloc_r+0x54>
 800f39a:	4c20      	ldr	r4, [pc, #128]	; (800f41c <_malloc_r+0xb0>)
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	b91b      	cbnz	r3, 800f3a8 <_malloc_r+0x3c>
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	f000 facf 	bl	800f944 <_sbrk_r>
 800f3a6:	6020      	str	r0, [r4, #0]
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	f000 faca 	bl	800f944 <_sbrk_r>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d124      	bne.n	800f3fe <_malloc_r+0x92>
 800f3b4:	230c      	movs	r3, #12
 800f3b6:	6033      	str	r3, [r6, #0]
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 fd59 	bl	800fe70 <__malloc_unlock>
 800f3be:	e7e4      	b.n	800f38a <_malloc_r+0x1e>
 800f3c0:	680b      	ldr	r3, [r1, #0]
 800f3c2:	1b5b      	subs	r3, r3, r5
 800f3c4:	d418      	bmi.n	800f3f8 <_malloc_r+0x8c>
 800f3c6:	2b0b      	cmp	r3, #11
 800f3c8:	d90f      	bls.n	800f3ea <_malloc_r+0x7e>
 800f3ca:	600b      	str	r3, [r1, #0]
 800f3cc:	50cd      	str	r5, [r1, r3]
 800f3ce:	18cc      	adds	r4, r1, r3
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f000 fd4d 	bl	800fe70 <__malloc_unlock>
 800f3d6:	f104 000b 	add.w	r0, r4, #11
 800f3da:	1d23      	adds	r3, r4, #4
 800f3dc:	f020 0007 	bic.w	r0, r0, #7
 800f3e0:	1ac3      	subs	r3, r0, r3
 800f3e2:	d0d3      	beq.n	800f38c <_malloc_r+0x20>
 800f3e4:	425a      	negs	r2, r3
 800f3e6:	50e2      	str	r2, [r4, r3]
 800f3e8:	e7d0      	b.n	800f38c <_malloc_r+0x20>
 800f3ea:	428c      	cmp	r4, r1
 800f3ec:	684b      	ldr	r3, [r1, #4]
 800f3ee:	bf16      	itet	ne
 800f3f0:	6063      	strne	r3, [r4, #4]
 800f3f2:	6013      	streq	r3, [r2, #0]
 800f3f4:	460c      	movne	r4, r1
 800f3f6:	e7eb      	b.n	800f3d0 <_malloc_r+0x64>
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	6849      	ldr	r1, [r1, #4]
 800f3fc:	e7cc      	b.n	800f398 <_malloc_r+0x2c>
 800f3fe:	1cc4      	adds	r4, r0, #3
 800f400:	f024 0403 	bic.w	r4, r4, #3
 800f404:	42a0      	cmp	r0, r4
 800f406:	d005      	beq.n	800f414 <_malloc_r+0xa8>
 800f408:	1a21      	subs	r1, r4, r0
 800f40a:	4630      	mov	r0, r6
 800f40c:	f000 fa9a 	bl	800f944 <_sbrk_r>
 800f410:	3001      	adds	r0, #1
 800f412:	d0cf      	beq.n	800f3b4 <_malloc_r+0x48>
 800f414:	6025      	str	r5, [r4, #0]
 800f416:	e7db      	b.n	800f3d0 <_malloc_r+0x64>
 800f418:	200004c0 	.word	0x200004c0
 800f41c:	200004c4 	.word	0x200004c4

0800f420 <__ssputs_r>:
 800f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	688e      	ldr	r6, [r1, #8]
 800f426:	429e      	cmp	r6, r3
 800f428:	4682      	mov	sl, r0
 800f42a:	460c      	mov	r4, r1
 800f42c:	4690      	mov	r8, r2
 800f42e:	4699      	mov	r9, r3
 800f430:	d837      	bhi.n	800f4a2 <__ssputs_r+0x82>
 800f432:	898a      	ldrh	r2, [r1, #12]
 800f434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f438:	d031      	beq.n	800f49e <__ssputs_r+0x7e>
 800f43a:	6825      	ldr	r5, [r4, #0]
 800f43c:	6909      	ldr	r1, [r1, #16]
 800f43e:	1a6f      	subs	r7, r5, r1
 800f440:	6965      	ldr	r5, [r4, #20]
 800f442:	2302      	movs	r3, #2
 800f444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f448:	fb95 f5f3 	sdiv	r5, r5, r3
 800f44c:	f109 0301 	add.w	r3, r9, #1
 800f450:	443b      	add	r3, r7
 800f452:	429d      	cmp	r5, r3
 800f454:	bf38      	it	cc
 800f456:	461d      	movcc	r5, r3
 800f458:	0553      	lsls	r3, r2, #21
 800f45a:	d530      	bpl.n	800f4be <__ssputs_r+0x9e>
 800f45c:	4629      	mov	r1, r5
 800f45e:	f7ff ff85 	bl	800f36c <_malloc_r>
 800f462:	4606      	mov	r6, r0
 800f464:	b950      	cbnz	r0, 800f47c <__ssputs_r+0x5c>
 800f466:	230c      	movs	r3, #12
 800f468:	f8ca 3000 	str.w	r3, [sl]
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f472:	81a3      	strh	r3, [r4, #12]
 800f474:	f04f 30ff 	mov.w	r0, #4294967295
 800f478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f47c:	463a      	mov	r2, r7
 800f47e:	6921      	ldr	r1, [r4, #16]
 800f480:	f7fc fb6c 	bl	800bb5c <memcpy>
 800f484:	89a3      	ldrh	r3, [r4, #12]
 800f486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f48e:	81a3      	strh	r3, [r4, #12]
 800f490:	6126      	str	r6, [r4, #16]
 800f492:	6165      	str	r5, [r4, #20]
 800f494:	443e      	add	r6, r7
 800f496:	1bed      	subs	r5, r5, r7
 800f498:	6026      	str	r6, [r4, #0]
 800f49a:	60a5      	str	r5, [r4, #8]
 800f49c:	464e      	mov	r6, r9
 800f49e:	454e      	cmp	r6, r9
 800f4a0:	d900      	bls.n	800f4a4 <__ssputs_r+0x84>
 800f4a2:	464e      	mov	r6, r9
 800f4a4:	4632      	mov	r2, r6
 800f4a6:	4641      	mov	r1, r8
 800f4a8:	6820      	ldr	r0, [r4, #0]
 800f4aa:	f000 fcc7 	bl	800fe3c <memmove>
 800f4ae:	68a3      	ldr	r3, [r4, #8]
 800f4b0:	1b9b      	subs	r3, r3, r6
 800f4b2:	60a3      	str	r3, [r4, #8]
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	441e      	add	r6, r3
 800f4b8:	6026      	str	r6, [r4, #0]
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	e7dc      	b.n	800f478 <__ssputs_r+0x58>
 800f4be:	462a      	mov	r2, r5
 800f4c0:	f000 fcd7 	bl	800fe72 <_realloc_r>
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d1e2      	bne.n	800f490 <__ssputs_r+0x70>
 800f4ca:	6921      	ldr	r1, [r4, #16]
 800f4cc:	4650      	mov	r0, sl
 800f4ce:	f7ff feff 	bl	800f2d0 <_free_r>
 800f4d2:	e7c8      	b.n	800f466 <__ssputs_r+0x46>

0800f4d4 <_svfiprintf_r>:
 800f4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d8:	461d      	mov	r5, r3
 800f4da:	898b      	ldrh	r3, [r1, #12]
 800f4dc:	061f      	lsls	r7, r3, #24
 800f4de:	b09d      	sub	sp, #116	; 0x74
 800f4e0:	4680      	mov	r8, r0
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	4616      	mov	r6, r2
 800f4e6:	d50f      	bpl.n	800f508 <_svfiprintf_r+0x34>
 800f4e8:	690b      	ldr	r3, [r1, #16]
 800f4ea:	b96b      	cbnz	r3, 800f508 <_svfiprintf_r+0x34>
 800f4ec:	2140      	movs	r1, #64	; 0x40
 800f4ee:	f7ff ff3d 	bl	800f36c <_malloc_r>
 800f4f2:	6020      	str	r0, [r4, #0]
 800f4f4:	6120      	str	r0, [r4, #16]
 800f4f6:	b928      	cbnz	r0, 800f504 <_svfiprintf_r+0x30>
 800f4f8:	230c      	movs	r3, #12
 800f4fa:	f8c8 3000 	str.w	r3, [r8]
 800f4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f502:	e0c8      	b.n	800f696 <_svfiprintf_r+0x1c2>
 800f504:	2340      	movs	r3, #64	; 0x40
 800f506:	6163      	str	r3, [r4, #20]
 800f508:	2300      	movs	r3, #0
 800f50a:	9309      	str	r3, [sp, #36]	; 0x24
 800f50c:	2320      	movs	r3, #32
 800f50e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f512:	2330      	movs	r3, #48	; 0x30
 800f514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f518:	9503      	str	r5, [sp, #12]
 800f51a:	f04f 0b01 	mov.w	fp, #1
 800f51e:	4637      	mov	r7, r6
 800f520:	463d      	mov	r5, r7
 800f522:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f526:	b10b      	cbz	r3, 800f52c <_svfiprintf_r+0x58>
 800f528:	2b25      	cmp	r3, #37	; 0x25
 800f52a:	d13e      	bne.n	800f5aa <_svfiprintf_r+0xd6>
 800f52c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f530:	d00b      	beq.n	800f54a <_svfiprintf_r+0x76>
 800f532:	4653      	mov	r3, sl
 800f534:	4632      	mov	r2, r6
 800f536:	4621      	mov	r1, r4
 800f538:	4640      	mov	r0, r8
 800f53a:	f7ff ff71 	bl	800f420 <__ssputs_r>
 800f53e:	3001      	adds	r0, #1
 800f540:	f000 80a4 	beq.w	800f68c <_svfiprintf_r+0x1b8>
 800f544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f546:	4453      	add	r3, sl
 800f548:	9309      	str	r3, [sp, #36]	; 0x24
 800f54a:	783b      	ldrb	r3, [r7, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f000 809d 	beq.w	800f68c <_svfiprintf_r+0x1b8>
 800f552:	2300      	movs	r3, #0
 800f554:	f04f 32ff 	mov.w	r2, #4294967295
 800f558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f55c:	9304      	str	r3, [sp, #16]
 800f55e:	9307      	str	r3, [sp, #28]
 800f560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f564:	931a      	str	r3, [sp, #104]	; 0x68
 800f566:	462f      	mov	r7, r5
 800f568:	2205      	movs	r2, #5
 800f56a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f56e:	4850      	ldr	r0, [pc, #320]	; (800f6b0 <_svfiprintf_r+0x1dc>)
 800f570:	f7f0 fe3e 	bl	80001f0 <memchr>
 800f574:	9b04      	ldr	r3, [sp, #16]
 800f576:	b9d0      	cbnz	r0, 800f5ae <_svfiprintf_r+0xda>
 800f578:	06d9      	lsls	r1, r3, #27
 800f57a:	bf44      	itt	mi
 800f57c:	2220      	movmi	r2, #32
 800f57e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f582:	071a      	lsls	r2, r3, #28
 800f584:	bf44      	itt	mi
 800f586:	222b      	movmi	r2, #43	; 0x2b
 800f588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f58c:	782a      	ldrb	r2, [r5, #0]
 800f58e:	2a2a      	cmp	r2, #42	; 0x2a
 800f590:	d015      	beq.n	800f5be <_svfiprintf_r+0xea>
 800f592:	9a07      	ldr	r2, [sp, #28]
 800f594:	462f      	mov	r7, r5
 800f596:	2000      	movs	r0, #0
 800f598:	250a      	movs	r5, #10
 800f59a:	4639      	mov	r1, r7
 800f59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5a0:	3b30      	subs	r3, #48	; 0x30
 800f5a2:	2b09      	cmp	r3, #9
 800f5a4:	d94d      	bls.n	800f642 <_svfiprintf_r+0x16e>
 800f5a6:	b1b8      	cbz	r0, 800f5d8 <_svfiprintf_r+0x104>
 800f5a8:	e00f      	b.n	800f5ca <_svfiprintf_r+0xf6>
 800f5aa:	462f      	mov	r7, r5
 800f5ac:	e7b8      	b.n	800f520 <_svfiprintf_r+0x4c>
 800f5ae:	4a40      	ldr	r2, [pc, #256]	; (800f6b0 <_svfiprintf_r+0x1dc>)
 800f5b0:	1a80      	subs	r0, r0, r2
 800f5b2:	fa0b f000 	lsl.w	r0, fp, r0
 800f5b6:	4318      	orrs	r0, r3
 800f5b8:	9004      	str	r0, [sp, #16]
 800f5ba:	463d      	mov	r5, r7
 800f5bc:	e7d3      	b.n	800f566 <_svfiprintf_r+0x92>
 800f5be:	9a03      	ldr	r2, [sp, #12]
 800f5c0:	1d11      	adds	r1, r2, #4
 800f5c2:	6812      	ldr	r2, [r2, #0]
 800f5c4:	9103      	str	r1, [sp, #12]
 800f5c6:	2a00      	cmp	r2, #0
 800f5c8:	db01      	blt.n	800f5ce <_svfiprintf_r+0xfa>
 800f5ca:	9207      	str	r2, [sp, #28]
 800f5cc:	e004      	b.n	800f5d8 <_svfiprintf_r+0x104>
 800f5ce:	4252      	negs	r2, r2
 800f5d0:	f043 0302 	orr.w	r3, r3, #2
 800f5d4:	9207      	str	r2, [sp, #28]
 800f5d6:	9304      	str	r3, [sp, #16]
 800f5d8:	783b      	ldrb	r3, [r7, #0]
 800f5da:	2b2e      	cmp	r3, #46	; 0x2e
 800f5dc:	d10c      	bne.n	800f5f8 <_svfiprintf_r+0x124>
 800f5de:	787b      	ldrb	r3, [r7, #1]
 800f5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5e2:	d133      	bne.n	800f64c <_svfiprintf_r+0x178>
 800f5e4:	9b03      	ldr	r3, [sp, #12]
 800f5e6:	1d1a      	adds	r2, r3, #4
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	9203      	str	r2, [sp, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	bfb8      	it	lt
 800f5f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5f4:	3702      	adds	r7, #2
 800f5f6:	9305      	str	r3, [sp, #20]
 800f5f8:	4d2e      	ldr	r5, [pc, #184]	; (800f6b4 <_svfiprintf_r+0x1e0>)
 800f5fa:	7839      	ldrb	r1, [r7, #0]
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	4628      	mov	r0, r5
 800f600:	f7f0 fdf6 	bl	80001f0 <memchr>
 800f604:	b138      	cbz	r0, 800f616 <_svfiprintf_r+0x142>
 800f606:	2340      	movs	r3, #64	; 0x40
 800f608:	1b40      	subs	r0, r0, r5
 800f60a:	fa03 f000 	lsl.w	r0, r3, r0
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	4303      	orrs	r3, r0
 800f612:	3701      	adds	r7, #1
 800f614:	9304      	str	r3, [sp, #16]
 800f616:	7839      	ldrb	r1, [r7, #0]
 800f618:	4827      	ldr	r0, [pc, #156]	; (800f6b8 <_svfiprintf_r+0x1e4>)
 800f61a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f61e:	2206      	movs	r2, #6
 800f620:	1c7e      	adds	r6, r7, #1
 800f622:	f7f0 fde5 	bl	80001f0 <memchr>
 800f626:	2800      	cmp	r0, #0
 800f628:	d038      	beq.n	800f69c <_svfiprintf_r+0x1c8>
 800f62a:	4b24      	ldr	r3, [pc, #144]	; (800f6bc <_svfiprintf_r+0x1e8>)
 800f62c:	bb13      	cbnz	r3, 800f674 <_svfiprintf_r+0x1a0>
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	3307      	adds	r3, #7
 800f632:	f023 0307 	bic.w	r3, r3, #7
 800f636:	3308      	adds	r3, #8
 800f638:	9303      	str	r3, [sp, #12]
 800f63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63c:	444b      	add	r3, r9
 800f63e:	9309      	str	r3, [sp, #36]	; 0x24
 800f640:	e76d      	b.n	800f51e <_svfiprintf_r+0x4a>
 800f642:	fb05 3202 	mla	r2, r5, r2, r3
 800f646:	2001      	movs	r0, #1
 800f648:	460f      	mov	r7, r1
 800f64a:	e7a6      	b.n	800f59a <_svfiprintf_r+0xc6>
 800f64c:	2300      	movs	r3, #0
 800f64e:	3701      	adds	r7, #1
 800f650:	9305      	str	r3, [sp, #20]
 800f652:	4619      	mov	r1, r3
 800f654:	250a      	movs	r5, #10
 800f656:	4638      	mov	r0, r7
 800f658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f65c:	3a30      	subs	r2, #48	; 0x30
 800f65e:	2a09      	cmp	r2, #9
 800f660:	d903      	bls.n	800f66a <_svfiprintf_r+0x196>
 800f662:	2b00      	cmp	r3, #0
 800f664:	d0c8      	beq.n	800f5f8 <_svfiprintf_r+0x124>
 800f666:	9105      	str	r1, [sp, #20]
 800f668:	e7c6      	b.n	800f5f8 <_svfiprintf_r+0x124>
 800f66a:	fb05 2101 	mla	r1, r5, r1, r2
 800f66e:	2301      	movs	r3, #1
 800f670:	4607      	mov	r7, r0
 800f672:	e7f0      	b.n	800f656 <_svfiprintf_r+0x182>
 800f674:	ab03      	add	r3, sp, #12
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4622      	mov	r2, r4
 800f67a:	4b11      	ldr	r3, [pc, #68]	; (800f6c0 <_svfiprintf_r+0x1ec>)
 800f67c:	a904      	add	r1, sp, #16
 800f67e:	4640      	mov	r0, r8
 800f680:	f7fc fb14 	bl	800bcac <_printf_float>
 800f684:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f688:	4681      	mov	r9, r0
 800f68a:	d1d6      	bne.n	800f63a <_svfiprintf_r+0x166>
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	065b      	lsls	r3, r3, #25
 800f690:	f53f af35 	bmi.w	800f4fe <_svfiprintf_r+0x2a>
 800f694:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f696:	b01d      	add	sp, #116	; 0x74
 800f698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	ab03      	add	r3, sp, #12
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <_svfiprintf_r+0x1ec>)
 800f6a4:	a904      	add	r1, sp, #16
 800f6a6:	4640      	mov	r0, r8
 800f6a8:	f7fc fdb6 	bl	800c218 <_printf_i>
 800f6ac:	e7ea      	b.n	800f684 <_svfiprintf_r+0x1b0>
 800f6ae:	bf00      	nop
 800f6b0:	08010924 	.word	0x08010924
 800f6b4:	0801092a 	.word	0x0801092a
 800f6b8:	0801092e 	.word	0x0801092e
 800f6bc:	0800bcad 	.word	0x0800bcad
 800f6c0:	0800f421 	.word	0x0800f421

0800f6c4 <__sfputc_r>:
 800f6c4:	6893      	ldr	r3, [r2, #8]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	b410      	push	{r4}
 800f6cc:	6093      	str	r3, [r2, #8]
 800f6ce:	da08      	bge.n	800f6e2 <__sfputc_r+0x1e>
 800f6d0:	6994      	ldr	r4, [r2, #24]
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	db01      	blt.n	800f6da <__sfputc_r+0x16>
 800f6d6:	290a      	cmp	r1, #10
 800f6d8:	d103      	bne.n	800f6e2 <__sfputc_r+0x1e>
 800f6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6de:	f000 b997 	b.w	800fa10 <__swbuf_r>
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	1c58      	adds	r0, r3, #1
 800f6e6:	6010      	str	r0, [r2, #0]
 800f6e8:	7019      	strb	r1, [r3, #0]
 800f6ea:	4608      	mov	r0, r1
 800f6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <__sfputs_r>:
 800f6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460f      	mov	r7, r1
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	18d5      	adds	r5, r2, r3
 800f6fc:	42ac      	cmp	r4, r5
 800f6fe:	d101      	bne.n	800f704 <__sfputs_r+0x12>
 800f700:	2000      	movs	r0, #0
 800f702:	e007      	b.n	800f714 <__sfputs_r+0x22>
 800f704:	463a      	mov	r2, r7
 800f706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff ffda 	bl	800f6c4 <__sfputc_r>
 800f710:	1c43      	adds	r3, r0, #1
 800f712:	d1f3      	bne.n	800f6fc <__sfputs_r+0xa>
 800f714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f718 <_vfiprintf_r>:
 800f718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71c:	460c      	mov	r4, r1
 800f71e:	b09d      	sub	sp, #116	; 0x74
 800f720:	4617      	mov	r7, r2
 800f722:	461d      	mov	r5, r3
 800f724:	4606      	mov	r6, r0
 800f726:	b118      	cbz	r0, 800f730 <_vfiprintf_r+0x18>
 800f728:	6983      	ldr	r3, [r0, #24]
 800f72a:	b90b      	cbnz	r3, 800f730 <_vfiprintf_r+0x18>
 800f72c:	f7fe fde4 	bl	800e2f8 <__sinit>
 800f730:	4b7c      	ldr	r3, [pc, #496]	; (800f924 <_vfiprintf_r+0x20c>)
 800f732:	429c      	cmp	r4, r3
 800f734:	d158      	bne.n	800f7e8 <_vfiprintf_r+0xd0>
 800f736:	6874      	ldr	r4, [r6, #4]
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	0718      	lsls	r0, r3, #28
 800f73c:	d55e      	bpl.n	800f7fc <_vfiprintf_r+0xe4>
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d05b      	beq.n	800f7fc <_vfiprintf_r+0xe4>
 800f744:	2300      	movs	r3, #0
 800f746:	9309      	str	r3, [sp, #36]	; 0x24
 800f748:	2320      	movs	r3, #32
 800f74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f74e:	2330      	movs	r3, #48	; 0x30
 800f750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f754:	9503      	str	r5, [sp, #12]
 800f756:	f04f 0b01 	mov.w	fp, #1
 800f75a:	46b8      	mov	r8, r7
 800f75c:	4645      	mov	r5, r8
 800f75e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f762:	b10b      	cbz	r3, 800f768 <_vfiprintf_r+0x50>
 800f764:	2b25      	cmp	r3, #37	; 0x25
 800f766:	d154      	bne.n	800f812 <_vfiprintf_r+0xfa>
 800f768:	ebb8 0a07 	subs.w	sl, r8, r7
 800f76c:	d00b      	beq.n	800f786 <_vfiprintf_r+0x6e>
 800f76e:	4653      	mov	r3, sl
 800f770:	463a      	mov	r2, r7
 800f772:	4621      	mov	r1, r4
 800f774:	4630      	mov	r0, r6
 800f776:	f7ff ffbc 	bl	800f6f2 <__sfputs_r>
 800f77a:	3001      	adds	r0, #1
 800f77c:	f000 80c2 	beq.w	800f904 <_vfiprintf_r+0x1ec>
 800f780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f782:	4453      	add	r3, sl
 800f784:	9309      	str	r3, [sp, #36]	; 0x24
 800f786:	f898 3000 	ldrb.w	r3, [r8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 80ba 	beq.w	800f904 <_vfiprintf_r+0x1ec>
 800f790:	2300      	movs	r3, #0
 800f792:	f04f 32ff 	mov.w	r2, #4294967295
 800f796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	9307      	str	r3, [sp, #28]
 800f79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f7a4:	46a8      	mov	r8, r5
 800f7a6:	2205      	movs	r2, #5
 800f7a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f7ac:	485e      	ldr	r0, [pc, #376]	; (800f928 <_vfiprintf_r+0x210>)
 800f7ae:	f7f0 fd1f 	bl	80001f0 <memchr>
 800f7b2:	9b04      	ldr	r3, [sp, #16]
 800f7b4:	bb78      	cbnz	r0, 800f816 <_vfiprintf_r+0xfe>
 800f7b6:	06d9      	lsls	r1, r3, #27
 800f7b8:	bf44      	itt	mi
 800f7ba:	2220      	movmi	r2, #32
 800f7bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f7c0:	071a      	lsls	r2, r3, #28
 800f7c2:	bf44      	itt	mi
 800f7c4:	222b      	movmi	r2, #43	; 0x2b
 800f7c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f7ca:	782a      	ldrb	r2, [r5, #0]
 800f7cc:	2a2a      	cmp	r2, #42	; 0x2a
 800f7ce:	d02a      	beq.n	800f826 <_vfiprintf_r+0x10e>
 800f7d0:	9a07      	ldr	r2, [sp, #28]
 800f7d2:	46a8      	mov	r8, r5
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	250a      	movs	r5, #10
 800f7d8:	4641      	mov	r1, r8
 800f7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7de:	3b30      	subs	r3, #48	; 0x30
 800f7e0:	2b09      	cmp	r3, #9
 800f7e2:	d969      	bls.n	800f8b8 <_vfiprintf_r+0x1a0>
 800f7e4:	b360      	cbz	r0, 800f840 <_vfiprintf_r+0x128>
 800f7e6:	e024      	b.n	800f832 <_vfiprintf_r+0x11a>
 800f7e8:	4b50      	ldr	r3, [pc, #320]	; (800f92c <_vfiprintf_r+0x214>)
 800f7ea:	429c      	cmp	r4, r3
 800f7ec:	d101      	bne.n	800f7f2 <_vfiprintf_r+0xda>
 800f7ee:	68b4      	ldr	r4, [r6, #8]
 800f7f0:	e7a2      	b.n	800f738 <_vfiprintf_r+0x20>
 800f7f2:	4b4f      	ldr	r3, [pc, #316]	; (800f930 <_vfiprintf_r+0x218>)
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	bf08      	it	eq
 800f7f8:	68f4      	ldreq	r4, [r6, #12]
 800f7fa:	e79d      	b.n	800f738 <_vfiprintf_r+0x20>
 800f7fc:	4621      	mov	r1, r4
 800f7fe:	4630      	mov	r0, r6
 800f800:	f000 f978 	bl	800faf4 <__swsetup_r>
 800f804:	2800      	cmp	r0, #0
 800f806:	d09d      	beq.n	800f744 <_vfiprintf_r+0x2c>
 800f808:	f04f 30ff 	mov.w	r0, #4294967295
 800f80c:	b01d      	add	sp, #116	; 0x74
 800f80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f812:	46a8      	mov	r8, r5
 800f814:	e7a2      	b.n	800f75c <_vfiprintf_r+0x44>
 800f816:	4a44      	ldr	r2, [pc, #272]	; (800f928 <_vfiprintf_r+0x210>)
 800f818:	1a80      	subs	r0, r0, r2
 800f81a:	fa0b f000 	lsl.w	r0, fp, r0
 800f81e:	4318      	orrs	r0, r3
 800f820:	9004      	str	r0, [sp, #16]
 800f822:	4645      	mov	r5, r8
 800f824:	e7be      	b.n	800f7a4 <_vfiprintf_r+0x8c>
 800f826:	9a03      	ldr	r2, [sp, #12]
 800f828:	1d11      	adds	r1, r2, #4
 800f82a:	6812      	ldr	r2, [r2, #0]
 800f82c:	9103      	str	r1, [sp, #12]
 800f82e:	2a00      	cmp	r2, #0
 800f830:	db01      	blt.n	800f836 <_vfiprintf_r+0x11e>
 800f832:	9207      	str	r2, [sp, #28]
 800f834:	e004      	b.n	800f840 <_vfiprintf_r+0x128>
 800f836:	4252      	negs	r2, r2
 800f838:	f043 0302 	orr.w	r3, r3, #2
 800f83c:	9207      	str	r2, [sp, #28]
 800f83e:	9304      	str	r3, [sp, #16]
 800f840:	f898 3000 	ldrb.w	r3, [r8]
 800f844:	2b2e      	cmp	r3, #46	; 0x2e
 800f846:	d10e      	bne.n	800f866 <_vfiprintf_r+0x14e>
 800f848:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f84c:	2b2a      	cmp	r3, #42	; 0x2a
 800f84e:	d138      	bne.n	800f8c2 <_vfiprintf_r+0x1aa>
 800f850:	9b03      	ldr	r3, [sp, #12]
 800f852:	1d1a      	adds	r2, r3, #4
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	9203      	str	r2, [sp, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	bfb8      	it	lt
 800f85c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f860:	f108 0802 	add.w	r8, r8, #2
 800f864:	9305      	str	r3, [sp, #20]
 800f866:	4d33      	ldr	r5, [pc, #204]	; (800f934 <_vfiprintf_r+0x21c>)
 800f868:	f898 1000 	ldrb.w	r1, [r8]
 800f86c:	2203      	movs	r2, #3
 800f86e:	4628      	mov	r0, r5
 800f870:	f7f0 fcbe 	bl	80001f0 <memchr>
 800f874:	b140      	cbz	r0, 800f888 <_vfiprintf_r+0x170>
 800f876:	2340      	movs	r3, #64	; 0x40
 800f878:	1b40      	subs	r0, r0, r5
 800f87a:	fa03 f000 	lsl.w	r0, r3, r0
 800f87e:	9b04      	ldr	r3, [sp, #16]
 800f880:	4303      	orrs	r3, r0
 800f882:	f108 0801 	add.w	r8, r8, #1
 800f886:	9304      	str	r3, [sp, #16]
 800f888:	f898 1000 	ldrb.w	r1, [r8]
 800f88c:	482a      	ldr	r0, [pc, #168]	; (800f938 <_vfiprintf_r+0x220>)
 800f88e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f892:	2206      	movs	r2, #6
 800f894:	f108 0701 	add.w	r7, r8, #1
 800f898:	f7f0 fcaa 	bl	80001f0 <memchr>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d037      	beq.n	800f910 <_vfiprintf_r+0x1f8>
 800f8a0:	4b26      	ldr	r3, [pc, #152]	; (800f93c <_vfiprintf_r+0x224>)
 800f8a2:	bb1b      	cbnz	r3, 800f8ec <_vfiprintf_r+0x1d4>
 800f8a4:	9b03      	ldr	r3, [sp, #12]
 800f8a6:	3307      	adds	r3, #7
 800f8a8:	f023 0307 	bic.w	r3, r3, #7
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	9303      	str	r3, [sp, #12]
 800f8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b2:	444b      	add	r3, r9
 800f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b6:	e750      	b.n	800f75a <_vfiprintf_r+0x42>
 800f8b8:	fb05 3202 	mla	r2, r5, r2, r3
 800f8bc:	2001      	movs	r0, #1
 800f8be:	4688      	mov	r8, r1
 800f8c0:	e78a      	b.n	800f7d8 <_vfiprintf_r+0xc0>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	f108 0801 	add.w	r8, r8, #1
 800f8c8:	9305      	str	r3, [sp, #20]
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	250a      	movs	r5, #10
 800f8ce:	4640      	mov	r0, r8
 800f8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8d4:	3a30      	subs	r2, #48	; 0x30
 800f8d6:	2a09      	cmp	r2, #9
 800f8d8:	d903      	bls.n	800f8e2 <_vfiprintf_r+0x1ca>
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0c3      	beq.n	800f866 <_vfiprintf_r+0x14e>
 800f8de:	9105      	str	r1, [sp, #20]
 800f8e0:	e7c1      	b.n	800f866 <_vfiprintf_r+0x14e>
 800f8e2:	fb05 2101 	mla	r1, r5, r1, r2
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	4680      	mov	r8, r0
 800f8ea:	e7f0      	b.n	800f8ce <_vfiprintf_r+0x1b6>
 800f8ec:	ab03      	add	r3, sp, #12
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	4b13      	ldr	r3, [pc, #76]	; (800f940 <_vfiprintf_r+0x228>)
 800f8f4:	a904      	add	r1, sp, #16
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f7fc f9d8 	bl	800bcac <_printf_float>
 800f8fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f900:	4681      	mov	r9, r0
 800f902:	d1d5      	bne.n	800f8b0 <_vfiprintf_r+0x198>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	065b      	lsls	r3, r3, #25
 800f908:	f53f af7e 	bmi.w	800f808 <_vfiprintf_r+0xf0>
 800f90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f90e:	e77d      	b.n	800f80c <_vfiprintf_r+0xf4>
 800f910:	ab03      	add	r3, sp, #12
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	4622      	mov	r2, r4
 800f916:	4b0a      	ldr	r3, [pc, #40]	; (800f940 <_vfiprintf_r+0x228>)
 800f918:	a904      	add	r1, sp, #16
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7fc fc7c 	bl	800c218 <_printf_i>
 800f920:	e7ec      	b.n	800f8fc <_vfiprintf_r+0x1e4>
 800f922:	bf00      	nop
 800f924:	080107d8 	.word	0x080107d8
 800f928:	08010924 	.word	0x08010924
 800f92c:	080107f8 	.word	0x080107f8
 800f930:	080107b8 	.word	0x080107b8
 800f934:	0801092a 	.word	0x0801092a
 800f938:	0801092e 	.word	0x0801092e
 800f93c:	0800bcad 	.word	0x0800bcad
 800f940:	0800f6f3 	.word	0x0800f6f3

0800f944 <_sbrk_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4c06      	ldr	r4, [pc, #24]	; (800f960 <_sbrk_r+0x1c>)
 800f948:	2300      	movs	r3, #0
 800f94a:	4605      	mov	r5, r0
 800f94c:	4608      	mov	r0, r1
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	f7f1 fef0 	bl	8001734 <_sbrk>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_sbrk_r+0x1a>
 800f958:	6823      	ldr	r3, [r4, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_sbrk_r+0x1a>
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	20000970 	.word	0x20000970

0800f964 <__sread>:
 800f964:	b510      	push	{r4, lr}
 800f966:	460c      	mov	r4, r1
 800f968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f96c:	f000 faa8 	bl	800fec0 <_read_r>
 800f970:	2800      	cmp	r0, #0
 800f972:	bfab      	itete	ge
 800f974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f976:	89a3      	ldrhlt	r3, [r4, #12]
 800f978:	181b      	addge	r3, r3, r0
 800f97a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f97e:	bfac      	ite	ge
 800f980:	6563      	strge	r3, [r4, #84]	; 0x54
 800f982:	81a3      	strhlt	r3, [r4, #12]
 800f984:	bd10      	pop	{r4, pc}

0800f986 <__swrite>:
 800f986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98a:	461f      	mov	r7, r3
 800f98c:	898b      	ldrh	r3, [r1, #12]
 800f98e:	05db      	lsls	r3, r3, #23
 800f990:	4605      	mov	r5, r0
 800f992:	460c      	mov	r4, r1
 800f994:	4616      	mov	r6, r2
 800f996:	d505      	bpl.n	800f9a4 <__swrite+0x1e>
 800f998:	2302      	movs	r3, #2
 800f99a:	2200      	movs	r2, #0
 800f99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a0:	f000 f9d6 	bl	800fd50 <_lseek_r>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	463b      	mov	r3, r7
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ba:	f000 b889 	b.w	800fad0 <_write_r>

0800f9be <__sseek>:
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c6:	f000 f9c3 	bl	800fd50 <_lseek_r>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	bf15      	itete	ne
 800f9d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9da:	81a3      	strheq	r3, [r4, #12]
 800f9dc:	bf18      	it	ne
 800f9de:	81a3      	strhne	r3, [r4, #12]
 800f9e0:	bd10      	pop	{r4, pc}

0800f9e2 <__sclose>:
 800f9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e6:	f000 b8f3 	b.w	800fbd0 <_close_r>

0800f9ea <strncmp>:
 800f9ea:	b510      	push	{r4, lr}
 800f9ec:	b16a      	cbz	r2, 800fa0a <strncmp+0x20>
 800f9ee:	3901      	subs	r1, #1
 800f9f0:	1884      	adds	r4, r0, r2
 800f9f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f9f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d103      	bne.n	800fa06 <strncmp+0x1c>
 800f9fe:	42a0      	cmp	r0, r4
 800fa00:	d001      	beq.n	800fa06 <strncmp+0x1c>
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1f5      	bne.n	800f9f2 <strncmp+0x8>
 800fa06:	1a98      	subs	r0, r3, r2
 800fa08:	bd10      	pop	{r4, pc}
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	e7fc      	b.n	800fa08 <strncmp+0x1e>
	...

0800fa10 <__swbuf_r>:
 800fa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa12:	460e      	mov	r6, r1
 800fa14:	4614      	mov	r4, r2
 800fa16:	4605      	mov	r5, r0
 800fa18:	b118      	cbz	r0, 800fa22 <__swbuf_r+0x12>
 800fa1a:	6983      	ldr	r3, [r0, #24]
 800fa1c:	b90b      	cbnz	r3, 800fa22 <__swbuf_r+0x12>
 800fa1e:	f7fe fc6b 	bl	800e2f8 <__sinit>
 800fa22:	4b21      	ldr	r3, [pc, #132]	; (800faa8 <__swbuf_r+0x98>)
 800fa24:	429c      	cmp	r4, r3
 800fa26:	d12a      	bne.n	800fa7e <__swbuf_r+0x6e>
 800fa28:	686c      	ldr	r4, [r5, #4]
 800fa2a:	69a3      	ldr	r3, [r4, #24]
 800fa2c:	60a3      	str	r3, [r4, #8]
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	071a      	lsls	r2, r3, #28
 800fa32:	d52e      	bpl.n	800fa92 <__swbuf_r+0x82>
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	b363      	cbz	r3, 800fa92 <__swbuf_r+0x82>
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	6820      	ldr	r0, [r4, #0]
 800fa3c:	1ac0      	subs	r0, r0, r3
 800fa3e:	6963      	ldr	r3, [r4, #20]
 800fa40:	b2f6      	uxtb	r6, r6
 800fa42:	4283      	cmp	r3, r0
 800fa44:	4637      	mov	r7, r6
 800fa46:	dc04      	bgt.n	800fa52 <__swbuf_r+0x42>
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 f956 	bl	800fcfc <_fflush_r>
 800fa50:	bb28      	cbnz	r0, 800fa9e <__swbuf_r+0x8e>
 800fa52:	68a3      	ldr	r3, [r4, #8]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	60a3      	str	r3, [r4, #8]
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	6022      	str	r2, [r4, #0]
 800fa5e:	701e      	strb	r6, [r3, #0]
 800fa60:	6963      	ldr	r3, [r4, #20]
 800fa62:	3001      	adds	r0, #1
 800fa64:	4283      	cmp	r3, r0
 800fa66:	d004      	beq.n	800fa72 <__swbuf_r+0x62>
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	07db      	lsls	r3, r3, #31
 800fa6c:	d519      	bpl.n	800faa2 <__swbuf_r+0x92>
 800fa6e:	2e0a      	cmp	r6, #10
 800fa70:	d117      	bne.n	800faa2 <__swbuf_r+0x92>
 800fa72:	4621      	mov	r1, r4
 800fa74:	4628      	mov	r0, r5
 800fa76:	f000 f941 	bl	800fcfc <_fflush_r>
 800fa7a:	b190      	cbz	r0, 800faa2 <__swbuf_r+0x92>
 800fa7c:	e00f      	b.n	800fa9e <__swbuf_r+0x8e>
 800fa7e:	4b0b      	ldr	r3, [pc, #44]	; (800faac <__swbuf_r+0x9c>)
 800fa80:	429c      	cmp	r4, r3
 800fa82:	d101      	bne.n	800fa88 <__swbuf_r+0x78>
 800fa84:	68ac      	ldr	r4, [r5, #8]
 800fa86:	e7d0      	b.n	800fa2a <__swbuf_r+0x1a>
 800fa88:	4b09      	ldr	r3, [pc, #36]	; (800fab0 <__swbuf_r+0xa0>)
 800fa8a:	429c      	cmp	r4, r3
 800fa8c:	bf08      	it	eq
 800fa8e:	68ec      	ldreq	r4, [r5, #12]
 800fa90:	e7cb      	b.n	800fa2a <__swbuf_r+0x1a>
 800fa92:	4621      	mov	r1, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	f000 f82d 	bl	800faf4 <__swsetup_r>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d0cc      	beq.n	800fa38 <__swbuf_r+0x28>
 800fa9e:	f04f 37ff 	mov.w	r7, #4294967295
 800faa2:	4638      	mov	r0, r7
 800faa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa6:	bf00      	nop
 800faa8:	080107d8 	.word	0x080107d8
 800faac:	080107f8 	.word	0x080107f8
 800fab0:	080107b8 	.word	0x080107b8

0800fab4 <__ascii_wctomb>:
 800fab4:	b149      	cbz	r1, 800faca <__ascii_wctomb+0x16>
 800fab6:	2aff      	cmp	r2, #255	; 0xff
 800fab8:	bf85      	ittet	hi
 800faba:	238a      	movhi	r3, #138	; 0x8a
 800fabc:	6003      	strhi	r3, [r0, #0]
 800fabe:	700a      	strbls	r2, [r1, #0]
 800fac0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fac4:	bf98      	it	ls
 800fac6:	2001      	movls	r0, #1
 800fac8:	4770      	bx	lr
 800faca:	4608      	mov	r0, r1
 800facc:	4770      	bx	lr
	...

0800fad0 <_write_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4c07      	ldr	r4, [pc, #28]	; (800faf0 <_write_r+0x20>)
 800fad4:	4605      	mov	r5, r0
 800fad6:	4608      	mov	r0, r1
 800fad8:	4611      	mov	r1, r2
 800fada:	2200      	movs	r2, #0
 800fadc:	6022      	str	r2, [r4, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	f7f2 f804 	bl	8001aec <_write>
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d102      	bne.n	800faee <_write_r+0x1e>
 800fae8:	6823      	ldr	r3, [r4, #0]
 800faea:	b103      	cbz	r3, 800faee <_write_r+0x1e>
 800faec:	602b      	str	r3, [r5, #0]
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	20000970 	.word	0x20000970

0800faf4 <__swsetup_r>:
 800faf4:	4b32      	ldr	r3, [pc, #200]	; (800fbc0 <__swsetup_r+0xcc>)
 800faf6:	b570      	push	{r4, r5, r6, lr}
 800faf8:	681d      	ldr	r5, [r3, #0]
 800fafa:	4606      	mov	r6, r0
 800fafc:	460c      	mov	r4, r1
 800fafe:	b125      	cbz	r5, 800fb0a <__swsetup_r+0x16>
 800fb00:	69ab      	ldr	r3, [r5, #24]
 800fb02:	b913      	cbnz	r3, 800fb0a <__swsetup_r+0x16>
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7fe fbf7 	bl	800e2f8 <__sinit>
 800fb0a:	4b2e      	ldr	r3, [pc, #184]	; (800fbc4 <__swsetup_r+0xd0>)
 800fb0c:	429c      	cmp	r4, r3
 800fb0e:	d10f      	bne.n	800fb30 <__swsetup_r+0x3c>
 800fb10:	686c      	ldr	r4, [r5, #4]
 800fb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	0715      	lsls	r5, r2, #28
 800fb1a:	d42c      	bmi.n	800fb76 <__swsetup_r+0x82>
 800fb1c:	06d0      	lsls	r0, r2, #27
 800fb1e:	d411      	bmi.n	800fb44 <__swsetup_r+0x50>
 800fb20:	2209      	movs	r2, #9
 800fb22:	6032      	str	r2, [r6, #0]
 800fb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb28:	81a3      	strh	r3, [r4, #12]
 800fb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2e:	e03e      	b.n	800fbae <__swsetup_r+0xba>
 800fb30:	4b25      	ldr	r3, [pc, #148]	; (800fbc8 <__swsetup_r+0xd4>)
 800fb32:	429c      	cmp	r4, r3
 800fb34:	d101      	bne.n	800fb3a <__swsetup_r+0x46>
 800fb36:	68ac      	ldr	r4, [r5, #8]
 800fb38:	e7eb      	b.n	800fb12 <__swsetup_r+0x1e>
 800fb3a:	4b24      	ldr	r3, [pc, #144]	; (800fbcc <__swsetup_r+0xd8>)
 800fb3c:	429c      	cmp	r4, r3
 800fb3e:	bf08      	it	eq
 800fb40:	68ec      	ldreq	r4, [r5, #12]
 800fb42:	e7e6      	b.n	800fb12 <__swsetup_r+0x1e>
 800fb44:	0751      	lsls	r1, r2, #29
 800fb46:	d512      	bpl.n	800fb6e <__swsetup_r+0x7a>
 800fb48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb4a:	b141      	cbz	r1, 800fb5e <__swsetup_r+0x6a>
 800fb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb50:	4299      	cmp	r1, r3
 800fb52:	d002      	beq.n	800fb5a <__swsetup_r+0x66>
 800fb54:	4630      	mov	r0, r6
 800fb56:	f7ff fbbb 	bl	800f2d0 <_free_r>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	6363      	str	r3, [r4, #52]	; 0x34
 800fb5e:	89a3      	ldrh	r3, [r4, #12]
 800fb60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb64:	81a3      	strh	r3, [r4, #12]
 800fb66:	2300      	movs	r3, #0
 800fb68:	6063      	str	r3, [r4, #4]
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	6023      	str	r3, [r4, #0]
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	f043 0308 	orr.w	r3, r3, #8
 800fb74:	81a3      	strh	r3, [r4, #12]
 800fb76:	6923      	ldr	r3, [r4, #16]
 800fb78:	b94b      	cbnz	r3, 800fb8e <__swsetup_r+0x9a>
 800fb7a:	89a3      	ldrh	r3, [r4, #12]
 800fb7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb84:	d003      	beq.n	800fb8e <__swsetup_r+0x9a>
 800fb86:	4621      	mov	r1, r4
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f000 f917 	bl	800fdbc <__smakebuf_r>
 800fb8e:	89a2      	ldrh	r2, [r4, #12]
 800fb90:	f012 0301 	ands.w	r3, r2, #1
 800fb94:	d00c      	beq.n	800fbb0 <__swsetup_r+0xbc>
 800fb96:	2300      	movs	r3, #0
 800fb98:	60a3      	str	r3, [r4, #8]
 800fb9a:	6963      	ldr	r3, [r4, #20]
 800fb9c:	425b      	negs	r3, r3
 800fb9e:	61a3      	str	r3, [r4, #24]
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	b953      	cbnz	r3, 800fbba <__swsetup_r+0xc6>
 800fba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fba8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fbac:	d1ba      	bne.n	800fb24 <__swsetup_r+0x30>
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	0792      	lsls	r2, r2, #30
 800fbb2:	bf58      	it	pl
 800fbb4:	6963      	ldrpl	r3, [r4, #20]
 800fbb6:	60a3      	str	r3, [r4, #8]
 800fbb8:	e7f2      	b.n	800fba0 <__swsetup_r+0xac>
 800fbba:	2000      	movs	r0, #0
 800fbbc:	e7f7      	b.n	800fbae <__swsetup_r+0xba>
 800fbbe:	bf00      	nop
 800fbc0:	200002cc 	.word	0x200002cc
 800fbc4:	080107d8 	.word	0x080107d8
 800fbc8:	080107f8 	.word	0x080107f8
 800fbcc:	080107b8 	.word	0x080107b8

0800fbd0 <_close_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4c06      	ldr	r4, [pc, #24]	; (800fbec <_close_r+0x1c>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	f7f1 fd75 	bl	80016ca <_close>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_close_r+0x1a>
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_close_r+0x1a>
 800fbe8:	602b      	str	r3, [r5, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	20000970 	.word	0x20000970

0800fbf0 <__sflush_r>:
 800fbf0:	898a      	ldrh	r2, [r1, #12]
 800fbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	0710      	lsls	r0, r2, #28
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	d458      	bmi.n	800fcb0 <__sflush_r+0xc0>
 800fbfe:	684b      	ldr	r3, [r1, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dc05      	bgt.n	800fc10 <__sflush_r+0x20>
 800fc04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	dc02      	bgt.n	800fc10 <__sflush_r+0x20>
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	d0f9      	beq.n	800fc0a <__sflush_r+0x1a>
 800fc16:	2300      	movs	r3, #0
 800fc18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc1c:	682f      	ldr	r7, [r5, #0]
 800fc1e:	6a21      	ldr	r1, [r4, #32]
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	d032      	beq.n	800fc8a <__sflush_r+0x9a>
 800fc24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc26:	89a3      	ldrh	r3, [r4, #12]
 800fc28:	075a      	lsls	r2, r3, #29
 800fc2a:	d505      	bpl.n	800fc38 <__sflush_r+0x48>
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	1ac0      	subs	r0, r0, r3
 800fc30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc32:	b10b      	cbz	r3, 800fc38 <__sflush_r+0x48>
 800fc34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc36:	1ac0      	subs	r0, r0, r3
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc3e:	6a21      	ldr	r1, [r4, #32]
 800fc40:	4628      	mov	r0, r5
 800fc42:	47b0      	blx	r6
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	89a3      	ldrh	r3, [r4, #12]
 800fc48:	d106      	bne.n	800fc58 <__sflush_r+0x68>
 800fc4a:	6829      	ldr	r1, [r5, #0]
 800fc4c:	291d      	cmp	r1, #29
 800fc4e:	d848      	bhi.n	800fce2 <__sflush_r+0xf2>
 800fc50:	4a29      	ldr	r2, [pc, #164]	; (800fcf8 <__sflush_r+0x108>)
 800fc52:	40ca      	lsrs	r2, r1
 800fc54:	07d6      	lsls	r6, r2, #31
 800fc56:	d544      	bpl.n	800fce2 <__sflush_r+0xf2>
 800fc58:	2200      	movs	r2, #0
 800fc5a:	6062      	str	r2, [r4, #4]
 800fc5c:	04d9      	lsls	r1, r3, #19
 800fc5e:	6922      	ldr	r2, [r4, #16]
 800fc60:	6022      	str	r2, [r4, #0]
 800fc62:	d504      	bpl.n	800fc6e <__sflush_r+0x7e>
 800fc64:	1c42      	adds	r2, r0, #1
 800fc66:	d101      	bne.n	800fc6c <__sflush_r+0x7c>
 800fc68:	682b      	ldr	r3, [r5, #0]
 800fc6a:	b903      	cbnz	r3, 800fc6e <__sflush_r+0x7e>
 800fc6c:	6560      	str	r0, [r4, #84]	; 0x54
 800fc6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc70:	602f      	str	r7, [r5, #0]
 800fc72:	2900      	cmp	r1, #0
 800fc74:	d0c9      	beq.n	800fc0a <__sflush_r+0x1a>
 800fc76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc7a:	4299      	cmp	r1, r3
 800fc7c:	d002      	beq.n	800fc84 <__sflush_r+0x94>
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f7ff fb26 	bl	800f2d0 <_free_r>
 800fc84:	2000      	movs	r0, #0
 800fc86:	6360      	str	r0, [r4, #52]	; 0x34
 800fc88:	e7c0      	b.n	800fc0c <__sflush_r+0x1c>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	47b0      	blx	r6
 800fc90:	1c41      	adds	r1, r0, #1
 800fc92:	d1c8      	bne.n	800fc26 <__sflush_r+0x36>
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d0c5      	beq.n	800fc26 <__sflush_r+0x36>
 800fc9a:	2b1d      	cmp	r3, #29
 800fc9c:	d001      	beq.n	800fca2 <__sflush_r+0xb2>
 800fc9e:	2b16      	cmp	r3, #22
 800fca0:	d101      	bne.n	800fca6 <__sflush_r+0xb6>
 800fca2:	602f      	str	r7, [r5, #0]
 800fca4:	e7b1      	b.n	800fc0a <__sflush_r+0x1a>
 800fca6:	89a3      	ldrh	r3, [r4, #12]
 800fca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcac:	81a3      	strh	r3, [r4, #12]
 800fcae:	e7ad      	b.n	800fc0c <__sflush_r+0x1c>
 800fcb0:	690f      	ldr	r7, [r1, #16]
 800fcb2:	2f00      	cmp	r7, #0
 800fcb4:	d0a9      	beq.n	800fc0a <__sflush_r+0x1a>
 800fcb6:	0793      	lsls	r3, r2, #30
 800fcb8:	680e      	ldr	r6, [r1, #0]
 800fcba:	bf08      	it	eq
 800fcbc:	694b      	ldreq	r3, [r1, #20]
 800fcbe:	600f      	str	r7, [r1, #0]
 800fcc0:	bf18      	it	ne
 800fcc2:	2300      	movne	r3, #0
 800fcc4:	eba6 0807 	sub.w	r8, r6, r7
 800fcc8:	608b      	str	r3, [r1, #8]
 800fcca:	f1b8 0f00 	cmp.w	r8, #0
 800fcce:	dd9c      	ble.n	800fc0a <__sflush_r+0x1a>
 800fcd0:	4643      	mov	r3, r8
 800fcd2:	463a      	mov	r2, r7
 800fcd4:	6a21      	ldr	r1, [r4, #32]
 800fcd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcd8:	4628      	mov	r0, r5
 800fcda:	47b0      	blx	r6
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	dc06      	bgt.n	800fcee <__sflush_r+0xfe>
 800fce0:	89a3      	ldrh	r3, [r4, #12]
 800fce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce6:	81a3      	strh	r3, [r4, #12]
 800fce8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcec:	e78e      	b.n	800fc0c <__sflush_r+0x1c>
 800fcee:	4407      	add	r7, r0
 800fcf0:	eba8 0800 	sub.w	r8, r8, r0
 800fcf4:	e7e9      	b.n	800fcca <__sflush_r+0xda>
 800fcf6:	bf00      	nop
 800fcf8:	20400001 	.word	0x20400001

0800fcfc <_fflush_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	690b      	ldr	r3, [r1, #16]
 800fd00:	4605      	mov	r5, r0
 800fd02:	460c      	mov	r4, r1
 800fd04:	b1db      	cbz	r3, 800fd3e <_fflush_r+0x42>
 800fd06:	b118      	cbz	r0, 800fd10 <_fflush_r+0x14>
 800fd08:	6983      	ldr	r3, [r0, #24]
 800fd0a:	b90b      	cbnz	r3, 800fd10 <_fflush_r+0x14>
 800fd0c:	f7fe faf4 	bl	800e2f8 <__sinit>
 800fd10:	4b0c      	ldr	r3, [pc, #48]	; (800fd44 <_fflush_r+0x48>)
 800fd12:	429c      	cmp	r4, r3
 800fd14:	d109      	bne.n	800fd2a <_fflush_r+0x2e>
 800fd16:	686c      	ldr	r4, [r5, #4]
 800fd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd1c:	b17b      	cbz	r3, 800fd3e <_fflush_r+0x42>
 800fd1e:	4621      	mov	r1, r4
 800fd20:	4628      	mov	r0, r5
 800fd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd26:	f7ff bf63 	b.w	800fbf0 <__sflush_r>
 800fd2a:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <_fflush_r+0x4c>)
 800fd2c:	429c      	cmp	r4, r3
 800fd2e:	d101      	bne.n	800fd34 <_fflush_r+0x38>
 800fd30:	68ac      	ldr	r4, [r5, #8]
 800fd32:	e7f1      	b.n	800fd18 <_fflush_r+0x1c>
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <_fflush_r+0x50>)
 800fd36:	429c      	cmp	r4, r3
 800fd38:	bf08      	it	eq
 800fd3a:	68ec      	ldreq	r4, [r5, #12]
 800fd3c:	e7ec      	b.n	800fd18 <_fflush_r+0x1c>
 800fd3e:	2000      	movs	r0, #0
 800fd40:	bd38      	pop	{r3, r4, r5, pc}
 800fd42:	bf00      	nop
 800fd44:	080107d8 	.word	0x080107d8
 800fd48:	080107f8 	.word	0x080107f8
 800fd4c:	080107b8 	.word	0x080107b8

0800fd50 <_lseek_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4c07      	ldr	r4, [pc, #28]	; (800fd70 <_lseek_r+0x20>)
 800fd54:	4605      	mov	r5, r0
 800fd56:	4608      	mov	r0, r1
 800fd58:	4611      	mov	r1, r2
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	6022      	str	r2, [r4, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f7f1 fcda 	bl	8001718 <_lseek>
 800fd64:	1c43      	adds	r3, r0, #1
 800fd66:	d102      	bne.n	800fd6e <_lseek_r+0x1e>
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	b103      	cbz	r3, 800fd6e <_lseek_r+0x1e>
 800fd6c:	602b      	str	r3, [r5, #0]
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}
 800fd70:	20000970 	.word	0x20000970

0800fd74 <__swhatbuf_r>:
 800fd74:	b570      	push	{r4, r5, r6, lr}
 800fd76:	460e      	mov	r6, r1
 800fd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd7c:	2900      	cmp	r1, #0
 800fd7e:	b096      	sub	sp, #88	; 0x58
 800fd80:	4614      	mov	r4, r2
 800fd82:	461d      	mov	r5, r3
 800fd84:	da07      	bge.n	800fd96 <__swhatbuf_r+0x22>
 800fd86:	2300      	movs	r3, #0
 800fd88:	602b      	str	r3, [r5, #0]
 800fd8a:	89b3      	ldrh	r3, [r6, #12]
 800fd8c:	061a      	lsls	r2, r3, #24
 800fd8e:	d410      	bmi.n	800fdb2 <__swhatbuf_r+0x3e>
 800fd90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd94:	e00e      	b.n	800fdb4 <__swhatbuf_r+0x40>
 800fd96:	466a      	mov	r2, sp
 800fd98:	f000 f8a4 	bl	800fee4 <_fstat_r>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	dbf2      	blt.n	800fd86 <__swhatbuf_r+0x12>
 800fda0:	9a01      	ldr	r2, [sp, #4]
 800fda2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fda6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fdaa:	425a      	negs	r2, r3
 800fdac:	415a      	adcs	r2, r3
 800fdae:	602a      	str	r2, [r5, #0]
 800fdb0:	e7ee      	b.n	800fd90 <__swhatbuf_r+0x1c>
 800fdb2:	2340      	movs	r3, #64	; 0x40
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	b016      	add	sp, #88	; 0x58
 800fdba:	bd70      	pop	{r4, r5, r6, pc}

0800fdbc <__smakebuf_r>:
 800fdbc:	898b      	ldrh	r3, [r1, #12]
 800fdbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdc0:	079d      	lsls	r5, r3, #30
 800fdc2:	4606      	mov	r6, r0
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	d507      	bpl.n	800fdd8 <__smakebuf_r+0x1c>
 800fdc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	6123      	str	r3, [r4, #16]
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	6163      	str	r3, [r4, #20]
 800fdd4:	b002      	add	sp, #8
 800fdd6:	bd70      	pop	{r4, r5, r6, pc}
 800fdd8:	ab01      	add	r3, sp, #4
 800fdda:	466a      	mov	r2, sp
 800fddc:	f7ff ffca 	bl	800fd74 <__swhatbuf_r>
 800fde0:	9900      	ldr	r1, [sp, #0]
 800fde2:	4605      	mov	r5, r0
 800fde4:	4630      	mov	r0, r6
 800fde6:	f7ff fac1 	bl	800f36c <_malloc_r>
 800fdea:	b948      	cbnz	r0, 800fe00 <__smakebuf_r+0x44>
 800fdec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf0:	059a      	lsls	r2, r3, #22
 800fdf2:	d4ef      	bmi.n	800fdd4 <__smakebuf_r+0x18>
 800fdf4:	f023 0303 	bic.w	r3, r3, #3
 800fdf8:	f043 0302 	orr.w	r3, r3, #2
 800fdfc:	81a3      	strh	r3, [r4, #12]
 800fdfe:	e7e3      	b.n	800fdc8 <__smakebuf_r+0xc>
 800fe00:	4b0d      	ldr	r3, [pc, #52]	; (800fe38 <__smakebuf_r+0x7c>)
 800fe02:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	6020      	str	r0, [r4, #0]
 800fe08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe0c:	81a3      	strh	r3, [r4, #12]
 800fe0e:	9b00      	ldr	r3, [sp, #0]
 800fe10:	6163      	str	r3, [r4, #20]
 800fe12:	9b01      	ldr	r3, [sp, #4]
 800fe14:	6120      	str	r0, [r4, #16]
 800fe16:	b15b      	cbz	r3, 800fe30 <__smakebuf_r+0x74>
 800fe18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f000 f873 	bl	800ff08 <_isatty_r>
 800fe22:	b128      	cbz	r0, 800fe30 <__smakebuf_r+0x74>
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	f043 0301 	orr.w	r3, r3, #1
 800fe2e:	81a3      	strh	r3, [r4, #12]
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	431d      	orrs	r5, r3
 800fe34:	81a5      	strh	r5, [r4, #12]
 800fe36:	e7cd      	b.n	800fdd4 <__smakebuf_r+0x18>
 800fe38:	0800e2c1 	.word	0x0800e2c1

0800fe3c <memmove>:
 800fe3c:	4288      	cmp	r0, r1
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	eb01 0302 	add.w	r3, r1, r2
 800fe44:	d807      	bhi.n	800fe56 <memmove+0x1a>
 800fe46:	1e42      	subs	r2, r0, #1
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	d00a      	beq.n	800fe62 <memmove+0x26>
 800fe4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe50:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fe54:	e7f8      	b.n	800fe48 <memmove+0xc>
 800fe56:	4283      	cmp	r3, r0
 800fe58:	d9f5      	bls.n	800fe46 <memmove+0xa>
 800fe5a:	1881      	adds	r1, r0, r2
 800fe5c:	1ad2      	subs	r2, r2, r3
 800fe5e:	42d3      	cmn	r3, r2
 800fe60:	d100      	bne.n	800fe64 <memmove+0x28>
 800fe62:	bd10      	pop	{r4, pc}
 800fe64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fe6c:	e7f7      	b.n	800fe5e <memmove+0x22>

0800fe6e <__malloc_lock>:
 800fe6e:	4770      	bx	lr

0800fe70 <__malloc_unlock>:
 800fe70:	4770      	bx	lr

0800fe72 <_realloc_r>:
 800fe72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe74:	4607      	mov	r7, r0
 800fe76:	4614      	mov	r4, r2
 800fe78:	460e      	mov	r6, r1
 800fe7a:	b921      	cbnz	r1, 800fe86 <_realloc_r+0x14>
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe82:	f7ff ba73 	b.w	800f36c <_malloc_r>
 800fe86:	b922      	cbnz	r2, 800fe92 <_realloc_r+0x20>
 800fe88:	f7ff fa22 	bl	800f2d0 <_free_r>
 800fe8c:	4625      	mov	r5, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe92:	f000 f849 	bl	800ff28 <_malloc_usable_size_r>
 800fe96:	42a0      	cmp	r0, r4
 800fe98:	d20f      	bcs.n	800feba <_realloc_r+0x48>
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	4638      	mov	r0, r7
 800fe9e:	f7ff fa65 	bl	800f36c <_malloc_r>
 800fea2:	4605      	mov	r5, r0
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d0f2      	beq.n	800fe8e <_realloc_r+0x1c>
 800fea8:	4631      	mov	r1, r6
 800feaa:	4622      	mov	r2, r4
 800feac:	f7fb fe56 	bl	800bb5c <memcpy>
 800feb0:	4631      	mov	r1, r6
 800feb2:	4638      	mov	r0, r7
 800feb4:	f7ff fa0c 	bl	800f2d0 <_free_r>
 800feb8:	e7e9      	b.n	800fe8e <_realloc_r+0x1c>
 800feba:	4635      	mov	r5, r6
 800febc:	e7e7      	b.n	800fe8e <_realloc_r+0x1c>
	...

0800fec0 <_read_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4c07      	ldr	r4, [pc, #28]	; (800fee0 <_read_r+0x20>)
 800fec4:	4605      	mov	r5, r0
 800fec6:	4608      	mov	r0, r1
 800fec8:	4611      	mov	r1, r2
 800feca:	2200      	movs	r2, #0
 800fecc:	6022      	str	r2, [r4, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	f7f1 fbde 	bl	8001690 <_read>
 800fed4:	1c43      	adds	r3, r0, #1
 800fed6:	d102      	bne.n	800fede <_read_r+0x1e>
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	b103      	cbz	r3, 800fede <_read_r+0x1e>
 800fedc:	602b      	str	r3, [r5, #0]
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	20000970 	.word	0x20000970

0800fee4 <_fstat_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4c07      	ldr	r4, [pc, #28]	; (800ff04 <_fstat_r+0x20>)
 800fee8:	2300      	movs	r3, #0
 800feea:	4605      	mov	r5, r0
 800feec:	4608      	mov	r0, r1
 800feee:	4611      	mov	r1, r2
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	f7f1 fbf6 	bl	80016e2 <_fstat>
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	d102      	bne.n	800ff00 <_fstat_r+0x1c>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	b103      	cbz	r3, 800ff00 <_fstat_r+0x1c>
 800fefe:	602b      	str	r3, [r5, #0]
 800ff00:	bd38      	pop	{r3, r4, r5, pc}
 800ff02:	bf00      	nop
 800ff04:	20000970 	.word	0x20000970

0800ff08 <_isatty_r>:
 800ff08:	b538      	push	{r3, r4, r5, lr}
 800ff0a:	4c06      	ldr	r4, [pc, #24]	; (800ff24 <_isatty_r+0x1c>)
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4605      	mov	r5, r0
 800ff10:	4608      	mov	r0, r1
 800ff12:	6023      	str	r3, [r4, #0]
 800ff14:	f7f1 fbf5 	bl	8001702 <_isatty>
 800ff18:	1c43      	adds	r3, r0, #1
 800ff1a:	d102      	bne.n	800ff22 <_isatty_r+0x1a>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	b103      	cbz	r3, 800ff22 <_isatty_r+0x1a>
 800ff20:	602b      	str	r3, [r5, #0]
 800ff22:	bd38      	pop	{r3, r4, r5, pc}
 800ff24:	20000970 	.word	0x20000970

0800ff28 <_malloc_usable_size_r>:
 800ff28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff2c:	1f18      	subs	r0, r3, #4
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	bfbc      	itt	lt
 800ff32:	580b      	ldrlt	r3, [r1, r0]
 800ff34:	18c0      	addlt	r0, r0, r3
 800ff36:	4770      	bx	lr

0800ff38 <atan2>:
 800ff38:	f000 b85a 	b.w	800fff0 <__ieee754_atan2>

0800ff3c <sqrt>:
 800ff3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff40:	ed2d 8b02 	vpush	{d8}
 800ff44:	b08b      	sub	sp, #44	; 0x2c
 800ff46:	ec55 4b10 	vmov	r4, r5, d0
 800ff4a:	f000 f92f 	bl	80101ac <__ieee754_sqrt>
 800ff4e:	4b26      	ldr	r3, [pc, #152]	; (800ffe8 <sqrt+0xac>)
 800ff50:	eeb0 8a40 	vmov.f32	s16, s0
 800ff54:	eef0 8a60 	vmov.f32	s17, s1
 800ff58:	f993 6000 	ldrsb.w	r6, [r3]
 800ff5c:	1c73      	adds	r3, r6, #1
 800ff5e:	d02a      	beq.n	800ffb6 <sqrt+0x7a>
 800ff60:	4622      	mov	r2, r4
 800ff62:	462b      	mov	r3, r5
 800ff64:	4620      	mov	r0, r4
 800ff66:	4629      	mov	r1, r5
 800ff68:	f7f0 fde8 	bl	8000b3c <__aeabi_dcmpun>
 800ff6c:	4607      	mov	r7, r0
 800ff6e:	bb10      	cbnz	r0, 800ffb6 <sqrt+0x7a>
 800ff70:	f04f 0800 	mov.w	r8, #0
 800ff74:	f04f 0900 	mov.w	r9, #0
 800ff78:	4642      	mov	r2, r8
 800ff7a:	464b      	mov	r3, r9
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	4629      	mov	r1, r5
 800ff80:	f7f0 fdb4 	bl	8000aec <__aeabi_dcmplt>
 800ff84:	b1b8      	cbz	r0, 800ffb6 <sqrt+0x7a>
 800ff86:	2301      	movs	r3, #1
 800ff88:	9300      	str	r3, [sp, #0]
 800ff8a:	4b18      	ldr	r3, [pc, #96]	; (800ffec <sqrt+0xb0>)
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	9708      	str	r7, [sp, #32]
 800ff90:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ff94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ff98:	b9b6      	cbnz	r6, 800ffc8 <sqrt+0x8c>
 800ff9a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ff9e:	4668      	mov	r0, sp
 800ffa0:	f000 fb5f 	bl	8010662 <matherr>
 800ffa4:	b1d0      	cbz	r0, 800ffdc <sqrt+0xa0>
 800ffa6:	9b08      	ldr	r3, [sp, #32]
 800ffa8:	b11b      	cbz	r3, 800ffb2 <sqrt+0x76>
 800ffaa:	f7fb fdad 	bl	800bb08 <__errno>
 800ffae:	9b08      	ldr	r3, [sp, #32]
 800ffb0:	6003      	str	r3, [r0, #0]
 800ffb2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ffb6:	eeb0 0a48 	vmov.f32	s0, s16
 800ffba:	eef0 0a68 	vmov.f32	s1, s17
 800ffbe:	b00b      	add	sp, #44	; 0x2c
 800ffc0:	ecbd 8b02 	vpop	{d8}
 800ffc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffc8:	4642      	mov	r2, r8
 800ffca:	464b      	mov	r3, r9
 800ffcc:	4640      	mov	r0, r8
 800ffce:	4649      	mov	r1, r9
 800ffd0:	f7f0 fc44 	bl	800085c <__aeabi_ddiv>
 800ffd4:	2e02      	cmp	r6, #2
 800ffd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ffda:	d1e0      	bne.n	800ff9e <sqrt+0x62>
 800ffdc:	f7fb fd94 	bl	800bb08 <__errno>
 800ffe0:	2321      	movs	r3, #33	; 0x21
 800ffe2:	6003      	str	r3, [r0, #0]
 800ffe4:	e7df      	b.n	800ffa6 <sqrt+0x6a>
 800ffe6:	bf00      	nop
 800ffe8:	2000049c 	.word	0x2000049c
 800ffec:	08010a36 	.word	0x08010a36

0800fff0 <__ieee754_atan2>:
 800fff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff4:	ec57 6b11 	vmov	r6, r7, d1
 800fff8:	4273      	negs	r3, r6
 800fffa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fffe:	4333      	orrs	r3, r6
 8010000:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80101a8 <__ieee754_atan2+0x1b8>
 8010004:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010008:	4573      	cmp	r3, lr
 801000a:	ec51 0b10 	vmov	r0, r1, d0
 801000e:	ee11 8a10 	vmov	r8, s2
 8010012:	d80a      	bhi.n	801002a <__ieee754_atan2+0x3a>
 8010014:	4244      	negs	r4, r0
 8010016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801001a:	4304      	orrs	r4, r0
 801001c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010020:	4574      	cmp	r4, lr
 8010022:	468c      	mov	ip, r1
 8010024:	ee10 9a10 	vmov	r9, s0
 8010028:	d907      	bls.n	801003a <__ieee754_atan2+0x4a>
 801002a:	4632      	mov	r2, r6
 801002c:	463b      	mov	r3, r7
 801002e:	f7f0 f935 	bl	800029c <__adddf3>
 8010032:	ec41 0b10 	vmov	d0, r0, r1
 8010036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801003e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010042:	4334      	orrs	r4, r6
 8010044:	d103      	bne.n	801004e <__ieee754_atan2+0x5e>
 8010046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801004a:	f000 b961 	b.w	8010310 <atan>
 801004e:	17bc      	asrs	r4, r7, #30
 8010050:	f004 0402 	and.w	r4, r4, #2
 8010054:	ea53 0909 	orrs.w	r9, r3, r9
 8010058:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801005c:	d107      	bne.n	801006e <__ieee754_atan2+0x7e>
 801005e:	2c02      	cmp	r4, #2
 8010060:	d073      	beq.n	801014a <__ieee754_atan2+0x15a>
 8010062:	2c03      	cmp	r4, #3
 8010064:	d1e5      	bne.n	8010032 <__ieee754_atan2+0x42>
 8010066:	a13e      	add	r1, pc, #248	; (adr r1, 8010160 <__ieee754_atan2+0x170>)
 8010068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801006c:	e7e1      	b.n	8010032 <__ieee754_atan2+0x42>
 801006e:	ea52 0808 	orrs.w	r8, r2, r8
 8010072:	d106      	bne.n	8010082 <__ieee754_atan2+0x92>
 8010074:	f1bc 0f00 	cmp.w	ip, #0
 8010078:	da6b      	bge.n	8010152 <__ieee754_atan2+0x162>
 801007a:	a13b      	add	r1, pc, #236	; (adr r1, 8010168 <__ieee754_atan2+0x178>)
 801007c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010080:	e7d7      	b.n	8010032 <__ieee754_atan2+0x42>
 8010082:	4572      	cmp	r2, lr
 8010084:	d120      	bne.n	80100c8 <__ieee754_atan2+0xd8>
 8010086:	4293      	cmp	r3, r2
 8010088:	d111      	bne.n	80100ae <__ieee754_atan2+0xbe>
 801008a:	2c02      	cmp	r4, #2
 801008c:	d007      	beq.n	801009e <__ieee754_atan2+0xae>
 801008e:	2c03      	cmp	r4, #3
 8010090:	d009      	beq.n	80100a6 <__ieee754_atan2+0xb6>
 8010092:	2c01      	cmp	r4, #1
 8010094:	d155      	bne.n	8010142 <__ieee754_atan2+0x152>
 8010096:	a136      	add	r1, pc, #216	; (adr r1, 8010170 <__ieee754_atan2+0x180>)
 8010098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801009c:	e7c9      	b.n	8010032 <__ieee754_atan2+0x42>
 801009e:	a136      	add	r1, pc, #216	; (adr r1, 8010178 <__ieee754_atan2+0x188>)
 80100a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a4:	e7c5      	b.n	8010032 <__ieee754_atan2+0x42>
 80100a6:	a136      	add	r1, pc, #216	; (adr r1, 8010180 <__ieee754_atan2+0x190>)
 80100a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ac:	e7c1      	b.n	8010032 <__ieee754_atan2+0x42>
 80100ae:	2c02      	cmp	r4, #2
 80100b0:	d04b      	beq.n	801014a <__ieee754_atan2+0x15a>
 80100b2:	2c03      	cmp	r4, #3
 80100b4:	d0d7      	beq.n	8010066 <__ieee754_atan2+0x76>
 80100b6:	2c01      	cmp	r4, #1
 80100b8:	f04f 0000 	mov.w	r0, #0
 80100bc:	d102      	bne.n	80100c4 <__ieee754_atan2+0xd4>
 80100be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80100c2:	e7b6      	b.n	8010032 <__ieee754_atan2+0x42>
 80100c4:	2100      	movs	r1, #0
 80100c6:	e7b4      	b.n	8010032 <__ieee754_atan2+0x42>
 80100c8:	4573      	cmp	r3, lr
 80100ca:	d0d3      	beq.n	8010074 <__ieee754_atan2+0x84>
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	151b      	asrs	r3, r3, #20
 80100d0:	2b3c      	cmp	r3, #60	; 0x3c
 80100d2:	dc1e      	bgt.n	8010112 <__ieee754_atan2+0x122>
 80100d4:	2f00      	cmp	r7, #0
 80100d6:	da01      	bge.n	80100dc <__ieee754_atan2+0xec>
 80100d8:	333c      	adds	r3, #60	; 0x3c
 80100da:	db1e      	blt.n	801011a <__ieee754_atan2+0x12a>
 80100dc:	4632      	mov	r2, r6
 80100de:	463b      	mov	r3, r7
 80100e0:	f7f0 fbbc 	bl	800085c <__aeabi_ddiv>
 80100e4:	ec41 0b10 	vmov	d0, r0, r1
 80100e8:	f000 fab2 	bl	8010650 <fabs>
 80100ec:	f000 f910 	bl	8010310 <atan>
 80100f0:	ec51 0b10 	vmov	r0, r1, d0
 80100f4:	2c01      	cmp	r4, #1
 80100f6:	d013      	beq.n	8010120 <__ieee754_atan2+0x130>
 80100f8:	2c02      	cmp	r4, #2
 80100fa:	d015      	beq.n	8010128 <__ieee754_atan2+0x138>
 80100fc:	2c00      	cmp	r4, #0
 80100fe:	d098      	beq.n	8010032 <__ieee754_atan2+0x42>
 8010100:	a321      	add	r3, pc, #132	; (adr r3, 8010188 <__ieee754_atan2+0x198>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	f7f0 f8c7 	bl	8000298 <__aeabi_dsub>
 801010a:	a321      	add	r3, pc, #132	; (adr r3, 8010190 <__ieee754_atan2+0x1a0>)
 801010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010110:	e014      	b.n	801013c <__ieee754_atan2+0x14c>
 8010112:	a121      	add	r1, pc, #132	; (adr r1, 8010198 <__ieee754_atan2+0x1a8>)
 8010114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010118:	e7ec      	b.n	80100f4 <__ieee754_atan2+0x104>
 801011a:	2000      	movs	r0, #0
 801011c:	2100      	movs	r1, #0
 801011e:	e7e9      	b.n	80100f4 <__ieee754_atan2+0x104>
 8010120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010124:	4619      	mov	r1, r3
 8010126:	e784      	b.n	8010032 <__ieee754_atan2+0x42>
 8010128:	a317      	add	r3, pc, #92	; (adr r3, 8010188 <__ieee754_atan2+0x198>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	f7f0 f8b3 	bl	8000298 <__aeabi_dsub>
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	a116      	add	r1, pc, #88	; (adr r1, 8010190 <__ieee754_atan2+0x1a0>)
 8010138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801013c:	f7f0 f8ac 	bl	8000298 <__aeabi_dsub>
 8010140:	e777      	b.n	8010032 <__ieee754_atan2+0x42>
 8010142:	a117      	add	r1, pc, #92	; (adr r1, 80101a0 <__ieee754_atan2+0x1b0>)
 8010144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010148:	e773      	b.n	8010032 <__ieee754_atan2+0x42>
 801014a:	a111      	add	r1, pc, #68	; (adr r1, 8010190 <__ieee754_atan2+0x1a0>)
 801014c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010150:	e76f      	b.n	8010032 <__ieee754_atan2+0x42>
 8010152:	a111      	add	r1, pc, #68	; (adr r1, 8010198 <__ieee754_atan2+0x1a8>)
 8010154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010158:	e76b      	b.n	8010032 <__ieee754_atan2+0x42>
 801015a:	bf00      	nop
 801015c:	f3af 8000 	nop.w
 8010160:	54442d18 	.word	0x54442d18
 8010164:	c00921fb 	.word	0xc00921fb
 8010168:	54442d18 	.word	0x54442d18
 801016c:	bff921fb 	.word	0xbff921fb
 8010170:	54442d18 	.word	0x54442d18
 8010174:	bfe921fb 	.word	0xbfe921fb
 8010178:	7f3321d2 	.word	0x7f3321d2
 801017c:	4002d97c 	.word	0x4002d97c
 8010180:	7f3321d2 	.word	0x7f3321d2
 8010184:	c002d97c 	.word	0xc002d97c
 8010188:	33145c07 	.word	0x33145c07
 801018c:	3ca1a626 	.word	0x3ca1a626
 8010190:	54442d18 	.word	0x54442d18
 8010194:	400921fb 	.word	0x400921fb
 8010198:	54442d18 	.word	0x54442d18
 801019c:	3ff921fb 	.word	0x3ff921fb
 80101a0:	54442d18 	.word	0x54442d18
 80101a4:	3fe921fb 	.word	0x3fe921fb
 80101a8:	7ff00000 	.word	0x7ff00000

080101ac <__ieee754_sqrt>:
 80101ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b0:	4955      	ldr	r1, [pc, #340]	; (8010308 <__ieee754_sqrt+0x15c>)
 80101b2:	ec55 4b10 	vmov	r4, r5, d0
 80101b6:	43a9      	bics	r1, r5
 80101b8:	462b      	mov	r3, r5
 80101ba:	462a      	mov	r2, r5
 80101bc:	d112      	bne.n	80101e4 <__ieee754_sqrt+0x38>
 80101be:	ee10 2a10 	vmov	r2, s0
 80101c2:	ee10 0a10 	vmov	r0, s0
 80101c6:	4629      	mov	r1, r5
 80101c8:	f7f0 fa1e 	bl	8000608 <__aeabi_dmul>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4620      	mov	r0, r4
 80101d2:	4629      	mov	r1, r5
 80101d4:	f7f0 f862 	bl	800029c <__adddf3>
 80101d8:	4604      	mov	r4, r0
 80101da:	460d      	mov	r5, r1
 80101dc:	ec45 4b10 	vmov	d0, r4, r5
 80101e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e4:	2d00      	cmp	r5, #0
 80101e6:	ee10 0a10 	vmov	r0, s0
 80101ea:	4621      	mov	r1, r4
 80101ec:	dc0f      	bgt.n	801020e <__ieee754_sqrt+0x62>
 80101ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80101f2:	4330      	orrs	r0, r6
 80101f4:	d0f2      	beq.n	80101dc <__ieee754_sqrt+0x30>
 80101f6:	b155      	cbz	r5, 801020e <__ieee754_sqrt+0x62>
 80101f8:	ee10 2a10 	vmov	r2, s0
 80101fc:	4620      	mov	r0, r4
 80101fe:	4629      	mov	r1, r5
 8010200:	f7f0 f84a 	bl	8000298 <__aeabi_dsub>
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	f7f0 fb28 	bl	800085c <__aeabi_ddiv>
 801020c:	e7e4      	b.n	80101d8 <__ieee754_sqrt+0x2c>
 801020e:	151b      	asrs	r3, r3, #20
 8010210:	d073      	beq.n	80102fa <__ieee754_sqrt+0x14e>
 8010212:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010216:	07dd      	lsls	r5, r3, #31
 8010218:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801021c:	bf48      	it	mi
 801021e:	0fc8      	lsrmi	r0, r1, #31
 8010220:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010224:	bf44      	itt	mi
 8010226:	0049      	lslmi	r1, r1, #1
 8010228:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801022c:	2500      	movs	r5, #0
 801022e:	1058      	asrs	r0, r3, #1
 8010230:	0fcb      	lsrs	r3, r1, #31
 8010232:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010236:	0049      	lsls	r1, r1, #1
 8010238:	2316      	movs	r3, #22
 801023a:	462c      	mov	r4, r5
 801023c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010240:	19a7      	adds	r7, r4, r6
 8010242:	4297      	cmp	r7, r2
 8010244:	bfde      	ittt	le
 8010246:	19bc      	addle	r4, r7, r6
 8010248:	1bd2      	suble	r2, r2, r7
 801024a:	19ad      	addle	r5, r5, r6
 801024c:	0fcf      	lsrs	r7, r1, #31
 801024e:	3b01      	subs	r3, #1
 8010250:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010254:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010258:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801025c:	d1f0      	bne.n	8010240 <__ieee754_sqrt+0x94>
 801025e:	f04f 0c20 	mov.w	ip, #32
 8010262:	469e      	mov	lr, r3
 8010264:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010268:	42a2      	cmp	r2, r4
 801026a:	eb06 070e 	add.w	r7, r6, lr
 801026e:	dc02      	bgt.n	8010276 <__ieee754_sqrt+0xca>
 8010270:	d112      	bne.n	8010298 <__ieee754_sqrt+0xec>
 8010272:	428f      	cmp	r7, r1
 8010274:	d810      	bhi.n	8010298 <__ieee754_sqrt+0xec>
 8010276:	2f00      	cmp	r7, #0
 8010278:	eb07 0e06 	add.w	lr, r7, r6
 801027c:	da42      	bge.n	8010304 <__ieee754_sqrt+0x158>
 801027e:	f1be 0f00 	cmp.w	lr, #0
 8010282:	db3f      	blt.n	8010304 <__ieee754_sqrt+0x158>
 8010284:	f104 0801 	add.w	r8, r4, #1
 8010288:	1b12      	subs	r2, r2, r4
 801028a:	428f      	cmp	r7, r1
 801028c:	bf88      	it	hi
 801028e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010292:	1bc9      	subs	r1, r1, r7
 8010294:	4433      	add	r3, r6
 8010296:	4644      	mov	r4, r8
 8010298:	0052      	lsls	r2, r2, #1
 801029a:	f1bc 0c01 	subs.w	ip, ip, #1
 801029e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80102a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80102a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80102aa:	d1dd      	bne.n	8010268 <__ieee754_sqrt+0xbc>
 80102ac:	430a      	orrs	r2, r1
 80102ae:	d006      	beq.n	80102be <__ieee754_sqrt+0x112>
 80102b0:	1c5c      	adds	r4, r3, #1
 80102b2:	bf13      	iteet	ne
 80102b4:	3301      	addne	r3, #1
 80102b6:	3501      	addeq	r5, #1
 80102b8:	4663      	moveq	r3, ip
 80102ba:	f023 0301 	bicne.w	r3, r3, #1
 80102be:	106a      	asrs	r2, r5, #1
 80102c0:	085b      	lsrs	r3, r3, #1
 80102c2:	07e9      	lsls	r1, r5, #31
 80102c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80102c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80102cc:	bf48      	it	mi
 80102ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80102d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80102d6:	461c      	mov	r4, r3
 80102d8:	e780      	b.n	80101dc <__ieee754_sqrt+0x30>
 80102da:	0aca      	lsrs	r2, r1, #11
 80102dc:	3815      	subs	r0, #21
 80102de:	0549      	lsls	r1, r1, #21
 80102e0:	2a00      	cmp	r2, #0
 80102e2:	d0fa      	beq.n	80102da <__ieee754_sqrt+0x12e>
 80102e4:	02d6      	lsls	r6, r2, #11
 80102e6:	d50a      	bpl.n	80102fe <__ieee754_sqrt+0x152>
 80102e8:	f1c3 0420 	rsb	r4, r3, #32
 80102ec:	fa21 f404 	lsr.w	r4, r1, r4
 80102f0:	1e5d      	subs	r5, r3, #1
 80102f2:	4099      	lsls	r1, r3
 80102f4:	4322      	orrs	r2, r4
 80102f6:	1b43      	subs	r3, r0, r5
 80102f8:	e78b      	b.n	8010212 <__ieee754_sqrt+0x66>
 80102fa:	4618      	mov	r0, r3
 80102fc:	e7f0      	b.n	80102e0 <__ieee754_sqrt+0x134>
 80102fe:	0052      	lsls	r2, r2, #1
 8010300:	3301      	adds	r3, #1
 8010302:	e7ef      	b.n	80102e4 <__ieee754_sqrt+0x138>
 8010304:	46a0      	mov	r8, r4
 8010306:	e7bf      	b.n	8010288 <__ieee754_sqrt+0xdc>
 8010308:	7ff00000 	.word	0x7ff00000
 801030c:	00000000 	.word	0x00000000

08010310 <atan>:
 8010310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	ec55 4b10 	vmov	r4, r5, d0
 8010318:	4bc3      	ldr	r3, [pc, #780]	; (8010628 <atan+0x318>)
 801031a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801031e:	429e      	cmp	r6, r3
 8010320:	46ab      	mov	fp, r5
 8010322:	dd18      	ble.n	8010356 <atan+0x46>
 8010324:	4bc1      	ldr	r3, [pc, #772]	; (801062c <atan+0x31c>)
 8010326:	429e      	cmp	r6, r3
 8010328:	dc01      	bgt.n	801032e <atan+0x1e>
 801032a:	d109      	bne.n	8010340 <atan+0x30>
 801032c:	b144      	cbz	r4, 8010340 <atan+0x30>
 801032e:	4622      	mov	r2, r4
 8010330:	462b      	mov	r3, r5
 8010332:	4620      	mov	r0, r4
 8010334:	4629      	mov	r1, r5
 8010336:	f7ef ffb1 	bl	800029c <__adddf3>
 801033a:	4604      	mov	r4, r0
 801033c:	460d      	mov	r5, r1
 801033e:	e006      	b.n	801034e <atan+0x3e>
 8010340:	f1bb 0f00 	cmp.w	fp, #0
 8010344:	f340 8131 	ble.w	80105aa <atan+0x29a>
 8010348:	a59b      	add	r5, pc, #620	; (adr r5, 80105b8 <atan+0x2a8>)
 801034a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801034e:	ec45 4b10 	vmov	d0, r4, r5
 8010352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010356:	4bb6      	ldr	r3, [pc, #728]	; (8010630 <atan+0x320>)
 8010358:	429e      	cmp	r6, r3
 801035a:	dc14      	bgt.n	8010386 <atan+0x76>
 801035c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010360:	429e      	cmp	r6, r3
 8010362:	dc0d      	bgt.n	8010380 <atan+0x70>
 8010364:	a396      	add	r3, pc, #600	; (adr r3, 80105c0 <atan+0x2b0>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	ee10 0a10 	vmov	r0, s0
 801036e:	4629      	mov	r1, r5
 8010370:	f7ef ff94 	bl	800029c <__adddf3>
 8010374:	2200      	movs	r2, #0
 8010376:	4baf      	ldr	r3, [pc, #700]	; (8010634 <atan+0x324>)
 8010378:	f7f0 fbd6 	bl	8000b28 <__aeabi_dcmpgt>
 801037c:	2800      	cmp	r0, #0
 801037e:	d1e6      	bne.n	801034e <atan+0x3e>
 8010380:	f04f 3aff 	mov.w	sl, #4294967295
 8010384:	e02b      	b.n	80103de <atan+0xce>
 8010386:	f000 f963 	bl	8010650 <fabs>
 801038a:	4bab      	ldr	r3, [pc, #684]	; (8010638 <atan+0x328>)
 801038c:	429e      	cmp	r6, r3
 801038e:	ec55 4b10 	vmov	r4, r5, d0
 8010392:	f300 80bf 	bgt.w	8010514 <atan+0x204>
 8010396:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801039a:	429e      	cmp	r6, r3
 801039c:	f300 80a0 	bgt.w	80104e0 <atan+0x1d0>
 80103a0:	ee10 2a10 	vmov	r2, s0
 80103a4:	ee10 0a10 	vmov	r0, s0
 80103a8:	462b      	mov	r3, r5
 80103aa:	4629      	mov	r1, r5
 80103ac:	f7ef ff76 	bl	800029c <__adddf3>
 80103b0:	2200      	movs	r2, #0
 80103b2:	4ba0      	ldr	r3, [pc, #640]	; (8010634 <atan+0x324>)
 80103b4:	f7ef ff70 	bl	8000298 <__aeabi_dsub>
 80103b8:	2200      	movs	r2, #0
 80103ba:	4606      	mov	r6, r0
 80103bc:	460f      	mov	r7, r1
 80103be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103c2:	4620      	mov	r0, r4
 80103c4:	4629      	mov	r1, r5
 80103c6:	f7ef ff69 	bl	800029c <__adddf3>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	4630      	mov	r0, r6
 80103d0:	4639      	mov	r1, r7
 80103d2:	f7f0 fa43 	bl	800085c <__aeabi_ddiv>
 80103d6:	f04f 0a00 	mov.w	sl, #0
 80103da:	4604      	mov	r4, r0
 80103dc:	460d      	mov	r5, r1
 80103de:	4622      	mov	r2, r4
 80103e0:	462b      	mov	r3, r5
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7f0 f90f 	bl	8000608 <__aeabi_dmul>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4680      	mov	r8, r0
 80103f0:	4689      	mov	r9, r1
 80103f2:	f7f0 f909 	bl	8000608 <__aeabi_dmul>
 80103f6:	a374      	add	r3, pc, #464	; (adr r3, 80105c8 <atan+0x2b8>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	4606      	mov	r6, r0
 80103fe:	460f      	mov	r7, r1
 8010400:	f7f0 f902 	bl	8000608 <__aeabi_dmul>
 8010404:	a372      	add	r3, pc, #456	; (adr r3, 80105d0 <atan+0x2c0>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7ef ff47 	bl	800029c <__adddf3>
 801040e:	4632      	mov	r2, r6
 8010410:	463b      	mov	r3, r7
 8010412:	f7f0 f8f9 	bl	8000608 <__aeabi_dmul>
 8010416:	a370      	add	r3, pc, #448	; (adr r3, 80105d8 <atan+0x2c8>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7ef ff3e 	bl	800029c <__adddf3>
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	f7f0 f8f0 	bl	8000608 <__aeabi_dmul>
 8010428:	a36d      	add	r3, pc, #436	; (adr r3, 80105e0 <atan+0x2d0>)
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	f7ef ff35 	bl	800029c <__adddf3>
 8010432:	4632      	mov	r2, r6
 8010434:	463b      	mov	r3, r7
 8010436:	f7f0 f8e7 	bl	8000608 <__aeabi_dmul>
 801043a:	a36b      	add	r3, pc, #428	; (adr r3, 80105e8 <atan+0x2d8>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	f7ef ff2c 	bl	800029c <__adddf3>
 8010444:	4632      	mov	r2, r6
 8010446:	463b      	mov	r3, r7
 8010448:	f7f0 f8de 	bl	8000608 <__aeabi_dmul>
 801044c:	a368      	add	r3, pc, #416	; (adr r3, 80105f0 <atan+0x2e0>)
 801044e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010452:	f7ef ff23 	bl	800029c <__adddf3>
 8010456:	4642      	mov	r2, r8
 8010458:	464b      	mov	r3, r9
 801045a:	f7f0 f8d5 	bl	8000608 <__aeabi_dmul>
 801045e:	a366      	add	r3, pc, #408	; (adr r3, 80105f8 <atan+0x2e8>)
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	4680      	mov	r8, r0
 8010466:	4689      	mov	r9, r1
 8010468:	4630      	mov	r0, r6
 801046a:	4639      	mov	r1, r7
 801046c:	f7f0 f8cc 	bl	8000608 <__aeabi_dmul>
 8010470:	a363      	add	r3, pc, #396	; (adr r3, 8010600 <atan+0x2f0>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7ef ff0f 	bl	8000298 <__aeabi_dsub>
 801047a:	4632      	mov	r2, r6
 801047c:	463b      	mov	r3, r7
 801047e:	f7f0 f8c3 	bl	8000608 <__aeabi_dmul>
 8010482:	a361      	add	r3, pc, #388	; (adr r3, 8010608 <atan+0x2f8>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff06 	bl	8000298 <__aeabi_dsub>
 801048c:	4632      	mov	r2, r6
 801048e:	463b      	mov	r3, r7
 8010490:	f7f0 f8ba 	bl	8000608 <__aeabi_dmul>
 8010494:	a35e      	add	r3, pc, #376	; (adr r3, 8010610 <atan+0x300>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	f7ef fefd 	bl	8000298 <__aeabi_dsub>
 801049e:	4632      	mov	r2, r6
 80104a0:	463b      	mov	r3, r7
 80104a2:	f7f0 f8b1 	bl	8000608 <__aeabi_dmul>
 80104a6:	a35c      	add	r3, pc, #368	; (adr r3, 8010618 <atan+0x308>)
 80104a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ac:	f7ef fef4 	bl	8000298 <__aeabi_dsub>
 80104b0:	4632      	mov	r2, r6
 80104b2:	463b      	mov	r3, r7
 80104b4:	f7f0 f8a8 	bl	8000608 <__aeabi_dmul>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4640      	mov	r0, r8
 80104be:	4649      	mov	r1, r9
 80104c0:	f7ef feec 	bl	800029c <__adddf3>
 80104c4:	4622      	mov	r2, r4
 80104c6:	462b      	mov	r3, r5
 80104c8:	f7f0 f89e 	bl	8000608 <__aeabi_dmul>
 80104cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	d14b      	bne.n	801056e <atan+0x25e>
 80104d6:	4620      	mov	r0, r4
 80104d8:	4629      	mov	r1, r5
 80104da:	f7ef fedd 	bl	8000298 <__aeabi_dsub>
 80104de:	e72c      	b.n	801033a <atan+0x2a>
 80104e0:	ee10 0a10 	vmov	r0, s0
 80104e4:	2200      	movs	r2, #0
 80104e6:	4b53      	ldr	r3, [pc, #332]	; (8010634 <atan+0x324>)
 80104e8:	4629      	mov	r1, r5
 80104ea:	f7ef fed5 	bl	8000298 <__aeabi_dsub>
 80104ee:	2200      	movs	r2, #0
 80104f0:	4606      	mov	r6, r0
 80104f2:	460f      	mov	r7, r1
 80104f4:	4b4f      	ldr	r3, [pc, #316]	; (8010634 <atan+0x324>)
 80104f6:	4620      	mov	r0, r4
 80104f8:	4629      	mov	r1, r5
 80104fa:	f7ef fecf 	bl	800029c <__adddf3>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	4630      	mov	r0, r6
 8010504:	4639      	mov	r1, r7
 8010506:	f7f0 f9a9 	bl	800085c <__aeabi_ddiv>
 801050a:	f04f 0a01 	mov.w	sl, #1
 801050e:	4604      	mov	r4, r0
 8010510:	460d      	mov	r5, r1
 8010512:	e764      	b.n	80103de <atan+0xce>
 8010514:	4b49      	ldr	r3, [pc, #292]	; (801063c <atan+0x32c>)
 8010516:	429e      	cmp	r6, r3
 8010518:	dc1d      	bgt.n	8010556 <atan+0x246>
 801051a:	ee10 0a10 	vmov	r0, s0
 801051e:	2200      	movs	r2, #0
 8010520:	4b47      	ldr	r3, [pc, #284]	; (8010640 <atan+0x330>)
 8010522:	4629      	mov	r1, r5
 8010524:	f7ef feb8 	bl	8000298 <__aeabi_dsub>
 8010528:	2200      	movs	r2, #0
 801052a:	4606      	mov	r6, r0
 801052c:	460f      	mov	r7, r1
 801052e:	4b44      	ldr	r3, [pc, #272]	; (8010640 <atan+0x330>)
 8010530:	4620      	mov	r0, r4
 8010532:	4629      	mov	r1, r5
 8010534:	f7f0 f868 	bl	8000608 <__aeabi_dmul>
 8010538:	2200      	movs	r2, #0
 801053a:	4b3e      	ldr	r3, [pc, #248]	; (8010634 <atan+0x324>)
 801053c:	f7ef feae 	bl	800029c <__adddf3>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	4630      	mov	r0, r6
 8010546:	4639      	mov	r1, r7
 8010548:	f7f0 f988 	bl	800085c <__aeabi_ddiv>
 801054c:	f04f 0a02 	mov.w	sl, #2
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	e743      	b.n	80103de <atan+0xce>
 8010556:	462b      	mov	r3, r5
 8010558:	ee10 2a10 	vmov	r2, s0
 801055c:	2000      	movs	r0, #0
 801055e:	4939      	ldr	r1, [pc, #228]	; (8010644 <atan+0x334>)
 8010560:	f7f0 f97c 	bl	800085c <__aeabi_ddiv>
 8010564:	f04f 0a03 	mov.w	sl, #3
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	e737      	b.n	80103de <atan+0xce>
 801056e:	4b36      	ldr	r3, [pc, #216]	; (8010648 <atan+0x338>)
 8010570:	4e36      	ldr	r6, [pc, #216]	; (801064c <atan+0x33c>)
 8010572:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8010576:	4456      	add	r6, sl
 8010578:	449a      	add	sl, r3
 801057a:	e9da 2300 	ldrd	r2, r3, [sl]
 801057e:	f7ef fe8b 	bl	8000298 <__aeabi_dsub>
 8010582:	4622      	mov	r2, r4
 8010584:	462b      	mov	r3, r5
 8010586:	f7ef fe87 	bl	8000298 <__aeabi_dsub>
 801058a:	4602      	mov	r2, r0
 801058c:	460b      	mov	r3, r1
 801058e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010592:	f7ef fe81 	bl	8000298 <__aeabi_dsub>
 8010596:	f1bb 0f00 	cmp.w	fp, #0
 801059a:	4604      	mov	r4, r0
 801059c:	460d      	mov	r5, r1
 801059e:	f6bf aed6 	bge.w	801034e <atan+0x3e>
 80105a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105a6:	461d      	mov	r5, r3
 80105a8:	e6d1      	b.n	801034e <atan+0x3e>
 80105aa:	a51d      	add	r5, pc, #116	; (adr r5, 8010620 <atan+0x310>)
 80105ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80105b0:	e6cd      	b.n	801034e <atan+0x3e>
 80105b2:	bf00      	nop
 80105b4:	f3af 8000 	nop.w
 80105b8:	54442d18 	.word	0x54442d18
 80105bc:	3ff921fb 	.word	0x3ff921fb
 80105c0:	8800759c 	.word	0x8800759c
 80105c4:	7e37e43c 	.word	0x7e37e43c
 80105c8:	e322da11 	.word	0xe322da11
 80105cc:	3f90ad3a 	.word	0x3f90ad3a
 80105d0:	24760deb 	.word	0x24760deb
 80105d4:	3fa97b4b 	.word	0x3fa97b4b
 80105d8:	a0d03d51 	.word	0xa0d03d51
 80105dc:	3fb10d66 	.word	0x3fb10d66
 80105e0:	c54c206e 	.word	0xc54c206e
 80105e4:	3fb745cd 	.word	0x3fb745cd
 80105e8:	920083ff 	.word	0x920083ff
 80105ec:	3fc24924 	.word	0x3fc24924
 80105f0:	5555550d 	.word	0x5555550d
 80105f4:	3fd55555 	.word	0x3fd55555
 80105f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80105fc:	bfa2b444 	.word	0xbfa2b444
 8010600:	52defd9a 	.word	0x52defd9a
 8010604:	3fadde2d 	.word	0x3fadde2d
 8010608:	af749a6d 	.word	0xaf749a6d
 801060c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010610:	fe231671 	.word	0xfe231671
 8010614:	3fbc71c6 	.word	0x3fbc71c6
 8010618:	9998ebc4 	.word	0x9998ebc4
 801061c:	3fc99999 	.word	0x3fc99999
 8010620:	54442d18 	.word	0x54442d18
 8010624:	bff921fb 	.word	0xbff921fb
 8010628:	440fffff 	.word	0x440fffff
 801062c:	7ff00000 	.word	0x7ff00000
 8010630:	3fdbffff 	.word	0x3fdbffff
 8010634:	3ff00000 	.word	0x3ff00000
 8010638:	3ff2ffff 	.word	0x3ff2ffff
 801063c:	40037fff 	.word	0x40037fff
 8010640:	3ff80000 	.word	0x3ff80000
 8010644:	bff00000 	.word	0xbff00000
 8010648:	08010a60 	.word	0x08010a60
 801064c:	08010a40 	.word	0x08010a40

08010650 <fabs>:
 8010650:	ec51 0b10 	vmov	r0, r1, d0
 8010654:	ee10 2a10 	vmov	r2, s0
 8010658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801065c:	ec43 2b10 	vmov	d0, r2, r3
 8010660:	4770      	bx	lr

08010662 <matherr>:
 8010662:	2000      	movs	r0, #0
 8010664:	4770      	bx	lr
	...

08010668 <_init>:
 8010668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066a:	bf00      	nop
 801066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066e:	bc08      	pop	{r3}
 8010670:	469e      	mov	lr, r3
 8010672:	4770      	bx	lr

08010674 <_fini>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	bf00      	nop
 8010678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067a:	bc08      	pop	{r3}
 801067c:	469e      	mov	lr, r3
 801067e:	4770      	bx	lr
