
ciach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ede0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800ef80  0800ef80  0001ef80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2c0  0800f2c0  0002049c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f2c0  0800f2c0  0002049c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f2c0  0800f2c0  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2c0  0800f2c0  0001f2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2c4  0800f2c4  0001f2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0800f2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000049c  0800f764  0002049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  0800f764  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002303a  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037cd  00000000  00000000  00043506  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00046cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  000483c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002581d  00000000  00000000  00049910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017af9  00000000  00000000  0006f12d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc3ed  00000000  00000000  00086c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  00163090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000049c 	.word	0x2000049c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ef68 	.word	0x0800ef68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a0 	.word	0x200004a0
 80001dc:	0800ef68 	.word	0x0800ef68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f000 fee8 	bl	8001adc <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 fa91 	bl	8001238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f001 f8cc 	bl	8001ed0 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 fa7b 	bl	8001238 <Error_Handler>
  }

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004c4 	.word	0x200004c4
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x74>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d124      	bne.n	8000dc0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_Pin;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SHARP_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fcc0 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50000100 	.word	0x50000100
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_GPIO_Init+0x10c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 fe0d 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f64f 719e 	movw	r1, #65438	; 0xff9e
 8000e40:	4827      	ldr	r0, [pc, #156]	; (8000ee0 <MX_GPIO_Init+0x110>)
 8000e42:	f001 fe07 	bl	8002a54 <HAL_GPIO_WritePin>
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000e5e:	f001 fc6f 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e62:	2320      	movs	r3, #32
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f001 fc60 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO1_TOF1_Pin|GPIO1_TOF2_Pin;
 8000e80:	2330      	movs	r3, #48	; 0x30
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000e94:	f001 fc54 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e98:	f64f 739e 	movw	r3, #65438	; 0xff9e
 8000e9c:	60fb      	str	r3, [r7, #12]
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0x110>)
 8000eb2:	f001 fc45 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_GPIO_Init+0x114>)
 8000ece:	f001 fc37 	bl	8002740 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	48000800 	.word	0x48000800

08000ee8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C2_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000ef4:	f240 220b 	movw	r2, #523	; 0x20b
 8000ef8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f26:	f001 fdad 	bl	8002a84 <HAL_I2C_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f982 	bl	8001238 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f38:	f002 fc7e 	bl	8003838 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f42:	f000 f979 	bl	8001238 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C2_Init+0x74>)
 8000f4a:	f002 fcc0 	bl	80038ce <HAL_I2CEx_ConfigDigitalFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 f970 	bl	8001238 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000560 	.word	0x20000560
 8000f60:	40005800 	.word	0x40005800

08000f64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C3_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C3_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fa0:	f001 fd70 	bl	8002a84 <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 f945 	bl	8001238 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fb2:	f002 fc41 	bl	8003838 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f93c 	bl	8001238 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_I2C3_Init+0x74>)
 8000fc4:	f002 fc83 	bl	80038ce <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f933 	bl	8001238 <Error_Handler>
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000514 	.word	0x20000514
 8000fdc:	40007800 	.word	0x40007800
 8000fe0:	2000090e 	.word	0x2000090e

08000fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_I2C_MspInit+0x118>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12a      	bne.n	800105c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a3d      	ldr	r2, [pc, #244]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GYRO_TOF_SCL_Pin|GYRO_TOF_SDA_Pin;
 800101e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001030:	2304      	movs	r3, #4
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 fb7f 	bl	8002740 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800105a:	e04b      	b.n	80010f4 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_I2C_MspInit+0x120>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d146      	bne.n	80010f4 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOF2_SDA_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SDA_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_I2C_MspInit+0x124>)
 80010b4:	f001 fb44 	bl	8002740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOF2_SCL_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SCL_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f001 fb32 	bl	8002740 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010e6:	61d3      	str	r3, [r2, #28]
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_I2C_MspInit+0x11c>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005800 	.word	0x40005800
 8001100:	40021000 	.word	0x40021000
 8001104:	40007800 	.word	0x40007800
 8001108:	48000800 	.word	0x48000800

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 fc5b 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f823 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f7ff fe59 	bl	8000dd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111e:	f000 fa9b 	bl	8001658 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001122:	f7ff fdb9 	bl	8000c98 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001126:	f7ff fedf 	bl	8000ee8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800112a:	f7ff ff1b 	bl	8000f64 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800112e:	f000 fac3 	bl	80016b8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001132:	f000 f9d3 	bl	80014dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  uint8_t mhm[] = "10";
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <main+0x50>)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4611      	mov	r1, r2
 800113e:	8019      	strh	r1, [r3, #0]
 8001140:	3302      	adds	r3, #2
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	701a      	strb	r2, [r3, #0]
  MPU6050_Init();
 8001146:	f000 f87f 	bl	8001248 <MPU6050_Init>
  VL53L0X_Init();
 800114a:	f000 fb5b 	bl	8001804 <VL53L0X_Init>


	  	//uint16_t xpp = 257;


	  msg_t_Transmit();
 800114e:	f000 f967 	bl	8001420 <msg_t_Transmit>
//	  printf("gyr_x: %d, gyr_y: %d,gyr_z: %d\r\n",gyr_x, gyr_y, gyr_z);

//	  VL53L0X_MeasureDistance(&tof2_distance);
//
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  HAL_Delay(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001156:	f000 fc9f 	bl	8001a98 <HAL_Delay>
	  msg_t_Transmit();
 800115a:	e7f8      	b.n	800114e <main+0x42>
 800115c:	0800ef80 	.word	0x0800ef80

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a6      	sub	sp, #152	; 0x98
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00a f9bd 	bl	800b4ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2258      	movs	r2, #88	; 0x58
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a f9af 	bl	800b4ee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fbd2 	bl	8003968 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ca:	f000 f835 	bl	8001238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fad2 	bl	8004794 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f6:	f000 f81f 	bl	8001238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <SystemClock_Config+0xd4>)
 80011fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fcf0 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001226:	f000 f807 	bl	8001238 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3798      	adds	r7, #152	; 0x98
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	002400c6 	.word	0x002400c6

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <MPU6050_Init>:
#define I2C_TIMEOUT 10

float acc_scale;
float gyr_scale;

void MPU6050_Init(){
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af04      	add	r7, sp, #16
	  // try to connect once, timeout 100 ms
	  HAL_I2C_IsDeviceReady(&hi2c2,MPU6050_ADDRESS, 1, I2C_TIMEOUT);
 800124e:	230a      	movs	r3, #10
 8001250:	2201      	movs	r2, #1
 8001252:	21d0      	movs	r1, #208	; 0xd0
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MPU6050_Init+0x40>)
 8001256:	f001 ffa3 	bl	80031a0 <HAL_I2C_IsDeviceReady>

	  MPU6050_SelectGyrscopeAccelerometerRatio(AFS_SEL_ACC_2G, FS_SEL_GYRO_250);
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f815 	bl	800128c <MPU6050_SelectGyrscopeAccelerometerRatio>
	  // EXIT SLEEP MODE
	  uint8_t select_data = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &select_data, 1, I2C_TIMEOUT);
 8001266:	230a      	movs	r3, #10
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	226b      	movs	r2, #107	; 0x6b
 8001276:	21d0      	movs	r1, #208	; 0xd0
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MPU6050_Init+0x40>)
 800127a:	f001 fe7d 	bl	8002f78 <HAL_I2C_Mem_Write>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000560 	.word	0x20000560

0800128c <MPU6050_SelectGyrscopeAccelerometerRatio>:
	*y = ((int16_t)data[2] << 8) | data[3];
	*z = ((int16_t)data[4] << 8) | data[5];

}

void MPU6050_SelectGyrscopeAccelerometerRatio(uint8_t acc_range, uint8_t gyro_range){
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
	  // GYRO CONFIG
	  uint8_t select_data = FS_SEL_GYRO_500;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,GYRO_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 80012a0:	230a      	movs	r3, #10
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030f 	add.w	r3, r7, #15
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	221b      	movs	r2, #27
 80012b2:	21d0      	movs	r1, #208	; 0xd0
 80012b4:	482a      	ldr	r0, [pc, #168]	; (8001360 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 80012b6:	f001 fe5f 	bl	8002f78 <HAL_I2C_Mem_Write>

	  // ACCEL CONFIG
	  select_data =  AFS_SEL_ACC_4G;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,ACCEL_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 80012be:	230a      	movs	r3, #10
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	f107 030f 	add.w	r3, r7, #15
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	221c      	movs	r2, #28
 80012d0:	21d0      	movs	r1, #208	; 0xd0
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 80012d4:	f001 fe50 	bl	8002f78 <HAL_I2C_Mem_Write>

	switch(gyro_range){
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d81e      	bhi.n	800131c <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <MPU6050_SelectGyrscopeAccelerometerRatio+0x58>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	080012ff 	.word	0x080012ff
 80012ec:	08001309 	.word	0x08001309
 80012f0:	08001313 	.word	0x08001313
		// LSB SENSITIVITY - LSB/g - register map of device
		case 0:
			acc_scale = 16384.f;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80012f6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80012fa:	601a      	str	r2, [r3, #0]
			break;
 80012fc:	e00e      	b.n	800131c <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 1:
			acc_scale = 8192.f;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 8001300:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001304:	601a      	str	r2, [r3, #0]
			break;
 8001306:	e009      	b.n	800131c <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 2:
			acc_scale = 4096.f;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 800130a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800130e:	601a      	str	r2, [r3, #0]
			break;
 8001310:	e004      	b.n	800131c <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 3:
			acc_scale = 2048.f;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 8001314:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001318:	601a      	str	r2, [r3, #0]
			break;
 800131a:	bf00      	nop
	}

	switch(acc_range){
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d81a      	bhi.n	8001358 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <MPU6050_SelectGyrscopeAccelerometerRatio+0x9c>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	08001341 	.word	0x08001341
 8001330:	08001349 	.word	0x08001349
 8001334:	08001351 	.word	0x08001351

		case 0:
			gyr_scale = 131.f;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800133a:	4a0c      	ldr	r2, [pc, #48]	; (800136c <MPU6050_SelectGyrscopeAccelerometerRatio+0xe0>)
 800133c:	601a      	str	r2, [r3, #0]
			break;
 800133e:	e00b      	b.n	8001358 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 1:
			gyr_scale = 65.5f;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe4>)
 8001344:	601a      	str	r2, [r3, #0]
			break;
 8001346:	e007      	b.n	8001358 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 2:
			gyr_scale = 32.8f;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe8>)
 800134c:	601a      	str	r2, [r3, #0]
			break;
 800134e:	e003      	b.n	8001358 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 3:
			gyr_scale = 16.4f;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <MPU6050_SelectGyrscopeAccelerometerRatio+0xec>)
 8001354:	601a      	str	r2, [r3, #0]
			break;
 8001356:	bf00      	nop
		}

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000560 	.word	0x20000560
 8001364:	200005b0 	.word	0x200005b0
 8001368:	200005ac 	.word	0x200005ac
 800136c:	43030000 	.word	0x43030000
 8001370:	42830000 	.word	0x42830000
 8001374:	42033333 	.word	0x42033333
 8001378:	41833333 	.word	0x41833333

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b2:	2007      	movs	r0, #7
 80013b4:	f001 f990 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fb1e 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <msg_t_Transmit>:
#include "stm_esp_transfer.h"

void msg_t_Transmit(){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
//	char buffer[sizeof(msg_t)];
//	memcpy(buffer, msg, sizeof(msg_t));
	//uint16_t xpp = 257;

	char xd[] = "20 30 40";
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <msg_t_Transmit+0x24>)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	ca07      	ldmia	r2, {r0, r1, r2}
 800142c:	c303      	stmia	r3!, {r0, r1}
 800142e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2,xd,sizeof(xd), 50);
 8001430:	1d39      	adds	r1, r7, #4
 8001432:	2332      	movs	r3, #50	; 0x32
 8001434:	2209      	movs	r2, #9
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <msg_t_Transmit+0x28>)
 8001438:	f004 fbea 	bl	8005c10 <HAL_UART_Transmit>

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800ef84 	.word	0x0800ef84
 8001448:	20000684 	.word	0x20000684

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00a f802 	bl	800b484 <__errno>
 8001480:	4602      	mov	r2, r0
 8001482:	230c      	movs	r3, #12
 8001484:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20010000 	.word	0x20010000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200004b8 	.word	0x200004b8
 80014b4:	20000950 	.word	0x20000950

080014b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001502:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <MX_TIM4_Init+0xc8>)
 8001504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001508:	2247      	movs	r2, #71	; 0x47
 800150a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_TIM4_Init+0xc4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001514:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001518:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_TIM4_Init+0xc4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001526:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001528:	f003 fd88 	bl	800503c <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001532:	f7ff fe81 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001546:	f004 fa89 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001550:	f7ff fe72 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM4_Init+0xc4>)
 800156c:	f003 fdbe 	bl	80050ec <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001576:	f7ff fe5f 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001582:	f003 fdb3 	bl	80050ec <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800158c:	f7ff fe54 	bl	8001238 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM4_Init+0xc4>)
 8001592:	f000 f829 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200005b4 	.word	0x200005b4
 80015a4:	40000800 	.word	0x40000800

080015a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_TIM_PWM_MspInit+0x38>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10b      	bne.n	80015d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40000800 	.word	0x40000800
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11d      	bne.n	8001646 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_Pin|PWM_MOTOR_2_Pin;
 8001622:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001634:	230a      	movs	r3, #10
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f001 f87d 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40000800 	.word	0x40000800
 8001654:	40021000 	.word	0x40021000

08001658 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART2_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800169c:	f004 fa6a 	bl	8005b74 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f7ff fdc7 	bl	8001238 <Error_Handler>
  }

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000684 	.word	0x20000684
 80016b4:	40004400 	.word	0x40004400

080016b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <MX_USART3_UART_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART3_UART_Init+0x58>)
 80016fc:	f004 fa3a 	bl	8005b74 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff fd97 	bl	8001238 <Error_Handler>
  }

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000600 	.word	0x20000600
 8001714:	40004800 	.word	0x40004800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <HAL_UART_MspInit+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d129      	bne.n	800178e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176a:	230c      	movs	r3, #12
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f000 ffda 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800178c:	e02d      	b.n	80017ea <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_UART_MspInit+0xe4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d128      	bne.n	80017ea <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 80017b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017ba:	6153      	str	r3, [r2, #20]
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_UART_MspInit+0xe0>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_TX_Pin|STM_RX_Pin;
 80017c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017da:	2307      	movs	r3, #7
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <HAL_UART_MspInit+0xe8>)
 80017e6:	f000 ffab 	bl	8002740 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40004400 	.word	0x40004400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40004800 	.word	0x40004800
 8001800:	48000800 	.word	0x48000800

08001804 <VL53L0X_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;


void VL53L0X_Init(){
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	af00      	add	r7, sp, #0



	 /* USER CODE BEGIN 2 */

	  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 8001808:	4a4f      	ldr	r2, [pc, #316]	; (8001948 <VL53L0X_Init+0x144>)
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <VL53L0X_Init+0x148>)
 800180c:	4614      	mov	r4, r2
 800180e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001810:	6020      	str	r0, [r4, #0]
 8001812:	6061      	str	r1, [r4, #4]
 8001814:	60a2      	str	r2, [r4, #8]
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	81a2      	strh	r2, [r4, #12]
 800181c:	73a3      	strb	r3, [r4, #14]
 800181e:	230e      	movs	r3, #14
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <VL53L0X_Init+0x14c>)
 8001824:	701a      	strb	r2, [r3, #0]

	  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 8001826:	4a48      	ldr	r2, [pc, #288]	; (8001948 <VL53L0X_Init+0x144>)
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <VL53L0X_Init+0x150>)
 800182a:	4615      	mov	r5, r2
 800182c:	461c      	mov	r4, r3
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	6028      	str	r0, [r5, #0]
 8001832:	6069      	str	r1, [r5, #4]
 8001834:	60aa      	str	r2, [r5, #8]
 8001836:	60eb      	str	r3, [r5, #12]
 8001838:	cc03      	ldmia	r4!, {r0, r1}
 800183a:	6128      	str	r0, [r5, #16]
 800183c:	6169      	str	r1, [r5, #20]
 800183e:	8823      	ldrh	r3, [r4, #0]
 8001840:	78a2      	ldrb	r2, [r4, #2]
 8001842:	832b      	strh	r3, [r5, #24]
 8001844:	4613      	mov	r3, r2
 8001846:	76ab      	strb	r3, [r5, #26]
 8001848:	231a      	movs	r3, #26
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b40      	ldr	r3, [pc, #256]	; (8001950 <VL53L0X_Init+0x14c>)
 800184e:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <VL53L0X_Init+0x14c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b29a      	uxth	r2, r3
 8001856:	2364      	movs	r3, #100	; 0x64
 8001858:	493b      	ldr	r1, [pc, #236]	; (8001948 <VL53L0X_Init+0x144>)
 800185a:	483f      	ldr	r0, [pc, #252]	; (8001958 <VL53L0X_Init+0x154>)
 800185c:	f004 f9d8 	bl	8005c10 <HAL_UART_Transmit>

	  Dev->I2cHandle = &hi2c3;
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <VL53L0X_Init+0x158>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <VL53L0X_Init+0x15c>)
 8001866:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev->I2cDevAddr = 0x52;
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <VL53L0X_Init+0x158>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2252      	movs	r2, #82	; 0x52
 8001870:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187a:	483a      	ldr	r0, [pc, #232]	; (8001964 <VL53L0X_Init+0x160>)
 800187c:	f001 f8ea 	bl	8002a54 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001880:	2014      	movs	r0, #20
 8001882:	f000 f909 	bl	8001a98 <HAL_Delay>
	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_SET); // Enable XSHUT
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <VL53L0X_Init+0x160>)
 800188e:	f001 f8e1 	bl	8002a54 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001892:	2014      	movs	r0, #20
 8001894:	f000 f900 	bl	8001a98 <HAL_Delay>

	  //
	  // VL53L0X init for Single Measurement
	  //

	  VL53L0X_WaitDeviceBooted( Dev );
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <VL53L0X_Init+0x158>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f005 f8c7 	bl	8006a30 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <VL53L0X_Init+0x158>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fddc 	bl	8006464 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <VL53L0X_Init+0x158>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 ff3b 	bl	800672c <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <VL53L0X_Init+0x158>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <VL53L0X_Init+0x164>)
 80018bc:	492b      	ldr	r1, [pc, #172]	; (800196c <VL53L0X_Init+0x168>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fdf2 	bl	80074a8 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <VL53L0X_Init+0x158>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <VL53L0X_Init+0x16c>)
 80018ca:	492a      	ldr	r1, [pc, #168]	; (8001974 <VL53L0X_Init+0x170>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f006 fa79 	bl	8007dc4 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <VL53L0X_Init+0x158>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f947 	bl	8006b6c <VL53L0X_SetDeviceMode>


	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <VL53L0X_Init+0x158>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fbd8 	bl	800709c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <VL53L0X_Init+0x158>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 fbd1 	bl	800709c <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <VL53L0X_Init+0x158>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f641 1299 	movw	r2, #6553	; 0x1999
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fc79 	bl	80071fc <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <VL53L0X_Init+0x158>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fc71 	bl	80071fc <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <VL53L0X_Init+0x158>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001922:	4618      	mov	r0, r3
 8001924:	f005 f99c 	bl	8006c60 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <VL53L0X_Init+0x158>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2212      	movs	r2, #18
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f005 f9bb 	bl	8006cac <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <VL53L0X_Init+0x158>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	220e      	movs	r2, #14
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f005 f9b4 	bl	8006cac <VL53L0X_SetVcselPulsePeriod>
	  /* USER CODE END 2 */

}
 8001944:	bf00      	nop
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	20000728 	.word	0x20000728
 800194c:	0800ef90 	.word	0x0800ef90
 8001950:	20000724 	.word	0x20000724
 8001954:	0800efa0 	.word	0x0800efa0
 8001958:	20000684 	.word	0x20000684
 800195c:	20000004 	.word	0x20000004
 8001960:	20000514 	.word	0x20000514
 8001964:	48000400 	.word	0x48000400
 8001968:	2000076c 	.word	0x2000076c
 800196c:	20000900 	.word	0x20000900
 8001970:	20000725 	.word	0x20000725
 8001974:	20000768 	.word	0x20000768

08001978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopForever+0xe>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopForever+0x16>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a2:	f7ff fd89 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f009 fd73 	bl	800b490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019aa:	f7ff fbaf 	bl	800110c <main>

080019ae <LoopForever>:

LoopForever:
    b LoopForever
 80019ae:	e7fe      	b.n	80019ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 80019bc:	0800f2c8 	.word	0x0800f2c8
  ldr r2, =_sbss
 80019c0:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 80019c4:	2000094c 	.word	0x2000094c

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 fe7b 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fcc8 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fe85 	bl	8002726 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 fe5b 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	2000000c 	.word	0x2000000c
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000904 	.word	0x20000904

08001a80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000904 	.word	0x20000904

08001a98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_Delay+0x40>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09a      	sub	sp, #104	; 0x68
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e1e3      	b.n	8001ec4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d176      	bne.n	8001bfc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d152      	bne.n	8001bbc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff f90f 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d13b      	bne.n	8001bbc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fcaf 	bl	80024a8 <ADC_Disable>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d12f      	bne.n	8001bbc <HAL_ADC_Init+0xe0>
 8001b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d12b      	bne.n	8001bbc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b6c:	f023 0302 	bic.w	r3, r3, #2
 8001b70:	f043 0202 	orr.w	r2, r3, #2
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b86:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b96:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b98:	4b92      	ldr	r3, [pc, #584]	; (8001de4 <HAL_ADC_Init+0x308>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_ADC_Init+0x30c>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9a      	lsrs	r2, r3, #18
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bae:	e002      	b.n	8001bb6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd8:	d110      	bne.n	8001bfc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f023 0312 	bic.w	r3, r3, #18
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 8150 	bne.w	8001eaa <HAL_ADC_Init+0x3ce>
 8001c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 814b 	bne.w	8001eaa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 8143 	bne.w	8001eaa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Init+0x16c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <HAL_ADC_Init+0x310>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_Init+0x170>
 8001c48:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <HAL_ADC_Init+0x314>)
 8001c4a:	e000      	b.n	8001c4e <HAL_ADC_Init+0x172>
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_ADC_Init+0x318>)
 8001c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c58:	d102      	bne.n	8001c60 <HAL_ADC_Init+0x184>
 8001c5a:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_ADC_Init+0x310>)
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e01a      	b.n	8001c96 <HAL_ADC_Init+0x1ba>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a61      	ldr	r2, [pc, #388]	; (8001dec <HAL_ADC_Init+0x310>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d103      	bne.n	8001c72 <HAL_ADC_Init+0x196>
 8001c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e011      	b.n	8001c96 <HAL_ADC_Init+0x1ba>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_ADC_Init+0x31c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADC_Init+0x1a6>
 8001c7c:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <HAL_ADC_Init+0x320>)
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e009      	b.n	8001c96 <HAL_ADC_Init+0x1ba>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a5d      	ldr	r2, [pc, #372]	; (8001dfc <HAL_ADC_Init+0x320>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <HAL_ADC_Init+0x1b6>
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_ADC_Init+0x31c>)
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e001      	b.n	8001c96 <HAL_ADC_Init+0x1ba>
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_ADC_Init+0x1da>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Init+0x1da>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_ADC_Init+0x1dc>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11c      	bne.n	8001cf6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_Init+0x202>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x202>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADC_Init+0x204>
 8001cde:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d108      	bne.n	8001cf6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	035b      	lsls	r3, r3, #13
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d00:	2a01      	cmp	r2, #1
 8001d02:	d002      	beq.n	8001d0a <HAL_ADC_Init+0x22e>
 8001d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_Init+0x230>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d11b      	bne.n	8001d62 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7e5b      	ldrb	r3, [r3, #25]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	3b01      	subs	r3, #1
 8001d38:	045a      	lsls	r2, r3, #17
 8001d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
 8001d44:	e00d      	b.n	8001d62 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d4e:	f043 0220 	orr.w	r2, r3, #32
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d054      	beq.n	8001e14 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_ADC_Init+0x31c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_ADC_Init+0x2a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_ADC_Init+0x320>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d140      	bne.n	8001e00 <HAL_ADC_Init+0x324>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d86:	d02a      	beq.n	8001dde <HAL_ADC_Init+0x302>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d90:	d022      	beq.n	8001dd8 <HAL_ADC_Init+0x2fc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d9a:	d01a      	beq.n	8001dd2 <HAL_ADC_Init+0x2f6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001da4:	d012      	beq.n	8001dcc <HAL_ADC_Init+0x2f0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001dae:	d00a      	beq.n	8001dc6 <HAL_ADC_Init+0x2ea>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001db8:	d002      	beq.n	8001dc0 <HAL_ADC_Init+0x2e4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	e023      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dc0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dc4:	e020      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001dca:	e01d      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dcc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dd0:	e01a      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd6:	e017      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dd8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ddc:	e014      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001dde:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001de2:	e011      	b.n	8001e08 <HAL_ADC_Init+0x32c>
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	50000100 	.word	0x50000100
 8001df0:	50000300 	.word	0x50000300
 8001df4:	50000700 	.word	0x50000700
 8001df8:	50000400 	.word	0x50000400
 8001dfc:	50000500 	.word	0x50000500
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e10:	4313      	orrs	r3, r2
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d114      	bne.n	8001e4c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e30:	f023 0302 	bic.w	r3, r3, #2
 8001e34:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7e1b      	ldrb	r3, [r3, #24]
 8001e3a:	039a      	lsls	r2, r3, #14
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4313      	orrs	r3, r2
 8001e46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_ADC_Init+0x3f0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10c      	bne.n	8001e82 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f023 010f 	bic.w	r1, r3, #15
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e80:	e007      	b.n	8001e92 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020f 	bic.w	r2, r2, #15
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f023 0303 	bic.w	r3, r3, #3
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea8:	e00a      	b.n	8001ec0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f023 0312 	bic.w	r3, r3, #18
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3768      	adds	r7, #104	; 0x68
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	fff0c007 	.word	0xfff0c007

08001ed0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b09b      	sub	sp, #108	; 0x6c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x22>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e2cb      	b.n	800248a <HAL_ADC_ConfigChannel+0x5ba>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 82af 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d81c      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	461a      	mov	r2, r3
 8001f26:	231f      	movs	r3, #31
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	e063      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d81e      	bhi.n	8001f92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	3b1e      	subs	r3, #30
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4019      	ands	r1, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f90:	e040      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b0e      	cmp	r3, #14
 8001f98:	d81e      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	3b3c      	subs	r3, #60	; 0x3c
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4019      	ands	r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	3b3c      	subs	r3, #60	; 0x3c
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fd6:	e01d      	b.n	8002014 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3b5a      	subs	r3, #90	; 0x5a
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4019      	ands	r1, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	3b5a      	subs	r3, #90	; 0x5a
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80e5 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d91c      	bls.n	8002066 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6999      	ldr	r1, [r3, #24]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	3b1e      	subs	r3, #30
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	4019      	ands	r1, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6898      	ldr	r0, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3b1e      	subs	r3, #30
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	e019      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6959      	ldr	r1, [r3, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6898      	ldr	r0, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d84f      	bhi.n	800215c <HAL_ADC_ConfigChannel+0x28c>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020f7 	.word	0x080020f7
 80020cc:	08002119 	.word	0x08002119
 80020d0:	0800213b 	.word	0x0800213b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020da:	4b9f      	ldr	r3, [pc, #636]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 80020dc:	4013      	ands	r3, r2
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	0691      	lsls	r1, r2, #26
 80020e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020e6:	430a      	orrs	r2, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020f4:	e07e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020fc:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	0691      	lsls	r1, r2, #26
 8002106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002108:	430a      	orrs	r2, r1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002114:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002116:	e06d      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800211e:	4b8e      	ldr	r3, [pc, #568]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 8002120:	4013      	ands	r3, r2
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	0691      	lsls	r1, r2, #26
 8002128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002136:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002138:	e05c      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002140:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_ADC_ConfigChannel+0x488>)
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	0691      	lsls	r1, r2, #26
 800214a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002158:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800215a:	e04b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10a      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021ec:	e001      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80021f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x344>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x344>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_ADC_ConfigChannel+0x346>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8131 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d00f      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002242:	e049      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b09      	cmp	r3, #9
 8002264:	d91c      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6999      	ldr	r1, [r3, #24]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	3b1b      	subs	r3, #27
 8002278:	2207      	movs	r2, #7
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	4019      	ands	r1, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	3b1b      	subs	r3, #27
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	619a      	str	r2, [r3, #24]
 800229e:	e01b      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6959      	ldr	r1, [r3, #20]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4019      	ands	r1, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	fa00 f203 	lsl.w	r2, r0, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x41c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x420>
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_ADC_ConfigChannel+0x490>)
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x422>
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_ADC_ConfigChannel+0x494>)
 80022f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800230c:	2b11      	cmp	r3, #17
 800230e:	d105      	bne.n	800231c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002320:	2b12      	cmp	r3, #18
 8002322:	f040 80ac 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80a5 	bne.w	800247e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233c:	d102      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x474>
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e023      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_ADC_ConfigChannel+0x48c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10c      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x498>
 800234e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e01a      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002356:	bf00      	nop
 8002358:	83fff000 	.word	0x83fff000
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_ADC_ConfigChannel+0x5c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d102      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4a8>
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_ADC_ConfigChannel+0x5cc>)
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e009      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_ADC_ConfigChannel+0x5cc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d102      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x4b8>
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <HAL_ADC_ConfigChannel+0x5c8>)
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e001      	b.n	800238c <HAL_ADC_ConfigChannel+0x4bc>
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d108      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4dc>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x4de>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d150      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x504>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x504>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x506>
 80023d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d13c      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d11d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x54e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ea:	d118      	bne.n	800241e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9a      	lsrs	r2, r3, #18
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800240e:	e002      	b.n	8002416 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3b01      	subs	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800241c:	e02e      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b11      	cmp	r3, #17
 8002424:	d10b      	bne.n	800243e <HAL_ADC_ConfigChannel+0x56e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242e:	d106      	bne.n	800243e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800243c:	e01e      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b12      	cmp	r3, #18
 8002444:	d11a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002452:	e013      	b.n	800247c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002466:	e00a      	b.n	800247e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800247a:	e000      	b.n	800247e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800247c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800248a:	4618      	mov	r0, r3
 800248c:	376c      	adds	r7, #108	; 0x6c
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	50000400 	.word	0x50000400
 800249c:	50000500 	.word	0x50000500
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <ADC_Disable+0x2c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <ADC_Disable+0x2c>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <ADC_Disable+0x2e>
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d047      	beq.n	800256a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030d 	and.w	r3, r3, #13
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10f      	bne.n	8002508 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0202 	orr.w	r2, r2, #2
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2203      	movs	r2, #3
 80024fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002500:	f7ff fabe 	bl	8001a80 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002506:	e029      	b.n	800255c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f043 0210 	orr.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e023      	b.n	800256c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002524:	f7ff faac 	bl	8001a80 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d914      	bls.n	800255c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10d      	bne.n	800255c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f043 0210 	orr.w	r2, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d0dc      	beq.n	8002524 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff47 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff5c 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff8e 	bl	800262c <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5d 	bl	80025d8 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffb0 	bl	8002694 <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e160      	b.n	8002a12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8152 	beq.w	8002a0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x40>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0201 	and.w	r2, r3, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	6939      	ldr	r1, [r7, #16]
 800286e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80ac 	beq.w	8002a0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_GPIO_Init+0x2f0>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <HAL_GPIO_Init+0x2f0>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_GPIO_Init+0x2f0>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028cc:	4a59      	ldr	r2, [pc, #356]	; (8002a34 <HAL_GPIO_Init+0x2f4>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028f6:	d025      	beq.n	8002944 <HAL_GPIO_Init+0x204>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <HAL_GPIO_Init+0x2f8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d01f      	beq.n	8002940 <HAL_GPIO_Init+0x200>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_GPIO_Init+0x2fc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d019      	beq.n	800293c <HAL_GPIO_Init+0x1fc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_GPIO_Init+0x300>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1f8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_GPIO_Init+0x304>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1f4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_GPIO_Init+0x308>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1f0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x30c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1ec>
 8002928:	2306      	movs	r3, #6
 800292a:	e00c      	b.n	8002946 <HAL_GPIO_Init+0x206>
 800292c:	2307      	movs	r3, #7
 800292e:	e00a      	b.n	8002946 <HAL_GPIO_Init+0x206>
 8002930:	2305      	movs	r3, #5
 8002932:	e008      	b.n	8002946 <HAL_GPIO_Init+0x206>
 8002934:	2304      	movs	r3, #4
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x206>
 8002938:	2303      	movs	r3, #3
 800293a:	e004      	b.n	8002946 <HAL_GPIO_Init+0x206>
 800293c:	2302      	movs	r3, #2
 800293e:	e002      	b.n	8002946 <HAL_GPIO_Init+0x206>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_GPIO_Init+0x206>
 8002944:	2300      	movs	r3, #0
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	f002 0203 	and.w	r2, r2, #3
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4093      	lsls	r3, r2
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002956:	4937      	ldr	r1, [pc, #220]	; (8002a34 <HAL_GPIO_Init+0x2f4>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_GPIO_Init+0x310>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002988:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_GPIO_Init+0x310>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_GPIO_Init+0x310>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029b2:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_GPIO_Init+0x310>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_GPIO_Init+0x310>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029dc:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_GPIO_Init+0x310>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_GPIO_Init+0x310>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_GPIO_Init+0x310>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f ae97 	bne.w	8002750 <HAL_GPIO_Init+0x10>
  }
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010000 	.word	0x40010000
 8002a38:	48000400 	.word	0x48000400
 8002a3c:	48000800 	.word	0x48000800
 8002a40:	48000c00 	.word	0x48000c00
 8002a44:	48001000 	.word	0x48001000
 8002a48:	48001400 	.word	0x48001400
 8002a4c:	48001800 	.word	0x48001800
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e081      	b.n	8002b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fa9a 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e006      	b.n	8002b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d104      	bne.n	8002b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	817b      	strh	r3, [r7, #10]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 80da 	bne.w	8002d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Transmit+0x30>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0d3      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe ff50 	bl	8001a80 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fc56 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0be      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2221      	movs	r2, #33	; 0x21
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2bff      	cmp	r3, #255	; 0xff
 8002c2e:	d90e      	bls.n	8002c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	22ff      	movs	r2, #255	; 0xff
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fdc8 	bl	80037dc <I2C_TransferConfig>
 8002c4c:	e06c      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fdb7 	bl	80037dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c6e:	e05b      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fc53 	bl	8003520 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e07b      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d034      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d130      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fbe5 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04d      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fd6b 	bl	80037dc <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fd5a 	bl	80037dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d19e      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fc32 	bl	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01a      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	80002000 	.word	0x80002000
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	817b      	strh	r3, [r7, #10]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	f040 80db 	bne.w	8002f64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_I2C_Master_Receive+0x30>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0d4      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fe5c 	bl	8001a80 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2319      	movs	r3, #25
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb62 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0bf      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2222      	movs	r2, #34	; 0x22
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2210      	movs	r2, #16
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	893a      	ldrh	r2, [r7, #8]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2bff      	cmp	r3, #255	; 0xff
 8002e16:	d90e      	bls.n	8002e36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	22ff      	movs	r2, #255	; 0xff
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <HAL_I2C_Master_Receive+0x1e4>)
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fcd4 	bl	80037dc <I2C_TransferConfig>
 8002e34:	e06d      	b.n	8002f12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <HAL_I2C_Master_Receive+0x1e4>)
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fcc3 	bl	80037dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e56:	e05c      	b.n	8002f12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6a39      	ldr	r1, [r7, #32]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fbdb 	bl	8003618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e07c      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d034      	beq.n	8002f12 <HAL_I2C_Master_Receive+0x186>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d130      	bne.n	8002f12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 faf0 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04d      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2bff      	cmp	r3, #255	; 0xff
 8002ed2:	d90e      	bls.n	8002ef2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fc76 	bl	80037dc <I2C_TransferConfig>
 8002ef0:	e00f      	b.n	8002f12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fc65 	bl	80037dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d19d      	bne.n	8002e58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fb3d 	bl	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01a      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2220      	movs	r2, #32
 8002f36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_I2C_Master_Receive+0x1e8>)
 8002f44:	400b      	ands	r3, r1
 8002f46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	80002400 	.word	0x80002400
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 80f9 	bne.w	8003192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_I2C_Mem_Write+0x34>
 8002fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ed      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Mem_Write+0x4e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0e6      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fce:	f7fe fd57 	bl	8001a80 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa5d 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d1      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003018:	88f8      	ldrh	r0, [r7, #6]
 800301a:	893a      	ldrh	r2, [r7, #8]
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4603      	mov	r3, r0
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f9c1 	bl	80033b0 <I2C_RequestMemoryWrite>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0a9      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d90e      	bls.n	8003068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8979      	ldrh	r1, [r7, #10]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fbbb 	bl	80037dc <I2C_TransferConfig>
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	b2da      	uxtb	r2, r3
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fbaa 	bl	80037dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fa47 	bl	8003520 <I2C_WaitOnTXISFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e07b      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d034      	beq.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d130      	bne.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9d9 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04d      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	d90e      	bls.n	8003120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	b2da      	uxtb	r2, r3
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fb5f 	bl	80037dc <I2C_TransferConfig>
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb4e 	bl	80037dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d19e      	bne.n	8003088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa26 	bl	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01a      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_I2C_Mem_Write+0x224>)
 8003172:	400b      	ands	r3, r1
 8003174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	fe00e800 	.word	0xfe00e800

080031a0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80f1 	bne.w	80033a4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0e7      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_I2C_IsDeviceReady+0x44>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0e0      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_I2C_IsDeviceReady+0x72>
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800320c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003210:	e004      	b.n	800321c <HAL_I2C_IsDeviceReady+0x7c>
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003218:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fc2d 	bl	8001a80 <HAL_GetTick>
 8003226:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b10      	cmp	r3, #16
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003254:	e034      	b.n	80032c0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d01a      	beq.n	8003294 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7fe fc0f 	bl	8001a80 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <HAL_I2C_IsDeviceReady+0xd4>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10f      	bne.n	8003294 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e088      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <HAL_I2C_IsDeviceReady+0x12c>
 80032c6:	7fbb      	ldrb	r3, [r7, #30]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c4      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d01a      	beq.n	8003310 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2120      	movs	r1, #32
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f8db 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e058      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e04a      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	2120      	movs	r1, #32
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f8c0 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e03d      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2210      	movs	r2, #16
 8003330:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d118      	bne.n	8003374 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003350:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2120      	movs	r1, #32
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f89f 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01c      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2220      	movs	r2, #32
 8003372:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	f63f af3b 	bhi.w	80031fa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	4608      	mov	r0, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	460b      	mov	r3, r1
 80033c4:	813b      	strh	r3, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <I2C_RequestMemoryWrite+0xa4>)
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f9ff 	bl	80037dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f89c 	bl	8003520 <I2C_WaitOnTXISFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02c      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
 8003402:	e015      	b.n	8003430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	b29b      	uxth	r3, r3
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f882 	bl	8003520 <I2C_WaitOnTXISFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e012      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2200      	movs	r2, #0
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f830 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	80002000 	.word	0x80002000

08003458 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d103      	bne.n	8003476 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	619a      	str	r2, [r3, #24]
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b0:	e022      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d01e      	beq.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fae1 	bl	8001a80 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e00f      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	d0cd      	beq.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800352c:	e02c      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8dc 	bl	80036f0 <I2C_IsAcknowledgeFailed>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02a      	b.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d01e      	beq.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fa99 	bl	8001a80 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d113      	bne.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d1cb      	bne.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ac:	e028      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f89c 	bl	80036f0 <I2C_IsAcknowledgeFailed>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e026      	b.n	8003610 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fa5d 	bl	8001a80 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e007      	b.n	8003610 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d1cf      	bne.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003624:	e055      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f860 	bl	80036f0 <I2C_IsAcknowledgeFailed>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e053      	b.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b20      	cmp	r3, #32
 8003646:	d129      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d105      	bne.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e03f      	b.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e022      	b.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe f9f0 	bl	8001a80 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e007      	b.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d1a2      	bne.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	fe00e800 	.word	0xfe00e800

080036f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d161      	bne.n	80037ce <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003718:	d02b      	beq.n	8003772 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003728:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800372a:	e022      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d01e      	beq.n	8003772 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003734:	f7fe f9a4 	bl	8001a80 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <I2C_IsAcknowledgeFailed+0x5a>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d113      	bne.n	8003772 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02e      	b.n	80037d0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d1d5      	bne.n	800372c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2210      	movs	r2, #16
 8003786:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2220      	movs	r2, #32
 800378e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fe61 	bl	8003458 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <I2C_IsAcknowledgeFailed+0xe8>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	fe00e800 	.word	0xfe00e800

080037dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	4613      	mov	r3, r2
 80037ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	0d5b      	lsrs	r3, r3, #21
 80037f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <I2C_TransferConfig+0x58>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	43db      	mvns	r3, r3
 8003802:	ea02 0103 	and.w	r1, r2, r3
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800380c:	7a7b      	ldrb	r3, [r7, #9]
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	431a      	orrs	r2, r3
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	03ff63ff 	.word	0x03ff63ff

08003838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d138      	bne.n	80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003858:	2302      	movs	r3, #2
 800385a:	e032      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800388a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d139      	bne.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e033      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	; 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800396e:	af00      	add	r7, sp, #0
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f000 bf01 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8160 	beq.w	8003c52 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003992:	4bae      	ldr	r3, [pc, #696]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800399e:	4bab      	ldr	r3, [pc, #684]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d159      	bne.n	8003a5e <HAL_RCC_OscConfig+0xf6>
 80039aa:	4ba8      	ldr	r3, [pc, #672]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d152      	bne.n	8003a5e <HAL_RCC_OscConfig+0xf6>
 80039b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d102      	bne.n	80039ea <HAL_RCC_OscConfig+0x82>
 80039e4:	4b99      	ldr	r3, [pc, #612]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0xae>
 80039ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80039fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a12:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a1a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003a1e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a22:	fa92 f2a2 	rbit	r2, r2
 8003a26:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003a2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a2e:	fab2 f282 	clz	r2, r2
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f042 0220 	orr.w	r2, r2, #32
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f002 021f 	and.w	r2, r2, #31
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8102 	beq.w	8003c50 <HAL_RCC_OscConfig+0x2e8>
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80fc 	bne.w	8003c50 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f000 be93 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d106      	bne.n	8003a78 <HAL_RCC_OscConfig+0x110>
 8003a6a:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a77      	ldr	r2, [pc, #476]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e030      	b.n	8003ada <HAL_RCC_OscConfig+0x172>
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x134>
 8003a82:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a71      	ldr	r2, [pc, #452]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6e      	ldr	r2, [pc, #440]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01e      	b.n	8003ada <HAL_RCC_OscConfig+0x172>
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x15a>
 8003aa8:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b65      	ldr	r3, [pc, #404]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a64      	ldr	r2, [pc, #400]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0x172>
 8003ac2:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a61      	ldr	r2, [pc, #388]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d059      	beq.n	8003b98 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd ffcc 	bl	8001a80 <HAL_GetTick>
 8003ae8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aee:	f7fd ffc7 	bl	8001a80 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d902      	bls.n	8003b04 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f000 be40 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
 8003b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b08:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003b18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_OscConfig+0x1ce>
 8003b30:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x1fa>
 8003b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b66:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003b6a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003b6e:	fa92 f2a2 	rbit	r2, r2
 8003b72:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003b76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f002 021f 	and.w	r2, r2, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ab      	beq.n	8003aee <HAL_RCC_OscConfig+0x186>
 8003b96:	e05c      	b.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd ff72 	bl	8001a80 <HAL_GetTick>
 8003b9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba2:	f7fd ff6d 	bl	8001a80 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d902      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	f000 bde6 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
 8003bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003bcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <HAL_RCC_OscConfig+0x282>
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	e015      	b.n	8003c16 <HAL_RCC_OscConfig+0x2ae>
 8003bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <HAL_RCC_OscConfig+0x2e4>)
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c1a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003c1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c22:	fa92 f2a2 	rbit	r2, r2
 8003c26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003c2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c2e:	fab2 f282 	clz	r2, r2
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f042 0220 	orr.w	r2, r2, #32
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	f002 021f 	and.w	r2, r2, #31
 8003c3e:	2101      	movs	r1, #1
 8003c40:	fa01 f202 	lsl.w	r2, r1, r2
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ab      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x23a>
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
 8003c4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8170 	beq.w	8003f42 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c62:	4bd0      	ldr	r3, [pc, #832]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c6e:	4bcd      	ldr	r3, [pc, #820]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d16d      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3ee>
 8003c7a:	4bca      	ldr	r3, [pc, #808]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	d166      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3ee>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003c9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x350>
 8003cb2:	4bbc      	ldr	r3, [pc, #752]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e013      	b.n	8003ce0 <HAL_RCC_OscConfig+0x378>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003cd0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003cdc:	4bb1      	ldr	r3, [pc, #708]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003ce6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003cea:	fa92 f2a2 	rbit	r2, r2
 8003cee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003cf2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f002 021f 	and.w	r2, r2, #31
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_RCC_OscConfig+0x3ba>
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d002      	beq.n	8003d22 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f000 bd31 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4ba0      	ldr	r3, [pc, #640]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	21f8      	movs	r1, #248	; 0xf8
 8003d32:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003d3a:	fa91 f1a1 	rbit	r1, r1
 8003d3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003d42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d46:	fab1 f181 	clz	r1, r1
 8003d4a:	b2c9      	uxtb	r1, r1
 8003d4c:	408b      	lsls	r3, r1
 8003d4e:	4995      	ldr	r1, [pc, #596]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d54:	e0f5      	b.n	8003f42 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8085 	beq.w	8003e6c <HAL_RCC_OscConfig+0x504>
 8003d62:	2301      	movs	r3, #1
 8003d64:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003d74:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fe77 	bl	8001a80 <HAL_GetTick>
 8003d92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fd fe72 	bl	8001a80 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d902      	bls.n	8003dae <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	f000 bceb 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003dc0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_OscConfig+0x476>
 8003dd8:	4b72      	ldr	r3, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	e013      	b.n	8003e06 <HAL_RCC_OscConfig+0x49e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003df0:	2302      	movs	r3, #2
 8003df2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003df6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e02:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2202      	movs	r2, #2
 8003e08:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e0c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e10:	fa92 f2a2 	rbit	r2, r2
 8003e14:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003e18:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f042 0220 	orr.w	r2, r2, #32
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f002 021f 	and.w	r2, r2, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0af      	beq.n	8003d98 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	4b5a      	ldr	r3, [pc, #360]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	21f8      	movs	r1, #248	; 0xf8
 8003e48:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003e50:	fa91 f1a1 	rbit	r1, r1
 8003e54:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003e58:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e5c:	fab1 f181 	clz	r1, r1
 8003e60:	b2c9      	uxtb	r1, r1
 8003e62:	408b      	lsls	r3, r1
 8003e64:	494f      	ldr	r1, [pc, #316]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
 8003e6a:	e06a      	b.n	8003f42 <HAL_RCC_OscConfig+0x5da>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003e7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd fdf2 	bl	8001a80 <HAL_GetTick>
 8003e9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fded 	bl	8001a80 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d902      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	f000 bc66 	b.w	8004784 <HAL_RCC_OscConfig+0xe1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003eca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x580>
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	e013      	b.n	8003f10 <HAL_RCC_OscConfig+0x5a8>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003efa:	2302      	movs	r3, #2
 8003efc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0x63c>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2202      	movs	r2, #2
 8003f12:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f16:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f1a:	fa92 f2a2 	rbit	r2, r2
 8003f1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003f22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f26:	fab2 f282 	clz	r2, r2
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f002 021f 	and.w	r2, r2, #31
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1af      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80da 	beq.w	8004106 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d069      	beq.n	8004030 <HAL_RCC_OscConfig+0x6c8>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x640>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	2301      	movs	r3, #1
 8003f84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fd fd7b 	bl	8001a80 <HAL_GetTick>
 8003f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	e00d      	b.n	8003fac <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fd fd76 	bl	8001a80 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d905      	bls.n	8003fac <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e3ef      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	10908120 	.word	0x10908120
 8003fac:	2302      	movs	r3, #2
 8003fae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fdc:	2202      	movs	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003fee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff0:	4ba4      	ldr	r3, [pc, #656]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 8003ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	6019      	str	r1, [r3, #0]
 8003ffc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	fa93 f1a3 	rbit	r1, r3
 8004006:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800400a:	6019      	str	r1, [r3, #0]
  return result;
 800400c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0b0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x628>
 800402e:	e06a      	b.n	8004106 <HAL_RCC_OscConfig+0x79e>
 8004030:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004046:	601a      	str	r2, [r3, #0]
  return result;
 8004048:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800404c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	4b8c      	ldr	r3, [pc, #560]	; (8004288 <HAL_RCC_OscConfig+0x920>)
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7fd fd0d 	bl	8001a80 <HAL_GetTick>
 8004066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406a:	e009      	b.n	8004080 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406c:	f7fd fd08 	bl	8001a80 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e381      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 8004080:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004084:	2202      	movs	r2, #2
 8004086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800409c:	2202      	movs	r2, #2
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	fa93 f2a3 	rbit	r2, r3
 80040aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040b4:	2202      	movs	r2, #2
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	fa93 f2a3 	rbit	r2, r3
 80040c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80040ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040d0:	2102      	movs	r1, #2
 80040d2:	6019      	str	r1, [r3, #0]
 80040d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	fa93 f1a3 	rbit	r1, r3
 80040de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040e2:	6019      	str	r1, [r3, #0]
  return result;
 80040e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1b2      	bne.n	800406c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8157 	beq.w	80043c4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d112      	bne.n	800414e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004132:	61d3      	str	r3, [r2, #28]
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <HAL_RCC_OscConfig+0x924>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415a:	4b4c      	ldr	r3, [pc, #304]	; (800428c <HAL_RCC_OscConfig+0x924>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4b      	ldr	r2, [pc, #300]	; (800428c <HAL_RCC_OscConfig+0x924>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd fc8b 	bl	8001a80 <HAL_GetTick>
 800416a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	e009      	b.n	8004184 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fc86 	bl	8001a80 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e2ff      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCC_OscConfig+0x924>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ef      	beq.n	8004170 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x840>
 800419a:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6213      	str	r3, [r2, #32]
 80041a6:	e02f      	b.n	8004208 <HAL_RCC_OscConfig+0x8a0>
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x864>
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6213      	str	r3, [r2, #32]
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4a30      	ldr	r2, [pc, #192]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	6213      	str	r3, [r2, #32]
 80041ca:	e01d      	b.n	8004208 <HAL_RCC_OscConfig+0x8a0>
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x888>
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6213      	str	r3, [r2, #32]
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4a27      	ldr	r2, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6213      	str	r3, [r2, #32]
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0x8a0>
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 8004202:	f023 0304 	bic.w	r3, r3, #4
 8004206:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d06a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fd fc35 	bl	8001a80 <HAL_GetTick>
 8004216:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fd fc30 	bl	8001a80 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e2a7      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 8004234:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004238:	2202      	movs	r2, #2
 800423a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	fa93 f2a3 	rbit	r2, r3
 8004246:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004250:	2202      	movs	r2, #2
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004262:	601a      	str	r2, [r3, #0]
  return result;
 8004264:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d108      	bne.n	8004290 <HAL_RCC_OscConfig+0x928>
 800427e:	4b01      	ldr	r3, [pc, #4]	; (8004284 <HAL_RCC_OscConfig+0x91c>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x944>
 8004284:	40021000 	.word	0x40021000
 8004288:	10908120 	.word	0x10908120
 800428c:	40007000 	.word	0x40007000
 8004290:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	4bc0      	ldr	r3, [pc, #768]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80042b0:	2102      	movs	r1, #2
 80042b2:	6011      	str	r1, [r2, #0]
 80042b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	fa92 f1a2 	rbit	r1, r2
 80042be:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042c2:	6011      	str	r1, [r2, #0]
  return result;
 80042c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	fab2 f282 	clz	r2, r2
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	f002 021f 	and.w	r2, r2, #31
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f202 	lsl.w	r2, r1, r2
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d09a      	beq.n	800421c <HAL_RCC_OscConfig+0x8b4>
 80042e6:	e063      	b.n	80043b0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e8:	f7fd fbca 	bl	8001a80 <HAL_GetTick>
 80042ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	e00b      	b.n	800430a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fbc5 	bl	8001a80 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e23c      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 800430a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800430e:	2202      	movs	r2, #2
 8004310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	fa93 f2a3 	rbit	r2, r3
 800431c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004326:	2202      	movs	r2, #2
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f2a3 	rbit	r2, r3
 8004334:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004338:	601a      	str	r2, [r3, #0]
  return result;
 800433a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800433e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d102      	bne.n	800435a <HAL_RCC_OscConfig+0x9f2>
 8004354:	4b95      	ldr	r3, [pc, #596]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	e00d      	b.n	8004376 <HAL_RCC_OscConfig+0xa0e>
 800435a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800435e:	2202      	movs	r2, #2
 8004360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	fa93 f2a3 	rbit	r2, r3
 800436c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800437a:	2102      	movs	r1, #2
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	fa92 f1a2 	rbit	r1, r2
 8004388:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800438c:	6011      	str	r1, [r2, #0]
  return result;
 800438e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	fab2 f282 	clz	r2, r2
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f002 021f 	and.w	r2, r2, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1a0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043b0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b7c      	ldr	r3, [pc, #496]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a7b      	ldr	r2, [pc, #492]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 81d9 	beq.w	8004782 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d0:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	f000 81a6 	beq.w	800472a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f040 811e 	bne.w	8004626 <HAL_RCC_OscConfig+0xcbe>
 80043ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80043ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	fa93 f2a3 	rbit	r2, r3
 80043fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004402:	601a      	str	r2, [r3, #0]
  return result;
 8004404:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004408:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fb2e 	bl	8001a80 <HAL_GetTick>
 8004424:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	e009      	b.n	800443e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fb29 	bl	8001a80 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1a2      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 800443e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	fa93 f2a3 	rbit	r2, r3
 8004452:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004456:	601a      	str	r2, [r3, #0]
  return result;
 8004458:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800445c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_RCC_OscConfig+0xb10>
 8004472:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	e01b      	b.n	80044b0 <HAL_RCC_OscConfig+0xb48>
 8004478:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800447c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80044b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	fa92 f1a2 	rbit	r1, r2
 80044c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044c8:	6011      	str	r1, [r2, #0]
  return result;
 80044ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	f002 021f 	and.w	r2, r2, #31
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d19e      	bne.n	800442a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f023 020f 	bic.w	r2, r3, #15
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	492c      	ldr	r1, [pc, #176]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a19      	ldr	r1, [r3, #32]
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	430b      	orrs	r3, r1
 8004516:	4925      	ldr	r1, [pc, #148]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	fa93 f2a3 	rbit	r2, r3
 8004530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004534:	601a      	str	r2, [r3, #0]
  return result;
 8004536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800453a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004546:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	2301      	movs	r3, #1
 8004550:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd fa95 	bl	8001a80 <HAL_GetTick>
 8004556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800455a:	e009      	b.n	8004570 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fa90 	bl	8001a80 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e109      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 8004570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	fa93 f2a3 	rbit	r2, r3
 8004584:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004588:	601a      	str	r2, [r3, #0]
  return result;
 800458a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800458e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0xc48>
 80045a4:	4b01      	ldr	r3, [pc, #4]	; (80045ac <HAL_RCC_OscConfig+0xc44>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	e01e      	b.n	80045e8 <HAL_RCC_OscConfig+0xc80>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <HAL_RCC_OscConfig+0xe28>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045f0:	6011      	str	r1, [r2, #0]
 80045f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	fa92 f1a2 	rbit	r1, r2
 80045fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004600:	6011      	str	r1, [r2, #0]
  return result;
 8004602:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f042 0220 	orr.w	r2, r2, #32
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f002 021f 	and.w	r2, r2, #31
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d09b      	beq.n	800455c <HAL_RCC_OscConfig+0xbf4>
 8004624:	e0ad      	b.n	8004782 <HAL_RCC_OscConfig+0xe1a>
 8004626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800462a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800463e:	601a      	str	r2, [r3, #0]
  return result;
 8004640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004644:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004650:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	461a      	mov	r2, r3
 8004658:	2300      	movs	r3, #0
 800465a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fd fa10 	bl	8001a80 <HAL_GetTick>
 8004660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004664:	e009      	b.n	800467a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fd fa0b 	bl	8001a80 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e084      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
 800467a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800467e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	fa93 f2a3 	rbit	r2, r3
 800468e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004692:	601a      	str	r2, [r3, #0]
  return result;
 8004694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004698:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_OscConfig+0xd4c>
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_RCC_OscConfig+0xe28>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	e01b      	b.n	80046ec <HAL_RCC_OscConfig+0xd84>
 80046b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	fa93 f2a3 	rbit	r2, r3
 80046c8:	f107 0320 	add.w	r3, r7, #32
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f107 031c 	add.w	r3, r7, #28
 80046d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f107 031c 	add.w	r3, r7, #28
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f107 0318 	add.w	r3, r7, #24
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	4b29      	ldr	r3, [pc, #164]	; (8004790 <HAL_RCC_OscConfig+0xe28>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f107 0214 	add.w	r2, r7, #20
 80046f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	f107 0214 	add.w	r2, r7, #20
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	fa92 f1a2 	rbit	r1, r2
 8004700:	f107 0210 	add.w	r2, r7, #16
 8004704:	6011      	str	r1, [r2, #0]
  return result;
 8004706:	f107 0210 	add.w	r2, r7, #16
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f042 0220 	orr.w	r2, r2, #32
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f002 021f 	and.w	r2, r2, #31
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d19e      	bne.n	8004666 <HAL_RCC_OscConfig+0xcfe>
 8004728:	e02b      	b.n	8004782 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e025      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_RCC_OscConfig+0xe28>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004740:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_RCC_OscConfig+0xe28>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004748:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800474c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	429a      	cmp	r2, r3
 8004758:	d111      	bne.n	800477e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800475a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800475e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004768:	429a      	cmp	r2, r3
 800476a:	d108      	bne.n	800477e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800476c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b09e      	sub	sp, #120	; 0x78
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e162      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b90      	ldr	r3, [pc, #576]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d910      	bls.n	80047dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b8d      	ldr	r3, [pc, #564]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	498b      	ldr	r1, [pc, #556]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b89      	ldr	r3, [pc, #548]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e14a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	497f      	ldr	r1, [pc, #508]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80dc 	beq.w	80049c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d13c      	bne.n	800488a <HAL_RCC_ClockConfig+0xf6>
 8004810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004814:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d102      	bne.n	800483a <HAL_RCC_ClockConfig+0xa6>
 8004834:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	e00f      	b.n	800485a <HAL_RCC_ClockConfig+0xc6>
 800483a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	667b      	str	r3, [r7, #100]	; 0x64
 8004848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484c:	663b      	str	r3, [r7, #96]	; 0x60
 800484e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004856:	4b67      	ldr	r3, [pc, #412]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800485e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004862:	fa92 f2a2 	rbit	r2, r2
 8004866:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800486a:	fab2 f282 	clz	r2, r2
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	f002 021f 	and.w	r2, r2, #31
 800487a:	2101      	movs	r1, #1
 800487c:	fa01 f202 	lsl.w	r2, r1, r2
 8004880:	4013      	ands	r3, r2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d17b      	bne.n	800497e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0f3      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d13c      	bne.n	800490c <HAL_RCC_ClockConfig+0x178>
 8004892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004896:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d102      	bne.n	80048bc <HAL_RCC_ClockConfig+0x128>
 80048b6:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_ClockConfig+0x148>
 80048bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40
 80048d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	4b46      	ldr	r3, [pc, #280]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80048e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e4:	fa92 f2a2 	rbit	r2, r2
 80048e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ec:	fab2 f282 	clz	r2, r2
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	f042 0220 	orr.w	r2, r2, #32
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	f002 021f 	and.w	r2, r2, #31
 80048fc:	2101      	movs	r1, #1
 80048fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d13a      	bne.n	800497e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0b2      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
 800490c:	2302      	movs	r3, #2
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d102      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1a0>
 800492e:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	e00d      	b.n	8004950 <HAL_RCC_ClockConfig+0x1bc>
 8004934:	2302      	movs	r3, #2
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	2302      	movs	r3, #2
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2202      	movs	r2, #2
 8004952:	61ba      	str	r2, [r7, #24]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	fa92 f2a2 	rbit	r2, r2
 800495a:	617a      	str	r2, [r7, #20]
  return result;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	fab2 f282 	clz	r2, r2
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	f042 0220 	orr.w	r2, r2, #32
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f002 021f 	and.w	r2, r2, #31
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e079      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	491a      	ldr	r1, [pc, #104]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd f876 	bl	8001a80 <HAL_GetTick>
 8004994:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd f872 	bl	8001a80 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e061      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d214      	bcs.n	80049f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 0207 	bic.w	r2, r3, #7
 80049d6:	4906      	ldr	r1, [pc, #24]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <HAL_RCC_ClockConfig+0x25c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e040      	b.n	8004a72 <HAL_RCC_ClockConfig+0x2de>
 80049f0:	40022000 	.word	0x40022000
 80049f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_ClockConfig+0x2e8>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	491a      	ldr	r1, [pc, #104]	; (8004a7c <HAL_RCC_ClockConfig+0x2e8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <HAL_RCC_ClockConfig+0x2e8>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4912      	ldr	r1, [pc, #72]	; (8004a7c <HAL_RCC_ClockConfig+0x2e8>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a36:	f000 f829 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_RCC_ClockConfig+0x2e8>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	22f0      	movs	r2, #240	; 0xf0
 8004a46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fa92 f2a2 	rbit	r2, r2
 8004a4e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	fab2 f282 	clz	r2, r2
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	40d3      	lsrs	r3, r2
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x2ec>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_RCC_ClockConfig+0x2f0>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCC_ClockConfig+0x2f4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc ffc4 	bl	80019f8 <HAL_InitTick>
  
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3778      	adds	r7, #120	; 0x78
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800efd4 	.word	0x0800efd4
 8004a84:	20000000 	.word	0x20000000
 8004a88:	20000008 	.word	0x20000008

08004a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b08b      	sub	sp, #44	; 0x2c
 8004a90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x30>
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8004aba:	e03f      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004abe:	623b      	str	r3, [r7, #32]
      break;
 8004ac0:	e03f      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ac8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004acc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	fa92 f2a2 	rbit	r2, r2
 8004ad4:	607a      	str	r2, [r7, #4]
  return result;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	fab2 f282 	clz	r2, r2
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	40d3      	lsrs	r3, r2
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae2:	5cd3      	ldrb	r3, [r2, r3]
 8004ae4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	220f      	movs	r2, #15
 8004af0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	fa92 f2a2 	rbit	r2, r2
 8004af8:	60fa      	str	r2, [r7, #12]
  return result;
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	fab2 f282 	clz	r2, r2
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	40d3      	lsrs	r3, r2
 8004b04:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	e007      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b26:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	623b      	str	r3, [r7, #32]
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b3e:	623b      	str	r3, [r7, #32]
      break;
 8004b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b42:	6a3b      	ldr	r3, [r7, #32]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	372c      	adds	r7, #44	; 0x2c
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40021000 	.word	0x40021000
 8004b54:	007a1200 	.word	0x007a1200
 8004b58:	0800efec 	.word	0x0800efec
 8004b5c:	0800effc 	.word	0x0800effc

08004b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000000 	.word	0x20000000

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b7e:	f7ff ffef 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004b82:	4601      	mov	r1, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	fa92 f2a2 	rbit	r2, r2
 8004b98:	603a      	str	r2, [r7, #0]
  return result;
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	40d3      	lsrs	r3, r2
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	0800efe4 	.word	0x0800efe4

08004bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bc2:	f7ff ffcd 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004bd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	fa92 f2a2 	rbit	r2, r2
 8004bdc:	603a      	str	r2, [r7, #0]
  return result;
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	fab2 f282 	clz	r2, r2
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	40d3      	lsrs	r3, r2
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800efe4 	.word	0x0800efe4

08004c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b092      	sub	sp, #72	; 0x48
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80d4 	beq.w	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c24:	4b4e      	ldr	r3, [pc, #312]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10e      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	61d3      	str	r3, [r2, #28]
 8004c3c:	4b48      	ldr	r3, [pc, #288]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d118      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f7fc ff0b 	bl	8001a80 <HAL_GetTick>
 8004c6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6e:	f7fc ff07 	bl	8001a80 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b64      	cmp	r3, #100	; 0x64
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1d6      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c8c:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8084 	beq.w	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d07c      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fc feb7 	bl	8001a80 <HAL_GetTick>
 8004d12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fc feb3 	bl	8001a80 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e180      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	2302      	movs	r3, #2
 8004d3a:	623b      	str	r3, [r7, #32]
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	61fb      	str	r3, [r7, #28]
  return result;
 8004d44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d108      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d5a:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	e00d      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40007000 	.word	0x40007000
 8004d68:	10908100 	.word	0x10908100
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	4ba0      	ldr	r3, [pc, #640]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	613a      	str	r2, [r7, #16]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	fa92 f2a2 	rbit	r2, r2
 8004d86:	60fa      	str	r2, [r7, #12]
  return result;
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	fab2 f282 	clz	r2, r2
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f002 021f 	and.w	r2, r2, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0b7      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004da6:	4b95      	ldr	r3, [pc, #596]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4992      	ldr	r1, [pc, #584]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b8e      	ldr	r3, [pc, #568]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4a8d      	ldr	r2, [pc, #564]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd8:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	f023 0203 	bic.w	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4985      	ldr	r1, [pc, #532]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df6:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	497e      	ldr	r1, [pc, #504]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e14:	4b79      	ldr	r3, [pc, #484]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4976      	ldr	r1, [pc, #472]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e32:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f023 0210 	bic.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	496f      	ldr	r1, [pc, #444]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	4967      	ldr	r1, [pc, #412]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e6e:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f023 0220 	bic.w	r2, r3, #32
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	4960      	ldr	r1, [pc, #384]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8c:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	4958      	ldr	r1, [pc, #352]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eaa:	4b54      	ldr	r3, [pc, #336]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4951      	ldr	r1, [pc, #324]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	4949      	ldr	r1, [pc, #292]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee6:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	4942      	ldr	r1, [pc, #264]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f04:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	493a      	ldr	r1, [pc, #232]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f22:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	4933      	ldr	r1, [pc, #204]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f40:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	492b      	ldr	r1, [pc, #172]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4924      	ldr	r1, [pc, #144]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	491c      	ldr	r1, [pc, #112]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	4915      	ldr	r1, [pc, #84]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004fb8:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	490d      	ldr	r1, [pc, #52]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	4906      	ldr	r1, [pc, #24]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ff4:	4b01      	ldr	r3, [pc, #4]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	e002      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	.word	0x40021000
 8005000:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	490b      	ldr	r1, [pc, #44]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800500a:	4313      	orrs	r3, r2
 800500c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	4904      	ldr	r1, [pc, #16]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005028:	4313      	orrs	r3, r2
 800502a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3748      	adds	r7, #72	; 0x48
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e049      	b.n	80050e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc faa0 	bl	80015a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 f94a 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005106:	2302      	movs	r3, #2
 8005108:	e0ff      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b14      	cmp	r3, #20
 8005116:	f200 80f0 	bhi.w	80052fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005175 	.word	0x08005175
 8005124:	080052fb 	.word	0x080052fb
 8005128:	080052fb 	.word	0x080052fb
 800512c:	080052fb 	.word	0x080052fb
 8005130:	080051b5 	.word	0x080051b5
 8005134:	080052fb 	.word	0x080052fb
 8005138:	080052fb 	.word	0x080052fb
 800513c:	080052fb 	.word	0x080052fb
 8005140:	080051f7 	.word	0x080051f7
 8005144:	080052fb 	.word	0x080052fb
 8005148:	080052fb 	.word	0x080052fb
 800514c:	080052fb 	.word	0x080052fb
 8005150:	08005237 	.word	0x08005237
 8005154:	080052fb 	.word	0x080052fb
 8005158:	080052fb 	.word	0x080052fb
 800515c:	080052fb 	.word	0x080052fb
 8005160:	08005279 	.word	0x08005279
 8005164:	080052fb 	.word	0x080052fb
 8005168:	080052fb 	.word	0x080052fb
 800516c:	080052fb 	.word	0x080052fb
 8005170:	080052b9 	.word	0x080052b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f968 	bl	8005450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
      break;
 80051b2:	e0a5      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f9e2 	bl	8005584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	619a      	str	r2, [r3, #24]
      break;
 80051f4:	e084      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fa55 	bl	80056ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0208 	orr.w	r2, r2, #8
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	61da      	str	r2, [r3, #28]
      break;
 8005234:	e064      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fac7 	bl	80057d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	61da      	str	r2, [r3, #28]
      break;
 8005276:	e043      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb16 	bl	80058b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b6:	e023      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb60 	bl	8005984 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052f8:	e002      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a42      	ldr	r2, [pc, #264]	; (8005430 <TIM_Base_SetConfig+0x11c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3f      	ldr	r2, [pc, #252]	; (8005434 <TIM_Base_SetConfig+0x120>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3e      	ldr	r2, [pc, #248]	; (8005438 <TIM_Base_SetConfig+0x124>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a3d      	ldr	r2, [pc, #244]	; (800543c <TIM_Base_SetConfig+0x128>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3c      	ldr	r2, [pc, #240]	; (8005440 <TIM_Base_SetConfig+0x12c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a31      	ldr	r2, [pc, #196]	; (8005430 <TIM_Base_SetConfig+0x11c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01f      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d01b      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <TIM_Base_SetConfig+0x120>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d017      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <TIM_Base_SetConfig+0x124>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <TIM_Base_SetConfig+0x128>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00f      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00b      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <TIM_Base_SetConfig+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_Base_SetConfig+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <TIM_Base_SetConfig+0x12c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a13      	ldr	r2, [pc, #76]	; (800543c <TIM_Base_SetConfig+0x128>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00f      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <TIM_Base_SetConfig+0x130>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <TIM_Base_SetConfig+0x134>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a11      	ldr	r2, [pc, #68]	; (800544c <TIM_Base_SetConfig+0x138>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <TIM_Base_SetConfig+0x12c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d103      	bne.n	800541c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	615a      	str	r2, [r3, #20]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40013400 	.word	0x40013400
 8005440:	40015000 	.word	0x40015000
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 0302 	bic.w	r3, r3, #2
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a30      	ldr	r2, [pc, #192]	; (800556c <TIM_OC1_SetConfig+0x11c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <TIM_OC1_SetConfig+0x120>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a2e      	ldr	r2, [pc, #184]	; (8005574 <TIM_OC1_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2d      	ldr	r2, [pc, #180]	; (8005578 <TIM_OC1_SetConfig+0x128>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2c      	ldr	r2, [pc, #176]	; (800557c <TIM_OC1_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2b      	ldr	r2, [pc, #172]	; (8005580 <TIM_OC1_SetConfig+0x130>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10c      	bne.n	80054f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0308 	bic.w	r3, r3, #8
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <TIM_OC1_SetConfig+0x11c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <TIM_OC1_SetConfig+0x120>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <TIM_OC1_SetConfig+0x124>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <TIM_OC1_SetConfig+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <TIM_OC1_SetConfig+0x12c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <TIM_OC1_SetConfig+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d111      	bne.n	8005546 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40015000 	.word	0x40015000

08005584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0210 	bic.w	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0320 	bic.w	r3, r3, #32
 80055d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_OC2_SetConfig+0x110>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_OC2_SetConfig+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_OC2_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC2_SetConfig+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_OC2_SetConfig+0x118>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d10d      	bne.n	8005614 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <TIM_OC2_SetConfig+0x110>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <TIM_OC2_SetConfig+0x114>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <TIM_OC2_SetConfig+0x11c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <TIM_OC2_SetConfig+0x120>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <TIM_OC2_SetConfig+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <TIM_OC2_SetConfig+0x118>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d113      	bne.n	800566c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800564a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005652:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40015000 	.word	0x40015000
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2b      	ldr	r2, [pc, #172]	; (80057b8 <TIM_OC3_SetConfig+0x10c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_OC3_SetConfig+0x72>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <TIM_OC3_SetConfig+0x110>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0x72>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_OC3_SetConfig+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10d      	bne.n	800573a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005738:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <TIM_OC3_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <TIM_OC3_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <TIM_OC3_SetConfig+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <TIM_OC3_SetConfig+0x11c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <TIM_OC3_SetConfig+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <TIM_OC3_SetConfig+0x114>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d113      	bne.n	8005792 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40015000 	.word	0x40015000
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800581e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <TIM_OC4_SetConfig+0xc8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <TIM_OC4_SetConfig+0x8c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a19      	ldr	r2, [pc, #100]	; (800589c <TIM_OC4_SetConfig+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_OC4_SetConfig+0x8c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <TIM_OC4_SetConfig+0xd0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_OC4_SetConfig+0x8c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <TIM_OC4_SetConfig+0xd4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_OC4_SetConfig+0x8c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <TIM_OC4_SetConfig+0xd8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC4_SetConfig+0x8c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <TIM_OC4_SetConfig+0xdc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d109      	bne.n	8005870 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800
 80058ac:	40015000 	.word	0x40015000

080058b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <TIM_OC5_SetConfig+0xbc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <TIM_OC5_SetConfig+0x82>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <TIM_OC5_SetConfig+0xc0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00f      	beq.n	8005932 <TIM_OC5_SetConfig+0x82>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a17      	ldr	r2, [pc, #92]	; (8005974 <TIM_OC5_SetConfig+0xc4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00b      	beq.n	8005932 <TIM_OC5_SetConfig+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <TIM_OC5_SetConfig+0xc8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d007      	beq.n	8005932 <TIM_OC5_SetConfig+0x82>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <TIM_OC5_SetConfig+0xcc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_OC5_SetConfig+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a14      	ldr	r2, [pc, #80]	; (8005980 <TIM_OC5_SetConfig+0xd0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d109      	bne.n	8005946 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800
 8005980:	40015000 	.word	0x40015000

08005984 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	051b      	lsls	r3, r3, #20
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <TIM_OC6_SetConfig+0xc0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <TIM_OC6_SetConfig+0x84>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <TIM_OC6_SetConfig+0xc4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00f      	beq.n	8005a08 <TIM_OC6_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <TIM_OC6_SetConfig+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_OC6_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <TIM_OC6_SetConfig+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC6_SetConfig+0x84>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <TIM_OC6_SetConfig+0xd0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC6_SetConfig+0x84>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <TIM_OC6_SetConfig+0xd4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	029b      	lsls	r3, r3, #10
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	40015000 	.word	0x40015000

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e06d      	b.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a30      	ldr	r2, [pc, #192]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d01d      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d018      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d013      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10c      	bne.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40015000 	.word	0x40015000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40014000 	.word	0x40014000

08005b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e040      	b.n	8005c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fb fdbe 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2224      	movs	r2, #36	; 0x24
 8005ba0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8c0 	bl	8005d38 <UART_SetConfig>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e022      	b.n	8005c08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa88 	bl	80060e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb0f 	bl	8006224 <UART_CheckIdleState>
 8005c06:	4603      	mov	r3, r0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	f040 8082 	bne.w	8005d2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_UART_Transmit+0x26>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07a      	b.n	8005d30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Transmit+0x38>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e073      	b.n	8005d30 <HAL_UART_Transmit+0x120>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2221      	movs	r2, #33	; 0x21
 8005c5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5e:	f7fb ff0f 	bl	8001a80 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d108      	bne.n	8005c90 <HAL_UART_Transmit+0x80>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e003      	b.n	8005c98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ca0:	e02d      	b.n	8005cfe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fb02 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e039      	b.n	8005d30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	881a      	ldrh	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cce:	b292      	uxth	r2, r2
 8005cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e008      	b.n	8005cec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1cb      	bne.n	8005ca2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2140      	movs	r1, #64	; 0x40
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 face 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e005      	b.n	8005d30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4baa      	ldr	r3, [pc, #680]	; (800600c <UART_SetConfig+0x2d4>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6979      	ldr	r1, [r7, #20]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a98      	ldr	r2, [pc, #608]	; (8006010 <UART_SetConfig+0x2d8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d121      	bne.n	8005df8 <UART_SetConfig+0xc0>
 8005db4:	4b97      	ldr	r3, [pc, #604]	; (8006014 <UART_SetConfig+0x2dc>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d817      	bhi.n	8005df0 <UART_SetConfig+0xb8>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x90>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005deb 	.word	0x08005deb
 8005dd4:	08005ddf 	.word	0x08005ddf
 8005dd8:	2301      	movs	r3, #1
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e0b2      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005dde:	2302      	movs	r3, #2
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e0af      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005de4:	2304      	movs	r3, #4
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e0ac      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005dea:	2308      	movs	r3, #8
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e0a9      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005df0:	2310      	movs	r3, #16
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	bf00      	nop
 8005df6:	e0a5      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a86      	ldr	r2, [pc, #536]	; (8006018 <UART_SetConfig+0x2e0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d123      	bne.n	8005e4a <UART_SetConfig+0x112>
 8005e02:	4b84      	ldr	r3, [pc, #528]	; (8006014 <UART_SetConfig+0x2dc>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0e:	d012      	beq.n	8005e36 <UART_SetConfig+0xfe>
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d802      	bhi.n	8005e1c <UART_SetConfig+0xe4>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <UART_SetConfig+0xf2>
 8005e1a:	e012      	b.n	8005e42 <UART_SetConfig+0x10a>
 8005e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e20:	d00c      	beq.n	8005e3c <UART_SetConfig+0x104>
 8005e22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e26:	d003      	beq.n	8005e30 <UART_SetConfig+0xf8>
 8005e28:	e00b      	b.n	8005e42 <UART_SetConfig+0x10a>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e089      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e086      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e36:	2304      	movs	r3, #4
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e083      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e080      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e42:	2310      	movs	r3, #16
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	bf00      	nop
 8005e48:	e07c      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a73      	ldr	r2, [pc, #460]	; (800601c <UART_SetConfig+0x2e4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d123      	bne.n	8005e9c <UART_SetConfig+0x164>
 8005e54:	4b6f      	ldr	r3, [pc, #444]	; (8006014 <UART_SetConfig+0x2dc>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e60:	d012      	beq.n	8005e88 <UART_SetConfig+0x150>
 8005e62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e66:	d802      	bhi.n	8005e6e <UART_SetConfig+0x136>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <UART_SetConfig+0x144>
 8005e6c:	e012      	b.n	8005e94 <UART_SetConfig+0x15c>
 8005e6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e72:	d00c      	beq.n	8005e8e <UART_SetConfig+0x156>
 8005e74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e78:	d003      	beq.n	8005e82 <UART_SetConfig+0x14a>
 8005e7a:	e00b      	b.n	8005e94 <UART_SetConfig+0x15c>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e060      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e82:	2302      	movs	r3, #2
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e05d      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e05a      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e8e:	2308      	movs	r3, #8
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e057      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e94:	2310      	movs	r3, #16
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	bf00      	nop
 8005e9a:	e053      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5f      	ldr	r2, [pc, #380]	; (8006020 <UART_SetConfig+0x2e8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d123      	bne.n	8005eee <UART_SetConfig+0x1b6>
 8005ea6:	4b5b      	ldr	r3, [pc, #364]	; (8006014 <UART_SetConfig+0x2dc>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb2:	d012      	beq.n	8005eda <UART_SetConfig+0x1a2>
 8005eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb8:	d802      	bhi.n	8005ec0 <UART_SetConfig+0x188>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <UART_SetConfig+0x196>
 8005ebe:	e012      	b.n	8005ee6 <UART_SetConfig+0x1ae>
 8005ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec4:	d00c      	beq.n	8005ee0 <UART_SetConfig+0x1a8>
 8005ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eca:	d003      	beq.n	8005ed4 <UART_SetConfig+0x19c>
 8005ecc:	e00b      	b.n	8005ee6 <UART_SetConfig+0x1ae>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e037      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e034      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005eda:	2304      	movs	r3, #4
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e031      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e02e      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	bf00      	nop
 8005eec:	e02a      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4c      	ldr	r2, [pc, #304]	; (8006024 <UART_SetConfig+0x2ec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d123      	bne.n	8005f40 <UART_SetConfig+0x208>
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <UART_SetConfig+0x2dc>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f04:	d012      	beq.n	8005f2c <UART_SetConfig+0x1f4>
 8005f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0a:	d802      	bhi.n	8005f12 <UART_SetConfig+0x1da>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <UART_SetConfig+0x1e8>
 8005f10:	e012      	b.n	8005f38 <UART_SetConfig+0x200>
 8005f12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f16:	d00c      	beq.n	8005f32 <UART_SetConfig+0x1fa>
 8005f18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f1c:	d003      	beq.n	8005f26 <UART_SetConfig+0x1ee>
 8005f1e:	e00b      	b.n	8005f38 <UART_SetConfig+0x200>
 8005f20:	2300      	movs	r3, #0
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e00e      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005f26:	2302      	movs	r3, #2
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e00b      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e008      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005f32:	2308      	movs	r3, #8
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e005      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	bf00      	nop
 8005f3e:	e001      	b.n	8005f44 <UART_SetConfig+0x20c>
 8005f40:	2310      	movs	r3, #16
 8005f42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4c:	d16e      	bne.n	800602c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005f4e:	7ffb      	ldrb	r3, [r7, #31]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d828      	bhi.n	8005fa6 <UART_SetConfig+0x26e>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x224>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	08005fa7 	.word	0x08005fa7
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	08005fa7 	.word	0x08005fa7
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005fa7 	.word	0x08005fa7
 8005f7c:	08005f9f 	.word	0x08005f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe fdfa 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8005f84:	61b8      	str	r0, [r7, #24]
        break;
 8005f86:	e013      	b.n	8005fb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f88:	f7fe fe18 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8005f8c:	61b8      	str	r0, [r7, #24]
        break;
 8005f8e:	e00f      	b.n	8005fb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <UART_SetConfig+0x2f0>)
 8005f92:	61bb      	str	r3, [r7, #24]
        break;
 8005f94:	e00c      	b.n	8005fb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe fd79 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8005f9a:	61b8      	str	r0, [r7, #24]
        break;
 8005f9c:	e008      	b.n	8005fb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa2:	61bb      	str	r3, [r7, #24]
        break;
 8005fa4:	e004      	b.n	8005fb0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	77bb      	strb	r3, [r7, #30]
        break;
 8005fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8086 	beq.w	80060c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	005a      	lsls	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b0f      	cmp	r3, #15
 8005fd4:	d916      	bls.n	8006004 <UART_SetConfig+0x2cc>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d212      	bcs.n	8006004 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f023 030f 	bic.w	r3, r3, #15
 8005fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	89fa      	ldrh	r2, [r7, #14]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e05f      	b.n	80060c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77bb      	strb	r3, [r7, #30]
 8006008:	e05c      	b.n	80060c4 <UART_SetConfig+0x38c>
 800600a:	bf00      	nop
 800600c:	efff69f3 	.word	0xefff69f3
 8006010:	40013800 	.word	0x40013800
 8006014:	40021000 	.word	0x40021000
 8006018:	40004400 	.word	0x40004400
 800601c:	40004800 	.word	0x40004800
 8006020:	40004c00 	.word	0x40004c00
 8006024:	40005000 	.word	0x40005000
 8006028:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800602c:	7ffb      	ldrb	r3, [r7, #31]
 800602e:	2b08      	cmp	r3, #8
 8006030:	d827      	bhi.n	8006082 <UART_SetConfig+0x34a>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x300>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800605d 	.word	0x0800605d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006083 	.word	0x08006083
 8006048:	08006073 	.word	0x08006073
 800604c:	08006083 	.word	0x08006083
 8006050:	08006083 	.word	0x08006083
 8006054:	08006083 	.word	0x08006083
 8006058:	0800607b 	.word	0x0800607b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe fd8c 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8006060:	61b8      	str	r0, [r7, #24]
        break;
 8006062:	e013      	b.n	800608c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fe fdaa 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8006068:	61b8      	str	r0, [r7, #24]
        break;
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <UART_SetConfig+0x3a4>)
 800606e:	61bb      	str	r3, [r7, #24]
        break;
 8006070:	e00c      	b.n	800608c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006072:	f7fe fd0b 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006076:	61b8      	str	r0, [r7, #24]
        break;
 8006078:	e008      	b.n	800608c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607e:	61bb      	str	r3, [r7, #24]
        break;
 8006080:	e004      	b.n	800608c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	77bb      	strb	r3, [r7, #30]
        break;
 800608a:	bf00      	nop
    }

    if (pclk != 0U)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d018      	beq.n	80060c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	085a      	lsrs	r2, r3, #1
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	441a      	add	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d908      	bls.n	80060c0 <UART_SetConfig+0x388>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b4:	d204      	bcs.n	80060c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e001      	b.n	80060c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	007a1200 	.word	0x007a1200

080060e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01a      	beq.n	80061f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061de:	d10a      	bne.n	80061f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af02      	add	r7, sp, #8
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006234:	f7fb fc24 	bl	8001a80 <HAL_GetTick>
 8006238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d10e      	bne.n	8006266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f82d 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e023      	b.n	80062ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b04      	cmp	r3, #4
 8006272:	d10e      	bne.n	8006292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f817 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e00d      	b.n	80062ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b09c      	sub	sp, #112	; 0x70
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c6:	e0a5      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	f000 80a1 	beq.w	8006414 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fb fbd5 	bl	8001a80 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d13e      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062fc:	667b      	str	r3, [r7, #100]	; 0x64
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006308:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800630c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	663b      	str	r3, [r7, #96]	; 0x60
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800633a:	64ba      	str	r2, [r7, #72]	; 0x48
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e067      	b.n	8006436 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d04f      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006382:	d147      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800638c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
 80063ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	613b      	str	r3, [r7, #16]
   return(result);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063e0:	623a      	str	r2, [r7, #32]
 80063e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e010      	b.n	8006436 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	f43f af4a 	beq.w	80062c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3770      	adds	r7, #112	; 0x70
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fccd 	bl	8007dee <VL53L0X_get_offset_calibration_data_micro_meter>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006464:	b5b0      	push	{r4, r5, r7, lr}
 8006466:	b096      	sub	sp, #88	; 0x58
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006472:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006476:	2b00      	cmp	r3, #0
 8006478:	d107      	bne.n	800648a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800647a:	2200      	movs	r2, #0
 800647c:	2188      	movs	r1, #136	; 0x88
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f004 fed0 	bl	800b224 <VL53L0X_WrByte>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006498:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80064a2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a9e      	ldr	r2, [pc, #632]	; (8006724 <VL53L0X_DataInit+0x2c0>)
 80064aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a9d      	ldr	r2, [pc, #628]	; (8006728 <VL53L0X_DataInit+0x2c4>)
 80064b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fac2 	bl	8006a4c <VL53L0X_GetDeviceParameters>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80064ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d112      	bne.n	80064fc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80064d6:	2300      	movs	r3, #0
 80064d8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80064da:	2300      	movs	r3, #0
 80064dc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f103 0410 	add.w	r4, r3, #16
 80064e4:	f107 0510 	add.w	r5, r7, #16
 80064e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2264      	movs	r2, #100	; 0x64
 8006500:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f44f 7261 	mov.w	r2, #900	; 0x384
 800650a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006514:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800651e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800652a:	2201      	movs	r2, #1
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f004 fe78 	bl	800b224 <VL53L0X_WrByte>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800653c:	4313      	orrs	r3, r2
 800653e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006542:	2201      	movs	r2, #1
 8006544:	21ff      	movs	r1, #255	; 0xff
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f004 fe6c 	bl	800b224 <VL53L0X_WrByte>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006554:	4313      	orrs	r3, r2
 8006556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f004 fe60 	bl	800b224 <VL53L0X_WrByte>
 8006564:	4603      	mov	r3, r0
 8006566:	461a      	mov	r2, r3
 8006568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800656c:	4313      	orrs	r3, r2
 800656e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006572:	f107 030f 	add.w	r3, r7, #15
 8006576:	461a      	mov	r2, r3
 8006578:	2191      	movs	r1, #145	; 0x91
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f004 fed4 	bl	800b328 <VL53L0X_RdByte>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006588:	4313      	orrs	r3, r2
 800658a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006596:	2201      	movs	r2, #1
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f004 fe42 	bl	800b224 <VL53L0X_WrByte>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065ae:	2200      	movs	r2, #0
 80065b0:	21ff      	movs	r1, #255	; 0xff
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f004 fe36 	bl	800b224 <VL53L0X_WrByte>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f004 fe2a 	bl	800b224 <VL53L0X_WrByte>
 80065d0:	4603      	mov	r3, r0
 80065d2:	461a      	mov	r2, r3
 80065d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065d8:	4313      	orrs	r3, r2
 80065da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80065de:	2300      	movs	r3, #0
 80065e0:	653b      	str	r3, [r7, #80]	; 0x50
 80065e2:	e014      	b.n	800660e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80065e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d114      	bne.n	8006616 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80065ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2201      	movs	r2, #1
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fd51 	bl	800709c <VL53L0X_SetLimitCheckEnable>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006602:	4313      	orrs	r3, r2
 8006604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660a:	3301      	adds	r3, #1
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
 800660e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006610:	2b05      	cmp	r3, #5
 8006612:	dde7      	ble.n	80065e4 <VL53L0X_DataInit+0x180>
 8006614:	e000      	b.n	8006618 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006616:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006618:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006620:	2200      	movs	r2, #0
 8006622:	2102      	movs	r1, #2
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd39 	bl	800709c <VL53L0X_SetLimitCheckEnable>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006630:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006638:	2200      	movs	r2, #0
 800663a:	2103      	movs	r1, #3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fd2d 	bl	800709c <VL53L0X_SetLimitCheckEnable>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006648:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006650:	2200      	movs	r2, #0
 8006652:	2104      	movs	r1, #4
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fd21 	bl	800709c <VL53L0X_SetLimitCheckEnable>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006660:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006668:	2200      	movs	r2, #0
 800666a:	2105      	movs	r1, #5
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd15 	bl	800709c <VL53L0X_SetLimitCheckEnable>
 8006672:	4603      	mov	r3, r0
 8006674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006678:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006680:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fdb8 	bl	80071fc <VL53L0X_SetLimitCheckValue>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006692:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006696:	2b00      	cmp	r3, #0
 8006698:	d108      	bne.n	80066ac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800669a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800669e:	2101      	movs	r1, #1
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fdab 	bl	80071fc <VL53L0X_SetLimitCheckValue>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d108      	bne.n	80066c6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80066b4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80066b8:	2102      	movs	r1, #2
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fd9e 	bl	80071fc <VL53L0X_SetLimitCheckValue>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80066ce:	2200      	movs	r2, #0
 80066d0:	2103      	movs	r1, #3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd92 	bl	80071fc <VL53L0X_SetLimitCheckValue>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10f      	bne.n	8006706 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	22ff      	movs	r2, #255	; 0xff
 80066ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	2101      	movs	r1, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f004 fd96 	bl	800b224 <VL53L0X_WrByte>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006706:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006716:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800671a:	4618      	mov	r0, r3
 800671c:	3758      	adds	r7, #88	; 0x58
 800671e:	46bd      	mov	sp, r7
 8006720:	bdb0      	pop	{r4, r5, r7, pc}
 8006722:	bf00      	nop
 8006724:	00016b85 	.word	0x00016b85
 8006728:	000970a4 	.word	0x000970a4

0800672c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800672c:	b5b0      	push	{r4, r5, r7, lr}
 800672e:	b09e      	sub	sp, #120	; 0x78
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800673a:	f107 031c 	add.w	r3, r7, #28
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f004 fed3 	bl	800b4ee <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006768:	2101      	movs	r1, #1
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 fa95 	bl	8008c9a <VL53L0X_get_info_from_device>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800677c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800678c:	2b01      	cmp	r3, #1
 800678e:	d80d      	bhi.n	80067ac <VL53L0X_StaticInit+0x80>
 8006790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800679a:	2b20      	cmp	r3, #32
 800679c:	d806      	bhi.n	80067ac <VL53L0X_StaticInit+0x80>
 800679e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10e      	bne.n	80067c4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a8:	2b0c      	cmp	r3, #12
 80067aa:	d90b      	bls.n	80067c4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80067ac:	f107 0218 	add.w	r2, r7, #24
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fd14 	bl	80081e4 <VL53L0X_perform_ref_spad_management>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80067c2:	e009      	b.n	80067d8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80067c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c8:	461a      	mov	r2, r3
 80067ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 ff15 	bl	80085fc <VL53L0X_set_reference_spads>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80067d8:	4b94      	ldr	r3, [pc, #592]	; (8006a2c <VL53L0X_StaticInit+0x300>)
 80067da:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80067dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80067ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80067ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80067fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80067fe:	e001      	b.n	8006804 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006800:	4b8a      	ldr	r3, [pc, #552]	; (8006a2c <VL53L0X_StaticInit+0x300>)
 8006802:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006804:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800680c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f003 fde8 	bl	800a3e4 <VL53L0X_load_tuning_settings>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800681a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2304      	movs	r3, #4
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f90d 	bl	8007a4c <VL53L0X_SetGpioConfig>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006838:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800683c:	2b00      	cmp	r3, #0
 800683e:	d121      	bne.n	8006884 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006840:	2201      	movs	r2, #1
 8006842:	21ff      	movs	r1, #255	; 0xff
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f004 fced 	bl	800b224 <VL53L0X_WrByte>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006850:	f107 031a 	add.w	r3, r7, #26
 8006854:	461a      	mov	r2, r3
 8006856:	2184      	movs	r1, #132	; 0x84
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f004 fd8f 	bl	800b37c <VL53L0X_RdWord>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
 8006862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006866:	4313      	orrs	r3, r2
 8006868:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800686c:	2200      	movs	r2, #0
 800686e:	21ff      	movs	r1, #255	; 0xff
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f004 fcd7 	bl	800b224 <VL53L0X_WrByte>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800687e:	4313      	orrs	r3, r2
 8006880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006884:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800688c:	8b7b      	ldrh	r3, [r7, #26]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006898:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800689c:	2b00      	cmp	r3, #0
 800689e:	d108      	bne.n	80068b2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80068a0:	f107 031c 	add.w	r3, r7, #28
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8d0 	bl	8006a4c <VL53L0X_GetDeviceParameters>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80068b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d110      	bne.n	80068dc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80068ba:	f107 0319 	add.w	r3, r7, #25
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9ae 	bl	8006c22 <VL53L0X_GetFractionEnable>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80068cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80068d4:	7e7a      	ldrb	r2, [r7, #25]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80068dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10e      	bne.n	8006902 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f103 0410 	add.w	r4, r3, #16
 80068ea:	f107 051c 	add.w	r5, r7, #28
 80068ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006902:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d111      	bne.n	800692e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800690a:	f107 0319 	add.w	r3, r7, #25
 800690e:	461a      	mov	r2, r3
 8006910:	2101      	movs	r1, #1
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f004 fd08 	bl	800b328 <VL53L0X_RdByte>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800691e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006926:	7e7a      	ldrb	r2, [r7, #25]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800692e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006932:	2b00      	cmp	r3, #0
 8006934:	d107      	bne.n	8006946 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006936:	2200      	movs	r2, #0
 8006938:	2100      	movs	r1, #0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9e6 	bl	8006d0c <VL53L0X_SetSequenceStepEnable>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006946:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800694e:	2200      	movs	r2, #0
 8006950:	2102      	movs	r1, #2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9da 	bl	8006d0c <VL53L0X_SetSequenceStepEnable>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800695e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2203      	movs	r2, #3
 800696a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800696e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006976:	f107 0313 	add.w	r3, r7, #19
 800697a:	461a      	mov	r2, r3
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f9ac 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800698a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006992:	7cfa      	ldrb	r2, [r7, #19]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800699a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80069a2:	f107 0313 	add.w	r3, r7, #19
 80069a6:	461a      	mov	r2, r3
 80069a8:	2101      	movs	r1, #1
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f996 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80069be:	7cfa      	ldrb	r2, [r7, #19]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80069c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	461a      	mov	r2, r3
 80069d4:	2103      	movs	r1, #3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 fee0 	bl	800979c <get_sequence_step_timeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80069f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	461a      	mov	r2, r3
 8006a00:	2104      	movs	r1, #4
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 feca 	bl	800979c <get_sequence_step_timeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3770      	adds	r7, #112	; 0x70
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bdb0      	pop	{r4, r5, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000010 	.word	0x20000010

08006a30 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006a38:	239d      	movs	r3, #157	; 0x9d
 8006a3a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f8cc 	bl	8006bfc <VL53L0X_GetDeviceMode>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa94 	bl	8006fa4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	3310      	adds	r3, #16
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 faca 	bl	8007036 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff fcc2 	bl	800643e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d134      	bne.n	8006b30 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	e02a      	b.n	8006b22 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d12a      	bne.n	8006b2a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	b299      	uxth	r1, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	3308      	adds	r3, #8
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fbea 	bl	80072c0 <VL53L0X_GetLimitCheckValue>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d117      	bne.n	8006b2e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	b299      	uxth	r1, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	3318      	adds	r3, #24
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	4413      	add	r3, r2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fb51 	bl	80071b4 <VL53L0X_GetLimitCheckEnable>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b05      	cmp	r3, #5
 8006b26:	ddd1      	ble.n	8006acc <VL53L0X_GetDeviceParameters+0x80>
 8006b28:	e002      	b.n	8006b30 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006b2e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	333c      	adds	r3, #60	; 0x3c
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fc4c 	bl	80073dc <VL53L0X_GetWrapAroundCheckEnable>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d107      	bne.n	8006b60 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f895 	bl	8006c86 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2b15      	cmp	r3, #21
 8006b80:	d832      	bhi.n	8006be8 <VL53L0X_SetDeviceMode+0x7c>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <VL53L0X_SetDeviceMode+0x1c>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006be9 	.word	0x08006be9
 8006b94:	08006be1 	.word	0x08006be1
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006be9 	.word	0x08006be9
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
 8006bb4:	08006be9 	.word	0x08006be9
 8006bb8:	08006be9 	.word	0x08006be9
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006be9 	.word	0x08006be9
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006be9 	.word	0x08006be9
 8006bd8:	08006be1 	.word	0x08006be1
 8006bdc:	08006be1 	.word	0x08006be1
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	741a      	strb	r2, [r3, #16]
		break;
 8006be6:	e001      	b.n	8006bec <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006be8:	23f8      	movs	r3, #248	; 0xf8
 8006bea:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1a      	ldrb	r2, [r3, #16]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	2109      	movs	r1, #9
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f004 fb77 	bl	800b328 <VL53L0X_RdByte>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f003 fa26 	bl	800a0c2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f003 faf3 	bl	800a282 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006cc0:	78ba      	ldrb	r2, [r7, #2]
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 ff3b 	bl	8009b42 <VL53L0X_set_vcsel_pulse_period>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f003 f9ad 	bl	800a054 <VL53L0X_get_vcsel_pulse_period>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d28:	f107 030f 	add.w	r3, r7, #15
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f004 faf9 	bl	800b328 <VL53L0X_RdByte>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d15a      	bne.n	8006dfc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006d46:	78bb      	ldrb	r3, [r7, #2]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d12b      	bne.n	8006da4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d825      	bhi.n	8006d9e <VL53L0X_SetSequenceStepEnable+0x92>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d77 	.word	0x08006d77
 8006d60:	08006d81 	.word	0x08006d81
 8006d64:	08006d8b 	.word	0x08006d8b
 8006d68:	08006d95 	.word	0x08006d95
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006d6c:	7dbb      	ldrb	r3, [r7, #22]
 8006d6e:	f043 0310 	orr.w	r3, r3, #16
 8006d72:	75bb      	strb	r3, [r7, #22]
				break;
 8006d74:	e043      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006d76:	7dbb      	ldrb	r3, [r7, #22]
 8006d78:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006d7c:	75bb      	strb	r3, [r7, #22]
				break;
 8006d7e:	e03e      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006d80:	7dbb      	ldrb	r3, [r7, #22]
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	75bb      	strb	r3, [r7, #22]
				break;
 8006d88:	e039      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006d8a:	7dbb      	ldrb	r3, [r7, #22]
 8006d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d90:	75bb      	strb	r3, [r7, #22]
				break;
 8006d92:	e034      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006d94:	7dbb      	ldrb	r3, [r7, #22]
 8006d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d9a:	75bb      	strb	r3, [r7, #22]
				break;
 8006d9c:	e02f      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d9e:	23fc      	movs	r3, #252	; 0xfc
 8006da0:	75fb      	strb	r3, [r7, #23]
 8006da2:	e02c      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d825      	bhi.n	8006df6 <VL53L0X_SetSequenceStepEnable+0xea>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dcf 	.word	0x08006dcf
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006de3 	.word	0x08006de3
 8006dc0:	08006ded 	.word	0x08006ded
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006dc4:	7dbb      	ldrb	r3, [r7, #22]
 8006dc6:	f023 0310 	bic.w	r3, r3, #16
 8006dca:	75bb      	strb	r3, [r7, #22]
				break;
 8006dcc:	e017      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006dce:	7dbb      	ldrb	r3, [r7, #22]
 8006dd0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006dd4:	75bb      	strb	r3, [r7, #22]
				break;
 8006dd6:	e012      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006dd8:	7dbb      	ldrb	r3, [r7, #22]
 8006dda:	f023 0304 	bic.w	r3, r3, #4
 8006dde:	75bb      	strb	r3, [r7, #22]
				break;
 8006de0:	e00d      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006de2:	7dbb      	ldrb	r3, [r7, #22]
 8006de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de8:	75bb      	strb	r3, [r7, #22]
				break;
 8006dea:	e008      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006dec:	7dbb      	ldrb	r3, [r7, #22]
 8006dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df2:	75bb      	strb	r3, [r7, #22]
				break;
 8006df4:	e003      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006df6:	23fc      	movs	r3, #252	; 0xfc
 8006df8:	75fb      	strb	r3, [r7, #23]
 8006dfa:	e000      	b.n	8006dfe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006dfc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	7dba      	ldrb	r2, [r7, #22]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d01e      	beq.n	8006e44 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d107      	bne.n	8006e1e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006e0e:	7dbb      	ldrb	r3, [r7, #22]
 8006e10:	461a      	mov	r2, r3
 8006e12:	2101      	movs	r1, #1
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f004 fa05 	bl	800b224 <VL53L0X_WrByte>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7dba      	ldrb	r2, [r7, #22]
 8006e2a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006e3c:	6939      	ldr	r1, [r7, #16]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff0e 	bl	8006c60 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	72fb      	strb	r3, [r7, #11]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d836      	bhi.n	8006ee0 <sequence_step_enabled+0x90>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <sequence_step_enabled+0x28>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e8d 	.word	0x08006e8d
 8006e7c:	08006e9f 	.word	0x08006e9f
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006ec3 	.word	0x08006ec3
 8006e88:	08006ed5 	.word	0x08006ed5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006e8c:	7abb      	ldrb	r3, [r7, #10]
 8006e8e:	111b      	asrs	r3, r3, #4
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	701a      	strb	r2, [r3, #0]
		break;
 8006e9c:	e022      	b.n	8006ee4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006e9e:	7abb      	ldrb	r3, [r7, #10]
 8006ea0:	10db      	asrs	r3, r3, #3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	701a      	strb	r2, [r3, #0]
		break;
 8006eae:	e019      	b.n	8006ee4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006eb0:	7abb      	ldrb	r3, [r7, #10]
 8006eb2:	109b      	asrs	r3, r3, #2
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	701a      	strb	r2, [r3, #0]
		break;
 8006ec0:	e010      	b.n	8006ee4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006ec2:	7abb      	ldrb	r3, [r7, #10]
 8006ec4:	119b      	asrs	r3, r3, #6
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	701a      	strb	r2, [r3, #0]
		break;
 8006ed2:	e007      	b.n	8006ee4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006ed4:	7abb      	ldrb	r3, [r7, #10]
 8006ed6:	09db      	lsrs	r3, r3, #7
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	701a      	strb	r2, [r3, #0]
		break;
 8006ede:	e001      	b.n	8006ee4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ee0:	23fc      	movs	r3, #252	; 0xfc
 8006ee2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f06:	f107 030e 	add.w	r3, r7, #14
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f004 fa0a 	bl	800b328 <VL53L0X_RdByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d107      	bne.n	8006f30 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006f20:	7bba      	ldrb	r2, [r7, #14]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff ff92 	bl	8006e50 <sequence_step_enabled>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d108      	bne.n	8006f4a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006f38:	7bba      	ldrb	r2, [r7, #14]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	2101      	movs	r1, #1
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ff85 	bl	8006e50 <sequence_step_enabled>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d108      	bne.n	8006f64 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006f52:	7bba      	ldrb	r2, [r7, #14]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	2102      	movs	r1, #2
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff78 	bl	8006e50 <sequence_step_enabled>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006f6c:	7bba      	ldrb	r2, [r7, #14]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	3303      	adds	r3, #3
 8006f72:	2103      	movs	r1, #3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff6b 	bl	8006e50 <sequence_step_enabled>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006f86:	7bba      	ldrb	r2, [r7, #14]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff5e 	bl	8006e50 <sequence_step_enabled>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	21f8      	movs	r1, #248	; 0xf8
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f004 f9de 	bl	800b37c <VL53L0X_RdWord>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f004 fa09 	bl	800b3ec <VL53L0X_RdDWord>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10c      	bne.n	8007000 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006fe6:	89bb      	ldrh	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	89ba      	ldrh	r2, [r7, #12]
 8006ff0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7f1b      	ldrb	r3, [r3, #28]
 800701e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	7bba      	ldrb	r2, [r7, #14]
 8007024:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b086      	sub	sp, #24
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007044:	f107 030e 	add.w	r3, r7, #14
 8007048:	461a      	mov	r2, r3
 800704a:	2120      	movs	r1, #32
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f004 f995 	bl	800b37c <VL53L0X_RdWord>
 8007052:	4603      	mov	r3, r0
 8007054:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d118      	bne.n	8007090 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	771a      	strb	r2, [r3, #28]
 8007076:	e00b      	b.n	8007090 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007090:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	807b      	strh	r3, [r7, #2]
 80070a8:	4613      	mov	r3, r2
 80070aa:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80070bc:	887b      	ldrh	r3, [r7, #2]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d902      	bls.n	80070c8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070c2:	23fc      	movs	r3, #252	; 0xfc
 80070c4:	75fb      	strb	r3, [r7, #23]
 80070c6:	e05b      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80070c8:	787b      	ldrb	r3, [r7, #1]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80070d6:	2301      	movs	r3, #1
 80070d8:	73bb      	strb	r3, [r7, #14]
 80070da:	e00a      	b.n	80070f2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070dc:	887b      	ldrh	r3, [r7, #2]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	330c      	adds	r3, #12
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80070ee:	2301      	movs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	d841      	bhi.n	800717c <VL53L0X_SetLimitCheckEnable+0xe0>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <VL53L0X_SetLimitCheckEnable+0x64>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007119 	.word	0x08007119
 8007104:	08007123 	.word	0x08007123
 8007108:	08007139 	.word	0x08007139
 800710c:	08007143 	.word	0x08007143
 8007110:	0800714d 	.word	0x0800714d
 8007114:	08007165 	.word	0x08007165

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7bfa      	ldrb	r2, [r7, #15]
 800711c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007120:	e02e      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	2144      	movs	r1, #68	; 0x44
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f004 f89d 	bl	800b26c <VL53L0X_WrWord>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

			break;
 8007136:	e023      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007140:	e01e      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	7bfa      	ldrb	r2, [r7, #15]
 8007146:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800714a:	e019      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007152:	7b7b      	ldrb	r3, [r7, #13]
 8007154:	22fe      	movs	r2, #254	; 0xfe
 8007156:	2160      	movs	r1, #96	; 0x60
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f004 f8b1 	bl	800b2c0 <VL53L0X_UpdateByte>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007162:	e00d      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800716a:	7b7b      	ldrb	r3, [r7, #13]
 800716c:	22ef      	movs	r2, #239	; 0xef
 800716e:	2160      	movs	r1, #96	; 0x60
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f004 f8a5 	bl	800b2c0 <VL53L0X_UpdateByte>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800717a:	e001      	b.n	8007180 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800717c:	23fc      	movs	r3, #252	; 0xfc
 800717e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10f      	bne.n	80071a8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007188:	787b      	ldrb	r3, [r7, #1]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800719a:	e005      	b.n	80071a8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	460b      	mov	r3, r1
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	d905      	bls.n	80071d8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071cc:	23fc      	movs	r3, #252	; 0xfc
 80071ce:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	e008      	b.n	80071ea <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7dba      	ldrb	r2, [r7, #22]
 80071e8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	460b      	mov	r3, r1
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800720e:	897b      	ldrh	r3, [r7, #10]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800721a:	7dbb      	ldrb	r3, [r7, #22]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007220:	897b      	ldrh	r3, [r7, #10]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	330c      	adds	r3, #12
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	e040      	b.n	80072b2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007230:	897b      	ldrh	r3, [r7, #10]
 8007232:	2b05      	cmp	r3, #5
 8007234:	d830      	bhi.n	8007298 <VL53L0X_SetLimitCheckValue+0x9c>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <VL53L0X_SetLimitCheckValue+0x40>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007255 	.word	0x08007255
 8007240:	0800725d 	.word	0x0800725d
 8007244:	08007273 	.word	0x08007273
 8007248:	0800727b 	.word	0x0800727b
 800724c:	08007283 	.word	0x08007283
 8007250:	08007283 	.word	0x08007283

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800725a:	e01f      	b.n	800729c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	2144      	movs	r1, #68	; 0x44
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f004 f800 	bl	800b26c <VL53L0X_WrWord>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007270:	e014      	b.n	800729c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007278:	e010      	b.n	800729c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007280:	e00c      	b.n	800729c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007286:	b29b      	uxth	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	2164      	movs	r1, #100	; 0x64
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f003 ffed 	bl	800b26c <VL53L0X_WrWord>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007296:	e001      	b.n	800729c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007298:	23fc      	movs	r3, #252	; 0xfc
 800729a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800729c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	330c      	adds	r3, #12
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	460b      	mov	r3, r1
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80072d6:	897b      	ldrh	r3, [r7, #10]
 80072d8:	2b05      	cmp	r3, #5
 80072da:	d847      	bhi.n	800736c <VL53L0X_GetLimitCheckValue+0xac>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <VL53L0X_GetLimitCheckValue+0x24>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	08007309 	.word	0x08007309
 80072ec:	0800732f 	.word	0x0800732f
 80072f0:	0800733b 	.word	0x0800733b
 80072f4:	08007347 	.word	0x08007347
 80072f8:	08007347 	.word	0x08007347

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007300:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	77bb      	strb	r3, [r7, #30]
		break;
 8007306:	e033      	b.n	8007370 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007308:	f107 0316 	add.w	r3, r7, #22
 800730c:	461a      	mov	r2, r3
 800730e:	2144      	movs	r1, #68	; 0x44
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f004 f833 	bl	800b37c <VL53L0X_RdWord>
 8007316:	4603      	mov	r3, r0
 8007318:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800731a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007322:	8afb      	ldrh	r3, [r7, #22]
 8007324:	025b      	lsls	r3, r3, #9
 8007326:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007328:	2301      	movs	r3, #1
 800732a:	77bb      	strb	r3, [r7, #30]
		break;
 800732c:	e020      	b.n	8007370 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	77bb      	strb	r3, [r7, #30]
		break;
 8007338:	e01a      	b.n	8007370 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	77bb      	strb	r3, [r7, #30]
		break;
 8007344:	e014      	b.n	8007370 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007346:	f107 0316 	add.w	r3, r7, #22
 800734a:	461a      	mov	r2, r3
 800734c:	2164      	movs	r1, #100	; 0x64
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f004 f814 	bl	800b37c <VL53L0X_RdWord>
 8007354:	4603      	mov	r3, r0
 8007356:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007358:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007360:	8afb      	ldrh	r3, [r7, #22]
 8007362:	025b      	lsls	r3, r3, #9
 8007364:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	77bb      	strb	r3, [r7, #30]
		break;
 800736a:	e001      	b.n	8007370 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800736c:	23fc      	movs	r3, #252	; 0xfc
 800736e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d12a      	bne.n	80073ce <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007378:	7fbb      	ldrb	r3, [r7, #30]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d124      	bne.n	80073c8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d110      	bne.n	80073a6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007384:	897b      	ldrh	r3, [r7, #10]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	330c      	adds	r3, #12
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007398:	897b      	ldrh	r3, [r7, #10]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80073a4:	e013      	b.n	80073ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80073ac:	897b      	ldrh	r3, [r7, #10]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	330c      	adds	r3, #12
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80073ba:	897b      	ldrh	r3, [r7, #10]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80073c6:	e002      	b.n	80073ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073ce:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop

080073dc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80073ea:	f107 030e 	add.w	r3, r7, #14
 80073ee:	461a      	mov	r2, r3
 80073f0:	2101      	movs	r1, #1
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f003 ff98 	bl	800b328 <VL53L0X_RdByte>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80073fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10e      	bne.n	8007422 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007404:	7bba      	ldrb	r2, [r7, #14]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	b25b      	sxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	da03      	bge.n	800741c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e002      	b.n	8007422 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800744c:	f107 030e 	add.w	r3, r7, #14
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fbd2 	bl	8006bfc <VL53L0X_GetDeviceMode>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800745c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d107      	bne.n	8007474 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f898 	bl	80075a0 <VL53L0X_StartMeasurement>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fb3f 	bl	8008b00 <VL53L0X_measurement_poll_for_completion>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2203      	movs	r2, #3
 8007498:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800749c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80074b8:	2301      	movs	r3, #1
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f001 fae1 	bl	8008a86 <VL53L0X_perform_ref_calibration>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80074c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80074ea:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80074ec:	7dbb      	ldrb	r3, [r7, #22]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d005      	beq.n	80074fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80074f2:	7dbb      	ldrb	r3, [r7, #22]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80074f8:	7dbb      	ldrb	r3, [r7, #22]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d147      	bne.n	800758e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	f107 0210 	add.w	r2, r7, #16
 8007506:	2101      	movs	r1, #1
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbc3 	bl	8007c94 <VL53L0X_GetInterruptThresholds>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007518:	d803      	bhi.n	8007522 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800751a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800751c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007520:	d935      	bls.n	800758e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d131      	bne.n	800758e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007530:	491a      	ldr	r1, [pc, #104]	; (800759c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f002 ff56 	bl	800a3e4 <VL53L0X_load_tuning_settings>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]
 800753c:	e027      	b.n	800758e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800753e:	2204      	movs	r2, #4
 8007540:	21ff      	movs	r1, #255	; 0xff
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f003 fe6e 	bl	800b224 <VL53L0X_WrByte>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	4313      	orrs	r3, r2
 8007550:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007552:	2200      	movs	r2, #0
 8007554:	2170      	movs	r1, #112	; 0x70
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f003 fe64 	bl	800b224 <VL53L0X_WrByte>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	4313      	orrs	r3, r2
 8007564:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007566:	2200      	movs	r2, #0
 8007568:	21ff      	movs	r1, #255	; 0xff
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f003 fe5a 	bl	800b224 <VL53L0X_WrByte>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	4313      	orrs	r3, r2
 8007578:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800757a:	2200      	movs	r2, #0
 800757c:	2180      	movs	r1, #128	; 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f003 fe50 	bl	800b224 <VL53L0X_WrByte>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	4313      	orrs	r3, r2
 800758c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800758e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000104 	.word	0x20000104

080075a0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80075b0:	f107 030e 	add.w	r3, r7, #14
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff fb20 	bl	8006bfc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80075bc:	2201      	movs	r2, #1
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f003 fe2f 	bl	800b224 <VL53L0X_WrByte>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075ca:	2201      	movs	r2, #1
 80075cc:	21ff      	movs	r1, #255	; 0xff
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f003 fe28 	bl	800b224 <VL53L0X_WrByte>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80075d8:	2200      	movs	r2, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f003 fe21 	bl	800b224 <VL53L0X_WrByte>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80075ec:	461a      	mov	r2, r3
 80075ee:	2191      	movs	r1, #145	; 0x91
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f003 fe17 	bl	800b224 <VL53L0X_WrByte>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80075fa:	2201      	movs	r2, #1
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f003 fe10 	bl	800b224 <VL53L0X_WrByte>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007608:	2200      	movs	r2, #0
 800760a:	21ff      	movs	r1, #255	; 0xff
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f003 fe09 	bl	800b224 <VL53L0X_WrByte>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007616:	2200      	movs	r2, #0
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f003 fe02 	bl	800b224 <VL53L0X_WrByte>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d037      	beq.n	800769a <VL53L0X_StartMeasurement+0xfa>
 800762a:	2b03      	cmp	r3, #3
 800762c:	d04f      	beq.n	80076ce <VL53L0X_StartMeasurement+0x12e>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d167      	bne.n	8007702 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007632:	2201      	movs	r2, #1
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f003 fdf4 	bl	800b224 <VL53L0X_WrByte>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d15d      	bne.n	8007708 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8007656:	f107 030d 	add.w	r3, r7, #13
 800765a:	461a      	mov	r2, r3
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f003 fe62 	bl	800b328 <VL53L0X_RdByte>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3301      	adds	r3, #1
 800766c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800766e:	7b7a      	ldrb	r2, [r7, #13]
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	4013      	ands	r3, r2
 8007674:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007676:	7bfa      	ldrb	r2, [r7, #15]
 8007678:	429a      	cmp	r2, r3
 800767a:	d107      	bne.n	800768c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 800767c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800768a:	d3e1      	bcc.n	8007650 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007692:	d339      	bcc.n	8007708 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007694:	23f9      	movs	r3, #249	; 0xf9
 8007696:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007698:	e036      	b.n	8007708 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800769a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80076a2:	2101      	movs	r1, #1
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff15 	bl	80074d4 <VL53L0X_CheckAndLoadInterruptSettings>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80076ae:	2202      	movs	r2, #2
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f003 fdb6 	bl	800b224 <VL53L0X_WrByte>
 80076b8:	4603      	mov	r3, r0
 80076ba:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80076bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d123      	bne.n	800770c <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2204      	movs	r2, #4
 80076c8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80076cc:	e01e      	b.n	800770c <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80076ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d105      	bne.n	80076e2 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80076d6:	2101      	movs	r1, #1
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff fefb 	bl	80074d4 <VL53L0X_CheckAndLoadInterruptSettings>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80076e2:	2204      	movs	r2, #4
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f003 fd9c 	bl	800b224 <VL53L0X_WrByte>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80076f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2204      	movs	r2, #4
 80076fc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007700:	e006      	b.n	8007710 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007702:	23f8      	movs	r3, #248	; 0xf8
 8007704:	75fb      	strb	r3, [r7, #23]
 8007706:	e004      	b.n	8007712 <VL53L0X_StartMeasurement+0x172>
		break;
 8007708:	bf00      	nop
 800770a:	e002      	b.n	8007712 <VL53L0X_StartMeasurement+0x172>
		break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <VL53L0X_StartMeasurement+0x172>
		break;
 8007710:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007732:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b04      	cmp	r3, #4
 8007738:	d112      	bne.n	8007760 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800773a:	f107 0308 	add.w	r3, r7, #8
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb1d 	bl	8007d80 <VL53L0X_GetInterruptMaskStatus>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d103      	bne.n	8007758 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2201      	movs	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e01c      	b.n	8007792 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	e018      	b.n	8007792 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007760:	f107 030d 	add.w	r3, r7, #13
 8007764:	461a      	mov	r2, r3
 8007766:	2114      	movs	r1, #20
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f003 fddd 	bl	800b328 <VL53L0X_RdByte>
 800776e:	4603      	mov	r3, r0
 8007770:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10b      	bne.n	8007792 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800777a:	7b7b      	ldrb	r3, [r7, #13]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e002      	b.n	8007792 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80077a0:	b5b0      	push	{r4, r5, r7, lr}
 80077a2:	b096      	sub	sp, #88	; 0x58
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80077b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077b4:	230c      	movs	r3, #12
 80077b6:	2114      	movs	r1, #20
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f003 fd07 	bl	800b1cc <VL53L0X_ReadMulti>
 80077be:	4603      	mov	r3, r0
 80077c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80077c4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 80d2 	bne.w	8007972 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2200      	movs	r2, #0
 80077d2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80077da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077de:	b29b      	uxth	r3, r3
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80077f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007804:	b29b      	uxth	r3, r3
 8007806:	4413      	add	r3, r2
 8007808:	b29b      	uxth	r3, r3
 800780a:	025b      	lsls	r3, r3, #9
 800780c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007812:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007814:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007818:	b29b      	uxth	r3, r3
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	b29a      	uxth	r2, r3
 800781e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007822:	b29b      	uxth	r3, r3
 8007824:	4413      	add	r3, r2
 8007826:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800782a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800782e:	025b      	lsls	r3, r3, #9
 8007830:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007836:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	b29a      	uxth	r2, r3
 8007840:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007844:	b29b      	uxth	r3, r3
 8007846:	4413      	add	r3, r2
 8007848:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007852:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007862:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800786a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800786e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007874:	d047      	beq.n	8007906 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007876:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007878:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007884:	4a58      	ldr	r2, [pc, #352]	; (80079e8 <VL53L0X_GetRangingMeasurementData+0x248>)
 8007886:	fb82 1203 	smull	r1, r2, r2, r3
 800788a:	1192      	asrs	r2, r2, #6
 800788c:	17db      	asrs	r3, r3, #31
 800788e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007890:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7f1b      	ldrb	r3, [r3, #28]
 800789e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80078a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02d      	beq.n	8007906 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80078aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078ac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80078b0:	fb02 f303 	mul.w	r3, r2, r3
 80078b4:	121b      	asrs	r3, r3, #8
 80078b6:	461a      	mov	r2, r3
				if ((SignalRate
 80078b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d10d      	bne.n	80078da <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 80078be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 80078c6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80078ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80078ce:	e016      	b.n	80078fe <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80078d0:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80078d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80078d8:	e011      	b.n	80078fe <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80078da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e0:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80078e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078e6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80078ea:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80078ee:	121b      	asrs	r3, r3, #8
 80078f0:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80078f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f4:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80078fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80078fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007902:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007906:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00d      	beq.n	800792a <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800790e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007912:	089b      	lsrs	r3, r3, #2
 8007914:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800791a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800791e:	b2db      	uxtb	r3, r3
 8007920:	019b      	lsls	r3, r3, #6
 8007922:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	75da      	strb	r2, [r3, #23]
 8007928:	e006      	b.n	8007938 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007930:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2200      	movs	r2, #0
 8007936:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007938:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800793c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007940:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f003 f9f0 	bl	800ad34 <VL53L0X_get_pal_range_status>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800795c:	4313      	orrs	r3, r2
 800795e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007962:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800796a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007972:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007976:	2b00      	cmp	r3, #0
 8007978:	d12f      	bne.n	80079da <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f107 040c 	add.w	r4, r7, #12
 8007980:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800798c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007994:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80079a2:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80079a8:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80079ae:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80079b4:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80079ba:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80079c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80079ca:	f107 050c 	add.w	r5, r7, #12
 80079ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079da:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3750      	adds	r7, #80	; 0x50
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bdb0      	pop	{r4, r5, r7, pc}
 80079e6:	bf00      	nop
 80079e8:	10624dd3 	.word	0x10624dd3

080079ec <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff f8b5 	bl	8006b6c <VL53L0X_SetDeviceMode>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fd16 	bl	8007440 <VL53L0X_PerformSingleMeasurement>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff febc 	bl	80077a0 <VL53L0X_GetRangingMeasurementData>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f962 	bl	8007d00 <VL53L0X_ClearInterruptMask>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	70fb      	strb	r3, [r7, #3]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70bb      	strb	r3, [r7, #2]
 8007a62:	4613      	mov	r3, r2
 8007a64:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007a70:	23f6      	movs	r3, #246	; 0xf6
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e107      	b.n	8007c86 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007a76:	78bb      	ldrb	r3, [r7, #2]
 8007a78:	2b14      	cmp	r3, #20
 8007a7a:	d110      	bne.n	8007a9e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007a7c:	7e3b      	ldrb	r3, [r7, #24]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d102      	bne.n	8007a88 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007a82:	2310      	movs	r3, #16
 8007a84:	73bb      	strb	r3, [r7, #14]
 8007a86:	e001      	b.n	8007a8c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2184      	movs	r1, #132	; 0x84
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f003 fbc6 	bl	800b224 <VL53L0X_WrByte>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
 8007a9c:	e0f3      	b.n	8007c86 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007a9e:	78bb      	ldrb	r3, [r7, #2]
 8007aa0:	2b15      	cmp	r3, #21
 8007aa2:	f040 8097 	bne.w	8007bd4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	21ff      	movs	r1, #255	; 0xff
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f003 fbba 	bl	800b224 <VL53L0X_WrByte>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f003 fbb0 	bl	800b224 <VL53L0X_WrByte>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	21ff      	movs	r1, #255	; 0xff
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f003 fba6 	bl	800b224 <VL53L0X_WrByte>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f003 fb9c 	bl	800b224 <VL53L0X_WrByte>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007af6:	2202      	movs	r2, #2
 8007af8:	2185      	movs	r1, #133	; 0x85
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f003 fb92 	bl	800b224 <VL53L0X_WrByte>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	21ff      	movs	r1, #255	; 0xff
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 fb88 	bl	800b224 <VL53L0X_WrByte>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	21cd      	movs	r1, #205	; 0xcd
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f003 fb7e 	bl	800b224 <VL53L0X_WrByte>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007b32:	2211      	movs	r2, #17
 8007b34:	21cc      	movs	r1, #204	; 0xcc
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f003 fb74 	bl	800b224 <VL53L0X_WrByte>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007b46:	2207      	movs	r2, #7
 8007b48:	21ff      	movs	r1, #255	; 0xff
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f003 fb6a 	bl	800b224 <VL53L0X_WrByte>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	21be      	movs	r1, #190	; 0xbe
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f003 fb60 	bl	800b224 <VL53L0X_WrByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007b6e:	2206      	movs	r2, #6
 8007b70:	21ff      	movs	r1, #255	; 0xff
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f003 fb56 	bl	800b224 <VL53L0X_WrByte>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007b82:	2209      	movs	r2, #9
 8007b84:	21cc      	movs	r1, #204	; 0xcc
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f003 fb4c 	bl	800b224 <VL53L0X_WrByte>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007b96:	2200      	movs	r2, #0
 8007b98:	21ff      	movs	r1, #255	; 0xff
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f003 fb42 	bl	800b224 <VL53L0X_WrByte>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007baa:	2201      	movs	r2, #1
 8007bac:	21ff      	movs	r1, #255	; 0xff
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f003 fb38 	bl	800b224 <VL53L0X_WrByte>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f003 fb2e 	bl	800b224 <VL53L0X_WrByte>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	73fb      	strb	r3, [r7, #15]
 8007bd2:	e058      	b.n	8007c86 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d121      	bne.n	8007c20 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007bdc:	787b      	ldrb	r3, [r7, #1]
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d81b      	bhi.n	8007c1a <VL53L0X_SetGpioConfig+0x1ce>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <VL53L0X_SetGpioConfig+0x19c>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007c03 	.word	0x08007c03
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	08007c0f 	.word	0x08007c0f
 8007bf8:	08007c15 	.word	0x08007c15
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73bb      	strb	r3, [r7, #14]
				break;
 8007c00:	e00f      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73bb      	strb	r3, [r7, #14]
				break;
 8007c06:	e00c      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	73bb      	strb	r3, [r7, #14]
				break;
 8007c0c:	e009      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	73bb      	strb	r3, [r7, #14]
				break;
 8007c12:	e006      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007c14:	2304      	movs	r3, #4
 8007c16:	73bb      	strb	r3, [r7, #14]
				break;
 8007c18:	e003      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007c1a:	23f5      	movs	r3, #245	; 0xf5
 8007c1c:	73fb      	strb	r3, [r7, #15]
 8007c1e:	e000      	b.n	8007c22 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007c20:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d107      	bne.n	8007c3a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	210a      	movs	r1, #10
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f003 faf7 	bl	800b224 <VL53L0X_WrByte>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10f      	bne.n	8007c62 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007c42:	7e3b      	ldrb	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73bb      	strb	r3, [r7, #14]
 8007c4c:	e001      	b.n	8007c52 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007c4e:	2310      	movs	r3, #16
 8007c50:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	22ef      	movs	r2, #239	; 0xef
 8007c56:	2184      	movs	r1, #132	; 0x84
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f003 fb31 	bl	800b2c0 <VL53L0X_UpdateByte>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	787a      	ldrb	r2, [r7, #1]
 8007c6e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f83f 	bl	8007d00 <VL53L0X_ClearInterruptMask>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop

08007c94 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007ca8:	f107 0314 	add.w	r3, r7, #20
 8007cac:	461a      	mov	r2, r3
 8007cae:	210e      	movs	r1, #14
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f003 fb63 	bl	800b37c <VL53L0X_RdWord>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007cba:	8abb      	ldrh	r3, [r7, #20]
 8007cbc:	045b      	lsls	r3, r3, #17
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <VL53L0X_GetInterruptThresholds+0x68>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10f      	bne.n	8007cf0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	210c      	movs	r1, #12
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f003 fb4f 	bl	800b37c <VL53L0X_RdWord>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007ce2:	8abb      	ldrh	r3, [r7, #20]
 8007ce4:	045b      	lsls	r3, r3, #17
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <VL53L0X_GetInterruptThresholds+0x68>)
 8007cea:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	1ffe0000 	.word	0x1ffe0000

08007d00 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007d12:	2201      	movs	r2, #1
 8007d14:	210b      	movs	r1, #11
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f003 fa84 	bl	800b224 <VL53L0X_WrByte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007d20:	2200      	movs	r2, #0
 8007d22:	210b      	movs	r1, #11
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f003 fa7d 	bl	800b224 <VL53L0X_WrByte>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007d34:	f107 030d 	add.w	r3, r7, #13
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2113      	movs	r1, #19
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f003 faf3 	bl	800b328 <VL53L0X_RdByte>
 8007d42:	4603      	mov	r3, r0
 8007d44:	461a      	mov	r2, r3
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007d52:	7b7b      	ldrb	r3, [r7, #13]
 8007d54:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d006      	beq.n	8007d6a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d803      	bhi.n	8007d6a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0d3      	beq.n	8007d12 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007d70:	23f4      	movs	r3, #244	; 0xf4
 8007d72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007d8e:	f107 030e 	add.w	r3, r7, #14
 8007d92:	461a      	mov	r2, r3
 8007d94:	2113      	movs	r1, #19
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f003 fac6 	bl	800b328 <VL53L0X_RdByte>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	f003 0207 	and.w	r2, r3, #7
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	f003 0318 	and.w	r3, r3, #24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007db4:	23fa      	movs	r3, #250	; 0xfa
 8007db6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fa03 	bl	80081e4 <VL53L0X_perform_ref_spad_management>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007dfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007e00:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e06:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007e08:	f107 0308 	add.w	r3, r7, #8
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	2128      	movs	r1, #40	; 0x28
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f003 fab3 	bl	800b37c <VL53L0X_RdWord>
 8007e16:	4603      	mov	r3, r0
 8007e18:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d11e      	bne.n	8007e60 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007e22:	893b      	ldrh	r3, [r7, #8]
 8007e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007e2c:	893b      	ldrh	r3, [r7, #8]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	dd0b      	ble.n	8007e50 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007e38:	893a      	ldrh	r2, [r7, #8]
 8007e3a:	897b      	ldrh	r3, [r7, #10]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	461a      	mov	r2, r3
					* 250;
 8007e44:	23fa      	movs	r3, #250	; 0xfa
 8007e46:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e007      	b.n	8007e60 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007e50:	893b      	ldrh	r3, [r7, #8]
 8007e52:	b21b      	sxth	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	23fa      	movs	r3, #250	; 0xfa
 8007e58:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b08b      	sub	sp, #44	; 0x2c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e92:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	fb01 f202 	mul.w	r2, r1, r2
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	e030      	b.n	8007f0e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	4413      	add	r3, r2
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d11e      	bne.n	8007f00 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007ec2:	7ffa      	ldrb	r2, [r7, #31]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	fa42 f303 	asr.w	r3, r2, r3
 8007eca:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007ed0:	e016      	b.n	8007f00 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <get_next_good_spad+0x88>
				success = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	fb02 f203 	mul.w	r2, r2, r3
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	4413      	add	r3, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	601a      	str	r2, [r3, #0]
				break;
 8007ef2:	e009      	b.n	8007f08 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007ef4:	7ffb      	ldrb	r3, [r7, #31]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	3301      	adds	r3, #1
 8007efe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d3e4      	bcc.n	8007ed2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d202      	bcs.n	8007f1c <get_next_good_spad+0xb0>
 8007f16:	7fbb      	ldrb	r3, [r7, #30]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c7      	beq.n	8007eac <get_next_good_spad+0x40>
		}
	}
}
 8007f1c:	bf00      	nop
 8007f1e:	372c      	adds	r7, #44	; 0x2c
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007f3a:	4a07      	ldr	r2, [pc, #28]	; (8007f58 <is_aperture+0x30>)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <is_aperture+0x22>
		isAperture = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	200002bc 	.word	0x200002bc

08007f5c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b089      	sub	sp, #36	; 0x24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f78:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f82:	69b9      	ldr	r1, [r7, #24]
 8007f84:	fb01 f202 	mul.w	r2, r1, r2
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f94:	23ce      	movs	r3, #206	; 0xce
 8007f96:	77fb      	strb	r3, [r7, #31]
 8007f98:	e010      	b.n	8007fbc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b25a      	sxtb	r2, r3
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	b259      	sxtb	r1, r3
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	b2ca      	uxtb	r2, r1
 8007fba:	701a      	strb	r2, [r3, #0]

	return status;
 8007fbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3724      	adds	r7, #36	; 0x24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007fd6:	2306      	movs	r3, #6
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	21b0      	movs	r1, #176	; 0xb0
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f003 f8c5 	bl	800b16c <VL53L0X_WriteMulti>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007ffc:	2306      	movs	r3, #6
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	21b0      	movs	r1, #176	; 0xb0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f003 f8e2 	bl	800b1cc <VL53L0X_ReadMulti>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800800c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08c      	sub	sp, #48	; 0x30
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	460b      	mov	r3, r1
 8008026:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008028:	2300      	movs	r3, #0
 800802a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800802e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008030:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008034:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008036:	2300      	movs	r3, #0
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28
 800803a:	e02b      	b.n	8008094 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800803c:	f107 031c 	add.w	r3, r7, #28
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff ff11 	bl	8007e6c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008052:	23ce      	movs	r3, #206	; 0xce
 8008054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008058:	e020      	b.n	800809c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	461a      	mov	r2, r3
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	4413      	add	r3, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff ff60 	bl	8007f28 <is_aperture>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008072:	23ce      	movs	r3, #206	; 0xce
 8008074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008078:	e010      	b.n	800809c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f7ff ff6a 	bl	8007f5c <enable_spad_bit>
		currentSpad++;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	3301      	adds	r3, #1
 800808c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	3301      	adds	r3, #1
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
 8008094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008098:	429a      	cmp	r2, r3
 800809a:	d3cf      	bcc.n	800803c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800809c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80080a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff ff8d 	bl	8007fcc <set_ref_spad_map>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80080b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d121      	bne.n	8008104 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	4619      	mov	r1, r3
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff ff93 	bl	8007ff2 <get_ref_spad_map>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80080d6:	e011      	b.n	80080fc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	4413      	add	r3, r2
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	f107 0114 	add.w	r1, r7, #20
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	440b      	add	r3, r1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d003      	beq.n	80080f6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80080ee:	23ce      	movs	r3, #206	; 0xce
 80080f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80080f4:	e006      	b.n	8008104 <enable_ref_spads+0xec>
			}
			i++;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	3301      	adds	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80080fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	429a      	cmp	r2, r3
 8008102:	d3e9      	bcc.n	80080d8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008104:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800812c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008134:	2b00      	cmp	r3, #0
 8008136:	d107      	bne.n	8008148 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008138:	22c0      	movs	r2, #192	; 0xc0
 800813a:	2101      	movs	r1, #1
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f003 f871 	bl	800b224 <VL53L0X_WrByte>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fc48 	bl	80079ec <VL53L0X_PerformSingleRangingMeasurement>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008162:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800816a:	2201      	movs	r2, #1
 800816c:	21ff      	movs	r1, #255	; 0xff
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f003 f858 	bl	800b224 <VL53L0X_WrByte>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800817a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800817e:	2b00      	cmp	r3, #0
 8008180:	d107      	bne.n	8008192 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	21b6      	movs	r1, #182	; 0xb6
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f003 f8f8 	bl	800b37c <VL53L0X_RdWord>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008196:	2b00      	cmp	r3, #0
 8008198:	d107      	bne.n	80081aa <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800819a:	2200      	movs	r2, #0
 800819c:	21ff      	movs	r1, #255	; 0xff
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f003 f840 	bl	800b224 <VL53L0X_WrByte>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80081aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d112      	bne.n	80081d8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80081b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081b6:	461a      	mov	r2, r3
 80081b8:	2101      	movs	r1, #1
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f003 f832 	bl	800b224 <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80081c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081d4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80081d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	; 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b09d      	sub	sp, #116	; 0x74
 80081e8:	af06      	add	r7, sp, #24
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80081f6:	23b4      	movs	r3, #180	; 0xb4
 80081f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80081fc:	2303      	movs	r3, #3
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008200:	232c      	movs	r3, #44	; 0x2c
 8008202:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008210:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008214:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800821e:	2306      	movs	r3, #6
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008248:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800824a:	2300      	movs	r3, #0
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
 800824e:	e009      	b.n	8008264 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008254:	4413      	add	r3, r2
 8008256:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800825e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008260:	3301      	adds	r3, #1
 8008262:	64bb      	str	r3, [r7, #72]	; 0x48
 8008264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	429a      	cmp	r2, r3
 800826a:	d3f1      	bcc.n	8008250 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800826c:	2201      	movs	r2, #1
 800826e:	21ff      	movs	r1, #255	; 0xff
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f002 ffd7 	bl	800b224 <VL53L0X_WrByte>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800827c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008280:	2b00      	cmp	r3, #0
 8008282:	d107      	bne.n	8008294 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008284:	2200      	movs	r2, #0
 8008286:	214f      	movs	r1, #79	; 0x4f
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f002 ffcb 	bl	800b224 <VL53L0X_WrByte>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008294:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008298:	2b00      	cmp	r3, #0
 800829a:	d107      	bne.n	80082ac <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800829c:	222c      	movs	r2, #44	; 0x2c
 800829e:	214e      	movs	r1, #78	; 0x4e
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f002 ffbf 	bl	800b224 <VL53L0X_WrByte>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80082ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d107      	bne.n	80082c4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80082b4:	2200      	movs	r2, #0
 80082b6:	21ff      	movs	r1, #255	; 0xff
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f002 ffb3 	bl	800b224 <VL53L0X_WrByte>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80082c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80082cc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80082d0:	461a      	mov	r2, r3
 80082d2:	21b6      	movs	r1, #182	; 0xb6
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f002 ffa5 	bl	800b224 <VL53L0X_WrByte>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80082e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d107      	bne.n	80082f8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80082e8:	2200      	movs	r2, #0
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f002 ff99 	bl	800b224 <VL53L0X_WrByte>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80082f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008300:	f107 0210 	add.w	r2, r7, #16
 8008304:	f107 0111 	add.w	r1, r7, #17
 8008308:	2300      	movs	r3, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fbbb 	bl	8008a86 <VL53L0X_perform_ref_calibration>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008316:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800831a:	2b00      	cmp	r3, #0
 800831c:	d121      	bne.n	8008362 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800832a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800833a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800833e:	f107 0218 	add.w	r2, r7, #24
 8008342:	9204      	str	r2, [sp, #16]
 8008344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008346:	9203      	str	r2, [sp, #12]
 8008348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800834a:	9202      	str	r2, [sp, #8]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	4623      	mov	r3, r4
 8008354:	4602      	mov	r2, r0
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fe5e 	bl	8008018 <enable_ref_spads>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008362:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008366:	2b00      	cmp	r3, #0
 8008368:	d174      	bne.n	8008454 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800836e:	f107 0312 	add.w	r3, r7, #18
 8008372:	4619      	mov	r1, r3
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fecb 	bl	8008110 <perform_ref_signal_measurement>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008380:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008384:	2b00      	cmp	r3, #0
 8008386:	d161      	bne.n	800844c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008388:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800838a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800838c:	429a      	cmp	r2, r3
 800838e:	d25d      	bcs.n	800844c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008390:	2300      	movs	r3, #0
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48
 8008394:	e009      	b.n	80083aa <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839a:	4413      	add	r3, r2
 800839c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80083a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a6:	3301      	adds	r3, #1
 80083a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d3f1      	bcc.n	8008396 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80083b2:	e002      	b.n	80083ba <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80083b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b6:	3301      	adds	r3, #1
 80083b8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80083ba:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80083be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c0:	4413      	add	r3, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fdb0 	bl	8007f28 <is_aperture>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80083ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d3ee      	bcc.n	80083b4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80083da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083dc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80083ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80083ee:	f107 0218 	add.w	r2, r7, #24
 80083f2:	9204      	str	r2, [sp, #16]
 80083f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f6:	9203      	str	r2, [sp, #12]
 80083f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083fa:	9202      	str	r2, [sp, #8]
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4623      	mov	r3, r4
 8008404:	4602      	mov	r2, r0
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fe06 	bl	8008018 <enable_ref_spads>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008412:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008416:	2b00      	cmp	r3, #0
 8008418:	d11b      	bne.n	8008452 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800841e:	f107 0312 	add.w	r3, r7, #18
 8008422:	4619      	mov	r1, r3
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff fe73 	bl	8008110 <perform_ref_signal_measurement>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008430:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10c      	bne.n	8008452 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008438:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800843a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800843c:	429a      	cmp	r2, r3
 800843e:	d208      	bcs.n	8008452 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800844a:	e002      	b.n	8008452 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	e000      	b.n	8008454 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008452:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008454:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 80af 	bne.w	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800845e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008460:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008462:	429a      	cmp	r2, r3
 8008464:	f240 80aa 	bls.w	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008478:	f107 031c 	add.w	r3, r7, #28
 800847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847e:	4618      	mov	r0, r3
 8008480:	f003 f82a 	bl	800b4d8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008484:	8a7b      	ldrh	r3, [r7, #18]
 8008486:	461a      	mov	r2, r3
 8008488:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfb8      	it	lt
 8008490:	425b      	neglt	r3, r3
 8008492:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800849a:	e086      	b.n	80085aa <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084aa:	f7ff fcdf 	bl	8007e6c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d103      	bne.n	80084be <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80084b6:	23ce      	movs	r3, #206	; 0xce
 80084b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80084bc:	e07e      	b.n	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80084be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fd2e 	bl	8007f28 <is_aperture>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80084dc:	e06e      	b.n	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80084de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e0:	3301      	adds	r3, #1
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80084ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fd32 	bl	8007f5c <enable_spad_bit>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80084fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10c      	bne.n	8008520 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008508:	3301      	adds	r3, #1
 800850a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008512:	4619      	mov	r1, r3
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fd59 	bl	8007fcc <set_ref_spad_map>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008520:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008524:	2b00      	cmp	r3, #0
 8008526:	d146      	bne.n	80085b6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008528:	f107 0312 	add.w	r3, r7, #18
 800852c:	4619      	mov	r1, r3
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fdee 	bl	8008110 <perform_ref_signal_measurement>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800853a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800853e:	2b00      	cmp	r3, #0
 8008540:	d13b      	bne.n	80085ba <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008542:	8a7b      	ldrh	r3, [r7, #18]
 8008544:	461a      	mov	r2, r3
 8008546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfb8      	it	lt
 800854e:	425b      	neglt	r3, r3
 8008550:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008552:	8a7b      	ldrh	r3, [r7, #18]
 8008554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008556:	429a      	cmp	r2, r3
 8008558:	d21c      	bcs.n	8008594 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800855a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855e:	429a      	cmp	r2, r3
 8008560:	d914      	bls.n	800858c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008562:	f107 031c 	add.w	r3, r7, #28
 8008566:	4619      	mov	r1, r3
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fd2f 	bl	8007fcc <set_ref_spad_map>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800857a:	f107 011c 	add.w	r1, r7, #28
 800857e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008580:	4618      	mov	r0, r3
 8008582:	f002 ffa9 	bl	800b4d8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	3b01      	subs	r3, #1
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e00a      	b.n	80085aa <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800859e:	f107 031c 	add.w	r3, r7, #28
 80085a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a4:	4618      	mov	r0, r3
 80085a6:	f002 ff97 	bl	800b4d8 <memcpy>
		while (!complete) {
 80085aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f43f af74 	beq.w	800849c <VL53L0X_perform_ref_spad_management+0x2b8>
 80085b4:	e002      	b.n	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80085b6:	bf00      	nop
 80085b8:	e000      	b.n	80085bc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80085ba:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d115      	bne.n	80085f0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085c8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80085d0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80085f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	375c      	adds	r7, #92	; 0x5c
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}

080085fc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b093      	sub	sp, #76	; 0x4c
 8008600:	af06      	add	r7, sp, #24
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008614:	23b4      	movs	r3, #180	; 0xb4
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800861a:	2306      	movs	r3, #6
 800861c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800861e:	232c      	movs	r3, #44	; 0x2c
 8008620:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008622:	2201      	movs	r2, #1
 8008624:	21ff      	movs	r1, #255	; 0xff
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f002 fdfc 	bl	800b224 <VL53L0X_WrByte>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008632:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800863a:	2200      	movs	r2, #0
 800863c:	214f      	movs	r1, #79	; 0x4f
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f002 fdf0 	bl	800b224 <VL53L0X_WrByte>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800864a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800864e:	2b00      	cmp	r3, #0
 8008650:	d107      	bne.n	8008662 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008652:	222c      	movs	r2, #44	; 0x2c
 8008654:	214e      	movs	r1, #78	; 0x4e
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f002 fde4 	bl	800b224 <VL53L0X_WrByte>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008662:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008666:	2b00      	cmp	r3, #0
 8008668:	d107      	bne.n	800867a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800866a:	2200      	movs	r2, #0
 800866c:	21ff      	movs	r1, #255	; 0xff
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f002 fdd8 	bl	800b224 <VL53L0X_WrByte>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800867a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008686:	461a      	mov	r2, r3
 8008688:	21b6      	movs	r1, #182	; 0xb6
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f002 fdca 	bl	800b224 <VL53L0X_WrByte>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008696:	2300      	movs	r3, #0
 8008698:	627b      	str	r3, [r7, #36]	; 0x24
 800869a:	e009      	b.n	80086b0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	3301      	adds	r3, #1
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
 80086b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d3f1      	bcc.n	800869c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d011      	beq.n	80086e2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80086be:	e002      	b.n	80086c6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	3301      	adds	r3, #1
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80086c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	4413      	add	r3, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fc2a 	bl	8007f28 <is_aperture>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d103      	bne.n	80086e2 <VL53L0X_set_reference_spads+0xe6>
 80086da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d3ee      	bcc.n	80086c0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80086ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086f2:	79f9      	ldrb	r1, [r7, #7]
 80086f4:	f107 0214 	add.w	r2, r7, #20
 80086f8:	9204      	str	r2, [sp, #16]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008700:	9202      	str	r2, [sp, #8]
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4623      	mov	r3, r4
 800870a:	4602      	mov	r2, r0
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7ff fc83 	bl	8008018 <enable_ref_spads>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008718:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10c      	bne.n	800873a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	79fa      	ldrb	r2, [r7, #7]
 8008736:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800873a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800873e:	4618      	mov	r0, r3
 8008740:	3734      	adds	r7, #52	; 0x34
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 fd5a 	bl	800b224 <VL53L0X_WrByte>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f9bf 	bl	8008b00 <VL53L0X_measurement_poll_for_completion>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800878e:	2100      	movs	r1, #0
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff fab5 	bl	8007d00 <VL53L0X_ClearInterruptMask>
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800879a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f002 fd3c 	bl	800b224 <VL53L0X_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

	return Status;
 80087b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	70fb      	strb	r3, [r7, #3]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70bb      	strb	r3, [r7, #2]
 80087d2:	4613      	mov	r3, r2
 80087d4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087de:	2201      	movs	r2, #1
 80087e0:	21ff      	movs	r1, #255	; 0xff
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f002 fd1e 	bl	800b224 <VL53L0X_WrByte>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 fd14 	bl	800b224 <VL53L0X_WrByte>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	4313      	orrs	r3, r2
 8008804:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008806:	2200      	movs	r2, #0
 8008808:	21ff      	movs	r1, #255	; 0xff
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 fd0a 	bl	800b224 <VL53L0X_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4313      	orrs	r3, r2
 8008818:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01e      	beq.n	800885e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d009      	beq.n	800883c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	21cb      	movs	r1, #203	; 0xcb
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 fd7b 	bl	800b328 <VL53L0X_RdByte>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	4313      	orrs	r3, r2
 800883a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800883c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d02a      	beq.n	800889a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008844:	f107 030e 	add.w	r3, r7, #14
 8008848:	461a      	mov	r2, r3
 800884a:	21ee      	movs	r1, #238	; 0xee
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f002 fd6b 	bl	800b328 <VL53L0X_RdByte>
 8008852:	4603      	mov	r3, r0
 8008854:	461a      	mov	r2, r3
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	4313      	orrs	r3, r2
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e01d      	b.n	800889a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800885e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008866:	78bb      	ldrb	r3, [r7, #2]
 8008868:	461a      	mov	r2, r3
 800886a:	21cb      	movs	r1, #203	; 0xcb
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f002 fcd9 	bl	800b224 <VL53L0X_WrByte>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	4313      	orrs	r3, r2
 800887a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800887c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008884:	787b      	ldrb	r3, [r7, #1]
 8008886:	2280      	movs	r2, #128	; 0x80
 8008888:	21ee      	movs	r1, #238	; 0xee
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f002 fd18 	bl	800b2c0 <VL53L0X_UpdateByte>
 8008890:	4603      	mov	r3, r0
 8008892:	461a      	mov	r2, r3
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	4313      	orrs	r3, r2
 8008898:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800889a:	2201      	movs	r2, #1
 800889c:	21ff      	movs	r1, #255	; 0xff
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fcc0 	bl	800b224 <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	461a      	mov	r2, r3
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80088ae:	2201      	movs	r2, #1
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f002 fcb6 	bl	800b224 <VL53L0X_WrByte>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4313      	orrs	r3, r2
 80088c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80088c2:	2200      	movs	r2, #0
 80088c4:	21ff      	movs	r1, #255	; 0xff
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fcac 	bl	800b224 <VL53L0X_WrByte>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	f023 0310 	bic.w	r3, r3, #16
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	701a      	strb	r2, [r3, #0]

	return Status;
 80088e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b08a      	sub	sp, #40	; 0x28
 80088f2:	af04      	add	r7, sp, #16
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	4611      	mov	r1, r2
 80088fa:	461a      	mov	r2, r3
 80088fc:	460b      	mov	r3, r1
 80088fe:	71fb      	strb	r3, [r7, #7]
 8008900:	4613      	mov	r3, r2
 8008902:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
 8008906:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008918:	79bb      	ldrb	r3, [r7, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008924:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008926:	2201      	movs	r2, #1
 8008928:	2101      	movs	r1, #1
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f002 fc7a 	bl	800b224 <VL53L0X_WrByte>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff ff01 	bl	8008746 <VL53L0X_perform_single_ref_calibration>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d115      	bne.n	800897c <VL53L0X_perform_vhv_calibration+0x8e>
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d112      	bne.n	800897c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008956:	7d39      	ldrb	r1, [r7, #20]
 8008958:	7d7a      	ldrb	r2, [r7, #21]
 800895a:	2300      	movs	r3, #0
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	2301      	movs	r3, #1
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	f107 0313 	add.w	r3, r7, #19
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	460b      	mov	r3, r1
 800896e:	2101      	movs	r1, #1
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7ff ff23 	bl	80087bc <VL53L0X_ref_calibration_io>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e002      	b.n	8008982 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d112      	bne.n	80089b0 <VL53L0X_perform_vhv_calibration+0xc2>
 800898a:	79bb      	ldrb	r3, [r7, #6]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00f      	beq.n	80089b0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008990:	7dbb      	ldrb	r3, [r7, #22]
 8008992:	461a      	mov	r2, r3
 8008994:	2101      	movs	r1, #1
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f002 fc44 	bl	800b224 <VL53L0X_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80089a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	7dba      	ldrb	r2, [r7, #22]
 80089ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80089b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	; 0x28
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4611      	mov	r1, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	460b      	mov	r3, r1
 80089cc:	71fb      	strb	r3, [r7, #7]
 80089ce:	4613      	mov	r3, r2
 80089d0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80089e2:	79bb      	ldrb	r3, [r7, #6]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80089ee:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80089f0:	2202      	movs	r2, #2
 80089f2:	2101      	movs	r1, #1
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f002 fc15 	bl	800b224 <VL53L0X_WrByte>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80089fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d105      	bne.n	8008a12 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008a06:	2100      	movs	r1, #0
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fe9c 	bl	8008746 <VL53L0X_perform_single_ref_calibration>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d115      	bne.n	8008a46 <VL53L0X_perform_phase_calibration+0x8a>
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d112      	bne.n	8008a46 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008a20:	7d39      	ldrb	r1, [r7, #20]
 8008a22:	7d7a      	ldrb	r2, [r7, #21]
 8008a24:	2301      	movs	r3, #1
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	f107 0313 	add.w	r3, r7, #19
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	460b      	mov	r3, r1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff febe 	bl	80087bc <VL53L0X_ref_calibration_io>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75fb      	strb	r3, [r7, #23]
 8008a44:	e002      	b.n	8008a4c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d112      	bne.n	8008a7a <VL53L0X_perform_phase_calibration+0xbe>
 8008a54:	79bb      	ldrb	r3, [r7, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00f      	beq.n	8008a7a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2101      	movs	r1, #1
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f002 fbdf 	bl	800b224 <VL53L0X_WrByte>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	7dba      	ldrb	r2, [r7, #22]
 8008a76:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b086      	sub	sp, #24
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008aa2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	68b9      	ldr	r1, [r7, #8]
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7ff ff1f 	bl	80088ee <VL53L0X_perform_vhv_calibration>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff ff7a 	bl	80089bc <VL53L0X_perform_phase_calibration>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10f      	bne.n	8008af4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008ad4:	7dbb      	ldrb	r3, [r7, #22]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2101      	movs	r1, #1
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f002 fba2 	bl	800b224 <VL53L0X_WrByte>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	7dba      	ldrb	r2, [r7, #22]
 8008af0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008b14:	f107 030f 	add.w	r3, r7, #15
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fe fdff 	bl	800771e <VL53L0X_GetMeasurementDataReady>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d110      	bne.n	8008b4e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d00f      	beq.n	8008b52 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3301      	adds	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b3e:	d302      	bcc.n	8008b46 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008b40:	23f9      	movs	r3, #249	; 0xf9
 8008b42:	75fb      	strb	r3, [r7, #23]
			break;
 8008b44:	e006      	b.n	8008b54 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f002 fc8c 	bl	800b464 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008b4c:	e7e2      	b.n	8008b14 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008b52:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	3301      	adds	r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bbc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008bbe:	e002      	b.n	8008bc6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	089b      	lsrs	r3, r3, #2
 8008bc4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d8f8      	bhi.n	8008bc0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008bce:	e017      	b.n	8008c00 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d30b      	bcc.n	8008bf4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e002      	b.n	8008bfa <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	089b      	lsrs	r3, r3, #2
 8008bfe:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e4      	bne.n	8008bd0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008c20:	2200      	movs	r2, #0
 8008c22:	2183      	movs	r1, #131	; 0x83
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f002 fafd 	bl	800b224 <VL53L0X_WrByte>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11e      	bne.n	8008c7a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008c40:	f107 030f 	add.w	r3, r7, #15
 8008c44:	461a      	mov	r2, r3
 8008c46:	2183      	movs	r1, #131	; 0x83
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 fb6d 	bl	800b328 <VL53L0X_RdByte>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <VL53L0X_device_read_strobe+0x5a>
 8008c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3301      	adds	r3, #1
 8008c64:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c6c:	d3e8      	bcc.n	8008c40 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c74:	d301      	bcc.n	8008c7a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008c76:	23f9      	movs	r3, #249	; 0xf9
 8008c78:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2183      	movs	r1, #131	; 0x83
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f002 fad0 	bl	800b224 <VL53L0X_WrByte>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b098      	sub	sp, #96	; 0x60
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008cca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008cce:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008ce6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cea:	2b07      	cmp	r3, #7
 8008cec:	f000 8408 	beq.w	8009500 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	2180      	movs	r1, #128	; 0x80
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f002 fa95 	bl	800b224 <VL53L0X_WrByte>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d08:	2201      	movs	r2, #1
 8008d0a:	21ff      	movs	r1, #255	; 0xff
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 fa89 	bl	800b224 <VL53L0X_WrByte>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008d20:	2200      	movs	r2, #0
 8008d22:	2100      	movs	r1, #0
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f002 fa7d 	bl	800b224 <VL53L0X_WrByte>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008d38:	2206      	movs	r2, #6
 8008d3a:	21ff      	movs	r1, #255	; 0xff
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f002 fa71 	bl	800b224 <VL53L0X_WrByte>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
 8008d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008d50:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008d54:	461a      	mov	r2, r3
 8008d56:	2183      	movs	r1, #131	; 0x83
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f002 fae5 	bl	800b328 <VL53L0X_RdByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d70:	f043 0304 	orr.w	r3, r3, #4
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	2183      	movs	r1, #131	; 0x83
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f002 fa52 	bl	800b224 <VL53L0X_WrByte>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008d8e:	2207      	movs	r2, #7
 8008d90:	21ff      	movs	r1, #255	; 0xff
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f002 fa46 	bl	800b224 <VL53L0X_WrByte>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008da6:	2201      	movs	r2, #1
 8008da8:	2181      	movs	r1, #129	; 0x81
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f002 fa3a 	bl	800b224 <VL53L0X_WrByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f002 fb50 	bl	800b464 <VL53L0X_PollingDelay>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f002 fa24 	bl	800b224 <VL53L0X_WrByte>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 8098 	beq.w	8008f26 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008df6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dfa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f040 8091 	bne.w	8008f26 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008e04:	226b      	movs	r2, #107	; 0x6b
 8008e06:	2194      	movs	r1, #148	; 0x94
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f002 fa0b 	bl	800b224 <VL53L0X_WrByte>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fef9 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008e22:	4603      	mov	r3, r0
 8008e24:	461a      	mov	r2, r3
 8008e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e34:	461a      	mov	r2, r3
 8008e36:	2190      	movs	r1, #144	; 0x90
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f002 fad7 	bl	800b3ec <VL53L0X_RdDWord>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	461a      	mov	r2, r3
 8008e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	0a1b      	lsrs	r3, r3, #8
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	0bdb      	lsrs	r3, r3, #15
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008e68:	2224      	movs	r2, #36	; 0x24
 8008e6a:	2194      	movs	r1, #148	; 0x94
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f002 f9d9 	bl	800b224 <VL53L0X_WrByte>
 8008e72:	4603      	mov	r3, r0
 8008e74:	461a      	mov	r2, r3
 8008e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff fec7 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008e86:	4603      	mov	r3, r0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e98:	461a      	mov	r2, r3
 8008e9a:	2190      	movs	r1, #144	; 0x90
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f002 faa5 	bl	800b3ec <VL53L0X_RdDWord>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	0e1b      	lsrs	r3, r3, #24
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008ece:	2225      	movs	r2, #37	; 0x25
 8008ed0:	2194      	movs	r1, #148	; 0x94
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f002 f9a6 	bl	800b224 <VL53L0X_WrByte>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff fe94 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008efe:	461a      	mov	r2, r3
 8008f00:	2190      	movs	r1, #144	; 0x90
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f002 fa72 	bl	800b3ec <VL53L0X_RdDWord>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	0e1b      	lsrs	r3, r3, #24
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	0c1b      	lsrs	r3, r3, #16
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8189 	beq.w	8009244 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f36:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 8182 	bne.w	8009244 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008f40:	2202      	movs	r2, #2
 8008f42:	2194      	movs	r1, #148	; 0x94
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f002 f96d 	bl	800b224 <VL53L0X_WrByte>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff fe5b 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	461a      	mov	r2, r3
 8008f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008f6c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008f70:	461a      	mov	r2, r3
 8008f72:	2190      	movs	r1, #144	; 0x90
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 f9d7 	bl	800b328 <VL53L0X_RdByte>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008f88:	227b      	movs	r2, #123	; 0x7b
 8008f8a:	2194      	movs	r1, #148	; 0x94
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f002 f949 	bl	800b224 <VL53L0X_WrByte>
 8008f92:	4603      	mov	r3, r0
 8008f94:	461a      	mov	r2, r3
 8008f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff fe37 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008fb4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008fb8:	461a      	mov	r2, r3
 8008fba:	2190      	movs	r1, #144	; 0x90
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f002 f9b3 	bl	800b328 <VL53L0X_RdByte>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008fd0:	2277      	movs	r2, #119	; 0x77
 8008fd2:	2194      	movs	r1, #148	; 0x94
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f002 f925 	bl	800b224 <VL53L0X_WrByte>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff fe13 	bl	8008c14 <VL53L0X_device_read_strobe>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009000:	461a      	mov	r2, r3
 8009002:	2190      	movs	r1, #144	; 0x90
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f002 f9f1 	bl	800b3ec <VL53L0X_RdDWord>
 800900a:	4603      	mov	r3, r0
 800900c:	461a      	mov	r2, r3
 800900e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009012:	4313      	orrs	r3, r2
 8009014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	0e5b      	lsrs	r3, r3, #25
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009022:	b2db      	uxtb	r3, r3
 8009024:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	0c9b      	lsrs	r3, r3, #18
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	0adb      	lsrs	r3, r3, #11
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800903e:	b2db      	uxtb	r3, r3
 8009040:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	091b      	lsrs	r3, r3, #4
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904c:	b2db      	uxtb	r3, r3
 800904e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	b2db      	uxtb	r3, r3
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009062:	2278      	movs	r2, #120	; 0x78
 8009064:	2194      	movs	r1, #148	; 0x94
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f002 f8dc 	bl	800b224 <VL53L0X_WrByte>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009074:	4313      	orrs	r3, r2
 8009076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fdca 	bl	8008c14 <VL53L0X_device_read_strobe>
 8009080:	4603      	mov	r3, r0
 8009082:	461a      	mov	r2, r3
 8009084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009088:	4313      	orrs	r3, r2
 800908a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800908e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009092:	461a      	mov	r2, r3
 8009094:	2190      	movs	r1, #144	; 0x90
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f002 f9a8 	bl	800b3ec <VL53L0X_RdDWord>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a4:	4313      	orrs	r3, r2
 80090a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	0f5b      	lsrs	r3, r3, #29
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80090b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090ba:	4413      	add	r3, r2
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	0d9b      	lsrs	r3, r3, #22
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	0bdb      	lsrs	r3, r3, #15
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	019b      	lsls	r3, r3, #6
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009104:	b2db      	uxtb	r3, r3
 8009106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800910a:	2279      	movs	r2, #121	; 0x79
 800910c:	2194      	movs	r1, #148	; 0x94
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f002 f888 	bl	800b224 <VL53L0X_WrByte>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800911c:	4313      	orrs	r3, r2
 800911e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fd76 	bl	8008c14 <VL53L0X_device_read_strobe>
 8009128:	4603      	mov	r3, r0
 800912a:	461a      	mov	r2, r3
 800912c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009130:	4313      	orrs	r3, r2
 8009132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800913a:	461a      	mov	r2, r3
 800913c:	2190      	movs	r1, #144	; 0x90
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f002 f954 	bl	800b3ec <VL53L0X_RdDWord>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800914c:	4313      	orrs	r3, r2
 800914e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	0e9b      	lsrs	r3, r3, #26
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800915e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009162:	4413      	add	r3, r2
 8009164:	b2db      	uxtb	r3, r3
 8009166:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	0cdb      	lsrs	r3, r3, #19
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009172:	b2db      	uxtb	r3, r3
 8009174:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	0b1b      	lsrs	r3, r3, #12
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009180:	b2db      	uxtb	r3, r3
 8009182:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	b2db      	uxtb	r3, r3
 8009190:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	b2db      	uxtb	r3, r3
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80091a4:	227a      	movs	r2, #122	; 0x7a
 80091a6:	2194      	movs	r1, #148	; 0x94
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f002 f83b 	bl	800b224 <VL53L0X_WrByte>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fd29 	bl	8008c14 <VL53L0X_device_read_strobe>
 80091c2:	4603      	mov	r3, r0
 80091c4:	461a      	mov	r2, r3
 80091c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091d4:	461a      	mov	r2, r3
 80091d6:	2190      	movs	r1, #144	; 0x90
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f002 f907 	bl	800b3ec <VL53L0X_RdDWord>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	0f9b      	lsrs	r3, r3, #30
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80091f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091fc:	4413      	add	r3, r2
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	0ddb      	lsrs	r3, r3, #23
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920c:	b2db      	uxtb	r3, r3
 800920e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	0c1b      	lsrs	r3, r3, #16
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800921a:	b2db      	uxtb	r3, r3
 800921c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	0a5b      	lsrs	r3, r3, #9
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	089b      	lsrs	r3, r3, #2
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800923e:	2300      	movs	r3, #0
 8009240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80f1 	beq.w	8009432 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009250:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009254:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 80ea 	bne.w	8009432 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800925e:	227b      	movs	r2, #123	; 0x7b
 8009260:	2194      	movs	r1, #148	; 0x94
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 ffde 	bl	800b224 <VL53L0X_WrByte>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009270:	4313      	orrs	r3, r2
 8009272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff fccc 	bl	8008c14 <VL53L0X_device_read_strobe>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009284:	4313      	orrs	r3, r2
 8009286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800928a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800928e:	461a      	mov	r2, r3
 8009290:	2190      	movs	r1, #144	; 0x90
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f002 f8aa 	bl	800b3ec <VL53L0X_RdDWord>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80092a6:	227c      	movs	r2, #124	; 0x7c
 80092a8:	2194      	movs	r1, #148	; 0x94
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 ffba 	bl	800b224 <VL53L0X_WrByte>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b8:	4313      	orrs	r3, r2
 80092ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fca8 	bl	8008c14 <VL53L0X_device_read_strobe>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80092d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d6:	461a      	mov	r2, r3
 80092d8:	2190      	movs	r1, #144	; 0x90
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 f886 	bl	800b3ec <VL53L0X_RdDWord>
 80092e0:	4603      	mov	r3, r0
 80092e2:	461a      	mov	r2, r3
 80092e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80092ee:	2273      	movs	r2, #115	; 0x73
 80092f0:	2194      	movs	r1, #148	; 0x94
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 ff96 	bl	800b224 <VL53L0X_WrByte>
 80092f8:	4603      	mov	r3, r0
 80092fa:	461a      	mov	r2, r3
 80092fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009300:	4313      	orrs	r3, r2
 8009302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fc84 	bl	8008c14 <VL53L0X_device_read_strobe>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009314:	4313      	orrs	r3, r2
 8009316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800931a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800931e:	461a      	mov	r2, r3
 8009320:	2190      	movs	r1, #144	; 0x90
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f002 f862 	bl	800b3ec <VL53L0X_RdDWord>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009330:	4313      	orrs	r3, r2
 8009332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800933a:	b29b      	uxth	r3, r3
 800933c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800933e:	2274      	movs	r2, #116	; 0x74
 8009340:	2194      	movs	r1, #148	; 0x94
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 ff6e 	bl	800b224 <VL53L0X_WrByte>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009350:	4313      	orrs	r3, r2
 8009352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fc5c 	bl	8008c14 <VL53L0X_device_read_strobe>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009364:	4313      	orrs	r3, r2
 8009366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800936a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800936e:	461a      	mov	r2, r3
 8009370:	2190      	movs	r1, #144	; 0x90
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 f83a 	bl	800b3ec <VL53L0X_RdDWord>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009380:	4313      	orrs	r3, r2
 8009382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800938a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800938c:	4313      	orrs	r3, r2
 800938e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009390:	2275      	movs	r2, #117	; 0x75
 8009392:	2194      	movs	r1, #148	; 0x94
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 ff45 	bl	800b224 <VL53L0X_WrByte>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff fc33 	bl	8008c14 <VL53L0X_device_read_strobe>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80093bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093c0:	461a      	mov	r2, r3
 80093c2:	2190      	movs	r1, #144	; 0x90
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f002 f811 	bl	800b3ec <VL53L0X_RdDWord>
 80093ca:	4603      	mov	r3, r0
 80093cc:	461a      	mov	r2, r3
 80093ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80093dc:	b29b      	uxth	r3, r3
 80093de:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80093e0:	2276      	movs	r2, #118	; 0x76
 80093e2:	2194      	movs	r1, #148	; 0x94
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 ff1d 	bl	800b224 <VL53L0X_WrByte>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff fc0b 	bl	8008c14 <VL53L0X_device_read_strobe>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009406:	4313      	orrs	r3, r2
 8009408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800940c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009410:	461a      	mov	r2, r3
 8009412:	2190      	movs	r1, #144	; 0x90
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 ffe9 	bl	800b3ec <VL53L0X_RdDWord>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009422:	4313      	orrs	r3, r2
 8009424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800942c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800942e:	4313      	orrs	r3, r2
 8009430:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009432:	2200      	movs	r2, #0
 8009434:	2181      	movs	r1, #129	; 0x81
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 fef4 	bl	800b224 <VL53L0X_WrByte>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009444:	4313      	orrs	r3, r2
 8009446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800944a:	2206      	movs	r2, #6
 800944c:	21ff      	movs	r1, #255	; 0xff
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 fee8 	bl	800b224 <VL53L0X_WrByte>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945c:	4313      	orrs	r3, r2
 800945e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009462:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009466:	461a      	mov	r2, r3
 8009468:	2183      	movs	r1, #131	; 0x83
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 ff5c 	bl	800b328 <VL53L0X_RdByte>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009478:	4313      	orrs	r3, r2
 800947a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800947e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009482:	f023 0304 	bic.w	r3, r3, #4
 8009486:	b2db      	uxtb	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	2183      	movs	r1, #131	; 0x83
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fec9 	bl	800b224 <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800949a:	4313      	orrs	r3, r2
 800949c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094a0:	2201      	movs	r2, #1
 80094a2:	21ff      	movs	r1, #255	; 0xff
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 febd 	bl	800b224 <VL53L0X_WrByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80094b8:	2201      	movs	r2, #1
 80094ba:	2100      	movs	r1, #0
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 feb1 	bl	800b224 <VL53L0X_WrByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094d0:	2200      	movs	r2, #0
 80094d2:	21ff      	movs	r1, #255	; 0xff
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 fea5 	bl	800b224 <VL53L0X_WrByte>
 80094da:	4603      	mov	r3, r0
 80094dc:	461a      	mov	r2, r3
 80094de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80094e8:	2200      	movs	r2, #0
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 fe99 	bl	800b224 <VL53L0X_WrByte>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009500:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 808f 	bne.w	8009628 <VL53L0X_get_info_from_device+0x98e>
 800950a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800950e:	2b07      	cmp	r3, #7
 8009510:	f000 808a 	beq.w	8009628 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d024      	beq.n	8009568 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800951e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009522:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009526:	2b00      	cmp	r3, #0
 8009528:	d11e      	bne.n	8009568 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009530:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800953a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800953e:	2300      	movs	r3, #0
 8009540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009542:	e00e      	b.n	8009562 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009544:	f107 0208 	add.w	r2, r7, #8
 8009548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954a:	4413      	add	r3, r2
 800954c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009552:	4413      	add	r3, r2
 8009554:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009558:	460a      	mov	r2, r1
 800955a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800955c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955e:	3301      	adds	r3, #1
 8009560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	2b05      	cmp	r3, #5
 8009566:	dded      	ble.n	8009544 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d018      	beq.n	80095a4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009572:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009576:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800957a:	2b00      	cmp	r3, #0
 800957c:	d112      	bne.n	80095a4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800957e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009588:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	33f3      	adds	r3, #243	; 0xf3
 8009596:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	4619      	mov	r1, r3
 800959e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095a0:	f002 fe12 	bl	800c1c8 <strcpy>

		}

		if (((option & 4) == 4) &&
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	f003 0304 	and.w	r3, r3, #4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d030      	beq.n	8009610 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80095ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095b2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d12a      	bne.n	8009610 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80095ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095cc:	025b      	lsls	r3, r3, #9
 80095ce:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80095de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80095e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80095ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095f2:	fb02 f303 	mul.w	r3, r2, r3
 80095f6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80095f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80095fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009600:	425b      	negs	r3, r3
 8009602:	b29b      	uxth	r3, r3
 8009604:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009608:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009610:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	4313      	orrs	r3, r2
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800961e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009628:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800962c:	4618      	mov	r0, r3
 800962e:	3760      	adds	r7, #96	; 0x60
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009634:	b490      	push	{r4, r7}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009640:	f240 6377 	movw	r3, #1655	; 0x677
 8009644:	f04f 0400 	mov.w	r4, #0
 8009648:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800964c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009650:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009662:	68bb      	ldr	r3, [r7, #8]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bc90      	pop	{r4, r7}
 800966c:	4770      	bx	lr

0800966e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800966e:	b480      	push	{r7}
 8009670:	b087      	sub	sp, #28
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d017      	beq.n	80096b8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3b01      	subs	r3, #1
 800968c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800968e:	e005      	b.n	800969c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009696:	89fb      	ldrh	r3, [r7, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f4      	bne.n	8009690 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80096a6:	89fb      	ldrh	r3, [r7, #14]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80096b4:	4413      	add	r3, r2
 80096b6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80096b8:	8afb      	ldrh	r3, [r7, #22]

}
 80096ba:	4618      	mov	r0, r3
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b085      	sub	sp, #20
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	4603      	mov	r3, r0
 80096ce:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80096d8:	88fa      	ldrh	r2, [r7, #6]
 80096da:	0a12      	lsrs	r2, r2, #8
 80096dc:	b292      	uxth	r2, r2
 80096de:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80096e4:	68fb      	ldr	r3, [r7, #12]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	4619      	mov	r1, r3
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff ff92 	bl	8009634 <VL53L0X_calc_macro_period_ps>
 8009710:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009718:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <VL53L0X_calc_timeout_mclks+0x50>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	099b      	lsrs	r3, r3, #6
 8009720:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009728:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	085b      	lsrs	r3, r3, #1
 8009730:	441a      	add	r2, r3
	timeout_period_mclks =
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	fbb2 f3f3 	udiv	r3, r2, r3
 8009738:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800973a:	69fb      	ldr	r3, [r7, #28]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	10624dd3 	.word	0x10624dd3

08009748 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
 8009754:	4613      	mov	r3, r2
 8009756:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800975c:	787b      	ldrb	r3, [r7, #1]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff67 	bl	8009634 <VL53L0X_calc_macro_period_ps>
 8009766:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800976e:	4a0a      	ldr	r2, [pc, #40]	; (8009798 <VL53L0X_calc_timeout_us+0x50>)
 8009770:	fba2 2303 	umull	r2, r3, r2, r3
 8009774:	099b      	lsrs	r3, r3, #6
 8009776:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009778:	887b      	ldrh	r3, [r7, #2]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	fb02 f303 	mul.w	r3, r2, r3
 8009780:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009784:	4a04      	ldr	r2, [pc, #16]	; (8009798 <VL53L0X_calc_timeout_us+0x50>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	099b      	lsrs	r3, r3, #6
 800978c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800978e:	697b      	ldr	r3, [r7, #20]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	10624dd3 	.word	0x10624dd3

0800979c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08c      	sub	sp, #48	; 0x30
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	460b      	mov	r3, r1
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <get_sequence_step_timeout+0x38>
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d002      	beq.n	80097d4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d128      	bne.n	8009826 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80097d8:	461a      	mov	r2, r3
 80097da:	2100      	movs	r1, #0
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7fd fa7d 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80097e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d109      	bne.n	8009804 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80097f0:	f107 0320 	add.w	r3, r7, #32
 80097f4:	461a      	mov	r2, r3
 80097f6:	2146      	movs	r1, #70	; 0x46
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f001 fd95 	bl	800b328 <VL53L0X_RdByte>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009808:	b29b      	uxth	r3, r3
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff ff5b 	bl	80096c6 <VL53L0X_decode_timeout>
 8009810:	4603      	mov	r3, r0
 8009812:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009814:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff ff93 	bl	8009748 <VL53L0X_calc_timeout_us>
 8009822:	62b8      	str	r0, [r7, #40]	; 0x28
 8009824:	e092      	b.n	800994c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d135      	bne.n	8009898 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800982c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009830:	461a      	mov	r2, r3
 8009832:	2100      	movs	r1, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7fd fa51 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 8081 	bne.w	800994c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800984a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800984e:	461a      	mov	r2, r3
 8009850:	2100      	movs	r1, #0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7fd fa42 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800985e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009866:	f107 031e 	add.w	r3, r7, #30
 800986a:	461a      	mov	r2, r3
 800986c:	2151      	movs	r1, #81	; 0x51
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f001 fd84 	bl	800b37c <VL53L0X_RdWord>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800987a:	8bfb      	ldrh	r3, [r7, #30]
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ff22 	bl	80096c6 <VL53L0X_decode_timeout>
 8009882:	4603      	mov	r3, r0
 8009884:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009886:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800988a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800988c:	4619      	mov	r1, r3
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff ff5a 	bl	8009748 <VL53L0X_calc_timeout_us>
 8009894:	62b8      	str	r0, [r7, #40]	; 0x28
 8009896:	e059      	b.n	800994c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d156      	bne.n	800994c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800989e:	f107 0314 	add.w	r3, r7, #20
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7fd fb25 	bl	8006ef4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01d      	beq.n	80098f0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80098b8:	461a      	mov	r2, r3
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7fd fa0d 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80098c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80098d0:	f107 031e 	add.w	r3, r7, #30
 80098d4:	461a      	mov	r2, r3
 80098d6:	2151      	movs	r1, #81	; 0x51
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f001 fd4f 	bl	800b37c <VL53L0X_RdWord>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80098e4:	8bfb      	ldrh	r3, [r7, #30]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff feed 	bl	80096c6 <VL53L0X_decode_timeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80098f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80098fc:	461a      	mov	r2, r3
 80098fe:	2101      	movs	r1, #1
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7fd f9eb 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800990c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10f      	bne.n	8009934 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009914:	f107 031c 	add.w	r3, r7, #28
 8009918:	461a      	mov	r2, r3
 800991a:	2171      	movs	r1, #113	; 0x71
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f001 fd2d 	bl	800b37c <VL53L0X_RdWord>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009928:	8bbb      	ldrh	r3, [r7, #28]
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff fecb 	bl	80096c6 <VL53L0X_decode_timeout>
 8009930:	4603      	mov	r3, r0
 8009932:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009936:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800993c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009942:	4619      	mov	r1, r3
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff feff 	bl	8009748 <VL53L0X_calc_timeout_us>
 800994a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009950:	601a      	str	r2, [r3, #0]

	return Status;
 8009952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009956:	4618      	mov	r0, r3
 8009958:	3730      	adds	r7, #48	; 0x30
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b08a      	sub	sp, #40	; 0x28
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	460b      	mov	r3, r1
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <set_sequence_step_timeout+0x26>
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d002      	beq.n	8009984 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	2b02      	cmp	r3, #2
 8009982:	d138      	bne.n	80099f6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009984:	f107 031b 	add.w	r3, r7, #27
 8009988:	461a      	mov	r2, r3
 800998a:	2100      	movs	r1, #0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fd f9a5 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009992:	4603      	mov	r3, r0
 8009994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800999c:	2b00      	cmp	r3, #0
 800999e:	d11a      	bne.n	80099d6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80099a0:	7efb      	ldrb	r3, [r7, #27]
 80099a2:	461a      	mov	r2, r3
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff fea4 	bl	80096f4 <VL53L0X_calc_timeout_mclks>
 80099ac:	4603      	mov	r3, r0
 80099ae:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80099b0:	8bbb      	ldrh	r3, [r7, #28]
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d903      	bls.n	80099c0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80099b8:	23ff      	movs	r3, #255	; 0xff
 80099ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099be:	e004      	b.n	80099ca <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80099c0:	8bbb      	ldrh	r3, [r7, #28]
 80099c2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80099c4:	3b01      	subs	r3, #1
 80099c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80099ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80099d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 80ab 	bne.w	8009b36 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80099e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099e4:	461a      	mov	r2, r3
 80099e6:	2146      	movs	r1, #70	; 0x46
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f001 fc1b 	bl	800b224 <VL53L0X_WrByte>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80099f4:	e09f      	b.n	8009b36 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d135      	bne.n	8009a68 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80099fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d11b      	bne.n	8009a3c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a04:	f107 031b 	add.w	r3, r7, #27
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7fd f965 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009a18:	7efb      	ldrb	r3, [r7, #27]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff fe68 	bl	80096f4 <VL53L0X_calc_timeout_mclks>
 8009a24:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009a26:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fe1f 	bl	800966e <VL53L0X_encode_timeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a34:	8b3a      	ldrh	r2, [r7, #24]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009a44:	8b3b      	ldrh	r3, [r7, #24]
 8009a46:	461a      	mov	r2, r3
 8009a48:	2151      	movs	r1, #81	; 0x51
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f001 fc0e 	bl	800b26c <VL53L0X_WrWord>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d16b      	bne.n	8009b36 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009a66:	e066      	b.n	8009b36 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d160      	bne.n	8009b30 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009a6e:	f107 0310 	add.w	r3, r7, #16
 8009a72:	4619      	mov	r1, r3
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7fd fa3d 	bl	8006ef4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009a7e:	7cfb      	ldrb	r3, [r7, #19]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01d      	beq.n	8009ac0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a84:	f107 031b 	add.w	r3, r7, #27
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7fd f925 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10f      	bne.n	8009ac0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009aa0:	f107 0318 	add.w	r3, r7, #24
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	2151      	movs	r1, #81	; 0x51
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f001 fc67 	bl	800b37c <VL53L0X_RdWord>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009ab4:	8b3b      	ldrh	r3, [r7, #24]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fe05 	bl	80096c6 <VL53L0X_decode_timeout>
 8009abc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009abe:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ac8:	f107 031b 	add.w	r3, r7, #27
 8009acc:	461a      	mov	r2, r3
 8009ace:	2101      	movs	r1, #1
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7fd f903 	bl	8006cdc <VL53L0X_GetVcselPulsePeriod>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d128      	bne.n	8009b36 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009ae4:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fe02 	bl	80096f4 <VL53L0X_calc_timeout_mclks>
 8009af0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009af4:	6a3a      	ldr	r2, [r7, #32]
 8009af6:	4413      	add	r3, r2
 8009af8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8009afa:	6a38      	ldr	r0, [r7, #32]
 8009afc:	f7ff fdb7 	bl	800966e <VL53L0X_encode_timeout>
 8009b00:	4603      	mov	r3, r0
 8009b02:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8009b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d108      	bne.n	8009b1e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009b0c:	8bfb      	ldrh	r3, [r7, #30]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2171      	movs	r1, #113	; 0x71
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f001 fbaa 	bl	800b26c <VL53L0X_WrWord>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009b2e:	e002      	b.n	8009b36 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b30:	23fc      	movs	r3, #252	; 0xfc
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3728      	adds	r7, #40	; 0x28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b08a      	sub	sp, #40	; 0x28
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	70fb      	strb	r3, [r7, #3]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009b58:	230c      	movs	r3, #12
 8009b5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009b5e:	2312      	movs	r3, #18
 8009b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009b6a:	230e      	movs	r3, #14
 8009b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009b74:	78bb      	ldrb	r3, [r7, #2]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b80:	23fc      	movs	r3, #252	; 0xfc
 8009b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b86:	e020      	b.n	8009bca <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10d      	bne.n	8009baa <VL53L0X_set_vcsel_pulse_period+0x68>
 8009b8e:	78ba      	ldrb	r2, [r7, #2]
 8009b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d304      	bcc.n	8009ba2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009b98:	78ba      	ldrb	r2, [r7, #2]
 8009b9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d903      	bls.n	8009baa <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ba2:	23fc      	movs	r3, #252	; 0xfc
 8009ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ba8:	e00f      	b.n	8009bca <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009baa:	78fb      	ldrb	r3, [r7, #3]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d10c      	bne.n	8009bca <VL53L0X_set_vcsel_pulse_period+0x88>
 8009bb0:	78ba      	ldrb	r2, [r7, #2]
 8009bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d304      	bcc.n	8009bc4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009bba:	78ba      	ldrb	r2, [r7, #2]
 8009bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d902      	bls.n	8009bca <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bc4:	23fc      	movs	r3, #252	; 0xfc
 8009bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009bca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009bd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd6:	e239      	b.n	800a04c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d150      	bne.n	8009c80 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009bde:	78bb      	ldrb	r3, [r7, #2]
 8009be0:	2b0c      	cmp	r3, #12
 8009be2:	d110      	bne.n	8009c06 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009be4:	2218      	movs	r2, #24
 8009be6:	2157      	movs	r1, #87	; 0x57
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 fb1b 	bl	800b224 <VL53L0X_WrByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009bf4:	2208      	movs	r2, #8
 8009bf6:	2156      	movs	r1, #86	; 0x56
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fb13 	bl	800b224 <VL53L0X_WrByte>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c04:	e17f      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009c06:	78bb      	ldrb	r3, [r7, #2]
 8009c08:	2b0e      	cmp	r3, #14
 8009c0a:	d110      	bne.n	8009c2e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009c0c:	2230      	movs	r2, #48	; 0x30
 8009c0e:	2157      	movs	r1, #87	; 0x57
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 fb07 	bl	800b224 <VL53L0X_WrByte>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	2156      	movs	r1, #86	; 0x56
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 faff 	bl	800b224 <VL53L0X_WrByte>
 8009c26:	4603      	mov	r3, r0
 8009c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c2c:	e16b      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009c2e:	78bb      	ldrb	r3, [r7, #2]
 8009c30:	2b10      	cmp	r3, #16
 8009c32:	d110      	bne.n	8009c56 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009c34:	2240      	movs	r2, #64	; 0x40
 8009c36:	2157      	movs	r1, #87	; 0x57
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 faf3 	bl	800b224 <VL53L0X_WrByte>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009c44:	2208      	movs	r2, #8
 8009c46:	2156      	movs	r1, #86	; 0x56
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 faeb 	bl	800b224 <VL53L0X_WrByte>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c54:	e157      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009c56:	78bb      	ldrb	r3, [r7, #2]
 8009c58:	2b12      	cmp	r3, #18
 8009c5a:	f040 8154 	bne.w	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009c5e:	2250      	movs	r2, #80	; 0x50
 8009c60:	2157      	movs	r1, #87	; 0x57
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fade 	bl	800b224 <VL53L0X_WrByte>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009c6e:	2208      	movs	r2, #8
 8009c70:	2156      	movs	r1, #86	; 0x56
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f001 fad6 	bl	800b224 <VL53L0X_WrByte>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c7e:	e142      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	f040 813f 	bne.w	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009c88:	78bb      	ldrb	r3, [r7, #2]
 8009c8a:	2b08      	cmp	r3, #8
 8009c8c:	d14c      	bne.n	8009d28 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009c8e:	2210      	movs	r2, #16
 8009c90:	2148      	movs	r1, #72	; 0x48
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 fac6 	bl	800b224 <VL53L0X_WrByte>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009c9e:	2208      	movs	r2, #8
 8009ca0:	2147      	movs	r1, #71	; 0x47
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fabe 	bl	800b224 <VL53L0X_WrByte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009cae:	2202      	movs	r2, #2
 8009cb0:	2132      	movs	r1, #50	; 0x32
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fab6 	bl	800b224 <VL53L0X_WrByte>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009cc6:	220c      	movs	r2, #12
 8009cc8:	2130      	movs	r1, #48	; 0x30
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 faaa 	bl	800b224 <VL53L0X_WrByte>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009cde:	2201      	movs	r2, #1
 8009ce0:	21ff      	movs	r1, #255	; 0xff
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fa9e 	bl	800b224 <VL53L0X_WrByte>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009cf6:	2230      	movs	r2, #48	; 0x30
 8009cf8:	2130      	movs	r1, #48	; 0x30
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 fa92 	bl	800b224 <VL53L0X_WrByte>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009d0e:	2200      	movs	r2, #0
 8009d10:	21ff      	movs	r1, #255	; 0xff
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 fa86 	bl	800b224 <VL53L0X_WrByte>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d26:	e0ee      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009d28:	78bb      	ldrb	r3, [r7, #2]
 8009d2a:	2b0a      	cmp	r3, #10
 8009d2c:	d14c      	bne.n	8009dc8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009d2e:	2228      	movs	r2, #40	; 0x28
 8009d30:	2148      	movs	r1, #72	; 0x48
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fa76 	bl	800b224 <VL53L0X_WrByte>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009d3e:	2208      	movs	r2, #8
 8009d40:	2147      	movs	r1, #71	; 0x47
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 fa6e 	bl	800b224 <VL53L0X_WrByte>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009d4e:	2203      	movs	r2, #3
 8009d50:	2132      	movs	r1, #50	; 0x32
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 fa66 	bl	800b224 <VL53L0X_WrByte>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d60:	4313      	orrs	r3, r2
 8009d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009d66:	2209      	movs	r2, #9
 8009d68:	2130      	movs	r1, #48	; 0x30
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fa5a 	bl	800b224 <VL53L0X_WrByte>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009d7e:	2201      	movs	r2, #1
 8009d80:	21ff      	movs	r1, #255	; 0xff
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 fa4e 	bl	800b224 <VL53L0X_WrByte>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d90:	4313      	orrs	r3, r2
 8009d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009d96:	2220      	movs	r2, #32
 8009d98:	2130      	movs	r1, #48	; 0x30
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fa42 	bl	800b224 <VL53L0X_WrByte>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009dae:	2200      	movs	r2, #0
 8009db0:	21ff      	movs	r1, #255	; 0xff
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 fa36 	bl	800b224 <VL53L0X_WrByte>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dc6:	e09e      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009dc8:	78bb      	ldrb	r3, [r7, #2]
 8009dca:	2b0c      	cmp	r3, #12
 8009dcc:	d14c      	bne.n	8009e68 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009dce:	2238      	movs	r2, #56	; 0x38
 8009dd0:	2148      	movs	r1, #72	; 0x48
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fa26 	bl	800b224 <VL53L0X_WrByte>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009dde:	2208      	movs	r2, #8
 8009de0:	2147      	movs	r1, #71	; 0x47
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 fa1e 	bl	800b224 <VL53L0X_WrByte>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009dee:	2203      	movs	r2, #3
 8009df0:	2132      	movs	r1, #50	; 0x32
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 fa16 	bl	800b224 <VL53L0X_WrByte>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e00:	4313      	orrs	r3, r2
 8009e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009e06:	2208      	movs	r2, #8
 8009e08:	2130      	movs	r1, #48	; 0x30
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fa0a 	bl	800b224 <VL53L0X_WrByte>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009e1e:	2201      	movs	r2, #1
 8009e20:	21ff      	movs	r1, #255	; 0xff
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 f9fe 	bl	800b224 <VL53L0X_WrByte>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e30:	4313      	orrs	r3, r2
 8009e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009e36:	2220      	movs	r2, #32
 8009e38:	2130      	movs	r1, #48	; 0x30
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 f9f2 	bl	800b224 <VL53L0X_WrByte>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009e4e:	2200      	movs	r2, #0
 8009e50:	21ff      	movs	r1, #255	; 0xff
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 f9e6 	bl	800b224 <VL53L0X_WrByte>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e60:	4313      	orrs	r3, r2
 8009e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e66:	e04e      	b.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009e68:	78bb      	ldrb	r3, [r7, #2]
 8009e6a:	2b0e      	cmp	r3, #14
 8009e6c:	d14b      	bne.n	8009f06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009e6e:	2248      	movs	r2, #72	; 0x48
 8009e70:	2148      	movs	r1, #72	; 0x48
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 f9d6 	bl	800b224 <VL53L0X_WrByte>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009e7e:	2208      	movs	r2, #8
 8009e80:	2147      	movs	r1, #71	; 0x47
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 f9ce 	bl	800b224 <VL53L0X_WrByte>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009e8e:	2203      	movs	r2, #3
 8009e90:	2132      	movs	r1, #50	; 0x32
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 f9c6 	bl	800b224 <VL53L0X_WrByte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009ea6:	2207      	movs	r2, #7
 8009ea8:	2130      	movs	r1, #48	; 0x30
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f9ba 	bl	800b224 <VL53L0X_WrByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	21ff      	movs	r1, #255	; 0xff
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f9ae 	bl	800b224 <VL53L0X_WrByte>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	2130      	movs	r1, #48	; 0x30
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 f9a2 	bl	800b224 <VL53L0X_WrByte>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009eee:	2200      	movs	r2, #0
 8009ef0:	21ff      	movs	r1, #255	; 0xff
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 f996 	bl	800b224 <VL53L0X_WrByte>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f00:	4313      	orrs	r3, r2
 8009f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009f06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d17f      	bne.n	800a00e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009f0e:	78bb      	ldrb	r3, [r7, #2]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fe38 	bl	8008b86 <VL53L0X_encode_vcsel_period>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d045      	beq.n	8009fb2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009f26:	e06e      	b.n	800a006 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2103      	movs	r1, #3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fc33 	bl	800979c <get_sequence_step_timeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d109      	bne.n	8009f58 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009f44:	f107 0310 	add.w	r3, r7, #16
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fc25 	bl	800979c <get_sequence_step_timeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f64:	461a      	mov	r2, r3
 8009f66:	2150      	movs	r1, #80	; 0x50
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f95b 	bl	800b224 <VL53L0X_WrByte>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d108      	bne.n	8009f8e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	2103      	movs	r1, #3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff fceb 	bl	800995e <set_sequence_step_timeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009f8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d108      	bne.n	8009fa8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2102      	movs	r1, #2
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fcde 	bl	800995e <set_sequence_step_timeout>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	78ba      	ldrb	r2, [r7, #2]
 8009fac:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009fb0:	e02e      	b.n	800a010 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009fb2:	f107 0318 	add.w	r3, r7, #24
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2104      	movs	r1, #4
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff fbee 	bl	800979c <get_sequence_step_timeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009fc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009fce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2170      	movs	r1, #112	; 0x70
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 f924 	bl	800b224 <VL53L0X_WrByte>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009fe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d108      	bne.n	8009ffc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	461a      	mov	r2, r3
 8009fee:	2104      	movs	r1, #4
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff fcb4 	bl	800995e <set_sequence_step_timeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	78ba      	ldrb	r2, [r7, #2]
 800a000:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a004:	e004      	b.n	800a010 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a006:	23fc      	movs	r3, #252	; 0xfc
 800a008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a00c:	e000      	b.n	800a010 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a00e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a01e:	69f9      	ldr	r1, [r7, #28]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fc fe1d 	bl	8006c60 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a026:	4603      	mov	r3, r0
 800a028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a02c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a030:	2b00      	cmp	r3, #0
 800a032:	d109      	bne.n	800a048 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a034:	f107 010f 	add.w	r1, r7, #15
 800a038:	2301      	movs	r3, #1
 800a03a:	2200      	movs	r2, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7fe fcbd 	bl	80089bc <VL53L0X_perform_phase_calibration>
 800a042:	4603      	mov	r3, r0
 800a044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3728      	adds	r7, #40	; 0x28
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	460b      	mov	r3, r1
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d00a      	beq.n	800a086 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a070:	e013      	b.n	800a09a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a072:	f107 0316 	add.w	r3, r7, #22
 800a076:	461a      	mov	r2, r3
 800a078:	2150      	movs	r1, #80	; 0x50
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f001 f954 	bl	800b328 <VL53L0X_RdByte>
 800a080:	4603      	mov	r3, r0
 800a082:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a084:	e00b      	b.n	800a09e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a086:	f107 0316 	add.w	r3, r7, #22
 800a08a:	461a      	mov	r2, r3
 800a08c:	2170      	movs	r1, #112	; 0x70
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f001 f94a 	bl	800b328 <VL53L0X_RdByte>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a098:	e001      	b.n	800a09e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a09a:	23fc      	movs	r3, #252	; 0xfc
 800a09c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a0a6:	7dbb      	ldrb	r3, [r7, #22]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fd59 	bl	8008b60 <VL53L0X_decode_vcsel_period>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	701a      	strb	r2, [r3, #0]

	return Status;
 800a0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b092      	sub	sp, #72	; 0x48
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a0d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a0d6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a0d8:	f240 7376 	movw	r3, #1910	; 0x776
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a0de:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a0e2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a0e4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a0ea:	f240 234e 	movw	r3, #590	; 0x24e
 800a0ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a0f0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a0f6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a0fc:	f240 2326 	movw	r3, #550	; 0x226
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a106:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a10a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	429a      	cmp	r2, r3
 800a116:	d205      	bcs.n	800a124 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a118:	23fc      	movs	r3, #252	; 0xfc
 800a11a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a11e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a122:	e0aa      	b.n	800a27a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a130:	f107 0314 	add.w	r3, r7, #20
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7fc fedc 	bl	8006ef4 <VL53L0X_GetSequenceStepEnables>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a142:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a146:	2b00      	cmp	r3, #0
 800a148:	d15b      	bne.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a14a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a150:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a156:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d052      	beq.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a15c:	f107 0310 	add.w	r3, r7, #16
 800a160:	461a      	mov	r2, r3
 800a162:	2102      	movs	r1, #2
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff fb19 	bl	800979c <get_sequence_step_timeout>
 800a16a:	4603      	mov	r3, r0
 800a16c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a170:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a178:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a17c:	e07d      	b.n	800a27a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a17e:	7d3b      	ldrb	r3, [r7, #20]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00f      	beq.n	800a1a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a184:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a188:	4413      	add	r3, r2
 800a18a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a190:	429a      	cmp	r2, r3
 800a192:	d204      	bcs.n	800a19e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	643b      	str	r3, [r7, #64]	; 0x40
 800a19c:	e002      	b.n	800a1a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a19e:	23fc      	movs	r3, #252	; 0xfc
 800a1a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a1a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a1ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a1b0:	e063      	b.n	800a27a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a1b2:	7dbb      	ldrb	r3, [r7, #22]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d011      	beq.n	800a1dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	4413      	add	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d204      	bcs.n	800a1d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a1ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a1d2:	e016      	b.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1d4:	23fc      	movs	r3, #252	; 0xfc
 800a1d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a1da:	e012      	b.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a1dc:	7d7b      	ldrb	r3, [r7, #21]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00f      	beq.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1e6:	4413      	add	r3, r2
 800a1e8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d204      	bcs.n	800a1fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a1f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	643b      	str	r3, [r7, #64]	; 0x40
 800a1fa:	e002      	b.n	800a202 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1fc:	23fc      	movs	r3, #252	; 0xfc
 800a1fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a202:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a20a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a20e:	e034      	b.n	800a27a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d019      	beq.n	800a24a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a216:	f107 030c 	add.w	r3, r7, #12
 800a21a:	461a      	mov	r2, r3
 800a21c:	2103      	movs	r1, #3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fabc 	bl	800979c <get_sequence_step_timeout>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22e:	4413      	add	r3, r2
 800a230:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a236:	429a      	cmp	r2, r3
 800a238:	d204      	bcs.n	800a244 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a23a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	643b      	str	r3, [r7, #64]	; 0x40
 800a242:	e002      	b.n	800a24a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a244:	23fc      	movs	r3, #252	; 0xfc
 800a246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a24a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d111      	bne.n	800a276 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a252:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a262:	2104      	movs	r1, #4
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7ff fb7a 	bl	800995e <set_sequence_step_timeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a276:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3748      	adds	r7, #72	; 0x48
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b090      	sub	sp, #64	; 0x40
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a292:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a296:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a298:	f240 7376 	movw	r3, #1910	; 0x776
 800a29c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a29e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a2a2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a2a4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a2a8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a2aa:	f240 234e 	movw	r3, #590	; 0x24e
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a2b0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a2b6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a2bc:	f240 2326 	movw	r3, #550	; 0x226
 800a2c0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a2c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ca:	441a      	add	r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a2d0:	f107 0318 	add.w	r3, r7, #24
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7fc fe0c 	bl	8006ef4 <VL53L0X_GetSequenceStepEnables>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a2e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a2ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2ee:	e075      	b.n	800a3dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a2f0:	7e3b      	ldrb	r3, [r7, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a2f6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d102      	bne.n	800a302 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a2fc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d030      	beq.n	800a364 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a302:	f107 0310 	add.w	r3, r7, #16
 800a306:	461a      	mov	r2, r3
 800a308:	2102      	movs	r1, #2
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fa46 	bl	800979c <get_sequence_step_timeout>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a316:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d122      	bne.n	800a364 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a31e:	7e3b      	ldrb	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a328:	6939      	ldr	r1, [r7, #16]
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a32e:	441a      	add	r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a334:	7ebb      	ldrb	r3, [r7, #26]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a33e:	6939      	ldr	r1, [r7, #16]
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	440b      	add	r3, r1
 800a344:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a346:	441a      	add	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e00a      	b.n	800a364 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a34e:	7e7b      	ldrb	r3, [r7, #25]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a358:	6939      	ldr	r1, [r7, #16]
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a35e:	441a      	add	r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a364:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d114      	bne.n	800a396 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a36c:	7efb      	ldrb	r3, [r7, #27]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d011      	beq.n	800a396 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	461a      	mov	r2, r3
 800a378:	2103      	movs	r1, #3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7ff fa0e 	bl	800979c <get_sequence_step_timeout>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a390:	441a      	add	r2, r3
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a396:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d114      	bne.n	800a3c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a39e:	7f3b      	ldrb	r3, [r7, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d011      	beq.n	800a3c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2104      	movs	r1, #4
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff f9f5 	bl	800979c <get_sequence_step_timeout>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a3bc:	6979      	ldr	r1, [r7, #20]
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a3c2:	441a      	add	r2, r3
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3740      	adds	r7, #64	; 0x40
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a3f6:	e0c6      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	3301      	adds	r3, #1
 800a406:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a408:	7cfb      	ldrb	r3, [r7, #19]
 800a40a:	2bff      	cmp	r3, #255	; 0xff
 800a40c:	f040 808d 	bne.w	800a52a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4413      	add	r3, r2
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	747b      	strb	r3, [r7, #17]
			Index++;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	3301      	adds	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a420:	7c7b      	ldrb	r3, [r7, #17]
 800a422:	2b03      	cmp	r3, #3
 800a424:	d87e      	bhi.n	800a524 <VL53L0X_load_tuning_settings+0x140>
 800a426:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <VL53L0X_load_tuning_settings+0x48>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a477 	.word	0x0800a477
 800a434:	0800a4b1 	.word	0x0800a4b1
 800a438:	0800a4eb 	.word	0x0800a4eb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4413      	add	r3, r2
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	743b      	strb	r3, [r7, #16]
				Index++;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	3301      	adds	r3, #1
 800a44a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	3301      	adds	r3, #1
 800a45a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a45c:	7c3b      	ldrb	r3, [r7, #16]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	b29a      	uxth	r2, r3
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	b29b      	uxth	r3, r3
 800a468:	4413      	add	r3, r2
 800a46a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	89ba      	ldrh	r2, [r7, #12]
 800a470:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a474:	e087      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	4413      	add	r3, r2
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	743b      	strb	r3, [r7, #16]
				Index++;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	3301      	adds	r3, #1
 800a484:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3301      	adds	r3, #1
 800a494:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a496:	7c3b      	ldrb	r3, [r7, #16]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	89ba      	ldrh	r2, [r7, #12]
 800a4aa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a4ae:	e06a      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	743b      	strb	r3, [r7, #16]
				Index++;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a4d0:	7c3b      	ldrb	r3, [r7, #16]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	89ba      	ldrh	r2, [r7, #12]
 800a4e4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a4e8:	e04d      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	743b      	strb	r3, [r7, #16]
				Index++;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3301      	adds	r3, #1
 800a508:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a50a:	7c3b      	ldrb	r3, [r7, #16]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	b29a      	uxth	r2, r3
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	b29b      	uxth	r3, r3
 800a516:	4413      	add	r3, r2
 800a518:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	89ba      	ldrh	r2, [r7, #12]
 800a51e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a522:	e030      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a524:	23fc      	movs	r3, #252	; 0xfc
 800a526:	77fb      	strb	r3, [r7, #31]
 800a528:	e02d      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a52a:	7cfb      	ldrb	r3, [r7, #19]
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d828      	bhi.n	800a582 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4413      	add	r3, r2
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	3301      	adds	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a540:	2300      	movs	r3, #0
 800a542:	61bb      	str	r3, [r7, #24]
 800a544:	e00f      	b.n	800a566 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	4413      	add	r3, r2
 800a54c:	7819      	ldrb	r1, [r3, #0]
 800a54e:	f107 0208 	add.w	r2, r7, #8
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	4413      	add	r3, r2
 800a556:	460a      	mov	r2, r1
 800a558:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	3301      	adds	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	3301      	adds	r3, #1
 800a564:	61bb      	str	r3, [r7, #24]
 800a566:	7cfb      	ldrb	r3, [r7, #19]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	dbeb      	blt.n	800a546 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a56e:	7cfb      	ldrb	r3, [r7, #19]
 800a570:	f107 0208 	add.w	r2, r7, #8
 800a574:	7cb9      	ldrb	r1, [r7, #18]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fdf8 	bl	800b16c <VL53L0X_WriteMulti>
 800a57c:	4603      	mov	r3, r0
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e001      	b.n	800a586 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a582:	23fc      	movs	r3, #252	; 0xfc
 800a584:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	4413      	add	r3, r2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d004      	beq.n	800a59c <VL53L0X_load_tuning_settings+0x1b8>
 800a592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f43f af2e 	beq.w	800a3f8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a59c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a5be:	f107 0313 	add.w	r3, r7, #19
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7fc fd21 	bl	800700c <VL53L0X_GetXTalkCompensationEnable>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a5ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d111      	bne.n	800a5fa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a5d6:	7cfb      	ldrb	r3, [r7, #19]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00e      	beq.n	800a5fa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	8a9b      	ldrh	r3, [r3, #20]
 800a5e6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
 800a5ee:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	3380      	adds	r3, #128	; 0x80
 800a5f4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a5fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3720      	adds	r7, #32
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b086      	sub	sp, #24
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a61e:	f107 0310 	add.w	r3, r7, #16
 800a622:	461a      	mov	r2, r3
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff ffbe 	bl	800a5a8 <VL53L0X_get_total_xtalk_rate>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	441a      	add	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]

	return Status;
 800a644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b09a      	sub	sp, #104	; 0x68
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a65e:	2312      	movs	r3, #18
 800a660:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a662:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a666:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a668:	2342      	movs	r3, #66	; 0x42
 800a66a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a66c:	2306      	movs	r3, #6
 800a66e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a670:	2307      	movs	r3, #7
 800a672:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a674:	2300      	movs	r3, #0
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a688:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a68e:	fb02 f303 	mul.w	r3, r2, r3
 800a692:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a696:	3380      	adds	r3, #128	; 0x80
 800a698:	0a1b      	lsrs	r3, r3, #8
 800a69a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6a0:	fb02 f303 	mul.w	r3, r2, r3
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01b      	beq.n	800a6e8 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	029b      	lsls	r3, r3, #10
 800a6b4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6bc:	4413      	add	r3, r2
 800a6be:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a6c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a6ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	4413      	add	r3, r2
 800a6d2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6d8:	fb02 f303 	mul.w	r3, r2, r3
 800a6dc:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a6de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a6ec:	fb02 f303 	mul.w	r3, r2, r3
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a700:	fb02 f303 	mul.w	r3, r2, r3
 800a704:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a708:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a70c:	0c1b      	lsrs	r3, r3, #16
 800a70e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a712:	085a      	lsrs	r2, r3, #1
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	441a      	add	r2, r3
 800a718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a724:	fb02 f303 	mul.w	r3, r2, r3
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a730:	d302      	bcc.n	800a738 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800a732:	4b55      	ldr	r3, [pc, #340]	; (800a888 <VL53L0X_calc_dmax+0x238>)
 800a734:	663b      	str	r3, [r7, #96]	; 0x60
 800a736:	e016      	b.n	800a766 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73a:	085a      	lsrs	r2, r3, #1
 800a73c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a73e:	441a      	add	r2, r3
 800a740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a74a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a74c:	fb02 f303 	mul.w	r3, r2, r3
 800a750:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a754:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a758:	0c1b      	lsrs	r3, r3, #16
 800a75a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a75c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a75e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a768:	039b      	lsls	r3, r3, #14
 800a76a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a76e:	4a47      	ldr	r2, [pc, #284]	; (800a88c <VL53L0X_calc_dmax+0x23c>)
 800a770:	fba2 2303 	umull	r2, r3, r2, r3
 800a774:	099b      	lsrs	r3, r3, #6
 800a776:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77c:	fb02 f303 	mul.w	r3, r2, r3
 800a780:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a786:	fb02 f303 	mul.w	r3, r2, r3
 800a78a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	3308      	adds	r3, #8
 800a790:	091b      	lsrs	r3, r3, #4
 800a792:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79e:	4613      	mov	r3, r2
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	4413      	add	r3, r2
 800a7a4:	011b      	lsls	r3, r3, #4
 800a7a6:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a7ae:	0b9b      	lsrs	r3, r3, #14
 800a7b0:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a7b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7b6:	4413      	add	r3, r2
 800a7b8:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7bc:	085b      	lsrs	r3, r3, #1
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7cc:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	039b      	lsls	r3, r3, #14
 800a7d2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	4413      	add	r3, r2
 800a7dc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e6:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7ec:	fb02 f303 	mul.w	r3, r2, r3
 800a7f0:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7f8:	4a24      	ldr	r2, [pc, #144]	; (800a88c <VL53L0X_calc_dmax+0x23c>)
 800a7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fe:	099b      	lsrs	r3, r3, #6
 800a800:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a80e:	4a1f      	ldr	r2, [pc, #124]	; (800a88c <VL53L0X_calc_dmax+0x23c>)
 800a810:	fba2 2303 	umull	r2, r3, r2, r3
 800a814:	099b      	lsrs	r3, r3, #6
 800a816:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a81a:	3380      	adds	r3, #128	; 0x80
 800a81c:	0a1b      	lsrs	r3, r3, #8
 800a81e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d008      	beq.n	800a838 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	085a      	lsrs	r2, r3, #1
 800a82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82c:	441a      	add	r2, r3
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	fbb2 f3f3 	udiv	r3, r2, r3
 800a834:	65bb      	str	r3, [r7, #88]	; 0x58
 800a836:	e001      	b.n	800a83c <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a83c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a83e:	f7fe f9b5 	bl	8008bac <VL53L0X_isqrt>
 800a842:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d008      	beq.n	800a85c <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	085a      	lsrs	r2, r3, #1
 800a84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a850:	441a      	add	r2, r3
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	fbb2 f3f3 	udiv	r3, r2, r3
 800a858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a85a:	e001      	b.n	800a860 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a860:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a862:	f7fe f9a3 	bl	8008bac <VL53L0X_isqrt>
 800a866:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a872:	429a      	cmp	r2, r3
 800a874:	d902      	bls.n	800a87c <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800a876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a878:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a87a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a87c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a880:	4618      	mov	r0, r3
 800a882:	3768      	adds	r7, #104	; 0x68
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	fff00000 	.word	0xfff00000
 800a88c:	10624dd3 	.word	0x10624dd3

0800a890 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b0b4      	sub	sp, #208	; 0xd0
 800a894:	af04      	add	r7, sp, #16
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a89e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a8a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a8a6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a8aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a8ae:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a8b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a8b6:	f241 235c 	movw	r3, #4700	; 0x125c
 800a8ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a8be:	4b9e      	ldr	r3, [pc, #632]	; (800ab38 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a8c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a8c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a8c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a8ca:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a8ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a8d8:	4b98      	ldr	r3, [pc, #608]	; (800ab3c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a8da:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a8dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a8e2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a8e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a8e8:	f240 6377 	movw	r3, #1655	; 0x677
 800a8ec:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a902:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	461a      	mov	r2, r3
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff fe74 	bl	800a606 <VL53L0X_get_total_signal_rate>
 800a91e:	4603      	mov	r3, r0
 800a920:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a924:	f107 0314 	add.w	r3, r7, #20
 800a928:	461a      	mov	r2, r3
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff fe3b 	bl	800a5a8 <VL53L0X_get_total_xtalk_rate>
 800a932:	4603      	mov	r3, r0
 800a934:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a93e:	fb02 f303 	mul.w	r3, r2, r3
 800a942:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a946:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a94a:	0c1b      	lsrs	r3, r3, #16
 800a94c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a95c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a962:	429a      	cmp	r2, r3
 800a964:	d902      	bls.n	800a96c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a96c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a970:	2b00      	cmp	r3, #0
 800a972:	d168      	bne.n	800aa46 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a97a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a984:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a988:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a98c:	461a      	mov	r2, r3
 800a98e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7fe feae 	bl	80096f4 <VL53L0X_calc_timeout_mclks>
 800a998:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a9aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a9ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7fe fe9b 	bl	80096f4 <VL53L0X_calc_timeout_mclks>
 800a9be:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a9c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d102      	bne.n	800a9d4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a9d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a9da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
 800a9e2:	02db      	lsls	r3, r3, #11
 800a9e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a9e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a9ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9f0:	4a53      	ldr	r2, [pc, #332]	; (800ab40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f6:	099b      	lsrs	r3, r3, #6
 800a9f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a9fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aa00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
 800aa06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800aa0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aa0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa12:	4a4b      	ldr	r2, [pc, #300]	; (800ab40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aa14:	fba2 2303 	umull	r2, r3, r2, r3
 800aa18:	099b      	lsrs	r3, r3, #6
 800aa1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3380      	adds	r3, #128	; 0x80
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aa2c:	fb02 f303 	mul.w	r3, r2, r3
 800aa30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800aa34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa38:	3380      	adds	r3, #128	; 0x80
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800aa46:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800aa4e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800aa52:	e165      	b.n	800ad20 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800aa54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10c      	bne.n	800aa74 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa60:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e153      	b.n	800ad1c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800aa74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800aa82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa86:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800aa88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8a:	041a      	lsls	r2, r3, #16
 800aa8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800aa96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d902      	bls.n	800aaa6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800aaa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800aaa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aaaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aaae:	fb02 f303 	mul.w	r3, r2, r3
 800aab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800aab6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800aaba:	4613      	mov	r3, r2
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f872 	bl	8008bac <VL53L0X_isqrt>
 800aac8:	4603      	mov	r3, r0
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	891b      	ldrh	r3, [r3, #8]
 800aad2:	461a      	mov	r2, r3
 800aad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aad6:	fb02 f303 	mul.w	r3, r2, r3
 800aada:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800aadc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aade:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800aae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aae4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800aae6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800aae8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800aaec:	4a14      	ldr	r2, [pc, #80]	; (800ab40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aaee:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf2:	099b      	lsrs	r3, r3, #6
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800aaf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aafe:	4a10      	ldr	r2, [pc, #64]	; (800ab40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ab00:	fba2 2303 	umull	r2, r3, r2, r3
 800ab04:	099b      	lsrs	r3, r3, #6
 800ab06:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ab08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0a:	021b      	lsls	r3, r3, #8
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ab0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	425b      	neglt	r3, r3
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	7e1b      	ldrb	r3, [r3, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800ab2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab34:	e035      	b.n	800aba2 <VL53L0X_calc_sigma_estimate+0x312>
 800ab36:	bf00      	nop
 800ab38:	028f87ae 	.word	0x028f87ae
 800ab3c:	0006999a 	.word	0x0006999a
 800ab40:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ab44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ab58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab5c:	fb02 f303 	mul.w	r3, r2, r3
 800ab60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ab64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab6a:	4413      	add	r3, r2
 800ab6c:	0c1b      	lsrs	r3, r3, #16
 800ab6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ab72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab76:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ab7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ab7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ab88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab90:	fb02 f303 	mul.w	r3, r2, r3
 800ab94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ab98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab9c:	0b9b      	lsrs	r3, r3, #14
 800ab9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800aba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aba8:	fb02 f303 	mul.w	r3, r2, r3
 800abac:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abb4:	0c1b      	lsrs	r3, r3, #16
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abbc:	fb02 f303 	mul.w	r3, r2, r3
 800abc0:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800abc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abce:	0c1b      	lsrs	r3, r3, #16
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800abdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	4413      	add	r3, r2
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800abe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe6:	f7fd ffe1 	bl	8008bac <VL53L0X_isqrt>
 800abea:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	3332      	adds	r3, #50	; 0x32
 800abf6:	4a4c      	ldr	r2, [pc, #304]	; (800ad28 <VL53L0X_calc_sigma_estimate+0x498>)
 800abf8:	fba2 2303 	umull	r2, r3, r2, r3
 800abfc:	095a      	lsrs	r2, r3, #5
 800abfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ac08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac0c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ac10:	fb02 f303 	mul.w	r3, r2, r3
 800ac14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ac18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac1c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac20:	3308      	adds	r3, #8
 800ac22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800ac26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac2a:	4a40      	ldr	r2, [pc, #256]	; (800ad2c <VL53L0X_calc_sigma_estimate+0x49c>)
 800ac2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac30:	0b5b      	lsrs	r3, r3, #13
 800ac32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ac36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d902      	bls.n	800ac46 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ac40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ac46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ac54:	4a36      	ldr	r2, [pc, #216]	; (800ad30 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800ac56:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5a:	099b      	lsrs	r3, r3, #6
 800ac5c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ac62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac66:	441a      	add	r2, r3
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd ff9c 	bl	8008bac <VL53L0X_isqrt>
 800ac74:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac82:	4a2b      	ldr	r2, [pc, #172]	; (800ad30 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	099b      	lsrs	r3, r3, #6
 800ac8a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ac8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac94:	fb02 f303 	mul.w	r3, r2, r3
 800ac98:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800aca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	4413      	add	r3, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fd ff7e 	bl	8008bac <VL53L0X_isqrt>
 800acb0:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800acb8:	fb02 f303 	mul.w	r3, r2, r3
 800acbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800acc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <VL53L0X_calc_sigma_estimate+0x44a>
 800acc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <VL53L0X_calc_sigma_estimate+0x44a>
 800acce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800acd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d903      	bls.n	800ace2 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800acda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ace8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800acf4:	6939      	ldr	r1, [r7, #16]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	9303      	str	r3, [sp, #12]
 800acfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acfe:	9302      	str	r3, [sp, #8]
 800ad00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff fc9d 	bl	800a650 <VL53L0X_calc_dmax>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad1c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	37c0      	adds	r7, #192	; 0xc0
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	51eb851f 	.word	0x51eb851f
 800ad2c:	d1b71759 	.word	0xd1b71759
 800ad30:	10624dd3 	.word	0x10624dd3

0800ad34 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b090      	sub	sp, #64	; 0x40
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	607a      	str	r2, [r7, #4]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	460b      	mov	r3, r1
 800ad42:	72fb      	strb	r3, [r7, #11]
 800ad44:	4613      	mov	r3, r2
 800ad46:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	10db      	asrs	r3, r3, #3
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ad94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d017      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
 800ad9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ada0:	2b05      	cmp	r3, #5
 800ada2:	d013      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ada4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	d00f      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800adac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adb0:	2b0c      	cmp	r3, #12
 800adb2:	d00b      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800adb4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adb8:	2b0d      	cmp	r3, #13
 800adba:	d007      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800adbc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adc0:	2b0e      	cmp	r3, #14
 800adc2:	d003      	beq.n	800adcc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800adc4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adc8:	2b0f      	cmp	r3, #15
 800adca:	d103      	bne.n	800add4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800adcc:	2301      	movs	r3, #1
 800adce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800add2:	e002      	b.n	800adda <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800adda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ade2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ade6:	461a      	mov	r2, r3
 800ade8:	2100      	movs	r1, #0
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7fc f9e2 	bl	80071b4 <VL53L0X_GetLimitCheckEnable>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800adf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d02e      	beq.n	800ae5c <VL53L0X_get_pal_range_status+0x128>
 800adfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d12a      	bne.n	800ae5c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ae06:	f107 0310 	add.w	r3, r7, #16
 800ae0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ae0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff fd3d 	bl	800a890 <VL53L0X_calc_sigma_estimate>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ae1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae2a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ae2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d113      	bne.n	800ae5c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ae34:	f107 0320 	add.w	r3, r7, #32
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7fc fa3f 	bl	80072c0 <VL53L0X_GetLimitCheckValue>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d006      	beq.n	800ae5c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ae4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae50:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d902      	bls.n	800ae5c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ae5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ae64:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2102      	movs	r1, #2
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7fc f9a1 	bl	80071b4 <VL53L0X_GetLimitCheckEnable>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ae78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d044      	beq.n	800af0a <VL53L0X_get_pal_range_status+0x1d6>
 800ae80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d140      	bne.n	800af0a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ae88:	f107 031c 	add.w	r3, r7, #28
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	2102      	movs	r1, #2
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7fc fa15 	bl	80072c0 <VL53L0X_GetLimitCheckValue>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ae9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d107      	bne.n	800aeb4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aea4:	2201      	movs	r2, #1
 800aea6:	21ff      	movs	r1, #255	; 0xff
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f9bb 	bl	800b224 <VL53L0X_WrByte>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800aeb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800aebc:	f107 0316 	add.w	r3, r7, #22
 800aec0:	461a      	mov	r2, r3
 800aec2:	21b6      	movs	r1, #182	; 0xb6
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 fa59 	bl	800b37c <VL53L0X_RdWord>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800aed0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d107      	bne.n	800aee8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aed8:	2200      	movs	r2, #0
 800aeda:	21ff      	movs	r1, #255	; 0xff
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f9a1 	bl	800b224 <VL53L0X_WrByte>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800aee8:	8afb      	ldrh	r3, [r7, #22]
 800aeea:	025b      	lsls	r3, r3, #9
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800aefc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800aefe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af00:	429a      	cmp	r2, r3
 800af02:	d902      	bls.n	800af0a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800af04:	2301      	movs	r3, #1
 800af06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800af0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d109      	bne.n	800af26 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800af12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af16:	461a      	mov	r2, r3
 800af18:	2103      	movs	r1, #3
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7fc f94a 	bl	80071b4 <VL53L0X_GetLimitCheckEnable>
 800af20:	4603      	mov	r3, r0
 800af22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800af26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d023      	beq.n	800af76 <VL53L0X_get_pal_range_status+0x242>
 800af2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af32:	2b00      	cmp	r3, #0
 800af34:	d11f      	bne.n	800af76 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800af36:	893b      	ldrh	r3, [r7, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
 800af40:	e005      	b.n	800af4e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	021a      	lsls	r2, r3, #8
 800af46:	893b      	ldrh	r3, [r7, #8]
 800af48:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800af4e:	f107 0318 	add.w	r3, r7, #24
 800af52:	461a      	mov	r2, r3
 800af54:	2103      	movs	r1, #3
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7fc f9b2 	bl	80072c0 <VL53L0X_GetLimitCheckValue>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800af68:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800af6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d202      	bcs.n	800af76 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d14a      	bne.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800af7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800af82:	2b01      	cmp	r3, #1
 800af84:	d103      	bne.n	800af8e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800af86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af88:	22ff      	movs	r2, #255	; 0xff
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	e042      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800af8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af92:	2b01      	cmp	r3, #1
 800af94:	d007      	beq.n	800afa6 <VL53L0X_get_pal_range_status+0x272>
 800af96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d003      	beq.n	800afa6 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800af9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d103      	bne.n	800afae <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	2205      	movs	r2, #5
 800afaa:	701a      	strb	r2, [r3, #0]
 800afac:	e032      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800afae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afb2:	2b06      	cmp	r3, #6
 800afb4:	d003      	beq.n	800afbe <VL53L0X_get_pal_range_status+0x28a>
 800afb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afba:	2b09      	cmp	r3, #9
 800afbc:	d103      	bne.n	800afc6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800afbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afc0:	2204      	movs	r2, #4
 800afc2:	701a      	strb	r2, [r3, #0]
 800afc4:	e026      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800afc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d007      	beq.n	800afde <VL53L0X_get_pal_range_status+0x2aa>
 800afce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afd2:	2b0a      	cmp	r3, #10
 800afd4:	d003      	beq.n	800afde <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800afd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d103      	bne.n	800afe6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800afde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe0:	2203      	movs	r2, #3
 800afe2:	701a      	strb	r2, [r3, #0]
 800afe4:	e016      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800afe6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afea:	2b04      	cmp	r3, #4
 800afec:	d003      	beq.n	800aff6 <VL53L0X_get_pal_range_status+0x2c2>
 800afee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d103      	bne.n	800affe <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800aff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff8:	2202      	movs	r2, #2
 800affa:	701a      	strb	r2, [r3, #0]
 800affc:	e00a      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800affe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b002:	2b01      	cmp	r3, #1
 800b004:	d103      	bne.n	800b00e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b008:	2201      	movs	r2, #1
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	e002      	b.n	800b014 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b01e:	2200      	movs	r2, #0
 800b020:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b022:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b026:	461a      	mov	r2, r3
 800b028:	2101      	movs	r1, #1
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7fc f8c2 	bl	80071b4 <VL53L0X_GetLimitCheckEnable>
 800b030:	4603      	mov	r3, r0
 800b032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b036:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d14f      	bne.n	800b0de <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b03e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <VL53L0X_get_pal_range_status+0x31a>
 800b046:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d103      	bne.n	800b056 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b054:	e002      	b.n	800b05c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b062:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b066:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d003      	beq.n	800b076 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b06e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b072:	2b00      	cmp	r3, #0
 800b074:	d103      	bne.n	800b07e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07c:	e002      	b.n	800b084 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b08a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b08e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <VL53L0X_get_pal_range_status+0x36a>
 800b096:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d103      	bne.n	800b0a6 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a4:	e002      	b.n	800b0ac <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b0b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b0b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <VL53L0X_get_pal_range_status+0x392>
 800b0be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d103      	bne.n	800b0ce <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0cc:	e002      	b.n	800b0d4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b0da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3740      	adds	r7, #64	; 0x40
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b088      	sub	sp, #32
 800b0ee:	af02      	add	r7, sp, #8
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	330a      	adds	r3, #10
 800b0fa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b108:	b299      	uxth	r1, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4613      	mov	r3, r2
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	f7f7 fd45 	bl	8002ba4 <HAL_I2C_Master_Transmit>
 800b11a:	4603      	mov	r3, r0
 800b11c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b11e:	693b      	ldr	r3, [r7, #16]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	330a      	adds	r3, #10
 800b138:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b146:	f043 0301 	orr.w	r3, r3, #1
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	b299      	uxth	r1, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	b29a      	uxth	r2, r3
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	4613      	mov	r3, r2
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	f7f7 fe17 	bl	8002d8c <HAL_I2C_Master_Receive>
 800b15e:	4603      	mov	r3, r0
 800b160:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b162:	693b      	ldr	r3, [r7, #16]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	460b      	mov	r3, r1
 800b17a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2b3f      	cmp	r3, #63	; 0x3f
 800b184:	d902      	bls.n	800b18c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b186:	f06f 0303 	mvn.w	r3, #3
 800b18a:	e016      	b.n	800b1ba <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b18c:	4a0d      	ldr	r2, [pc, #52]	; (800b1c4 <VL53L0X_WriteMulti+0x58>)
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	480c      	ldr	r0, [pc, #48]	; (800b1c8 <VL53L0X_WriteMulti+0x5c>)
 800b198:	f000 f99e 	bl	800b4d8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	4908      	ldr	r1, [pc, #32]	; (800b1c4 <VL53L0X_WriteMulti+0x58>)
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff ffa0 	bl	800b0ea <_I2CWrite>
 800b1aa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1b2:	23ec      	movs	r3, #236	; 0xec
 800b1b4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b1b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000908 	.word	0x20000908
 800b1c8:	20000909 	.word	0x20000909

0800b1cc <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	607a      	str	r2, [r7, #4]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b1e0:	f107 030b 	add.w	r3, r7, #11
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff ff7e 	bl	800b0ea <_I2CWrite>
 800b1ee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1f6:	23ec      	movs	r3, #236	; 0xec
 800b1f8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1fa:	e00c      	b.n	800b216 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff ff91 	bl	800b128 <_I2CRead>
 800b206:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b20e:	23ec      	movs	r3, #236	; 0xec
 800b210:	75fb      	strb	r3, [r7, #23]
 800b212:	e000      	b.n	800b216 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b214:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
 800b230:	4613      	mov	r3, r2
 800b232:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b238:	4a0b      	ldr	r2, [pc, #44]	; (800b268 <VL53L0X_WrByte+0x44>)
 800b23a:	78fb      	ldrb	r3, [r7, #3]
 800b23c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b23e:	4a0a      	ldr	r2, [pc, #40]	; (800b268 <VL53L0X_WrByte+0x44>)
 800b240:	78bb      	ldrb	r3, [r7, #2]
 800b242:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b244:	2202      	movs	r2, #2
 800b246:	4908      	ldr	r1, [pc, #32]	; (800b268 <VL53L0X_WrByte+0x44>)
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ff4e 	bl	800b0ea <_I2CWrite>
 800b24e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b256:	23ec      	movs	r3, #236	; 0xec
 800b258:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000908 	.word	0x20000908

0800b26c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
 800b278:	4613      	mov	r3, r2
 800b27a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b280:	4a0e      	ldr	r2, [pc, #56]	; (800b2bc <VL53L0X_WrWord+0x50>)
 800b282:	78fb      	ldrb	r3, [r7, #3]
 800b284:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b286:	883b      	ldrh	r3, [r7, #0]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	4b0b      	ldr	r3, [pc, #44]	; (800b2bc <VL53L0X_WrWord+0x50>)
 800b290:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b292:	883b      	ldrh	r3, [r7, #0]
 800b294:	b2da      	uxtb	r2, r3
 800b296:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <VL53L0X_WrWord+0x50>)
 800b298:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b29a:	2203      	movs	r2, #3
 800b29c:	4907      	ldr	r1, [pc, #28]	; (800b2bc <VL53L0X_WrWord+0x50>)
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff ff23 	bl	800b0ea <_I2CWrite>
 800b2a4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b2ac:	23ec      	movs	r3, #236	; 0xec
 800b2ae:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20000908 	.word	0x20000908

0800b2c0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	70fb      	strb	r3, [r7, #3]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70bb      	strb	r3, [r7, #2]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b2de:	f107 020e 	add.w	r2, r7, #14
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f81e 	bl	800b328 <VL53L0X_RdByte>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d110      	bne.n	800b31a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b2f8:	7bba      	ldrb	r2, [r7, #14]
 800b2fa:	78bb      	ldrb	r3, [r7, #2]
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	787b      	ldrb	r3, [r7, #1]
 800b302:	4313      	orrs	r3, r2
 800b304:	b2db      	uxtb	r3, r3
 800b306:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b308:	7bba      	ldrb	r2, [r7, #14]
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff ff88 	bl	800b224 <VL53L0X_WrByte>
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
 800b318:	e000      	b.n	800b31c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b31a:	bf00      	nop
done:
    return Status;
 800b31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	460b      	mov	r3, r1
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
 800b338:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b33a:	f107 030b 	add.w	r3, r7, #11
 800b33e:	2201      	movs	r2, #1
 800b340:	4619      	mov	r1, r3
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff fed1 	bl	800b0ea <_I2CWrite>
 800b348:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b350:	23ec      	movs	r3, #236	; 0xec
 800b352:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b354:	e00c      	b.n	800b370 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b356:	2201      	movs	r2, #1
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fee4 	bl	800b128 <_I2CRead>
 800b360:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b368:	23ec      	movs	r3, #236	; 0xec
 800b36a:	75fb      	strb	r3, [r7, #23]
 800b36c:	e000      	b.n	800b370 <VL53L0X_RdByte+0x48>
    }
done:
 800b36e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	460b      	mov	r3, r1
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b38e:	f107 030b 	add.w	r3, r7, #11
 800b392:	2201      	movs	r2, #1
 800b394:	4619      	mov	r1, r3
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7ff fea7 	bl	800b0ea <_I2CWrite>
 800b39c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3a4:	23ec      	movs	r3, #236	; 0xec
 800b3a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b3a8:	e017      	b.n	800b3da <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	490e      	ldr	r1, [pc, #56]	; (800b3e8 <VL53L0X_RdWord+0x6c>)
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff feba 	bl	800b128 <_I2CRead>
 800b3b4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3bc:	23ec      	movs	r3, #236	; 0xec
 800b3be:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b3c0:	e00b      	b.n	800b3da <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b3c2:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <VL53L0X_RdWord+0x6c>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <VL53L0X_RdWord+0x6c>)
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4413      	add	r3, r2
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000908 	.word	0x20000908

0800b3ec <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b3fe:	f107 030b 	add.w	r3, r7, #11
 800b402:	2201      	movs	r2, #1
 800b404:	4619      	mov	r1, r3
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff fe6f 	bl	800b0ea <_I2CWrite>
 800b40c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b414:	23ec      	movs	r3, #236	; 0xec
 800b416:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b418:	e01b      	b.n	800b452 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b41a:	2204      	movs	r2, #4
 800b41c:	4910      	ldr	r1, [pc, #64]	; (800b460 <VL53L0X_RdDWord+0x74>)
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fe82 	bl	800b128 <_I2CRead>
 800b424:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b42c:	23ec      	movs	r3, #236	; 0xec
 800b42e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b430:	e00f      	b.n	800b452 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b432:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <VL53L0X_RdDWord+0x74>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	061a      	lsls	r2, r3, #24
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <VL53L0X_RdDWord+0x74>)
 800b43a:	785b      	ldrb	r3, [r3, #1]
 800b43c:	041b      	lsls	r3, r3, #16
 800b43e:	441a      	add	r2, r3
 800b440:	4b07      	ldr	r3, [pc, #28]	; (800b460 <VL53L0X_RdDWord+0x74>)
 800b442:	789b      	ldrb	r3, [r3, #2]
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	4413      	add	r3, r2
 800b448:	4a05      	ldr	r2, [pc, #20]	; (800b460 <VL53L0X_RdDWord+0x74>)
 800b44a:	78d2      	ldrb	r2, [r2, #3]
 800b44c:	441a      	add	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000908 	.word	0x20000908

0800b464 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b470:	2002      	movs	r0, #2
 800b472:	f7f6 fb11 	bl	8001a98 <HAL_Delay>
    return status;
 800b476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <__errno>:
 800b484:	4b01      	ldr	r3, [pc, #4]	; (800b48c <__errno+0x8>)
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	200002cc 	.word	0x200002cc

0800b490 <__libc_init_array>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	4e0d      	ldr	r6, [pc, #52]	; (800b4c8 <__libc_init_array+0x38>)
 800b494:	4c0d      	ldr	r4, [pc, #52]	; (800b4cc <__libc_init_array+0x3c>)
 800b496:	1ba4      	subs	r4, r4, r6
 800b498:	10a4      	asrs	r4, r4, #2
 800b49a:	2500      	movs	r5, #0
 800b49c:	42a5      	cmp	r5, r4
 800b49e:	d109      	bne.n	800b4b4 <__libc_init_array+0x24>
 800b4a0:	4e0b      	ldr	r6, [pc, #44]	; (800b4d0 <__libc_init_array+0x40>)
 800b4a2:	4c0c      	ldr	r4, [pc, #48]	; (800b4d4 <__libc_init_array+0x44>)
 800b4a4:	f003 fd60 	bl	800ef68 <_init>
 800b4a8:	1ba4      	subs	r4, r4, r6
 800b4aa:	10a4      	asrs	r4, r4, #2
 800b4ac:	2500      	movs	r5, #0
 800b4ae:	42a5      	cmp	r5, r4
 800b4b0:	d105      	bne.n	800b4be <__libc_init_array+0x2e>
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}
 800b4b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4b8:	4798      	blx	r3
 800b4ba:	3501      	adds	r5, #1
 800b4bc:	e7ee      	b.n	800b49c <__libc_init_array+0xc>
 800b4be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4c2:	4798      	blx	r3
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	e7f2      	b.n	800b4ae <__libc_init_array+0x1e>
 800b4c8:	0800f2c0 	.word	0x0800f2c0
 800b4cc:	0800f2c0 	.word	0x0800f2c0
 800b4d0:	0800f2c0 	.word	0x0800f2c0
 800b4d4:	0800f2c4 	.word	0x0800f2c4

0800b4d8 <memcpy>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	1e43      	subs	r3, r0, #1
 800b4dc:	440a      	add	r2, r1
 800b4de:	4291      	cmp	r1, r2
 800b4e0:	d100      	bne.n	800b4e4 <memcpy+0xc>
 800b4e2:	bd10      	pop	{r4, pc}
 800b4e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ec:	e7f7      	b.n	800b4de <memcpy+0x6>

0800b4ee <memset>:
 800b4ee:	4402      	add	r2, r0
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d100      	bne.n	800b4f8 <memset+0xa>
 800b4f6:	4770      	bx	lr
 800b4f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fc:	e7f9      	b.n	800b4f2 <memset+0x4>

0800b4fe <__cvt>:
 800b4fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b502:	ec55 4b10 	vmov	r4, r5, d0
 800b506:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b50c:	2d00      	cmp	r5, #0
 800b50e:	460e      	mov	r6, r1
 800b510:	4691      	mov	r9, r2
 800b512:	4619      	mov	r1, r3
 800b514:	bfb8      	it	lt
 800b516:	4622      	movlt	r2, r4
 800b518:	462b      	mov	r3, r5
 800b51a:	f027 0720 	bic.w	r7, r7, #32
 800b51e:	bfbb      	ittet	lt
 800b520:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b524:	461d      	movlt	r5, r3
 800b526:	2300      	movge	r3, #0
 800b528:	232d      	movlt	r3, #45	; 0x2d
 800b52a:	bfb8      	it	lt
 800b52c:	4614      	movlt	r4, r2
 800b52e:	2f46      	cmp	r7, #70	; 0x46
 800b530:	700b      	strb	r3, [r1, #0]
 800b532:	d004      	beq.n	800b53e <__cvt+0x40>
 800b534:	2f45      	cmp	r7, #69	; 0x45
 800b536:	d100      	bne.n	800b53a <__cvt+0x3c>
 800b538:	3601      	adds	r6, #1
 800b53a:	2102      	movs	r1, #2
 800b53c:	e000      	b.n	800b540 <__cvt+0x42>
 800b53e:	2103      	movs	r1, #3
 800b540:	ab03      	add	r3, sp, #12
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	ab02      	add	r3, sp, #8
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	4632      	mov	r2, r6
 800b54a:	4653      	mov	r3, sl
 800b54c:	ec45 4b10 	vmov	d0, r4, r5
 800b550:	f001 fd7e 	bl	800d050 <_dtoa_r>
 800b554:	2f47      	cmp	r7, #71	; 0x47
 800b556:	4680      	mov	r8, r0
 800b558:	d102      	bne.n	800b560 <__cvt+0x62>
 800b55a:	f019 0f01 	tst.w	r9, #1
 800b55e:	d026      	beq.n	800b5ae <__cvt+0xb0>
 800b560:	2f46      	cmp	r7, #70	; 0x46
 800b562:	eb08 0906 	add.w	r9, r8, r6
 800b566:	d111      	bne.n	800b58c <__cvt+0x8e>
 800b568:	f898 3000 	ldrb.w	r3, [r8]
 800b56c:	2b30      	cmp	r3, #48	; 0x30
 800b56e:	d10a      	bne.n	800b586 <__cvt+0x88>
 800b570:	2200      	movs	r2, #0
 800b572:	2300      	movs	r3, #0
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f5 faae 	bl	8000ad8 <__aeabi_dcmpeq>
 800b57c:	b918      	cbnz	r0, 800b586 <__cvt+0x88>
 800b57e:	f1c6 0601 	rsb	r6, r6, #1
 800b582:	f8ca 6000 	str.w	r6, [sl]
 800b586:	f8da 3000 	ldr.w	r3, [sl]
 800b58a:	4499      	add	r9, r3
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	4620      	mov	r0, r4
 800b592:	4629      	mov	r1, r5
 800b594:	f7f5 faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b598:	b938      	cbnz	r0, 800b5aa <__cvt+0xac>
 800b59a:	2230      	movs	r2, #48	; 0x30
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	454b      	cmp	r3, r9
 800b5a0:	d205      	bcs.n	800b5ae <__cvt+0xb0>
 800b5a2:	1c59      	adds	r1, r3, #1
 800b5a4:	9103      	str	r1, [sp, #12]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	e7f8      	b.n	800b59c <__cvt+0x9e>
 800b5aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5b2:	eba3 0308 	sub.w	r3, r3, r8
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	b004      	add	sp, #16
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b5c0 <__exponent>:
 800b5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	bfba      	itte	lt
 800b5c8:	4249      	neglt	r1, r1
 800b5ca:	232d      	movlt	r3, #45	; 0x2d
 800b5cc:	232b      	movge	r3, #43	; 0x2b
 800b5ce:	2909      	cmp	r1, #9
 800b5d0:	f804 2b02 	strb.w	r2, [r4], #2
 800b5d4:	7043      	strb	r3, [r0, #1]
 800b5d6:	dd20      	ble.n	800b61a <__exponent+0x5a>
 800b5d8:	f10d 0307 	add.w	r3, sp, #7
 800b5dc:	461f      	mov	r7, r3
 800b5de:	260a      	movs	r6, #10
 800b5e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b5e4:	fb06 1115 	mls	r1, r6, r5, r1
 800b5e8:	3130      	adds	r1, #48	; 0x30
 800b5ea:	2d09      	cmp	r5, #9
 800b5ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b5f0:	f103 32ff 	add.w	r2, r3, #4294967295
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	dc09      	bgt.n	800b60c <__exponent+0x4c>
 800b5f8:	3130      	adds	r1, #48	; 0x30
 800b5fa:	3b02      	subs	r3, #2
 800b5fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b600:	42bb      	cmp	r3, r7
 800b602:	4622      	mov	r2, r4
 800b604:	d304      	bcc.n	800b610 <__exponent+0x50>
 800b606:	1a10      	subs	r0, r2, r0
 800b608:	b003      	add	sp, #12
 800b60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60c:	4613      	mov	r3, r2
 800b60e:	e7e7      	b.n	800b5e0 <__exponent+0x20>
 800b610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b614:	f804 2b01 	strb.w	r2, [r4], #1
 800b618:	e7f2      	b.n	800b600 <__exponent+0x40>
 800b61a:	2330      	movs	r3, #48	; 0x30
 800b61c:	4419      	add	r1, r3
 800b61e:	7083      	strb	r3, [r0, #2]
 800b620:	1d02      	adds	r2, r0, #4
 800b622:	70c1      	strb	r1, [r0, #3]
 800b624:	e7ef      	b.n	800b606 <__exponent+0x46>
	...

0800b628 <_printf_float>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	b08d      	sub	sp, #52	; 0x34
 800b62e:	460c      	mov	r4, r1
 800b630:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b634:	4616      	mov	r6, r2
 800b636:	461f      	mov	r7, r3
 800b638:	4605      	mov	r5, r0
 800b63a:	f002 fded 	bl	800e218 <_localeconv_r>
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	4618      	mov	r0, r3
 800b644:	f7f4 fdcc 	bl	80001e0 <strlen>
 800b648:	2300      	movs	r3, #0
 800b64a:	930a      	str	r3, [sp, #40]	; 0x28
 800b64c:	f8d8 3000 	ldr.w	r3, [r8]
 800b650:	9005      	str	r0, [sp, #20]
 800b652:	3307      	adds	r3, #7
 800b654:	f023 0307 	bic.w	r3, r3, #7
 800b658:	f103 0208 	add.w	r2, r3, #8
 800b65c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b660:	f8d4 b000 	ldr.w	fp, [r4]
 800b664:	f8c8 2000 	str.w	r2, [r8]
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b670:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b674:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b678:	9307      	str	r3, [sp, #28]
 800b67a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b67e:	f04f 32ff 	mov.w	r2, #4294967295
 800b682:	4ba7      	ldr	r3, [pc, #668]	; (800b920 <_printf_float+0x2f8>)
 800b684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b688:	f7f5 fa58 	bl	8000b3c <__aeabi_dcmpun>
 800b68c:	bb70      	cbnz	r0, 800b6ec <_printf_float+0xc4>
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	4ba3      	ldr	r3, [pc, #652]	; (800b920 <_printf_float+0x2f8>)
 800b694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b698:	f7f5 fa32 	bl	8000b00 <__aeabi_dcmple>
 800b69c:	bb30      	cbnz	r0, 800b6ec <_printf_float+0xc4>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	f7f5 fa21 	bl	8000aec <__aeabi_dcmplt>
 800b6aa:	b110      	cbz	r0, 800b6b2 <_printf_float+0x8a>
 800b6ac:	232d      	movs	r3, #45	; 0x2d
 800b6ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6b2:	4a9c      	ldr	r2, [pc, #624]	; (800b924 <_printf_float+0x2fc>)
 800b6b4:	4b9c      	ldr	r3, [pc, #624]	; (800b928 <_printf_float+0x300>)
 800b6b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b6ba:	bf8c      	ite	hi
 800b6bc:	4690      	movhi	r8, r2
 800b6be:	4698      	movls	r8, r3
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	f02b 0204 	bic.w	r2, fp, #4
 800b6c6:	6123      	str	r3, [r4, #16]
 800b6c8:	6022      	str	r2, [r4, #0]
 800b6ca:	f04f 0900 	mov.w	r9, #0
 800b6ce:	9700      	str	r7, [sp, #0]
 800b6d0:	4633      	mov	r3, r6
 800b6d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f9e6 	bl	800baa8 <_printf_common>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	f040 808d 	bne.w	800b7fc <_printf_float+0x1d4>
 800b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e6:	b00d      	add	sp, #52	; 0x34
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 fa22 	bl	8000b3c <__aeabi_dcmpun>
 800b6f8:	b110      	cbz	r0, 800b700 <_printf_float+0xd8>
 800b6fa:	4a8c      	ldr	r2, [pc, #560]	; (800b92c <_printf_float+0x304>)
 800b6fc:	4b8c      	ldr	r3, [pc, #560]	; (800b930 <_printf_float+0x308>)
 800b6fe:	e7da      	b.n	800b6b6 <_printf_float+0x8e>
 800b700:	6861      	ldr	r1, [r4, #4]
 800b702:	1c4b      	adds	r3, r1, #1
 800b704:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b708:	a80a      	add	r0, sp, #40	; 0x28
 800b70a:	d13e      	bne.n	800b78a <_printf_float+0x162>
 800b70c:	2306      	movs	r3, #6
 800b70e:	6063      	str	r3, [r4, #4]
 800b710:	2300      	movs	r3, #0
 800b712:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b716:	ab09      	add	r3, sp, #36	; 0x24
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	ec49 8b10 	vmov	d0, r8, r9
 800b71e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	f8cd a004 	str.w	sl, [sp, #4]
 800b728:	6861      	ldr	r1, [r4, #4]
 800b72a:	4628      	mov	r0, r5
 800b72c:	f7ff fee7 	bl	800b4fe <__cvt>
 800b730:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b734:	2b47      	cmp	r3, #71	; 0x47
 800b736:	4680      	mov	r8, r0
 800b738:	d109      	bne.n	800b74e <_printf_float+0x126>
 800b73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73c:	1cd8      	adds	r0, r3, #3
 800b73e:	db02      	blt.n	800b746 <_printf_float+0x11e>
 800b740:	6862      	ldr	r2, [r4, #4]
 800b742:	4293      	cmp	r3, r2
 800b744:	dd47      	ble.n	800b7d6 <_printf_float+0x1ae>
 800b746:	f1aa 0a02 	sub.w	sl, sl, #2
 800b74a:	fa5f fa8a 	uxtb.w	sl, sl
 800b74e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b752:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b754:	d824      	bhi.n	800b7a0 <_printf_float+0x178>
 800b756:	3901      	subs	r1, #1
 800b758:	4652      	mov	r2, sl
 800b75a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b75e:	9109      	str	r1, [sp, #36]	; 0x24
 800b760:	f7ff ff2e 	bl	800b5c0 <__exponent>
 800b764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b766:	1813      	adds	r3, r2, r0
 800b768:	2a01      	cmp	r2, #1
 800b76a:	4681      	mov	r9, r0
 800b76c:	6123      	str	r3, [r4, #16]
 800b76e:	dc02      	bgt.n	800b776 <_printf_float+0x14e>
 800b770:	6822      	ldr	r2, [r4, #0]
 800b772:	07d1      	lsls	r1, r2, #31
 800b774:	d501      	bpl.n	800b77a <_printf_float+0x152>
 800b776:	3301      	adds	r3, #1
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0a5      	beq.n	800b6ce <_printf_float+0xa6>
 800b782:	232d      	movs	r3, #45	; 0x2d
 800b784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b788:	e7a1      	b.n	800b6ce <_printf_float+0xa6>
 800b78a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b78e:	f000 8177 	beq.w	800ba80 <_printf_float+0x458>
 800b792:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b796:	d1bb      	bne.n	800b710 <_printf_float+0xe8>
 800b798:	2900      	cmp	r1, #0
 800b79a:	d1b9      	bne.n	800b710 <_printf_float+0xe8>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e7b6      	b.n	800b70e <_printf_float+0xe6>
 800b7a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b7a4:	d119      	bne.n	800b7da <_printf_float+0x1b2>
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	6863      	ldr	r3, [r4, #4]
 800b7aa:	dd0c      	ble.n	800b7c6 <_printf_float+0x19e>
 800b7ac:	6121      	str	r1, [r4, #16]
 800b7ae:	b913      	cbnz	r3, 800b7b6 <_printf_float+0x18e>
 800b7b0:	6822      	ldr	r2, [r4, #0]
 800b7b2:	07d2      	lsls	r2, r2, #31
 800b7b4:	d502      	bpl.n	800b7bc <_printf_float+0x194>
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	440b      	add	r3, r1
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7be:	65a3      	str	r3, [r4, #88]	; 0x58
 800b7c0:	f04f 0900 	mov.w	r9, #0
 800b7c4:	e7d9      	b.n	800b77a <_printf_float+0x152>
 800b7c6:	b913      	cbnz	r3, 800b7ce <_printf_float+0x1a6>
 800b7c8:	6822      	ldr	r2, [r4, #0]
 800b7ca:	07d0      	lsls	r0, r2, #31
 800b7cc:	d501      	bpl.n	800b7d2 <_printf_float+0x1aa>
 800b7ce:	3302      	adds	r3, #2
 800b7d0:	e7f3      	b.n	800b7ba <_printf_float+0x192>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e7f1      	b.n	800b7ba <_printf_float+0x192>
 800b7d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b7da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	db05      	blt.n	800b7ee <_printf_float+0x1c6>
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	6123      	str	r3, [r4, #16]
 800b7e6:	07d1      	lsls	r1, r2, #31
 800b7e8:	d5e8      	bpl.n	800b7bc <_printf_float+0x194>
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	e7e5      	b.n	800b7ba <_printf_float+0x192>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bfd4      	ite	le
 800b7f2:	f1c3 0302 	rsble	r3, r3, #2
 800b7f6:	2301      	movgt	r3, #1
 800b7f8:	4413      	add	r3, r2
 800b7fa:	e7de      	b.n	800b7ba <_printf_float+0x192>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	055a      	lsls	r2, r3, #21
 800b800:	d407      	bmi.n	800b812 <_printf_float+0x1ea>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	4642      	mov	r2, r8
 800b806:	4631      	mov	r1, r6
 800b808:	4628      	mov	r0, r5
 800b80a:	47b8      	blx	r7
 800b80c:	3001      	adds	r0, #1
 800b80e:	d12b      	bne.n	800b868 <_printf_float+0x240>
 800b810:	e767      	b.n	800b6e2 <_printf_float+0xba>
 800b812:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b816:	f240 80dc 	bls.w	800b9d2 <_printf_float+0x3aa>
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b822:	f7f5 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	d033      	beq.n	800b892 <_printf_float+0x26a>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4a41      	ldr	r2, [pc, #260]	; (800b934 <_printf_float+0x30c>)
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	47b8      	blx	r7
 800b834:	3001      	adds	r0, #1
 800b836:	f43f af54 	beq.w	800b6e2 <_printf_float+0xba>
 800b83a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b83e:	429a      	cmp	r2, r3
 800b840:	db02      	blt.n	800b848 <_printf_float+0x220>
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	07d8      	lsls	r0, r3, #31
 800b846:	d50f      	bpl.n	800b868 <_printf_float+0x240>
 800b848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	f43f af45 	beq.w	800b6e2 <_printf_float+0xba>
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	f104 091a 	add.w	r9, r4, #26
 800b860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b862:	3b01      	subs	r3, #1
 800b864:	4543      	cmp	r3, r8
 800b866:	dc09      	bgt.n	800b87c <_printf_float+0x254>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	079b      	lsls	r3, r3, #30
 800b86c:	f100 8103 	bmi.w	800ba76 <_printf_float+0x44e>
 800b870:	68e0      	ldr	r0, [r4, #12]
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	4298      	cmp	r0, r3
 800b876:	bfb8      	it	lt
 800b878:	4618      	movlt	r0, r3
 800b87a:	e734      	b.n	800b6e6 <_printf_float+0xbe>
 800b87c:	2301      	movs	r3, #1
 800b87e:	464a      	mov	r2, r9
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	47b8      	blx	r7
 800b886:	3001      	adds	r0, #1
 800b888:	f43f af2b 	beq.w	800b6e2 <_printf_float+0xba>
 800b88c:	f108 0801 	add.w	r8, r8, #1
 800b890:	e7e6      	b.n	800b860 <_printf_float+0x238>
 800b892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	dc2b      	bgt.n	800b8f0 <_printf_float+0x2c8>
 800b898:	2301      	movs	r3, #1
 800b89a:	4a26      	ldr	r2, [pc, #152]	; (800b934 <_printf_float+0x30c>)
 800b89c:	4631      	mov	r1, r6
 800b89e:	4628      	mov	r0, r5
 800b8a0:	47b8      	blx	r7
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	f43f af1d 	beq.w	800b6e2 <_printf_float+0xba>
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	b923      	cbnz	r3, 800b8b6 <_printf_float+0x28e>
 800b8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ae:	b913      	cbnz	r3, 800b8b6 <_printf_float+0x28e>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	07d9      	lsls	r1, r3, #31
 800b8b4:	d5d8      	bpl.n	800b868 <_printf_float+0x240>
 800b8b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f af0e 	beq.w	800b6e2 <_printf_float+0xba>
 800b8c6:	f04f 0900 	mov.w	r9, #0
 800b8ca:	f104 0a1a 	add.w	sl, r4, #26
 800b8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d0:	425b      	negs	r3, r3
 800b8d2:	454b      	cmp	r3, r9
 800b8d4:	dc01      	bgt.n	800b8da <_printf_float+0x2b2>
 800b8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d8:	e794      	b.n	800b804 <_printf_float+0x1dc>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4652      	mov	r2, sl
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	47b8      	blx	r7
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f43f aefc 	beq.w	800b6e2 <_printf_float+0xba>
 800b8ea:	f109 0901 	add.w	r9, r9, #1
 800b8ee:	e7ee      	b.n	800b8ce <_printf_float+0x2a6>
 800b8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	bfa8      	it	ge
 800b8f8:	461a      	movge	r2, r3
 800b8fa:	2a00      	cmp	r2, #0
 800b8fc:	4691      	mov	r9, r2
 800b8fe:	dd07      	ble.n	800b910 <_printf_float+0x2e8>
 800b900:	4613      	mov	r3, r2
 800b902:	4631      	mov	r1, r6
 800b904:	4642      	mov	r2, r8
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	f43f aee9 	beq.w	800b6e2 <_printf_float+0xba>
 800b910:	f104 031a 	add.w	r3, r4, #26
 800b914:	f04f 0b00 	mov.w	fp, #0
 800b918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	e015      	b.n	800b94c <_printf_float+0x324>
 800b920:	7fefffff 	.word	0x7fefffff
 800b924:	0800f010 	.word	0x0800f010
 800b928:	0800f00c 	.word	0x0800f00c
 800b92c:	0800f018 	.word	0x0800f018
 800b930:	0800f014 	.word	0x0800f014
 800b934:	0800f01c 	.word	0x0800f01c
 800b938:	2301      	movs	r3, #1
 800b93a:	9a06      	ldr	r2, [sp, #24]
 800b93c:	4631      	mov	r1, r6
 800b93e:	4628      	mov	r0, r5
 800b940:	47b8      	blx	r7
 800b942:	3001      	adds	r0, #1
 800b944:	f43f aecd 	beq.w	800b6e2 <_printf_float+0xba>
 800b948:	f10b 0b01 	add.w	fp, fp, #1
 800b94c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b950:	ebaa 0309 	sub.w	r3, sl, r9
 800b954:	455b      	cmp	r3, fp
 800b956:	dcef      	bgt.n	800b938 <_printf_float+0x310>
 800b958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b95c:	429a      	cmp	r2, r3
 800b95e:	44d0      	add	r8, sl
 800b960:	db15      	blt.n	800b98e <_printf_float+0x366>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	07da      	lsls	r2, r3, #31
 800b966:	d412      	bmi.n	800b98e <_printf_float+0x366>
 800b968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b96c:	eba3 020a 	sub.w	r2, r3, sl
 800b970:	eba3 0a01 	sub.w	sl, r3, r1
 800b974:	4592      	cmp	sl, r2
 800b976:	bfa8      	it	ge
 800b978:	4692      	movge	sl, r2
 800b97a:	f1ba 0f00 	cmp.w	sl, #0
 800b97e:	dc0e      	bgt.n	800b99e <_printf_float+0x376>
 800b980:	f04f 0800 	mov.w	r8, #0
 800b984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b988:	f104 091a 	add.w	r9, r4, #26
 800b98c:	e019      	b.n	800b9c2 <_printf_float+0x39a>
 800b98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b992:	4631      	mov	r1, r6
 800b994:	4628      	mov	r0, r5
 800b996:	47b8      	blx	r7
 800b998:	3001      	adds	r0, #1
 800b99a:	d1e5      	bne.n	800b968 <_printf_float+0x340>
 800b99c:	e6a1      	b.n	800b6e2 <_printf_float+0xba>
 800b99e:	4653      	mov	r3, sl
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b8      	blx	r7
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1e9      	bne.n	800b980 <_printf_float+0x358>
 800b9ac:	e699      	b.n	800b6e2 <_printf_float+0xba>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	464a      	mov	r2, r9
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b8      	blx	r7
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	f43f ae92 	beq.w	800b6e2 <_printf_float+0xba>
 800b9be:	f108 0801 	add.w	r8, r8, #1
 800b9c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c6:	1a9b      	subs	r3, r3, r2
 800b9c8:	eba3 030a 	sub.w	r3, r3, sl
 800b9cc:	4543      	cmp	r3, r8
 800b9ce:	dcee      	bgt.n	800b9ae <_printf_float+0x386>
 800b9d0:	e74a      	b.n	800b868 <_printf_float+0x240>
 800b9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9d4:	2a01      	cmp	r2, #1
 800b9d6:	dc01      	bgt.n	800b9dc <_printf_float+0x3b4>
 800b9d8:	07db      	lsls	r3, r3, #31
 800b9da:	d53a      	bpl.n	800ba52 <_printf_float+0x42a>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	4642      	mov	r2, r8
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	47b8      	blx	r7
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	f43f ae7b 	beq.w	800b6e2 <_printf_float+0xba>
 800b9ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	47b8      	blx	r7
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	f108 0801 	add.w	r8, r8, #1
 800b9fc:	f43f ae71 	beq.w	800b6e2 <_printf_float+0xba>
 800ba00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba02:	2200      	movs	r2, #0
 800ba04:	f103 3aff 	add.w	sl, r3, #4294967295
 800ba08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f7f5 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba12:	b9c8      	cbnz	r0, 800ba48 <_printf_float+0x420>
 800ba14:	4653      	mov	r3, sl
 800ba16:	4642      	mov	r2, r8
 800ba18:	4631      	mov	r1, r6
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	47b8      	blx	r7
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d10e      	bne.n	800ba40 <_printf_float+0x418>
 800ba22:	e65e      	b.n	800b6e2 <_printf_float+0xba>
 800ba24:	2301      	movs	r3, #1
 800ba26:	4652      	mov	r2, sl
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b8      	blx	r7
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f43f ae57 	beq.w	800b6e2 <_printf_float+0xba>
 800ba34:	f108 0801 	add.w	r8, r8, #1
 800ba38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	4543      	cmp	r3, r8
 800ba3e:	dcf1      	bgt.n	800ba24 <_printf_float+0x3fc>
 800ba40:	464b      	mov	r3, r9
 800ba42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba46:	e6de      	b.n	800b806 <_printf_float+0x1de>
 800ba48:	f04f 0800 	mov.w	r8, #0
 800ba4c:	f104 0a1a 	add.w	sl, r4, #26
 800ba50:	e7f2      	b.n	800ba38 <_printf_float+0x410>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e7df      	b.n	800ba16 <_printf_float+0x3ee>
 800ba56:	2301      	movs	r3, #1
 800ba58:	464a      	mov	r2, r9
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b8      	blx	r7
 800ba60:	3001      	adds	r0, #1
 800ba62:	f43f ae3e 	beq.w	800b6e2 <_printf_float+0xba>
 800ba66:	f108 0801 	add.w	r8, r8, #1
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	4543      	cmp	r3, r8
 800ba72:	dcf0      	bgt.n	800ba56 <_printf_float+0x42e>
 800ba74:	e6fc      	b.n	800b870 <_printf_float+0x248>
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	f104 0919 	add.w	r9, r4, #25
 800ba7e:	e7f4      	b.n	800ba6a <_printf_float+0x442>
 800ba80:	2900      	cmp	r1, #0
 800ba82:	f43f ae8b 	beq.w	800b79c <_printf_float+0x174>
 800ba86:	2300      	movs	r3, #0
 800ba88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ba8c:	ab09      	add	r3, sp, #36	; 0x24
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	ec49 8b10 	vmov	d0, r8, r9
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	f8cd a004 	str.w	sl, [sp, #4]
 800ba9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f7ff fd2d 	bl	800b4fe <__cvt>
 800baa4:	4680      	mov	r8, r0
 800baa6:	e648      	b.n	800b73a <_printf_float+0x112>

0800baa8 <_printf_common>:
 800baa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baac:	4691      	mov	r9, r2
 800baae:	461f      	mov	r7, r3
 800bab0:	688a      	ldr	r2, [r1, #8]
 800bab2:	690b      	ldr	r3, [r1, #16]
 800bab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bab8:	4293      	cmp	r3, r2
 800baba:	bfb8      	it	lt
 800babc:	4613      	movlt	r3, r2
 800babe:	f8c9 3000 	str.w	r3, [r9]
 800bac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bac6:	4606      	mov	r6, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	b112      	cbz	r2, 800bad2 <_printf_common+0x2a>
 800bacc:	3301      	adds	r3, #1
 800bace:	f8c9 3000 	str.w	r3, [r9]
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	0699      	lsls	r1, r3, #26
 800bad6:	bf42      	ittt	mi
 800bad8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800badc:	3302      	addmi	r3, #2
 800bade:	f8c9 3000 	strmi.w	r3, [r9]
 800bae2:	6825      	ldr	r5, [r4, #0]
 800bae4:	f015 0506 	ands.w	r5, r5, #6
 800bae8:	d107      	bne.n	800bafa <_printf_common+0x52>
 800baea:	f104 0a19 	add.w	sl, r4, #25
 800baee:	68e3      	ldr	r3, [r4, #12]
 800baf0:	f8d9 2000 	ldr.w	r2, [r9]
 800baf4:	1a9b      	subs	r3, r3, r2
 800baf6:	42ab      	cmp	r3, r5
 800baf8:	dc28      	bgt.n	800bb4c <_printf_common+0xa4>
 800bafa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bafe:	6822      	ldr	r2, [r4, #0]
 800bb00:	3300      	adds	r3, #0
 800bb02:	bf18      	it	ne
 800bb04:	2301      	movne	r3, #1
 800bb06:	0692      	lsls	r2, r2, #26
 800bb08:	d42d      	bmi.n	800bb66 <_printf_common+0xbe>
 800bb0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb0e:	4639      	mov	r1, r7
 800bb10:	4630      	mov	r0, r6
 800bb12:	47c0      	blx	r8
 800bb14:	3001      	adds	r0, #1
 800bb16:	d020      	beq.n	800bb5a <_printf_common+0xb2>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	68e5      	ldr	r5, [r4, #12]
 800bb1c:	f8d9 2000 	ldr.w	r2, [r9]
 800bb20:	f003 0306 	and.w	r3, r3, #6
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	bf08      	it	eq
 800bb28:	1aad      	subeq	r5, r5, r2
 800bb2a:	68a3      	ldr	r3, [r4, #8]
 800bb2c:	6922      	ldr	r2, [r4, #16]
 800bb2e:	bf0c      	ite	eq
 800bb30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb34:	2500      	movne	r5, #0
 800bb36:	4293      	cmp	r3, r2
 800bb38:	bfc4      	itt	gt
 800bb3a:	1a9b      	subgt	r3, r3, r2
 800bb3c:	18ed      	addgt	r5, r5, r3
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	341a      	adds	r4, #26
 800bb44:	454d      	cmp	r5, r9
 800bb46:	d11a      	bne.n	800bb7e <_printf_common+0xd6>
 800bb48:	2000      	movs	r0, #0
 800bb4a:	e008      	b.n	800bb5e <_printf_common+0xb6>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	4652      	mov	r2, sl
 800bb50:	4639      	mov	r1, r7
 800bb52:	4630      	mov	r0, r6
 800bb54:	47c0      	blx	r8
 800bb56:	3001      	adds	r0, #1
 800bb58:	d103      	bne.n	800bb62 <_printf_common+0xba>
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb62:	3501      	adds	r5, #1
 800bb64:	e7c3      	b.n	800baee <_printf_common+0x46>
 800bb66:	18e1      	adds	r1, r4, r3
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	2030      	movs	r0, #48	; 0x30
 800bb6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb70:	4422      	add	r2, r4
 800bb72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb7a:	3302      	adds	r3, #2
 800bb7c:	e7c5      	b.n	800bb0a <_printf_common+0x62>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4622      	mov	r2, r4
 800bb82:	4639      	mov	r1, r7
 800bb84:	4630      	mov	r0, r6
 800bb86:	47c0      	blx	r8
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d0e6      	beq.n	800bb5a <_printf_common+0xb2>
 800bb8c:	f109 0901 	add.w	r9, r9, #1
 800bb90:	e7d8      	b.n	800bb44 <_printf_common+0x9c>
	...

0800bb94 <_printf_i>:
 800bb94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	7e09      	ldrb	r1, [r1, #24]
 800bba0:	b085      	sub	sp, #20
 800bba2:	296e      	cmp	r1, #110	; 0x6e
 800bba4:	4617      	mov	r7, r2
 800bba6:	4606      	mov	r6, r0
 800bba8:	4698      	mov	r8, r3
 800bbaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbac:	f000 80b3 	beq.w	800bd16 <_printf_i+0x182>
 800bbb0:	d822      	bhi.n	800bbf8 <_printf_i+0x64>
 800bbb2:	2963      	cmp	r1, #99	; 0x63
 800bbb4:	d036      	beq.n	800bc24 <_printf_i+0x90>
 800bbb6:	d80a      	bhi.n	800bbce <_printf_i+0x3a>
 800bbb8:	2900      	cmp	r1, #0
 800bbba:	f000 80b9 	beq.w	800bd30 <_printf_i+0x19c>
 800bbbe:	2958      	cmp	r1, #88	; 0x58
 800bbc0:	f000 8083 	beq.w	800bcca <_printf_i+0x136>
 800bbc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bbcc:	e032      	b.n	800bc34 <_printf_i+0xa0>
 800bbce:	2964      	cmp	r1, #100	; 0x64
 800bbd0:	d001      	beq.n	800bbd6 <_printf_i+0x42>
 800bbd2:	2969      	cmp	r1, #105	; 0x69
 800bbd4:	d1f6      	bne.n	800bbc4 <_printf_i+0x30>
 800bbd6:	6820      	ldr	r0, [r4, #0]
 800bbd8:	6813      	ldr	r3, [r2, #0]
 800bbda:	0605      	lsls	r5, r0, #24
 800bbdc:	f103 0104 	add.w	r1, r3, #4
 800bbe0:	d52a      	bpl.n	800bc38 <_printf_i+0xa4>
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6011      	str	r1, [r2, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da03      	bge.n	800bbf2 <_printf_i+0x5e>
 800bbea:	222d      	movs	r2, #45	; 0x2d
 800bbec:	425b      	negs	r3, r3
 800bbee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbf2:	486f      	ldr	r0, [pc, #444]	; (800bdb0 <_printf_i+0x21c>)
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	e039      	b.n	800bc6c <_printf_i+0xd8>
 800bbf8:	2973      	cmp	r1, #115	; 0x73
 800bbfa:	f000 809d 	beq.w	800bd38 <_printf_i+0x1a4>
 800bbfe:	d808      	bhi.n	800bc12 <_printf_i+0x7e>
 800bc00:	296f      	cmp	r1, #111	; 0x6f
 800bc02:	d020      	beq.n	800bc46 <_printf_i+0xb2>
 800bc04:	2970      	cmp	r1, #112	; 0x70
 800bc06:	d1dd      	bne.n	800bbc4 <_printf_i+0x30>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	f043 0320 	orr.w	r3, r3, #32
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	e003      	b.n	800bc1a <_printf_i+0x86>
 800bc12:	2975      	cmp	r1, #117	; 0x75
 800bc14:	d017      	beq.n	800bc46 <_printf_i+0xb2>
 800bc16:	2978      	cmp	r1, #120	; 0x78
 800bc18:	d1d4      	bne.n	800bbc4 <_printf_i+0x30>
 800bc1a:	2378      	movs	r3, #120	; 0x78
 800bc1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc20:	4864      	ldr	r0, [pc, #400]	; (800bdb4 <_printf_i+0x220>)
 800bc22:	e055      	b.n	800bcd0 <_printf_i+0x13c>
 800bc24:	6813      	ldr	r3, [r2, #0]
 800bc26:	1d19      	adds	r1, r3, #4
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6011      	str	r1, [r2, #0]
 800bc2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc34:	2301      	movs	r3, #1
 800bc36:	e08c      	b.n	800bd52 <_printf_i+0x1be>
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6011      	str	r1, [r2, #0]
 800bc3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc40:	bf18      	it	ne
 800bc42:	b21b      	sxthne	r3, r3
 800bc44:	e7cf      	b.n	800bbe6 <_printf_i+0x52>
 800bc46:	6813      	ldr	r3, [r2, #0]
 800bc48:	6825      	ldr	r5, [r4, #0]
 800bc4a:	1d18      	adds	r0, r3, #4
 800bc4c:	6010      	str	r0, [r2, #0]
 800bc4e:	0628      	lsls	r0, r5, #24
 800bc50:	d501      	bpl.n	800bc56 <_printf_i+0xc2>
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	e002      	b.n	800bc5c <_printf_i+0xc8>
 800bc56:	0668      	lsls	r0, r5, #25
 800bc58:	d5fb      	bpl.n	800bc52 <_printf_i+0xbe>
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	4854      	ldr	r0, [pc, #336]	; (800bdb0 <_printf_i+0x21c>)
 800bc5e:	296f      	cmp	r1, #111	; 0x6f
 800bc60:	bf14      	ite	ne
 800bc62:	220a      	movne	r2, #10
 800bc64:	2208      	moveq	r2, #8
 800bc66:	2100      	movs	r1, #0
 800bc68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc6c:	6865      	ldr	r5, [r4, #4]
 800bc6e:	60a5      	str	r5, [r4, #8]
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	f2c0 8095 	blt.w	800bda0 <_printf_i+0x20c>
 800bc76:	6821      	ldr	r1, [r4, #0]
 800bc78:	f021 0104 	bic.w	r1, r1, #4
 800bc7c:	6021      	str	r1, [r4, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d13d      	bne.n	800bcfe <_printf_i+0x16a>
 800bc82:	2d00      	cmp	r5, #0
 800bc84:	f040 808e 	bne.w	800bda4 <_printf_i+0x210>
 800bc88:	4665      	mov	r5, ip
 800bc8a:	2a08      	cmp	r2, #8
 800bc8c:	d10b      	bne.n	800bca6 <_printf_i+0x112>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	07db      	lsls	r3, r3, #31
 800bc92:	d508      	bpl.n	800bca6 <_printf_i+0x112>
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	6862      	ldr	r2, [r4, #4]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfde      	ittt	le
 800bc9c:	2330      	movle	r3, #48	; 0x30
 800bc9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bca2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bca6:	ebac 0305 	sub.w	r3, ip, r5
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	f8cd 8000 	str.w	r8, [sp]
 800bcb0:	463b      	mov	r3, r7
 800bcb2:	aa03      	add	r2, sp, #12
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7ff fef6 	bl	800baa8 <_printf_common>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d14d      	bne.n	800bd5c <_printf_i+0x1c8>
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc4:	b005      	add	sp, #20
 800bcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcca:	4839      	ldr	r0, [pc, #228]	; (800bdb0 <_printf_i+0x21c>)
 800bccc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bcd0:	6813      	ldr	r3, [r2, #0]
 800bcd2:	6821      	ldr	r1, [r4, #0]
 800bcd4:	1d1d      	adds	r5, r3, #4
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6015      	str	r5, [r2, #0]
 800bcda:	060a      	lsls	r2, r1, #24
 800bcdc:	d50b      	bpl.n	800bcf6 <_printf_i+0x162>
 800bcde:	07ca      	lsls	r2, r1, #31
 800bce0:	bf44      	itt	mi
 800bce2:	f041 0120 	orrmi.w	r1, r1, #32
 800bce6:	6021      	strmi	r1, [r4, #0]
 800bce8:	b91b      	cbnz	r3, 800bcf2 <_printf_i+0x15e>
 800bcea:	6822      	ldr	r2, [r4, #0]
 800bcec:	f022 0220 	bic.w	r2, r2, #32
 800bcf0:	6022      	str	r2, [r4, #0]
 800bcf2:	2210      	movs	r2, #16
 800bcf4:	e7b7      	b.n	800bc66 <_printf_i+0xd2>
 800bcf6:	064d      	lsls	r5, r1, #25
 800bcf8:	bf48      	it	mi
 800bcfa:	b29b      	uxthmi	r3, r3
 800bcfc:	e7ef      	b.n	800bcde <_printf_i+0x14a>
 800bcfe:	4665      	mov	r5, ip
 800bd00:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd04:	fb02 3311 	mls	r3, r2, r1, r3
 800bd08:	5cc3      	ldrb	r3, [r0, r3]
 800bd0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd0e:	460b      	mov	r3, r1
 800bd10:	2900      	cmp	r1, #0
 800bd12:	d1f5      	bne.n	800bd00 <_printf_i+0x16c>
 800bd14:	e7b9      	b.n	800bc8a <_printf_i+0xf6>
 800bd16:	6813      	ldr	r3, [r2, #0]
 800bd18:	6825      	ldr	r5, [r4, #0]
 800bd1a:	6961      	ldr	r1, [r4, #20]
 800bd1c:	1d18      	adds	r0, r3, #4
 800bd1e:	6010      	str	r0, [r2, #0]
 800bd20:	0628      	lsls	r0, r5, #24
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	d501      	bpl.n	800bd2a <_printf_i+0x196>
 800bd26:	6019      	str	r1, [r3, #0]
 800bd28:	e002      	b.n	800bd30 <_printf_i+0x19c>
 800bd2a:	066a      	lsls	r2, r5, #25
 800bd2c:	d5fb      	bpl.n	800bd26 <_printf_i+0x192>
 800bd2e:	8019      	strh	r1, [r3, #0]
 800bd30:	2300      	movs	r3, #0
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	4665      	mov	r5, ip
 800bd36:	e7b9      	b.n	800bcac <_printf_i+0x118>
 800bd38:	6813      	ldr	r3, [r2, #0]
 800bd3a:	1d19      	adds	r1, r3, #4
 800bd3c:	6011      	str	r1, [r2, #0]
 800bd3e:	681d      	ldr	r5, [r3, #0]
 800bd40:	6862      	ldr	r2, [r4, #4]
 800bd42:	2100      	movs	r1, #0
 800bd44:	4628      	mov	r0, r5
 800bd46:	f7f4 fa53 	bl	80001f0 <memchr>
 800bd4a:	b108      	cbz	r0, 800bd50 <_printf_i+0x1bc>
 800bd4c:	1b40      	subs	r0, r0, r5
 800bd4e:	6060      	str	r0, [r4, #4]
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	6123      	str	r3, [r4, #16]
 800bd54:	2300      	movs	r3, #0
 800bd56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd5a:	e7a7      	b.n	800bcac <_printf_i+0x118>
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	462a      	mov	r2, r5
 800bd60:	4639      	mov	r1, r7
 800bd62:	4630      	mov	r0, r6
 800bd64:	47c0      	blx	r8
 800bd66:	3001      	adds	r0, #1
 800bd68:	d0aa      	beq.n	800bcc0 <_printf_i+0x12c>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	079b      	lsls	r3, r3, #30
 800bd6e:	d413      	bmi.n	800bd98 <_printf_i+0x204>
 800bd70:	68e0      	ldr	r0, [r4, #12]
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	4298      	cmp	r0, r3
 800bd76:	bfb8      	it	lt
 800bd78:	4618      	movlt	r0, r3
 800bd7a:	e7a3      	b.n	800bcc4 <_printf_i+0x130>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	464a      	mov	r2, r9
 800bd80:	4639      	mov	r1, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d09a      	beq.n	800bcc0 <_printf_i+0x12c>
 800bd8a:	3501      	adds	r5, #1
 800bd8c:	68e3      	ldr	r3, [r4, #12]
 800bd8e:	9a03      	ldr	r2, [sp, #12]
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	42ab      	cmp	r3, r5
 800bd94:	dcf2      	bgt.n	800bd7c <_printf_i+0x1e8>
 800bd96:	e7eb      	b.n	800bd70 <_printf_i+0x1dc>
 800bd98:	2500      	movs	r5, #0
 800bd9a:	f104 0919 	add.w	r9, r4, #25
 800bd9e:	e7f5      	b.n	800bd8c <_printf_i+0x1f8>
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1ac      	bne.n	800bcfe <_printf_i+0x16a>
 800bda4:	7803      	ldrb	r3, [r0, #0]
 800bda6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdae:	e76c      	b.n	800bc8a <_printf_i+0xf6>
 800bdb0:	0800f01e 	.word	0x0800f01e
 800bdb4:	0800f02f 	.word	0x0800f02f

0800bdb8 <_scanf_float>:
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	469a      	mov	sl, r3
 800bdbe:	688b      	ldr	r3, [r1, #8]
 800bdc0:	4616      	mov	r6, r2
 800bdc2:	1e5a      	subs	r2, r3, #1
 800bdc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdc8:	b087      	sub	sp, #28
 800bdca:	bf83      	ittte	hi
 800bdcc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800bdd0:	189b      	addhi	r3, r3, r2
 800bdd2:	9301      	strhi	r3, [sp, #4]
 800bdd4:	2300      	movls	r3, #0
 800bdd6:	bf86      	itte	hi
 800bdd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bddc:	608b      	strhi	r3, [r1, #8]
 800bdde:	9301      	strls	r3, [sp, #4]
 800bde0:	680b      	ldr	r3, [r1, #0]
 800bde2:	4688      	mov	r8, r1
 800bde4:	f04f 0b00 	mov.w	fp, #0
 800bde8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bdec:	f848 3b1c 	str.w	r3, [r8], #28
 800bdf0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	4645      	mov	r5, r8
 800bdfa:	465a      	mov	r2, fp
 800bdfc:	46d9      	mov	r9, fp
 800bdfe:	f8cd b008 	str.w	fp, [sp, #8]
 800be02:	68a1      	ldr	r1, [r4, #8]
 800be04:	b181      	cbz	r1, 800be28 <_scanf_float+0x70>
 800be06:	6833      	ldr	r3, [r6, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b49      	cmp	r3, #73	; 0x49
 800be0c:	d071      	beq.n	800bef2 <_scanf_float+0x13a>
 800be0e:	d84d      	bhi.n	800beac <_scanf_float+0xf4>
 800be10:	2b39      	cmp	r3, #57	; 0x39
 800be12:	d840      	bhi.n	800be96 <_scanf_float+0xde>
 800be14:	2b31      	cmp	r3, #49	; 0x31
 800be16:	f080 8088 	bcs.w	800bf2a <_scanf_float+0x172>
 800be1a:	2b2d      	cmp	r3, #45	; 0x2d
 800be1c:	f000 8090 	beq.w	800bf40 <_scanf_float+0x188>
 800be20:	d815      	bhi.n	800be4e <_scanf_float+0x96>
 800be22:	2b2b      	cmp	r3, #43	; 0x2b
 800be24:	f000 808c 	beq.w	800bf40 <_scanf_float+0x188>
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	d003      	beq.n	800be36 <_scanf_float+0x7e>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	3a01      	subs	r2, #1
 800be38:	2a01      	cmp	r2, #1
 800be3a:	f200 80ea 	bhi.w	800c012 <_scanf_float+0x25a>
 800be3e:	4545      	cmp	r5, r8
 800be40:	f200 80dc 	bhi.w	800bffc <_scanf_float+0x244>
 800be44:	2601      	movs	r6, #1
 800be46:	4630      	mov	r0, r6
 800be48:	b007      	add	sp, #28
 800be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	2b2e      	cmp	r3, #46	; 0x2e
 800be50:	f000 809f 	beq.w	800bf92 <_scanf_float+0x1da>
 800be54:	2b30      	cmp	r3, #48	; 0x30
 800be56:	d1e7      	bne.n	800be28 <_scanf_float+0x70>
 800be58:	6820      	ldr	r0, [r4, #0]
 800be5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800be5e:	d064      	beq.n	800bf2a <_scanf_float+0x172>
 800be60:	9b01      	ldr	r3, [sp, #4]
 800be62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800be66:	6020      	str	r0, [r4, #0]
 800be68:	f109 0901 	add.w	r9, r9, #1
 800be6c:	b11b      	cbz	r3, 800be76 <_scanf_float+0xbe>
 800be6e:	3b01      	subs	r3, #1
 800be70:	3101      	adds	r1, #1
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	60a1      	str	r1, [r4, #8]
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	3b01      	subs	r3, #1
 800be7a:	60a3      	str	r3, [r4, #8]
 800be7c:	6923      	ldr	r3, [r4, #16]
 800be7e:	3301      	adds	r3, #1
 800be80:	6123      	str	r3, [r4, #16]
 800be82:	6873      	ldr	r3, [r6, #4]
 800be84:	3b01      	subs	r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	6073      	str	r3, [r6, #4]
 800be8a:	f340 80ac 	ble.w	800bfe6 <_scanf_float+0x22e>
 800be8e:	6833      	ldr	r3, [r6, #0]
 800be90:	3301      	adds	r3, #1
 800be92:	6033      	str	r3, [r6, #0]
 800be94:	e7b5      	b.n	800be02 <_scanf_float+0x4a>
 800be96:	2b45      	cmp	r3, #69	; 0x45
 800be98:	f000 8085 	beq.w	800bfa6 <_scanf_float+0x1ee>
 800be9c:	2b46      	cmp	r3, #70	; 0x46
 800be9e:	d06a      	beq.n	800bf76 <_scanf_float+0x1be>
 800bea0:	2b41      	cmp	r3, #65	; 0x41
 800bea2:	d1c1      	bne.n	800be28 <_scanf_float+0x70>
 800bea4:	2a01      	cmp	r2, #1
 800bea6:	d1bf      	bne.n	800be28 <_scanf_float+0x70>
 800bea8:	2202      	movs	r2, #2
 800beaa:	e046      	b.n	800bf3a <_scanf_float+0x182>
 800beac:	2b65      	cmp	r3, #101	; 0x65
 800beae:	d07a      	beq.n	800bfa6 <_scanf_float+0x1ee>
 800beb0:	d818      	bhi.n	800bee4 <_scanf_float+0x12c>
 800beb2:	2b54      	cmp	r3, #84	; 0x54
 800beb4:	d066      	beq.n	800bf84 <_scanf_float+0x1cc>
 800beb6:	d811      	bhi.n	800bedc <_scanf_float+0x124>
 800beb8:	2b4e      	cmp	r3, #78	; 0x4e
 800beba:	d1b5      	bne.n	800be28 <_scanf_float+0x70>
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	d146      	bne.n	800bf4e <_scanf_float+0x196>
 800bec0:	f1b9 0f00 	cmp.w	r9, #0
 800bec4:	d145      	bne.n	800bf52 <_scanf_float+0x19a>
 800bec6:	6821      	ldr	r1, [r4, #0]
 800bec8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800becc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bed0:	d13f      	bne.n	800bf52 <_scanf_float+0x19a>
 800bed2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bed6:	6021      	str	r1, [r4, #0]
 800bed8:	2201      	movs	r2, #1
 800beda:	e02e      	b.n	800bf3a <_scanf_float+0x182>
 800bedc:	2b59      	cmp	r3, #89	; 0x59
 800bede:	d01e      	beq.n	800bf1e <_scanf_float+0x166>
 800bee0:	2b61      	cmp	r3, #97	; 0x61
 800bee2:	e7de      	b.n	800bea2 <_scanf_float+0xea>
 800bee4:	2b6e      	cmp	r3, #110	; 0x6e
 800bee6:	d0e9      	beq.n	800bebc <_scanf_float+0x104>
 800bee8:	d815      	bhi.n	800bf16 <_scanf_float+0x15e>
 800beea:	2b66      	cmp	r3, #102	; 0x66
 800beec:	d043      	beq.n	800bf76 <_scanf_float+0x1be>
 800beee:	2b69      	cmp	r3, #105	; 0x69
 800bef0:	d19a      	bne.n	800be28 <_scanf_float+0x70>
 800bef2:	f1bb 0f00 	cmp.w	fp, #0
 800bef6:	d138      	bne.n	800bf6a <_scanf_float+0x1b2>
 800bef8:	f1b9 0f00 	cmp.w	r9, #0
 800befc:	d197      	bne.n	800be2e <_scanf_float+0x76>
 800befe:	6821      	ldr	r1, [r4, #0]
 800bf00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bf04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bf08:	d195      	bne.n	800be36 <_scanf_float+0x7e>
 800bf0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bf0e:	6021      	str	r1, [r4, #0]
 800bf10:	f04f 0b01 	mov.w	fp, #1
 800bf14:	e011      	b.n	800bf3a <_scanf_float+0x182>
 800bf16:	2b74      	cmp	r3, #116	; 0x74
 800bf18:	d034      	beq.n	800bf84 <_scanf_float+0x1cc>
 800bf1a:	2b79      	cmp	r3, #121	; 0x79
 800bf1c:	d184      	bne.n	800be28 <_scanf_float+0x70>
 800bf1e:	f1bb 0f07 	cmp.w	fp, #7
 800bf22:	d181      	bne.n	800be28 <_scanf_float+0x70>
 800bf24:	f04f 0b08 	mov.w	fp, #8
 800bf28:	e007      	b.n	800bf3a <_scanf_float+0x182>
 800bf2a:	eb12 0f0b 	cmn.w	r2, fp
 800bf2e:	f47f af7b 	bne.w	800be28 <_scanf_float+0x70>
 800bf32:	6821      	ldr	r1, [r4, #0]
 800bf34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bf38:	6021      	str	r1, [r4, #0]
 800bf3a:	702b      	strb	r3, [r5, #0]
 800bf3c:	3501      	adds	r5, #1
 800bf3e:	e79a      	b.n	800be76 <_scanf_float+0xbe>
 800bf40:	6821      	ldr	r1, [r4, #0]
 800bf42:	0608      	lsls	r0, r1, #24
 800bf44:	f57f af70 	bpl.w	800be28 <_scanf_float+0x70>
 800bf48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bf4c:	e7f4      	b.n	800bf38 <_scanf_float+0x180>
 800bf4e:	2a02      	cmp	r2, #2
 800bf50:	d047      	beq.n	800bfe2 <_scanf_float+0x22a>
 800bf52:	f1bb 0f01 	cmp.w	fp, #1
 800bf56:	d003      	beq.n	800bf60 <_scanf_float+0x1a8>
 800bf58:	f1bb 0f04 	cmp.w	fp, #4
 800bf5c:	f47f af64 	bne.w	800be28 <_scanf_float+0x70>
 800bf60:	f10b 0b01 	add.w	fp, fp, #1
 800bf64:	fa5f fb8b 	uxtb.w	fp, fp
 800bf68:	e7e7      	b.n	800bf3a <_scanf_float+0x182>
 800bf6a:	f1bb 0f03 	cmp.w	fp, #3
 800bf6e:	d0f7      	beq.n	800bf60 <_scanf_float+0x1a8>
 800bf70:	f1bb 0f05 	cmp.w	fp, #5
 800bf74:	e7f2      	b.n	800bf5c <_scanf_float+0x1a4>
 800bf76:	f1bb 0f02 	cmp.w	fp, #2
 800bf7a:	f47f af55 	bne.w	800be28 <_scanf_float+0x70>
 800bf7e:	f04f 0b03 	mov.w	fp, #3
 800bf82:	e7da      	b.n	800bf3a <_scanf_float+0x182>
 800bf84:	f1bb 0f06 	cmp.w	fp, #6
 800bf88:	f47f af4e 	bne.w	800be28 <_scanf_float+0x70>
 800bf8c:	f04f 0b07 	mov.w	fp, #7
 800bf90:	e7d3      	b.n	800bf3a <_scanf_float+0x182>
 800bf92:	6821      	ldr	r1, [r4, #0]
 800bf94:	0588      	lsls	r0, r1, #22
 800bf96:	f57f af47 	bpl.w	800be28 <_scanf_float+0x70>
 800bf9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bf9e:	6021      	str	r1, [r4, #0]
 800bfa0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfa4:	e7c9      	b.n	800bf3a <_scanf_float+0x182>
 800bfa6:	6821      	ldr	r1, [r4, #0]
 800bfa8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bfac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bfb0:	d006      	beq.n	800bfc0 <_scanf_float+0x208>
 800bfb2:	0548      	lsls	r0, r1, #21
 800bfb4:	f57f af38 	bpl.w	800be28 <_scanf_float+0x70>
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	f43f af3b 	beq.w	800be36 <_scanf_float+0x7e>
 800bfc0:	0588      	lsls	r0, r1, #22
 800bfc2:	bf58      	it	pl
 800bfc4:	9802      	ldrpl	r0, [sp, #8]
 800bfc6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bfca:	bf58      	it	pl
 800bfcc:	eba9 0000 	subpl.w	r0, r9, r0
 800bfd0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bfd4:	bf58      	it	pl
 800bfd6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bfda:	6021      	str	r1, [r4, #0]
 800bfdc:	f04f 0900 	mov.w	r9, #0
 800bfe0:	e7ab      	b.n	800bf3a <_scanf_float+0x182>
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	e7a9      	b.n	800bf3a <_scanf_float+0x182>
 800bfe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfea:	9205      	str	r2, [sp, #20]
 800bfec:	4631      	mov	r1, r6
 800bfee:	4638      	mov	r0, r7
 800bff0:	4798      	blx	r3
 800bff2:	9a05      	ldr	r2, [sp, #20]
 800bff4:	2800      	cmp	r0, #0
 800bff6:	f43f af04 	beq.w	800be02 <_scanf_float+0x4a>
 800bffa:	e715      	b.n	800be28 <_scanf_float+0x70>
 800bffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c000:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c004:	4632      	mov	r2, r6
 800c006:	4638      	mov	r0, r7
 800c008:	4798      	blx	r3
 800c00a:	6923      	ldr	r3, [r4, #16]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	e715      	b.n	800be3e <_scanf_float+0x86>
 800c012:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c016:	2b06      	cmp	r3, #6
 800c018:	d80a      	bhi.n	800c030 <_scanf_float+0x278>
 800c01a:	f1bb 0f02 	cmp.w	fp, #2
 800c01e:	d968      	bls.n	800c0f2 <_scanf_float+0x33a>
 800c020:	f1ab 0b03 	sub.w	fp, fp, #3
 800c024:	fa5f fb8b 	uxtb.w	fp, fp
 800c028:	eba5 0b0b 	sub.w	fp, r5, fp
 800c02c:	455d      	cmp	r5, fp
 800c02e:	d14b      	bne.n	800c0c8 <_scanf_float+0x310>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	05da      	lsls	r2, r3, #23
 800c034:	d51f      	bpl.n	800c076 <_scanf_float+0x2be>
 800c036:	055b      	lsls	r3, r3, #21
 800c038:	d468      	bmi.n	800c10c <_scanf_float+0x354>
 800c03a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	2965      	cmp	r1, #101	; 0x65
 800c042:	f103 33ff 	add.w	r3, r3, #4294967295
 800c046:	f105 3bff 	add.w	fp, r5, #4294967295
 800c04a:	6123      	str	r3, [r4, #16]
 800c04c:	d00d      	beq.n	800c06a <_scanf_float+0x2b2>
 800c04e:	2945      	cmp	r1, #69	; 0x45
 800c050:	d00b      	beq.n	800c06a <_scanf_float+0x2b2>
 800c052:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c056:	4632      	mov	r2, r6
 800c058:	4638      	mov	r0, r7
 800c05a:	4798      	blx	r3
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c062:	3b01      	subs	r3, #1
 800c064:	f1a5 0b02 	sub.w	fp, r5, #2
 800c068:	6123      	str	r3, [r4, #16]
 800c06a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c06e:	4632      	mov	r2, r6
 800c070:	4638      	mov	r0, r7
 800c072:	4798      	blx	r3
 800c074:	465d      	mov	r5, fp
 800c076:	6826      	ldr	r6, [r4, #0]
 800c078:	f016 0610 	ands.w	r6, r6, #16
 800c07c:	d17a      	bne.n	800c174 <_scanf_float+0x3bc>
 800c07e:	702e      	strb	r6, [r5, #0]
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c08a:	d142      	bne.n	800c112 <_scanf_float+0x35a>
 800c08c:	9b02      	ldr	r3, [sp, #8]
 800c08e:	eba9 0303 	sub.w	r3, r9, r3
 800c092:	425a      	negs	r2, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d149      	bne.n	800c12c <_scanf_float+0x374>
 800c098:	2200      	movs	r2, #0
 800c09a:	4641      	mov	r1, r8
 800c09c:	4638      	mov	r0, r7
 800c09e:	f000 feab 	bl	800cdf8 <_strtod_r>
 800c0a2:	6825      	ldr	r5, [r4, #0]
 800c0a4:	f8da 3000 	ldr.w	r3, [sl]
 800c0a8:	f015 0f02 	tst.w	r5, #2
 800c0ac:	f103 0204 	add.w	r2, r3, #4
 800c0b0:	ec59 8b10 	vmov	r8, r9, d0
 800c0b4:	f8ca 2000 	str.w	r2, [sl]
 800c0b8:	d043      	beq.n	800c142 <_scanf_float+0x38a>
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	e9c3 8900 	strd	r8, r9, [r3]
 800c0c0:	68e3      	ldr	r3, [r4, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	60e3      	str	r3, [r4, #12]
 800c0c6:	e6be      	b.n	800be46 <_scanf_float+0x8e>
 800c0c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	4798      	blx	r3
 800c0d6:	6923      	ldr	r3, [r4, #16]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	e7a6      	b.n	800c02c <_scanf_float+0x274>
 800c0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	4798      	blx	r3
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	4545      	cmp	r5, r8
 800c0f4:	d8f3      	bhi.n	800c0de <_scanf_float+0x326>
 800c0f6:	e6a5      	b.n	800be44 <_scanf_float+0x8c>
 800c0f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c100:	4632      	mov	r2, r6
 800c102:	4638      	mov	r0, r7
 800c104:	4798      	blx	r3
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	3b01      	subs	r3, #1
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	4545      	cmp	r5, r8
 800c10e:	d8f3      	bhi.n	800c0f8 <_scanf_float+0x340>
 800c110:	e698      	b.n	800be44 <_scanf_float+0x8c>
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0bf      	beq.n	800c098 <_scanf_float+0x2e0>
 800c118:	9904      	ldr	r1, [sp, #16]
 800c11a:	230a      	movs	r3, #10
 800c11c:	4632      	mov	r2, r6
 800c11e:	3101      	adds	r1, #1
 800c120:	4638      	mov	r0, r7
 800c122:	f000 fef5 	bl	800cf10 <_strtol_r>
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	9d04      	ldr	r5, [sp, #16]
 800c12a:	1ac2      	subs	r2, r0, r3
 800c12c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c130:	429d      	cmp	r5, r3
 800c132:	bf28      	it	cs
 800c134:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c138:	490f      	ldr	r1, [pc, #60]	; (800c178 <_scanf_float+0x3c0>)
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 f824 	bl	800c188 <siprintf>
 800c140:	e7aa      	b.n	800c098 <_scanf_float+0x2e0>
 800c142:	f015 0504 	ands.w	r5, r5, #4
 800c146:	d1b8      	bne.n	800c0ba <_scanf_float+0x302>
 800c148:	681f      	ldr	r7, [r3, #0]
 800c14a:	ee10 2a10 	vmov	r2, s0
 800c14e:	464b      	mov	r3, r9
 800c150:	ee10 0a10 	vmov	r0, s0
 800c154:	4649      	mov	r1, r9
 800c156:	f7f4 fcf1 	bl	8000b3c <__aeabi_dcmpun>
 800c15a:	b128      	cbz	r0, 800c168 <_scanf_float+0x3b0>
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 f80d 	bl	800c17c <nanf>
 800c162:	ed87 0a00 	vstr	s0, [r7]
 800c166:	e7ab      	b.n	800c0c0 <_scanf_float+0x308>
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	f7f4 fd44 	bl	8000bf8 <__aeabi_d2f>
 800c170:	6038      	str	r0, [r7, #0]
 800c172:	e7a5      	b.n	800c0c0 <_scanf_float+0x308>
 800c174:	2600      	movs	r6, #0
 800c176:	e666      	b.n	800be46 <_scanf_float+0x8e>
 800c178:	0800f040 	.word	0x0800f040

0800c17c <nanf>:
 800c17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c184 <nanf+0x8>
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	7fc00000 	.word	0x7fc00000

0800c188 <siprintf>:
 800c188:	b40e      	push	{r1, r2, r3}
 800c18a:	b500      	push	{lr}
 800c18c:	b09c      	sub	sp, #112	; 0x70
 800c18e:	ab1d      	add	r3, sp, #116	; 0x74
 800c190:	9002      	str	r0, [sp, #8]
 800c192:	9006      	str	r0, [sp, #24]
 800c194:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c198:	4809      	ldr	r0, [pc, #36]	; (800c1c0 <siprintf+0x38>)
 800c19a:	9107      	str	r1, [sp, #28]
 800c19c:	9104      	str	r1, [sp, #16]
 800c19e:	4909      	ldr	r1, [pc, #36]	; (800c1c4 <siprintf+0x3c>)
 800c1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a4:	9105      	str	r1, [sp, #20]
 800c1a6:	6800      	ldr	r0, [r0, #0]
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	a902      	add	r1, sp, #8
 800c1ac:	f002 fd6c 	bl	800ec88 <_svfiprintf_r>
 800c1b0:	9b02      	ldr	r3, [sp, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	b01c      	add	sp, #112	; 0x70
 800c1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1bc:	b003      	add	sp, #12
 800c1be:	4770      	bx	lr
 800c1c0:	200002cc 	.word	0x200002cc
 800c1c4:	ffff0208 	.word	0xffff0208

0800c1c8 <strcpy>:
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ce:	f803 2b01 	strb.w	r2, [r3], #1
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	d1f9      	bne.n	800c1ca <strcpy+0x2>
 800c1d6:	4770      	bx	lr

0800c1d8 <sulp>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	460d      	mov	r5, r1
 800c1de:	ec45 4b10 	vmov	d0, r4, r5
 800c1e2:	4616      	mov	r6, r2
 800c1e4:	f002 fb0c 	bl	800e800 <__ulp>
 800c1e8:	ec51 0b10 	vmov	r0, r1, d0
 800c1ec:	b17e      	cbz	r6, 800c20e <sulp+0x36>
 800c1ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dd09      	ble.n	800c20e <sulp+0x36>
 800c1fa:	051b      	lsls	r3, r3, #20
 800c1fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c200:	2400      	movs	r4, #0
 800c202:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c206:	4622      	mov	r2, r4
 800c208:	462b      	mov	r3, r5
 800c20a:	f7f4 f9fd 	bl	8000608 <__aeabi_dmul>
 800c20e:	bd70      	pop	{r4, r5, r6, pc}

0800c210 <_strtod_l>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	461f      	mov	r7, r3
 800c216:	b0a1      	sub	sp, #132	; 0x84
 800c218:	2300      	movs	r3, #0
 800c21a:	4681      	mov	r9, r0
 800c21c:	4638      	mov	r0, r7
 800c21e:	460e      	mov	r6, r1
 800c220:	9217      	str	r2, [sp, #92]	; 0x5c
 800c222:	931c      	str	r3, [sp, #112]	; 0x70
 800c224:	f001 fff5 	bl	800e212 <__localeconv_l>
 800c228:	4680      	mov	r8, r0
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	f7f3 ffd8 	bl	80001e0 <strlen>
 800c230:	f04f 0a00 	mov.w	sl, #0
 800c234:	4604      	mov	r4, r0
 800c236:	f04f 0b00 	mov.w	fp, #0
 800c23a:	961b      	str	r6, [sp, #108]	; 0x6c
 800c23c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c23e:	781a      	ldrb	r2, [r3, #0]
 800c240:	2a0d      	cmp	r2, #13
 800c242:	d832      	bhi.n	800c2aa <_strtod_l+0x9a>
 800c244:	2a09      	cmp	r2, #9
 800c246:	d236      	bcs.n	800c2b6 <_strtod_l+0xa6>
 800c248:	2a00      	cmp	r2, #0
 800c24a:	d03e      	beq.n	800c2ca <_strtod_l+0xba>
 800c24c:	2300      	movs	r3, #0
 800c24e:	930d      	str	r3, [sp, #52]	; 0x34
 800c250:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c252:	782b      	ldrb	r3, [r5, #0]
 800c254:	2b30      	cmp	r3, #48	; 0x30
 800c256:	f040 80ac 	bne.w	800c3b2 <_strtod_l+0x1a2>
 800c25a:	786b      	ldrb	r3, [r5, #1]
 800c25c:	2b58      	cmp	r3, #88	; 0x58
 800c25e:	d001      	beq.n	800c264 <_strtod_l+0x54>
 800c260:	2b78      	cmp	r3, #120	; 0x78
 800c262:	d167      	bne.n	800c334 <_strtod_l+0x124>
 800c264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	ab1c      	add	r3, sp, #112	; 0x70
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	9702      	str	r7, [sp, #8]
 800c26e:	ab1d      	add	r3, sp, #116	; 0x74
 800c270:	4a88      	ldr	r2, [pc, #544]	; (800c494 <_strtod_l+0x284>)
 800c272:	a91b      	add	r1, sp, #108	; 0x6c
 800c274:	4648      	mov	r0, r9
 800c276:	f001 fcf2 	bl	800dc5e <__gethex>
 800c27a:	f010 0407 	ands.w	r4, r0, #7
 800c27e:	4606      	mov	r6, r0
 800c280:	d005      	beq.n	800c28e <_strtod_l+0x7e>
 800c282:	2c06      	cmp	r4, #6
 800c284:	d12b      	bne.n	800c2de <_strtod_l+0xce>
 800c286:	3501      	adds	r5, #1
 800c288:	2300      	movs	r3, #0
 800c28a:	951b      	str	r5, [sp, #108]	; 0x6c
 800c28c:	930d      	str	r3, [sp, #52]	; 0x34
 800c28e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c290:	2b00      	cmp	r3, #0
 800c292:	f040 859a 	bne.w	800cdca <_strtod_l+0xbba>
 800c296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c298:	b1e3      	cbz	r3, 800c2d4 <_strtod_l+0xc4>
 800c29a:	4652      	mov	r2, sl
 800c29c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c2a0:	ec43 2b10 	vmov	d0, r2, r3
 800c2a4:	b021      	add	sp, #132	; 0x84
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	2a2b      	cmp	r2, #43	; 0x2b
 800c2ac:	d015      	beq.n	800c2da <_strtod_l+0xca>
 800c2ae:	2a2d      	cmp	r2, #45	; 0x2d
 800c2b0:	d004      	beq.n	800c2bc <_strtod_l+0xac>
 800c2b2:	2a20      	cmp	r2, #32
 800c2b4:	d1ca      	bne.n	800c24c <_strtod_l+0x3c>
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2ba:	e7bf      	b.n	800c23c <_strtod_l+0x2c>
 800c2bc:	2201      	movs	r2, #1
 800c2be:	920d      	str	r2, [sp, #52]	; 0x34
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1c2      	bne.n	800c250 <_strtod_l+0x40>
 800c2ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2cc:	961b      	str	r6, [sp, #108]	; 0x6c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 8579 	bne.w	800cdc6 <_strtod_l+0xbb6>
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	e7e2      	b.n	800c2a0 <_strtod_l+0x90>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	e7ef      	b.n	800c2be <_strtod_l+0xae>
 800c2de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c2e0:	b13a      	cbz	r2, 800c2f2 <_strtod_l+0xe2>
 800c2e2:	2135      	movs	r1, #53	; 0x35
 800c2e4:	a81e      	add	r0, sp, #120	; 0x78
 800c2e6:	f002 fb83 	bl	800e9f0 <__copybits>
 800c2ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f001 ffef 	bl	800e2d0 <_Bfree>
 800c2f2:	3c01      	subs	r4, #1
 800c2f4:	2c04      	cmp	r4, #4
 800c2f6:	d806      	bhi.n	800c306 <_strtod_l+0xf6>
 800c2f8:	e8df f004 	tbb	[pc, r4]
 800c2fc:	1714030a 	.word	0x1714030a
 800c300:	0a          	.byte	0x0a
 800c301:	00          	.byte	0x00
 800c302:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c306:	0730      	lsls	r0, r6, #28
 800c308:	d5c1      	bpl.n	800c28e <_strtod_l+0x7e>
 800c30a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c30e:	e7be      	b.n	800c28e <_strtod_l+0x7e>
 800c310:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c314:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c31a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c31e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c322:	e7f0      	b.n	800c306 <_strtod_l+0xf6>
 800c324:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c498 <_strtod_l+0x288>
 800c328:	e7ed      	b.n	800c306 <_strtod_l+0xf6>
 800c32a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c32e:	f04f 3aff 	mov.w	sl, #4294967295
 800c332:	e7e8      	b.n	800c306 <_strtod_l+0xf6>
 800c334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c336:	1c5a      	adds	r2, r3, #1
 800c338:	921b      	str	r2, [sp, #108]	; 0x6c
 800c33a:	785b      	ldrb	r3, [r3, #1]
 800c33c:	2b30      	cmp	r3, #48	; 0x30
 800c33e:	d0f9      	beq.n	800c334 <_strtod_l+0x124>
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0a4      	beq.n	800c28e <_strtod_l+0x7e>
 800c344:	2301      	movs	r3, #1
 800c346:	2500      	movs	r5, #0
 800c348:	9306      	str	r3, [sp, #24]
 800c34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c34c:	9308      	str	r3, [sp, #32]
 800c34e:	9507      	str	r5, [sp, #28]
 800c350:	9505      	str	r5, [sp, #20]
 800c352:	220a      	movs	r2, #10
 800c354:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c356:	7807      	ldrb	r7, [r0, #0]
 800c358:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c35c:	b2d9      	uxtb	r1, r3
 800c35e:	2909      	cmp	r1, #9
 800c360:	d929      	bls.n	800c3b6 <_strtod_l+0x1a6>
 800c362:	4622      	mov	r2, r4
 800c364:	f8d8 1000 	ldr.w	r1, [r8]
 800c368:	f002 fd96 	bl	800ee98 <strncmp>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d031      	beq.n	800c3d4 <_strtod_l+0x1c4>
 800c370:	2000      	movs	r0, #0
 800c372:	9c05      	ldr	r4, [sp, #20]
 800c374:	9004      	str	r0, [sp, #16]
 800c376:	463b      	mov	r3, r7
 800c378:	4602      	mov	r2, r0
 800c37a:	2b65      	cmp	r3, #101	; 0x65
 800c37c:	d001      	beq.n	800c382 <_strtod_l+0x172>
 800c37e:	2b45      	cmp	r3, #69	; 0x45
 800c380:	d114      	bne.n	800c3ac <_strtod_l+0x19c>
 800c382:	b924      	cbnz	r4, 800c38e <_strtod_l+0x17e>
 800c384:	b910      	cbnz	r0, 800c38c <_strtod_l+0x17c>
 800c386:	9b06      	ldr	r3, [sp, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d09e      	beq.n	800c2ca <_strtod_l+0xba>
 800c38c:	2400      	movs	r4, #0
 800c38e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c390:	1c73      	adds	r3, r6, #1
 800c392:	931b      	str	r3, [sp, #108]	; 0x6c
 800c394:	7873      	ldrb	r3, [r6, #1]
 800c396:	2b2b      	cmp	r3, #43	; 0x2b
 800c398:	d078      	beq.n	800c48c <_strtod_l+0x27c>
 800c39a:	2b2d      	cmp	r3, #45	; 0x2d
 800c39c:	d070      	beq.n	800c480 <_strtod_l+0x270>
 800c39e:	f04f 0c00 	mov.w	ip, #0
 800c3a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c3a6:	2f09      	cmp	r7, #9
 800c3a8:	d97c      	bls.n	800c4a4 <_strtod_l+0x294>
 800c3aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800c3ac:	f04f 0e00 	mov.w	lr, #0
 800c3b0:	e09a      	b.n	800c4e8 <_strtod_l+0x2d8>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e7c7      	b.n	800c346 <_strtod_l+0x136>
 800c3b6:	9905      	ldr	r1, [sp, #20]
 800c3b8:	2908      	cmp	r1, #8
 800c3ba:	bfdd      	ittte	le
 800c3bc:	9907      	ldrle	r1, [sp, #28]
 800c3be:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3c2:	9307      	strle	r3, [sp, #28]
 800c3c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c3c8:	9b05      	ldr	r3, [sp, #20]
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	901b      	str	r0, [sp, #108]	; 0x6c
 800c3d2:	e7bf      	b.n	800c354 <_strtod_l+0x144>
 800c3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3d6:	191a      	adds	r2, r3, r4
 800c3d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3da:	9a05      	ldr	r2, [sp, #20]
 800c3dc:	5d1b      	ldrb	r3, [r3, r4]
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	d037      	beq.n	800c452 <_strtod_l+0x242>
 800c3e2:	9c05      	ldr	r4, [sp, #20]
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c3ea:	2909      	cmp	r1, #9
 800c3ec:	d913      	bls.n	800c416 <_strtod_l+0x206>
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	9104      	str	r1, [sp, #16]
 800c3f2:	e7c2      	b.n	800c37a <_strtod_l+0x16a>
 800c3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3fa:	785b      	ldrb	r3, [r3, #1]
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	2b30      	cmp	r3, #48	; 0x30
 800c400:	d0f8      	beq.n	800c3f4 <_strtod_l+0x1e4>
 800c402:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c406:	2a08      	cmp	r2, #8
 800c408:	f200 84e4 	bhi.w	800cdd4 <_strtod_l+0xbc4>
 800c40c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c40e:	9208      	str	r2, [sp, #32]
 800c410:	4602      	mov	r2, r0
 800c412:	2000      	movs	r0, #0
 800c414:	4604      	mov	r4, r0
 800c416:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c41a:	f100 0101 	add.w	r1, r0, #1
 800c41e:	d012      	beq.n	800c446 <_strtod_l+0x236>
 800c420:	440a      	add	r2, r1
 800c422:	eb00 0c04 	add.w	ip, r0, r4
 800c426:	4621      	mov	r1, r4
 800c428:	270a      	movs	r7, #10
 800c42a:	458c      	cmp	ip, r1
 800c42c:	d113      	bne.n	800c456 <_strtod_l+0x246>
 800c42e:	1821      	adds	r1, r4, r0
 800c430:	2908      	cmp	r1, #8
 800c432:	f104 0401 	add.w	r4, r4, #1
 800c436:	4404      	add	r4, r0
 800c438:	dc19      	bgt.n	800c46e <_strtod_l+0x25e>
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	210a      	movs	r1, #10
 800c43e:	fb01 e303 	mla	r3, r1, r3, lr
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	2100      	movs	r1, #0
 800c446:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c448:	1c58      	adds	r0, r3, #1
 800c44a:	901b      	str	r0, [sp, #108]	; 0x6c
 800c44c:	785b      	ldrb	r3, [r3, #1]
 800c44e:	4608      	mov	r0, r1
 800c450:	e7c9      	b.n	800c3e6 <_strtod_l+0x1d6>
 800c452:	9805      	ldr	r0, [sp, #20]
 800c454:	e7d3      	b.n	800c3fe <_strtod_l+0x1ee>
 800c456:	2908      	cmp	r1, #8
 800c458:	f101 0101 	add.w	r1, r1, #1
 800c45c:	dc03      	bgt.n	800c466 <_strtod_l+0x256>
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	437b      	muls	r3, r7
 800c462:	9307      	str	r3, [sp, #28]
 800c464:	e7e1      	b.n	800c42a <_strtod_l+0x21a>
 800c466:	2910      	cmp	r1, #16
 800c468:	bfd8      	it	le
 800c46a:	437d      	mulle	r5, r7
 800c46c:	e7dd      	b.n	800c42a <_strtod_l+0x21a>
 800c46e:	2c10      	cmp	r4, #16
 800c470:	bfdc      	itt	le
 800c472:	210a      	movle	r1, #10
 800c474:	fb01 e505 	mlale	r5, r1, r5, lr
 800c478:	e7e4      	b.n	800c444 <_strtod_l+0x234>
 800c47a:	2301      	movs	r3, #1
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	e781      	b.n	800c384 <_strtod_l+0x174>
 800c480:	f04f 0c01 	mov.w	ip, #1
 800c484:	1cb3      	adds	r3, r6, #2
 800c486:	931b      	str	r3, [sp, #108]	; 0x6c
 800c488:	78b3      	ldrb	r3, [r6, #2]
 800c48a:	e78a      	b.n	800c3a2 <_strtod_l+0x192>
 800c48c:	f04f 0c00 	mov.w	ip, #0
 800c490:	e7f8      	b.n	800c484 <_strtod_l+0x274>
 800c492:	bf00      	nop
 800c494:	0800f048 	.word	0x0800f048
 800c498:	7ff00000 	.word	0x7ff00000
 800c49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c49e:	1c5f      	adds	r7, r3, #1
 800c4a0:	971b      	str	r7, [sp, #108]	; 0x6c
 800c4a2:	785b      	ldrb	r3, [r3, #1]
 800c4a4:	2b30      	cmp	r3, #48	; 0x30
 800c4a6:	d0f9      	beq.n	800c49c <_strtod_l+0x28c>
 800c4a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c4ac:	2f08      	cmp	r7, #8
 800c4ae:	f63f af7d 	bhi.w	800c3ac <_strtod_l+0x19c>
 800c4b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c4b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4bc:	1c5f      	adds	r7, r3, #1
 800c4be:	971b      	str	r7, [sp, #108]	; 0x6c
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c4c6:	f1b8 0f09 	cmp.w	r8, #9
 800c4ca:	d937      	bls.n	800c53c <_strtod_l+0x32c>
 800c4cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c4ce:	1a7f      	subs	r7, r7, r1
 800c4d0:	2f08      	cmp	r7, #8
 800c4d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c4d6:	dc37      	bgt.n	800c548 <_strtod_l+0x338>
 800c4d8:	45be      	cmp	lr, r7
 800c4da:	bfa8      	it	ge
 800c4dc:	46be      	movge	lr, r7
 800c4de:	f1bc 0f00 	cmp.w	ip, #0
 800c4e2:	d001      	beq.n	800c4e8 <_strtod_l+0x2d8>
 800c4e4:	f1ce 0e00 	rsb	lr, lr, #0
 800c4e8:	2c00      	cmp	r4, #0
 800c4ea:	d151      	bne.n	800c590 <_strtod_l+0x380>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	f47f aece 	bne.w	800c28e <_strtod_l+0x7e>
 800c4f2:	9a06      	ldr	r2, [sp, #24]
 800c4f4:	2a00      	cmp	r2, #0
 800c4f6:	f47f aeca 	bne.w	800c28e <_strtod_l+0x7e>
 800c4fa:	9a04      	ldr	r2, [sp, #16]
 800c4fc:	2a00      	cmp	r2, #0
 800c4fe:	f47f aee4 	bne.w	800c2ca <_strtod_l+0xba>
 800c502:	2b4e      	cmp	r3, #78	; 0x4e
 800c504:	d027      	beq.n	800c556 <_strtod_l+0x346>
 800c506:	dc21      	bgt.n	800c54c <_strtod_l+0x33c>
 800c508:	2b49      	cmp	r3, #73	; 0x49
 800c50a:	f47f aede 	bne.w	800c2ca <_strtod_l+0xba>
 800c50e:	49a0      	ldr	r1, [pc, #640]	; (800c790 <_strtod_l+0x580>)
 800c510:	a81b      	add	r0, sp, #108	; 0x6c
 800c512:	f001 fdd7 	bl	800e0c4 <__match>
 800c516:	2800      	cmp	r0, #0
 800c518:	f43f aed7 	beq.w	800c2ca <_strtod_l+0xba>
 800c51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c51e:	499d      	ldr	r1, [pc, #628]	; (800c794 <_strtod_l+0x584>)
 800c520:	3b01      	subs	r3, #1
 800c522:	a81b      	add	r0, sp, #108	; 0x6c
 800c524:	931b      	str	r3, [sp, #108]	; 0x6c
 800c526:	f001 fdcd 	bl	800e0c4 <__match>
 800c52a:	b910      	cbnz	r0, 800c532 <_strtod_l+0x322>
 800c52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c52e:	3301      	adds	r3, #1
 800c530:	931b      	str	r3, [sp, #108]	; 0x6c
 800c532:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c7a8 <_strtod_l+0x598>
 800c536:	f04f 0a00 	mov.w	sl, #0
 800c53a:	e6a8      	b.n	800c28e <_strtod_l+0x7e>
 800c53c:	210a      	movs	r1, #10
 800c53e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c542:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c546:	e7b8      	b.n	800c4ba <_strtod_l+0x2aa>
 800c548:	46be      	mov	lr, r7
 800c54a:	e7c8      	b.n	800c4de <_strtod_l+0x2ce>
 800c54c:	2b69      	cmp	r3, #105	; 0x69
 800c54e:	d0de      	beq.n	800c50e <_strtod_l+0x2fe>
 800c550:	2b6e      	cmp	r3, #110	; 0x6e
 800c552:	f47f aeba 	bne.w	800c2ca <_strtod_l+0xba>
 800c556:	4990      	ldr	r1, [pc, #576]	; (800c798 <_strtod_l+0x588>)
 800c558:	a81b      	add	r0, sp, #108	; 0x6c
 800c55a:	f001 fdb3 	bl	800e0c4 <__match>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f43f aeb3 	beq.w	800c2ca <_strtod_l+0xba>
 800c564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b28      	cmp	r3, #40	; 0x28
 800c56a:	d10e      	bne.n	800c58a <_strtod_l+0x37a>
 800c56c:	aa1e      	add	r2, sp, #120	; 0x78
 800c56e:	498b      	ldr	r1, [pc, #556]	; (800c79c <_strtod_l+0x58c>)
 800c570:	a81b      	add	r0, sp, #108	; 0x6c
 800c572:	f001 fdbb 	bl	800e0ec <__hexnan>
 800c576:	2805      	cmp	r0, #5
 800c578:	d107      	bne.n	800c58a <_strtod_l+0x37a>
 800c57a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c57c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c580:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c584:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c588:	e681      	b.n	800c28e <_strtod_l+0x7e>
 800c58a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c7b0 <_strtod_l+0x5a0>
 800c58e:	e7d2      	b.n	800c536 <_strtod_l+0x326>
 800c590:	ebae 0302 	sub.w	r3, lr, r2
 800c594:	9306      	str	r3, [sp, #24]
 800c596:	9b05      	ldr	r3, [sp, #20]
 800c598:	9807      	ldr	r0, [sp, #28]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bf08      	it	eq
 800c59e:	4623      	moveq	r3, r4
 800c5a0:	2c10      	cmp	r4, #16
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	46a0      	mov	r8, r4
 800c5a6:	bfa8      	it	ge
 800c5a8:	f04f 0810 	movge.w	r8, #16
 800c5ac:	f7f3 ffb2 	bl	8000514 <__aeabi_ui2d>
 800c5b0:	2c09      	cmp	r4, #9
 800c5b2:	4682      	mov	sl, r0
 800c5b4:	468b      	mov	fp, r1
 800c5b6:	dc13      	bgt.n	800c5e0 <_strtod_l+0x3d0>
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f43f ae67 	beq.w	800c28e <_strtod_l+0x7e>
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	dd7a      	ble.n	800c6ba <_strtod_l+0x4aa>
 800c5c4:	2b16      	cmp	r3, #22
 800c5c6:	dc61      	bgt.n	800c68c <_strtod_l+0x47c>
 800c5c8:	4a75      	ldr	r2, [pc, #468]	; (800c7a0 <_strtod_l+0x590>)
 800c5ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c5ce:	e9de 0100 	ldrd	r0, r1, [lr]
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	465b      	mov	r3, fp
 800c5d6:	f7f4 f817 	bl	8000608 <__aeabi_dmul>
 800c5da:	4682      	mov	sl, r0
 800c5dc:	468b      	mov	fp, r1
 800c5de:	e656      	b.n	800c28e <_strtod_l+0x7e>
 800c5e0:	4b6f      	ldr	r3, [pc, #444]	; (800c7a0 <_strtod_l+0x590>)
 800c5e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c5e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5ea:	f7f4 f80d 	bl	8000608 <__aeabi_dmul>
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	f7f3 ff8e 	bl	8000514 <__aeabi_ui2d>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	4639      	mov	r1, r7
 800c600:	f7f3 fe4c 	bl	800029c <__adddf3>
 800c604:	2c0f      	cmp	r4, #15
 800c606:	4682      	mov	sl, r0
 800c608:	468b      	mov	fp, r1
 800c60a:	ddd5      	ble.n	800c5b8 <_strtod_l+0x3a8>
 800c60c:	9b06      	ldr	r3, [sp, #24]
 800c60e:	eba4 0808 	sub.w	r8, r4, r8
 800c612:	4498      	add	r8, r3
 800c614:	f1b8 0f00 	cmp.w	r8, #0
 800c618:	f340 8096 	ble.w	800c748 <_strtod_l+0x538>
 800c61c:	f018 030f 	ands.w	r3, r8, #15
 800c620:	d00a      	beq.n	800c638 <_strtod_l+0x428>
 800c622:	495f      	ldr	r1, [pc, #380]	; (800c7a0 <_strtod_l+0x590>)
 800c624:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c628:	4652      	mov	r2, sl
 800c62a:	465b      	mov	r3, fp
 800c62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c630:	f7f3 ffea 	bl	8000608 <__aeabi_dmul>
 800c634:	4682      	mov	sl, r0
 800c636:	468b      	mov	fp, r1
 800c638:	f038 080f 	bics.w	r8, r8, #15
 800c63c:	d073      	beq.n	800c726 <_strtod_l+0x516>
 800c63e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c642:	dd47      	ble.n	800c6d4 <_strtod_l+0x4c4>
 800c644:	2400      	movs	r4, #0
 800c646:	46a0      	mov	r8, r4
 800c648:	9407      	str	r4, [sp, #28]
 800c64a:	9405      	str	r4, [sp, #20]
 800c64c:	2322      	movs	r3, #34	; 0x22
 800c64e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c7a8 <_strtod_l+0x598>
 800c652:	f8c9 3000 	str.w	r3, [r9]
 800c656:	f04f 0a00 	mov.w	sl, #0
 800c65a:	9b07      	ldr	r3, [sp, #28]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f43f ae16 	beq.w	800c28e <_strtod_l+0x7e>
 800c662:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c664:	4648      	mov	r0, r9
 800c666:	f001 fe33 	bl	800e2d0 <_Bfree>
 800c66a:	9905      	ldr	r1, [sp, #20]
 800c66c:	4648      	mov	r0, r9
 800c66e:	f001 fe2f 	bl	800e2d0 <_Bfree>
 800c672:	4641      	mov	r1, r8
 800c674:	4648      	mov	r0, r9
 800c676:	f001 fe2b 	bl	800e2d0 <_Bfree>
 800c67a:	9907      	ldr	r1, [sp, #28]
 800c67c:	4648      	mov	r0, r9
 800c67e:	f001 fe27 	bl	800e2d0 <_Bfree>
 800c682:	4621      	mov	r1, r4
 800c684:	4648      	mov	r0, r9
 800c686:	f001 fe23 	bl	800e2d0 <_Bfree>
 800c68a:	e600      	b.n	800c28e <_strtod_l+0x7e>
 800c68c:	9a06      	ldr	r2, [sp, #24]
 800c68e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c692:	4293      	cmp	r3, r2
 800c694:	dbba      	blt.n	800c60c <_strtod_l+0x3fc>
 800c696:	4d42      	ldr	r5, [pc, #264]	; (800c7a0 <_strtod_l+0x590>)
 800c698:	f1c4 040f 	rsb	r4, r4, #15
 800c69c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a8:	f7f3 ffae 	bl	8000608 <__aeabi_dmul>
 800c6ac:	9b06      	ldr	r3, [sp, #24]
 800c6ae:	1b1c      	subs	r4, r3, r4
 800c6b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c6b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6b8:	e78d      	b.n	800c5d6 <_strtod_l+0x3c6>
 800c6ba:	f113 0f16 	cmn.w	r3, #22
 800c6be:	dba5      	blt.n	800c60c <_strtod_l+0x3fc>
 800c6c0:	4a37      	ldr	r2, [pc, #220]	; (800c7a0 <_strtod_l+0x590>)
 800c6c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c6c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c6ca:	4650      	mov	r0, sl
 800c6cc:	4659      	mov	r1, fp
 800c6ce:	f7f4 f8c5 	bl	800085c <__aeabi_ddiv>
 800c6d2:	e782      	b.n	800c5da <_strtod_l+0x3ca>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4e33      	ldr	r6, [pc, #204]	; (800c7a4 <_strtod_l+0x594>)
 800c6d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	461d      	mov	r5, r3
 800c6e2:	f1b8 0f01 	cmp.w	r8, #1
 800c6e6:	dc21      	bgt.n	800c72c <_strtod_l+0x51c>
 800c6e8:	b10b      	cbz	r3, 800c6ee <_strtod_l+0x4de>
 800c6ea:	4682      	mov	sl, r0
 800c6ec:	468b      	mov	fp, r1
 800c6ee:	4b2d      	ldr	r3, [pc, #180]	; (800c7a4 <_strtod_l+0x594>)
 800c6f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c6f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	465b      	mov	r3, fp
 800c6fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c700:	f7f3 ff82 	bl	8000608 <__aeabi_dmul>
 800c704:	4b28      	ldr	r3, [pc, #160]	; (800c7a8 <_strtod_l+0x598>)
 800c706:	460a      	mov	r2, r1
 800c708:	400b      	ands	r3, r1
 800c70a:	4928      	ldr	r1, [pc, #160]	; (800c7ac <_strtod_l+0x59c>)
 800c70c:	428b      	cmp	r3, r1
 800c70e:	4682      	mov	sl, r0
 800c710:	d898      	bhi.n	800c644 <_strtod_l+0x434>
 800c712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c716:	428b      	cmp	r3, r1
 800c718:	bf86      	itte	hi
 800c71a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c7b4 <_strtod_l+0x5a4>
 800c71e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c722:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c726:	2300      	movs	r3, #0
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	e077      	b.n	800c81c <_strtod_l+0x60c>
 800c72c:	f018 0f01 	tst.w	r8, #1
 800c730:	d006      	beq.n	800c740 <_strtod_l+0x530>
 800c732:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 ff65 	bl	8000608 <__aeabi_dmul>
 800c73e:	2301      	movs	r3, #1
 800c740:	3501      	adds	r5, #1
 800c742:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c746:	e7cc      	b.n	800c6e2 <_strtod_l+0x4d2>
 800c748:	d0ed      	beq.n	800c726 <_strtod_l+0x516>
 800c74a:	f1c8 0800 	rsb	r8, r8, #0
 800c74e:	f018 020f 	ands.w	r2, r8, #15
 800c752:	d00a      	beq.n	800c76a <_strtod_l+0x55a>
 800c754:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <_strtod_l+0x590>)
 800c756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c75a:	4650      	mov	r0, sl
 800c75c:	4659      	mov	r1, fp
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f4 f87b 	bl	800085c <__aeabi_ddiv>
 800c766:	4682      	mov	sl, r0
 800c768:	468b      	mov	fp, r1
 800c76a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c76e:	d0da      	beq.n	800c726 <_strtod_l+0x516>
 800c770:	f1b8 0f1f 	cmp.w	r8, #31
 800c774:	dd20      	ble.n	800c7b8 <_strtod_l+0x5a8>
 800c776:	2400      	movs	r4, #0
 800c778:	46a0      	mov	r8, r4
 800c77a:	9407      	str	r4, [sp, #28]
 800c77c:	9405      	str	r4, [sp, #20]
 800c77e:	2322      	movs	r3, #34	; 0x22
 800c780:	f04f 0a00 	mov.w	sl, #0
 800c784:	f04f 0b00 	mov.w	fp, #0
 800c788:	f8c9 3000 	str.w	r3, [r9]
 800c78c:	e765      	b.n	800c65a <_strtod_l+0x44a>
 800c78e:	bf00      	nop
 800c790:	0800f011 	.word	0x0800f011
 800c794:	0800f09b 	.word	0x0800f09b
 800c798:	0800f019 	.word	0x0800f019
 800c79c:	0800f05c 	.word	0x0800f05c
 800c7a0:	0800f0d8 	.word	0x0800f0d8
 800c7a4:	0800f0b0 	.word	0x0800f0b0
 800c7a8:	7ff00000 	.word	0x7ff00000
 800c7ac:	7ca00000 	.word	0x7ca00000
 800c7b0:	fff80000 	.word	0xfff80000
 800c7b4:	7fefffff 	.word	0x7fefffff
 800c7b8:	f018 0310 	ands.w	r3, r8, #16
 800c7bc:	bf18      	it	ne
 800c7be:	236a      	movne	r3, #106	; 0x6a
 800c7c0:	4da0      	ldr	r5, [pc, #640]	; (800ca44 <_strtod_l+0x834>)
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	4650      	mov	r0, sl
 800c7c6:	4659      	mov	r1, fp
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f1b8 0f00 	cmp.w	r8, #0
 800c7ce:	f300 810a 	bgt.w	800c9e6 <_strtod_l+0x7d6>
 800c7d2:	b10b      	cbz	r3, 800c7d8 <_strtod_l+0x5c8>
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	468b      	mov	fp, r1
 800c7d8:	9b04      	ldr	r3, [sp, #16]
 800c7da:	b1bb      	cbz	r3, 800c80c <_strtod_l+0x5fc>
 800c7dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c7e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	4659      	mov	r1, fp
 800c7e8:	dd10      	ble.n	800c80c <_strtod_l+0x5fc>
 800c7ea:	2b1f      	cmp	r3, #31
 800c7ec:	f340 8107 	ble.w	800c9fe <_strtod_l+0x7ee>
 800c7f0:	2b34      	cmp	r3, #52	; 0x34
 800c7f2:	bfde      	ittt	le
 800c7f4:	3b20      	suble	r3, #32
 800c7f6:	f04f 32ff 	movle.w	r2, #4294967295
 800c7fa:	fa02 f303 	lslle.w	r3, r2, r3
 800c7fe:	f04f 0a00 	mov.w	sl, #0
 800c802:	bfcc      	ite	gt
 800c804:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c808:	ea03 0b01 	andle.w	fp, r3, r1
 800c80c:	2200      	movs	r2, #0
 800c80e:	2300      	movs	r3, #0
 800c810:	4650      	mov	r0, sl
 800c812:	4659      	mov	r1, fp
 800c814:	f7f4 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d1ac      	bne.n	800c776 <_strtod_l+0x566>
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	9a05      	ldr	r2, [sp, #20]
 800c822:	9908      	ldr	r1, [sp, #32]
 800c824:	4623      	mov	r3, r4
 800c826:	4648      	mov	r0, r9
 800c828:	f001 fda4 	bl	800e374 <__s2b>
 800c82c:	9007      	str	r0, [sp, #28]
 800c82e:	2800      	cmp	r0, #0
 800c830:	f43f af08 	beq.w	800c644 <_strtod_l+0x434>
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	9b06      	ldr	r3, [sp, #24]
 800c838:	2a00      	cmp	r2, #0
 800c83a:	f1c3 0300 	rsb	r3, r3, #0
 800c83e:	bfa8      	it	ge
 800c840:	2300      	movge	r3, #0
 800c842:	930e      	str	r3, [sp, #56]	; 0x38
 800c844:	2400      	movs	r4, #0
 800c846:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c84a:	9316      	str	r3, [sp, #88]	; 0x58
 800c84c:	46a0      	mov	r8, r4
 800c84e:	9b07      	ldr	r3, [sp, #28]
 800c850:	4648      	mov	r0, r9
 800c852:	6859      	ldr	r1, [r3, #4]
 800c854:	f001 fd08 	bl	800e268 <_Balloc>
 800c858:	9005      	str	r0, [sp, #20]
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f43f aef6 	beq.w	800c64c <_strtod_l+0x43c>
 800c860:	9b07      	ldr	r3, [sp, #28]
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	3202      	adds	r2, #2
 800c866:	f103 010c 	add.w	r1, r3, #12
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	300c      	adds	r0, #12
 800c86e:	f7fe fe33 	bl	800b4d8 <memcpy>
 800c872:	aa1e      	add	r2, sp, #120	; 0x78
 800c874:	a91d      	add	r1, sp, #116	; 0x74
 800c876:	ec4b ab10 	vmov	d0, sl, fp
 800c87a:	4648      	mov	r0, r9
 800c87c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c880:	f002 f834 	bl	800e8ec <__d2b>
 800c884:	901c      	str	r0, [sp, #112]	; 0x70
 800c886:	2800      	cmp	r0, #0
 800c888:	f43f aee0 	beq.w	800c64c <_strtod_l+0x43c>
 800c88c:	2101      	movs	r1, #1
 800c88e:	4648      	mov	r0, r9
 800c890:	f001 fdfc 	bl	800e48c <__i2b>
 800c894:	4680      	mov	r8, r0
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f aed8 	beq.w	800c64c <_strtod_l+0x43c>
 800c89c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c89e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c8a0:	2e00      	cmp	r6, #0
 800c8a2:	bfab      	itete	ge
 800c8a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c8a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c8a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c8aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c8ac:	bfac      	ite	ge
 800c8ae:	18f7      	addge	r7, r6, r3
 800c8b0:	1b9d      	sublt	r5, r3, r6
 800c8b2:	9b04      	ldr	r3, [sp, #16]
 800c8b4:	1af6      	subs	r6, r6, r3
 800c8b6:	4416      	add	r6, r2
 800c8b8:	4b63      	ldr	r3, [pc, #396]	; (800ca48 <_strtod_l+0x838>)
 800c8ba:	3e01      	subs	r6, #1
 800c8bc:	429e      	cmp	r6, r3
 800c8be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8c2:	f280 80af 	bge.w	800ca24 <_strtod_l+0x814>
 800c8c6:	1b9b      	subs	r3, r3, r6
 800c8c8:	2b1f      	cmp	r3, #31
 800c8ca:	eba2 0203 	sub.w	r2, r2, r3
 800c8ce:	f04f 0101 	mov.w	r1, #1
 800c8d2:	f300 809b 	bgt.w	800ca0c <_strtod_l+0x7fc>
 800c8d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8da:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8dc:	2300      	movs	r3, #0
 800c8de:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e0:	18be      	adds	r6, r7, r2
 800c8e2:	9b04      	ldr	r3, [sp, #16]
 800c8e4:	42b7      	cmp	r7, r6
 800c8e6:	4415      	add	r5, r2
 800c8e8:	441d      	add	r5, r3
 800c8ea:	463b      	mov	r3, r7
 800c8ec:	bfa8      	it	ge
 800c8ee:	4633      	movge	r3, r6
 800c8f0:	42ab      	cmp	r3, r5
 800c8f2:	bfa8      	it	ge
 800c8f4:	462b      	movge	r3, r5
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfc2      	ittt	gt
 800c8fa:	1af6      	subgt	r6, r6, r3
 800c8fc:	1aed      	subgt	r5, r5, r3
 800c8fe:	1aff      	subgt	r7, r7, r3
 800c900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c902:	b1bb      	cbz	r3, 800c934 <_strtod_l+0x724>
 800c904:	4641      	mov	r1, r8
 800c906:	461a      	mov	r2, r3
 800c908:	4648      	mov	r0, r9
 800c90a:	f001 fe5f 	bl	800e5cc <__pow5mult>
 800c90e:	4680      	mov	r8, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	f43f ae9b 	beq.w	800c64c <_strtod_l+0x43c>
 800c916:	4601      	mov	r1, r0
 800c918:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c91a:	4648      	mov	r0, r9
 800c91c:	f001 fdbf 	bl	800e49e <__multiply>
 800c920:	900c      	str	r0, [sp, #48]	; 0x30
 800c922:	2800      	cmp	r0, #0
 800c924:	f43f ae92 	beq.w	800c64c <_strtod_l+0x43c>
 800c928:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c92a:	4648      	mov	r0, r9
 800c92c:	f001 fcd0 	bl	800e2d0 <_Bfree>
 800c930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c932:	931c      	str	r3, [sp, #112]	; 0x70
 800c934:	2e00      	cmp	r6, #0
 800c936:	dc7a      	bgt.n	800ca2e <_strtod_l+0x81e>
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dd08      	ble.n	800c950 <_strtod_l+0x740>
 800c93e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c940:	9905      	ldr	r1, [sp, #20]
 800c942:	4648      	mov	r0, r9
 800c944:	f001 fe42 	bl	800e5cc <__pow5mult>
 800c948:	9005      	str	r0, [sp, #20]
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f43f ae7e 	beq.w	800c64c <_strtod_l+0x43c>
 800c950:	2d00      	cmp	r5, #0
 800c952:	dd08      	ble.n	800c966 <_strtod_l+0x756>
 800c954:	462a      	mov	r2, r5
 800c956:	9905      	ldr	r1, [sp, #20]
 800c958:	4648      	mov	r0, r9
 800c95a:	f001 fe85 	bl	800e668 <__lshift>
 800c95e:	9005      	str	r0, [sp, #20]
 800c960:	2800      	cmp	r0, #0
 800c962:	f43f ae73 	beq.w	800c64c <_strtod_l+0x43c>
 800c966:	2f00      	cmp	r7, #0
 800c968:	dd08      	ble.n	800c97c <_strtod_l+0x76c>
 800c96a:	4641      	mov	r1, r8
 800c96c:	463a      	mov	r2, r7
 800c96e:	4648      	mov	r0, r9
 800c970:	f001 fe7a 	bl	800e668 <__lshift>
 800c974:	4680      	mov	r8, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f ae68 	beq.w	800c64c <_strtod_l+0x43c>
 800c97c:	9a05      	ldr	r2, [sp, #20]
 800c97e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c980:	4648      	mov	r0, r9
 800c982:	f001 fedf 	bl	800e744 <__mdiff>
 800c986:	4604      	mov	r4, r0
 800c988:	2800      	cmp	r0, #0
 800c98a:	f43f ae5f 	beq.w	800c64c <_strtod_l+0x43c>
 800c98e:	68c3      	ldr	r3, [r0, #12]
 800c990:	930c      	str	r3, [sp, #48]	; 0x30
 800c992:	2300      	movs	r3, #0
 800c994:	60c3      	str	r3, [r0, #12]
 800c996:	4641      	mov	r1, r8
 800c998:	f001 feba 	bl	800e710 <__mcmp>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	da55      	bge.n	800ca4c <_strtod_l+0x83c>
 800c9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9a2:	b9e3      	cbnz	r3, 800c9de <_strtod_l+0x7ce>
 800c9a4:	f1ba 0f00 	cmp.w	sl, #0
 800c9a8:	d119      	bne.n	800c9de <_strtod_l+0x7ce>
 800c9aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9ae:	b9b3      	cbnz	r3, 800c9de <_strtod_l+0x7ce>
 800c9b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9b4:	0d1b      	lsrs	r3, r3, #20
 800c9b6:	051b      	lsls	r3, r3, #20
 800c9b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9bc:	d90f      	bls.n	800c9de <_strtod_l+0x7ce>
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	b913      	cbnz	r3, 800c9c8 <_strtod_l+0x7b8>
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	dd0a      	ble.n	800c9de <_strtod_l+0x7ce>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f001 fe4b 	bl	800e668 <__lshift>
 800c9d2:	4641      	mov	r1, r8
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	f001 fe9b 	bl	800e710 <__mcmp>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	dc67      	bgt.n	800caae <_strtod_l+0x89e>
 800c9de:	9b04      	ldr	r3, [sp, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d171      	bne.n	800cac8 <_strtod_l+0x8b8>
 800c9e4:	e63d      	b.n	800c662 <_strtod_l+0x452>
 800c9e6:	f018 0f01 	tst.w	r8, #1
 800c9ea:	d004      	beq.n	800c9f6 <_strtod_l+0x7e6>
 800c9ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9f0:	f7f3 fe0a 	bl	8000608 <__aeabi_dmul>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9fa:	3508      	adds	r5, #8
 800c9fc:	e6e5      	b.n	800c7ca <_strtod_l+0x5ba>
 800c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ca02:	fa02 f303 	lsl.w	r3, r2, r3
 800ca06:	ea03 0a0a 	and.w	sl, r3, sl
 800ca0a:	e6ff      	b.n	800c80c <_strtod_l+0x5fc>
 800ca0c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ca10:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ca14:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ca18:	36e2      	adds	r6, #226	; 0xe2
 800ca1a:	fa01 f306 	lsl.w	r3, r1, r6
 800ca1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca20:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca22:	e75d      	b.n	800c8e0 <_strtod_l+0x6d0>
 800ca24:	2300      	movs	r3, #0
 800ca26:	930a      	str	r3, [sp, #40]	; 0x28
 800ca28:	2301      	movs	r3, #1
 800ca2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca2c:	e758      	b.n	800c8e0 <_strtod_l+0x6d0>
 800ca2e:	4632      	mov	r2, r6
 800ca30:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca32:	4648      	mov	r0, r9
 800ca34:	f001 fe18 	bl	800e668 <__lshift>
 800ca38:	901c      	str	r0, [sp, #112]	; 0x70
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	f47f af7c 	bne.w	800c938 <_strtod_l+0x728>
 800ca40:	e604      	b.n	800c64c <_strtod_l+0x43c>
 800ca42:	bf00      	nop
 800ca44:	0800f070 	.word	0x0800f070
 800ca48:	fffffc02 	.word	0xfffffc02
 800ca4c:	465d      	mov	r5, fp
 800ca4e:	f040 8086 	bne.w	800cb5e <_strtod_l+0x94e>
 800ca52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca58:	b32a      	cbz	r2, 800caa6 <_strtod_l+0x896>
 800ca5a:	4aaf      	ldr	r2, [pc, #700]	; (800cd18 <_strtod_l+0xb08>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d153      	bne.n	800cb08 <_strtod_l+0x8f8>
 800ca60:	9b04      	ldr	r3, [sp, #16]
 800ca62:	4650      	mov	r0, sl
 800ca64:	b1d3      	cbz	r3, 800ca9c <_strtod_l+0x88c>
 800ca66:	4aad      	ldr	r2, [pc, #692]	; (800cd1c <_strtod_l+0xb0c>)
 800ca68:	402a      	ands	r2, r5
 800ca6a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ca6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ca72:	d816      	bhi.n	800caa2 <_strtod_l+0x892>
 800ca74:	0d12      	lsrs	r2, r2, #20
 800ca76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ca7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca7e:	4298      	cmp	r0, r3
 800ca80:	d142      	bne.n	800cb08 <_strtod_l+0x8f8>
 800ca82:	4ba7      	ldr	r3, [pc, #668]	; (800cd20 <_strtod_l+0xb10>)
 800ca84:	429d      	cmp	r5, r3
 800ca86:	d102      	bne.n	800ca8e <_strtod_l+0x87e>
 800ca88:	3001      	adds	r0, #1
 800ca8a:	f43f addf 	beq.w	800c64c <_strtod_l+0x43c>
 800ca8e:	4ba3      	ldr	r3, [pc, #652]	; (800cd1c <_strtod_l+0xb0c>)
 800ca90:	402b      	ands	r3, r5
 800ca92:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ca96:	f04f 0a00 	mov.w	sl, #0
 800ca9a:	e7a0      	b.n	800c9de <_strtod_l+0x7ce>
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 800caa0:	e7ed      	b.n	800ca7e <_strtod_l+0x86e>
 800caa2:	460b      	mov	r3, r1
 800caa4:	e7eb      	b.n	800ca7e <_strtod_l+0x86e>
 800caa6:	bb7b      	cbnz	r3, 800cb08 <_strtod_l+0x8f8>
 800caa8:	f1ba 0f00 	cmp.w	sl, #0
 800caac:	d12c      	bne.n	800cb08 <_strtod_l+0x8f8>
 800caae:	9904      	ldr	r1, [sp, #16]
 800cab0:	4a9a      	ldr	r2, [pc, #616]	; (800cd1c <_strtod_l+0xb0c>)
 800cab2:	465b      	mov	r3, fp
 800cab4:	b1f1      	cbz	r1, 800caf4 <_strtod_l+0x8e4>
 800cab6:	ea02 010b 	and.w	r1, r2, fp
 800caba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cabe:	dc19      	bgt.n	800caf4 <_strtod_l+0x8e4>
 800cac0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cac4:	f77f ae5b 	ble.w	800c77e <_strtod_l+0x56e>
 800cac8:	4a96      	ldr	r2, [pc, #600]	; (800cd24 <_strtod_l+0xb14>)
 800caca:	2300      	movs	r3, #0
 800cacc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cad0:	4650      	mov	r0, sl
 800cad2:	4659      	mov	r1, fp
 800cad4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cad8:	f7f3 fd96 	bl	8000608 <__aeabi_dmul>
 800cadc:	4682      	mov	sl, r0
 800cade:	468b      	mov	fp, r1
 800cae0:	2900      	cmp	r1, #0
 800cae2:	f47f adbe 	bne.w	800c662 <_strtod_l+0x452>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	f47f adbb 	bne.w	800c662 <_strtod_l+0x452>
 800caec:	2322      	movs	r3, #34	; 0x22
 800caee:	f8c9 3000 	str.w	r3, [r9]
 800caf2:	e5b6      	b.n	800c662 <_strtod_l+0x452>
 800caf4:	4013      	ands	r3, r2
 800caf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cafa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cafe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb02:	f04f 3aff 	mov.w	sl, #4294967295
 800cb06:	e76a      	b.n	800c9de <_strtod_l+0x7ce>
 800cb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0a:	b193      	cbz	r3, 800cb32 <_strtod_l+0x922>
 800cb0c:	422b      	tst	r3, r5
 800cb0e:	f43f af66 	beq.w	800c9de <_strtod_l+0x7ce>
 800cb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	4650      	mov	r0, sl
 800cb18:	4659      	mov	r1, fp
 800cb1a:	b173      	cbz	r3, 800cb3a <_strtod_l+0x92a>
 800cb1c:	f7ff fb5c 	bl	800c1d8 <sulp>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb28:	f7f3 fbb8 	bl	800029c <__adddf3>
 800cb2c:	4682      	mov	sl, r0
 800cb2e:	468b      	mov	fp, r1
 800cb30:	e755      	b.n	800c9de <_strtod_l+0x7ce>
 800cb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb34:	ea13 0f0a 	tst.w	r3, sl
 800cb38:	e7e9      	b.n	800cb0e <_strtod_l+0x8fe>
 800cb3a:	f7ff fb4d 	bl	800c1d8 <sulp>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb46:	f7f3 fba7 	bl	8000298 <__aeabi_dsub>
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4682      	mov	sl, r0
 800cb50:	468b      	mov	fp, r1
 800cb52:	f7f3 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f47f ae11 	bne.w	800c77e <_strtod_l+0x56e>
 800cb5c:	e73f      	b.n	800c9de <_strtod_l+0x7ce>
 800cb5e:	4641      	mov	r1, r8
 800cb60:	4620      	mov	r0, r4
 800cb62:	f001 ff12 	bl	800e98a <__ratio>
 800cb66:	ec57 6b10 	vmov	r6, r7, d0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb70:	ee10 0a10 	vmov	r0, s0
 800cb74:	4639      	mov	r1, r7
 800cb76:	f7f3 ffc3 	bl	8000b00 <__aeabi_dcmple>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d077      	beq.n	800cc6e <_strtod_l+0xa5e>
 800cb7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d04a      	beq.n	800cc1a <_strtod_l+0xa0a>
 800cb84:	4b68      	ldr	r3, [pc, #416]	; (800cd28 <_strtod_l+0xb18>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb8c:	4f66      	ldr	r7, [pc, #408]	; (800cd28 <_strtod_l+0xb18>)
 800cb8e:	2600      	movs	r6, #0
 800cb90:	4b62      	ldr	r3, [pc, #392]	; (800cd1c <_strtod_l+0xb0c>)
 800cb92:	402b      	ands	r3, r5
 800cb94:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb98:	4b64      	ldr	r3, [pc, #400]	; (800cd2c <_strtod_l+0xb1c>)
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	f040 80ce 	bne.w	800cd3c <_strtod_l+0xb2c>
 800cba0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cba8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800cbac:	ec4b ab10 	vmov	d0, sl, fp
 800cbb0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cbb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cbb8:	f001 fe22 	bl	800e800 <__ulp>
 800cbbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cbc0:	ec53 2b10 	vmov	r2, r3, d0
 800cbc4:	f7f3 fd20 	bl	8000608 <__aeabi_dmul>
 800cbc8:	4652      	mov	r2, sl
 800cbca:	465b      	mov	r3, fp
 800cbcc:	f7f3 fb66 	bl	800029c <__adddf3>
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4952      	ldr	r1, [pc, #328]	; (800cd1c <_strtod_l+0xb0c>)
 800cbd4:	4a56      	ldr	r2, [pc, #344]	; (800cd30 <_strtod_l+0xb20>)
 800cbd6:	4019      	ands	r1, r3
 800cbd8:	4291      	cmp	r1, r2
 800cbda:	4682      	mov	sl, r0
 800cbdc:	d95b      	bls.n	800cc96 <_strtod_l+0xa86>
 800cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d103      	bne.n	800cbf0 <_strtod_l+0x9e0>
 800cbe8:	9b08      	ldr	r3, [sp, #32]
 800cbea:	3301      	adds	r3, #1
 800cbec:	f43f ad2e 	beq.w	800c64c <_strtod_l+0x43c>
 800cbf0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cd20 <_strtod_l+0xb10>
 800cbf4:	f04f 3aff 	mov.w	sl, #4294967295
 800cbf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbfa:	4648      	mov	r0, r9
 800cbfc:	f001 fb68 	bl	800e2d0 <_Bfree>
 800cc00:	9905      	ldr	r1, [sp, #20]
 800cc02:	4648      	mov	r0, r9
 800cc04:	f001 fb64 	bl	800e2d0 <_Bfree>
 800cc08:	4641      	mov	r1, r8
 800cc0a:	4648      	mov	r0, r9
 800cc0c:	f001 fb60 	bl	800e2d0 <_Bfree>
 800cc10:	4621      	mov	r1, r4
 800cc12:	4648      	mov	r0, r9
 800cc14:	f001 fb5c 	bl	800e2d0 <_Bfree>
 800cc18:	e619      	b.n	800c84e <_strtod_l+0x63e>
 800cc1a:	f1ba 0f00 	cmp.w	sl, #0
 800cc1e:	d11a      	bne.n	800cc56 <_strtod_l+0xa46>
 800cc20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc24:	b9eb      	cbnz	r3, 800cc62 <_strtod_l+0xa52>
 800cc26:	2200      	movs	r2, #0
 800cc28:	4b3f      	ldr	r3, [pc, #252]	; (800cd28 <_strtod_l+0xb18>)
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	f7f3 ff5d 	bl	8000aec <__aeabi_dcmplt>
 800cc32:	b9c8      	cbnz	r0, 800cc68 <_strtod_l+0xa58>
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	2200      	movs	r2, #0
 800cc3a:	4b3e      	ldr	r3, [pc, #248]	; (800cd34 <_strtod_l+0xb24>)
 800cc3c:	f7f3 fce4 	bl	8000608 <__aeabi_dmul>
 800cc40:	4606      	mov	r6, r0
 800cc42:	460f      	mov	r7, r1
 800cc44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cc48:	9618      	str	r6, [sp, #96]	; 0x60
 800cc4a:	9319      	str	r3, [sp, #100]	; 0x64
 800cc4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cc50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cc54:	e79c      	b.n	800cb90 <_strtod_l+0x980>
 800cc56:	f1ba 0f01 	cmp.w	sl, #1
 800cc5a:	d102      	bne.n	800cc62 <_strtod_l+0xa52>
 800cc5c:	2d00      	cmp	r5, #0
 800cc5e:	f43f ad8e 	beq.w	800c77e <_strtod_l+0x56e>
 800cc62:	2200      	movs	r2, #0
 800cc64:	4b34      	ldr	r3, [pc, #208]	; (800cd38 <_strtod_l+0xb28>)
 800cc66:	e78f      	b.n	800cb88 <_strtod_l+0x978>
 800cc68:	2600      	movs	r6, #0
 800cc6a:	4f32      	ldr	r7, [pc, #200]	; (800cd34 <_strtod_l+0xb24>)
 800cc6c:	e7ea      	b.n	800cc44 <_strtod_l+0xa34>
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <_strtod_l+0xb24>)
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	2200      	movs	r2, #0
 800cc76:	f7f3 fcc7 	bl	8000608 <__aeabi_dmul>
 800cc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	460f      	mov	r7, r1
 800cc80:	b933      	cbnz	r3, 800cc90 <_strtod_l+0xa80>
 800cc82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc86:	9010      	str	r0, [sp, #64]	; 0x40
 800cc88:	9311      	str	r3, [sp, #68]	; 0x44
 800cc8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc8e:	e7df      	b.n	800cc50 <_strtod_l+0xa40>
 800cc90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cc94:	e7f9      	b.n	800cc8a <_strtod_l+0xa7a>
 800cc96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cc9a:	9b04      	ldr	r3, [sp, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1ab      	bne.n	800cbf8 <_strtod_l+0x9e8>
 800cca0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cca4:	0d1b      	lsrs	r3, r3, #20
 800cca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cca8:	051b      	lsls	r3, r3, #20
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	465d      	mov	r5, fp
 800ccae:	d1a3      	bne.n	800cbf8 <_strtod_l+0x9e8>
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7f3 ff58 	bl	8000b68 <__aeabi_d2iz>
 800ccb8:	f7f3 fc3c 	bl	8000534 <__aeabi_i2d>
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	4639      	mov	r1, r7
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7f3 fae8 	bl	8000298 <__aeabi_dsub>
 800ccc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccca:	4606      	mov	r6, r0
 800cccc:	460f      	mov	r7, r1
 800ccce:	b933      	cbnz	r3, 800ccde <_strtod_l+0xace>
 800ccd0:	f1ba 0f00 	cmp.w	sl, #0
 800ccd4:	d103      	bne.n	800ccde <_strtod_l+0xace>
 800ccd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	d06d      	beq.n	800cdba <_strtod_l+0xbaa>
 800ccde:	a30a      	add	r3, pc, #40	; (adr r3, 800cd08 <_strtod_l+0xaf8>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	4630      	mov	r0, r6
 800cce6:	4639      	mov	r1, r7
 800cce8:	f7f3 ff00 	bl	8000aec <__aeabi_dcmplt>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	f47f acb8 	bne.w	800c662 <_strtod_l+0x452>
 800ccf2:	a307      	add	r3, pc, #28	; (adr r3, 800cd10 <_strtod_l+0xb00>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	f7f3 ff14 	bl	8000b28 <__aeabi_dcmpgt>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	f43f af79 	beq.w	800cbf8 <_strtod_l+0x9e8>
 800cd06:	e4ac      	b.n	800c662 <_strtod_l+0x452>
 800cd08:	94a03595 	.word	0x94a03595
 800cd0c:	3fdfffff 	.word	0x3fdfffff
 800cd10:	35afe535 	.word	0x35afe535
 800cd14:	3fe00000 	.word	0x3fe00000
 800cd18:	000fffff 	.word	0x000fffff
 800cd1c:	7ff00000 	.word	0x7ff00000
 800cd20:	7fefffff 	.word	0x7fefffff
 800cd24:	39500000 	.word	0x39500000
 800cd28:	3ff00000 	.word	0x3ff00000
 800cd2c:	7fe00000 	.word	0x7fe00000
 800cd30:	7c9fffff 	.word	0x7c9fffff
 800cd34:	3fe00000 	.word	0x3fe00000
 800cd38:	bff00000 	.word	0xbff00000
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	b333      	cbz	r3, 800cd8e <_strtod_l+0xb7e>
 800cd40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd46:	d822      	bhi.n	800cd8e <_strtod_l+0xb7e>
 800cd48:	a327      	add	r3, pc, #156	; (adr r3, 800cde8 <_strtod_l+0xbd8>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 fed5 	bl	8000b00 <__aeabi_dcmple>
 800cd56:	b1a0      	cbz	r0, 800cd82 <_strtod_l+0xb72>
 800cd58:	4639      	mov	r1, r7
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7f3 ff2c 	bl	8000bb8 <__aeabi_d2uiz>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	bf08      	it	eq
 800cd64:	2001      	moveq	r0, #1
 800cd66:	f7f3 fbd5 	bl	8000514 <__aeabi_ui2d>
 800cd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	460f      	mov	r7, r1
 800cd70:	bb03      	cbnz	r3, 800cdb4 <_strtod_l+0xba4>
 800cd72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd76:	9012      	str	r0, [sp, #72]	; 0x48
 800cd78:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cd7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cd8a:	1a9b      	subs	r3, r3, r2
 800cd8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cd92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cd96:	f001 fd33 	bl	800e800 <__ulp>
 800cd9a:	4650      	mov	r0, sl
 800cd9c:	ec53 2b10 	vmov	r2, r3, d0
 800cda0:	4659      	mov	r1, fp
 800cda2:	f7f3 fc31 	bl	8000608 <__aeabi_dmul>
 800cda6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cdaa:	f7f3 fa77 	bl	800029c <__adddf3>
 800cdae:	4682      	mov	sl, r0
 800cdb0:	468b      	mov	fp, r1
 800cdb2:	e772      	b.n	800cc9a <_strtod_l+0xa8a>
 800cdb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cdb8:	e7df      	b.n	800cd7a <_strtod_l+0xb6a>
 800cdba:	a30d      	add	r3, pc, #52	; (adr r3, 800cdf0 <_strtod_l+0xbe0>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fe94 	bl	8000aec <__aeabi_dcmplt>
 800cdc4:	e79c      	b.n	800cd00 <_strtod_l+0xaf0>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	930d      	str	r3, [sp, #52]	; 0x34
 800cdca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	f7ff ba61 	b.w	800c296 <_strtod_l+0x86>
 800cdd4:	2b65      	cmp	r3, #101	; 0x65
 800cdd6:	f04f 0200 	mov.w	r2, #0
 800cdda:	f43f ab4e 	beq.w	800c47a <_strtod_l+0x26a>
 800cdde:	2101      	movs	r1, #1
 800cde0:	4614      	mov	r4, r2
 800cde2:	9104      	str	r1, [sp, #16]
 800cde4:	f7ff bacb 	b.w	800c37e <_strtod_l+0x16e>
 800cde8:	ffc00000 	.word	0xffc00000
 800cdec:	41dfffff 	.word	0x41dfffff
 800cdf0:	94a03595 	.word	0x94a03595
 800cdf4:	3fcfffff 	.word	0x3fcfffff

0800cdf8 <_strtod_r>:
 800cdf8:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <_strtod_r+0x18>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	b410      	push	{r4}
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	4c04      	ldr	r4, [pc, #16]	; (800ce14 <_strtod_r+0x1c>)
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	bf08      	it	eq
 800ce06:	4623      	moveq	r3, r4
 800ce08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce0c:	f7ff ba00 	b.w	800c210 <_strtod_l>
 800ce10:	200002cc 	.word	0x200002cc
 800ce14:	20000330 	.word	0x20000330

0800ce18 <_strtol_l.isra.0>:
 800ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	4689      	mov	r9, r1
 800ce20:	4692      	mov	sl, r2
 800ce22:	461e      	mov	r6, r3
 800ce24:	460f      	mov	r7, r1
 800ce26:	463d      	mov	r5, r7
 800ce28:	9808      	ldr	r0, [sp, #32]
 800ce2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce2e:	f001 f9ed 	bl	800e20c <__locale_ctype_ptr_l>
 800ce32:	4420      	add	r0, r4
 800ce34:	7843      	ldrb	r3, [r0, #1]
 800ce36:	f013 0308 	ands.w	r3, r3, #8
 800ce3a:	d132      	bne.n	800cea2 <_strtol_l.isra.0+0x8a>
 800ce3c:	2c2d      	cmp	r4, #45	; 0x2d
 800ce3e:	d132      	bne.n	800cea6 <_strtol_l.isra.0+0x8e>
 800ce40:	787c      	ldrb	r4, [r7, #1]
 800ce42:	1cbd      	adds	r5, r7, #2
 800ce44:	2201      	movs	r2, #1
 800ce46:	2e00      	cmp	r6, #0
 800ce48:	d05d      	beq.n	800cf06 <_strtol_l.isra.0+0xee>
 800ce4a:	2e10      	cmp	r6, #16
 800ce4c:	d109      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800ce4e:	2c30      	cmp	r4, #48	; 0x30
 800ce50:	d107      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800ce52:	782b      	ldrb	r3, [r5, #0]
 800ce54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce58:	2b58      	cmp	r3, #88	; 0x58
 800ce5a:	d14f      	bne.n	800cefc <_strtol_l.isra.0+0xe4>
 800ce5c:	786c      	ldrb	r4, [r5, #1]
 800ce5e:	2610      	movs	r6, #16
 800ce60:	3502      	adds	r5, #2
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	bf14      	ite	ne
 800ce66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ce6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ce6e:	2700      	movs	r7, #0
 800ce70:	fbb1 fcf6 	udiv	ip, r1, r6
 800ce74:	4638      	mov	r0, r7
 800ce76:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ce7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ce7e:	2b09      	cmp	r3, #9
 800ce80:	d817      	bhi.n	800ceb2 <_strtol_l.isra.0+0x9a>
 800ce82:	461c      	mov	r4, r3
 800ce84:	42a6      	cmp	r6, r4
 800ce86:	dd23      	ble.n	800ced0 <_strtol_l.isra.0+0xb8>
 800ce88:	1c7b      	adds	r3, r7, #1
 800ce8a:	d007      	beq.n	800ce9c <_strtol_l.isra.0+0x84>
 800ce8c:	4584      	cmp	ip, r0
 800ce8e:	d31c      	bcc.n	800ceca <_strtol_l.isra.0+0xb2>
 800ce90:	d101      	bne.n	800ce96 <_strtol_l.isra.0+0x7e>
 800ce92:	45a6      	cmp	lr, r4
 800ce94:	db19      	blt.n	800ceca <_strtol_l.isra.0+0xb2>
 800ce96:	fb00 4006 	mla	r0, r0, r6, r4
 800ce9a:	2701      	movs	r7, #1
 800ce9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea0:	e7eb      	b.n	800ce7a <_strtol_l.isra.0+0x62>
 800cea2:	462f      	mov	r7, r5
 800cea4:	e7bf      	b.n	800ce26 <_strtol_l.isra.0+0xe>
 800cea6:	2c2b      	cmp	r4, #43	; 0x2b
 800cea8:	bf04      	itt	eq
 800ceaa:	1cbd      	addeq	r5, r7, #2
 800ceac:	787c      	ldrbeq	r4, [r7, #1]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	e7c9      	b.n	800ce46 <_strtol_l.isra.0+0x2e>
 800ceb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ceb6:	2b19      	cmp	r3, #25
 800ceb8:	d801      	bhi.n	800cebe <_strtol_l.isra.0+0xa6>
 800ceba:	3c37      	subs	r4, #55	; 0x37
 800cebc:	e7e2      	b.n	800ce84 <_strtol_l.isra.0+0x6c>
 800cebe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cec2:	2b19      	cmp	r3, #25
 800cec4:	d804      	bhi.n	800ced0 <_strtol_l.isra.0+0xb8>
 800cec6:	3c57      	subs	r4, #87	; 0x57
 800cec8:	e7dc      	b.n	800ce84 <_strtol_l.isra.0+0x6c>
 800ceca:	f04f 37ff 	mov.w	r7, #4294967295
 800cece:	e7e5      	b.n	800ce9c <_strtol_l.isra.0+0x84>
 800ced0:	1c7b      	adds	r3, r7, #1
 800ced2:	d108      	bne.n	800cee6 <_strtol_l.isra.0+0xce>
 800ced4:	2322      	movs	r3, #34	; 0x22
 800ced6:	f8c8 3000 	str.w	r3, [r8]
 800ceda:	4608      	mov	r0, r1
 800cedc:	f1ba 0f00 	cmp.w	sl, #0
 800cee0:	d107      	bne.n	800cef2 <_strtol_l.isra.0+0xda>
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	b102      	cbz	r2, 800ceea <_strtol_l.isra.0+0xd2>
 800cee8:	4240      	negs	r0, r0
 800ceea:	f1ba 0f00 	cmp.w	sl, #0
 800ceee:	d0f8      	beq.n	800cee2 <_strtol_l.isra.0+0xca>
 800cef0:	b10f      	cbz	r7, 800cef6 <_strtol_l.isra.0+0xde>
 800cef2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cef6:	f8ca 9000 	str.w	r9, [sl]
 800cefa:	e7f2      	b.n	800cee2 <_strtol_l.isra.0+0xca>
 800cefc:	2430      	movs	r4, #48	; 0x30
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	d1af      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800cf02:	2608      	movs	r6, #8
 800cf04:	e7ad      	b.n	800ce62 <_strtol_l.isra.0+0x4a>
 800cf06:	2c30      	cmp	r4, #48	; 0x30
 800cf08:	d0a3      	beq.n	800ce52 <_strtol_l.isra.0+0x3a>
 800cf0a:	260a      	movs	r6, #10
 800cf0c:	e7a9      	b.n	800ce62 <_strtol_l.isra.0+0x4a>
	...

0800cf10 <_strtol_r>:
 800cf10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf12:	4c06      	ldr	r4, [pc, #24]	; (800cf2c <_strtol_r+0x1c>)
 800cf14:	4d06      	ldr	r5, [pc, #24]	; (800cf30 <_strtol_r+0x20>)
 800cf16:	6824      	ldr	r4, [r4, #0]
 800cf18:	6a24      	ldr	r4, [r4, #32]
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	bf08      	it	eq
 800cf1e:	462c      	moveq	r4, r5
 800cf20:	9400      	str	r4, [sp, #0]
 800cf22:	f7ff ff79 	bl	800ce18 <_strtol_l.isra.0>
 800cf26:	b003      	add	sp, #12
 800cf28:	bd30      	pop	{r4, r5, pc}
 800cf2a:	bf00      	nop
 800cf2c:	200002cc 	.word	0x200002cc
 800cf30:	20000330 	.word	0x20000330

0800cf34 <quorem>:
 800cf34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	6903      	ldr	r3, [r0, #16]
 800cf3a:	690c      	ldr	r4, [r1, #16]
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	4680      	mov	r8, r0
 800cf40:	f2c0 8082 	blt.w	800d048 <quorem+0x114>
 800cf44:	3c01      	subs	r4, #1
 800cf46:	f101 0714 	add.w	r7, r1, #20
 800cf4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cf4e:	f100 0614 	add.w	r6, r0, #20
 800cf52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cf56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cf5a:	eb06 030c 	add.w	r3, r6, ip
 800cf5e:	3501      	adds	r5, #1
 800cf60:	eb07 090c 	add.w	r9, r7, ip
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	fbb0 f5f5 	udiv	r5, r0, r5
 800cf6a:	b395      	cbz	r5, 800cfd2 <quorem+0x9e>
 800cf6c:	f04f 0a00 	mov.w	sl, #0
 800cf70:	4638      	mov	r0, r7
 800cf72:	46b6      	mov	lr, r6
 800cf74:	46d3      	mov	fp, sl
 800cf76:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf7a:	b293      	uxth	r3, r2
 800cf7c:	fb05 a303 	mla	r3, r5, r3, sl
 800cf80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	ebab 0303 	sub.w	r3, fp, r3
 800cf8a:	0c12      	lsrs	r2, r2, #16
 800cf8c:	f8de b000 	ldr.w	fp, [lr]
 800cf90:	fb05 a202 	mla	r2, r5, r2, sl
 800cf94:	fa13 f38b 	uxtah	r3, r3, fp
 800cf98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cf9c:	fa1f fb82 	uxth.w	fp, r2
 800cfa0:	f8de 2000 	ldr.w	r2, [lr]
 800cfa4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cfa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfb2:	4581      	cmp	r9, r0
 800cfb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cfb8:	f84e 3b04 	str.w	r3, [lr], #4
 800cfbc:	d2db      	bcs.n	800cf76 <quorem+0x42>
 800cfbe:	f856 300c 	ldr.w	r3, [r6, ip]
 800cfc2:	b933      	cbnz	r3, 800cfd2 <quorem+0x9e>
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	3b04      	subs	r3, #4
 800cfc8:	429e      	cmp	r6, r3
 800cfca:	461a      	mov	r2, r3
 800cfcc:	d330      	bcc.n	800d030 <quorem+0xfc>
 800cfce:	f8c8 4010 	str.w	r4, [r8, #16]
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	f001 fb9c 	bl	800e710 <__mcmp>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	db25      	blt.n	800d028 <quorem+0xf4>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f04f 0c00 	mov.w	ip, #0
 800cfe4:	f857 2b04 	ldr.w	r2, [r7], #4
 800cfe8:	f8d0 e000 	ldr.w	lr, [r0]
 800cfec:	b293      	uxth	r3, r2
 800cfee:	ebac 0303 	sub.w	r3, ip, r3
 800cff2:	0c12      	lsrs	r2, r2, #16
 800cff4:	fa13 f38e 	uxtah	r3, r3, lr
 800cff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d000:	b29b      	uxth	r3, r3
 800d002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d006:	45b9      	cmp	r9, r7
 800d008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d00c:	f840 3b04 	str.w	r3, [r0], #4
 800d010:	d2e8      	bcs.n	800cfe4 <quorem+0xb0>
 800d012:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d016:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d01a:	b92a      	cbnz	r2, 800d028 <quorem+0xf4>
 800d01c:	3b04      	subs	r3, #4
 800d01e:	429e      	cmp	r6, r3
 800d020:	461a      	mov	r2, r3
 800d022:	d30b      	bcc.n	800d03c <quorem+0x108>
 800d024:	f8c8 4010 	str.w	r4, [r8, #16]
 800d028:	4628      	mov	r0, r5
 800d02a:	b003      	add	sp, #12
 800d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d030:	6812      	ldr	r2, [r2, #0]
 800d032:	3b04      	subs	r3, #4
 800d034:	2a00      	cmp	r2, #0
 800d036:	d1ca      	bne.n	800cfce <quorem+0x9a>
 800d038:	3c01      	subs	r4, #1
 800d03a:	e7c5      	b.n	800cfc8 <quorem+0x94>
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	3b04      	subs	r3, #4
 800d040:	2a00      	cmp	r2, #0
 800d042:	d1ef      	bne.n	800d024 <quorem+0xf0>
 800d044:	3c01      	subs	r4, #1
 800d046:	e7ea      	b.n	800d01e <quorem+0xea>
 800d048:	2000      	movs	r0, #0
 800d04a:	e7ee      	b.n	800d02a <quorem+0xf6>
 800d04c:	0000      	movs	r0, r0
	...

0800d050 <_dtoa_r>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	ec57 6b10 	vmov	r6, r7, d0
 800d058:	b097      	sub	sp, #92	; 0x5c
 800d05a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d05c:	9106      	str	r1, [sp, #24]
 800d05e:	4604      	mov	r4, r0
 800d060:	920b      	str	r2, [sp, #44]	; 0x2c
 800d062:	9312      	str	r3, [sp, #72]	; 0x48
 800d064:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d068:	e9cd 6700 	strd	r6, r7, [sp]
 800d06c:	b93d      	cbnz	r5, 800d07e <_dtoa_r+0x2e>
 800d06e:	2010      	movs	r0, #16
 800d070:	f001 f8e0 	bl	800e234 <malloc>
 800d074:	6260      	str	r0, [r4, #36]	; 0x24
 800d076:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d07a:	6005      	str	r5, [r0, #0]
 800d07c:	60c5      	str	r5, [r0, #12]
 800d07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	b151      	cbz	r1, 800d09a <_dtoa_r+0x4a>
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	604a      	str	r2, [r1, #4]
 800d088:	2301      	movs	r3, #1
 800d08a:	4093      	lsls	r3, r2
 800d08c:	608b      	str	r3, [r1, #8]
 800d08e:	4620      	mov	r0, r4
 800d090:	f001 f91e 	bl	800e2d0 <_Bfree>
 800d094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d096:	2200      	movs	r2, #0
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	1e3b      	subs	r3, r7, #0
 800d09c:	bfbb      	ittet	lt
 800d09e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0a2:	9301      	strlt	r3, [sp, #4]
 800d0a4:	2300      	movge	r3, #0
 800d0a6:	2201      	movlt	r2, #1
 800d0a8:	bfac      	ite	ge
 800d0aa:	f8c8 3000 	strge.w	r3, [r8]
 800d0ae:	f8c8 2000 	strlt.w	r2, [r8]
 800d0b2:	4baf      	ldr	r3, [pc, #700]	; (800d370 <_dtoa_r+0x320>)
 800d0b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0b8:	ea33 0308 	bics.w	r3, r3, r8
 800d0bc:	d114      	bne.n	800d0e8 <_dtoa_r+0x98>
 800d0be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	b923      	cbnz	r3, 800d0d4 <_dtoa_r+0x84>
 800d0ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f000 8542 	beq.w	800db58 <_dtoa_r+0xb08>
 800d0d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d384 <_dtoa_r+0x334>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 8544 	beq.w	800db68 <_dtoa_r+0xb18>
 800d0e0:	f10b 0303 	add.w	r3, fp, #3
 800d0e4:	f000 bd3e 	b.w	800db64 <_dtoa_r+0xb14>
 800d0e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0f8:	4681      	mov	r9, r0
 800d0fa:	b168      	cbz	r0, 800d118 <_dtoa_r+0xc8>
 800d0fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0fe:	2301      	movs	r3, #1
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8524 	beq.w	800db52 <_dtoa_r+0xb02>
 800d10a:	4b9a      	ldr	r3, [pc, #616]	; (800d374 <_dtoa_r+0x324>)
 800d10c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d10e:	f103 3bff 	add.w	fp, r3, #4294967295
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	f000 bd28 	b.w	800db68 <_dtoa_r+0xb18>
 800d118:	aa14      	add	r2, sp, #80	; 0x50
 800d11a:	a915      	add	r1, sp, #84	; 0x54
 800d11c:	ec47 6b10 	vmov	d0, r6, r7
 800d120:	4620      	mov	r0, r4
 800d122:	f001 fbe3 	bl	800e8ec <__d2b>
 800d126:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d12a:	9004      	str	r0, [sp, #16]
 800d12c:	2d00      	cmp	r5, #0
 800d12e:	d07c      	beq.n	800d22a <_dtoa_r+0x1da>
 800d130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d134:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d138:	46b2      	mov	sl, r6
 800d13a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d13e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d142:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d146:	2200      	movs	r2, #0
 800d148:	4b8b      	ldr	r3, [pc, #556]	; (800d378 <_dtoa_r+0x328>)
 800d14a:	4650      	mov	r0, sl
 800d14c:	4659      	mov	r1, fp
 800d14e:	f7f3 f8a3 	bl	8000298 <__aeabi_dsub>
 800d152:	a381      	add	r3, pc, #516	; (adr r3, 800d358 <_dtoa_r+0x308>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	f7f3 fa56 	bl	8000608 <__aeabi_dmul>
 800d15c:	a380      	add	r3, pc, #512	; (adr r3, 800d360 <_dtoa_r+0x310>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	f7f3 f89b 	bl	800029c <__adddf3>
 800d166:	4606      	mov	r6, r0
 800d168:	4628      	mov	r0, r5
 800d16a:	460f      	mov	r7, r1
 800d16c:	f7f3 f9e2 	bl	8000534 <__aeabi_i2d>
 800d170:	a37d      	add	r3, pc, #500	; (adr r3, 800d368 <_dtoa_r+0x318>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 fa47 	bl	8000608 <__aeabi_dmul>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	4630      	mov	r0, r6
 800d180:	4639      	mov	r1, r7
 800d182:	f7f3 f88b 	bl	800029c <__adddf3>
 800d186:	4606      	mov	r6, r0
 800d188:	460f      	mov	r7, r1
 800d18a:	f7f3 fced 	bl	8000b68 <__aeabi_d2iz>
 800d18e:	2200      	movs	r2, #0
 800d190:	4682      	mov	sl, r0
 800d192:	2300      	movs	r3, #0
 800d194:	4630      	mov	r0, r6
 800d196:	4639      	mov	r1, r7
 800d198:	f7f3 fca8 	bl	8000aec <__aeabi_dcmplt>
 800d19c:	b148      	cbz	r0, 800d1b2 <_dtoa_r+0x162>
 800d19e:	4650      	mov	r0, sl
 800d1a0:	f7f3 f9c8 	bl	8000534 <__aeabi_i2d>
 800d1a4:	4632      	mov	r2, r6
 800d1a6:	463b      	mov	r3, r7
 800d1a8:	f7f3 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1ac:	b908      	cbnz	r0, 800d1b2 <_dtoa_r+0x162>
 800d1ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1b2:	f1ba 0f16 	cmp.w	sl, #22
 800d1b6:	d859      	bhi.n	800d26c <_dtoa_r+0x21c>
 800d1b8:	4970      	ldr	r1, [pc, #448]	; (800d37c <_dtoa_r+0x32c>)
 800d1ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d1be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c6:	f7f3 fcaf 	bl	8000b28 <__aeabi_dcmpgt>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d050      	beq.n	800d270 <_dtoa_r+0x220>
 800d1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1d8:	1b5d      	subs	r5, r3, r5
 800d1da:	f1b5 0801 	subs.w	r8, r5, #1
 800d1de:	bf49      	itett	mi
 800d1e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800d1e4:	2300      	movpl	r3, #0
 800d1e6:	9305      	strmi	r3, [sp, #20]
 800d1e8:	f04f 0800 	movmi.w	r8, #0
 800d1ec:	bf58      	it	pl
 800d1ee:	9305      	strpl	r3, [sp, #20]
 800d1f0:	f1ba 0f00 	cmp.w	sl, #0
 800d1f4:	db3e      	blt.n	800d274 <_dtoa_r+0x224>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	44d0      	add	r8, sl
 800d1fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	9b06      	ldr	r3, [sp, #24]
 800d202:	2b09      	cmp	r3, #9
 800d204:	f200 8090 	bhi.w	800d328 <_dtoa_r+0x2d8>
 800d208:	2b05      	cmp	r3, #5
 800d20a:	bfc4      	itt	gt
 800d20c:	3b04      	subgt	r3, #4
 800d20e:	9306      	strgt	r3, [sp, #24]
 800d210:	9b06      	ldr	r3, [sp, #24]
 800d212:	f1a3 0302 	sub.w	r3, r3, #2
 800d216:	bfcc      	ite	gt
 800d218:	2500      	movgt	r5, #0
 800d21a:	2501      	movle	r5, #1
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	f200 808f 	bhi.w	800d340 <_dtoa_r+0x2f0>
 800d222:	e8df f003 	tbb	[pc, r3]
 800d226:	7f7d      	.short	0x7f7d
 800d228:	7131      	.short	0x7131
 800d22a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d22e:	441d      	add	r5, r3
 800d230:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d234:	2820      	cmp	r0, #32
 800d236:	dd13      	ble.n	800d260 <_dtoa_r+0x210>
 800d238:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d23c:	9b00      	ldr	r3, [sp, #0]
 800d23e:	fa08 f800 	lsl.w	r8, r8, r0
 800d242:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d246:	fa23 f000 	lsr.w	r0, r3, r0
 800d24a:	ea48 0000 	orr.w	r0, r8, r0
 800d24e:	f7f3 f961 	bl	8000514 <__aeabi_ui2d>
 800d252:	2301      	movs	r3, #1
 800d254:	4682      	mov	sl, r0
 800d256:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d25a:	3d01      	subs	r5, #1
 800d25c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d25e:	e772      	b.n	800d146 <_dtoa_r+0xf6>
 800d260:	9b00      	ldr	r3, [sp, #0]
 800d262:	f1c0 0020 	rsb	r0, r0, #32
 800d266:	fa03 f000 	lsl.w	r0, r3, r0
 800d26a:	e7f0      	b.n	800d24e <_dtoa_r+0x1fe>
 800d26c:	2301      	movs	r3, #1
 800d26e:	e7b1      	b.n	800d1d4 <_dtoa_r+0x184>
 800d270:	900f      	str	r0, [sp, #60]	; 0x3c
 800d272:	e7b0      	b.n	800d1d6 <_dtoa_r+0x186>
 800d274:	9b05      	ldr	r3, [sp, #20]
 800d276:	eba3 030a 	sub.w	r3, r3, sl
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	f1ca 0300 	rsb	r3, sl, #0
 800d280:	9307      	str	r3, [sp, #28]
 800d282:	2300      	movs	r3, #0
 800d284:	930e      	str	r3, [sp, #56]	; 0x38
 800d286:	e7bb      	b.n	800d200 <_dtoa_r+0x1b0>
 800d288:	2301      	movs	r3, #1
 800d28a:	930a      	str	r3, [sp, #40]	; 0x28
 800d28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	dd59      	ble.n	800d346 <_dtoa_r+0x2f6>
 800d292:	9302      	str	r3, [sp, #8]
 800d294:	4699      	mov	r9, r3
 800d296:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d298:	2200      	movs	r2, #0
 800d29a:	6072      	str	r2, [r6, #4]
 800d29c:	2204      	movs	r2, #4
 800d29e:	f102 0014 	add.w	r0, r2, #20
 800d2a2:	4298      	cmp	r0, r3
 800d2a4:	6871      	ldr	r1, [r6, #4]
 800d2a6:	d953      	bls.n	800d350 <_dtoa_r+0x300>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f000 ffdd 	bl	800e268 <_Balloc>
 800d2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b0:	6030      	str	r0, [r6, #0]
 800d2b2:	f1b9 0f0e 	cmp.w	r9, #14
 800d2b6:	f8d3 b000 	ldr.w	fp, [r3]
 800d2ba:	f200 80e6 	bhi.w	800d48a <_dtoa_r+0x43a>
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	f000 80e3 	beq.w	800d48a <_dtoa_r+0x43a>
 800d2c4:	ed9d 7b00 	vldr	d7, [sp]
 800d2c8:	f1ba 0f00 	cmp.w	sl, #0
 800d2cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d2d0:	dd74      	ble.n	800d3bc <_dtoa_r+0x36c>
 800d2d2:	4a2a      	ldr	r2, [pc, #168]	; (800d37c <_dtoa_r+0x32c>)
 800d2d4:	f00a 030f 	and.w	r3, sl, #15
 800d2d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2dc:	ed93 7b00 	vldr	d7, [r3]
 800d2e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d2e4:	06f0      	lsls	r0, r6, #27
 800d2e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d2ea:	d565      	bpl.n	800d3b8 <_dtoa_r+0x368>
 800d2ec:	4b24      	ldr	r3, [pc, #144]	; (800d380 <_dtoa_r+0x330>)
 800d2ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d2f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2f6:	f7f3 fab1 	bl	800085c <__aeabi_ddiv>
 800d2fa:	e9cd 0100 	strd	r0, r1, [sp]
 800d2fe:	f006 060f 	and.w	r6, r6, #15
 800d302:	2503      	movs	r5, #3
 800d304:	4f1e      	ldr	r7, [pc, #120]	; (800d380 <_dtoa_r+0x330>)
 800d306:	e04c      	b.n	800d3a2 <_dtoa_r+0x352>
 800d308:	2301      	movs	r3, #1
 800d30a:	930a      	str	r3, [sp, #40]	; 0x28
 800d30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d30e:	4453      	add	r3, sl
 800d310:	f103 0901 	add.w	r9, r3, #1
 800d314:	9302      	str	r3, [sp, #8]
 800d316:	464b      	mov	r3, r9
 800d318:	2b01      	cmp	r3, #1
 800d31a:	bfb8      	it	lt
 800d31c:	2301      	movlt	r3, #1
 800d31e:	e7ba      	b.n	800d296 <_dtoa_r+0x246>
 800d320:	2300      	movs	r3, #0
 800d322:	e7b2      	b.n	800d28a <_dtoa_r+0x23a>
 800d324:	2300      	movs	r3, #0
 800d326:	e7f0      	b.n	800d30a <_dtoa_r+0x2ba>
 800d328:	2501      	movs	r5, #1
 800d32a:	2300      	movs	r3, #0
 800d32c:	9306      	str	r3, [sp, #24]
 800d32e:	950a      	str	r5, [sp, #40]	; 0x28
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	4699      	mov	r9, r3
 800d338:	2200      	movs	r2, #0
 800d33a:	2312      	movs	r3, #18
 800d33c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d33e:	e7aa      	b.n	800d296 <_dtoa_r+0x246>
 800d340:	2301      	movs	r3, #1
 800d342:	930a      	str	r3, [sp, #40]	; 0x28
 800d344:	e7f4      	b.n	800d330 <_dtoa_r+0x2e0>
 800d346:	2301      	movs	r3, #1
 800d348:	9302      	str	r3, [sp, #8]
 800d34a:	4699      	mov	r9, r3
 800d34c:	461a      	mov	r2, r3
 800d34e:	e7f5      	b.n	800d33c <_dtoa_r+0x2ec>
 800d350:	3101      	adds	r1, #1
 800d352:	6071      	str	r1, [r6, #4]
 800d354:	0052      	lsls	r2, r2, #1
 800d356:	e7a2      	b.n	800d29e <_dtoa_r+0x24e>
 800d358:	636f4361 	.word	0x636f4361
 800d35c:	3fd287a7 	.word	0x3fd287a7
 800d360:	8b60c8b3 	.word	0x8b60c8b3
 800d364:	3fc68a28 	.word	0x3fc68a28
 800d368:	509f79fb 	.word	0x509f79fb
 800d36c:	3fd34413 	.word	0x3fd34413
 800d370:	7ff00000 	.word	0x7ff00000
 800d374:	0800f01d 	.word	0x0800f01d
 800d378:	3ff80000 	.word	0x3ff80000
 800d37c:	0800f0d8 	.word	0x0800f0d8
 800d380:	0800f0b0 	.word	0x0800f0b0
 800d384:	0800f0a1 	.word	0x0800f0a1
 800d388:	07f1      	lsls	r1, r6, #31
 800d38a:	d508      	bpl.n	800d39e <_dtoa_r+0x34e>
 800d38c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d394:	f7f3 f938 	bl	8000608 <__aeabi_dmul>
 800d398:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d39c:	3501      	adds	r5, #1
 800d39e:	1076      	asrs	r6, r6, #1
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d1f0      	bne.n	800d388 <_dtoa_r+0x338>
 800d3a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d3aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3ae:	f7f3 fa55 	bl	800085c <__aeabi_ddiv>
 800d3b2:	e9cd 0100 	strd	r0, r1, [sp]
 800d3b6:	e01a      	b.n	800d3ee <_dtoa_r+0x39e>
 800d3b8:	2502      	movs	r5, #2
 800d3ba:	e7a3      	b.n	800d304 <_dtoa_r+0x2b4>
 800d3bc:	f000 80a0 	beq.w	800d500 <_dtoa_r+0x4b0>
 800d3c0:	f1ca 0600 	rsb	r6, sl, #0
 800d3c4:	4b9f      	ldr	r3, [pc, #636]	; (800d644 <_dtoa_r+0x5f4>)
 800d3c6:	4fa0      	ldr	r7, [pc, #640]	; (800d648 <_dtoa_r+0x5f8>)
 800d3c8:	f006 020f 	and.w	r2, r6, #15
 800d3cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3d8:	f7f3 f916 	bl	8000608 <__aeabi_dmul>
 800d3dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e0:	1136      	asrs	r6, r6, #4
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	2502      	movs	r5, #2
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	d17f      	bne.n	800d4ea <_dtoa_r+0x49a>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e1      	bne.n	800d3b2 <_dtoa_r+0x362>
 800d3ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 8087 	beq.w	800d504 <_dtoa_r+0x4b4>
 800d3f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	4b93      	ldr	r3, [pc, #588]	; (800d64c <_dtoa_r+0x5fc>)
 800d3fe:	4630      	mov	r0, r6
 800d400:	4639      	mov	r1, r7
 800d402:	f7f3 fb73 	bl	8000aec <__aeabi_dcmplt>
 800d406:	2800      	cmp	r0, #0
 800d408:	d07c      	beq.n	800d504 <_dtoa_r+0x4b4>
 800d40a:	f1b9 0f00 	cmp.w	r9, #0
 800d40e:	d079      	beq.n	800d504 <_dtoa_r+0x4b4>
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	dd35      	ble.n	800d482 <_dtoa_r+0x432>
 800d416:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d41a:	9308      	str	r3, [sp, #32]
 800d41c:	4639      	mov	r1, r7
 800d41e:	2200      	movs	r2, #0
 800d420:	4b8b      	ldr	r3, [pc, #556]	; (800d650 <_dtoa_r+0x600>)
 800d422:	4630      	mov	r0, r6
 800d424:	f7f3 f8f0 	bl	8000608 <__aeabi_dmul>
 800d428:	e9cd 0100 	strd	r0, r1, [sp]
 800d42c:	9f02      	ldr	r7, [sp, #8]
 800d42e:	3501      	adds	r5, #1
 800d430:	4628      	mov	r0, r5
 800d432:	f7f3 f87f 	bl	8000534 <__aeabi_i2d>
 800d436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d43a:	f7f3 f8e5 	bl	8000608 <__aeabi_dmul>
 800d43e:	2200      	movs	r2, #0
 800d440:	4b84      	ldr	r3, [pc, #528]	; (800d654 <_dtoa_r+0x604>)
 800d442:	f7f2 ff2b 	bl	800029c <__adddf3>
 800d446:	4605      	mov	r5, r0
 800d448:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	d15d      	bne.n	800d50c <_dtoa_r+0x4bc>
 800d450:	2200      	movs	r2, #0
 800d452:	4b81      	ldr	r3, [pc, #516]	; (800d658 <_dtoa_r+0x608>)
 800d454:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d458:	f7f2 ff1e 	bl	8000298 <__aeabi_dsub>
 800d45c:	462a      	mov	r2, r5
 800d45e:	4633      	mov	r3, r6
 800d460:	e9cd 0100 	strd	r0, r1, [sp]
 800d464:	f7f3 fb60 	bl	8000b28 <__aeabi_dcmpgt>
 800d468:	2800      	cmp	r0, #0
 800d46a:	f040 8288 	bne.w	800d97e <_dtoa_r+0x92e>
 800d46e:	462a      	mov	r2, r5
 800d470:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d474:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d478:	f7f3 fb38 	bl	8000aec <__aeabi_dcmplt>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	f040 827c 	bne.w	800d97a <_dtoa_r+0x92a>
 800d482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d486:	e9cd 2300 	strd	r2, r3, [sp]
 800d48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f2c0 8150 	blt.w	800d732 <_dtoa_r+0x6e2>
 800d492:	f1ba 0f0e 	cmp.w	sl, #14
 800d496:	f300 814c 	bgt.w	800d732 <_dtoa_r+0x6e2>
 800d49a:	4b6a      	ldr	r3, [pc, #424]	; (800d644 <_dtoa_r+0x5f4>)
 800d49c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4a0:	ed93 7b00 	vldr	d7, [r3]
 800d4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4ac:	f280 80d8 	bge.w	800d660 <_dtoa_r+0x610>
 800d4b0:	f1b9 0f00 	cmp.w	r9, #0
 800d4b4:	f300 80d4 	bgt.w	800d660 <_dtoa_r+0x610>
 800d4b8:	f040 825e 	bne.w	800d978 <_dtoa_r+0x928>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4b66      	ldr	r3, [pc, #408]	; (800d658 <_dtoa_r+0x608>)
 800d4c0:	ec51 0b17 	vmov	r0, r1, d7
 800d4c4:	f7f3 f8a0 	bl	8000608 <__aeabi_dmul>
 800d4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4cc:	f7f3 fb22 	bl	8000b14 <__aeabi_dcmpge>
 800d4d0:	464f      	mov	r7, r9
 800d4d2:	464e      	mov	r6, r9
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 8234 	bne.w	800d942 <_dtoa_r+0x8f2>
 800d4da:	2331      	movs	r3, #49	; 0x31
 800d4dc:	f10b 0501 	add.w	r5, fp, #1
 800d4e0:	f88b 3000 	strb.w	r3, [fp]
 800d4e4:	f10a 0a01 	add.w	sl, sl, #1
 800d4e8:	e22f      	b.n	800d94a <_dtoa_r+0x8fa>
 800d4ea:	07f2      	lsls	r2, r6, #31
 800d4ec:	d505      	bpl.n	800d4fa <_dtoa_r+0x4aa>
 800d4ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f2:	f7f3 f889 	bl	8000608 <__aeabi_dmul>
 800d4f6:	3501      	adds	r5, #1
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	1076      	asrs	r6, r6, #1
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	e772      	b.n	800d3e6 <_dtoa_r+0x396>
 800d500:	2502      	movs	r5, #2
 800d502:	e774      	b.n	800d3ee <_dtoa_r+0x39e>
 800d504:	f8cd a020 	str.w	sl, [sp, #32]
 800d508:	464f      	mov	r7, r9
 800d50a:	e791      	b.n	800d430 <_dtoa_r+0x3e0>
 800d50c:	4b4d      	ldr	r3, [pc, #308]	; (800d644 <_dtoa_r+0x5f4>)
 800d50e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d512:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d047      	beq.n	800d5ac <_dtoa_r+0x55c>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	2000      	movs	r0, #0
 800d522:	494e      	ldr	r1, [pc, #312]	; (800d65c <_dtoa_r+0x60c>)
 800d524:	f7f3 f99a 	bl	800085c <__aeabi_ddiv>
 800d528:	462a      	mov	r2, r5
 800d52a:	4633      	mov	r3, r6
 800d52c:	f7f2 feb4 	bl	8000298 <__aeabi_dsub>
 800d530:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d534:	465d      	mov	r5, fp
 800d536:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d53a:	f7f3 fb15 	bl	8000b68 <__aeabi_d2iz>
 800d53e:	4606      	mov	r6, r0
 800d540:	f7f2 fff8 	bl	8000534 <__aeabi_i2d>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d54c:	f7f2 fea4 	bl	8000298 <__aeabi_dsub>
 800d550:	3630      	adds	r6, #48	; 0x30
 800d552:	f805 6b01 	strb.w	r6, [r5], #1
 800d556:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d55a:	e9cd 0100 	strd	r0, r1, [sp]
 800d55e:	f7f3 fac5 	bl	8000aec <__aeabi_dcmplt>
 800d562:	2800      	cmp	r0, #0
 800d564:	d163      	bne.n	800d62e <_dtoa_r+0x5de>
 800d566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d56a:	2000      	movs	r0, #0
 800d56c:	4937      	ldr	r1, [pc, #220]	; (800d64c <_dtoa_r+0x5fc>)
 800d56e:	f7f2 fe93 	bl	8000298 <__aeabi_dsub>
 800d572:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d576:	f7f3 fab9 	bl	8000aec <__aeabi_dcmplt>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	f040 80b7 	bne.w	800d6ee <_dtoa_r+0x69e>
 800d580:	eba5 030b 	sub.w	r3, r5, fp
 800d584:	429f      	cmp	r7, r3
 800d586:	f77f af7c 	ble.w	800d482 <_dtoa_r+0x432>
 800d58a:	2200      	movs	r2, #0
 800d58c:	4b30      	ldr	r3, [pc, #192]	; (800d650 <_dtoa_r+0x600>)
 800d58e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d592:	f7f3 f839 	bl	8000608 <__aeabi_dmul>
 800d596:	2200      	movs	r2, #0
 800d598:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d59c:	4b2c      	ldr	r3, [pc, #176]	; (800d650 <_dtoa_r+0x600>)
 800d59e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5a2:	f7f3 f831 	bl	8000608 <__aeabi_dmul>
 800d5a6:	e9cd 0100 	strd	r0, r1, [sp]
 800d5aa:	e7c4      	b.n	800d536 <_dtoa_r+0x4e6>
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4633      	mov	r3, r6
 800d5b0:	f7f3 f82a 	bl	8000608 <__aeabi_dmul>
 800d5b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d5b8:	eb0b 0507 	add.w	r5, fp, r7
 800d5bc:	465e      	mov	r6, fp
 800d5be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5c2:	f7f3 fad1 	bl	8000b68 <__aeabi_d2iz>
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	f7f2 ffb4 	bl	8000534 <__aeabi_i2d>
 800d5cc:	3730      	adds	r7, #48	; 0x30
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5d6:	f7f2 fe5f 	bl	8000298 <__aeabi_dsub>
 800d5da:	f806 7b01 	strb.w	r7, [r6], #1
 800d5de:	42ae      	cmp	r6, r5
 800d5e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d5e4:	f04f 0200 	mov.w	r2, #0
 800d5e8:	d126      	bne.n	800d638 <_dtoa_r+0x5e8>
 800d5ea:	4b1c      	ldr	r3, [pc, #112]	; (800d65c <_dtoa_r+0x60c>)
 800d5ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5f0:	f7f2 fe54 	bl	800029c <__adddf3>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5fc:	f7f3 fa94 	bl	8000b28 <__aeabi_dcmpgt>
 800d600:	2800      	cmp	r0, #0
 800d602:	d174      	bne.n	800d6ee <_dtoa_r+0x69e>
 800d604:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d608:	2000      	movs	r0, #0
 800d60a:	4914      	ldr	r1, [pc, #80]	; (800d65c <_dtoa_r+0x60c>)
 800d60c:	f7f2 fe44 	bl	8000298 <__aeabi_dsub>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d618:	f7f3 fa68 	bl	8000aec <__aeabi_dcmplt>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	f43f af30 	beq.w	800d482 <_dtoa_r+0x432>
 800d622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d626:	2b30      	cmp	r3, #48	; 0x30
 800d628:	f105 32ff 	add.w	r2, r5, #4294967295
 800d62c:	d002      	beq.n	800d634 <_dtoa_r+0x5e4>
 800d62e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d632:	e04a      	b.n	800d6ca <_dtoa_r+0x67a>
 800d634:	4615      	mov	r5, r2
 800d636:	e7f4      	b.n	800d622 <_dtoa_r+0x5d2>
 800d638:	4b05      	ldr	r3, [pc, #20]	; (800d650 <_dtoa_r+0x600>)
 800d63a:	f7f2 ffe5 	bl	8000608 <__aeabi_dmul>
 800d63e:	e9cd 0100 	strd	r0, r1, [sp]
 800d642:	e7bc      	b.n	800d5be <_dtoa_r+0x56e>
 800d644:	0800f0d8 	.word	0x0800f0d8
 800d648:	0800f0b0 	.word	0x0800f0b0
 800d64c:	3ff00000 	.word	0x3ff00000
 800d650:	40240000 	.word	0x40240000
 800d654:	401c0000 	.word	0x401c0000
 800d658:	40140000 	.word	0x40140000
 800d65c:	3fe00000 	.word	0x3fe00000
 800d660:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d664:	465d      	mov	r5, fp
 800d666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d66a:	4630      	mov	r0, r6
 800d66c:	4639      	mov	r1, r7
 800d66e:	f7f3 f8f5 	bl	800085c <__aeabi_ddiv>
 800d672:	f7f3 fa79 	bl	8000b68 <__aeabi_d2iz>
 800d676:	4680      	mov	r8, r0
 800d678:	f7f2 ff5c 	bl	8000534 <__aeabi_i2d>
 800d67c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d680:	f7f2 ffc2 	bl	8000608 <__aeabi_dmul>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	4630      	mov	r0, r6
 800d68a:	4639      	mov	r1, r7
 800d68c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d690:	f7f2 fe02 	bl	8000298 <__aeabi_dsub>
 800d694:	f805 6b01 	strb.w	r6, [r5], #1
 800d698:	eba5 060b 	sub.w	r6, r5, fp
 800d69c:	45b1      	cmp	r9, r6
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	d139      	bne.n	800d718 <_dtoa_r+0x6c8>
 800d6a4:	f7f2 fdfa 	bl	800029c <__adddf3>
 800d6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	460f      	mov	r7, r1
 800d6b0:	f7f3 fa3a 	bl	8000b28 <__aeabi_dcmpgt>
 800d6b4:	b9c8      	cbnz	r0, 800d6ea <_dtoa_r+0x69a>
 800d6b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	4639      	mov	r1, r7
 800d6be:	f7f3 fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6c2:	b110      	cbz	r0, 800d6ca <_dtoa_r+0x67a>
 800d6c4:	f018 0f01 	tst.w	r8, #1
 800d6c8:	d10f      	bne.n	800d6ea <_dtoa_r+0x69a>
 800d6ca:	9904      	ldr	r1, [sp, #16]
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f000 fdff 	bl	800e2d0 <_Bfree>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6d6:	702b      	strb	r3, [r5, #0]
 800d6d8:	f10a 0301 	add.w	r3, sl, #1
 800d6dc:	6013      	str	r3, [r2, #0]
 800d6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 8241 	beq.w	800db68 <_dtoa_r+0xb18>
 800d6e6:	601d      	str	r5, [r3, #0]
 800d6e8:	e23e      	b.n	800db68 <_dtoa_r+0xb18>
 800d6ea:	f8cd a020 	str.w	sl, [sp, #32]
 800d6ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6f2:	2a39      	cmp	r2, #57	; 0x39
 800d6f4:	f105 33ff 	add.w	r3, r5, #4294967295
 800d6f8:	d108      	bne.n	800d70c <_dtoa_r+0x6bc>
 800d6fa:	459b      	cmp	fp, r3
 800d6fc:	d10a      	bne.n	800d714 <_dtoa_r+0x6c4>
 800d6fe:	9b08      	ldr	r3, [sp, #32]
 800d700:	3301      	adds	r3, #1
 800d702:	9308      	str	r3, [sp, #32]
 800d704:	2330      	movs	r3, #48	; 0x30
 800d706:	f88b 3000 	strb.w	r3, [fp]
 800d70a:	465b      	mov	r3, fp
 800d70c:	781a      	ldrb	r2, [r3, #0]
 800d70e:	3201      	adds	r2, #1
 800d710:	701a      	strb	r2, [r3, #0]
 800d712:	e78c      	b.n	800d62e <_dtoa_r+0x5de>
 800d714:	461d      	mov	r5, r3
 800d716:	e7ea      	b.n	800d6ee <_dtoa_r+0x69e>
 800d718:	2200      	movs	r2, #0
 800d71a:	4b9b      	ldr	r3, [pc, #620]	; (800d988 <_dtoa_r+0x938>)
 800d71c:	f7f2 ff74 	bl	8000608 <__aeabi_dmul>
 800d720:	2200      	movs	r2, #0
 800d722:	2300      	movs	r3, #0
 800d724:	4606      	mov	r6, r0
 800d726:	460f      	mov	r7, r1
 800d728:	f7f3 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d09a      	beq.n	800d666 <_dtoa_r+0x616>
 800d730:	e7cb      	b.n	800d6ca <_dtoa_r+0x67a>
 800d732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d734:	2a00      	cmp	r2, #0
 800d736:	f000 808b 	beq.w	800d850 <_dtoa_r+0x800>
 800d73a:	9a06      	ldr	r2, [sp, #24]
 800d73c:	2a01      	cmp	r2, #1
 800d73e:	dc6e      	bgt.n	800d81e <_dtoa_r+0x7ce>
 800d740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d742:	2a00      	cmp	r2, #0
 800d744:	d067      	beq.n	800d816 <_dtoa_r+0x7c6>
 800d746:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d74a:	9f07      	ldr	r7, [sp, #28]
 800d74c:	9d05      	ldr	r5, [sp, #20]
 800d74e:	9a05      	ldr	r2, [sp, #20]
 800d750:	2101      	movs	r1, #1
 800d752:	441a      	add	r2, r3
 800d754:	4620      	mov	r0, r4
 800d756:	9205      	str	r2, [sp, #20]
 800d758:	4498      	add	r8, r3
 800d75a:	f000 fe97 	bl	800e48c <__i2b>
 800d75e:	4606      	mov	r6, r0
 800d760:	2d00      	cmp	r5, #0
 800d762:	dd0c      	ble.n	800d77e <_dtoa_r+0x72e>
 800d764:	f1b8 0f00 	cmp.w	r8, #0
 800d768:	dd09      	ble.n	800d77e <_dtoa_r+0x72e>
 800d76a:	4545      	cmp	r5, r8
 800d76c:	9a05      	ldr	r2, [sp, #20]
 800d76e:	462b      	mov	r3, r5
 800d770:	bfa8      	it	ge
 800d772:	4643      	movge	r3, r8
 800d774:	1ad2      	subs	r2, r2, r3
 800d776:	9205      	str	r2, [sp, #20]
 800d778:	1aed      	subs	r5, r5, r3
 800d77a:	eba8 0803 	sub.w	r8, r8, r3
 800d77e:	9b07      	ldr	r3, [sp, #28]
 800d780:	b1eb      	cbz	r3, 800d7be <_dtoa_r+0x76e>
 800d782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d784:	2b00      	cmp	r3, #0
 800d786:	d067      	beq.n	800d858 <_dtoa_r+0x808>
 800d788:	b18f      	cbz	r7, 800d7ae <_dtoa_r+0x75e>
 800d78a:	4631      	mov	r1, r6
 800d78c:	463a      	mov	r2, r7
 800d78e:	4620      	mov	r0, r4
 800d790:	f000 ff1c 	bl	800e5cc <__pow5mult>
 800d794:	9a04      	ldr	r2, [sp, #16]
 800d796:	4601      	mov	r1, r0
 800d798:	4606      	mov	r6, r0
 800d79a:	4620      	mov	r0, r4
 800d79c:	f000 fe7f 	bl	800e49e <__multiply>
 800d7a0:	9904      	ldr	r1, [sp, #16]
 800d7a2:	9008      	str	r0, [sp, #32]
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 fd93 	bl	800e2d0 <_Bfree>
 800d7aa:	9b08      	ldr	r3, [sp, #32]
 800d7ac:	9304      	str	r3, [sp, #16]
 800d7ae:	9b07      	ldr	r3, [sp, #28]
 800d7b0:	1bda      	subs	r2, r3, r7
 800d7b2:	d004      	beq.n	800d7be <_dtoa_r+0x76e>
 800d7b4:	9904      	ldr	r1, [sp, #16]
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f000 ff08 	bl	800e5cc <__pow5mult>
 800d7bc:	9004      	str	r0, [sp, #16]
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 fe63 	bl	800e48c <__i2b>
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c8:	4607      	mov	r7, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 81d0 	beq.w	800db70 <_dtoa_r+0xb20>
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 fef9 	bl	800e5cc <__pow5mult>
 800d7da:	9b06      	ldr	r3, [sp, #24]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	4607      	mov	r7, r0
 800d7e0:	dc40      	bgt.n	800d864 <_dtoa_r+0x814>
 800d7e2:	9b00      	ldr	r3, [sp, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d139      	bne.n	800d85c <_dtoa_r+0x80c>
 800d7e8:	9b01      	ldr	r3, [sp, #4]
 800d7ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d136      	bne.n	800d860 <_dtoa_r+0x810>
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7f8:	0d1b      	lsrs	r3, r3, #20
 800d7fa:	051b      	lsls	r3, r3, #20
 800d7fc:	b12b      	cbz	r3, 800d80a <_dtoa_r+0x7ba>
 800d7fe:	9b05      	ldr	r3, [sp, #20]
 800d800:	3301      	adds	r3, #1
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	f108 0801 	add.w	r8, r8, #1
 800d808:	2301      	movs	r3, #1
 800d80a:	9307      	str	r3, [sp, #28]
 800d80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d12a      	bne.n	800d868 <_dtoa_r+0x818>
 800d812:	2001      	movs	r0, #1
 800d814:	e030      	b.n	800d878 <_dtoa_r+0x828>
 800d816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d818:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d81c:	e795      	b.n	800d74a <_dtoa_r+0x6fa>
 800d81e:	9b07      	ldr	r3, [sp, #28]
 800d820:	f109 37ff 	add.w	r7, r9, #4294967295
 800d824:	42bb      	cmp	r3, r7
 800d826:	bfbf      	itttt	lt
 800d828:	9b07      	ldrlt	r3, [sp, #28]
 800d82a:	9707      	strlt	r7, [sp, #28]
 800d82c:	1afa      	sublt	r2, r7, r3
 800d82e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d830:	bfbb      	ittet	lt
 800d832:	189b      	addlt	r3, r3, r2
 800d834:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d836:	1bdf      	subge	r7, r3, r7
 800d838:	2700      	movlt	r7, #0
 800d83a:	f1b9 0f00 	cmp.w	r9, #0
 800d83e:	bfb5      	itete	lt
 800d840:	9b05      	ldrlt	r3, [sp, #20]
 800d842:	9d05      	ldrge	r5, [sp, #20]
 800d844:	eba3 0509 	sublt.w	r5, r3, r9
 800d848:	464b      	movge	r3, r9
 800d84a:	bfb8      	it	lt
 800d84c:	2300      	movlt	r3, #0
 800d84e:	e77e      	b.n	800d74e <_dtoa_r+0x6fe>
 800d850:	9f07      	ldr	r7, [sp, #28]
 800d852:	9d05      	ldr	r5, [sp, #20]
 800d854:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d856:	e783      	b.n	800d760 <_dtoa_r+0x710>
 800d858:	9a07      	ldr	r2, [sp, #28]
 800d85a:	e7ab      	b.n	800d7b4 <_dtoa_r+0x764>
 800d85c:	2300      	movs	r3, #0
 800d85e:	e7d4      	b.n	800d80a <_dtoa_r+0x7ba>
 800d860:	9b00      	ldr	r3, [sp, #0]
 800d862:	e7d2      	b.n	800d80a <_dtoa_r+0x7ba>
 800d864:	2300      	movs	r3, #0
 800d866:	9307      	str	r3, [sp, #28]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d86e:	6918      	ldr	r0, [r3, #16]
 800d870:	f000 fdbe 	bl	800e3f0 <__hi0bits>
 800d874:	f1c0 0020 	rsb	r0, r0, #32
 800d878:	4440      	add	r0, r8
 800d87a:	f010 001f 	ands.w	r0, r0, #31
 800d87e:	d047      	beq.n	800d910 <_dtoa_r+0x8c0>
 800d880:	f1c0 0320 	rsb	r3, r0, #32
 800d884:	2b04      	cmp	r3, #4
 800d886:	dd3b      	ble.n	800d900 <_dtoa_r+0x8b0>
 800d888:	9b05      	ldr	r3, [sp, #20]
 800d88a:	f1c0 001c 	rsb	r0, r0, #28
 800d88e:	4403      	add	r3, r0
 800d890:	9305      	str	r3, [sp, #20]
 800d892:	4405      	add	r5, r0
 800d894:	4480      	add	r8, r0
 800d896:	9b05      	ldr	r3, [sp, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dd05      	ble.n	800d8a8 <_dtoa_r+0x858>
 800d89c:	461a      	mov	r2, r3
 800d89e:	9904      	ldr	r1, [sp, #16]
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 fee1 	bl	800e668 <__lshift>
 800d8a6:	9004      	str	r0, [sp, #16]
 800d8a8:	f1b8 0f00 	cmp.w	r8, #0
 800d8ac:	dd05      	ble.n	800d8ba <_dtoa_r+0x86a>
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f000 fed8 	bl	800e668 <__lshift>
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8bc:	b353      	cbz	r3, 800d914 <_dtoa_r+0x8c4>
 800d8be:	4639      	mov	r1, r7
 800d8c0:	9804      	ldr	r0, [sp, #16]
 800d8c2:	f000 ff25 	bl	800e710 <__mcmp>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	da24      	bge.n	800d914 <_dtoa_r+0x8c4>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	220a      	movs	r2, #10
 800d8ce:	9904      	ldr	r1, [sp, #16]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f000 fd14 	bl	800e2fe <__multadd>
 800d8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d8:	9004      	str	r0, [sp, #16]
 800d8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f000 814d 	beq.w	800db7e <_dtoa_r+0xb2e>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	220a      	movs	r2, #10
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fd07 	bl	800e2fe <__multadd>
 800d8f0:	9b02      	ldr	r3, [sp, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	4606      	mov	r6, r0
 800d8f6:	dc4f      	bgt.n	800d998 <_dtoa_r+0x948>
 800d8f8:	9b06      	ldr	r3, [sp, #24]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	dd4c      	ble.n	800d998 <_dtoa_r+0x948>
 800d8fe:	e011      	b.n	800d924 <_dtoa_r+0x8d4>
 800d900:	d0c9      	beq.n	800d896 <_dtoa_r+0x846>
 800d902:	9a05      	ldr	r2, [sp, #20]
 800d904:	331c      	adds	r3, #28
 800d906:	441a      	add	r2, r3
 800d908:	9205      	str	r2, [sp, #20]
 800d90a:	441d      	add	r5, r3
 800d90c:	4498      	add	r8, r3
 800d90e:	e7c2      	b.n	800d896 <_dtoa_r+0x846>
 800d910:	4603      	mov	r3, r0
 800d912:	e7f6      	b.n	800d902 <_dtoa_r+0x8b2>
 800d914:	f1b9 0f00 	cmp.w	r9, #0
 800d918:	dc38      	bgt.n	800d98c <_dtoa_r+0x93c>
 800d91a:	9b06      	ldr	r3, [sp, #24]
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	dd35      	ble.n	800d98c <_dtoa_r+0x93c>
 800d920:	f8cd 9008 	str.w	r9, [sp, #8]
 800d924:	9b02      	ldr	r3, [sp, #8]
 800d926:	b963      	cbnz	r3, 800d942 <_dtoa_r+0x8f2>
 800d928:	4639      	mov	r1, r7
 800d92a:	2205      	movs	r2, #5
 800d92c:	4620      	mov	r0, r4
 800d92e:	f000 fce6 	bl	800e2fe <__multadd>
 800d932:	4601      	mov	r1, r0
 800d934:	4607      	mov	r7, r0
 800d936:	9804      	ldr	r0, [sp, #16]
 800d938:	f000 feea 	bl	800e710 <__mcmp>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f73f adcc 	bgt.w	800d4da <_dtoa_r+0x48a>
 800d942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d944:	465d      	mov	r5, fp
 800d946:	ea6f 0a03 	mvn.w	sl, r3
 800d94a:	f04f 0900 	mov.w	r9, #0
 800d94e:	4639      	mov	r1, r7
 800d950:	4620      	mov	r0, r4
 800d952:	f000 fcbd 	bl	800e2d0 <_Bfree>
 800d956:	2e00      	cmp	r6, #0
 800d958:	f43f aeb7 	beq.w	800d6ca <_dtoa_r+0x67a>
 800d95c:	f1b9 0f00 	cmp.w	r9, #0
 800d960:	d005      	beq.n	800d96e <_dtoa_r+0x91e>
 800d962:	45b1      	cmp	r9, r6
 800d964:	d003      	beq.n	800d96e <_dtoa_r+0x91e>
 800d966:	4649      	mov	r1, r9
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fcb1 	bl	800e2d0 <_Bfree>
 800d96e:	4631      	mov	r1, r6
 800d970:	4620      	mov	r0, r4
 800d972:	f000 fcad 	bl	800e2d0 <_Bfree>
 800d976:	e6a8      	b.n	800d6ca <_dtoa_r+0x67a>
 800d978:	2700      	movs	r7, #0
 800d97a:	463e      	mov	r6, r7
 800d97c:	e7e1      	b.n	800d942 <_dtoa_r+0x8f2>
 800d97e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d982:	463e      	mov	r6, r7
 800d984:	e5a9      	b.n	800d4da <_dtoa_r+0x48a>
 800d986:	bf00      	nop
 800d988:	40240000 	.word	0x40240000
 800d98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d98e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 80fa 	beq.w	800db8c <_dtoa_r+0xb3c>
 800d998:	2d00      	cmp	r5, #0
 800d99a:	dd05      	ble.n	800d9a8 <_dtoa_r+0x958>
 800d99c:	4631      	mov	r1, r6
 800d99e:	462a      	mov	r2, r5
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f000 fe61 	bl	800e668 <__lshift>
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	9b07      	ldr	r3, [sp, #28]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d04c      	beq.n	800da48 <_dtoa_r+0x9f8>
 800d9ae:	6871      	ldr	r1, [r6, #4]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f000 fc59 	bl	800e268 <_Balloc>
 800d9b6:	6932      	ldr	r2, [r6, #16]
 800d9b8:	3202      	adds	r2, #2
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	0092      	lsls	r2, r2, #2
 800d9be:	f106 010c 	add.w	r1, r6, #12
 800d9c2:	300c      	adds	r0, #12
 800d9c4:	f7fd fd88 	bl	800b4d8 <memcpy>
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f000 fe4b 	bl	800e668 <__lshift>
 800d9d2:	9b00      	ldr	r3, [sp, #0]
 800d9d4:	f8cd b014 	str.w	fp, [sp, #20]
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	46b1      	mov	r9, r6
 800d9de:	9307      	str	r3, [sp, #28]
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	9804      	ldr	r0, [sp, #16]
 800d9e6:	f7ff faa5 	bl	800cf34 <quorem>
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d9f2:	9804      	ldr	r0, [sp, #16]
 800d9f4:	f000 fe8c 	bl	800e710 <__mcmp>
 800d9f8:	4632      	mov	r2, r6
 800d9fa:	9000      	str	r0, [sp, #0]
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4620      	mov	r0, r4
 800da00:	f000 fea0 	bl	800e744 <__mdiff>
 800da04:	68c3      	ldr	r3, [r0, #12]
 800da06:	4602      	mov	r2, r0
 800da08:	bb03      	cbnz	r3, 800da4c <_dtoa_r+0x9fc>
 800da0a:	4601      	mov	r1, r0
 800da0c:	9008      	str	r0, [sp, #32]
 800da0e:	9804      	ldr	r0, [sp, #16]
 800da10:	f000 fe7e 	bl	800e710 <__mcmp>
 800da14:	9a08      	ldr	r2, [sp, #32]
 800da16:	4603      	mov	r3, r0
 800da18:	4611      	mov	r1, r2
 800da1a:	4620      	mov	r0, r4
 800da1c:	9308      	str	r3, [sp, #32]
 800da1e:	f000 fc57 	bl	800e2d0 <_Bfree>
 800da22:	9b08      	ldr	r3, [sp, #32]
 800da24:	b9a3      	cbnz	r3, 800da50 <_dtoa_r+0xa00>
 800da26:	9a06      	ldr	r2, [sp, #24]
 800da28:	b992      	cbnz	r2, 800da50 <_dtoa_r+0xa00>
 800da2a:	9a07      	ldr	r2, [sp, #28]
 800da2c:	b982      	cbnz	r2, 800da50 <_dtoa_r+0xa00>
 800da2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da32:	d029      	beq.n	800da88 <_dtoa_r+0xa38>
 800da34:	9b00      	ldr	r3, [sp, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	dd01      	ble.n	800da3e <_dtoa_r+0x9ee>
 800da3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800da3e:	9b05      	ldr	r3, [sp, #20]
 800da40:	1c5d      	adds	r5, r3, #1
 800da42:	f883 8000 	strb.w	r8, [r3]
 800da46:	e782      	b.n	800d94e <_dtoa_r+0x8fe>
 800da48:	4630      	mov	r0, r6
 800da4a:	e7c2      	b.n	800d9d2 <_dtoa_r+0x982>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e7e3      	b.n	800da18 <_dtoa_r+0x9c8>
 800da50:	9a00      	ldr	r2, [sp, #0]
 800da52:	2a00      	cmp	r2, #0
 800da54:	db04      	blt.n	800da60 <_dtoa_r+0xa10>
 800da56:	d125      	bne.n	800daa4 <_dtoa_r+0xa54>
 800da58:	9a06      	ldr	r2, [sp, #24]
 800da5a:	bb1a      	cbnz	r2, 800daa4 <_dtoa_r+0xa54>
 800da5c:	9a07      	ldr	r2, [sp, #28]
 800da5e:	bb0a      	cbnz	r2, 800daa4 <_dtoa_r+0xa54>
 800da60:	2b00      	cmp	r3, #0
 800da62:	ddec      	ble.n	800da3e <_dtoa_r+0x9ee>
 800da64:	2201      	movs	r2, #1
 800da66:	9904      	ldr	r1, [sp, #16]
 800da68:	4620      	mov	r0, r4
 800da6a:	f000 fdfd 	bl	800e668 <__lshift>
 800da6e:	4639      	mov	r1, r7
 800da70:	9004      	str	r0, [sp, #16]
 800da72:	f000 fe4d 	bl	800e710 <__mcmp>
 800da76:	2800      	cmp	r0, #0
 800da78:	dc03      	bgt.n	800da82 <_dtoa_r+0xa32>
 800da7a:	d1e0      	bne.n	800da3e <_dtoa_r+0x9ee>
 800da7c:	f018 0f01 	tst.w	r8, #1
 800da80:	d0dd      	beq.n	800da3e <_dtoa_r+0x9ee>
 800da82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da86:	d1d8      	bne.n	800da3a <_dtoa_r+0x9ea>
 800da88:	9b05      	ldr	r3, [sp, #20]
 800da8a:	9a05      	ldr	r2, [sp, #20]
 800da8c:	1c5d      	adds	r5, r3, #1
 800da8e:	2339      	movs	r3, #57	; 0x39
 800da90:	7013      	strb	r3, [r2, #0]
 800da92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da96:	2b39      	cmp	r3, #57	; 0x39
 800da98:	f105 32ff 	add.w	r2, r5, #4294967295
 800da9c:	d04f      	beq.n	800db3e <_dtoa_r+0xaee>
 800da9e:	3301      	adds	r3, #1
 800daa0:	7013      	strb	r3, [r2, #0]
 800daa2:	e754      	b.n	800d94e <_dtoa_r+0x8fe>
 800daa4:	9a05      	ldr	r2, [sp, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f102 0501 	add.w	r5, r2, #1
 800daac:	dd06      	ble.n	800dabc <_dtoa_r+0xa6c>
 800daae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dab2:	d0e9      	beq.n	800da88 <_dtoa_r+0xa38>
 800dab4:	f108 0801 	add.w	r8, r8, #1
 800dab8:	9b05      	ldr	r3, [sp, #20]
 800daba:	e7c2      	b.n	800da42 <_dtoa_r+0x9f2>
 800dabc:	9a02      	ldr	r2, [sp, #8]
 800dabe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dac2:	eba5 030b 	sub.w	r3, r5, fp
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d021      	beq.n	800db0e <_dtoa_r+0xabe>
 800daca:	2300      	movs	r3, #0
 800dacc:	220a      	movs	r2, #10
 800dace:	9904      	ldr	r1, [sp, #16]
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 fc14 	bl	800e2fe <__multadd>
 800dad6:	45b1      	cmp	r9, r6
 800dad8:	9004      	str	r0, [sp, #16]
 800dada:	f04f 0300 	mov.w	r3, #0
 800dade:	f04f 020a 	mov.w	r2, #10
 800dae2:	4649      	mov	r1, r9
 800dae4:	4620      	mov	r0, r4
 800dae6:	d105      	bne.n	800daf4 <_dtoa_r+0xaa4>
 800dae8:	f000 fc09 	bl	800e2fe <__multadd>
 800daec:	4681      	mov	r9, r0
 800daee:	4606      	mov	r6, r0
 800daf0:	9505      	str	r5, [sp, #20]
 800daf2:	e776      	b.n	800d9e2 <_dtoa_r+0x992>
 800daf4:	f000 fc03 	bl	800e2fe <__multadd>
 800daf8:	4631      	mov	r1, r6
 800dafa:	4681      	mov	r9, r0
 800dafc:	2300      	movs	r3, #0
 800dafe:	220a      	movs	r2, #10
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fbfc 	bl	800e2fe <__multadd>
 800db06:	4606      	mov	r6, r0
 800db08:	e7f2      	b.n	800daf0 <_dtoa_r+0xaa0>
 800db0a:	f04f 0900 	mov.w	r9, #0
 800db0e:	2201      	movs	r2, #1
 800db10:	9904      	ldr	r1, [sp, #16]
 800db12:	4620      	mov	r0, r4
 800db14:	f000 fda8 	bl	800e668 <__lshift>
 800db18:	4639      	mov	r1, r7
 800db1a:	9004      	str	r0, [sp, #16]
 800db1c:	f000 fdf8 	bl	800e710 <__mcmp>
 800db20:	2800      	cmp	r0, #0
 800db22:	dcb6      	bgt.n	800da92 <_dtoa_r+0xa42>
 800db24:	d102      	bne.n	800db2c <_dtoa_r+0xadc>
 800db26:	f018 0f01 	tst.w	r8, #1
 800db2a:	d1b2      	bne.n	800da92 <_dtoa_r+0xa42>
 800db2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db30:	2b30      	cmp	r3, #48	; 0x30
 800db32:	f105 32ff 	add.w	r2, r5, #4294967295
 800db36:	f47f af0a 	bne.w	800d94e <_dtoa_r+0x8fe>
 800db3a:	4615      	mov	r5, r2
 800db3c:	e7f6      	b.n	800db2c <_dtoa_r+0xadc>
 800db3e:	4593      	cmp	fp, r2
 800db40:	d105      	bne.n	800db4e <_dtoa_r+0xafe>
 800db42:	2331      	movs	r3, #49	; 0x31
 800db44:	f10a 0a01 	add.w	sl, sl, #1
 800db48:	f88b 3000 	strb.w	r3, [fp]
 800db4c:	e6ff      	b.n	800d94e <_dtoa_r+0x8fe>
 800db4e:	4615      	mov	r5, r2
 800db50:	e79f      	b.n	800da92 <_dtoa_r+0xa42>
 800db52:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dbb8 <_dtoa_r+0xb68>
 800db56:	e007      	b.n	800db68 <_dtoa_r+0xb18>
 800db58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dbbc <_dtoa_r+0xb6c>
 800db5e:	b11b      	cbz	r3, 800db68 <_dtoa_r+0xb18>
 800db60:	f10b 0308 	add.w	r3, fp, #8
 800db64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	4658      	mov	r0, fp
 800db6a:	b017      	add	sp, #92	; 0x5c
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	9b06      	ldr	r3, [sp, #24]
 800db72:	2b01      	cmp	r3, #1
 800db74:	f77f ae35 	ble.w	800d7e2 <_dtoa_r+0x792>
 800db78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db7a:	9307      	str	r3, [sp, #28]
 800db7c:	e649      	b.n	800d812 <_dtoa_r+0x7c2>
 800db7e:	9b02      	ldr	r3, [sp, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	dc03      	bgt.n	800db8c <_dtoa_r+0xb3c>
 800db84:	9b06      	ldr	r3, [sp, #24]
 800db86:	2b02      	cmp	r3, #2
 800db88:	f73f aecc 	bgt.w	800d924 <_dtoa_r+0x8d4>
 800db8c:	465d      	mov	r5, fp
 800db8e:	4639      	mov	r1, r7
 800db90:	9804      	ldr	r0, [sp, #16]
 800db92:	f7ff f9cf 	bl	800cf34 <quorem>
 800db96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db9a:	f805 8b01 	strb.w	r8, [r5], #1
 800db9e:	9a02      	ldr	r2, [sp, #8]
 800dba0:	eba5 030b 	sub.w	r3, r5, fp
 800dba4:	429a      	cmp	r2, r3
 800dba6:	ddb0      	ble.n	800db0a <_dtoa_r+0xaba>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	220a      	movs	r2, #10
 800dbac:	9904      	ldr	r1, [sp, #16]
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 fba5 	bl	800e2fe <__multadd>
 800dbb4:	9004      	str	r0, [sp, #16]
 800dbb6:	e7ea      	b.n	800db8e <_dtoa_r+0xb3e>
 800dbb8:	0800f01c 	.word	0x0800f01c
 800dbbc:	0800f098 	.word	0x0800f098

0800dbc0 <rshift>:
 800dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc2:	6906      	ldr	r6, [r0, #16]
 800dbc4:	114b      	asrs	r3, r1, #5
 800dbc6:	429e      	cmp	r6, r3
 800dbc8:	f100 0414 	add.w	r4, r0, #20
 800dbcc:	dd30      	ble.n	800dc30 <rshift+0x70>
 800dbce:	f011 011f 	ands.w	r1, r1, #31
 800dbd2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dbd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800dbda:	d108      	bne.n	800dbee <rshift+0x2e>
 800dbdc:	4621      	mov	r1, r4
 800dbde:	42b2      	cmp	r2, r6
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	d211      	bcs.n	800dc08 <rshift+0x48>
 800dbe4:	f852 3b04 	ldr.w	r3, [r2], #4
 800dbe8:	f841 3b04 	str.w	r3, [r1], #4
 800dbec:	e7f7      	b.n	800dbde <rshift+0x1e>
 800dbee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800dbf2:	f1c1 0c20 	rsb	ip, r1, #32
 800dbf6:	40cd      	lsrs	r5, r1
 800dbf8:	3204      	adds	r2, #4
 800dbfa:	4623      	mov	r3, r4
 800dbfc:	42b2      	cmp	r2, r6
 800dbfe:	4617      	mov	r7, r2
 800dc00:	d30c      	bcc.n	800dc1c <rshift+0x5c>
 800dc02:	601d      	str	r5, [r3, #0]
 800dc04:	b105      	cbz	r5, 800dc08 <rshift+0x48>
 800dc06:	3304      	adds	r3, #4
 800dc08:	1b1a      	subs	r2, r3, r4
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc10:	bf08      	it	eq
 800dc12:	2300      	moveq	r3, #0
 800dc14:	6102      	str	r2, [r0, #16]
 800dc16:	bf08      	it	eq
 800dc18:	6143      	streq	r3, [r0, #20]
 800dc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc1c:	683f      	ldr	r7, [r7, #0]
 800dc1e:	fa07 f70c 	lsl.w	r7, r7, ip
 800dc22:	433d      	orrs	r5, r7
 800dc24:	f843 5b04 	str.w	r5, [r3], #4
 800dc28:	f852 5b04 	ldr.w	r5, [r2], #4
 800dc2c:	40cd      	lsrs	r5, r1
 800dc2e:	e7e5      	b.n	800dbfc <rshift+0x3c>
 800dc30:	4623      	mov	r3, r4
 800dc32:	e7e9      	b.n	800dc08 <rshift+0x48>

0800dc34 <__hexdig_fun>:
 800dc34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	d802      	bhi.n	800dc42 <__hexdig_fun+0xe>
 800dc3c:	3820      	subs	r0, #32
 800dc3e:	b2c0      	uxtb	r0, r0
 800dc40:	4770      	bx	lr
 800dc42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dc46:	2b05      	cmp	r3, #5
 800dc48:	d801      	bhi.n	800dc4e <__hexdig_fun+0x1a>
 800dc4a:	3847      	subs	r0, #71	; 0x47
 800dc4c:	e7f7      	b.n	800dc3e <__hexdig_fun+0xa>
 800dc4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	d801      	bhi.n	800dc5a <__hexdig_fun+0x26>
 800dc56:	3827      	subs	r0, #39	; 0x27
 800dc58:	e7f1      	b.n	800dc3e <__hexdig_fun+0xa>
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	4770      	bx	lr

0800dc5e <__gethex>:
 800dc5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc62:	b08b      	sub	sp, #44	; 0x2c
 800dc64:	468a      	mov	sl, r1
 800dc66:	9002      	str	r0, [sp, #8]
 800dc68:	9816      	ldr	r0, [sp, #88]	; 0x58
 800dc6a:	9306      	str	r3, [sp, #24]
 800dc6c:	4690      	mov	r8, r2
 800dc6e:	f000 fad0 	bl	800e212 <__localeconv_l>
 800dc72:	6803      	ldr	r3, [r0, #0]
 800dc74:	9303      	str	r3, [sp, #12]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f2 fab2 	bl	80001e0 <strlen>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	9001      	str	r0, [sp, #4]
 800dc80:	4403      	add	r3, r0
 800dc82:	f04f 0b00 	mov.w	fp, #0
 800dc86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dc8a:	9307      	str	r3, [sp, #28]
 800dc8c:	f8da 3000 	ldr.w	r3, [sl]
 800dc90:	3302      	adds	r3, #2
 800dc92:	461f      	mov	r7, r3
 800dc94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc98:	2830      	cmp	r0, #48	; 0x30
 800dc9a:	d06c      	beq.n	800dd76 <__gethex+0x118>
 800dc9c:	f7ff ffca 	bl	800dc34 <__hexdig_fun>
 800dca0:	4604      	mov	r4, r0
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d16a      	bne.n	800dd7c <__gethex+0x11e>
 800dca6:	9a01      	ldr	r2, [sp, #4]
 800dca8:	9903      	ldr	r1, [sp, #12]
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f001 f8f4 	bl	800ee98 <strncmp>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d166      	bne.n	800dd82 <__gethex+0x124>
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	5cf8      	ldrb	r0, [r7, r3]
 800dcb8:	18fe      	adds	r6, r7, r3
 800dcba:	f7ff ffbb 	bl	800dc34 <__hexdig_fun>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d062      	beq.n	800dd88 <__gethex+0x12a>
 800dcc2:	4633      	mov	r3, r6
 800dcc4:	7818      	ldrb	r0, [r3, #0]
 800dcc6:	2830      	cmp	r0, #48	; 0x30
 800dcc8:	461f      	mov	r7, r3
 800dcca:	f103 0301 	add.w	r3, r3, #1
 800dcce:	d0f9      	beq.n	800dcc4 <__gethex+0x66>
 800dcd0:	f7ff ffb0 	bl	800dc34 <__hexdig_fun>
 800dcd4:	fab0 f580 	clz	r5, r0
 800dcd8:	096d      	lsrs	r5, r5, #5
 800dcda:	4634      	mov	r4, r6
 800dcdc:	f04f 0b01 	mov.w	fp, #1
 800dce0:	463a      	mov	r2, r7
 800dce2:	4616      	mov	r6, r2
 800dce4:	3201      	adds	r2, #1
 800dce6:	7830      	ldrb	r0, [r6, #0]
 800dce8:	f7ff ffa4 	bl	800dc34 <__hexdig_fun>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d1f8      	bne.n	800dce2 <__gethex+0x84>
 800dcf0:	9a01      	ldr	r2, [sp, #4]
 800dcf2:	9903      	ldr	r1, [sp, #12]
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f001 f8cf 	bl	800ee98 <strncmp>
 800dcfa:	b950      	cbnz	r0, 800dd12 <__gethex+0xb4>
 800dcfc:	b954      	cbnz	r4, 800dd14 <__gethex+0xb6>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	18f4      	adds	r4, r6, r3
 800dd02:	4622      	mov	r2, r4
 800dd04:	4616      	mov	r6, r2
 800dd06:	3201      	adds	r2, #1
 800dd08:	7830      	ldrb	r0, [r6, #0]
 800dd0a:	f7ff ff93 	bl	800dc34 <__hexdig_fun>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d1f8      	bne.n	800dd04 <__gethex+0xa6>
 800dd12:	b10c      	cbz	r4, 800dd18 <__gethex+0xba>
 800dd14:	1ba4      	subs	r4, r4, r6
 800dd16:	00a4      	lsls	r4, r4, #2
 800dd18:	7833      	ldrb	r3, [r6, #0]
 800dd1a:	2b50      	cmp	r3, #80	; 0x50
 800dd1c:	d001      	beq.n	800dd22 <__gethex+0xc4>
 800dd1e:	2b70      	cmp	r3, #112	; 0x70
 800dd20:	d140      	bne.n	800dda4 <__gethex+0x146>
 800dd22:	7873      	ldrb	r3, [r6, #1]
 800dd24:	2b2b      	cmp	r3, #43	; 0x2b
 800dd26:	d031      	beq.n	800dd8c <__gethex+0x12e>
 800dd28:	2b2d      	cmp	r3, #45	; 0x2d
 800dd2a:	d033      	beq.n	800dd94 <__gethex+0x136>
 800dd2c:	1c71      	adds	r1, r6, #1
 800dd2e:	f04f 0900 	mov.w	r9, #0
 800dd32:	7808      	ldrb	r0, [r1, #0]
 800dd34:	f7ff ff7e 	bl	800dc34 <__hexdig_fun>
 800dd38:	1e43      	subs	r3, r0, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b18      	cmp	r3, #24
 800dd3e:	d831      	bhi.n	800dda4 <__gethex+0x146>
 800dd40:	f1a0 0210 	sub.w	r2, r0, #16
 800dd44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd48:	f7ff ff74 	bl	800dc34 <__hexdig_fun>
 800dd4c:	1e43      	subs	r3, r0, #1
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b18      	cmp	r3, #24
 800dd52:	d922      	bls.n	800dd9a <__gethex+0x13c>
 800dd54:	f1b9 0f00 	cmp.w	r9, #0
 800dd58:	d000      	beq.n	800dd5c <__gethex+0xfe>
 800dd5a:	4252      	negs	r2, r2
 800dd5c:	4414      	add	r4, r2
 800dd5e:	f8ca 1000 	str.w	r1, [sl]
 800dd62:	b30d      	cbz	r5, 800dda8 <__gethex+0x14a>
 800dd64:	f1bb 0f00 	cmp.w	fp, #0
 800dd68:	bf0c      	ite	eq
 800dd6a:	2706      	moveq	r7, #6
 800dd6c:	2700      	movne	r7, #0
 800dd6e:	4638      	mov	r0, r7
 800dd70:	b00b      	add	sp, #44	; 0x2c
 800dd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd76:	f10b 0b01 	add.w	fp, fp, #1
 800dd7a:	e78a      	b.n	800dc92 <__gethex+0x34>
 800dd7c:	2500      	movs	r5, #0
 800dd7e:	462c      	mov	r4, r5
 800dd80:	e7ae      	b.n	800dce0 <__gethex+0x82>
 800dd82:	463e      	mov	r6, r7
 800dd84:	2501      	movs	r5, #1
 800dd86:	e7c7      	b.n	800dd18 <__gethex+0xba>
 800dd88:	4604      	mov	r4, r0
 800dd8a:	e7fb      	b.n	800dd84 <__gethex+0x126>
 800dd8c:	f04f 0900 	mov.w	r9, #0
 800dd90:	1cb1      	adds	r1, r6, #2
 800dd92:	e7ce      	b.n	800dd32 <__gethex+0xd4>
 800dd94:	f04f 0901 	mov.w	r9, #1
 800dd98:	e7fa      	b.n	800dd90 <__gethex+0x132>
 800dd9a:	230a      	movs	r3, #10
 800dd9c:	fb03 0202 	mla	r2, r3, r2, r0
 800dda0:	3a10      	subs	r2, #16
 800dda2:	e7cf      	b.n	800dd44 <__gethex+0xe6>
 800dda4:	4631      	mov	r1, r6
 800dda6:	e7da      	b.n	800dd5e <__gethex+0x100>
 800dda8:	1bf3      	subs	r3, r6, r7
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	4629      	mov	r1, r5
 800ddae:	2b07      	cmp	r3, #7
 800ddb0:	dc49      	bgt.n	800de46 <__gethex+0x1e8>
 800ddb2:	9802      	ldr	r0, [sp, #8]
 800ddb4:	f000 fa58 	bl	800e268 <_Balloc>
 800ddb8:	9b01      	ldr	r3, [sp, #4]
 800ddba:	f100 0914 	add.w	r9, r0, #20
 800ddbe:	f04f 0b00 	mov.w	fp, #0
 800ddc2:	f1c3 0301 	rsb	r3, r3, #1
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	f8cd 9010 	str.w	r9, [sp, #16]
 800ddcc:	46da      	mov	sl, fp
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	42b7      	cmp	r7, r6
 800ddd2:	d33b      	bcc.n	800de4c <__gethex+0x1ee>
 800ddd4:	9804      	ldr	r0, [sp, #16]
 800ddd6:	f840 ab04 	str.w	sl, [r0], #4
 800ddda:	eba0 0009 	sub.w	r0, r0, r9
 800ddde:	1080      	asrs	r0, r0, #2
 800dde0:	6128      	str	r0, [r5, #16]
 800dde2:	0147      	lsls	r7, r0, #5
 800dde4:	4650      	mov	r0, sl
 800dde6:	f000 fb03 	bl	800e3f0 <__hi0bits>
 800ddea:	f8d8 6000 	ldr.w	r6, [r8]
 800ddee:	1a3f      	subs	r7, r7, r0
 800ddf0:	42b7      	cmp	r7, r6
 800ddf2:	dd64      	ble.n	800debe <__gethex+0x260>
 800ddf4:	1bbf      	subs	r7, r7, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 fe13 	bl	800ea24 <__any_on>
 800ddfe:	4682      	mov	sl, r0
 800de00:	b178      	cbz	r0, 800de22 <__gethex+0x1c4>
 800de02:	1e7b      	subs	r3, r7, #1
 800de04:	1159      	asrs	r1, r3, #5
 800de06:	f003 021f 	and.w	r2, r3, #31
 800de0a:	f04f 0a01 	mov.w	sl, #1
 800de0e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800de12:	fa0a f202 	lsl.w	r2, sl, r2
 800de16:	420a      	tst	r2, r1
 800de18:	d003      	beq.n	800de22 <__gethex+0x1c4>
 800de1a:	4553      	cmp	r3, sl
 800de1c:	dc46      	bgt.n	800deac <__gethex+0x24e>
 800de1e:	f04f 0a02 	mov.w	sl, #2
 800de22:	4639      	mov	r1, r7
 800de24:	4628      	mov	r0, r5
 800de26:	f7ff fecb 	bl	800dbc0 <rshift>
 800de2a:	443c      	add	r4, r7
 800de2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de30:	42a3      	cmp	r3, r4
 800de32:	da52      	bge.n	800deda <__gethex+0x27c>
 800de34:	4629      	mov	r1, r5
 800de36:	9802      	ldr	r0, [sp, #8]
 800de38:	f000 fa4a 	bl	800e2d0 <_Bfree>
 800de3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de3e:	2300      	movs	r3, #0
 800de40:	6013      	str	r3, [r2, #0]
 800de42:	27a3      	movs	r7, #163	; 0xa3
 800de44:	e793      	b.n	800dd6e <__gethex+0x110>
 800de46:	3101      	adds	r1, #1
 800de48:	105b      	asrs	r3, r3, #1
 800de4a:	e7b0      	b.n	800ddae <__gethex+0x150>
 800de4c:	1e73      	subs	r3, r6, #1
 800de4e:	9305      	str	r3, [sp, #20]
 800de50:	9a07      	ldr	r2, [sp, #28]
 800de52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de56:	4293      	cmp	r3, r2
 800de58:	d018      	beq.n	800de8c <__gethex+0x22e>
 800de5a:	f1bb 0f20 	cmp.w	fp, #32
 800de5e:	d107      	bne.n	800de70 <__gethex+0x212>
 800de60:	9b04      	ldr	r3, [sp, #16]
 800de62:	f8c3 a000 	str.w	sl, [r3]
 800de66:	3304      	adds	r3, #4
 800de68:	f04f 0a00 	mov.w	sl, #0
 800de6c:	9304      	str	r3, [sp, #16]
 800de6e:	46d3      	mov	fp, sl
 800de70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800de74:	f7ff fede 	bl	800dc34 <__hexdig_fun>
 800de78:	f000 000f 	and.w	r0, r0, #15
 800de7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800de80:	ea4a 0a00 	orr.w	sl, sl, r0
 800de84:	f10b 0b04 	add.w	fp, fp, #4
 800de88:	9b05      	ldr	r3, [sp, #20]
 800de8a:	e00d      	b.n	800dea8 <__gethex+0x24a>
 800de8c:	9b05      	ldr	r3, [sp, #20]
 800de8e:	9a08      	ldr	r2, [sp, #32]
 800de90:	4413      	add	r3, r2
 800de92:	42bb      	cmp	r3, r7
 800de94:	d3e1      	bcc.n	800de5a <__gethex+0x1fc>
 800de96:	4618      	mov	r0, r3
 800de98:	9a01      	ldr	r2, [sp, #4]
 800de9a:	9903      	ldr	r1, [sp, #12]
 800de9c:	9309      	str	r3, [sp, #36]	; 0x24
 800de9e:	f000 fffb 	bl	800ee98 <strncmp>
 800dea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1d8      	bne.n	800de5a <__gethex+0x1fc>
 800dea8:	461e      	mov	r6, r3
 800deaa:	e791      	b.n	800ddd0 <__gethex+0x172>
 800deac:	1eb9      	subs	r1, r7, #2
 800deae:	4628      	mov	r0, r5
 800deb0:	f000 fdb8 	bl	800ea24 <__any_on>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d0b2      	beq.n	800de1e <__gethex+0x1c0>
 800deb8:	f04f 0a03 	mov.w	sl, #3
 800debc:	e7b1      	b.n	800de22 <__gethex+0x1c4>
 800debe:	da09      	bge.n	800ded4 <__gethex+0x276>
 800dec0:	1bf7      	subs	r7, r6, r7
 800dec2:	4629      	mov	r1, r5
 800dec4:	463a      	mov	r2, r7
 800dec6:	9802      	ldr	r0, [sp, #8]
 800dec8:	f000 fbce 	bl	800e668 <__lshift>
 800decc:	1be4      	subs	r4, r4, r7
 800dece:	4605      	mov	r5, r0
 800ded0:	f100 0914 	add.w	r9, r0, #20
 800ded4:	f04f 0a00 	mov.w	sl, #0
 800ded8:	e7a8      	b.n	800de2c <__gethex+0x1ce>
 800deda:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dede:	42a0      	cmp	r0, r4
 800dee0:	dd6a      	ble.n	800dfb8 <__gethex+0x35a>
 800dee2:	1b04      	subs	r4, r0, r4
 800dee4:	42a6      	cmp	r6, r4
 800dee6:	dc2e      	bgt.n	800df46 <__gethex+0x2e8>
 800dee8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d022      	beq.n	800df36 <__gethex+0x2d8>
 800def0:	2b03      	cmp	r3, #3
 800def2:	d024      	beq.n	800df3e <__gethex+0x2e0>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d115      	bne.n	800df24 <__gethex+0x2c6>
 800def8:	42a6      	cmp	r6, r4
 800defa:	d113      	bne.n	800df24 <__gethex+0x2c6>
 800defc:	2e01      	cmp	r6, #1
 800defe:	dc0b      	bgt.n	800df18 <__gethex+0x2ba>
 800df00:	9a06      	ldr	r2, [sp, #24]
 800df02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	2301      	movs	r3, #1
 800df0a:	612b      	str	r3, [r5, #16]
 800df0c:	f8c9 3000 	str.w	r3, [r9]
 800df10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df12:	2762      	movs	r7, #98	; 0x62
 800df14:	601d      	str	r5, [r3, #0]
 800df16:	e72a      	b.n	800dd6e <__gethex+0x110>
 800df18:	1e71      	subs	r1, r6, #1
 800df1a:	4628      	mov	r0, r5
 800df1c:	f000 fd82 	bl	800ea24 <__any_on>
 800df20:	2800      	cmp	r0, #0
 800df22:	d1ed      	bne.n	800df00 <__gethex+0x2a2>
 800df24:	4629      	mov	r1, r5
 800df26:	9802      	ldr	r0, [sp, #8]
 800df28:	f000 f9d2 	bl	800e2d0 <_Bfree>
 800df2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df2e:	2300      	movs	r3, #0
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	2750      	movs	r7, #80	; 0x50
 800df34:	e71b      	b.n	800dd6e <__gethex+0x110>
 800df36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0e1      	beq.n	800df00 <__gethex+0x2a2>
 800df3c:	e7f2      	b.n	800df24 <__gethex+0x2c6>
 800df3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1dd      	bne.n	800df00 <__gethex+0x2a2>
 800df44:	e7ee      	b.n	800df24 <__gethex+0x2c6>
 800df46:	1e67      	subs	r7, r4, #1
 800df48:	f1ba 0f00 	cmp.w	sl, #0
 800df4c:	d131      	bne.n	800dfb2 <__gethex+0x354>
 800df4e:	b127      	cbz	r7, 800df5a <__gethex+0x2fc>
 800df50:	4639      	mov	r1, r7
 800df52:	4628      	mov	r0, r5
 800df54:	f000 fd66 	bl	800ea24 <__any_on>
 800df58:	4682      	mov	sl, r0
 800df5a:	117a      	asrs	r2, r7, #5
 800df5c:	2301      	movs	r3, #1
 800df5e:	f007 071f 	and.w	r7, r7, #31
 800df62:	fa03 f707 	lsl.w	r7, r3, r7
 800df66:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800df6a:	4621      	mov	r1, r4
 800df6c:	421f      	tst	r7, r3
 800df6e:	4628      	mov	r0, r5
 800df70:	bf18      	it	ne
 800df72:	f04a 0a02 	orrne.w	sl, sl, #2
 800df76:	1b36      	subs	r6, r6, r4
 800df78:	f7ff fe22 	bl	800dbc0 <rshift>
 800df7c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800df80:	2702      	movs	r7, #2
 800df82:	f1ba 0f00 	cmp.w	sl, #0
 800df86:	d048      	beq.n	800e01a <__gethex+0x3bc>
 800df88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d015      	beq.n	800dfbc <__gethex+0x35e>
 800df90:	2b03      	cmp	r3, #3
 800df92:	d017      	beq.n	800dfc4 <__gethex+0x366>
 800df94:	2b01      	cmp	r3, #1
 800df96:	d109      	bne.n	800dfac <__gethex+0x34e>
 800df98:	f01a 0f02 	tst.w	sl, #2
 800df9c:	d006      	beq.n	800dfac <__gethex+0x34e>
 800df9e:	f8d9 3000 	ldr.w	r3, [r9]
 800dfa2:	ea4a 0a03 	orr.w	sl, sl, r3
 800dfa6:	f01a 0f01 	tst.w	sl, #1
 800dfaa:	d10e      	bne.n	800dfca <__gethex+0x36c>
 800dfac:	f047 0710 	orr.w	r7, r7, #16
 800dfb0:	e033      	b.n	800e01a <__gethex+0x3bc>
 800dfb2:	f04f 0a01 	mov.w	sl, #1
 800dfb6:	e7d0      	b.n	800df5a <__gethex+0x2fc>
 800dfb8:	2701      	movs	r7, #1
 800dfba:	e7e2      	b.n	800df82 <__gethex+0x324>
 800dfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfbe:	f1c3 0301 	rsb	r3, r3, #1
 800dfc2:	9315      	str	r3, [sp, #84]	; 0x54
 800dfc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0f0      	beq.n	800dfac <__gethex+0x34e>
 800dfca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dfce:	f105 0314 	add.w	r3, r5, #20
 800dfd2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dfd6:	eb03 010a 	add.w	r1, r3, sl
 800dfda:	f04f 0c00 	mov.w	ip, #0
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfe8:	d01c      	beq.n	800e024 <__gethex+0x3c6>
 800dfea:	3201      	adds	r2, #1
 800dfec:	6002      	str	r2, [r0, #0]
 800dfee:	2f02      	cmp	r7, #2
 800dff0:	f105 0314 	add.w	r3, r5, #20
 800dff4:	d138      	bne.n	800e068 <__gethex+0x40a>
 800dff6:	f8d8 2000 	ldr.w	r2, [r8]
 800dffa:	3a01      	subs	r2, #1
 800dffc:	42b2      	cmp	r2, r6
 800dffe:	d10a      	bne.n	800e016 <__gethex+0x3b8>
 800e000:	1171      	asrs	r1, r6, #5
 800e002:	2201      	movs	r2, #1
 800e004:	f006 061f 	and.w	r6, r6, #31
 800e008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e00c:	fa02 f606 	lsl.w	r6, r2, r6
 800e010:	421e      	tst	r6, r3
 800e012:	bf18      	it	ne
 800e014:	4617      	movne	r7, r2
 800e016:	f047 0720 	orr.w	r7, r7, #32
 800e01a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e01c:	601d      	str	r5, [r3, #0]
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	601c      	str	r4, [r3, #0]
 800e022:	e6a4      	b.n	800dd6e <__gethex+0x110>
 800e024:	4299      	cmp	r1, r3
 800e026:	f843 cc04 	str.w	ip, [r3, #-4]
 800e02a:	d8d8      	bhi.n	800dfde <__gethex+0x380>
 800e02c:	68ab      	ldr	r3, [r5, #8]
 800e02e:	4599      	cmp	r9, r3
 800e030:	db12      	blt.n	800e058 <__gethex+0x3fa>
 800e032:	6869      	ldr	r1, [r5, #4]
 800e034:	9802      	ldr	r0, [sp, #8]
 800e036:	3101      	adds	r1, #1
 800e038:	f000 f916 	bl	800e268 <_Balloc>
 800e03c:	692a      	ldr	r2, [r5, #16]
 800e03e:	3202      	adds	r2, #2
 800e040:	f105 010c 	add.w	r1, r5, #12
 800e044:	4683      	mov	fp, r0
 800e046:	0092      	lsls	r2, r2, #2
 800e048:	300c      	adds	r0, #12
 800e04a:	f7fd fa45 	bl	800b4d8 <memcpy>
 800e04e:	4629      	mov	r1, r5
 800e050:	9802      	ldr	r0, [sp, #8]
 800e052:	f000 f93d 	bl	800e2d0 <_Bfree>
 800e056:	465d      	mov	r5, fp
 800e058:	692b      	ldr	r3, [r5, #16]
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e060:	612a      	str	r2, [r5, #16]
 800e062:	2201      	movs	r2, #1
 800e064:	615a      	str	r2, [r3, #20]
 800e066:	e7c2      	b.n	800dfee <__gethex+0x390>
 800e068:	692a      	ldr	r2, [r5, #16]
 800e06a:	454a      	cmp	r2, r9
 800e06c:	dd0b      	ble.n	800e086 <__gethex+0x428>
 800e06e:	2101      	movs	r1, #1
 800e070:	4628      	mov	r0, r5
 800e072:	f7ff fda5 	bl	800dbc0 <rshift>
 800e076:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e07a:	3401      	adds	r4, #1
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	f6ff aed9 	blt.w	800de34 <__gethex+0x1d6>
 800e082:	2701      	movs	r7, #1
 800e084:	e7c7      	b.n	800e016 <__gethex+0x3b8>
 800e086:	f016 061f 	ands.w	r6, r6, #31
 800e08a:	d0fa      	beq.n	800e082 <__gethex+0x424>
 800e08c:	449a      	add	sl, r3
 800e08e:	f1c6 0620 	rsb	r6, r6, #32
 800e092:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e096:	f000 f9ab 	bl	800e3f0 <__hi0bits>
 800e09a:	42b0      	cmp	r0, r6
 800e09c:	dbe7      	blt.n	800e06e <__gethex+0x410>
 800e09e:	e7f0      	b.n	800e082 <__gethex+0x424>

0800e0a0 <L_shift>:
 800e0a0:	f1c2 0208 	rsb	r2, r2, #8
 800e0a4:	0092      	lsls	r2, r2, #2
 800e0a6:	b570      	push	{r4, r5, r6, lr}
 800e0a8:	f1c2 0620 	rsb	r6, r2, #32
 800e0ac:	6843      	ldr	r3, [r0, #4]
 800e0ae:	6804      	ldr	r4, [r0, #0]
 800e0b0:	fa03 f506 	lsl.w	r5, r3, r6
 800e0b4:	432c      	orrs	r4, r5
 800e0b6:	40d3      	lsrs	r3, r2
 800e0b8:	6004      	str	r4, [r0, #0]
 800e0ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800e0be:	4288      	cmp	r0, r1
 800e0c0:	d3f4      	bcc.n	800e0ac <L_shift+0xc>
 800e0c2:	bd70      	pop	{r4, r5, r6, pc}

0800e0c4 <__match>:
 800e0c4:	b530      	push	{r4, r5, lr}
 800e0c6:	6803      	ldr	r3, [r0, #0]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0ce:	b914      	cbnz	r4, 800e0d6 <__match+0x12>
 800e0d0:	6003      	str	r3, [r0, #0]
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	bd30      	pop	{r4, r5, pc}
 800e0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e0de:	2d19      	cmp	r5, #25
 800e0e0:	bf98      	it	ls
 800e0e2:	3220      	addls	r2, #32
 800e0e4:	42a2      	cmp	r2, r4
 800e0e6:	d0f0      	beq.n	800e0ca <__match+0x6>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e7f3      	b.n	800e0d4 <__match+0x10>

0800e0ec <__hexnan>:
 800e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f0:	680b      	ldr	r3, [r1, #0]
 800e0f2:	6801      	ldr	r1, [r0, #0]
 800e0f4:	115f      	asrs	r7, r3, #5
 800e0f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e0fa:	f013 031f 	ands.w	r3, r3, #31
 800e0fe:	b087      	sub	sp, #28
 800e100:	bf18      	it	ne
 800e102:	3704      	addne	r7, #4
 800e104:	2500      	movs	r5, #0
 800e106:	1f3e      	subs	r6, r7, #4
 800e108:	4682      	mov	sl, r0
 800e10a:	4690      	mov	r8, r2
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f847 5c04 	str.w	r5, [r7, #-4]
 800e112:	46b1      	mov	r9, r6
 800e114:	4634      	mov	r4, r6
 800e116:	9502      	str	r5, [sp, #8]
 800e118:	46ab      	mov	fp, r5
 800e11a:	784a      	ldrb	r2, [r1, #1]
 800e11c:	1c4b      	adds	r3, r1, #1
 800e11e:	9303      	str	r3, [sp, #12]
 800e120:	b342      	cbz	r2, 800e174 <__hexnan+0x88>
 800e122:	4610      	mov	r0, r2
 800e124:	9105      	str	r1, [sp, #20]
 800e126:	9204      	str	r2, [sp, #16]
 800e128:	f7ff fd84 	bl	800dc34 <__hexdig_fun>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d143      	bne.n	800e1b8 <__hexnan+0xcc>
 800e130:	9a04      	ldr	r2, [sp, #16]
 800e132:	9905      	ldr	r1, [sp, #20]
 800e134:	2a20      	cmp	r2, #32
 800e136:	d818      	bhi.n	800e16a <__hexnan+0x7e>
 800e138:	9b02      	ldr	r3, [sp, #8]
 800e13a:	459b      	cmp	fp, r3
 800e13c:	dd13      	ble.n	800e166 <__hexnan+0x7a>
 800e13e:	454c      	cmp	r4, r9
 800e140:	d206      	bcs.n	800e150 <__hexnan+0x64>
 800e142:	2d07      	cmp	r5, #7
 800e144:	dc04      	bgt.n	800e150 <__hexnan+0x64>
 800e146:	462a      	mov	r2, r5
 800e148:	4649      	mov	r1, r9
 800e14a:	4620      	mov	r0, r4
 800e14c:	f7ff ffa8 	bl	800e0a0 <L_shift>
 800e150:	4544      	cmp	r4, r8
 800e152:	d944      	bls.n	800e1de <__hexnan+0xf2>
 800e154:	2300      	movs	r3, #0
 800e156:	f1a4 0904 	sub.w	r9, r4, #4
 800e15a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e15e:	f8cd b008 	str.w	fp, [sp, #8]
 800e162:	464c      	mov	r4, r9
 800e164:	461d      	mov	r5, r3
 800e166:	9903      	ldr	r1, [sp, #12]
 800e168:	e7d7      	b.n	800e11a <__hexnan+0x2e>
 800e16a:	2a29      	cmp	r2, #41	; 0x29
 800e16c:	d14a      	bne.n	800e204 <__hexnan+0x118>
 800e16e:	3102      	adds	r1, #2
 800e170:	f8ca 1000 	str.w	r1, [sl]
 800e174:	f1bb 0f00 	cmp.w	fp, #0
 800e178:	d044      	beq.n	800e204 <__hexnan+0x118>
 800e17a:	454c      	cmp	r4, r9
 800e17c:	d206      	bcs.n	800e18c <__hexnan+0xa0>
 800e17e:	2d07      	cmp	r5, #7
 800e180:	dc04      	bgt.n	800e18c <__hexnan+0xa0>
 800e182:	462a      	mov	r2, r5
 800e184:	4649      	mov	r1, r9
 800e186:	4620      	mov	r0, r4
 800e188:	f7ff ff8a 	bl	800e0a0 <L_shift>
 800e18c:	4544      	cmp	r4, r8
 800e18e:	d928      	bls.n	800e1e2 <__hexnan+0xf6>
 800e190:	4643      	mov	r3, r8
 800e192:	f854 2b04 	ldr.w	r2, [r4], #4
 800e196:	f843 2b04 	str.w	r2, [r3], #4
 800e19a:	42a6      	cmp	r6, r4
 800e19c:	d2f9      	bcs.n	800e192 <__hexnan+0xa6>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f843 2b04 	str.w	r2, [r3], #4
 800e1a4:	429e      	cmp	r6, r3
 800e1a6:	d2fb      	bcs.n	800e1a0 <__hexnan+0xb4>
 800e1a8:	6833      	ldr	r3, [r6, #0]
 800e1aa:	b91b      	cbnz	r3, 800e1b4 <__hexnan+0xc8>
 800e1ac:	4546      	cmp	r6, r8
 800e1ae:	d127      	bne.n	800e200 <__hexnan+0x114>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	6033      	str	r3, [r6, #0]
 800e1b4:	2005      	movs	r0, #5
 800e1b6:	e026      	b.n	800e206 <__hexnan+0x11a>
 800e1b8:	3501      	adds	r5, #1
 800e1ba:	2d08      	cmp	r5, #8
 800e1bc:	f10b 0b01 	add.w	fp, fp, #1
 800e1c0:	dd06      	ble.n	800e1d0 <__hexnan+0xe4>
 800e1c2:	4544      	cmp	r4, r8
 800e1c4:	d9cf      	bls.n	800e166 <__hexnan+0x7a>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1cc:	2501      	movs	r5, #1
 800e1ce:	3c04      	subs	r4, #4
 800e1d0:	6822      	ldr	r2, [r4, #0]
 800e1d2:	f000 000f 	and.w	r0, r0, #15
 800e1d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e1da:	6020      	str	r0, [r4, #0]
 800e1dc:	e7c3      	b.n	800e166 <__hexnan+0x7a>
 800e1de:	2508      	movs	r5, #8
 800e1e0:	e7c1      	b.n	800e166 <__hexnan+0x7a>
 800e1e2:	9b01      	ldr	r3, [sp, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0df      	beq.n	800e1a8 <__hexnan+0xbc>
 800e1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ec:	f1c3 0320 	rsb	r3, r3, #32
 800e1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e1f8:	401a      	ands	r2, r3
 800e1fa:	f847 2c04 	str.w	r2, [r7, #-4]
 800e1fe:	e7d3      	b.n	800e1a8 <__hexnan+0xbc>
 800e200:	3e04      	subs	r6, #4
 800e202:	e7d1      	b.n	800e1a8 <__hexnan+0xbc>
 800e204:	2004      	movs	r0, #4
 800e206:	b007      	add	sp, #28
 800e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e20c <__locale_ctype_ptr_l>:
 800e20c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e210:	4770      	bx	lr

0800e212 <__localeconv_l>:
 800e212:	30f0      	adds	r0, #240	; 0xf0
 800e214:	4770      	bx	lr
	...

0800e218 <_localeconv_r>:
 800e218:	4b04      	ldr	r3, [pc, #16]	; (800e22c <_localeconv_r+0x14>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6a18      	ldr	r0, [r3, #32]
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <_localeconv_r+0x18>)
 800e220:	2800      	cmp	r0, #0
 800e222:	bf08      	it	eq
 800e224:	4618      	moveq	r0, r3
 800e226:	30f0      	adds	r0, #240	; 0xf0
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	200002cc 	.word	0x200002cc
 800e230:	20000330 	.word	0x20000330

0800e234 <malloc>:
 800e234:	4b02      	ldr	r3, [pc, #8]	; (800e240 <malloc+0xc>)
 800e236:	4601      	mov	r1, r0
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	f000 bc71 	b.w	800eb20 <_malloc_r>
 800e23e:	bf00      	nop
 800e240:	200002cc 	.word	0x200002cc

0800e244 <__ascii_mbtowc>:
 800e244:	b082      	sub	sp, #8
 800e246:	b901      	cbnz	r1, 800e24a <__ascii_mbtowc+0x6>
 800e248:	a901      	add	r1, sp, #4
 800e24a:	b142      	cbz	r2, 800e25e <__ascii_mbtowc+0x1a>
 800e24c:	b14b      	cbz	r3, 800e262 <__ascii_mbtowc+0x1e>
 800e24e:	7813      	ldrb	r3, [r2, #0]
 800e250:	600b      	str	r3, [r1, #0]
 800e252:	7812      	ldrb	r2, [r2, #0]
 800e254:	1c10      	adds	r0, r2, #0
 800e256:	bf18      	it	ne
 800e258:	2001      	movne	r0, #1
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	4610      	mov	r0, r2
 800e260:	e7fb      	b.n	800e25a <__ascii_mbtowc+0x16>
 800e262:	f06f 0001 	mvn.w	r0, #1
 800e266:	e7f8      	b.n	800e25a <__ascii_mbtowc+0x16>

0800e268 <_Balloc>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e26c:	4604      	mov	r4, r0
 800e26e:	460e      	mov	r6, r1
 800e270:	b93d      	cbnz	r5, 800e282 <_Balloc+0x1a>
 800e272:	2010      	movs	r0, #16
 800e274:	f7ff ffde 	bl	800e234 <malloc>
 800e278:	6260      	str	r0, [r4, #36]	; 0x24
 800e27a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e27e:	6005      	str	r5, [r0, #0]
 800e280:	60c5      	str	r5, [r0, #12]
 800e282:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e284:	68eb      	ldr	r3, [r5, #12]
 800e286:	b183      	cbz	r3, 800e2aa <_Balloc+0x42>
 800e288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e290:	b9b8      	cbnz	r0, 800e2c2 <_Balloc+0x5a>
 800e292:	2101      	movs	r1, #1
 800e294:	fa01 f506 	lsl.w	r5, r1, r6
 800e298:	1d6a      	adds	r2, r5, #5
 800e29a:	0092      	lsls	r2, r2, #2
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 fbe2 	bl	800ea66 <_calloc_r>
 800e2a2:	b160      	cbz	r0, 800e2be <_Balloc+0x56>
 800e2a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e2a8:	e00e      	b.n	800e2c8 <_Balloc+0x60>
 800e2aa:	2221      	movs	r2, #33	; 0x21
 800e2ac:	2104      	movs	r1, #4
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f000 fbd9 	bl	800ea66 <_calloc_r>
 800e2b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b6:	60e8      	str	r0, [r5, #12]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1e4      	bne.n	800e288 <_Balloc+0x20>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	bd70      	pop	{r4, r5, r6, pc}
 800e2c2:	6802      	ldr	r2, [r0, #0]
 800e2c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2ce:	e7f7      	b.n	800e2c0 <_Balloc+0x58>

0800e2d0 <_Bfree>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	b93c      	cbnz	r4, 800e2ea <_Bfree+0x1a>
 800e2da:	2010      	movs	r0, #16
 800e2dc:	f7ff ffaa 	bl	800e234 <malloc>
 800e2e0:	6270      	str	r0, [r6, #36]	; 0x24
 800e2e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2e6:	6004      	str	r4, [r0, #0]
 800e2e8:	60c4      	str	r4, [r0, #12]
 800e2ea:	b13d      	cbz	r5, 800e2fc <_Bfree+0x2c>
 800e2ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e2ee:	686a      	ldr	r2, [r5, #4]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2f6:	6029      	str	r1, [r5, #0]
 800e2f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e2fc:	bd70      	pop	{r4, r5, r6, pc}

0800e2fe <__multadd>:
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	690d      	ldr	r5, [r1, #16]
 800e304:	461f      	mov	r7, r3
 800e306:	4606      	mov	r6, r0
 800e308:	460c      	mov	r4, r1
 800e30a:	f101 0c14 	add.w	ip, r1, #20
 800e30e:	2300      	movs	r3, #0
 800e310:	f8dc 0000 	ldr.w	r0, [ip]
 800e314:	b281      	uxth	r1, r0
 800e316:	fb02 7101 	mla	r1, r2, r1, r7
 800e31a:	0c0f      	lsrs	r7, r1, #16
 800e31c:	0c00      	lsrs	r0, r0, #16
 800e31e:	fb02 7000 	mla	r0, r2, r0, r7
 800e322:	b289      	uxth	r1, r1
 800e324:	3301      	adds	r3, #1
 800e326:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e32a:	429d      	cmp	r5, r3
 800e32c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e330:	f84c 1b04 	str.w	r1, [ip], #4
 800e334:	dcec      	bgt.n	800e310 <__multadd+0x12>
 800e336:	b1d7      	cbz	r7, 800e36e <__multadd+0x70>
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	42ab      	cmp	r3, r5
 800e33c:	dc12      	bgt.n	800e364 <__multadd+0x66>
 800e33e:	6861      	ldr	r1, [r4, #4]
 800e340:	4630      	mov	r0, r6
 800e342:	3101      	adds	r1, #1
 800e344:	f7ff ff90 	bl	800e268 <_Balloc>
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	3202      	adds	r2, #2
 800e34c:	f104 010c 	add.w	r1, r4, #12
 800e350:	4680      	mov	r8, r0
 800e352:	0092      	lsls	r2, r2, #2
 800e354:	300c      	adds	r0, #12
 800e356:	f7fd f8bf 	bl	800b4d8 <memcpy>
 800e35a:	4621      	mov	r1, r4
 800e35c:	4630      	mov	r0, r6
 800e35e:	f7ff ffb7 	bl	800e2d0 <_Bfree>
 800e362:	4644      	mov	r4, r8
 800e364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e368:	3501      	adds	r5, #1
 800e36a:	615f      	str	r7, [r3, #20]
 800e36c:	6125      	str	r5, [r4, #16]
 800e36e:	4620      	mov	r0, r4
 800e370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e374 <__s2b>:
 800e374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e378:	460c      	mov	r4, r1
 800e37a:	4615      	mov	r5, r2
 800e37c:	461f      	mov	r7, r3
 800e37e:	2209      	movs	r2, #9
 800e380:	3308      	adds	r3, #8
 800e382:	4606      	mov	r6, r0
 800e384:	fb93 f3f2 	sdiv	r3, r3, r2
 800e388:	2100      	movs	r1, #0
 800e38a:	2201      	movs	r2, #1
 800e38c:	429a      	cmp	r2, r3
 800e38e:	db20      	blt.n	800e3d2 <__s2b+0x5e>
 800e390:	4630      	mov	r0, r6
 800e392:	f7ff ff69 	bl	800e268 <_Balloc>
 800e396:	9b08      	ldr	r3, [sp, #32]
 800e398:	6143      	str	r3, [r0, #20]
 800e39a:	2d09      	cmp	r5, #9
 800e39c:	f04f 0301 	mov.w	r3, #1
 800e3a0:	6103      	str	r3, [r0, #16]
 800e3a2:	dd19      	ble.n	800e3d8 <__s2b+0x64>
 800e3a4:	f104 0809 	add.w	r8, r4, #9
 800e3a8:	46c1      	mov	r9, r8
 800e3aa:	442c      	add	r4, r5
 800e3ac:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e3b0:	4601      	mov	r1, r0
 800e3b2:	3b30      	subs	r3, #48	; 0x30
 800e3b4:	220a      	movs	r2, #10
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f7ff ffa1 	bl	800e2fe <__multadd>
 800e3bc:	45a1      	cmp	r9, r4
 800e3be:	d1f5      	bne.n	800e3ac <__s2b+0x38>
 800e3c0:	eb08 0405 	add.w	r4, r8, r5
 800e3c4:	3c08      	subs	r4, #8
 800e3c6:	1b2d      	subs	r5, r5, r4
 800e3c8:	1963      	adds	r3, r4, r5
 800e3ca:	42bb      	cmp	r3, r7
 800e3cc:	db07      	blt.n	800e3de <__s2b+0x6a>
 800e3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d2:	0052      	lsls	r2, r2, #1
 800e3d4:	3101      	adds	r1, #1
 800e3d6:	e7d9      	b.n	800e38c <__s2b+0x18>
 800e3d8:	340a      	adds	r4, #10
 800e3da:	2509      	movs	r5, #9
 800e3dc:	e7f3      	b.n	800e3c6 <__s2b+0x52>
 800e3de:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	3b30      	subs	r3, #48	; 0x30
 800e3e6:	220a      	movs	r2, #10
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f7ff ff88 	bl	800e2fe <__multadd>
 800e3ee:	e7eb      	b.n	800e3c8 <__s2b+0x54>

0800e3f0 <__hi0bits>:
 800e3f0:	0c02      	lsrs	r2, r0, #16
 800e3f2:	0412      	lsls	r2, r2, #16
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	b9b2      	cbnz	r2, 800e426 <__hi0bits+0x36>
 800e3f8:	0403      	lsls	r3, r0, #16
 800e3fa:	2010      	movs	r0, #16
 800e3fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e400:	bf04      	itt	eq
 800e402:	021b      	lsleq	r3, r3, #8
 800e404:	3008      	addeq	r0, #8
 800e406:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e40a:	bf04      	itt	eq
 800e40c:	011b      	lsleq	r3, r3, #4
 800e40e:	3004      	addeq	r0, #4
 800e410:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e414:	bf04      	itt	eq
 800e416:	009b      	lsleq	r3, r3, #2
 800e418:	3002      	addeq	r0, #2
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	db06      	blt.n	800e42c <__hi0bits+0x3c>
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	d503      	bpl.n	800e42a <__hi0bits+0x3a>
 800e422:	3001      	adds	r0, #1
 800e424:	4770      	bx	lr
 800e426:	2000      	movs	r0, #0
 800e428:	e7e8      	b.n	800e3fc <__hi0bits+0xc>
 800e42a:	2020      	movs	r0, #32
 800e42c:	4770      	bx	lr

0800e42e <__lo0bits>:
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	f013 0207 	ands.w	r2, r3, #7
 800e434:	4601      	mov	r1, r0
 800e436:	d00b      	beq.n	800e450 <__lo0bits+0x22>
 800e438:	07da      	lsls	r2, r3, #31
 800e43a:	d423      	bmi.n	800e484 <__lo0bits+0x56>
 800e43c:	0798      	lsls	r0, r3, #30
 800e43e:	bf49      	itett	mi
 800e440:	085b      	lsrmi	r3, r3, #1
 800e442:	089b      	lsrpl	r3, r3, #2
 800e444:	2001      	movmi	r0, #1
 800e446:	600b      	strmi	r3, [r1, #0]
 800e448:	bf5c      	itt	pl
 800e44a:	600b      	strpl	r3, [r1, #0]
 800e44c:	2002      	movpl	r0, #2
 800e44e:	4770      	bx	lr
 800e450:	b298      	uxth	r0, r3
 800e452:	b9a8      	cbnz	r0, 800e480 <__lo0bits+0x52>
 800e454:	0c1b      	lsrs	r3, r3, #16
 800e456:	2010      	movs	r0, #16
 800e458:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e45c:	bf04      	itt	eq
 800e45e:	0a1b      	lsreq	r3, r3, #8
 800e460:	3008      	addeq	r0, #8
 800e462:	071a      	lsls	r2, r3, #28
 800e464:	bf04      	itt	eq
 800e466:	091b      	lsreq	r3, r3, #4
 800e468:	3004      	addeq	r0, #4
 800e46a:	079a      	lsls	r2, r3, #30
 800e46c:	bf04      	itt	eq
 800e46e:	089b      	lsreq	r3, r3, #2
 800e470:	3002      	addeq	r0, #2
 800e472:	07da      	lsls	r2, r3, #31
 800e474:	d402      	bmi.n	800e47c <__lo0bits+0x4e>
 800e476:	085b      	lsrs	r3, r3, #1
 800e478:	d006      	beq.n	800e488 <__lo0bits+0x5a>
 800e47a:	3001      	adds	r0, #1
 800e47c:	600b      	str	r3, [r1, #0]
 800e47e:	4770      	bx	lr
 800e480:	4610      	mov	r0, r2
 800e482:	e7e9      	b.n	800e458 <__lo0bits+0x2a>
 800e484:	2000      	movs	r0, #0
 800e486:	4770      	bx	lr
 800e488:	2020      	movs	r0, #32
 800e48a:	4770      	bx	lr

0800e48c <__i2b>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	460c      	mov	r4, r1
 800e490:	2101      	movs	r1, #1
 800e492:	f7ff fee9 	bl	800e268 <_Balloc>
 800e496:	2201      	movs	r2, #1
 800e498:	6144      	str	r4, [r0, #20]
 800e49a:	6102      	str	r2, [r0, #16]
 800e49c:	bd10      	pop	{r4, pc}

0800e49e <__multiply>:
 800e49e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a2:	4614      	mov	r4, r2
 800e4a4:	690a      	ldr	r2, [r1, #16]
 800e4a6:	6923      	ldr	r3, [r4, #16]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	bfb8      	it	lt
 800e4ac:	460b      	movlt	r3, r1
 800e4ae:	4688      	mov	r8, r1
 800e4b0:	bfbc      	itt	lt
 800e4b2:	46a0      	movlt	r8, r4
 800e4b4:	461c      	movlt	r4, r3
 800e4b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e4be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4c6:	eb07 0609 	add.w	r6, r7, r9
 800e4ca:	42b3      	cmp	r3, r6
 800e4cc:	bfb8      	it	lt
 800e4ce:	3101      	addlt	r1, #1
 800e4d0:	f7ff feca 	bl	800e268 <_Balloc>
 800e4d4:	f100 0514 	add.w	r5, r0, #20
 800e4d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e4dc:	462b      	mov	r3, r5
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4573      	cmp	r3, lr
 800e4e2:	d316      	bcc.n	800e512 <__multiply+0x74>
 800e4e4:	f104 0214 	add.w	r2, r4, #20
 800e4e8:	f108 0114 	add.w	r1, r8, #20
 800e4ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e4f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	9b00      	ldr	r3, [sp, #0]
 800e4f8:	9201      	str	r2, [sp, #4]
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d80c      	bhi.n	800e518 <__multiply+0x7a>
 800e4fe:	2e00      	cmp	r6, #0
 800e500:	dd03      	ble.n	800e50a <__multiply+0x6c>
 800e502:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e506:	2b00      	cmp	r3, #0
 800e508:	d05d      	beq.n	800e5c6 <__multiply+0x128>
 800e50a:	6106      	str	r6, [r0, #16]
 800e50c:	b003      	add	sp, #12
 800e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e512:	f843 2b04 	str.w	r2, [r3], #4
 800e516:	e7e3      	b.n	800e4e0 <__multiply+0x42>
 800e518:	f8b2 b000 	ldrh.w	fp, [r2]
 800e51c:	f1bb 0f00 	cmp.w	fp, #0
 800e520:	d023      	beq.n	800e56a <__multiply+0xcc>
 800e522:	4689      	mov	r9, r1
 800e524:	46ac      	mov	ip, r5
 800e526:	f04f 0800 	mov.w	r8, #0
 800e52a:	f859 4b04 	ldr.w	r4, [r9], #4
 800e52e:	f8dc a000 	ldr.w	sl, [ip]
 800e532:	b2a3      	uxth	r3, r4
 800e534:	fa1f fa8a 	uxth.w	sl, sl
 800e538:	fb0b a303 	mla	r3, fp, r3, sl
 800e53c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e540:	f8dc 4000 	ldr.w	r4, [ip]
 800e544:	4443      	add	r3, r8
 800e546:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e54a:	fb0b 840a 	mla	r4, fp, sl, r8
 800e54e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e552:	46e2      	mov	sl, ip
 800e554:	b29b      	uxth	r3, r3
 800e556:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e55a:	454f      	cmp	r7, r9
 800e55c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e560:	f84a 3b04 	str.w	r3, [sl], #4
 800e564:	d82b      	bhi.n	800e5be <__multiply+0x120>
 800e566:	f8cc 8004 	str.w	r8, [ip, #4]
 800e56a:	9b01      	ldr	r3, [sp, #4]
 800e56c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e570:	3204      	adds	r2, #4
 800e572:	f1ba 0f00 	cmp.w	sl, #0
 800e576:	d020      	beq.n	800e5ba <__multiply+0x11c>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	4689      	mov	r9, r1
 800e57c:	46a8      	mov	r8, r5
 800e57e:	f04f 0b00 	mov.w	fp, #0
 800e582:	f8b9 c000 	ldrh.w	ip, [r9]
 800e586:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e58a:	fb0a 440c 	mla	r4, sl, ip, r4
 800e58e:	445c      	add	r4, fp
 800e590:	46c4      	mov	ip, r8
 800e592:	b29b      	uxth	r3, r3
 800e594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e598:	f84c 3b04 	str.w	r3, [ip], #4
 800e59c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e5a4:	0c1b      	lsrs	r3, r3, #16
 800e5a6:	fb0a b303 	mla	r3, sl, r3, fp
 800e5aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e5ae:	454f      	cmp	r7, r9
 800e5b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e5b4:	d805      	bhi.n	800e5c2 <__multiply+0x124>
 800e5b6:	f8c8 3004 	str.w	r3, [r8, #4]
 800e5ba:	3504      	adds	r5, #4
 800e5bc:	e79b      	b.n	800e4f6 <__multiply+0x58>
 800e5be:	46d4      	mov	ip, sl
 800e5c0:	e7b3      	b.n	800e52a <__multiply+0x8c>
 800e5c2:	46e0      	mov	r8, ip
 800e5c4:	e7dd      	b.n	800e582 <__multiply+0xe4>
 800e5c6:	3e01      	subs	r6, #1
 800e5c8:	e799      	b.n	800e4fe <__multiply+0x60>
	...

0800e5cc <__pow5mult>:
 800e5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d0:	4615      	mov	r5, r2
 800e5d2:	f012 0203 	ands.w	r2, r2, #3
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	460f      	mov	r7, r1
 800e5da:	d007      	beq.n	800e5ec <__pow5mult+0x20>
 800e5dc:	3a01      	subs	r2, #1
 800e5de:	4c21      	ldr	r4, [pc, #132]	; (800e664 <__pow5mult+0x98>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5e6:	f7ff fe8a 	bl	800e2fe <__multadd>
 800e5ea:	4607      	mov	r7, r0
 800e5ec:	10ad      	asrs	r5, r5, #2
 800e5ee:	d035      	beq.n	800e65c <__pow5mult+0x90>
 800e5f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5f2:	b93c      	cbnz	r4, 800e604 <__pow5mult+0x38>
 800e5f4:	2010      	movs	r0, #16
 800e5f6:	f7ff fe1d 	bl	800e234 <malloc>
 800e5fa:	6270      	str	r0, [r6, #36]	; 0x24
 800e5fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e600:	6004      	str	r4, [r0, #0]
 800e602:	60c4      	str	r4, [r0, #12]
 800e604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e60c:	b94c      	cbnz	r4, 800e622 <__pow5mult+0x56>
 800e60e:	f240 2171 	movw	r1, #625	; 0x271
 800e612:	4630      	mov	r0, r6
 800e614:	f7ff ff3a 	bl	800e48c <__i2b>
 800e618:	2300      	movs	r3, #0
 800e61a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e61e:	4604      	mov	r4, r0
 800e620:	6003      	str	r3, [r0, #0]
 800e622:	f04f 0800 	mov.w	r8, #0
 800e626:	07eb      	lsls	r3, r5, #31
 800e628:	d50a      	bpl.n	800e640 <__pow5mult+0x74>
 800e62a:	4639      	mov	r1, r7
 800e62c:	4622      	mov	r2, r4
 800e62e:	4630      	mov	r0, r6
 800e630:	f7ff ff35 	bl	800e49e <__multiply>
 800e634:	4639      	mov	r1, r7
 800e636:	4681      	mov	r9, r0
 800e638:	4630      	mov	r0, r6
 800e63a:	f7ff fe49 	bl	800e2d0 <_Bfree>
 800e63e:	464f      	mov	r7, r9
 800e640:	106d      	asrs	r5, r5, #1
 800e642:	d00b      	beq.n	800e65c <__pow5mult+0x90>
 800e644:	6820      	ldr	r0, [r4, #0]
 800e646:	b938      	cbnz	r0, 800e658 <__pow5mult+0x8c>
 800e648:	4622      	mov	r2, r4
 800e64a:	4621      	mov	r1, r4
 800e64c:	4630      	mov	r0, r6
 800e64e:	f7ff ff26 	bl	800e49e <__multiply>
 800e652:	6020      	str	r0, [r4, #0]
 800e654:	f8c0 8000 	str.w	r8, [r0]
 800e658:	4604      	mov	r4, r0
 800e65a:	e7e4      	b.n	800e626 <__pow5mult+0x5a>
 800e65c:	4638      	mov	r0, r7
 800e65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e662:	bf00      	nop
 800e664:	0800f1a0 	.word	0x0800f1a0

0800e668 <__lshift>:
 800e668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e66c:	460c      	mov	r4, r1
 800e66e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	6849      	ldr	r1, [r1, #4]
 800e676:	eb0a 0903 	add.w	r9, sl, r3
 800e67a:	68a3      	ldr	r3, [r4, #8]
 800e67c:	4607      	mov	r7, r0
 800e67e:	4616      	mov	r6, r2
 800e680:	f109 0501 	add.w	r5, r9, #1
 800e684:	42ab      	cmp	r3, r5
 800e686:	db32      	blt.n	800e6ee <__lshift+0x86>
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff fded 	bl	800e268 <_Balloc>
 800e68e:	2300      	movs	r3, #0
 800e690:	4680      	mov	r8, r0
 800e692:	f100 0114 	add.w	r1, r0, #20
 800e696:	461a      	mov	r2, r3
 800e698:	4553      	cmp	r3, sl
 800e69a:	db2b      	blt.n	800e6f4 <__lshift+0x8c>
 800e69c:	6920      	ldr	r0, [r4, #16]
 800e69e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6a2:	f104 0314 	add.w	r3, r4, #20
 800e6a6:	f016 021f 	ands.w	r2, r6, #31
 800e6aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6b2:	d025      	beq.n	800e700 <__lshift+0x98>
 800e6b4:	f1c2 0e20 	rsb	lr, r2, #32
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	681e      	ldr	r6, [r3, #0]
 800e6bc:	468a      	mov	sl, r1
 800e6be:	4096      	lsls	r6, r2
 800e6c0:	4330      	orrs	r0, r6
 800e6c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e6c6:	f853 0b04 	ldr.w	r0, [r3], #4
 800e6ca:	459c      	cmp	ip, r3
 800e6cc:	fa20 f00e 	lsr.w	r0, r0, lr
 800e6d0:	d814      	bhi.n	800e6fc <__lshift+0x94>
 800e6d2:	6048      	str	r0, [r1, #4]
 800e6d4:	b108      	cbz	r0, 800e6da <__lshift+0x72>
 800e6d6:	f109 0502 	add.w	r5, r9, #2
 800e6da:	3d01      	subs	r5, #1
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f8c8 5010 	str.w	r5, [r8, #16]
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	f7ff fdf4 	bl	800e2d0 <_Bfree>
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ee:	3101      	adds	r1, #1
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	e7c7      	b.n	800e684 <__lshift+0x1c>
 800e6f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	e7cd      	b.n	800e698 <__lshift+0x30>
 800e6fc:	4651      	mov	r1, sl
 800e6fe:	e7dc      	b.n	800e6ba <__lshift+0x52>
 800e700:	3904      	subs	r1, #4
 800e702:	f853 2b04 	ldr.w	r2, [r3], #4
 800e706:	f841 2f04 	str.w	r2, [r1, #4]!
 800e70a:	459c      	cmp	ip, r3
 800e70c:	d8f9      	bhi.n	800e702 <__lshift+0x9a>
 800e70e:	e7e4      	b.n	800e6da <__lshift+0x72>

0800e710 <__mcmp>:
 800e710:	6903      	ldr	r3, [r0, #16]
 800e712:	690a      	ldr	r2, [r1, #16]
 800e714:	1a9b      	subs	r3, r3, r2
 800e716:	b530      	push	{r4, r5, lr}
 800e718:	d10c      	bne.n	800e734 <__mcmp+0x24>
 800e71a:	0092      	lsls	r2, r2, #2
 800e71c:	3014      	adds	r0, #20
 800e71e:	3114      	adds	r1, #20
 800e720:	1884      	adds	r4, r0, r2
 800e722:	4411      	add	r1, r2
 800e724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e72c:	4295      	cmp	r5, r2
 800e72e:	d003      	beq.n	800e738 <__mcmp+0x28>
 800e730:	d305      	bcc.n	800e73e <__mcmp+0x2e>
 800e732:	2301      	movs	r3, #1
 800e734:	4618      	mov	r0, r3
 800e736:	bd30      	pop	{r4, r5, pc}
 800e738:	42a0      	cmp	r0, r4
 800e73a:	d3f3      	bcc.n	800e724 <__mcmp+0x14>
 800e73c:	e7fa      	b.n	800e734 <__mcmp+0x24>
 800e73e:	f04f 33ff 	mov.w	r3, #4294967295
 800e742:	e7f7      	b.n	800e734 <__mcmp+0x24>

0800e744 <__mdiff>:
 800e744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	460d      	mov	r5, r1
 800e74a:	4607      	mov	r7, r0
 800e74c:	4611      	mov	r1, r2
 800e74e:	4628      	mov	r0, r5
 800e750:	4614      	mov	r4, r2
 800e752:	f7ff ffdd 	bl	800e710 <__mcmp>
 800e756:	1e06      	subs	r6, r0, #0
 800e758:	d108      	bne.n	800e76c <__mdiff+0x28>
 800e75a:	4631      	mov	r1, r6
 800e75c:	4638      	mov	r0, r7
 800e75e:	f7ff fd83 	bl	800e268 <_Balloc>
 800e762:	2301      	movs	r3, #1
 800e764:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e76c:	bfa4      	itt	ge
 800e76e:	4623      	movge	r3, r4
 800e770:	462c      	movge	r4, r5
 800e772:	4638      	mov	r0, r7
 800e774:	6861      	ldr	r1, [r4, #4]
 800e776:	bfa6      	itte	ge
 800e778:	461d      	movge	r5, r3
 800e77a:	2600      	movge	r6, #0
 800e77c:	2601      	movlt	r6, #1
 800e77e:	f7ff fd73 	bl	800e268 <_Balloc>
 800e782:	692b      	ldr	r3, [r5, #16]
 800e784:	60c6      	str	r6, [r0, #12]
 800e786:	6926      	ldr	r6, [r4, #16]
 800e788:	f105 0914 	add.w	r9, r5, #20
 800e78c:	f104 0214 	add.w	r2, r4, #20
 800e790:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e794:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e798:	f100 0514 	add.w	r5, r0, #20
 800e79c:	f04f 0e00 	mov.w	lr, #0
 800e7a0:	f852 ab04 	ldr.w	sl, [r2], #4
 800e7a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e7a8:	fa1e f18a 	uxtah	r1, lr, sl
 800e7ac:	b2a3      	uxth	r3, r4
 800e7ae:	1ac9      	subs	r1, r1, r3
 800e7b0:	0c23      	lsrs	r3, r4, #16
 800e7b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e7b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e7ba:	b289      	uxth	r1, r1
 800e7bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e7c0:	45c8      	cmp	r8, r9
 800e7c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e7c6:	4694      	mov	ip, r2
 800e7c8:	f845 3b04 	str.w	r3, [r5], #4
 800e7cc:	d8e8      	bhi.n	800e7a0 <__mdiff+0x5c>
 800e7ce:	45bc      	cmp	ip, r7
 800e7d0:	d304      	bcc.n	800e7dc <__mdiff+0x98>
 800e7d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e7d6:	b183      	cbz	r3, 800e7fa <__mdiff+0xb6>
 800e7d8:	6106      	str	r6, [r0, #16]
 800e7da:	e7c5      	b.n	800e768 <__mdiff+0x24>
 800e7dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e7e0:	fa1e f381 	uxtah	r3, lr, r1
 800e7e4:	141a      	asrs	r2, r3, #16
 800e7e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e7f4:	f845 3b04 	str.w	r3, [r5], #4
 800e7f8:	e7e9      	b.n	800e7ce <__mdiff+0x8a>
 800e7fa:	3e01      	subs	r6, #1
 800e7fc:	e7e9      	b.n	800e7d2 <__mdiff+0x8e>
	...

0800e800 <__ulp>:
 800e800:	4b12      	ldr	r3, [pc, #72]	; (800e84c <__ulp+0x4c>)
 800e802:	ee10 2a90 	vmov	r2, s1
 800e806:	401a      	ands	r2, r3
 800e808:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	dd04      	ble.n	800e81a <__ulp+0x1a>
 800e810:	2000      	movs	r0, #0
 800e812:	4619      	mov	r1, r3
 800e814:	ec41 0b10 	vmov	d0, r0, r1
 800e818:	4770      	bx	lr
 800e81a:	425b      	negs	r3, r3
 800e81c:	151b      	asrs	r3, r3, #20
 800e81e:	2b13      	cmp	r3, #19
 800e820:	f04f 0000 	mov.w	r0, #0
 800e824:	f04f 0100 	mov.w	r1, #0
 800e828:	dc04      	bgt.n	800e834 <__ulp+0x34>
 800e82a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e82e:	fa42 f103 	asr.w	r1, r2, r3
 800e832:	e7ef      	b.n	800e814 <__ulp+0x14>
 800e834:	3b14      	subs	r3, #20
 800e836:	2b1e      	cmp	r3, #30
 800e838:	f04f 0201 	mov.w	r2, #1
 800e83c:	bfda      	itte	le
 800e83e:	f1c3 031f 	rsble	r3, r3, #31
 800e842:	fa02 f303 	lslle.w	r3, r2, r3
 800e846:	4613      	movgt	r3, r2
 800e848:	4618      	mov	r0, r3
 800e84a:	e7e3      	b.n	800e814 <__ulp+0x14>
 800e84c:	7ff00000 	.word	0x7ff00000

0800e850 <__b2d>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	6905      	ldr	r5, [r0, #16]
 800e854:	f100 0714 	add.w	r7, r0, #20
 800e858:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e85c:	1f2e      	subs	r6, r5, #4
 800e85e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e862:	4620      	mov	r0, r4
 800e864:	f7ff fdc4 	bl	800e3f0 <__hi0bits>
 800e868:	f1c0 0320 	rsb	r3, r0, #32
 800e86c:	280a      	cmp	r0, #10
 800e86e:	600b      	str	r3, [r1, #0]
 800e870:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e8e8 <__b2d+0x98>
 800e874:	dc14      	bgt.n	800e8a0 <__b2d+0x50>
 800e876:	f1c0 0e0b 	rsb	lr, r0, #11
 800e87a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e87e:	42b7      	cmp	r7, r6
 800e880:	ea41 030c 	orr.w	r3, r1, ip
 800e884:	bf34      	ite	cc
 800e886:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e88a:	2100      	movcs	r1, #0
 800e88c:	3015      	adds	r0, #21
 800e88e:	fa04 f000 	lsl.w	r0, r4, r0
 800e892:	fa21 f10e 	lsr.w	r1, r1, lr
 800e896:	ea40 0201 	orr.w	r2, r0, r1
 800e89a:	ec43 2b10 	vmov	d0, r2, r3
 800e89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8a0:	42b7      	cmp	r7, r6
 800e8a2:	bf3a      	itte	cc
 800e8a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800e8a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8ac:	2100      	movcs	r1, #0
 800e8ae:	380b      	subs	r0, #11
 800e8b0:	d015      	beq.n	800e8de <__b2d+0x8e>
 800e8b2:	4084      	lsls	r4, r0
 800e8b4:	f1c0 0520 	rsb	r5, r0, #32
 800e8b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e8bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e8c0:	42be      	cmp	r6, r7
 800e8c2:	fa21 fc05 	lsr.w	ip, r1, r5
 800e8c6:	ea44 030c 	orr.w	r3, r4, ip
 800e8ca:	bf8c      	ite	hi
 800e8cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e8d0:	2400      	movls	r4, #0
 800e8d2:	fa01 f000 	lsl.w	r0, r1, r0
 800e8d6:	40ec      	lsrs	r4, r5
 800e8d8:	ea40 0204 	orr.w	r2, r0, r4
 800e8dc:	e7dd      	b.n	800e89a <__b2d+0x4a>
 800e8de:	ea44 030c 	orr.w	r3, r4, ip
 800e8e2:	460a      	mov	r2, r1
 800e8e4:	e7d9      	b.n	800e89a <__b2d+0x4a>
 800e8e6:	bf00      	nop
 800e8e8:	3ff00000 	.word	0x3ff00000

0800e8ec <__d2b>:
 800e8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8f0:	460e      	mov	r6, r1
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	ec59 8b10 	vmov	r8, r9, d0
 800e8f8:	4615      	mov	r5, r2
 800e8fa:	f7ff fcb5 	bl	800e268 <_Balloc>
 800e8fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e902:	4607      	mov	r7, r0
 800e904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e908:	bb34      	cbnz	r4, 800e958 <__d2b+0x6c>
 800e90a:	9301      	str	r3, [sp, #4]
 800e90c:	f1b8 0300 	subs.w	r3, r8, #0
 800e910:	d027      	beq.n	800e962 <__d2b+0x76>
 800e912:	a802      	add	r0, sp, #8
 800e914:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e918:	f7ff fd89 	bl	800e42e <__lo0bits>
 800e91c:	9900      	ldr	r1, [sp, #0]
 800e91e:	b1f0      	cbz	r0, 800e95e <__d2b+0x72>
 800e920:	9a01      	ldr	r2, [sp, #4]
 800e922:	f1c0 0320 	rsb	r3, r0, #32
 800e926:	fa02 f303 	lsl.w	r3, r2, r3
 800e92a:	430b      	orrs	r3, r1
 800e92c:	40c2      	lsrs	r2, r0
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	9201      	str	r2, [sp, #4]
 800e932:	9b01      	ldr	r3, [sp, #4]
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	2b00      	cmp	r3, #0
 800e938:	bf14      	ite	ne
 800e93a:	2102      	movne	r1, #2
 800e93c:	2101      	moveq	r1, #1
 800e93e:	6139      	str	r1, [r7, #16]
 800e940:	b1c4      	cbz	r4, 800e974 <__d2b+0x88>
 800e942:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e946:	4404      	add	r4, r0
 800e948:	6034      	str	r4, [r6, #0]
 800e94a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e94e:	6028      	str	r0, [r5, #0]
 800e950:	4638      	mov	r0, r7
 800e952:	b003      	add	sp, #12
 800e954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e95c:	e7d5      	b.n	800e90a <__d2b+0x1e>
 800e95e:	6179      	str	r1, [r7, #20]
 800e960:	e7e7      	b.n	800e932 <__d2b+0x46>
 800e962:	a801      	add	r0, sp, #4
 800e964:	f7ff fd63 	bl	800e42e <__lo0bits>
 800e968:	9b01      	ldr	r3, [sp, #4]
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	2101      	movs	r1, #1
 800e96e:	6139      	str	r1, [r7, #16]
 800e970:	3020      	adds	r0, #32
 800e972:	e7e5      	b.n	800e940 <__d2b+0x54>
 800e974:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e97c:	6030      	str	r0, [r6, #0]
 800e97e:	6918      	ldr	r0, [r3, #16]
 800e980:	f7ff fd36 	bl	800e3f0 <__hi0bits>
 800e984:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e988:	e7e1      	b.n	800e94e <__d2b+0x62>

0800e98a <__ratio>:
 800e98a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98e:	4688      	mov	r8, r1
 800e990:	4669      	mov	r1, sp
 800e992:	4681      	mov	r9, r0
 800e994:	f7ff ff5c 	bl	800e850 <__b2d>
 800e998:	a901      	add	r1, sp, #4
 800e99a:	4640      	mov	r0, r8
 800e99c:	ec57 6b10 	vmov	r6, r7, d0
 800e9a0:	f7ff ff56 	bl	800e850 <__b2d>
 800e9a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9ac:	eba3 0c02 	sub.w	ip, r3, r2
 800e9b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e9b4:	1a9b      	subs	r3, r3, r2
 800e9b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e9ba:	ec5b ab10 	vmov	sl, fp, d0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bfce      	itee	gt
 800e9c2:	463a      	movgt	r2, r7
 800e9c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9c8:	465a      	movle	r2, fp
 800e9ca:	4659      	mov	r1, fp
 800e9cc:	463d      	mov	r5, r7
 800e9ce:	bfd4      	ite	le
 800e9d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e9d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e9d8:	4630      	mov	r0, r6
 800e9da:	ee10 2a10 	vmov	r2, s0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f7f1 ff3b 	bl	800085c <__aeabi_ddiv>
 800e9e6:	ec41 0b10 	vmov	d0, r0, r1
 800e9ea:	b003      	add	sp, #12
 800e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9f0 <__copybits>:
 800e9f0:	3901      	subs	r1, #1
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	1149      	asrs	r1, r1, #5
 800e9f6:	6914      	ldr	r4, [r2, #16]
 800e9f8:	3101      	adds	r1, #1
 800e9fa:	f102 0314 	add.w	r3, r2, #20
 800e9fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea06:	42a3      	cmp	r3, r4
 800ea08:	4602      	mov	r2, r0
 800ea0a:	d303      	bcc.n	800ea14 <__copybits+0x24>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	428a      	cmp	r2, r1
 800ea10:	d305      	bcc.n	800ea1e <__copybits+0x2e>
 800ea12:	bd10      	pop	{r4, pc}
 800ea14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea18:	f840 2b04 	str.w	r2, [r0], #4
 800ea1c:	e7f3      	b.n	800ea06 <__copybits+0x16>
 800ea1e:	f842 3b04 	str.w	r3, [r2], #4
 800ea22:	e7f4      	b.n	800ea0e <__copybits+0x1e>

0800ea24 <__any_on>:
 800ea24:	f100 0214 	add.w	r2, r0, #20
 800ea28:	6900      	ldr	r0, [r0, #16]
 800ea2a:	114b      	asrs	r3, r1, #5
 800ea2c:	4298      	cmp	r0, r3
 800ea2e:	b510      	push	{r4, lr}
 800ea30:	db11      	blt.n	800ea56 <__any_on+0x32>
 800ea32:	dd0a      	ble.n	800ea4a <__any_on+0x26>
 800ea34:	f011 011f 	ands.w	r1, r1, #31
 800ea38:	d007      	beq.n	800ea4a <__any_on+0x26>
 800ea3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea3e:	fa24 f001 	lsr.w	r0, r4, r1
 800ea42:	fa00 f101 	lsl.w	r1, r0, r1
 800ea46:	428c      	cmp	r4, r1
 800ea48:	d10b      	bne.n	800ea62 <__any_on+0x3e>
 800ea4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d803      	bhi.n	800ea5a <__any_on+0x36>
 800ea52:	2000      	movs	r0, #0
 800ea54:	bd10      	pop	{r4, pc}
 800ea56:	4603      	mov	r3, r0
 800ea58:	e7f7      	b.n	800ea4a <__any_on+0x26>
 800ea5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	d0f5      	beq.n	800ea4e <__any_on+0x2a>
 800ea62:	2001      	movs	r0, #1
 800ea64:	e7f6      	b.n	800ea54 <__any_on+0x30>

0800ea66 <_calloc_r>:
 800ea66:	b538      	push	{r3, r4, r5, lr}
 800ea68:	fb02 f401 	mul.w	r4, r2, r1
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	f000 f857 	bl	800eb20 <_malloc_r>
 800ea72:	4605      	mov	r5, r0
 800ea74:	b118      	cbz	r0, 800ea7e <_calloc_r+0x18>
 800ea76:	4622      	mov	r2, r4
 800ea78:	2100      	movs	r1, #0
 800ea7a:	f7fc fd38 	bl	800b4ee <memset>
 800ea7e:	4628      	mov	r0, r5
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea84 <_free_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4605      	mov	r5, r0
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	d045      	beq.n	800eb18 <_free_r+0x94>
 800ea8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea90:	1f0c      	subs	r4, r1, #4
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	bfb8      	it	lt
 800ea96:	18e4      	addlt	r4, r4, r3
 800ea98:	f000 fa36 	bl	800ef08 <__malloc_lock>
 800ea9c:	4a1f      	ldr	r2, [pc, #124]	; (800eb1c <_free_r+0x98>)
 800ea9e:	6813      	ldr	r3, [r2, #0]
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	b933      	cbnz	r3, 800eab2 <_free_r+0x2e>
 800eaa4:	6063      	str	r3, [r4, #4]
 800eaa6:	6014      	str	r4, [r2, #0]
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaae:	f000 ba2c 	b.w	800ef0a <__malloc_unlock>
 800eab2:	42a3      	cmp	r3, r4
 800eab4:	d90c      	bls.n	800ead0 <_free_r+0x4c>
 800eab6:	6821      	ldr	r1, [r4, #0]
 800eab8:	1862      	adds	r2, r4, r1
 800eaba:	4293      	cmp	r3, r2
 800eabc:	bf04      	itt	eq
 800eabe:	681a      	ldreq	r2, [r3, #0]
 800eac0:	685b      	ldreq	r3, [r3, #4]
 800eac2:	6063      	str	r3, [r4, #4]
 800eac4:	bf04      	itt	eq
 800eac6:	1852      	addeq	r2, r2, r1
 800eac8:	6022      	streq	r2, [r4, #0]
 800eaca:	6004      	str	r4, [r0, #0]
 800eacc:	e7ec      	b.n	800eaa8 <_free_r+0x24>
 800eace:	4613      	mov	r3, r2
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	b10a      	cbz	r2, 800ead8 <_free_r+0x54>
 800ead4:	42a2      	cmp	r2, r4
 800ead6:	d9fa      	bls.n	800eace <_free_r+0x4a>
 800ead8:	6819      	ldr	r1, [r3, #0]
 800eada:	1858      	adds	r0, r3, r1
 800eadc:	42a0      	cmp	r0, r4
 800eade:	d10b      	bne.n	800eaf8 <_free_r+0x74>
 800eae0:	6820      	ldr	r0, [r4, #0]
 800eae2:	4401      	add	r1, r0
 800eae4:	1858      	adds	r0, r3, r1
 800eae6:	4282      	cmp	r2, r0
 800eae8:	6019      	str	r1, [r3, #0]
 800eaea:	d1dd      	bne.n	800eaa8 <_free_r+0x24>
 800eaec:	6810      	ldr	r0, [r2, #0]
 800eaee:	6852      	ldr	r2, [r2, #4]
 800eaf0:	605a      	str	r2, [r3, #4]
 800eaf2:	4401      	add	r1, r0
 800eaf4:	6019      	str	r1, [r3, #0]
 800eaf6:	e7d7      	b.n	800eaa8 <_free_r+0x24>
 800eaf8:	d902      	bls.n	800eb00 <_free_r+0x7c>
 800eafa:	230c      	movs	r3, #12
 800eafc:	602b      	str	r3, [r5, #0]
 800eafe:	e7d3      	b.n	800eaa8 <_free_r+0x24>
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	1821      	adds	r1, r4, r0
 800eb04:	428a      	cmp	r2, r1
 800eb06:	bf04      	itt	eq
 800eb08:	6811      	ldreq	r1, [r2, #0]
 800eb0a:	6852      	ldreq	r2, [r2, #4]
 800eb0c:	6062      	str	r2, [r4, #4]
 800eb0e:	bf04      	itt	eq
 800eb10:	1809      	addeq	r1, r1, r0
 800eb12:	6021      	streq	r1, [r4, #0]
 800eb14:	605c      	str	r4, [r3, #4]
 800eb16:	e7c7      	b.n	800eaa8 <_free_r+0x24>
 800eb18:	bd38      	pop	{r3, r4, r5, pc}
 800eb1a:	bf00      	nop
 800eb1c:	200004bc 	.word	0x200004bc

0800eb20 <_malloc_r>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	1ccd      	adds	r5, r1, #3
 800eb24:	f025 0503 	bic.w	r5, r5, #3
 800eb28:	3508      	adds	r5, #8
 800eb2a:	2d0c      	cmp	r5, #12
 800eb2c:	bf38      	it	cc
 800eb2e:	250c      	movcc	r5, #12
 800eb30:	2d00      	cmp	r5, #0
 800eb32:	4606      	mov	r6, r0
 800eb34:	db01      	blt.n	800eb3a <_malloc_r+0x1a>
 800eb36:	42a9      	cmp	r1, r5
 800eb38:	d903      	bls.n	800eb42 <_malloc_r+0x22>
 800eb3a:	230c      	movs	r3, #12
 800eb3c:	6033      	str	r3, [r6, #0]
 800eb3e:	2000      	movs	r0, #0
 800eb40:	bd70      	pop	{r4, r5, r6, pc}
 800eb42:	f000 f9e1 	bl	800ef08 <__malloc_lock>
 800eb46:	4a21      	ldr	r2, [pc, #132]	; (800ebcc <_malloc_r+0xac>)
 800eb48:	6814      	ldr	r4, [r2, #0]
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	b991      	cbnz	r1, 800eb74 <_malloc_r+0x54>
 800eb4e:	4c20      	ldr	r4, [pc, #128]	; (800ebd0 <_malloc_r+0xb0>)
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	b91b      	cbnz	r3, 800eb5c <_malloc_r+0x3c>
 800eb54:	4630      	mov	r0, r6
 800eb56:	f000 f98f 	bl	800ee78 <_sbrk_r>
 800eb5a:	6020      	str	r0, [r4, #0]
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f000 f98a 	bl	800ee78 <_sbrk_r>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d124      	bne.n	800ebb2 <_malloc_r+0x92>
 800eb68:	230c      	movs	r3, #12
 800eb6a:	6033      	str	r3, [r6, #0]
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	f000 f9cc 	bl	800ef0a <__malloc_unlock>
 800eb72:	e7e4      	b.n	800eb3e <_malloc_r+0x1e>
 800eb74:	680b      	ldr	r3, [r1, #0]
 800eb76:	1b5b      	subs	r3, r3, r5
 800eb78:	d418      	bmi.n	800ebac <_malloc_r+0x8c>
 800eb7a:	2b0b      	cmp	r3, #11
 800eb7c:	d90f      	bls.n	800eb9e <_malloc_r+0x7e>
 800eb7e:	600b      	str	r3, [r1, #0]
 800eb80:	50cd      	str	r5, [r1, r3]
 800eb82:	18cc      	adds	r4, r1, r3
 800eb84:	4630      	mov	r0, r6
 800eb86:	f000 f9c0 	bl	800ef0a <__malloc_unlock>
 800eb8a:	f104 000b 	add.w	r0, r4, #11
 800eb8e:	1d23      	adds	r3, r4, #4
 800eb90:	f020 0007 	bic.w	r0, r0, #7
 800eb94:	1ac3      	subs	r3, r0, r3
 800eb96:	d0d3      	beq.n	800eb40 <_malloc_r+0x20>
 800eb98:	425a      	negs	r2, r3
 800eb9a:	50e2      	str	r2, [r4, r3]
 800eb9c:	e7d0      	b.n	800eb40 <_malloc_r+0x20>
 800eb9e:	428c      	cmp	r4, r1
 800eba0:	684b      	ldr	r3, [r1, #4]
 800eba2:	bf16      	itet	ne
 800eba4:	6063      	strne	r3, [r4, #4]
 800eba6:	6013      	streq	r3, [r2, #0]
 800eba8:	460c      	movne	r4, r1
 800ebaa:	e7eb      	b.n	800eb84 <_malloc_r+0x64>
 800ebac:	460c      	mov	r4, r1
 800ebae:	6849      	ldr	r1, [r1, #4]
 800ebb0:	e7cc      	b.n	800eb4c <_malloc_r+0x2c>
 800ebb2:	1cc4      	adds	r4, r0, #3
 800ebb4:	f024 0403 	bic.w	r4, r4, #3
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d005      	beq.n	800ebc8 <_malloc_r+0xa8>
 800ebbc:	1a21      	subs	r1, r4, r0
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f000 f95a 	bl	800ee78 <_sbrk_r>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d0cf      	beq.n	800eb68 <_malloc_r+0x48>
 800ebc8:	6025      	str	r5, [r4, #0]
 800ebca:	e7db      	b.n	800eb84 <_malloc_r+0x64>
 800ebcc:	200004bc 	.word	0x200004bc
 800ebd0:	200004c0 	.word	0x200004c0

0800ebd4 <__ssputs_r>:
 800ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	688e      	ldr	r6, [r1, #8]
 800ebda:	429e      	cmp	r6, r3
 800ebdc:	4682      	mov	sl, r0
 800ebde:	460c      	mov	r4, r1
 800ebe0:	4690      	mov	r8, r2
 800ebe2:	4699      	mov	r9, r3
 800ebe4:	d837      	bhi.n	800ec56 <__ssputs_r+0x82>
 800ebe6:	898a      	ldrh	r2, [r1, #12]
 800ebe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ebec:	d031      	beq.n	800ec52 <__ssputs_r+0x7e>
 800ebee:	6825      	ldr	r5, [r4, #0]
 800ebf0:	6909      	ldr	r1, [r1, #16]
 800ebf2:	1a6f      	subs	r7, r5, r1
 800ebf4:	6965      	ldr	r5, [r4, #20]
 800ebf6:	2302      	movs	r3, #2
 800ebf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebfc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ec00:	f109 0301 	add.w	r3, r9, #1
 800ec04:	443b      	add	r3, r7
 800ec06:	429d      	cmp	r5, r3
 800ec08:	bf38      	it	cc
 800ec0a:	461d      	movcc	r5, r3
 800ec0c:	0553      	lsls	r3, r2, #21
 800ec0e:	d530      	bpl.n	800ec72 <__ssputs_r+0x9e>
 800ec10:	4629      	mov	r1, r5
 800ec12:	f7ff ff85 	bl	800eb20 <_malloc_r>
 800ec16:	4606      	mov	r6, r0
 800ec18:	b950      	cbnz	r0, 800ec30 <__ssputs_r+0x5c>
 800ec1a:	230c      	movs	r3, #12
 800ec1c:	f8ca 3000 	str.w	r3, [sl]
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec26:	81a3      	strh	r3, [r4, #12]
 800ec28:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec30:	463a      	mov	r2, r7
 800ec32:	6921      	ldr	r1, [r4, #16]
 800ec34:	f7fc fc50 	bl	800b4d8 <memcpy>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	6126      	str	r6, [r4, #16]
 800ec46:	6165      	str	r5, [r4, #20]
 800ec48:	443e      	add	r6, r7
 800ec4a:	1bed      	subs	r5, r5, r7
 800ec4c:	6026      	str	r6, [r4, #0]
 800ec4e:	60a5      	str	r5, [r4, #8]
 800ec50:	464e      	mov	r6, r9
 800ec52:	454e      	cmp	r6, r9
 800ec54:	d900      	bls.n	800ec58 <__ssputs_r+0x84>
 800ec56:	464e      	mov	r6, r9
 800ec58:	4632      	mov	r2, r6
 800ec5a:	4641      	mov	r1, r8
 800ec5c:	6820      	ldr	r0, [r4, #0]
 800ec5e:	f000 f93a 	bl	800eed6 <memmove>
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	1b9b      	subs	r3, r3, r6
 800ec66:	60a3      	str	r3, [r4, #8]
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	441e      	add	r6, r3
 800ec6c:	6026      	str	r6, [r4, #0]
 800ec6e:	2000      	movs	r0, #0
 800ec70:	e7dc      	b.n	800ec2c <__ssputs_r+0x58>
 800ec72:	462a      	mov	r2, r5
 800ec74:	f000 f94a 	bl	800ef0c <_realloc_r>
 800ec78:	4606      	mov	r6, r0
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d1e2      	bne.n	800ec44 <__ssputs_r+0x70>
 800ec7e:	6921      	ldr	r1, [r4, #16]
 800ec80:	4650      	mov	r0, sl
 800ec82:	f7ff feff 	bl	800ea84 <_free_r>
 800ec86:	e7c8      	b.n	800ec1a <__ssputs_r+0x46>

0800ec88 <_svfiprintf_r>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	461d      	mov	r5, r3
 800ec8e:	898b      	ldrh	r3, [r1, #12]
 800ec90:	061f      	lsls	r7, r3, #24
 800ec92:	b09d      	sub	sp, #116	; 0x74
 800ec94:	4680      	mov	r8, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	4616      	mov	r6, r2
 800ec9a:	d50f      	bpl.n	800ecbc <_svfiprintf_r+0x34>
 800ec9c:	690b      	ldr	r3, [r1, #16]
 800ec9e:	b96b      	cbnz	r3, 800ecbc <_svfiprintf_r+0x34>
 800eca0:	2140      	movs	r1, #64	; 0x40
 800eca2:	f7ff ff3d 	bl	800eb20 <_malloc_r>
 800eca6:	6020      	str	r0, [r4, #0]
 800eca8:	6120      	str	r0, [r4, #16]
 800ecaa:	b928      	cbnz	r0, 800ecb8 <_svfiprintf_r+0x30>
 800ecac:	230c      	movs	r3, #12
 800ecae:	f8c8 3000 	str.w	r3, [r8]
 800ecb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb6:	e0c8      	b.n	800ee4a <_svfiprintf_r+0x1c2>
 800ecb8:	2340      	movs	r3, #64	; 0x40
 800ecba:	6163      	str	r3, [r4, #20]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc0:	2320      	movs	r3, #32
 800ecc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecc6:	2330      	movs	r3, #48	; 0x30
 800ecc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eccc:	9503      	str	r5, [sp, #12]
 800ecce:	f04f 0b01 	mov.w	fp, #1
 800ecd2:	4637      	mov	r7, r6
 800ecd4:	463d      	mov	r5, r7
 800ecd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ecda:	b10b      	cbz	r3, 800ece0 <_svfiprintf_r+0x58>
 800ecdc:	2b25      	cmp	r3, #37	; 0x25
 800ecde:	d13e      	bne.n	800ed5e <_svfiprintf_r+0xd6>
 800ece0:	ebb7 0a06 	subs.w	sl, r7, r6
 800ece4:	d00b      	beq.n	800ecfe <_svfiprintf_r+0x76>
 800ece6:	4653      	mov	r3, sl
 800ece8:	4632      	mov	r2, r6
 800ecea:	4621      	mov	r1, r4
 800ecec:	4640      	mov	r0, r8
 800ecee:	f7ff ff71 	bl	800ebd4 <__ssputs_r>
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	f000 80a4 	beq.w	800ee40 <_svfiprintf_r+0x1b8>
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	4453      	add	r3, sl
 800ecfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfe:	783b      	ldrb	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 809d 	beq.w	800ee40 <_svfiprintf_r+0x1b8>
 800ed06:	2300      	movs	r3, #0
 800ed08:	f04f 32ff 	mov.w	r2, #4294967295
 800ed0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	9307      	str	r3, [sp, #28]
 800ed14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed18:	931a      	str	r3, [sp, #104]	; 0x68
 800ed1a:	462f      	mov	r7, r5
 800ed1c:	2205      	movs	r2, #5
 800ed1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ed22:	4850      	ldr	r0, [pc, #320]	; (800ee64 <_svfiprintf_r+0x1dc>)
 800ed24:	f7f1 fa64 	bl	80001f0 <memchr>
 800ed28:	9b04      	ldr	r3, [sp, #16]
 800ed2a:	b9d0      	cbnz	r0, 800ed62 <_svfiprintf_r+0xda>
 800ed2c:	06d9      	lsls	r1, r3, #27
 800ed2e:	bf44      	itt	mi
 800ed30:	2220      	movmi	r2, #32
 800ed32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ed36:	071a      	lsls	r2, r3, #28
 800ed38:	bf44      	itt	mi
 800ed3a:	222b      	movmi	r2, #43	; 0x2b
 800ed3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ed40:	782a      	ldrb	r2, [r5, #0]
 800ed42:	2a2a      	cmp	r2, #42	; 0x2a
 800ed44:	d015      	beq.n	800ed72 <_svfiprintf_r+0xea>
 800ed46:	9a07      	ldr	r2, [sp, #28]
 800ed48:	462f      	mov	r7, r5
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	250a      	movs	r5, #10
 800ed4e:	4639      	mov	r1, r7
 800ed50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed54:	3b30      	subs	r3, #48	; 0x30
 800ed56:	2b09      	cmp	r3, #9
 800ed58:	d94d      	bls.n	800edf6 <_svfiprintf_r+0x16e>
 800ed5a:	b1b8      	cbz	r0, 800ed8c <_svfiprintf_r+0x104>
 800ed5c:	e00f      	b.n	800ed7e <_svfiprintf_r+0xf6>
 800ed5e:	462f      	mov	r7, r5
 800ed60:	e7b8      	b.n	800ecd4 <_svfiprintf_r+0x4c>
 800ed62:	4a40      	ldr	r2, [pc, #256]	; (800ee64 <_svfiprintf_r+0x1dc>)
 800ed64:	1a80      	subs	r0, r0, r2
 800ed66:	fa0b f000 	lsl.w	r0, fp, r0
 800ed6a:	4318      	orrs	r0, r3
 800ed6c:	9004      	str	r0, [sp, #16]
 800ed6e:	463d      	mov	r5, r7
 800ed70:	e7d3      	b.n	800ed1a <_svfiprintf_r+0x92>
 800ed72:	9a03      	ldr	r2, [sp, #12]
 800ed74:	1d11      	adds	r1, r2, #4
 800ed76:	6812      	ldr	r2, [r2, #0]
 800ed78:	9103      	str	r1, [sp, #12]
 800ed7a:	2a00      	cmp	r2, #0
 800ed7c:	db01      	blt.n	800ed82 <_svfiprintf_r+0xfa>
 800ed7e:	9207      	str	r2, [sp, #28]
 800ed80:	e004      	b.n	800ed8c <_svfiprintf_r+0x104>
 800ed82:	4252      	negs	r2, r2
 800ed84:	f043 0302 	orr.w	r3, r3, #2
 800ed88:	9207      	str	r2, [sp, #28]
 800ed8a:	9304      	str	r3, [sp, #16]
 800ed8c:	783b      	ldrb	r3, [r7, #0]
 800ed8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed90:	d10c      	bne.n	800edac <_svfiprintf_r+0x124>
 800ed92:	787b      	ldrb	r3, [r7, #1]
 800ed94:	2b2a      	cmp	r3, #42	; 0x2a
 800ed96:	d133      	bne.n	800ee00 <_svfiprintf_r+0x178>
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	1d1a      	adds	r2, r3, #4
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	9203      	str	r2, [sp, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	bfb8      	it	lt
 800eda4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eda8:	3702      	adds	r7, #2
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	4d2e      	ldr	r5, [pc, #184]	; (800ee68 <_svfiprintf_r+0x1e0>)
 800edae:	7839      	ldrb	r1, [r7, #0]
 800edb0:	2203      	movs	r2, #3
 800edb2:	4628      	mov	r0, r5
 800edb4:	f7f1 fa1c 	bl	80001f0 <memchr>
 800edb8:	b138      	cbz	r0, 800edca <_svfiprintf_r+0x142>
 800edba:	2340      	movs	r3, #64	; 0x40
 800edbc:	1b40      	subs	r0, r0, r5
 800edbe:	fa03 f000 	lsl.w	r0, r3, r0
 800edc2:	9b04      	ldr	r3, [sp, #16]
 800edc4:	4303      	orrs	r3, r0
 800edc6:	3701      	adds	r7, #1
 800edc8:	9304      	str	r3, [sp, #16]
 800edca:	7839      	ldrb	r1, [r7, #0]
 800edcc:	4827      	ldr	r0, [pc, #156]	; (800ee6c <_svfiprintf_r+0x1e4>)
 800edce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edd2:	2206      	movs	r2, #6
 800edd4:	1c7e      	adds	r6, r7, #1
 800edd6:	f7f1 fa0b 	bl	80001f0 <memchr>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d038      	beq.n	800ee50 <_svfiprintf_r+0x1c8>
 800edde:	4b24      	ldr	r3, [pc, #144]	; (800ee70 <_svfiprintf_r+0x1e8>)
 800ede0:	bb13      	cbnz	r3, 800ee28 <_svfiprintf_r+0x1a0>
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	3307      	adds	r3, #7
 800ede6:	f023 0307 	bic.w	r3, r3, #7
 800edea:	3308      	adds	r3, #8
 800edec:	9303      	str	r3, [sp, #12]
 800edee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf0:	444b      	add	r3, r9
 800edf2:	9309      	str	r3, [sp, #36]	; 0x24
 800edf4:	e76d      	b.n	800ecd2 <_svfiprintf_r+0x4a>
 800edf6:	fb05 3202 	mla	r2, r5, r2, r3
 800edfa:	2001      	movs	r0, #1
 800edfc:	460f      	mov	r7, r1
 800edfe:	e7a6      	b.n	800ed4e <_svfiprintf_r+0xc6>
 800ee00:	2300      	movs	r3, #0
 800ee02:	3701      	adds	r7, #1
 800ee04:	9305      	str	r3, [sp, #20]
 800ee06:	4619      	mov	r1, r3
 800ee08:	250a      	movs	r5, #10
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee10:	3a30      	subs	r2, #48	; 0x30
 800ee12:	2a09      	cmp	r2, #9
 800ee14:	d903      	bls.n	800ee1e <_svfiprintf_r+0x196>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d0c8      	beq.n	800edac <_svfiprintf_r+0x124>
 800ee1a:	9105      	str	r1, [sp, #20]
 800ee1c:	e7c6      	b.n	800edac <_svfiprintf_r+0x124>
 800ee1e:	fb05 2101 	mla	r1, r5, r1, r2
 800ee22:	2301      	movs	r3, #1
 800ee24:	4607      	mov	r7, r0
 800ee26:	e7f0      	b.n	800ee0a <_svfiprintf_r+0x182>
 800ee28:	ab03      	add	r3, sp, #12
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4622      	mov	r2, r4
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <_svfiprintf_r+0x1ec>)
 800ee30:	a904      	add	r1, sp, #16
 800ee32:	4640      	mov	r0, r8
 800ee34:	f7fc fbf8 	bl	800b628 <_printf_float>
 800ee38:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ee3c:	4681      	mov	r9, r0
 800ee3e:	d1d6      	bne.n	800edee <_svfiprintf_r+0x166>
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	065b      	lsls	r3, r3, #25
 800ee44:	f53f af35 	bmi.w	800ecb2 <_svfiprintf_r+0x2a>
 800ee48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee4a:	b01d      	add	sp, #116	; 0x74
 800ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee50:	ab03      	add	r3, sp, #12
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	4622      	mov	r2, r4
 800ee56:	4b07      	ldr	r3, [pc, #28]	; (800ee74 <_svfiprintf_r+0x1ec>)
 800ee58:	a904      	add	r1, sp, #16
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	f7fc fe9a 	bl	800bb94 <_printf_i>
 800ee60:	e7ea      	b.n	800ee38 <_svfiprintf_r+0x1b0>
 800ee62:	bf00      	nop
 800ee64:	0800f1ac 	.word	0x0800f1ac
 800ee68:	0800f1b2 	.word	0x0800f1b2
 800ee6c:	0800f1b6 	.word	0x0800f1b6
 800ee70:	0800b629 	.word	0x0800b629
 800ee74:	0800ebd5 	.word	0x0800ebd5

0800ee78 <_sbrk_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4c06      	ldr	r4, [pc, #24]	; (800ee94 <_sbrk_r+0x1c>)
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4605      	mov	r5, r0
 800ee80:	4608      	mov	r0, r1
 800ee82:	6023      	str	r3, [r4, #0]
 800ee84:	f7f2 fae2 	bl	800144c <_sbrk>
 800ee88:	1c43      	adds	r3, r0, #1
 800ee8a:	d102      	bne.n	800ee92 <_sbrk_r+0x1a>
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	b103      	cbz	r3, 800ee92 <_sbrk_r+0x1a>
 800ee90:	602b      	str	r3, [r5, #0]
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	20000948 	.word	0x20000948

0800ee98 <strncmp>:
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	b16a      	cbz	r2, 800eeb8 <strncmp+0x20>
 800ee9c:	3901      	subs	r1, #1
 800ee9e:	1884      	adds	r4, r0, r2
 800eea0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800eea4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d103      	bne.n	800eeb4 <strncmp+0x1c>
 800eeac:	42a0      	cmp	r0, r4
 800eeae:	d001      	beq.n	800eeb4 <strncmp+0x1c>
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1f5      	bne.n	800eea0 <strncmp+0x8>
 800eeb4:	1a98      	subs	r0, r3, r2
 800eeb6:	bd10      	pop	{r4, pc}
 800eeb8:	4610      	mov	r0, r2
 800eeba:	e7fc      	b.n	800eeb6 <strncmp+0x1e>

0800eebc <__ascii_wctomb>:
 800eebc:	b149      	cbz	r1, 800eed2 <__ascii_wctomb+0x16>
 800eebe:	2aff      	cmp	r2, #255	; 0xff
 800eec0:	bf85      	ittet	hi
 800eec2:	238a      	movhi	r3, #138	; 0x8a
 800eec4:	6003      	strhi	r3, [r0, #0]
 800eec6:	700a      	strbls	r2, [r1, #0]
 800eec8:	f04f 30ff 	movhi.w	r0, #4294967295
 800eecc:	bf98      	it	ls
 800eece:	2001      	movls	r0, #1
 800eed0:	4770      	bx	lr
 800eed2:	4608      	mov	r0, r1
 800eed4:	4770      	bx	lr

0800eed6 <memmove>:
 800eed6:	4288      	cmp	r0, r1
 800eed8:	b510      	push	{r4, lr}
 800eeda:	eb01 0302 	add.w	r3, r1, r2
 800eede:	d807      	bhi.n	800eef0 <memmove+0x1a>
 800eee0:	1e42      	subs	r2, r0, #1
 800eee2:	4299      	cmp	r1, r3
 800eee4:	d00a      	beq.n	800eefc <memmove+0x26>
 800eee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eeee:	e7f8      	b.n	800eee2 <memmove+0xc>
 800eef0:	4283      	cmp	r3, r0
 800eef2:	d9f5      	bls.n	800eee0 <memmove+0xa>
 800eef4:	1881      	adds	r1, r0, r2
 800eef6:	1ad2      	subs	r2, r2, r3
 800eef8:	42d3      	cmn	r3, r2
 800eefa:	d100      	bne.n	800eefe <memmove+0x28>
 800eefc:	bd10      	pop	{r4, pc}
 800eefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ef06:	e7f7      	b.n	800eef8 <memmove+0x22>

0800ef08 <__malloc_lock>:
 800ef08:	4770      	bx	lr

0800ef0a <__malloc_unlock>:
 800ef0a:	4770      	bx	lr

0800ef0c <_realloc_r>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	4607      	mov	r7, r0
 800ef10:	4614      	mov	r4, r2
 800ef12:	460e      	mov	r6, r1
 800ef14:	b921      	cbnz	r1, 800ef20 <_realloc_r+0x14>
 800ef16:	4611      	mov	r1, r2
 800ef18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef1c:	f7ff be00 	b.w	800eb20 <_malloc_r>
 800ef20:	b922      	cbnz	r2, 800ef2c <_realloc_r+0x20>
 800ef22:	f7ff fdaf 	bl	800ea84 <_free_r>
 800ef26:	4625      	mov	r5, r4
 800ef28:	4628      	mov	r0, r5
 800ef2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef2c:	f000 f814 	bl	800ef58 <_malloc_usable_size_r>
 800ef30:	42a0      	cmp	r0, r4
 800ef32:	d20f      	bcs.n	800ef54 <_realloc_r+0x48>
 800ef34:	4621      	mov	r1, r4
 800ef36:	4638      	mov	r0, r7
 800ef38:	f7ff fdf2 	bl	800eb20 <_malloc_r>
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d0f2      	beq.n	800ef28 <_realloc_r+0x1c>
 800ef42:	4631      	mov	r1, r6
 800ef44:	4622      	mov	r2, r4
 800ef46:	f7fc fac7 	bl	800b4d8 <memcpy>
 800ef4a:	4631      	mov	r1, r6
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	f7ff fd99 	bl	800ea84 <_free_r>
 800ef52:	e7e9      	b.n	800ef28 <_realloc_r+0x1c>
 800ef54:	4635      	mov	r5, r6
 800ef56:	e7e7      	b.n	800ef28 <_realloc_r+0x1c>

0800ef58 <_malloc_usable_size_r>:
 800ef58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef5c:	1f18      	subs	r0, r3, #4
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	bfbc      	itt	lt
 800ef62:	580b      	ldrlt	r3, [r1, r0]
 800ef64:	18c0      	addlt	r0, r0, r3
 800ef66:	4770      	bx	lr

0800ef68 <_init>:
 800ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6a:	bf00      	nop
 800ef6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef6e:	bc08      	pop	{r3}
 800ef70:	469e      	mov	lr, r3
 800ef72:	4770      	bx	lr

0800ef74 <_fini>:
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef76:	bf00      	nop
 800ef78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef7a:	bc08      	pop	{r3}
 800ef7c:	469e      	mov	lr, r3
 800ef7e:	4770      	bx	lr
