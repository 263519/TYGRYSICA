
ciach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010578  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08010718  08010718  00020718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ac8  08010ac8  0003049c  2**0
                  CONTENTS
  4 .ARM          00000000  08010ac8  08010ac8  0003049c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010ac8  08010ac8  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ac8  08010ac8  00020ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010acc  08010acc  00020acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08010ad0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000049c  08010f6c  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08010f6c  000309bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c7f  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d78  00000000  00000000  0005514b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00058ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001728  00000000  00000000  0005a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000262ed  00000000  00000000  0005bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001921c  00000000  00000000  000821cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd392  00000000  00000000  0009b3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017877b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b7c  00000000  00000000  001787f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000049c 	.word	0x2000049c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010700 	.word	0x08010700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a0 	.word	0x200004a0
 80001dc:	08010700 	.word	0x08010700

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f000 ffd6 	bl	8001cb8 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 fb07 	bl	8001324 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f001 fe3c 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 faf1 	bl	8001324 <Error_Handler>
  }

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004c4 	.word	0x200004c4
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <HAL_ADC_MspInit+0xd4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d154      	bne.n	8000e20 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a2c      	ldr	r2, [pc, #176]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_Pin;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SHARP_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f002 fbe6 	bl	800358c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_ADC_MspInit+0xe0>)
 8000dc4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_DISABLE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000dea:	2220      	movs	r2, #32
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000df6:	f002 faa2 	bl	800333e <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000e00:	f000 fa90 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f002 fa5c 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f002 fa75 	bl	800330a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	20000514 	.word	0x20000514
 8000e34:	40020408 	.word	0x40020408

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_DMA_Init+0x38>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2038      	movs	r0, #56	; 0x38
 8000e5c:	f002 fa39 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000e60:	2038      	movs	r0, #56	; 0x38
 8000e62:	f002 fa52 	bl	800330a <HAL_NVIC_EnableIRQ>

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a3c      	ldr	r2, [pc, #240]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a36      	ldr	r2, [pc, #216]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <MX_GPIO_Init+0x10c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f002 fce1 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f64f 719e 	movw	r1, #65438	; 0xff9e
 8000ee4:	4827      	ldr	r0, [pc, #156]	; (8000f84 <MX_GPIO_Init+0x110>)
 8000ee6:	f002 fcdb 	bl	80038a0 <HAL_GPIO_WritePin>
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000f02:	f002 fb43 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f06:	2320      	movs	r3, #32
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f002 fb34 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO1_TOF1_Pin|GPIO1_TOF2_Pin;
 8000f24:	2330      	movs	r3, #48	; 0x30
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000f38:	f002 fb28 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000f3c:	f64f 739e 	movw	r3, #65438	; 0xff9e
 8000f40:	60fb      	str	r3, [r7, #12]
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0x110>)
 8000f56:	f002 fb19 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000f72:	f002 fb0b 	bl	800358c <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800

08000f8c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_I2C2_Init+0x74>)
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_I2C2_Init+0x78>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_I2C2_Init+0x74>)
 8000f98:	f240 220b 	movw	r2, #523	; 0x20b
 8000f9c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fca:	f002 fc81 	bl	80038d0 <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f9a6 	bl	8001324 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fdc:	f003 fb52 	bl	8004684 <HAL_I2CEx_ConfigAnalogFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000fe6:	f000 f99d 	bl	8001324 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_I2C2_Init+0x74>)
 8000fee:	f003 fb94 	bl	800471a <HAL_I2CEx_ConfigDigitalFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ff8:	f000 f994 	bl	8001324 <Error_Handler>
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200005a4 	.word	0x200005a4
 8001004:	40005800 	.word	0x40005800

08001008 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_I2C3_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_I2C3_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_I2C3_Init+0x74>)
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <MX_I2C3_Init+0x7c>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_I2C3_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_I2C3_Init+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_I2C3_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_I2C3_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_I2C3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_I2C3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_I2C3_Init+0x74>)
 8001044:	f002 fc44 	bl	80038d0 <HAL_I2C_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 f969 	bl	8001324 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <MX_I2C3_Init+0x74>)
 8001056:	f003 fb15 	bl	8004684 <HAL_I2CEx_ConfigAnalogFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 f960 	bl	8001324 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_I2C3_Init+0x74>)
 8001068:	f003 fb57 	bl	800471a <HAL_I2CEx_ConfigDigitalFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 f957 	bl	8001324 <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000558 	.word	0x20000558
 8001080:	40007800 	.word	0x40007800
 8001084:	2000090e 	.word	0x2000090e

08001088 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <HAL_I2C_MspInit+0x118>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12a      	bne.n	8001100 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GYRO_TOF_SCL_Pin|GYRO_TOF_SDA_Pin;
 80010c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d4:	2304      	movs	r3, #4
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f002 fa53 	bl	800358c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010fe:	e04b      	b.n	8001198 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <HAL_I2C_MspInit+0x120>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d146      	bne.n	8001198 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOF2_SDA_Pin;
 800113a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 800114c:	2303      	movs	r3, #3
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <HAL_I2C_MspInit+0x124>)
 8001158:	f002 fa18 	bl	800358c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOF2_SCL_Pin;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 800116e:	2303      	movs	r3, #3
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f002 fa06 	bl	800358c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 8001186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0x11c>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005800 	.word	0x40005800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007800 	.word	0x40007800
 80011ac:	48000800 	.word	0x48000800

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fce3 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f835 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f7ff fe59 	bl	8000e74 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c2:	f7ff fe39 	bl	8000e38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 fb0d 	bl	80017e4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80011ca:	f7ff fd65 	bl	8000c98 <MX_ADC2_Init>
  MX_I2C2_Init();
 80011ce:	f7ff fedd 	bl	8000f8c <MX_I2C2_Init>
  MX_I2C3_Init();
 80011d2:	f7ff ff19 	bl	8001008 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 80011d6:	f000 fb35 	bl	8001844 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80011da:	f000 fa45 	bl	8001668 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  uint8_t mhm[] = "10";
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <main+0x68>)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	4611      	mov	r1, r2
 80011e6:	8019      	strh	r1, [r3, #0]
 80011e8:	3302      	adds	r3, #2
 80011ea:	0c12      	lsrs	r2, r2, #16
 80011ec:	701a      	strb	r2, [r3, #0]
  MPU6050_Init();
 80011ee:	f000 f8a1 	bl	8001334 <MPU6050_Init>
  VL53L0X_Init();
 80011f2:	f000 fbe1 	bl	80019b8 <VL53L0X_Init>
  HAL_ADC_Start_IT(&hadc2);
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <main+0x6c>)
 80011f8:	f000 ff58 	bl	80020ac <HAL_ADC_Start_IT>
//	  MPU6050_ReadAccelerometerScaled(&gyr_x, &gyr_y, &gyr_z);
//	  printf("gyr_x: %f, gyr_y: %f,gyr_z: %f\r\n",gyr_x, gyr_y, gyr_z);
	 // MPU6050_GetRP(&r, &p);
	 // printf("%d", xd);

	  HAL_ADC_Start_IT(&hadc2);
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <main+0x6c>)
 80011fe:	f000 ff55 	bl	80020ac <HAL_ADC_Start_IT>
	  //dist = get_distance();
	  	//uint16_t xpp = 257;
	  printf("Distance: %d\r\n", distance_cm);
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <main+0x70>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <main+0x74>)
 800120a:	f00b fedd 	bl	800cfc8 <iprintf>
//	  printf("gyr_x: %d, gyr_y: %d,gyr_z: %d\r\n",gyr_x, gyr_y, gyr_z);

//	  VL53L0X_MeasureDistance(&tof2_distance);
//
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  HAL_Delay(1000);
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f000 fd1b 	bl	8001c4c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc2);
 8001216:	e7f1      	b.n	80011fc <main+0x4c>
 8001218:	08010728 	.word	0x08010728
 800121c:	200004c4 	.word	0x200004c4
 8001220:	20000614 	.word	0x20000614
 8001224:	08010718 	.word	0x08010718

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0a6      	sub	sp, #152	; 0x98
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001232:	2228      	movs	r2, #40	; 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00b f87f 	bl	800c33a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2258      	movs	r2, #88	; 0x58
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f00b f871 	bl	800c33a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fa94 	bl	80047b4 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001292:	f000 f847 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f994 	bl	80055e0 <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012be:	f000 f831 	bl	8001324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <SystemClock_Config+0xd4>)
 80012c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80012dc:	2300      	movs	r3, #0
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fbb2 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012ee:	f000 f819 	bl	8001324 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3798      	adds	r7, #152	; 0x98
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	002400c6 	.word	0x002400c6

08001300 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
//	if (hadc == &hadc2) {
//		adc_measurement = 1;
		distance_cm = HAL_ADC_GetValue(&hadc2);
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <HAL_ADC_ConvCpltCallback+0x1c>)
 800130a:	f001 f80f 	bl	800232c <HAL_ADC_GetValue>
 800130e:	4602      	mov	r2, r0
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_ADC_ConvCpltCallback+0x20>)
 8001312:	601a      	str	r2, [r3, #0]
//	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200004c4 	.word	0x200004c4
 8001320:	20000614 	.word	0x20000614

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */


  /* USER CODE END Error_Handler_Debug */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <MPU6050_Init>:
#define I2C_TIMEOUT 10

float acc_scale;
float gyr_scale;

void MPU6050_Init(){
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af04      	add	r7, sp, #16
	  // try to connect once, timeout 100 ms
	  HAL_I2C_IsDeviceReady(&hi2c2,MPU6050_ADDRESS, 1, I2C_TIMEOUT);
 800133a:	230a      	movs	r3, #10
 800133c:	2201      	movs	r2, #1
 800133e:	21d0      	movs	r1, #208	; 0xd0
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MPU6050_Init+0x40>)
 8001342:	f002 fe53 	bl	8003fec <HAL_I2C_IsDeviceReady>

	  MPU6050_SelectGyrscopeAccelerometerRatio(AFS_SEL_ACC_2G, FS_SEL_GYRO_250);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f000 f815 	bl	8001378 <MPU6050_SelectGyrscopeAccelerometerRatio>
	  // EXIT SLEEP MODE
	  uint8_t select_data = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &select_data, 1, I2C_TIMEOUT);
 8001352:	230a      	movs	r3, #10
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	226b      	movs	r2, #107	; 0x6b
 8001362:	21d0      	movs	r1, #208	; 0xd0
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MPU6050_Init+0x40>)
 8001366:	f002 fd2d 	bl	8003dc4 <HAL_I2C_Mem_Write>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200005a4 	.word	0x200005a4

08001378 <MPU6050_SelectGyrscopeAccelerometerRatio>:
	*y = ((int16_t)data[2] << 8) | data[3];
	*z = ((int16_t)data[4] << 8) | data[5];

}

void MPU6050_SelectGyrscopeAccelerometerRatio(uint8_t acc_range, uint8_t gyro_range){
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af04      	add	r7, sp, #16
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	  // GYRO CONFIG
	  uint8_t select_data = FS_SEL_GYRO_500;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,GYRO_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 800138c:	230a      	movs	r3, #10
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	2301      	movs	r3, #1
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	f107 030f 	add.w	r3, r7, #15
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	221b      	movs	r2, #27
 800139e:	21d0      	movs	r1, #208	; 0xd0
 80013a0:	482a      	ldr	r0, [pc, #168]	; (800144c <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 80013a2:	f002 fd0f 	bl	8003dc4 <HAL_I2C_Mem_Write>

	  // ACCEL CONFIG
	  select_data =  AFS_SEL_ACC_4G;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,ACCEL_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 80013aa:	230a      	movs	r3, #10
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 030f 	add.w	r3, r7, #15
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	221c      	movs	r2, #28
 80013bc:	21d0      	movs	r1, #208	; 0xd0
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <MPU6050_SelectGyrscopeAccelerometerRatio+0xd4>)
 80013c0:	f002 fd00 	bl	8003dc4 <HAL_I2C_Mem_Write>

	switch(gyro_range){
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d81e      	bhi.n	8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <MPU6050_SelectGyrscopeAccelerometerRatio+0x58>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	080013eb 	.word	0x080013eb
 80013d8:	080013f5 	.word	0x080013f5
 80013dc:	080013ff 	.word	0x080013ff
		// LSB SENSITIVITY - LSB/g - register map of device
		case 0:
			acc_scale = 16384.f;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013e2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80013e6:	601a      	str	r2, [r3, #0]
			break;
 80013e8:	e00e      	b.n	8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 1:
			acc_scale = 8192.f;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013ec:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80013f0:	601a      	str	r2, [r3, #0]
			break;
 80013f2:	e009      	b.n	8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 2:
			acc_scale = 4096.f;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 80013f6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80013fa:	601a      	str	r2, [r3, #0]
			break;
 80013fc:	e004      	b.n	8001408 <MPU6050_SelectGyrscopeAccelerometerRatio+0x90>
		case 3:
			acc_scale = 2048.f;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MPU6050_SelectGyrscopeAccelerometerRatio+0xd8>)
 8001400:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001404:	601a      	str	r2, [r3, #0]
			break;
 8001406:	bf00      	nop
	}

	switch(acc_range){
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d81a      	bhi.n	8001444 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <MPU6050_SelectGyrscopeAccelerometerRatio+0x9c>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001425 	.word	0x08001425
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001435 	.word	0x08001435
 8001420:	0800143d 	.word	0x0800143d

		case 0:
			gyr_scale = 131.f;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe0>)
 8001428:	601a      	str	r2, [r3, #0]
			break;
 800142a:	e00b      	b.n	8001444 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 1:
			gyr_scale = 65.5f;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <MPU6050_SelectGyrscopeAccelerometerRatio+0xe4>)
 8001430:	601a      	str	r2, [r3, #0]
			break;
 8001432:	e007      	b.n	8001444 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 2:
			gyr_scale = 32.8f;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <MPU6050_SelectGyrscopeAccelerometerRatio+0xe8>)
 8001438:	601a      	str	r2, [r3, #0]
			break;
 800143a:	e003      	b.n	8001444 <MPU6050_SelectGyrscopeAccelerometerRatio+0xcc>
		case 3:
			gyr_scale = 16.4f;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <MPU6050_SelectGyrscopeAccelerometerRatio+0xdc>)
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <MPU6050_SelectGyrscopeAccelerometerRatio+0xec>)
 8001440:	601a      	str	r2, [r3, #0]
			break;
 8001442:	bf00      	nop
		}

}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200005a4 	.word	0x200005a4
 8001450:	20000620 	.word	0x20000620
 8001454:	2000061c 	.word	0x2000061c
 8001458:	43030000 	.word	0x43030000
 800145c:	42830000 	.word	0x42830000
 8001460:	42033333 	.word	0x42033333
 8001464:	41833333 	.word	0x41833333

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x44>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x44>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x44>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x44>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x44>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x44>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f001 ff0c 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fb82 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <ADC1_2_IRQHandler+0x10>)
 8001512:	f000 ff19 	bl	8002348 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004c4 	.word	0x200004c4

08001520 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA2_Channel1_IRQHandler+0x10>)
 8001526:	f001 ff51 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000514 	.word	0x20000514

08001534 <_read>:
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_close>:
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_fstat>:
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_isatty>:
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	2301      	movs	r3, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_lseek>:
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	2300      	movs	r3, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <_sbrk>:
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
 8001608:	f00a fe62 	bl	800c2d0 <__errno>
 800160c:	4602      	mov	r2, r0
 800160e:	230c      	movs	r3, #12
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20010000 	.word	0x20010000
 8001638:	00000400 	.word	0x00000400
 800163c:	200004b8 	.word	0x200004b8
 8001640:	200009c0 	.word	0x200009c0

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <MX_TIM4_Init+0xc4>)
 800168e:	4a28      	ldr	r2, [pc, #160]	; (8001730 <MX_TIM4_Init+0xc8>)
 8001690:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <MX_TIM4_Init+0xc4>)
 8001694:	2247      	movs	r2, #71	; 0x47
 8001696:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <MX_TIM4_Init+0xc4>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_TIM4_Init+0xc4>)
 80016a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_TIM4_Init+0xc4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM4_Init+0xc4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016b2:	481e      	ldr	r0, [pc, #120]	; (800172c <MX_TIM4_Init+0xc4>)
 80016b4:	f004 fbe8 	bl	8005e88 <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80016be:	f7ff fe31 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4816      	ldr	r0, [pc, #88]	; (800172c <MX_TIM4_Init+0xc4>)
 80016d2:	f005 f8e9 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80016dc:	f7ff fe22 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_TIM4_Init+0xc4>)
 80016f8:	f004 fc1e 	bl	8005f38 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001702:	f7ff fe0f 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	2204      	movs	r2, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM4_Init+0xc4>)
 800170e:	f004 fc13 	bl	8005f38 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001718:	f7ff fe04 	bl	8001324 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM4_Init+0xc4>)
 800171e:	f000 f829 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000624 	.word	0x20000624
 8001730:	40000800 	.word	0x40000800

08001734 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_TIM_PWM_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40000800 	.word	0x40000800
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_TIM_MspPostInit+0x68>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_Pin|PWM_MOTOR_2_Pin;
 80017ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80017c0:	230a      	movs	r3, #10
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f001 fedd 	bl	800358c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40021000 	.word	0x40021000

080017e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART2_UART_Init+0x58>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_USART2_UART_Init+0x5c>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART2_UART_Init+0x58>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART2_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USART2_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART2_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART2_UART_Init+0x58>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART2_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART2_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART2_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART2_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USART2_UART_Init+0x58>)
 8001828:	f005 f8ca 	bl	80069c0 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f7ff fd77 	bl	8001324 <Error_Handler>
  }

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200006f4 	.word	0x200006f4
 8001840:	40004400 	.word	0x40004400

08001844 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_USART3_UART_Init+0x58>)
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <MX_USART3_UART_Init+0x5c>)
 800184c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_USART3_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART3_UART_Init+0x58>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART3_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001888:	f005 f89a 	bl	80069c0 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001892:	f7ff fd47 	bl	8001324 <Error_Handler>
  }

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000670 	.word	0x20000670
 80018a0:	40004800 	.word	0x40004800

080018a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_UART_MspInit+0xdc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d129      	bne.n	800191a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a28      	ldr	r2, [pc, #160]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_UART_MspInit+0xe0>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f6:	230c      	movs	r3, #12
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f001 fe3a 	bl	800358c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001918:	e02d      	b.n	8001976 <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_UART_MspInit+0xe4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d128      	bne.n	8001976 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_UART_MspInit+0xe0>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_UART_MspInit+0xe0>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	61d3      	str	r3, [r2, #28]
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_UART_MspInit+0xe0>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0xe0>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_UART_MspInit+0xe0>)
 8001942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001946:	6153      	str	r3, [r2, #20]
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_MspInit+0xe0>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_TX_Pin|STM_RX_Pin;
 8001954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001966:	2307      	movs	r3, #7
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4806      	ldr	r0, [pc, #24]	; (800198c <HAL_UART_MspInit+0xe8>)
 8001972:	f001 fe0b 	bl	800358c <HAL_GPIO_Init>
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40004400 	.word	0x40004400
 8001984:	40021000 	.word	0x40021000
 8001988:	40004800 	.word	0x40004800
 800198c:	48000800 	.word	0x48000800

08001990 <_write>:

/* USER CODE BEGIN 1 */
/*!
 * Redefiniton of function _write to print things on a serial port
 */
int _write(int file, char *ptr, int len){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2332      	movs	r3, #50	; 0x32
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <_write+0x24>)
 80019a6:	f005 f859 	bl	8006a5c <HAL_UART_Transmit>
	return len;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200006f4 	.word	0x200006f4

080019b8 <VL53L0X_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;


void VL53L0X_Init(){
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	af00      	add	r7, sp, #0



	 /* USER CODE BEGIN 2 */

	  MessageLen = sprintf((char*)Message, "VL53L0X test\n\r");
 80019bc:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <VL53L0X_Init+0x144>)
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <VL53L0X_Init+0x148>)
 80019c0:	4614      	mov	r4, r2
 80019c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019c4:	6020      	str	r0, [r4, #0]
 80019c6:	6061      	str	r1, [r4, #4]
 80019c8:	60a2      	str	r2, [r4, #8]
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	789b      	ldrb	r3, [r3, #2]
 80019ce:	81a2      	strh	r2, [r4, #12]
 80019d0:	73a3      	strb	r3, [r4, #14]
 80019d2:	230e      	movs	r3, #14
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <VL53L0X_Init+0x14c>)
 80019d8:	701a      	strb	r2, [r3, #0]

	  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 80019da:	4a48      	ldr	r2, [pc, #288]	; (8001afc <VL53L0X_Init+0x144>)
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <VL53L0X_Init+0x150>)
 80019de:	4615      	mov	r5, r2
 80019e0:	461c      	mov	r4, r3
 80019e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e4:	6028      	str	r0, [r5, #0]
 80019e6:	6069      	str	r1, [r5, #4]
 80019e8:	60aa      	str	r2, [r5, #8]
 80019ea:	60eb      	str	r3, [r5, #12]
 80019ec:	cc03      	ldmia	r4!, {r0, r1}
 80019ee:	6128      	str	r0, [r5, #16]
 80019f0:	6169      	str	r1, [r5, #20]
 80019f2:	8823      	ldrh	r3, [r4, #0]
 80019f4:	78a2      	ldrb	r2, [r4, #2]
 80019f6:	832b      	strh	r3, [r5, #24]
 80019f8:	4613      	mov	r3, r2
 80019fa:	76ab      	strb	r3, [r5, #26]
 80019fc:	231a      	movs	r3, #26
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <VL53L0X_Init+0x14c>)
 8001a02:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <VL53L0X_Init+0x14c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	493b      	ldr	r1, [pc, #236]	; (8001afc <VL53L0X_Init+0x144>)
 8001a0e:	483f      	ldr	r0, [pc, #252]	; (8001b0c <VL53L0X_Init+0x154>)
 8001a10:	f005 f824 	bl	8006a5c <HAL_UART_Transmit>

	  Dev->I2cHandle = &hi2c3;
 8001a14:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <VL53L0X_Init+0x15c>)
 8001a1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev->I2cDevAddr = 0x52;
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2252      	movs	r2, #82	; 0x52
 8001a24:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a2e:	483a      	ldr	r0, [pc, #232]	; (8001b18 <VL53L0X_Init+0x160>)
 8001a30:	f001 ff36 	bl	80038a0 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001a34:	2014      	movs	r0, #20
 8001a36:	f000 f909 	bl	8001c4c <HAL_Delay>
	  HAL_GPIO_WritePin(XSHUT_TOF2_GPIO_Port, XSHUT_TOF2_Pin, GPIO_PIN_SET); // Enable XSHUT
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a40:	4835      	ldr	r0, [pc, #212]	; (8001b18 <VL53L0X_Init+0x160>)
 8001a42:	f001 ff2d 	bl	80038a0 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8001a46:	2014      	movs	r0, #20
 8001a48:	f000 f900 	bl	8001c4c <HAL_Delay>

	  //
	  // VL53L0X init for Single Measurement
	  //

	  VL53L0X_WaitDeviceBooted( Dev );
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f005 ff13 	bl	800787c <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fc28 	bl	80072b0 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fd87 	bl	8007578 <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2b      	ldr	r2, [pc, #172]	; (8001b1c <VL53L0X_Init+0x164>)
 8001a70:	492b      	ldr	r1, [pc, #172]	; (8001b20 <VL53L0X_Init+0x168>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 fc3e 	bl	80082f4 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <VL53L0X_Init+0x16c>)
 8001a7e:	492a      	ldr	r1, [pc, #168]	; (8001b28 <VL53L0X_Init+0x170>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 f8c5 	bl	8008c10 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 ff93 	bl	80079b8 <VL53L0X_SetDeviceMode>


	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <VL53L0X_Init+0x158>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 fa24 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <VL53L0X_Init+0x158>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f006 fa1d 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <VL53L0X_Init+0x158>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f641 1299 	movw	r2, #6553	; 0x1999
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f006 fac5 	bl	8008048 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <VL53L0X_Init+0x158>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 fabd 	bl	8008048 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <VL53L0X_Init+0x158>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 ffe8 	bl	8007aac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <VL53L0X_Init+0x158>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2212      	movs	r2, #18
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f006 f807 	bl	8007af8 <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <VL53L0X_Init+0x158>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	220e      	movs	r2, #14
 8001af0:	2101      	movs	r1, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f006 f800 	bl	8007af8 <VL53L0X_SetVcselPulsePeriod>
	  /* USER CODE END 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	20000798 	.word	0x20000798
 8001b00:	0801072c 	.word	0x0801072c
 8001b04:	20000794 	.word	0x20000794
 8001b08:	0801073c 	.word	0x0801073c
 8001b0c:	200006f4 	.word	0x200006f4
 8001b10:	20000004 	.word	0x20000004
 8001b14:	20000558 	.word	0x20000558
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	200007dc 	.word	0x200007dc
 8001b20:	20000970 	.word	0x20000970
 8001b24:	20000795 	.word	0x20000795
 8001b28:	200007d8 	.word	0x200007d8

08001b2c <Reset_Handler>:
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopForever+0x2>
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <LoopForever+0x6>)
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <LoopForever+0xa>)
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <LoopForever+0xe>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:
 8001b3a:	58d4      	ldr	r4, [r2, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:
 8001b40:	18c4      	adds	r4, r0, r3
 8001b42:	428c      	cmp	r4, r1
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopForever+0x12>)
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <LoopForever+0x16>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:
 8001b52:	42a2      	cmp	r2, r4
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>
 8001b56:	f7ff fd75 	bl	8001644 <SystemInit>
 8001b5a:	f00a fbbf 	bl	800c2dc <__libc_init_array>
 8001b5e:	f7ff fb27 	bl	80011b0 <main>

08001b62 <LoopForever>:
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
 8001b64:	20010000 	.word	0x20010000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	2000049c 	.word	0x2000049c
 8001b70:	08010ad0 	.word	0x08010ad0
 8001b74:	2000049c 	.word	0x2000049c
 8001b78:	200009bc 	.word	0x200009bc

08001b7c <ADC3_IRQHandler>:
 8001b7c:	e7fe      	b.n	8001b7c <ADC3_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x28>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x28>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f001 fb93 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fc64 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fbab 	bl	8003326 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f001 fb73 	bl	80032d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000000c 	.word	0x2000000c
 8001c30:	20000974 	.word	0x20000974

08001c34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000974 	.word	0x20000974

08001c4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_Delay+0x40>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b09a      	sub	sp, #104	; 0x68
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e1e3      	b.n	80020a0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d176      	bne.n	8001dd8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d152      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff f821 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d13b      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 f995 	bl	8003050 <ADC_Disable>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d12f      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
 8001d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d12b      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d48:	f023 0302 	bic.w	r3, r3, #2
 8001d4c:	f043 0202 	orr.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d62:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d72:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d74:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_ADC_Init+0x308>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_ADC_Init+0x30c>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9a      	lsrs	r2, r3, #18
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db4:	d110      	bne.n	8001dd8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f023 0312 	bic.w	r3, r3, #18
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 8150 	bne.w	8002086 <HAL_ADC_Init+0x3ce>
 8001de6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 814b 	bne.w	8002086 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8143 	bne.w	8002086 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e08:	f043 0202 	orr.w	r2, r3, #2
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_Init+0x16c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6a      	ldr	r2, [pc, #424]	; (8001fc8 <HAL_ADC_Init+0x310>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_Init+0x170>
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_ADC_Init+0x314>)
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_Init+0x172>
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <HAL_ADC_Init+0x318>)
 8001e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e34:	d102      	bne.n	8001e3c <HAL_ADC_Init+0x184>
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_ADC_Init+0x310>)
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e01a      	b.n	8001e72 <HAL_ADC_Init+0x1ba>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a61      	ldr	r2, [pc, #388]	; (8001fc8 <HAL_ADC_Init+0x310>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d103      	bne.n	8001e4e <HAL_ADC_Init+0x196>
 8001e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e011      	b.n	8001e72 <HAL_ADC_Init+0x1ba>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_ADC_Init+0x31c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_ADC_Init+0x1a6>
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_ADC_Init+0x320>)
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e009      	b.n	8001e72 <HAL_ADC_Init+0x1ba>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <HAL_ADC_Init+0x320>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d102      	bne.n	8001e6e <HAL_ADC_Init+0x1b6>
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_ADC_Init+0x31c>)
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e001      	b.n	8001e72 <HAL_ADC_Init+0x1ba>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_ADC_Init+0x1da>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x1da>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_Init+0x1dc>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11c      	bne.n	8001ed2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_ADC_Init+0x202>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Init+0x202>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_Init+0x204>
 8001eba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d108      	bne.n	8001ed2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
 8001ed6:	035b      	lsls	r3, r3, #13
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001edc:	2a01      	cmp	r2, #1
 8001ede:	d002      	beq.n	8001ee6 <HAL_ADC_Init+0x22e>
 8001ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_Init+0x230>
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d11b      	bne.n	8001f3e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7e5b      	ldrb	r3, [r3, #25]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	3b01      	subs	r3, #1
 8001f14:	045a      	lsls	r2, r3, #17
 8001f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f20:	e00d      	b.n	8001f3e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d054      	beq.n	8001ff0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_ADC_Init+0x31c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_Init+0x2a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_ADC_Init+0x320>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d140      	bne.n	8001fdc <HAL_ADC_Init+0x324>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001f62:	d02a      	beq.n	8001fba <HAL_ADC_Init+0x302>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6c:	d022      	beq.n	8001fb4 <HAL_ADC_Init+0x2fc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001f76:	d01a      	beq.n	8001fae <HAL_ADC_Init+0x2f6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001f80:	d012      	beq.n	8001fa8 <HAL_ADC_Init+0x2f0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_ADC_Init+0x2ea>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001f94:	d002      	beq.n	8001f9c <HAL_ADC_Init+0x2e4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	e023      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001f9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fa0:	e020      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fa2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fa6:	e01d      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fa8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fac:	e01a      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	e017      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fb4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001fb8:	e014      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001fbe:	e011      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	50000100 	.word	0x50000100
 8001fcc:	50000300 	.word	0x50000300
 8001fd0:	50000700 	.word	0x50000700
 8001fd4:	50000400 	.word	0x50000400
 8001fd8:	50000500 	.word	0x50000500
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fec:	4313      	orrs	r3, r2
 8001fee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d114      	bne.n	8002028 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200c:	f023 0302 	bic.w	r3, r3, #2
 8002010:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7e1b      	ldrb	r3, [r3, #24]
 8002016:	039a      	lsls	r2, r3, #14
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4313      	orrs	r3, r2
 8002022:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002024:	4313      	orrs	r3, r2
 8002026:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_ADC_Init+0x3f0>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002038:	430b      	orrs	r3, r1
 800203a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f023 010f 	bic.w	r1, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
 800205c:	e007      	b.n	800206e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020f 	bic.w	r2, r2, #15
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f023 0303 	bic.w	r3, r3, #3
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
 8002084:	e00a      	b.n	800209c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f023 0312 	bic.w	r3, r3, #18
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002096:	2301      	movs	r3, #1
 8002098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800209c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3768      	adds	r7, #104	; 0x68
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	fff0c007 	.word	0xfff0c007

080020ac <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8123 	bne.w	800230e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Start_IT+0x2a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e11e      	b.n	8002314 <HAL_ADC_Start_IT+0x268>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 ff52 	bl	8002f88 <ADC_Enable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 810a 	bne.w	8002304 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210c:	d004      	beq.n	8002118 <HAL_ADC_Start_IT+0x6c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a82      	ldr	r2, [pc, #520]	; (800231c <HAL_ADC_Start_IT+0x270>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d106      	bne.n	8002126 <HAL_ADC_Start_IT+0x7a>
 8002118:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_ADC_Start_IT+0x274>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_ADC_Start_IT+0x9a>
 8002124:	e005      	b.n	8002132 <HAL_ADC_Start_IT+0x86>
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_ADC_Start_IT+0x278>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_ADC_Start_IT+0x9a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213a:	d004      	beq.n	8002146 <HAL_ADC_Start_IT+0x9a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a79      	ldr	r2, [pc, #484]	; (8002328 <HAL_ADC_Start_IT+0x27c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d115      	bne.n	8002172 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d036      	beq.n	80021ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002168:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002170:	e02d      	b.n	80021ce <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002186:	d004      	beq.n	8002192 <HAL_ADC_Start_IT+0xe6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a63      	ldr	r2, [pc, #396]	; (800231c <HAL_ADC_Start_IT+0x270>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_Start_IT+0xfc>
 8002192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e008      	b.n	80021ba <HAL_ADC_Start_IT+0x10e>
 80021a8:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_ADC_Start_IT+0x27c>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021da:	d106      	bne.n	80021ea <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f023 0206 	bic.w	r2, r3, #6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	221c      	movs	r2, #28
 80021fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d110      	bne.n	800222a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	605a      	str	r2, [r3, #4]
          break;
 8002228:	e008      	b.n	800223c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 020c 	orr.w	r2, r2, #12
 8002238:	605a      	str	r2, [r3, #4]
          break;
 800223a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0210 	bic.w	r2, r2, #16
 8002252:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800225c:	d004      	beq.n	8002268 <HAL_ADC_Start_IT+0x1bc>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_ADC_Start_IT+0x270>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d106      	bne.n	8002276 <HAL_ADC_Start_IT+0x1ca>
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_ADC_Start_IT+0x274>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03e      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 8002274:	e005      	b.n	8002282 <HAL_ADC_Start_IT+0x1d6>
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_ADC_Start_IT+0x278>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b00      	cmp	r3, #0
 8002280:	d037      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228a:	d004      	beq.n	8002296 <HAL_ADC_Start_IT+0x1ea>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_ADC_Start_IT+0x270>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d106      	bne.n	80022a4 <HAL_ADC_Start_IT+0x1f8>
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_ADC_Start_IT+0x274>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d027      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 80022a2:	e005      	b.n	80022b0 <HAL_ADC_Start_IT+0x204>
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_ADC_Start_IT+0x278>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d020      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_Start_IT+0x218>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_ADC_Start_IT+0x270>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start_IT+0x226>
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_ADC_Start_IT+0x274>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d010      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 80022d0:	e005      	b.n	80022de <HAL_ADC_Start_IT+0x232>
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_ADC_Start_IT+0x278>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d009      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e6:	d004      	beq.n	80022f2 <HAL_ADC_Start_IT+0x246>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_ADC_Start_IT+0x27c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10f      	bne.n	8002312 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0204 	orr.w	r2, r2, #4
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	e006      	b.n	8002312 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800230c:	e001      	b.n	8002312 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	50000100 	.word	0x50000100
 8002320:	50000300 	.word	0x50000300
 8002324:	50000700 	.word	0x50000700
 8002328:	50000400 	.word	0x50000400

0800232c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d106      	bne.n	8002378 <HAL_ADC_IRQHandler+0x30>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00f      	beq.n	8002398 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002382:	2b08      	cmp	r3, #8
 8002384:	f040 80c0 	bne.w	8002508 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	f040 80b8 	bne.w	8002508 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x7c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a95      	ldr	r2, [pc, #596]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d106      	bne.n	80023d2 <HAL_ADC_IRQHandler+0x8a>
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03e      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 80023d0:	e005      	b.n	80023de <HAL_ADC_IRQHandler+0x96>
 80023d2:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d037      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_IRQHandler+0xaa>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a89      	ldr	r2, [pc, #548]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_IRQHandler+0xb8>
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d027      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 80023fe:	e005      	b.n	800240c <HAL_ADC_IRQHandler+0xc4>
 8002400:	4b86      	ldr	r3, [pc, #536]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2b05      	cmp	r3, #5
 800240a:	d020      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002414:	d004      	beq.n	8002420 <HAL_ADC_IRQHandler+0xd8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7e      	ldr	r2, [pc, #504]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d106      	bne.n	800242e <HAL_ADC_IRQHandler+0xe6>
 8002420:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b09      	cmp	r3, #9
 800242a:	d010      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 800242c:	e005      	b.n	800243a <HAL_ADC_IRQHandler+0xf2>
 800242e:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	d009      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_IRQHandler+0x106>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_ADC_IRQHandler+0x2d8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d104      	bne.n	8002458 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e00f      	b.n	8002478 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002460:	d004      	beq.n	800246c <HAL_ADC_IRQHandler+0x124>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d102      	bne.n	8002472 <HAL_ADC_IRQHandler+0x12a>
 800246c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002470:	e000      	b.n	8002474 <HAL_ADC_IRQHandler+0x12c>
 8002472:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <HAL_ADC_IRQHandler+0x2d8>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002482:	2b00      	cmp	r3, #0
 8002484:	d139      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800248c:	2b00      	cmp	r3, #0
 800248e:	d134      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	d12d      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020c 	bic.w	r2, r2, #12
 80024ba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
 80024e0:	e00b      	b.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe ff00 	bl	8001300 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	220c      	movs	r2, #12
 8002506:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d106      	bne.n	8002524 <HAL_ADC_IRQHandler+0x1dc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d00f      	beq.n	8002544 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	f040 813c 	bne.w	80027ac <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	f040 8134 	bne.w	80027ac <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002558:	d004      	beq.n	8002564 <HAL_ADC_IRQHandler+0x21c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d106      	bne.n	8002572 <HAL_ADC_IRQHandler+0x22a>
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03e      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 8002570:	e005      	b.n	800257e <HAL_ADC_IRQHandler+0x236>
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2b00      	cmp	r3, #0
 800257c:	d037      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002586:	d004      	beq.n	8002592 <HAL_ADC_IRQHandler+0x24a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x258>
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b05      	cmp	r3, #5
 800259c:	d027      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 800259e:	e005      	b.n	80025ac <HAL_ADC_IRQHandler+0x264>
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d020      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b4:	d004      	beq.n	80025c0 <HAL_ADC_IRQHandler+0x278>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d106      	bne.n	80025ce <HAL_ADC_IRQHandler+0x286>
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_ADC_IRQHandler+0x2d0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d010      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 80025cc:	e005      	b.n	80025da <HAL_ADC_IRQHandler+0x292>
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_ADC_IRQHandler+0x2d4>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d009      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_IRQHandler+0x2a6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_ADC_IRQHandler+0x2d8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d104      	bne.n	80025f8 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e018      	b.n	800262a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002600:	d004      	beq.n	800260c <HAL_ADC_IRQHandler+0x2c4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <HAL_ADC_IRQHandler+0x2cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_IRQHandler+0x2dc>
 800260c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002610:	e009      	b.n	8002626 <HAL_ADC_IRQHandler+0x2de>
 8002612:	bf00      	nop
 8002614:	50000100 	.word	0x50000100
 8002618:	50000300 	.word	0x50000300
 800261c:	50000700 	.word	0x50000700
 8002620:	50000400 	.word	0x50000400
 8002624:	4b9d      	ldr	r3, [pc, #628]	; (800289c <HAL_ADC_IRQHandler+0x554>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 80b2 	bne.w	800279e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80a5 	bne.w	800279e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 809f 	bne.w	800279e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	f040 8097 	bne.w	800279e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002678:	d004      	beq.n	8002684 <HAL_ADC_IRQHandler+0x33c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a88      	ldr	r2, [pc, #544]	; (80028a0 <HAL_ADC_IRQHandler+0x558>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <HAL_ADC_IRQHandler+0x34a>
 8002684:	4b87      	ldr	r3, [pc, #540]	; (80028a4 <HAL_ADC_IRQHandler+0x55c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03e      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 8002690:	e005      	b.n	800269e <HAL_ADC_IRQHandler+0x356>
 8002692:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_ADC_IRQHandler+0x560>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2b00      	cmp	r3, #0
 800269c:	d037      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x36a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_ADC_IRQHandler+0x558>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x378>
 80026b2:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_ADC_IRQHandler+0x55c>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d027      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 80026be:	e005      	b.n	80026cc <HAL_ADC_IRQHandler+0x384>
 80026c0:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <HAL_ADC_IRQHandler+0x560>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d020      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x398>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a71      	ldr	r2, [pc, #452]	; (80028a0 <HAL_ADC_IRQHandler+0x558>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d106      	bne.n	80026ee <HAL_ADC_IRQHandler+0x3a6>
 80026e0:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_ADC_IRQHandler+0x55c>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	d010      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 80026ec:	e005      	b.n	80026fa <HAL_ADC_IRQHandler+0x3b2>
 80026ee:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <HAL_ADC_IRQHandler+0x560>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b07      	cmp	r3, #7
 80026f8:	d009      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d004      	beq.n	800270e <HAL_ADC_IRQHandler+0x3c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a64      	ldr	r2, [pc, #400]	; (800289c <HAL_ADC_IRQHandler+0x554>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d104      	bne.n	8002718 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e00f      	b.n	8002738 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADC_IRQHandler+0x3e4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <HAL_ADC_IRQHandler+0x558>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_ADC_IRQHandler+0x3ea>
 800272c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002730:	e000      	b.n	8002734 <HAL_ADC_IRQHandler+0x3ec>
 8002732:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_ADC_IRQHandler+0x554>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d12d      	bne.n	800279e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11a      	bne.n	8002786 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800275e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d112      	bne.n	800279e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
 8002784:	e00b      	b.n	800279e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8de 	bl	8002960 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2260      	movs	r2, #96	; 0x60
 80027aa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d113      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x49a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d10c      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fa5b 	bl	8001c90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f0:	d115      	bne.n	800281e <HAL_ADC_IRQHandler+0x4d6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002800:	d10d      	bne.n	800281e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8ba 	bl	8002988 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d115      	bne.n	800285a <HAL_ADC_IRQHandler+0x512>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d10d      	bne.n	800285a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8a6 	bl	800299c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002858:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b10      	cmp	r3, #16
 8002866:	d151      	bne.n	800290c <HAL_ADC_IRQHandler+0x5c4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	d14a      	bne.n	800290c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800287e:	2301      	movs	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e02d      	b.n	80028e0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800288c:	d004      	beq.n	8002898 <HAL_ADC_IRQHandler+0x550>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <HAL_ADC_IRQHandler+0x558>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d109      	bne.n	80028ac <HAL_ADC_IRQHandler+0x564>
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <HAL_ADC_IRQHandler+0x55c>)
 800289a:	e008      	b.n	80028ae <HAL_ADC_IRQHandler+0x566>
 800289c:	50000400 	.word	0x50000400
 80028a0:	50000100 	.word	0x50000100
 80028a4:	50000300 	.word	0x50000300
 80028a8:	50000700 	.word	0x50000700
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_ADC_IRQHandler+0x614>)
 80028ae:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10a      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80028ca:	2301      	movs	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e007      	b.n	80028e0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10e      	bne.n	8002904 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f9d0 	bl	8001ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2210      	movs	r2, #16
 800290a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d11b      	bne.n	8002954 <HAL_ADC_IRQHandler+0x60c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d113      	bne.n	8002954 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f043 0208 	orr.w	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f810 	bl	8002974 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	50000700 	.word	0x50000700

08002960 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b09b      	sub	sp, #108	; 0x6c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x22>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e2cb      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x5ba>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 82af 	bne.w	8002f48 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d81c      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	461a      	mov	r2, r3
 8002a06:	231f      	movs	r3, #31
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4019      	ands	r1, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e063      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d81e      	bhi.n	8002a72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	3b1e      	subs	r3, #30
 8002a48:	221f      	movs	r2, #31
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4019      	ands	r1, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a70:	e040      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b0e      	cmp	r3, #14
 8002a78:	d81e      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	3b3c      	subs	r3, #60	; 0x3c
 8002a8e:	221f      	movs	r2, #31
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4019      	ands	r1, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	3b3c      	subs	r3, #60	; 0x3c
 8002aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab6:	e01d      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	3b5a      	subs	r3, #90	; 0x5a
 8002acc:	221f      	movs	r2, #31
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4019      	ands	r1, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	3b5a      	subs	r3, #90	; 0x5a
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 80e5 	bne.w	8002cce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d91c      	bls.n	8002b46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b1e      	subs	r3, #30
 8002b1e:	2207      	movs	r2, #7
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4019      	ands	r1, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6898      	ldr	r0, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	3b1e      	subs	r3, #30
 8002b38:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	619a      	str	r2, [r3, #24]
 8002b44:	e019      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6959      	ldr	r1, [r3, #20]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	2207      	movs	r2, #7
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	4019      	ands	r1, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6898      	ldr	r0, [r3, #8]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d84f      	bhi.n	8002c3c <HAL_ADC_ConfigChannel+0x28c>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bd7 	.word	0x08002bd7
 8002bac:	08002bf9 	.word	0x08002bf9
 8002bb0:	08002c1b 	.word	0x08002c1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bba:	4b9f      	ldr	r3, [pc, #636]	; (8002e38 <HAL_ADC_ConfigChannel+0x488>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	0691      	lsls	r1, r2, #26
 8002bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bd4:	e07e      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bdc:	4b96      	ldr	r3, [pc, #600]	; (8002e38 <HAL_ADC_ConfigChannel+0x488>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	0691      	lsls	r1, r2, #26
 8002be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be8:	430a      	orrs	r2, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bf4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bf6:	e06d      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bfe:	4b8e      	ldr	r3, [pc, #568]	; (8002e38 <HAL_ADC_ConfigChannel+0x488>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	0691      	lsls	r1, r2, #26
 8002c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c18:	e05c      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c20:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_ADC_ConfigChannel+0x488>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	0691      	lsls	r1, r2, #26
 8002c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c3a:	e04b      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	069b      	lsls	r3, r3, #26
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	069b      	lsls	r3, r3, #26
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ca6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10a      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ccc:	e001      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002cd2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x344>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x344>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x346>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 8131 	bne.w	8002f5e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d00f      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002d22:	e049      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	409a      	lsls	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d91c      	bls.n	8002d80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6999      	ldr	r1, [r3, #24]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	3b1b      	subs	r3, #27
 8002d58:	2207      	movs	r2, #7
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4019      	ands	r1, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6898      	ldr	r0, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b1b      	subs	r3, #27
 8002d72:	fa00 f203 	lsl.w	r2, r0, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	e01b      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6959      	ldr	r1, [r3, #20]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	fa00 f203 	lsl.w	r2, r0, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x41c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_ADC_ConfigChannel+0x48c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x420>
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_ADC_ConfigChannel+0x490>)
 8002dce:	e000      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x422>
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_ADC_ConfigChannel+0x494>)
 8002dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002dec:	2b11      	cmp	r3, #17
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	f040 80ac 	bne.w	8002f5e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 80a5 	bne.w	8002f5e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d102      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x474>
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_ADC_ConfigChannel+0x48c>)
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e023      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x4bc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_ADC_ConfigChannel+0x48c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x498>
 8002e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e01a      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x4bc>
 8002e36:	bf00      	nop
 8002e38:	83fff000 	.word	0x83fff000
 8002e3c:	50000100 	.word	0x50000100
 8002e40:	50000300 	.word	0x50000300
 8002e44:	50000700 	.word	0x50000700
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d102      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x4a8>
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_ADC_ConfigChannel+0x5cc>)
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e009      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x4bc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a47      	ldr	r2, [pc, #284]	; (8002f7c <HAL_ADC_ConfigChannel+0x5cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d102      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x4b8>
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e001      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x4bc>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x4dc>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x4dc>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x4de>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d150      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x504>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x504>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x506>
 8002eb4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d13c      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d11d      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x54e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eca:	d118      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_ADC_ConfigChannel+0x5d0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9a      	lsrs	r2, r3, #18
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002efc:	e02e      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b11      	cmp	r3, #17
 8002f04:	d10b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x56e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0e:	d106      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f1c:	e01e      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d11a      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f30:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f32:	e013      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f46:	e00a      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f5a:	e000      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f5c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	376c      	adds	r7, #108	; 0x6c
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000500 	.word	0x50000500
 8002f80:	20000000 	.word	0x20000000
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <ADC_Enable+0x2c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <ADC_Enable+0x2c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <ADC_Enable+0x2e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d143      	bne.n	8003042 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <ADC_Enable+0xc4>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e02f      	b.n	8003044 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ff4:	f7fe fe1e 	bl	8001c34 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ffa:	e01b      	b.n	8003034 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ffc:	f7fe fe1a 	bl	8001c34 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d914      	bls.n	8003034 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d00d      	beq.n	8003034 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d1dc      	bne.n	8002ffc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	8000003f 	.word	0x8000003f

08003050 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <ADC_Disable+0x2c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <ADC_Disable+0x2c>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <ADC_Disable+0x2e>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d047      	beq.n	8003112 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030d 	and.w	r3, r3, #13
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10f      	bne.n	80030b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0202 	orr.w	r2, r2, #2
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2203      	movs	r2, #3
 80030a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fdc4 	bl	8001c34 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030ae:	e029      	b.n	8003104 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e023      	b.n	8003114 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030cc:	f7fe fdb2 	bl	8001c34 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d914      	bls.n	8003104 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d0dc      	beq.n	80030cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	; (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f7ff ff8e 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff29 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff3e 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff8e 	bl	8003210 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5d 	bl	80031bc <__NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff31 	bl	8003180 <__NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffa2 	bl	8003278 <SysTick_Config>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e037      	b.n	80033c4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800336a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800336e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8b4 	bl	8003514 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}  
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d024      	beq.n	800343e <HAL_DMA_IRQHandler+0x72>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01f      	beq.n	800343e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2104      	movs	r1, #4
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d06a      	beq.n	800350a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800343c:	e065      	b.n	800350a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2202      	movs	r2, #2
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xdc>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d027      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020a 	bic.w	r2, r2, #10
 8003474:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2102      	movs	r1, #2
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d035      	beq.n	800350a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80034a6:	e030      	b.n	800350a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2208      	movs	r2, #8
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d028      	beq.n	800350a <HAL_DMA_IRQHandler+0x13e>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d023      	beq.n	800350a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 020e 	bic.w	r2, r2, #14
 80034d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
    }
  }
}  
 8003508:	e7ff      	b.n	800350a <HAL_DMA_IRQHandler+0x13e>
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <DMA_CalcBaseAndBitshift+0x60>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d80f      	bhi.n	8003548 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <DMA_CalcBaseAndBitshift+0x64>)
 8003530:	4413      	add	r3, r2
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <DMA_CalcBaseAndBitshift+0x68>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <DMA_CalcBaseAndBitshift+0x6c>)
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003546:	e00e      	b.n	8003566 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <DMA_CalcBaseAndBitshift+0x70>)
 8003550:	4413      	add	r3, r2
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <DMA_CalcBaseAndBitshift+0x68>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <DMA_CalcBaseAndBitshift+0x74>)
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40020407 	.word	0x40020407
 8003578:	bffdfff8 	.word	0xbffdfff8
 800357c:	cccccccd 	.word	0xcccccccd
 8003580:	40020000 	.word	0x40020000
 8003584:	bffdfbf8 	.word	0xbffdfbf8
 8003588:	40020400 	.word	0x40020400

0800358c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359a:	e160      	b.n	800385e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8152 	beq.w	8003858 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d005      	beq.n	80035cc <HAL_GPIO_Init+0x40>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d130      	bne.n	800362e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003602:	2201      	movs	r2, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0201 	and.w	r2, r3, #1
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b03      	cmp	r3, #3
 8003638:	d017      	beq.n	800366a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d123      	bne.n	80036be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	08da      	lsrs	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3208      	adds	r2, #8
 800367e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003682:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	08da      	lsrs	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3208      	adds	r2, #8
 80036b8:	6939      	ldr	r1, [r7, #16]
 80036ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80ac 	beq.w	8003858 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003700:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_GPIO_Init+0x2f0>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_GPIO_Init+0x2f0>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b5b      	ldr	r3, [pc, #364]	; (800387c <HAL_GPIO_Init+0x2f0>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003718:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_GPIO_Init+0x2f4>)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003742:	d025      	beq.n	8003790 <HAL_GPIO_Init+0x204>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_GPIO_Init+0x2f8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01f      	beq.n	800378c <HAL_GPIO_Init+0x200>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_GPIO_Init+0x2fc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d019      	beq.n	8003788 <HAL_GPIO_Init+0x1fc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_GPIO_Init+0x300>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_GPIO_Init+0x1f8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_GPIO_Init+0x304>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00d      	beq.n	8003780 <HAL_GPIO_Init+0x1f4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_GPIO_Init+0x308>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x1f0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_GPIO_Init+0x30c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_GPIO_Init+0x1ec>
 8003774:	2306      	movs	r3, #6
 8003776:	e00c      	b.n	8003792 <HAL_GPIO_Init+0x206>
 8003778:	2307      	movs	r3, #7
 800377a:	e00a      	b.n	8003792 <HAL_GPIO_Init+0x206>
 800377c:	2305      	movs	r3, #5
 800377e:	e008      	b.n	8003792 <HAL_GPIO_Init+0x206>
 8003780:	2304      	movs	r3, #4
 8003782:	e006      	b.n	8003792 <HAL_GPIO_Init+0x206>
 8003784:	2303      	movs	r3, #3
 8003786:	e004      	b.n	8003792 <HAL_GPIO_Init+0x206>
 8003788:	2302      	movs	r3, #2
 800378a:	e002      	b.n	8003792 <HAL_GPIO_Init+0x206>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_GPIO_Init+0x206>
 8003790:	2300      	movs	r3, #0
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037a2:	4937      	ldr	r1, [pc, #220]	; (8003880 <HAL_GPIO_Init+0x2f4>)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b0:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_GPIO_Init+0x310>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037d4:	4a31      	ldr	r2, [pc, #196]	; (800389c <HAL_GPIO_Init+0x310>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037da:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_GPIO_Init+0x310>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037fe:	4a27      	ldr	r2, [pc, #156]	; (800389c <HAL_GPIO_Init+0x310>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_GPIO_Init+0x310>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <HAL_GPIO_Init+0x310>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_GPIO_Init+0x310>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <HAL_GPIO_Init+0x310>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3301      	adds	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	f47f ae97 	bne.w	800359c <HAL_GPIO_Init+0x10>
  }
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40010000 	.word	0x40010000
 8003884:	48000400 	.word	0x48000400
 8003888:	48000800 	.word	0x48000800
 800388c:	48000c00 	.word	0x48000c00
 8003890:	48001000 	.word	0x48001000
 8003894:	48001400 	.word	0x48001400
 8003898:	48001800 	.word	0x48001800
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e081      	b.n	80039e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd fbc6 	bl	8001088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003920:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003930:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e006      	b.n	8003958 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003956:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d104      	bne.n	800396a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	461a      	mov	r2, r3
 80039fc:	460b      	mov	r3, r1
 80039fe:	817b      	strh	r3, [r7, #10]
 8003a00:	4613      	mov	r3, r2
 8003a02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 80da 	bne.w	8003bc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x30>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e0d3      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a28:	f7fe f904 	bl	8001c34 <HAL_GetTick>
 8003a2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2319      	movs	r3, #25
 8003a34:	2201      	movs	r2, #1
 8003a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fc56 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0be      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2210      	movs	r2, #16
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	893a      	ldrh	r2, [r7, #8]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2bff      	cmp	r3, #255	; 0xff
 8003a7a:	d90e      	bls.n	8003a9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	8979      	ldrh	r1, [r7, #10]
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fdc8 	bl	8004628 <I2C_TransferConfig>
 8003a98:	e06c      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	8979      	ldrh	r1, [r7, #10]
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fdb7 	bl	8004628 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003aba:	e05b      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	6a39      	ldr	r1, [r7, #32]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fc53 	bl	800436c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e07b      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d034      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x184>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d130      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fbe5 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e04d      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d90e      	bls.n	8003b54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	8979      	ldrh	r1, [r7, #10]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fd6b 	bl	8004628 <I2C_TransferConfig>
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fd5a 	bl	8004628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d19e      	bne.n	8003abc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	6a39      	ldr	r1, [r7, #32]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fc32 	bl	80043ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e01a      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2220      	movs	r2, #32
 8003b98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	80002000 	.word	0x80002000
 8003bd4:	fe00e800 	.word	0xfe00e800

08003bd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	461a      	mov	r2, r3
 8003be4:	460b      	mov	r3, r1
 8003be6:	817b      	strh	r3, [r7, #10]
 8003be8:	4613      	mov	r3, r2
 8003bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	f040 80db 	bne.w	8003db0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2C_Master_Receive+0x30>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0d4      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe f810 	bl	8001c34 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb62 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0bf      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2222      	movs	r2, #34	; 0x22
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	893a      	ldrh	r2, [r7, #8]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2bff      	cmp	r3, #255	; 0xff
 8003c62:	d90e      	bls.n	8003c82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <HAL_I2C_Master_Receive+0x1e4>)
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fcd4 	bl	8004628 <I2C_TransferConfig>
 8003c80:	e06d      	b.n	8003d5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	8979      	ldrh	r1, [r7, #10]
 8003c94:	4b49      	ldr	r3, [pc, #292]	; (8003dbc <HAL_I2C_Master_Receive+0x1e4>)
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fcc3 	bl	8004628 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ca2:	e05c      	b.n	8003d5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6a39      	ldr	r1, [r7, #32]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fbdb 	bl	8004464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e07c      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d034      	beq.n	8003d5e <HAL_I2C_Master_Receive+0x186>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d130      	bne.n	8003d5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 faf0 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e04d      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2bff      	cmp	r3, #255	; 0xff
 8003d1e:	d90e      	bls.n	8003d3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	8979      	ldrh	r1, [r7, #10]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fc76 	bl	8004628 <I2C_TransferConfig>
 8003d3c:	e00f      	b.n	8003d5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	8979      	ldrh	r1, [r7, #10]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fc65 	bl	8004628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d19d      	bne.n	8003ca4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	6a39      	ldr	r1, [r7, #32]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fb3d 	bl	80043ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e01a      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2220      	movs	r2, #32
 8003d82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_I2C_Master_Receive+0x1e8>)
 8003d90:	400b      	ands	r3, r1
 8003d92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	80002400 	.word	0x80002400
 8003dc0:	fe00e800 	.word	0xfe00e800

08003dc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	813b      	strh	r3, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	f040 80f9 	bne.w	8003fde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x34>
 8003df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0ed      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Mem_Write+0x4e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e0e6      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e1a:	f7fd ff0b 	bl	8001c34 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2319      	movs	r3, #25
 8003e26:	2201      	movs	r2, #1
 8003e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fa5d 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0d1      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2221      	movs	r2, #33	; 0x21
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e64:	88f8      	ldrh	r0, [r7, #6]
 8003e66:	893a      	ldrh	r2, [r7, #8]
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4603      	mov	r3, r0
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9c1 	bl	80041fc <I2C_RequestMemoryWrite>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a9      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2bff      	cmp	r3, #255	; 0xff
 8003e94:	d90e      	bls.n	8003eb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	8979      	ldrh	r1, [r7, #10]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fbbb 	bl	8004628 <I2C_TransferConfig>
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fbaa 	bl	8004628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fa47 	bl	800436c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e07b      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d034      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d130      	bne.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f9d9 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e04d      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d90e      	bls.n	8003f6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	8979      	ldrh	r1, [r7, #10]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fb5f 	bl	8004628 <I2C_TransferConfig>
 8003f6a:	e00f      	b.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	8979      	ldrh	r1, [r7, #10]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fb4e 	bl	8004628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d19e      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fa26 	bl	80043ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e01a      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_I2C_Mem_Write+0x224>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	fe00e800 	.word	0xfe00e800

08003fec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	f040 80f1 	bne.w	80041f0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	d101      	bne.n	8004022 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	e0e7      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_I2C_IsDeviceReady+0x44>
 800402c:	2302      	movs	r3, #2
 800402e:	e0e0      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_I2C_IsDeviceReady+0x72>
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800405c:	e004      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x7c>
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004064:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800406e:	f7fd fde1 	bl	8001c34 <HAL_GetTick>
 8004072:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b20      	cmp	r3, #32
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040a0:	e034      	b.n	800410c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d01a      	beq.n	80040e0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040aa:	f7fd fdc3 	bl	8001c34 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d302      	bcc.n	80040c0 <HAL_I2C_IsDeviceReady+0xd4>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e088      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_I2C_IsDeviceReady+0x12c>
 8004112:	7fbb      	ldrb	r3, [r7, #30]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0c4      	beq.n	80040a2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d01a      	beq.n	800415c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	2120      	movs	r1, #32
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f8db 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e058      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2220      	movs	r2, #32
 8004146:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e04a      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	2120      	movs	r1, #32
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f8c0 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e03d      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2220      	movs	r2, #32
 8004184:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d118      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2120      	movs	r1, #32
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f89f 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e01c      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2220      	movs	r2, #32
 80041be:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f63f af3b 	bhi.w	8004046 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	8979      	ldrh	r1, [r7, #10]
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <I2C_RequestMemoryWrite+0xa4>)
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f9ff 	bl	8004628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f89c 	bl	800436c <I2C_WaitOnTXISFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e02c      	b.n	8004298 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	629a      	str	r2, [r3, #40]	; 0x28
 800424e:	e015      	b.n	800427c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f882 	bl	800436c <I2C_WaitOnTXISFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e012      	b.n	8004298 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004272:	893b      	ldrh	r3, [r7, #8]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2200      	movs	r2, #0
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f830 	bl	80042ec <I2C_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	80002000 	.word	0x80002000

080042a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d103      	bne.n	80042c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d007      	beq.n	80042e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	619a      	str	r2, [r3, #24]
  }
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fc:	e022      	b.n	8004344 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d01e      	beq.n	8004344 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fd fc95 	bl	8001c34 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d113      	bne.n	8004344 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e00f      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4013      	ands	r3, r2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	429a      	cmp	r2, r3
 8004360:	d0cd      	beq.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004378:	e02c      	b.n	80043d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8dc 	bl	800453c <I2C_IsAcknowledgeFailed>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02a      	b.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d01e      	beq.n	80043d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fd fc4d 	bl	8001c34 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e007      	b.n	80043e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d1cb      	bne.n	800437a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f8:	e028      	b.n	800444c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f89c 	bl	800453c <I2C_IsAcknowledgeFailed>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e026      	b.n	800445c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fd fc11 	bl	8001c34 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d113      	bne.n	800444c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e007      	b.n	800445c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d1cf      	bne.n	80043fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004470:	e055      	b.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f860 	bl	800453c <I2C_IsAcknowledgeFailed>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e053      	b.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d129      	bne.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d105      	bne.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e03f      	b.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2220      	movs	r2, #32
 80044b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80044c2:	400b      	ands	r3, r1
 80044c4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e022      	b.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fd fba4 	bl	8001c34 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d1a2      	bne.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	fe00e800 	.word	0xfe00e800

0800453c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b10      	cmp	r3, #16
 8004554:	d161      	bne.n	800461a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004564:	d02b      	beq.n	80045be <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004576:	e022      	b.n	80045be <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d01e      	beq.n	80045be <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fd fb58 	bl	8001c34 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_IsAcknowledgeFailed+0x5a>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d113      	bne.n	80045be <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02e      	b.n	800461c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d1d5      	bne.n	8004578 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2220      	movs	r2, #32
 80045da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fe61 	bl	80042a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <I2C_IsAcknowledgeFailed+0xe8>)
 80045ee:	400b      	ands	r3, r1
 80045f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	fe00e800 	.word	0xfe00e800

08004628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	4613      	mov	r3, r2
 8004638:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	0d5b      	lsrs	r3, r3, #21
 8004644:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <I2C_TransferConfig+0x58>)
 800464a:	430b      	orrs	r3, r1
 800464c:	43db      	mvns	r3, r3
 800464e:	ea02 0103 	and.w	r1, r2, r3
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004658:	7a7b      	ldrb	r3, [r7, #9]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	431a      	orrs	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	03ff63ff 	.word	0x03ff63ff

08004684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	d138      	bne.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e032      	b.n	800470e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b20      	cmp	r3, #32
 800472e:	d139      	bne.n	80047a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800473a:	2302      	movs	r3, #2
 800473c:	e033      	b.n	80047a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800476c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f000 bf01 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8160 	beq.w	8004a9e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047de:	4bae      	ldr	r3, [pc, #696]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d00c      	beq.n	8004804 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ea:	4bab      	ldr	r3, [pc, #684]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d159      	bne.n	80048aa <HAL_RCC_OscConfig+0xf6>
 80047f6:	4ba8      	ldr	r3, [pc, #672]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d152      	bne.n	80048aa <HAL_RCC_OscConfig+0xf6>
 8004804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004808:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004818:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d102      	bne.n	8004836 <HAL_RCC_OscConfig+0x82>
 8004830:	4b99      	ldr	r3, [pc, #612]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	e015      	b.n	8004862 <HAL_RCC_OscConfig+0xae>
 8004836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800484a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004852:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800485e:	4b8e      	ldr	r3, [pc, #568]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004866:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800486a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800486e:	fa92 f2a2 	rbit	r2, r2
 8004872:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004876:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800487a:	fab2 f282 	clz	r2, r2
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	f042 0220 	orr.w	r2, r2, #32
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f002 021f 	and.w	r2, r2, #31
 800488a:	2101      	movs	r1, #1
 800488c:	fa01 f202 	lsl.w	r2, r1, r2
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8102 	beq.w	8004a9c <HAL_RCC_OscConfig+0x2e8>
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80fc 	bne.w	8004a9c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f000 be93 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x110>
 80048b6:	4b78      	ldr	r3, [pc, #480]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a77      	ldr	r2, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e030      	b.n	8004926 <HAL_RCC_OscConfig+0x172>
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x134>
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b6f      	ldr	r3, [pc, #444]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6e      	ldr	r2, [pc, #440]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e01e      	b.n	8004926 <HAL_RCC_OscConfig+0x172>
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_OscConfig+0x15a>
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80048fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a64      	ldr	r2, [pc, #400]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e00b      	b.n	8004926 <HAL_RCC_OscConfig+0x172>
 800490e:	4b62      	ldr	r3, [pc, #392]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a61      	ldr	r2, [pc, #388]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b5f      	ldr	r3, [pc, #380]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5e      	ldr	r2, [pc, #376]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d059      	beq.n	80049e4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fd f980 	bl	8001c34 <HAL_GetTick>
 8004934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004938:	e00a      	b.n	8004950 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493a:	f7fd f97b 	bl	8001c34 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d902      	bls.n	8004950 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	f000 be40 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004954:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004964:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <HAL_RCC_OscConfig+0x1ce>
 800497c:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	e015      	b.n	80049ae <HAL_RCC_OscConfig+0x1fa>
 8004982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004986:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800498e:	fa93 f3a3 	rbit	r3, r3
 8004992:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800499e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80049b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80049ba:	fa92 f2a2 	rbit	r2, r2
 80049be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80049c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049c6:	fab2 f282 	clz	r2, r2
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f042 0220 	orr.w	r2, r2, #32
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f002 021f 	and.w	r2, r2, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f202 	lsl.w	r2, r1, r2
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ab      	beq.n	800493a <HAL_RCC_OscConfig+0x186>
 80049e2:	e05c      	b.n	8004a9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fd f926 	bl	8001c34 <HAL_GetTick>
 80049e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ee:	f7fd f921 	bl	8001c34 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d902      	bls.n	8004a04 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	f000 bde6 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a08:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004a18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_OscConfig+0x282>
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ae>
 8004a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <HAL_RCC_OscConfig+0x2e4>)
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a6a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004a6e:	fa92 f2a2 	rbit	r2, r2
 8004a72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004a76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a7a:	fab2 f282 	clz	r2, r2
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	f042 0220 	orr.w	r2, r2, #32
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	f002 021f 	and.w	r2, r2, #31
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ab      	bne.n	80049ee <HAL_RCC_OscConfig+0x23a>
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_OscConfig+0x2ea>
 8004a98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8170 	beq.w	8004d8e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004aae:	4bd0      	ldr	r3, [pc, #832]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004aba:	4bcd      	ldr	r3, [pc, #820]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d16d      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x3ee>
 8004ac6:	4bca      	ldr	r3, [pc, #808]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d166      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x3ee>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004ae6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_RCC_OscConfig+0x350>
 8004afe:	4bbc      	ldr	r3, [pc, #752]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	e013      	b.n	8004b2c <HAL_RCC_OscConfig+0x378>
 8004b04:	2302      	movs	r3, #2
 8004b06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b16:	2302      	movs	r3, #2
 8004b18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b28:	4bb1      	ldr	r3, [pc, #708]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004b32:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004b36:	fa92 f2a2 	rbit	r2, r2
 8004b3a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004b3e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b42:	fab2 f282 	clz	r2, r2
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	f042 0220 	orr.w	r2, r2, #32
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f002 021f 	and.w	r2, r2, #31
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f202 	lsl.w	r2, r1, r2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3ba>
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d002      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f000 bd31 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4ba0      	ldr	r3, [pc, #640]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	21f8      	movs	r1, #248	; 0xf8
 8004b7e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004b86:	fa91 f1a1 	rbit	r1, r1
 8004b8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004b8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b92:	fab1 f181 	clz	r1, r1
 8004b96:	b2c9      	uxtb	r1, r1
 8004b98:	408b      	lsls	r3, r1
 8004b9a:	4995      	ldr	r1, [pc, #596]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba0:	e0f5      	b.n	8004d8e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8085 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x504>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004bc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fd f82b 	bl	8001c34 <HAL_GetTick>
 8004bde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fd f826 	bl	8001c34 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d902      	bls.n	8004bfa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	f000 bceb 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004c0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c10:	fab3 f383 	clz	r3, r3
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <HAL_RCC_OscConfig+0x476>
 8004c24:	4b72      	ldr	r3, [pc, #456]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	e013      	b.n	8004c52 <HAL_RCC_OscConfig+0x49e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c4e:	4b68      	ldr	r3, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2202      	movs	r2, #2
 8004c54:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c58:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c5c:	fa92 f2a2 	rbit	r2, r2
 8004c60:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004c64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f002 021f 	and.w	r2, r2, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0af      	beq.n	8004be4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c84:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	21f8      	movs	r1, #248	; 0xf8
 8004c94:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c98:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004c9c:	fa91 f1a1 	rbit	r1, r1
 8004ca0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004ca4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ca8:	fab1 f181 	clz	r1, r1
 8004cac:	b2c9      	uxtb	r1, r1
 8004cae:	408b      	lsls	r3, r1
 8004cb0:	494f      	ldr	r1, [pc, #316]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
 8004cb6:	e06a      	b.n	8004d8e <HAL_RCC_OscConfig+0x5da>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004cca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fc ffa6 	bl	8001c34 <HAL_GetTick>
 8004ce8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fc ffa1 	bl	8001c34 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d902      	bls.n	8004d04 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	f000 bc66 	b.w	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004d16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCC_OscConfig+0x580>
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	e013      	b.n	8004d5c <HAL_RCC_OscConfig+0x5a8>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d46:	2302      	movs	r3, #2
 8004d48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <HAL_RCC_OscConfig+0x63c>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d62:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d66:	fa92 f2a2 	rbit	r2, r2
 8004d6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004d6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d72:	fab2 f282 	clz	r2, r2
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	f042 0220 	orr.w	r2, r2, #32
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	f002 021f 	and.w	r2, r2, #31
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f202 	lsl.w	r2, r1, r2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1af      	bne.n	8004cee <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80da 	beq.w	8004f52 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d069      	beq.n	8004e7c <HAL_RCC_OscConfig+0x6c8>
 8004da8:	2301      	movs	r3, #1
 8004daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x640>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2301      	movs	r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fc ff2f 	bl	8001c34 <HAL_GetTick>
 8004dd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	e00d      	b.n	8004df8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fc ff2a 	bl	8001c34 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d905      	bls.n	8004df8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e3ef      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	10908120 	.word	0x10908120
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	fa93 f2a3 	rbit	r2, r3
 8004e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004e10:	2202      	movs	r2, #2
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e28:	2202      	movs	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	fa93 f2a3 	rbit	r2, r3
 8004e36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3c:	4ba4      	ldr	r3, [pc, #656]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e44:	2102      	movs	r1, #2
 8004e46:	6019      	str	r1, [r3, #0]
 8004e48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	fa93 f1a3 	rbit	r1, r3
 8004e52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e56:	6019      	str	r1, [r3, #0]
  return result;
 8004e58:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0b0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x628>
 8004e7a:	e06a      	b.n	8004f52 <HAL_RCC_OscConfig+0x79e>
 8004e7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	fa93 f2a3 	rbit	r2, r3
 8004e8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e92:	601a      	str	r2, [r3, #0]
  return result;
 8004e94:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b8c      	ldr	r3, [pc, #560]	; (80050d4 <HAL_RCC_OscConfig+0x920>)
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fc fec1 	bl	8001c34 <HAL_GetTick>
 8004eb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb6:	e009      	b.n	8004ecc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb8:	f7fc febc 	bl	8001c34 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e381      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8004ecc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	fa93 f2a3 	rbit	r2, r3
 8004ede:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ee8:	2202      	movs	r2, #2
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	fa93 f2a3 	rbit	r2, r3
 8004ef6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f00:	2202      	movs	r2, #2
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f14:	4b6e      	ldr	r3, [pc, #440]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	6019      	str	r1, [r3, #0]
 8004f20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	fa93 f1a3 	rbit	r1, r3
 8004f2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f2e:	6019      	str	r1, [r3, #0]
  return result;
 8004f30:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1b2      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8157 	beq.w	8005210 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f68:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d112      	bne.n	8004f9a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f74:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4a55      	ldr	r2, [pc, #340]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	61d3      	str	r3, [r2, #28]
 8004f80:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f88:	f107 030c 	add.w	r3, r7, #12
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCC_OscConfig+0x924>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa6:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <HAL_RCC_OscConfig+0x924>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_RCC_OscConfig+0x924>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb2:	f7fc fe3f 	bl	8001c34 <HAL_GetTick>
 8004fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fba:	e009      	b.n	8004fd0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fe3a 	bl	8001c34 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	; 0x64
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e2ff      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_OscConfig+0x924>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x840>
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a39      	ldr	r2, [pc, #228]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6213      	str	r3, [r2, #32]
 8004ff2:	e02f      	b.n	8005054 <HAL_RCC_OscConfig+0x8a0>
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x864>
 8004ffe:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	4a33      	ldr	r2, [pc, #204]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	6213      	str	r3, [r2, #32]
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	6213      	str	r3, [r2, #32]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0x8a0>
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b05      	cmp	r3, #5
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x888>
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0x8a0>
 800503c:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	6213      	str	r3, [r2, #32]
 8005048:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 800504e:	f023 0304 	bic.w	r3, r3, #4
 8005052:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d06a      	beq.n	8005134 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fc fde9 	bl	8001c34 <HAL_GetTick>
 8005062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc fde4 	bl	8001c34 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e2a7      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8005080:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	fa93 f2a3 	rbit	r2, r3
 8005092:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800509c:	2202      	movs	r2, #2
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	fa93 f2a3 	rbit	r2, r3
 80050aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050ae:	601a      	str	r2, [r3, #0]
  return result;
 80050b0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d108      	bne.n	80050dc <HAL_RCC_OscConfig+0x928>
 80050ca:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <HAL_RCC_OscConfig+0x91c>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	e013      	b.n	80050f8 <HAL_RCC_OscConfig+0x944>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	10908120 	.word	0x10908120
 80050d8:	40007000 	.word	0x40007000
 80050dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050e0:	2202      	movs	r2, #2
 80050e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f2a3 	rbit	r2, r3
 80050ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	4bc0      	ldr	r3, [pc, #768]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80050fc:	2102      	movs	r1, #2
 80050fe:	6011      	str	r1, [r2, #0]
 8005100:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	fa92 f1a2 	rbit	r1, r2
 800510a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800510e:	6011      	str	r1, [r2, #0]
  return result;
 8005110:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	fab2 f282 	clz	r2, r2
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	f002 021f 	and.w	r2, r2, #31
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f202 	lsl.w	r2, r1, r2
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d09a      	beq.n	8005068 <HAL_RCC_OscConfig+0x8b4>
 8005132:	e063      	b.n	80051fc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005134:	f7fc fd7e 	bl	8001c34 <HAL_GetTick>
 8005138:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fc fd79 	bl	8001c34 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e23c      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 8005156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800515a:	2202      	movs	r2, #2
 800515c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	fa93 f2a3 	rbit	r2, r3
 8005168:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f2a3 	rbit	r2, r3
 8005180:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005184:	601a      	str	r2, [r3, #0]
  return result;
 8005186:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800518a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	b2db      	uxtb	r3, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d102      	bne.n	80051a6 <HAL_RCC_OscConfig+0x9f2>
 80051a0:	4b95      	ldr	r3, [pc, #596]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	e00d      	b.n	80051c2 <HAL_RCC_OscConfig+0xa0e>
 80051a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051aa:	2202      	movs	r2, #2
 80051ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fa93 f2a3 	rbit	r2, r3
 80051b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4b8e      	ldr	r3, [pc, #568]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80051c6:	2102      	movs	r1, #2
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	fa92 f1a2 	rbit	r1, r2
 80051d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051d8:	6011      	str	r1, [r2, #0]
  return result;
 80051da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	fab2 f282 	clz	r2, r2
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	f002 021f 	and.w	r2, r2, #31
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1a0      	bne.n	800513e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051fc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005204:	4b7c      	ldr	r3, [pc, #496]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4a7b      	ldr	r2, [pc, #492]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 800520a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 81d9 	beq.w	80055ce <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521c:	4b76      	ldr	r3, [pc, #472]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	f000 81a6 	beq.w	8005576 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b02      	cmp	r3, #2
 8005232:	f040 811e 	bne.w	8005472 <HAL_RCC_OscConfig+0xcbe>
 8005236:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800523a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800523e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	fa93 f2a3 	rbit	r2, r3
 800524a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800524e:	601a      	str	r2, [r3, #0]
  return result;
 8005250:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005254:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	461a      	mov	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fc fce2 	bl	8001c34 <HAL_GetTick>
 8005270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005274:	e009      	b.n	800528a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005276:	f7fc fcdd 	bl	8001c34 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1a2      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 800528a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800528e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005294:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	fa93 f2a3 	rbit	r2, r3
 800529e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052a2:	601a      	str	r2, [r3, #0]
  return result;
 80052a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_RCC_OscConfig+0xb10>
 80052be:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e01b      	b.n	80052fc <HAL_RCC_OscConfig+0xb48>
 80052c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	fa93 f2a3 	rbit	r2, r3
 80052f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	4b3f      	ldr	r3, [pc, #252]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	fa92 f1a2 	rbit	r1, r2
 8005310:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005314:	6011      	str	r1, [r2, #0]
  return result;
 8005316:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	fab2 f282 	clz	r2, r2
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f042 0220 	orr.w	r2, r2, #32
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	f002 021f 	and.w	r2, r2, #31
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d19e      	bne.n	8005276 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005338:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f023 020f 	bic.w	r2, r3, #15
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	492c      	ldr	r1, [pc, #176]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 8005348:	4313      	orrs	r3, r2
 800534a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800534c:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a19      	ldr	r1, [r3, #32]
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	430b      	orrs	r3, r1
 8005362:	4925      	ldr	r1, [pc, #148]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]
 8005368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800536c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	fa93 f2a3 	rbit	r2, r3
 800537c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005380:	601a      	str	r2, [r3, #0]
  return result;
 8005382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005386:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005388:	fab3 f383 	clz	r3, r3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005392:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	461a      	mov	r2, r3
 800539a:	2301      	movs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539e:	f7fc fc49 	bl	8001c34 <HAL_GetTick>
 80053a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a6:	e009      	b.n	80053bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc fc44 	bl	8001c34 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e109      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 80053bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053d4:	601a      	str	r2, [r3, #0]
  return result;
 80053d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053dc:	fab3 f383 	clz	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <HAL_RCC_OscConfig+0xc48>
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <HAL_RCC_OscConfig+0xc44>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	e01e      	b.n	8005434 <HAL_RCC_OscConfig+0xc80>
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000
 80053fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800541a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	fa93 f2a3 	rbit	r2, r3
 800542a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	4b6a      	ldr	r3, [pc, #424]	; (80055dc <HAL_RCC_OscConfig+0xe28>)
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	fa92 f1a2 	rbit	r1, r2
 8005448:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800544c:	6011      	str	r1, [r2, #0]
  return result;
 800544e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	fab2 f282 	clz	r2, r2
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f042 0220 	orr.w	r2, r2, #32
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	f002 021f 	and.w	r2, r2, #31
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d09b      	beq.n	80053a8 <HAL_RCC_OscConfig+0xbf4>
 8005470:	e0ad      	b.n	80055ce <HAL_RCC_OscConfig+0xe1a>
 8005472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800547a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	fa93 f2a3 	rbit	r2, r3
 8005486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800548a:	601a      	str	r2, [r3, #0]
  return result;
 800548c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005490:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800549c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc fbc4 	bl	8001c34 <HAL_GetTick>
 80054ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b0:	e009      	b.n	80054c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fc fbbf 	bl	8001c34 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e084      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
 80054c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	fa93 f2a3 	rbit	r2, r3
 80054da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054de:	601a      	str	r2, [r3, #0]
  return result;
 80054e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_OscConfig+0xd4c>
 80054fa:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_RCC_OscConfig+0xe28>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	e01b      	b.n	8005538 <HAL_RCC_OscConfig+0xd84>
 8005500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	fa93 f2a3 	rbit	r2, r3
 8005514:	f107 0320 	add.w	r3, r7, #32
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f107 031c 	add.w	r3, r7, #28
 800551e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	fa93 f2a3 	rbit	r2, r3
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RCC_OscConfig+0xe28>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f107 0214 	add.w	r2, r7, #20
 800553c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	f107 0214 	add.w	r2, r7, #20
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	fa92 f1a2 	rbit	r1, r2
 800554c:	f107 0210 	add.w	r2, r7, #16
 8005550:	6011      	str	r1, [r2, #0]
  return result;
 8005552:	f107 0210 	add.w	r2, r7, #16
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	fab2 f282 	clz	r2, r2
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	f002 021f 	and.w	r2, r2, #31
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f202 	lsl.w	r2, r1, r2
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d19e      	bne.n	80054b2 <HAL_RCC_OscConfig+0xcfe>
 8005574:	e02b      	b.n	80055ce <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e025      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCC_OscConfig+0xe28>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <HAL_RCC_OscConfig+0xe28>)
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005594:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005598:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d111      	bne.n	80055ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80055b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000

080055e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b09e      	sub	sp, #120	; 0x78
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e162      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f8:	4b90      	ldr	r3, [pc, #576]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d910      	bls.n	8005628 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b8d      	ldr	r3, [pc, #564]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 0207 	bic.w	r2, r3, #7
 800560e:	498b      	ldr	r1, [pc, #556]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b89      	ldr	r3, [pc, #548]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e14a      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b82      	ldr	r3, [pc, #520]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	497f      	ldr	r1, [pc, #508]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80dc 	beq.w	800580c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d13c      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xf6>
 800565c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005660:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800566a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d102      	bne.n	8005686 <HAL_RCC_ClockConfig+0xa6>
 8005680:	4b6f      	ldr	r3, [pc, #444]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	e00f      	b.n	80056a6 <HAL_RCC_ClockConfig+0xc6>
 8005686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800568a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	667b      	str	r3, [r7, #100]	; 0x64
 8005694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005698:	663b      	str	r3, [r7, #96]	; 0x60
 800569a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800569c:	fa93 f3a3 	rbit	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	4b67      	ldr	r3, [pc, #412]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80056ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ae:	fa92 f2a2 	rbit	r2, r2
 80056b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80056b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056b6:	fab2 f282 	clz	r2, r2
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	f042 0220 	orr.w	r2, r2, #32
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	f002 021f 	and.w	r2, r2, #31
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f202 	lsl.w	r2, r1, r2
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d17b      	bne.n	80057ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0f3      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d13c      	bne.n	8005758 <HAL_RCC_ClockConfig+0x178>
 80056de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e6:	fa93 f3a3 	rbit	r3, r3
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80056ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d102      	bne.n	8005708 <HAL_RCC_ClockConfig+0x128>
 8005702:	4b4f      	ldr	r3, [pc, #316]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	e00f      	b.n	8005728 <HAL_RCC_ClockConfig+0x148>
 8005708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800570c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	647b      	str	r3, [r7, #68]	; 0x44
 8005716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	fa93 f3a3 	rbit	r3, r3
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	4b46      	ldr	r3, [pc, #280]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800572c:	63ba      	str	r2, [r7, #56]	; 0x38
 800572e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005730:	fa92 f2a2 	rbit	r2, r2
 8005734:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	fab2 f282 	clz	r2, r2
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	f042 0220 	orr.w	r2, r2, #32
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	f002 021f 	and.w	r2, r2, #31
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f202 	lsl.w	r2, r1, r2
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d13a      	bne.n	80057ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0b2      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
 8005758:	2302      	movs	r3, #2
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	fa93 f3a3 	rbit	r3, r3
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d102      	bne.n	8005780 <HAL_RCC_ClockConfig+0x1a0>
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	e00d      	b.n	800579c <HAL_RCC_ClockConfig+0x1bc>
 8005780:	2302      	movs	r3, #2
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	2302      	movs	r3, #2
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	fa93 f3a3 	rbit	r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2202      	movs	r2, #2
 800579e:	61ba      	str	r2, [r7, #24]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	fa92 f2a2 	rbit	r2, r2
 80057a6:	617a      	str	r2, [r7, #20]
  return result;
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	fab2 f282 	clz	r2, r2
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	f042 0220 	orr.w	r2, r2, #32
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	f002 021f 	and.w	r2, r2, #31
 80057ba:	2101      	movs	r1, #1
 80057bc:	fa01 f202 	lsl.w	r2, r1, r2
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e079      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057dc:	f7fc fa2a 	bl	8001c34 <HAL_GetTick>
 80057e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e4:	f7fc fa26 	bl	8001c34 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e061      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 020c 	and.w	r2, r3, #12
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	429a      	cmp	r2, r3
 800580a:	d1eb      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b0b      	ldr	r3, [pc, #44]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d214      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b08      	ldr	r3, [pc, #32]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 0207 	bic.w	r2, r3, #7
 8005822:	4906      	ldr	r1, [pc, #24]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <HAL_RCC_ClockConfig+0x25c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e040      	b.n	80058be <HAL_RCC_ClockConfig+0x2de>
 800583c:	40022000 	.word	0x40022000
 8005840:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	491a      	ldr	r1, [pc, #104]	; (80058c8 <HAL_RCC_ClockConfig+0x2e8>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586e:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4912      	ldr	r1, [pc, #72]	; (80058c8 <HAL_RCC_ClockConfig+0x2e8>)
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005882:	f000 f829 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8005886:	4601      	mov	r1, r0
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <HAL_RCC_ClockConfig+0x2e8>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005890:	22f0      	movs	r2, #240	; 0xf0
 8005892:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	fa92 f2a2 	rbit	r2, r2
 800589a:	60fa      	str	r2, [r7, #12]
  return result;
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fab2 f282 	clz	r2, r2
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	40d3      	lsrs	r3, r2
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <HAL_RCC_ClockConfig+0x2ec>)
 80058a8:	5cd3      	ldrb	r3, [r2, r3]
 80058aa:	fa21 f303 	lsr.w	r3, r1, r3
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <HAL_RCC_ClockConfig+0x2f0>)
 80058b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <HAL_RCC_ClockConfig+0x2f4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fc f978 	bl	8001bac <HAL_InitTick>
  
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3778      	adds	r7, #120	; 0x78
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	08010770 	.word	0x08010770
 80058d0:	20000000 	.word	0x20000000
 80058d4:	20000008 	.word	0x20000008

080058d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	b08b      	sub	sp, #44	; 0x2c
 80058dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80058f2:	4b2a      	ldr	r3, [pc, #168]	; (800599c <HAL_RCC_GetSysClockFreq+0xc4>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x30>
 8005902:	2b08      	cmp	r3, #8
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x36>
 8005906:	e03f      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005908:	4b25      	ldr	r3, [pc, #148]	; (80059a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800590a:	623b      	str	r3, [r7, #32]
      break;
 800590c:	e03f      	b.n	800598e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005914:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005918:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	fa92 f2a2 	rbit	r2, r2
 8005920:	607a      	str	r2, [r7, #4]
  return result;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	fab2 f282 	clz	r2, r2
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	40d3      	lsrs	r3, r2
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800592e:	5cd3      	ldrb	r3, [r2, r3]
 8005930:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	220f      	movs	r2, #15
 800593c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	fa92 f2a2 	rbit	r2, r2
 8005944:	60fa      	str	r2, [r7, #12]
  return result;
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	fab2 f282 	clz	r2, r2
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	40d3      	lsrs	r3, r2
 8005950:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005952:	5cd3      	ldrb	r3, [r2, r3]
 8005954:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005960:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	fbb2 f2f3 	udiv	r2, r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	e007      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005972:	4a0b      	ldr	r2, [pc, #44]	; (80059a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fbb2 f2f3 	udiv	r2, r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	623b      	str	r3, [r7, #32]
      break;
 8005986:	e002      	b.n	800598e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800598a:	623b      	str	r3, [r7, #32]
      break;
 800598c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800598e:	6a3b      	ldr	r3, [r7, #32]
}
 8005990:	4618      	mov	r0, r3
 8005992:	372c      	adds	r7, #44	; 0x2c
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40021000 	.word	0x40021000
 80059a0:	007a1200 	.word	0x007a1200
 80059a4:	08010788 	.word	0x08010788
 80059a8:	08010798 	.word	0x08010798

080059ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000000 	.word	0x20000000

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80059ca:	f7ff ffef 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059ce:	4601      	mov	r1, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	fa92 f2a2 	rbit	r2, r2
 80059e4:	603a      	str	r2, [r7, #0]
  return result;
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	fab2 f282 	clz	r2, r2
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	40d3      	lsrs	r3, r2
 80059f0:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x40>)
 80059f2:	5cd3      	ldrb	r3, [r2, r3]
 80059f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	08010780 	.word	0x08010780

08005a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a0e:	f7ff ffcd 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 8005a12:	4601      	mov	r1, r0
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005a1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005a20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	fa92 f2a2 	rbit	r2, r2
 8005a28:	603a      	str	r2, [r7, #0]
  return result;
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	fab2 f282 	clz	r2, r2
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	40d3      	lsrs	r3, r2
 8005a34:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	08010780 	.word	0x08010780

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b092      	sub	sp, #72	; 0x48
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80d4 	beq.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a70:	4b4e      	ldr	r3, [pc, #312]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10e      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7c:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4a4a      	ldr	r2, [pc, #296]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	61d3      	str	r3, [r2, #28]
 8005a88:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9a:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d118      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa6:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a41      	ldr	r2, [pc, #260]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab2:	f7fc f8bf 	bl	8001c34 <HAL_GetTick>
 8005ab6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab8:	e008      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fc f8bb 	bl	8001c34 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b64      	cmp	r3, #100	; 0x64
 8005ac6:	d901      	bls.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e1d6      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ad8:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8084 	beq.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d07c      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af8:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	461a      	mov	r2, r3
 8005b22:	2301      	movs	r3, #1
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b4a:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d04b      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5a:	f7fc f86b 	bl	8001c34 <HAL_GetTick>
 8005b5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b60:	e00a      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b62:	f7fc f867 	bl	8001c34 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e180      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	fa93 f3a3 	rbit	r3, r3
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	2302      	movs	r3, #2
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	fa93 f3a3 	rbit	r3, r3
 8005b8e:	61fb      	str	r3, [r7, #28]
  return result;
 8005b90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d108      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ba6:	4b01      	ldr	r3, [pc, #4]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	e00d      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	10908100 	.word	0x10908100
 8005bb8:	2302      	movs	r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	4ba0      	ldr	r3, [pc, #640]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2202      	movs	r2, #2
 8005bca:	613a      	str	r2, [r7, #16]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	fa92 f2a2 	rbit	r2, r2
 8005bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	fab2 f282 	clz	r2, r2
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	f002 021f 	and.w	r2, r2, #31
 8005be6:	2101      	movs	r1, #1
 8005be8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0b7      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005bf2:	4b95      	ldr	r3, [pc, #596]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4992      	ldr	r1, [pc, #584]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0c:	4b8e      	ldr	r3, [pc, #568]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	4a8d      	ldr	r2, [pc, #564]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c24:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	f023 0203 	bic.w	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4985      	ldr	r1, [pc, #532]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c42:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	497e      	ldr	r1, [pc, #504]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c60:	4b79      	ldr	r3, [pc, #484]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	4976      	ldr	r1, [pc, #472]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c7e:	4b72      	ldr	r3, [pc, #456]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f023 0210 	bic.w	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	496f      	ldr	r1, [pc, #444]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	4967      	ldr	r1, [pc, #412]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	f023 0220 	bic.w	r2, r3, #32
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	4960      	ldr	r1, [pc, #384]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cd8:	4b5b      	ldr	r3, [pc, #364]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	4958      	ldr	r1, [pc, #352]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf6:	4b54      	ldr	r3, [pc, #336]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	4951      	ldr	r1, [pc, #324]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d14:	4b4c      	ldr	r3, [pc, #304]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4949      	ldr	r1, [pc, #292]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d32:	4b45      	ldr	r3, [pc, #276]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	4942      	ldr	r1, [pc, #264]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d50:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	493a      	ldr	r1, [pc, #232]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	4933      	ldr	r1, [pc, #204]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d8c:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	492b      	ldr	r1, [pc, #172]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005daa:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	4924      	ldr	r1, [pc, #144]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	491c      	ldr	r1, [pc, #112]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	4915      	ldr	r1, [pc, #84]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005e04:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	490d      	ldr	r1, [pc, #52]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2e:	4906      	ldr	r1, [pc, #24]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e54:	490b      	ldr	r1, [pc, #44]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	4904      	ldr	r1, [pc, #16]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3748      	adds	r7, #72	; 0x48
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000

08005e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb fc40 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 f94a 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0ff      	b.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b14      	cmp	r3, #20
 8005f62:	f200 80f0 	bhi.w	8006146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08006147 	.word	0x08006147
 8005f74:	08006147 	.word	0x08006147
 8005f78:	08006147 	.word	0x08006147
 8005f7c:	08006001 	.word	0x08006001
 8005f80:	08006147 	.word	0x08006147
 8005f84:	08006147 	.word	0x08006147
 8005f88:	08006147 	.word	0x08006147
 8005f8c:	08006043 	.word	0x08006043
 8005f90:	08006147 	.word	0x08006147
 8005f94:	08006147 	.word	0x08006147
 8005f98:	08006147 	.word	0x08006147
 8005f9c:	08006083 	.word	0x08006083
 8005fa0:	08006147 	.word	0x08006147
 8005fa4:	08006147 	.word	0x08006147
 8005fa8:	08006147 	.word	0x08006147
 8005fac:	080060c5 	.word	0x080060c5
 8005fb0:	08006147 	.word	0x08006147
 8005fb4:	08006147 	.word	0x08006147
 8005fb8:	08006147 	.word	0x08006147
 8005fbc:	08006105 	.word	0x08006105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f968 	bl	800629c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0208 	orr.w	r2, r2, #8
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
      break;
 8005ffe:	e0a5      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f9e2 	bl	80063d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	021a      	lsls	r2, r3, #8
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	619a      	str	r2, [r3, #24]
      break;
 8006040:	e084      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fa55 	bl	80064f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0208 	orr.w	r2, r2, #8
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
      break;
 8006080:	e064      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fac7 	bl	800661c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69d9      	ldr	r1, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	021a      	lsls	r2, r3, #8
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	61da      	str	r2, [r3, #28]
      break;
 80060c2:	e043      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fb16 	bl	80066fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0204 	bic.w	r2, r2, #4
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006102:	e023      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fb60 	bl	80067d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006144:	e002      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
      break;
 800614a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a42      	ldr	r2, [pc, #264]	; (800627c <TIM_Base_SetConfig+0x11c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d00f      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3f      	ldr	r2, [pc, #252]	; (8006280 <TIM_Base_SetConfig+0x120>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3e      	ldr	r2, [pc, #248]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3d      	ldr	r2, [pc, #244]	; (8006288 <TIM_Base_SetConfig+0x128>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3c      	ldr	r2, [pc, #240]	; (800628c <TIM_Base_SetConfig+0x12c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a31      	ldr	r2, [pc, #196]	; (800627c <TIM_Base_SetConfig+0x11c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	; (8006280 <TIM_Base_SetConfig+0x120>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	; (8006284 <TIM_Base_SetConfig+0x124>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <TIM_Base_SetConfig+0x128>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <TIM_Base_SetConfig+0x130>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_Base_SetConfig+0x134>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <TIM_Base_SetConfig+0x138>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <TIM_Base_SetConfig+0x12c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <TIM_Base_SetConfig+0x11c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <TIM_Base_SetConfig+0x100>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a13      	ldr	r2, [pc, #76]	; (8006288 <TIM_Base_SetConfig+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0x100>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <TIM_Base_SetConfig+0x130>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0x100>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a12      	ldr	r2, [pc, #72]	; (8006294 <TIM_Base_SetConfig+0x134>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0x100>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a11      	ldr	r2, [pc, #68]	; (8006298 <TIM_Base_SetConfig+0x138>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0x100>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0c      	ldr	r2, [pc, #48]	; (800628c <TIM_Base_SetConfig+0x12c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	615a      	str	r2, [r3, #20]
}
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40013400 	.word	0x40013400
 800628c:	40015000 	.word	0x40015000
 8006290:	40014000 	.word	0x40014000
 8006294:	40014400 	.word	0x40014400
 8006298:	40014800 	.word	0x40014800

0800629c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0302 	bic.w	r3, r3, #2
 80062e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <TIM_OC1_SetConfig+0x11c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_OC1_SetConfig+0x88>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a2f      	ldr	r2, [pc, #188]	; (80063bc <TIM_OC1_SetConfig+0x120>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_OC1_SetConfig+0x88>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <TIM_OC1_SetConfig+0x124>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_OC1_SetConfig+0x88>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a2d      	ldr	r2, [pc, #180]	; (80063c4 <TIM_OC1_SetConfig+0x128>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_OC1_SetConfig+0x88>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <TIM_OC1_SetConfig+0x12c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC1_SetConfig+0x88>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <TIM_OC1_SetConfig+0x130>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10c      	bne.n	800633e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0308 	bic.w	r3, r3, #8
 800632a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <TIM_OC1_SetConfig+0x11c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_OC1_SetConfig+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <TIM_OC1_SetConfig+0x120>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_OC1_SetConfig+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <TIM_OC1_SetConfig+0x124>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_OC1_SetConfig+0xd2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <TIM_OC1_SetConfig+0x128>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_OC1_SetConfig+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <TIM_OC1_SetConfig+0x12c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC1_SetConfig+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a18      	ldr	r2, [pc, #96]	; (80063cc <TIM_OC1_SetConfig+0x130>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800
 80063cc:	40015000 	.word	0x40015000

080063d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0210 	bic.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0320 	bic.w	r3, r3, #32
 800641e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <TIM_OC2_SetConfig+0x110>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC2_SetConfig+0x74>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a2b      	ldr	r2, [pc, #172]	; (80064e4 <TIM_OC2_SetConfig+0x114>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC2_SetConfig+0x74>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a2a      	ldr	r2, [pc, #168]	; (80064e8 <TIM_OC2_SetConfig+0x118>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10d      	bne.n	8006460 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <TIM_OC2_SetConfig+0x110>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <TIM_OC2_SetConfig+0xc0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <TIM_OC2_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00f      	beq.n	8006490 <TIM_OC2_SetConfig+0xc0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <TIM_OC2_SetConfig+0x11c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00b      	beq.n	8006490 <TIM_OC2_SetConfig+0xc0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <TIM_OC2_SetConfig+0x120>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_OC2_SetConfig+0xc0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <TIM_OC2_SetConfig+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_OC2_SetConfig+0xc0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <TIM_OC2_SetConfig+0x118>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d113      	bne.n	80064b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006496:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800649e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40015000 	.word	0x40015000
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2b      	ldr	r2, [pc, #172]	; (8006604 <TIM_OC3_SetConfig+0x10c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_OC3_SetConfig+0x72>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <TIM_OC3_SetConfig+0x110>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC3_SetConfig+0x72>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a29      	ldr	r2, [pc, #164]	; (800660c <TIM_OC3_SetConfig+0x114>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10d      	bne.n	8006586 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006584:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <TIM_OC3_SetConfig+0x10c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <TIM_OC3_SetConfig+0xbe>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <TIM_OC3_SetConfig+0x110>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_OC3_SetConfig+0xbe>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <TIM_OC3_SetConfig+0x118>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_OC3_SetConfig+0xbe>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <TIM_OC3_SetConfig+0x11c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_OC3_SetConfig+0xbe>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <TIM_OC3_SetConfig+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_OC3_SetConfig+0xbe>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <TIM_OC3_SetConfig+0x114>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d113      	bne.n	80065de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40013400 	.word	0x40013400
 800660c:	40015000 	.word	0x40015000
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800666a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	031b      	lsls	r3, r3, #12
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <TIM_OC4_SetConfig+0xc8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d013      	beq.n	80066a8 <TIM_OC4_SetConfig+0x8c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <TIM_OC4_SetConfig+0xcc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00f      	beq.n	80066a8 <TIM_OC4_SetConfig+0x8c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a18      	ldr	r2, [pc, #96]	; (80066ec <TIM_OC4_SetConfig+0xd0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00b      	beq.n	80066a8 <TIM_OC4_SetConfig+0x8c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <TIM_OC4_SetConfig+0xd4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <TIM_OC4_SetConfig+0x8c>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <TIM_OC4_SetConfig+0xd8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC4_SetConfig+0x8c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <TIM_OC4_SetConfig+0xdc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d109      	bne.n	80066bc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	40015000 	.word	0x40015000

080066fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <TIM_OC5_SetConfig+0xbc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <TIM_OC5_SetConfig+0x82>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a18      	ldr	r2, [pc, #96]	; (80067bc <TIM_OC5_SetConfig+0xc0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00f      	beq.n	800677e <TIM_OC5_SetConfig+0x82>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <TIM_OC5_SetConfig+0xc4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_OC5_SetConfig+0x82>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <TIM_OC5_SetConfig+0xc8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_OC5_SetConfig+0x82>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <TIM_OC5_SetConfig+0xcc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC5_SetConfig+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a14      	ldr	r2, [pc, #80]	; (80067cc <TIM_OC5_SetConfig+0xd0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d109      	bne.n	8006792 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40013400 	.word	0x40013400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800
 80067cc:	40015000 	.word	0x40015000

080067d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	051b      	lsls	r3, r3, #20
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1a      	ldr	r2, [pc, #104]	; (8006890 <TIM_OC6_SetConfig+0xc0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <TIM_OC6_SetConfig+0x84>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a19      	ldr	r2, [pc, #100]	; (8006894 <TIM_OC6_SetConfig+0xc4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_OC6_SetConfig+0x84>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <TIM_OC6_SetConfig+0xc8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_OC6_SetConfig+0x84>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <TIM_OC6_SetConfig+0xcc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC6_SetConfig+0x84>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <TIM_OC6_SetConfig+0xd0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC6_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <TIM_OC6_SetConfig+0xd4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40013400 	.word	0x40013400
 8006898:	40014000 	.word	0x40014000
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014800 	.word	0x40014800
 80068a4:	40015000 	.word	0x40015000

080068a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e06d      	b.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a30      	ldr	r2, [pc, #192]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2d      	ldr	r2, [pc, #180]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d018      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10c      	bne.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4313      	orrs	r3, r2
 8006980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40013400 	.word	0x40013400
 80069b0:	40015000 	.word	0x40015000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40014000 	.word	0x40014000

080069c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e040      	b.n	8006a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa ff5e 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2224      	movs	r2, #36	; 0x24
 80069ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8c0 	bl	8006b84 <UART_SetConfig>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e022      	b.n	8006a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa88 	bl	8006f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb0f 	bl	8007070 <UART_CheckIdleState>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	; 0x28
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	f040 8082 	bne.w	8006b7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_UART_Transmit+0x26>
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e07a      	b.n	8006b7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_UART_Transmit+0x38>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e073      	b.n	8006b7c <HAL_UART_Transmit+0x120>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2221      	movs	r2, #33	; 0x21
 8006aa8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aaa:	f7fb f8c3 	bl	8001c34 <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d108      	bne.n	8006adc <HAL_UART_Transmit+0x80>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e003      	b.n	8006ae4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006aec:	e02d      	b.n	8006b4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2180      	movs	r1, #128	; 0x80
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fb02 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e039      	b.n	8006b7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	881a      	ldrh	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1a:	b292      	uxth	r2, r2
 8006b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	3302      	adds	r3, #2
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	e008      	b.n	8006b38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1cb      	bne.n	8006aee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2140      	movs	r1, #64	; 0x40
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 face 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e005      	b.n	8006b7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e000      	b.n	8006b7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4baa      	ldr	r3, [pc, #680]	; (8006e58 <UART_SetConfig+0x2d4>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a98      	ldr	r2, [pc, #608]	; (8006e5c <UART_SetConfig+0x2d8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d121      	bne.n	8006c44 <UART_SetConfig+0xc0>
 8006c00:	4b97      	ldr	r3, [pc, #604]	; (8006e60 <UART_SetConfig+0x2dc>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d817      	bhi.n	8006c3c <UART_SetConfig+0xb8>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x90>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c37 	.word	0x08006c37
 8006c20:	08006c2b 	.word	0x08006c2b
 8006c24:	2301      	movs	r3, #1
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e0b2      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e0af      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c30:	2304      	movs	r3, #4
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e0ac      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c36:	2308      	movs	r3, #8
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e0a9      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	bf00      	nop
 8006c42:	e0a5      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a86      	ldr	r2, [pc, #536]	; (8006e64 <UART_SetConfig+0x2e0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d123      	bne.n	8006c96 <UART_SetConfig+0x112>
 8006c4e:	4b84      	ldr	r3, [pc, #528]	; (8006e60 <UART_SetConfig+0x2dc>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5a:	d012      	beq.n	8006c82 <UART_SetConfig+0xfe>
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d802      	bhi.n	8006c68 <UART_SetConfig+0xe4>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <UART_SetConfig+0xf2>
 8006c66:	e012      	b.n	8006c8e <UART_SetConfig+0x10a>
 8006c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6c:	d00c      	beq.n	8006c88 <UART_SetConfig+0x104>
 8006c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c72:	d003      	beq.n	8006c7c <UART_SetConfig+0xf8>
 8006c74:	e00b      	b.n	8006c8e <UART_SetConfig+0x10a>
 8006c76:	2300      	movs	r3, #0
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e089      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e086      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c82:	2304      	movs	r3, #4
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e083      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e080      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c8e:	2310      	movs	r3, #16
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	bf00      	nop
 8006c94:	e07c      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a73      	ldr	r2, [pc, #460]	; (8006e68 <UART_SetConfig+0x2e4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d123      	bne.n	8006ce8 <UART_SetConfig+0x164>
 8006ca0:	4b6f      	ldr	r3, [pc, #444]	; (8006e60 <UART_SetConfig+0x2dc>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ca8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cac:	d012      	beq.n	8006cd4 <UART_SetConfig+0x150>
 8006cae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb2:	d802      	bhi.n	8006cba <UART_SetConfig+0x136>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <UART_SetConfig+0x144>
 8006cb8:	e012      	b.n	8006ce0 <UART_SetConfig+0x15c>
 8006cba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cbe:	d00c      	beq.n	8006cda <UART_SetConfig+0x156>
 8006cc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cc4:	d003      	beq.n	8006cce <UART_SetConfig+0x14a>
 8006cc6:	e00b      	b.n	8006ce0 <UART_SetConfig+0x15c>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e060      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e05d      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e05a      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e057      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	bf00      	nop
 8006ce6:	e053      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5f      	ldr	r2, [pc, #380]	; (8006e6c <UART_SetConfig+0x2e8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d123      	bne.n	8006d3a <UART_SetConfig+0x1b6>
 8006cf2:	4b5b      	ldr	r3, [pc, #364]	; (8006e60 <UART_SetConfig+0x2dc>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d012      	beq.n	8006d26 <UART_SetConfig+0x1a2>
 8006d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d04:	d802      	bhi.n	8006d0c <UART_SetConfig+0x188>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <UART_SetConfig+0x196>
 8006d0a:	e012      	b.n	8006d32 <UART_SetConfig+0x1ae>
 8006d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d10:	d00c      	beq.n	8006d2c <UART_SetConfig+0x1a8>
 8006d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d16:	d003      	beq.n	8006d20 <UART_SetConfig+0x19c>
 8006d18:	e00b      	b.n	8006d32 <UART_SetConfig+0x1ae>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e037      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d20:	2302      	movs	r3, #2
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e034      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d26:	2304      	movs	r3, #4
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e031      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e02e      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d32:	2310      	movs	r3, #16
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	bf00      	nop
 8006d38:	e02a      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a4c      	ldr	r2, [pc, #304]	; (8006e70 <UART_SetConfig+0x2ec>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d123      	bne.n	8006d8c <UART_SetConfig+0x208>
 8006d44:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <UART_SetConfig+0x2dc>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d50:	d012      	beq.n	8006d78 <UART_SetConfig+0x1f4>
 8006d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d56:	d802      	bhi.n	8006d5e <UART_SetConfig+0x1da>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <UART_SetConfig+0x1e8>
 8006d5c:	e012      	b.n	8006d84 <UART_SetConfig+0x200>
 8006d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d62:	d00c      	beq.n	8006d7e <UART_SetConfig+0x1fa>
 8006d64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d68:	d003      	beq.n	8006d72 <UART_SetConfig+0x1ee>
 8006d6a:	e00b      	b.n	8006d84 <UART_SetConfig+0x200>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e00e      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d72:	2302      	movs	r3, #2
 8006d74:	77fb      	strb	r3, [r7, #31]
 8006d76:	e00b      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e008      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d7e:	2308      	movs	r3, #8
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e005      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d84:	2310      	movs	r3, #16
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	bf00      	nop
 8006d8a:	e001      	b.n	8006d90 <UART_SetConfig+0x20c>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	d16e      	bne.n	8006e78 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d828      	bhi.n	8006df2 <UART_SetConfig+0x26e>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x224>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	08006df3 	.word	0x08006df3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006deb 	.word	0x08006deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fe fdfa 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8006dd0:	61b8      	str	r0, [r7, #24]
        break;
 8006dd2:	e013      	b.n	8006dfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7fe fe18 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8006dd8:	61b8      	str	r0, [r7, #24]
        break;
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ddc:	4b25      	ldr	r3, [pc, #148]	; (8006e74 <UART_SetConfig+0x2f0>)
 8006dde:	61bb      	str	r3, [r7, #24]
        break;
 8006de0:	e00c      	b.n	8006dfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fe fd79 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8006de6:	61b8      	str	r0, [r7, #24]
        break;
 8006de8:	e008      	b.n	8006dfc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	61bb      	str	r3, [r7, #24]
        break;
 8006df0:	e004      	b.n	8006dfc <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	77bb      	strb	r3, [r7, #30]
        break;
 8006dfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 8086 	beq.w	8006f10 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	005a      	lsls	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	441a      	add	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d916      	bls.n	8006e50 <UART_SetConfig+0x2cc>
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e28:	d212      	bcs.n	8006e50 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f023 030f 	bic.w	r3, r3, #15
 8006e32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	89fb      	ldrh	r3, [r7, #14]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	89fa      	ldrh	r2, [r7, #14]
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	e05f      	b.n	8006f10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	77bb      	strb	r3, [r7, #30]
 8006e54:	e05c      	b.n	8006f10 <UART_SetConfig+0x38c>
 8006e56:	bf00      	nop
 8006e58:	efff69f3 	.word	0xefff69f3
 8006e5c:	40013800 	.word	0x40013800
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40004400 	.word	0x40004400
 8006e68:	40004800 	.word	0x40004800
 8006e6c:	40004c00 	.word	0x40004c00
 8006e70:	40005000 	.word	0x40005000
 8006e74:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e78:	7ffb      	ldrb	r3, [r7, #31]
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d827      	bhi.n	8006ece <UART_SetConfig+0x34a>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x300>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	08006ecf 	.word	0x08006ecf
 8006e94:	08006ebf 	.word	0x08006ebf
 8006e98:	08006ecf 	.word	0x08006ecf
 8006e9c:	08006ecf 	.word	0x08006ecf
 8006ea0:	08006ecf 	.word	0x08006ecf
 8006ea4:	08006ec7 	.word	0x08006ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea8:	f7fe fd8c 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8006eac:	61b8      	str	r0, [r7, #24]
        break;
 8006eae:	e013      	b.n	8006ed8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb0:	f7fe fdaa 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8006eb4:	61b8      	str	r0, [r7, #24]
        break;
 8006eb6:	e00f      	b.n	8006ed8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <UART_SetConfig+0x3a4>)
 8006eba:	61bb      	str	r3, [r7, #24]
        break;
 8006ebc:	e00c      	b.n	8006ed8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fe fd0b 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8006ec2:	61b8      	str	r0, [r7, #24]
        break;
 8006ec4:	e008      	b.n	8006ed8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eca:	61bb      	str	r3, [r7, #24]
        break;
 8006ecc:	e004      	b.n	8006ed8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ed6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d018      	beq.n	8006f10 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	085a      	lsrs	r2, r3, #1
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	441a      	add	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	d908      	bls.n	8006f0c <UART_SetConfig+0x388>
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d204      	bcs.n	8006f0c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	e001      	b.n	8006f10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	007a1200 	.word	0x007a1200

08006f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01a      	beq.n	8007042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702a:	d10a      	bne.n	8007042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007080:	f7fa fdd8 	bl	8001c34 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b08      	cmp	r3, #8
 8007092:	d10e      	bne.n	80070b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f82d 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e023      	b.n	80070fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d10e      	bne.n	80070de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f817 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e00d      	b.n	80070fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b09c      	sub	sp, #112	; 0x70
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007112:	e0a5      	b.n	8007260 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	f000 80a1 	beq.w	8007260 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711e:	f7fa fd89 	bl	8001c34 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <UART_WaitOnFlagUntilTimeout+0x32>
 800712e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007130:	2b00      	cmp	r3, #0
 8007132:	d13e      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007148:	667b      	str	r3, [r7, #100]	; 0x64
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007154:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007158:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	663b      	str	r3, [r7, #96]	; 0x60
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007186:	64ba      	str	r2, [r7, #72]	; 0x48
 8007188:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800718c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e067      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d04f      	beq.n	8007260 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ce:	d147      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e6      	bne.n	80071da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	613b      	str	r3, [r7, #16]
   return(result);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	66bb      	str	r3, [r7, #104]	; 0x68
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800722c:	623a      	str	r2, [r7, #32]
 800722e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	69f9      	ldr	r1, [r7, #28]
 8007232:	6a3a      	ldr	r2, [r7, #32]
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	61bb      	str	r3, [r7, #24]
   return(result);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e5      	bne.n	800720c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e010      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69da      	ldr	r2, [r3, #28]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4013      	ands	r3, r2
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	429a      	cmp	r2, r3
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	429a      	cmp	r2, r3
 800727c:	f43f af4a 	beq.w	8007114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3770      	adds	r7, #112	; 0x70
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fccd 	bl	8008c3a <VL53L0X_get_offset_calibration_data_micro_meter>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80072a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80072b0:	b5b0      	push	{r4, r5, r7, lr}
 80072b2:	b096      	sub	sp, #88	; 0x58
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80072be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80072c6:	2200      	movs	r2, #0
 80072c8:	2188      	movs	r1, #136	; 0x88
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f004 fed0 	bl	800c070 <VL53L0X_WrByte>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072e4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80072ee:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a9e      	ldr	r2, [pc, #632]	; (8007570 <VL53L0X_DataInit+0x2c0>)
 80072f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a9d      	ldr	r2, [pc, #628]	; (8007574 <VL53L0X_DataInit+0x2c4>)
 80072fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007308:	f107 0310 	add.w	r3, r7, #16
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fac2 	bl	8007898 <VL53L0X_GetDeviceParameters>
 8007314:	4603      	mov	r3, r0
 8007316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800731a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800731e:	2b00      	cmp	r3, #0
 8007320:	d112      	bne.n	8007348 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007322:	2300      	movs	r3, #0
 8007324:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007326:	2300      	movs	r3, #0
 8007328:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f103 0410 	add.w	r4, r3, #16
 8007330:	f107 0510 	add.w	r5, r7, #16
 8007334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800733a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800733c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800733e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2264      	movs	r2, #100	; 0x64
 800734c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007356:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007360:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800736a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007376:	2201      	movs	r2, #1
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f004 fe78 	bl	800c070 <VL53L0X_WrByte>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007388:	4313      	orrs	r3, r2
 800738a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800738e:	2201      	movs	r2, #1
 8007390:	21ff      	movs	r1, #255	; 0xff
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f004 fe6c 	bl	800c070 <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80073a6:	2200      	movs	r2, #0
 80073a8:	2100      	movs	r1, #0
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f004 fe60 	bl	800c070 <VL53L0X_WrByte>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80073be:	f107 030f 	add.w	r3, r7, #15
 80073c2:	461a      	mov	r2, r3
 80073c4:	2191      	movs	r1, #145	; 0x91
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f004 fed4 	bl	800c174 <VL53L0X_RdByte>
 80073cc:	4603      	mov	r3, r0
 80073ce:	461a      	mov	r2, r3
 80073d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80073e2:	2201      	movs	r2, #1
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f004 fe42 	bl	800c070 <VL53L0X_WrByte>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073fa:	2200      	movs	r2, #0
 80073fc:	21ff      	movs	r1, #255	; 0xff
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f004 fe36 	bl	800c070 <VL53L0X_WrByte>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800740c:	4313      	orrs	r3, r2
 800740e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007412:	2200      	movs	r2, #0
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f004 fe2a 	bl	800c070 <VL53L0X_WrByte>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007424:	4313      	orrs	r3, r2
 8007426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800742a:	2300      	movs	r3, #0
 800742c:	653b      	str	r3, [r7, #80]	; 0x50
 800742e:	e014      	b.n	800745a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007430:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007434:	2b00      	cmp	r3, #0
 8007436:	d114      	bne.n	8007462 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	2201      	movs	r2, #1
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fd51 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800744e:	4313      	orrs	r3, r2
 8007450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007456:	3301      	adds	r3, #1
 8007458:	653b      	str	r3, [r7, #80]	; 0x50
 800745a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745c:	2b05      	cmp	r3, #5
 800745e:	dde7      	ble.n	8007430 <VL53L0X_DataInit+0x180>
 8007460:	e000      	b.n	8007464 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8007462:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007464:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007468:	2b00      	cmp	r3, #0
 800746a:	d107      	bne.n	800747c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800746c:	2200      	movs	r2, #0
 800746e:	2102      	movs	r1, #2
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fd39 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800747c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007480:	2b00      	cmp	r3, #0
 8007482:	d107      	bne.n	8007494 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007484:	2200      	movs	r2, #0
 8007486:	2103      	movs	r1, #3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd2d 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007494:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800749c:	2200      	movs	r2, #0
 800749e:	2104      	movs	r1, #4
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fd21 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80074ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d107      	bne.n	80074c4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80074b4:	2200      	movs	r2, #0
 80074b6:	2105      	movs	r1, #5
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fd15 	bl	8007ee8 <VL53L0X_SetLimitCheckEnable>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80074c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80074cc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fdb8 	bl	8008048 <VL53L0X_SetLimitCheckValue>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80074de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80074e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ea:	2101      	movs	r1, #1
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fdab 	bl	8008048 <VL53L0X_SetLimitCheckValue>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007500:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007504:	2102      	movs	r1, #2
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fd9e 	bl	8008048 <VL53L0X_SetLimitCheckValue>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007512:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800751a:	2200      	movs	r2, #0
 800751c:	2103      	movs	r1, #3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fd92 	bl	8008048 <VL53L0X_SetLimitCheckValue>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800752a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	2101      	movs	r1, #1
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f004 fd96 	bl	800c070 <VL53L0X_WrByte>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007552:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8007562:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007566:	4618      	mov	r0, r3
 8007568:	3758      	adds	r7, #88	; 0x58
 800756a:	46bd      	mov	sp, r7
 800756c:	bdb0      	pop	{r4, r5, r7, pc}
 800756e:	bf00      	nop
 8007570:	00016b85 	.word	0x00016b85
 8007574:	000970a4 	.word	0x000970a4

08007578 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007578:	b5b0      	push	{r4, r5, r7, lr}
 800757a:	b09e      	sub	sp, #120	; 0x78
 800757c:	af02      	add	r7, sp, #8
 800757e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007580:	2300      	movs	r3, #0
 8007582:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007586:	f107 031c 	add.w	r3, r7, #28
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f004 fed3 	bl	800c33a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80075b4:	2101      	movs	r1, #1
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f002 fa95 	bl	8009ae6 <VL53L0X_get_info_from_device>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80075c8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80075d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80075d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d80d      	bhi.n	80075f8 <VL53L0X_StaticInit+0x80>
 80075dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80075e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d806      	bhi.n	80075f8 <VL53L0X_StaticInit+0x80>
 80075ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10e      	bne.n	8007610 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80075f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f4:	2b0c      	cmp	r3, #12
 80075f6:	d90b      	bls.n	8007610 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80075f8:	f107 0218 	add.w	r2, r7, #24
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fd14 	bl	8009030 <VL53L0X_perform_ref_spad_management>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800760e:	e009      	b.n	8007624 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007614:	461a      	mov	r2, r3
 8007616:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 ff15 	bl	8009448 <VL53L0X_set_reference_spads>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007624:	4b94      	ldr	r3, [pc, #592]	; (8007878 <VL53L0X_StaticInit+0x300>)
 8007626:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007628:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10f      	bne.n	8007650 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800763a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007648:	66bb      	str	r3, [r7, #104]	; 0x68
 800764a:	e001      	b.n	8007650 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800764c:	4b8a      	ldr	r3, [pc, #552]	; (8007878 <VL53L0X_StaticInit+0x300>)
 800764e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007650:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007658:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f003 fde8 	bl	800b230 <VL53L0X_load_tuning_settings>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007666:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800766e:	2300      	movs	r3, #0
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2304      	movs	r3, #4
 8007674:	2200      	movs	r2, #0
 8007676:	2100      	movs	r1, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f90d 	bl	8008898 <VL53L0X_SetGpioConfig>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007684:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007688:	2b00      	cmp	r3, #0
 800768a:	d121      	bne.n	80076d0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800768c:	2201      	movs	r2, #1
 800768e:	21ff      	movs	r1, #255	; 0xff
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f004 fced 	bl	800c070 <VL53L0X_WrByte>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800769c:	f107 031a 	add.w	r3, r7, #26
 80076a0:	461a      	mov	r2, r3
 80076a2:	2184      	movs	r1, #132	; 0x84
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f004 fd8f 	bl	800c1c8 <VL53L0X_RdWord>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80076b8:	2200      	movs	r2, #0
 80076ba:	21ff      	movs	r1, #255	; 0xff
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f004 fcd7 	bl	800c070 <VL53L0X_WrByte>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80076d8:	8b7b      	ldrh	r3, [r7, #26]
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	461a      	mov	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80076e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d108      	bne.n	80076fe <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80076ec:	f107 031c 	add.w	r3, r7, #28
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8d0 	bl	8007898 <VL53L0X_GetDeviceParameters>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80076fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007706:	f107 0319 	add.w	r3, r7, #25
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9ae 	bl	8007a6e <VL53L0X_GetFractionEnable>
 8007712:	4603      	mov	r3, r0
 8007714:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007718:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007720:	7e7a      	ldrb	r2, [r7, #25]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007728:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10e      	bne.n	800774e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0410 	add.w	r4, r3, #16
 8007736:	f107 051c 	add.w	r5, r7, #28
 800773a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800773c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800773e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007746:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800774a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800774e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007752:	2b00      	cmp	r3, #0
 8007754:	d111      	bne.n	800777a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007756:	f107 0319 	add.w	r3, r7, #25
 800775a:	461a      	mov	r2, r3
 800775c:	2101      	movs	r1, #1
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f004 fd08 	bl	800c174 <VL53L0X_RdByte>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800776a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007772:	7e7a      	ldrb	r2, [r7, #25]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800777a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800777e:	2b00      	cmp	r3, #0
 8007780:	d107      	bne.n	8007792 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f9e6 	bl	8007b58 <VL53L0X_SetSequenceStepEnable>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007792:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007796:	2b00      	cmp	r3, #0
 8007798:	d107      	bne.n	80077aa <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800779a:	2200      	movs	r2, #0
 800779c:	2102      	movs	r1, #2
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9da 	bl	8007b58 <VL53L0X_SetSequenceStepEnable>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80077aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80077ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80077c2:	f107 0313 	add.w	r3, r7, #19
 80077c6:	461a      	mov	r2, r3
 80077c8:	2100      	movs	r1, #0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9ac 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80077de:	7cfa      	ldrb	r2, [r7, #19]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80077e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80077ee:	f107 0313 	add.w	r3, r7, #19
 80077f2:	461a      	mov	r2, r3
 80077f4:	2101      	movs	r1, #1
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f996 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007802:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800780a:	7cfa      	ldrb	r2, [r7, #19]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007812:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800781a:	f107 030c 	add.w	r3, r7, #12
 800781e:	461a      	mov	r2, r3
 8007820:	2103      	movs	r1, #3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f002 fee0 	bl	800a5e8 <get_sequence_step_timeout>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800782e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800783e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007846:	f107 030c 	add.w	r3, r7, #12
 800784a:	461a      	mov	r2, r3
 800784c:	2104      	movs	r1, #4
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f002 feca 	bl	800a5e8 <get_sequence_step_timeout>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800785a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800786a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800786e:	4618      	mov	r0, r3
 8007870:	3770      	adds	r7, #112	; 0x70
 8007872:	46bd      	mov	sp, r7
 8007874:	bdb0      	pop	{r4, r5, r7, pc}
 8007876:	bf00      	nop
 8007878:	20000010 	.word	0x20000010

0800787c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007884:	239d      	movs	r3, #157	; 0x9d
 8007886:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8cc 	bl	8007a48 <VL53L0X_GetDeviceMode>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80078b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa94 	bl	8007df0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80078cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80078da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d107      	bne.n	80078f2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3310      	adds	r3, #16
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 faca 	bl	8007e82 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80078f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d107      	bne.n	800790a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fcc2 	bl	800728a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800790a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d134      	bne.n	800797c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	e02a      	b.n	800796e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d12a      	bne.n	8007976 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	b299      	uxth	r1, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3308      	adds	r3, #8
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	461a      	mov	r2, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fbea 	bl	800810c <VL53L0X_GetLimitCheckValue>
 8007938:	4603      	mov	r3, r0
 800793a:	461a      	mov	r2, r3
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	4313      	orrs	r3, r2
 8007940:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d117      	bne.n	800797a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	b299      	uxth	r1, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3318      	adds	r3, #24
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4413      	add	r3, r2
 8007956:	461a      	mov	r2, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb51 	bl	8008000 <VL53L0X_GetLimitCheckEnable>
 800795e:	4603      	mov	r3, r0
 8007960:	461a      	mov	r2, r3
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	4313      	orrs	r3, r2
 8007966:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3301      	adds	r3, #1
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b05      	cmp	r3, #5
 8007972:	ddd1      	ble.n	8007918 <VL53L0X_GetDeviceParameters+0x80>
 8007974:	e002      	b.n	800797c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800797a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800797c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d107      	bne.n	8007994 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	333c      	adds	r3, #60	; 0x3c
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc4c 	bl	8008228 <VL53L0X_GetWrapAroundCheckEnable>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d107      	bne.n	80079ac <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f895 	bl	8007ad2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	2b15      	cmp	r3, #21
 80079cc:	d832      	bhi.n	8007a34 <VL53L0X_SetDeviceMode+0x7c>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <VL53L0X_SetDeviceMode+0x1c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007a35 	.word	0x08007a35
 80079ec:	08007a35 	.word	0x08007a35
 80079f0:	08007a35 	.word	0x08007a35
 80079f4:	08007a35 	.word	0x08007a35
 80079f8:	08007a35 	.word	0x08007a35
 80079fc:	08007a35 	.word	0x08007a35
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a35 	.word	0x08007a35
 8007a08:	08007a35 	.word	0x08007a35
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a35 	.word	0x08007a35
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a35 	.word	0x08007a35
 8007a24:	08007a2d 	.word	0x08007a2d
 8007a28:	08007a2d 	.word	0x08007a2d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	741a      	strb	r2, [r3, #16]
		break;
 8007a32:	e001      	b.n	8007a38 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007a34:	23f8      	movs	r3, #248	; 0xf8
 8007a36:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c1a      	ldrb	r2, [r3, #16]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	2109      	movs	r1, #9
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f004 fb77 	bl	800c174 <VL53L0X_RdByte>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f003 fa26 	bl	800af0e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f003 faf3 	bl	800b0ce <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
 8007b04:	4613      	mov	r3, r2
 8007b06:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007b0c:	78ba      	ldrb	r2, [r7, #2]
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f002 ff3b 	bl	800a98e <VL53L0X_set_vcsel_pulse_period>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	460b      	mov	r3, r1
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f003 f9ad 	bl	800aea0 <VL53L0X_get_vcsel_pulse_period>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
 8007b64:	4613      	mov	r3, r2
 8007b66:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b74:	f107 030f 	add.w	r3, r7, #15
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f004 faf9 	bl	800c174 <VL53L0X_RdByte>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d15a      	bne.n	8007c48 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007b92:	78bb      	ldrb	r3, [r7, #2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d12b      	bne.n	8007bf0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d825      	bhi.n	8007bea <VL53L0X_SetSequenceStepEnable+0x92>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bc3 	.word	0x08007bc3
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007bd7 	.word	0x08007bd7
 8007bb4:	08007be1 	.word	0x08007be1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007bb8:	7dbb      	ldrb	r3, [r7, #22]
 8007bba:	f043 0310 	orr.w	r3, r3, #16
 8007bbe:	75bb      	strb	r3, [r7, #22]
				break;
 8007bc0:	e043      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007bc2:	7dbb      	ldrb	r3, [r7, #22]
 8007bc4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007bc8:	75bb      	strb	r3, [r7, #22]
				break;
 8007bca:	e03e      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	75bb      	strb	r3, [r7, #22]
				break;
 8007bd4:	e039      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bdc:	75bb      	strb	r3, [r7, #22]
				break;
 8007bde:	e034      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
 8007be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be6:	75bb      	strb	r3, [r7, #22]
				break;
 8007be8:	e02f      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007bea:	23fc      	movs	r3, #252	; 0xfc
 8007bec:	75fb      	strb	r3, [r7, #23]
 8007bee:	e02c      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d825      	bhi.n	8007c42 <VL53L0X_SetSequenceStepEnable+0xea>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c11 	.word	0x08007c11
 8007c00:	08007c1b 	.word	0x08007c1b
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007c2f 	.word	0x08007c2f
 8007c0c:	08007c39 	.word	0x08007c39
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	f023 0310 	bic.w	r3, r3, #16
 8007c16:	75bb      	strb	r3, [r7, #22]
				break;
 8007c18:	e017      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007c1a:	7dbb      	ldrb	r3, [r7, #22]
 8007c1c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007c20:	75bb      	strb	r3, [r7, #22]
				break;
 8007c22:	e012      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007c24:	7dbb      	ldrb	r3, [r7, #22]
 8007c26:	f023 0304 	bic.w	r3, r3, #4
 8007c2a:	75bb      	strb	r3, [r7, #22]
				break;
 8007c2c:	e00d      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007c2e:	7dbb      	ldrb	r3, [r7, #22]
 8007c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c34:	75bb      	strb	r3, [r7, #22]
				break;
 8007c36:	e008      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007c38:	7dbb      	ldrb	r3, [r7, #22]
 8007c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3e:	75bb      	strb	r3, [r7, #22]
				break;
 8007c40:	e003      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c42:	23fc      	movs	r3, #252	; 0xfc
 8007c44:	75fb      	strb	r3, [r7, #23]
 8007c46:	e000      	b.n	8007c4a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007c48:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	7dba      	ldrb	r2, [r7, #22]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d01e      	beq.n	8007c90 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d107      	bne.n	8007c6a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007c5a:	7dbb      	ldrb	r3, [r7, #22]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2101      	movs	r1, #1
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f004 fa05 	bl	800c070 <VL53L0X_WrByte>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7dba      	ldrb	r2, [r7, #22]
 8007c76:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007c88:	6939      	ldr	r1, [r7, #16]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff ff0e 	bl	8007aac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607b      	str	r3, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	72fb      	strb	r3, [r7, #11]
 8007caa:	4613      	mov	r3, r2
 8007cac:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d836      	bhi.n	8007d2c <sequence_step_enabled+0x90>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <sequence_step_enabled+0x28>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cd9 	.word	0x08007cd9
 8007cc8:	08007ceb 	.word	0x08007ceb
 8007ccc:	08007cfd 	.word	0x08007cfd
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007d21 	.word	0x08007d21
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007cd8:	7abb      	ldrb	r3, [r7, #10]
 8007cda:	111b      	asrs	r3, r3, #4
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	701a      	strb	r2, [r3, #0]
		break;
 8007ce8:	e022      	b.n	8007d30 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007cea:	7abb      	ldrb	r3, [r7, #10]
 8007cec:	10db      	asrs	r3, r3, #3
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	701a      	strb	r2, [r3, #0]
		break;
 8007cfa:	e019      	b.n	8007d30 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007cfc:	7abb      	ldrb	r3, [r7, #10]
 8007cfe:	109b      	asrs	r3, r3, #2
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	701a      	strb	r2, [r3, #0]
		break;
 8007d0c:	e010      	b.n	8007d30 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007d0e:	7abb      	ldrb	r3, [r7, #10]
 8007d10:	119b      	asrs	r3, r3, #6
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	701a      	strb	r2, [r3, #0]
		break;
 8007d1e:	e007      	b.n	8007d30 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007d20:	7abb      	ldrb	r3, [r7, #10]
 8007d22:	09db      	lsrs	r3, r3, #7
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	701a      	strb	r2, [r3, #0]
		break;
 8007d2a:	e001      	b.n	8007d30 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d2c:	23fc      	movs	r3, #252	; 0xfc
 8007d2e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d52:	f107 030e 	add.w	r3, r7, #14
 8007d56:	461a      	mov	r2, r3
 8007d58:	2101      	movs	r1, #1
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f004 fa0a 	bl	800c174 <VL53L0X_RdByte>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007d6c:	7bba      	ldrb	r2, [r7, #14]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff92 	bl	8007c9c <sequence_step_enabled>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007d84:	7bba      	ldrb	r2, [r7, #14]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	3302      	adds	r3, #2
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ff85 	bl	8007c9c <sequence_step_enabled>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007d9e:	7bba      	ldrb	r2, [r7, #14]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	2102      	movs	r1, #2
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff ff78 	bl	8007c9c <sequence_step_enabled>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d108      	bne.n	8007dca <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007db8:	7bba      	ldrb	r2, [r7, #14]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	3303      	adds	r3, #3
 8007dbe:	2103      	movs	r1, #3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ff6b 	bl	8007c9c <sequence_step_enabled>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d108      	bne.n	8007de4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007dd2:	7bba      	ldrb	r2, [r7, #14]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	2104      	movs	r1, #4
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff ff5e 	bl	8007c9c <sequence_step_enabled>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	461a      	mov	r2, r3
 8007e04:	21f8      	movs	r1, #248	; 0xf8
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f004 f9de 	bl	800c1c8 <VL53L0X_RdWord>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007e18:	f107 0308 	add.w	r3, r7, #8
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	2104      	movs	r1, #4
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f004 fa09 	bl	800c238 <VL53L0X_RdDWord>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10c      	bne.n	8007e4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007e32:	89bb      	ldrh	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	89ba      	ldrh	r2, [r7, #12]
 8007e3c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7f1b      	ldrb	r3, [r3, #28]
 8007e6a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	7bba      	ldrb	r2, [r7, #14]
 8007e70:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007e90:	f107 030e 	add.w	r3, r7, #14
 8007e94:	461a      	mov	r2, r3
 8007e96:	2120      	movs	r1, #32
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f004 f995 	bl	800c1c8 <VL53L0X_RdWord>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d118      	bne.n	8007edc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007eaa:	89fb      	ldrh	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	771a      	strb	r2, [r3, #28]
 8007ec2:	e00b      	b.n	8007edc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	807b      	strh	r3, [r7, #2]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007f08:	887b      	ldrh	r3, [r7, #2]
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	d902      	bls.n	8007f14 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f0e:	23fc      	movs	r3, #252	; 0xfc
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e05b      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007f14:	787b      	ldrb	r3, [r7, #1]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73bb      	strb	r3, [r7, #14]
 8007f26:	e00a      	b.n	8007f3e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f28:	887b      	ldrh	r3, [r7, #2]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007f3e:	887b      	ldrh	r3, [r7, #2]
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d841      	bhi.n	8007fc8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <VL53L0X_SetLimitCheckEnable+0x64>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f65 	.word	0x08007f65
 8007f50:	08007f6f 	.word	0x08007f6f
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08007f8f 	.word	0x08007f8f
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007fb1 	.word	0x08007fb1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7bfa      	ldrb	r2, [r7, #15]
 8007f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007f6c:	e02e      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	2144      	movs	r1, #68	; 0x44
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f004 f89d 	bl	800c0b8 <VL53L0X_WrWord>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]

			break;
 8007f82:	e023      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	7bfa      	ldrb	r2, [r7, #15]
 8007f88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007f8c:	e01e      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7bfa      	ldrb	r2, [r7, #15]
 8007f92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007f96:	e019      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007f9e:	7b7b      	ldrb	r3, [r7, #13]
 8007fa0:	22fe      	movs	r2, #254	; 0xfe
 8007fa2:	2160      	movs	r1, #96	; 0x60
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f004 f8b1 	bl	800c10c <VL53L0X_UpdateByte>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007fae:	e00d      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007fb6:	7b7b      	ldrb	r3, [r7, #13]
 8007fb8:	22ef      	movs	r2, #239	; 0xef
 8007fba:	2160      	movs	r1, #96	; 0x60
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f004 f8a5 	bl	800c10c <VL53L0X_UpdateByte>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007fc6:	e001      	b.n	8007fcc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fc8:	23fc      	movs	r3, #252	; 0xfc
 8007fca:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10f      	bne.n	8007ff4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007fd4:	787b      	ldrb	r3, [r7, #1]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	4413      	add	r3, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007fe6:	e005      	b.n	8007ff4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007fe8:	887b      	ldrh	r3, [r7, #2]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	460b      	mov	r3, r1
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	2b05      	cmp	r3, #5
 8008016:	d905      	bls.n	8008024 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008018:	23fc      	movs	r3, #252	; 0xfc
 800801a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e008      	b.n	8008036 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008024:	897b      	ldrh	r3, [r7, #10]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800802e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7dba      	ldrb	r2, [r7, #22]
 8008034:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	460b      	mov	r3, r1
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008064:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008066:	7dbb      	ldrb	r3, [r7, #22]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d107      	bne.n	800807c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800806c:	897b      	ldrh	r3, [r7, #10]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	330c      	adds	r3, #12
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	e040      	b.n	80080fe <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800807c:	897b      	ldrh	r3, [r7, #10]
 800807e:	2b05      	cmp	r3, #5
 8008080:	d830      	bhi.n	80080e4 <VL53L0X_SetLimitCheckValue+0x9c>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <VL53L0X_SetLimitCheckValue+0x40>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080bf 	.word	0x080080bf
 8008094:	080080c7 	.word	0x080080c7
 8008098:	080080cf 	.word	0x080080cf
 800809c:	080080cf 	.word	0x080080cf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80080a6:	e01f      	b.n	80080e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	2144      	movs	r1, #68	; 0x44
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f004 f800 	bl	800c0b8 <VL53L0X_WrWord>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80080bc:	e014      	b.n	80080e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80080c4:	e010      	b.n	80080e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80080cc:	e00c      	b.n	80080e8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	2164      	movs	r1, #100	; 0x64
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f003 ffed 	bl	800c0b8 <VL53L0X_WrWord>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80080e2:	e001      	b.n	80080e8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080e4:	23fc      	movs	r3, #252	; 0xfc
 80080e6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80080e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080f0:	897b      	ldrh	r3, [r7, #10]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	330c      	adds	r3, #12
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop

0800810c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	460b      	mov	r3, r1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
 800811c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008122:	897b      	ldrh	r3, [r7, #10]
 8008124:	2b05      	cmp	r3, #5
 8008126:	d847      	bhi.n	80081b8 <VL53L0X_GetLimitCheckValue+0xac>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <VL53L0X_GetLimitCheckValue+0x24>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	08008155 	.word	0x08008155
 8008138:	0800817b 	.word	0x0800817b
 800813c:	08008187 	.word	0x08008187
 8008140:	08008193 	.word	0x08008193
 8008144:	08008193 	.word	0x08008193

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	77bb      	strb	r3, [r7, #30]
		break;
 8008152:	e033      	b.n	80081bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008154:	f107 0316 	add.w	r3, r7, #22
 8008158:	461a      	mov	r2, r3
 800815a:	2144      	movs	r1, #68	; 0x44
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f004 f833 	bl	800c1c8 <VL53L0X_RdWord>
 8008162:	4603      	mov	r3, r0
 8008164:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800816e:	8afb      	ldrh	r3, [r7, #22]
 8008170:	025b      	lsls	r3, r3, #9
 8008172:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008174:	2301      	movs	r3, #1
 8008176:	77bb      	strb	r3, [r7, #30]
		break;
 8008178:	e020      	b.n	80081bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	77bb      	strb	r3, [r7, #30]
		break;
 8008184:	e01a      	b.n	80081bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	77bb      	strb	r3, [r7, #30]
		break;
 8008190:	e014      	b.n	80081bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008192:	f107 0316 	add.w	r3, r7, #22
 8008196:	461a      	mov	r2, r3
 8008198:	2164      	movs	r1, #100	; 0x64
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f004 f814 	bl	800c1c8 <VL53L0X_RdWord>
 80081a0:	4603      	mov	r3, r0
 80081a2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80081a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80081ac:	8afb      	ldrh	r3, [r7, #22]
 80081ae:	025b      	lsls	r3, r3, #9
 80081b0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	77bb      	strb	r3, [r7, #30]
		break;
 80081b6:	e001      	b.n	80081bc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081b8:	23fc      	movs	r3, #252	; 0xfc
 80081ba:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d12a      	bne.n	800821a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80081c4:	7fbb      	ldrb	r3, [r7, #30]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d124      	bne.n	8008214 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d110      	bne.n	80081f2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80081d0:	897b      	ldrh	r3, [r7, #10]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	330c      	adds	r3, #12
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80081e4:	897b      	ldrh	r3, [r7, #10]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80081f0:	e013      	b.n	800821a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80081f8:	897b      	ldrh	r3, [r7, #10]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	330c      	adds	r3, #12
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008206:	897b      	ldrh	r3, [r7, #10]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008212:	e002      	b.n	800821a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800821a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800821e:	4618      	mov	r0, r3
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop

08008228 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008236:	f107 030e 	add.w	r3, r7, #14
 800823a:	461a      	mov	r2, r3
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f003 ff98 	bl	800c174 <VL53L0X_RdByte>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10e      	bne.n	800826e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008250:	7bba      	ldrb	r2, [r7, #14]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	b25b      	sxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	da03      	bge.n	8008268 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e002      	b.n	800826e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800826e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008298:	f107 030e 	add.w	r3, r7, #14
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fbd2 	bl	8007a48 <VL53L0X_GetDeviceMode>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d107      	bne.n	80082c0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d104      	bne.n	80082c0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f898 	bl	80083ec <VL53L0X_StartMeasurement>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80082c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fb3f 	bl	800994c <VL53L0X_measurement_poll_for_completion>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80082d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2203      	movs	r2, #3
 80082e4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80082e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008300:	2300      	movs	r3, #0
 8008302:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008304:	2301      	movs	r3, #1
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 fae1 	bl	80098d2 <VL53L0X_perform_ref_calibration>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832c:	2300      	movs	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008336:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008338:	7dbb      	ldrb	r3, [r7, #22]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d005      	beq.n	800834a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800833e:	7dbb      	ldrb	r3, [r7, #22]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d002      	beq.n	800834a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008344:	7dbb      	ldrb	r3, [r7, #22]
 8008346:	2b03      	cmp	r3, #3
 8008348:	d147      	bne.n	80083da <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	f107 0210 	add.w	r2, r7, #16
 8008352:	2101      	movs	r1, #1
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fbc3 	bl	8008ae0 <VL53L0X_GetInterruptThresholds>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008364:	d803      	bhi.n	800836e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008366:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008368:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800836c:	d935      	bls.n	80083da <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800836e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d131      	bne.n	80083da <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800837c:	491a      	ldr	r1, [pc, #104]	; (80083e8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f002 ff56 	bl	800b230 <VL53L0X_load_tuning_settings>
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]
 8008388:	e027      	b.n	80083da <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800838a:	2204      	movs	r2, #4
 800838c:	21ff      	movs	r1, #255	; 0xff
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f003 fe6e 	bl	800c070 <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	4313      	orrs	r3, r2
 800839c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800839e:	2200      	movs	r2, #0
 80083a0:	2170      	movs	r1, #112	; 0x70
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f003 fe64 	bl	800c070 <VL53L0X_WrByte>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083b2:	2200      	movs	r2, #0
 80083b4:	21ff      	movs	r1, #255	; 0xff
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f003 fe5a 	bl	800c070 <VL53L0X_WrByte>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80083c6:	2200      	movs	r2, #0
 80083c8:	2180      	movs	r1, #128	; 0x80
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f003 fe50 	bl	800c070 <VL53L0X_WrByte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	461a      	mov	r2, r3
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80083da:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000104 	.word	0x20000104

080083ec <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80083fc:	f107 030e 	add.w	r3, r7, #14
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fb20 	bl	8007a48 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008408:	2201      	movs	r2, #1
 800840a:	2180      	movs	r1, #128	; 0x80
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f003 fe2f 	bl	800c070 <VL53L0X_WrByte>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008416:	2201      	movs	r2, #1
 8008418:	21ff      	movs	r1, #255	; 0xff
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f003 fe28 	bl	800c070 <VL53L0X_WrByte>
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008424:	2200      	movs	r2, #0
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f003 fe21 	bl	800c070 <VL53L0X_WrByte>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008438:	461a      	mov	r2, r3
 800843a:	2191      	movs	r1, #145	; 0x91
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f003 fe17 	bl	800c070 <VL53L0X_WrByte>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008446:	2201      	movs	r2, #1
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f003 fe10 	bl	800c070 <VL53L0X_WrByte>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008454:	2200      	movs	r2, #0
 8008456:	21ff      	movs	r1, #255	; 0xff
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f003 fe09 	bl	800c070 <VL53L0X_WrByte>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008462:	2200      	movs	r2, #0
 8008464:	2180      	movs	r1, #128	; 0x80
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f003 fe02 	bl	800c070 <VL53L0X_WrByte>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d037      	beq.n	80084e6 <VL53L0X_StartMeasurement+0xfa>
 8008476:	2b03      	cmp	r3, #3
 8008478:	d04f      	beq.n	800851a <VL53L0X_StartMeasurement+0x12e>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d167      	bne.n	800854e <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800847e:	2201      	movs	r2, #1
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f003 fdf4 	bl	800c070 <VL53L0X_WrByte>
 8008488:	4603      	mov	r3, r0
 800848a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d15d      	bne.n	8008554 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d008      	beq.n	80084b4 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 80084a2:	f107 030d 	add.w	r3, r7, #13
 80084a6:	461a      	mov	r2, r3
 80084a8:	2100      	movs	r1, #0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f003 fe62 	bl	800c174 <VL53L0X_RdByte>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80084ba:	7b7a      	ldrb	r2, [r7, #13]
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4013      	ands	r3, r2
 80084c0:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80084c2:	7bfa      	ldrb	r2, [r7, #15]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d107      	bne.n	80084d8 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 80084c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80084d6:	d3e1      	bcc.n	800849c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80084de:	d339      	bcc.n	8008554 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 80084e0:	23f9      	movs	r3, #249	; 0xf9
 80084e2:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80084e4:	e036      	b.n	8008554 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80084e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80084ee:	2101      	movs	r1, #1
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ff15 	bl	8008320 <VL53L0X_CheckAndLoadInterruptSettings>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80084fa:	2202      	movs	r2, #2
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f003 fdb6 	bl	800c070 <VL53L0X_WrByte>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d123      	bne.n	8008558 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008518:	e01e      	b.n	8008558 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800851a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008522:	2101      	movs	r1, #1
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fefb 	bl	8008320 <VL53L0X_CheckAndLoadInterruptSettings>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800852e:	2204      	movs	r2, #4
 8008530:	2100      	movs	r1, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f003 fd9c 	bl	800c070 <VL53L0X_WrByte>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10b      	bne.n	800855c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2204      	movs	r2, #4
 8008548:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800854c:	e006      	b.n	800855c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800854e:	23f8      	movs	r3, #248	; 0xf8
 8008550:	75fb      	strb	r3, [r7, #23]
 8008552:	e004      	b.n	800855e <VL53L0X_StartMeasurement+0x172>
		break;
 8008554:	bf00      	nop
 8008556:	e002      	b.n	800855e <VL53L0X_StartMeasurement+0x172>
		break;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <VL53L0X_StartMeasurement+0x172>
		break;
 800855c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800855e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800857e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b04      	cmp	r3, #4
 8008584:	d112      	bne.n	80085ac <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008586:	f107 0308 	add.w	r3, r7, #8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb1d 	bl	8008bcc <VL53L0X_GetInterruptMaskStatus>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b04      	cmp	r3, #4
 800859a:	d103      	bne.n	80085a4 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2201      	movs	r2, #1
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	e01c      	b.n	80085de <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	e018      	b.n	80085de <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80085ac:	f107 030d 	add.w	r3, r7, #13
 80085b0:	461a      	mov	r2, r3
 80085b2:	2114      	movs	r1, #20
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f003 fddd 	bl	800c174 <VL53L0X_RdByte>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80085be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80085c6:	7b7b      	ldrb	r3, [r7, #13]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2201      	movs	r2, #1
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	e002      	b.n	80085de <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80085ec:	b5b0      	push	{r4, r5, r7, lr}
 80085ee:	b096      	sub	sp, #88	; 0x58
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80085fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008600:	230c      	movs	r3, #12
 8008602:	2114      	movs	r1, #20
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f003 fd07 	bl	800c018 <VL53L0X_ReadMulti>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008610:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 80d2 	bne.w	80087be <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2200      	movs	r2, #0
 800861e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008626:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800862a:	b29b      	uxth	r3, r3
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	b29a      	uxth	r2, r3
 8008630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008634:	b29b      	uxth	r3, r3
 8008636:	4413      	add	r3, r2
 8008638:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008642:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008646:	b29b      	uxth	r3, r3
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	b29a      	uxth	r2, r3
 800864c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008650:	b29b      	uxth	r3, r3
 8008652:	4413      	add	r3, r2
 8008654:	b29b      	uxth	r3, r3
 8008656:	025b      	lsls	r3, r3, #9
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800865e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008660:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008664:	b29b      	uxth	r3, r3
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	b29a      	uxth	r2, r3
 800866a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800866e:	b29b      	uxth	r3, r3
 8008670:	4413      	add	r3, r2
 8008672:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800867a:	025b      	lsls	r3, r3, #9
 800867c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008682:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008686:	b29b      	uxth	r3, r3
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	b29a      	uxth	r2, r3
 800868c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008690:	b29b      	uxth	r3, r3
 8008692:	4413      	add	r3, r2
 8008694:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800869e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80086a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80086ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80086b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80086ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086c0:	d047      	beq.n	8008752 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80086c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80086c4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80086c8:	fb02 f303 	mul.w	r3, r2, r3
 80086cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086d0:	4a58      	ldr	r2, [pc, #352]	; (8008834 <VL53L0X_GetRangingMeasurementData+0x248>)
 80086d2:	fb82 1203 	smull	r1, r2, r2, r3
 80086d6:	1192      	asrs	r2, r2, #6
 80086d8:	17db      	asrs	r3, r3, #31
 80086da:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80086dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7f1b      	ldrb	r3, [r3, #28]
 80086ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80086ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02d      	beq.n	8008752 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80086f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80086f8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80086fc:	fb02 f303 	mul.w	r3, r2, r3
 8008700:	121b      	asrs	r3, r3, #8
 8008702:	461a      	mov	r2, r3
				if ((SignalRate
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	4293      	cmp	r3, r2
 8008708:	d10d      	bne.n	8008726 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800870a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8008712:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008716:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800871a:	e016      	b.n	800874a <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 800871c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008720:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008724:	e011      	b.n	800874a <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008726:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800872a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800872c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008730:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008732:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008736:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800873a:	121b      	asrs	r3, r3, #8
 800873c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800873e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008740:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008746:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800874a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800874e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008752:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00d      	beq.n	8008776 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800875a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008766:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800876a:	b2db      	uxtb	r3, r3
 800876c:	019b      	lsls	r3, r3, #6
 800876e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	75da      	strb	r2, [r3, #23]
 8008774:	e006      	b.n	8008784 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800877c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008784:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008788:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800878c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	4613      	mov	r3, r2
 8008798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f003 f9f0 	bl	800bb80 <VL53L0X_get_pal_range_status>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80087ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d103      	bne.n	80087be <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80087b6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80087be:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d12f      	bne.n	8008826 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f107 040c 	add.w	r4, r7, #12
 80087cc:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80087d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80087e0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80087ee:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80087f4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80087fa:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008800:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008806:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800880c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008816:	f107 050c 	add.w	r5, r7, #12
 800881a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800881c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800881e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008826:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800882a:	4618      	mov	r0, r3
 800882c:	3750      	adds	r7, #80	; 0x50
 800882e:	46bd      	mov	sp, r7
 8008830:	bdb0      	pop	{r4, r5, r7, pc}
 8008832:	bf00      	nop
 8008834:	10624dd3 	.word	0x10624dd3

08008838 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff f8b5 	bl	80079b8 <VL53L0X_SetDeviceMode>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fd16 	bl	800828c <VL53L0X_PerformSingleMeasurement>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d105      	bne.n	8008878 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff febc 	bl	80085ec <VL53L0X_GetRangingMeasurementData>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008880:	2100      	movs	r1, #0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f962 	bl	8008b4c <VL53L0X_ClearInterruptMask>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800888c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	70fb      	strb	r3, [r7, #3]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70bb      	strb	r3, [r7, #2]
 80088ae:	4613      	mov	r3, r2
 80088b0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80088bc:	23f6      	movs	r3, #246	; 0xf6
 80088be:	73fb      	strb	r3, [r7, #15]
 80088c0:	e107      	b.n	8008ad2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80088c2:	78bb      	ldrb	r3, [r7, #2]
 80088c4:	2b14      	cmp	r3, #20
 80088c6:	d110      	bne.n	80088ea <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80088c8:	7e3b      	ldrb	r3, [r7, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80088ce:	2310      	movs	r3, #16
 80088d0:	73bb      	strb	r3, [r7, #14]
 80088d2:	e001      	b.n	80088d8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80088d4:	2301      	movs	r3, #1
 80088d6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	461a      	mov	r2, r3
 80088dc:	2184      	movs	r1, #132	; 0x84
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f003 fbc6 	bl	800c070 <VL53L0X_WrByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e0f3      	b.n	8008ad2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	2b15      	cmp	r3, #21
 80088ee:	f040 8097 	bne.w	8008a20 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80088f2:	2201      	movs	r2, #1
 80088f4:	21ff      	movs	r1, #255	; 0xff
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f003 fbba 	bl	800c070 <VL53L0X_WrByte>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4313      	orrs	r3, r2
 8008904:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f003 fbb0 	bl	800c070 <VL53L0X_WrByte>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4313      	orrs	r3, r2
 8008918:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800891a:	2200      	movs	r2, #0
 800891c:	21ff      	movs	r1, #255	; 0xff
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f003 fba6 	bl	800c070 <VL53L0X_WrByte>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	4313      	orrs	r3, r2
 800892c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800892e:	2201      	movs	r2, #1
 8008930:	2180      	movs	r1, #128	; 0x80
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f003 fb9c 	bl	800c070 <VL53L0X_WrByte>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	4313      	orrs	r3, r2
 8008940:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008942:	2202      	movs	r2, #2
 8008944:	2185      	movs	r1, #133	; 0x85
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f003 fb92 	bl	800c070 <VL53L0X_WrByte>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	4313      	orrs	r3, r2
 8008954:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008956:	2204      	movs	r2, #4
 8008958:	21ff      	movs	r1, #255	; 0xff
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f003 fb88 	bl	800c070 <VL53L0X_WrByte>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	4313      	orrs	r3, r2
 8008968:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800896a:	2200      	movs	r2, #0
 800896c:	21cd      	movs	r1, #205	; 0xcd
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f003 fb7e 	bl	800c070 <VL53L0X_WrByte>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	4313      	orrs	r3, r2
 800897c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800897e:	2211      	movs	r2, #17
 8008980:	21cc      	movs	r1, #204	; 0xcc
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f003 fb74 	bl	800c070 <VL53L0X_WrByte>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4313      	orrs	r3, r2
 8008990:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008992:	2207      	movs	r2, #7
 8008994:	21ff      	movs	r1, #255	; 0xff
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f003 fb6a 	bl	800c070 <VL53L0X_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80089a6:	2200      	movs	r2, #0
 80089a8:	21be      	movs	r1, #190	; 0xbe
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f003 fb60 	bl	800c070 <VL53L0X_WrByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80089ba:	2206      	movs	r2, #6
 80089bc:	21ff      	movs	r1, #255	; 0xff
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f003 fb56 	bl	800c070 <VL53L0X_WrByte>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80089ce:	2209      	movs	r2, #9
 80089d0:	21cc      	movs	r1, #204	; 0xcc
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f003 fb4c 	bl	800c070 <VL53L0X_WrByte>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4313      	orrs	r3, r2
 80089e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80089e2:	2200      	movs	r2, #0
 80089e4:	21ff      	movs	r1, #255	; 0xff
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f003 fb42 	bl	800c070 <VL53L0X_WrByte>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80089f6:	2201      	movs	r2, #1
 80089f8:	21ff      	movs	r1, #255	; 0xff
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f003 fb38 	bl	800c070 <VL53L0X_WrByte>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f003 fb2e 	bl	800c070 <VL53L0X_WrByte>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	73fb      	strb	r3, [r7, #15]
 8008a1e:	e058      	b.n	8008ad2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d121      	bne.n	8008a6c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008a28:	787b      	ldrb	r3, [r7, #1]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d81b      	bhi.n	8008a66 <VL53L0X_SetGpioConfig+0x1ce>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <VL53L0X_SetGpioConfig+0x19c>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a49 	.word	0x08008a49
 8008a38:	08008a4f 	.word	0x08008a4f
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a5b 	.word	0x08008a5b
 8008a44:	08008a61 	.word	0x08008a61
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73bb      	strb	r3, [r7, #14]
				break;
 8008a4c:	e00f      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	73bb      	strb	r3, [r7, #14]
				break;
 8008a52:	e00c      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008a54:	2302      	movs	r3, #2
 8008a56:	73bb      	strb	r3, [r7, #14]
				break;
 8008a58:	e009      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	73bb      	strb	r3, [r7, #14]
				break;
 8008a5e:	e006      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008a60:	2304      	movs	r3, #4
 8008a62:	73bb      	strb	r3, [r7, #14]
				break;
 8008a64:	e003      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008a66:	23f5      	movs	r3, #245	; 0xf5
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	e000      	b.n	8008a6e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008a6c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d107      	bne.n	8008a86 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	210a      	movs	r1, #10
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f003 faf7 	bl	800c070 <VL53L0X_WrByte>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10f      	bne.n	8008aae <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008a8e:	7e3b      	ldrb	r3, [r7, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73bb      	strb	r3, [r7, #14]
 8008a98:	e001      	b.n	8008a9e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008a9a:	2310      	movs	r3, #16
 8008a9c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	22ef      	movs	r2, #239	; 0xef
 8008aa2:	2184      	movs	r1, #132	; 0x84
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f003 fb31 	bl	800c10c <VL53L0X_UpdateByte>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	787a      	ldrb	r2, [r7, #1]
 8008aba:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f83f 	bl	8008b4c <VL53L0X_ClearInterruptMask>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop

08008ae0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	460b      	mov	r3, r1
 8008aee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	461a      	mov	r2, r3
 8008afa:	210e      	movs	r1, #14
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f003 fb63 	bl	800c1c8 <VL53L0X_RdWord>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008b06:	8abb      	ldrh	r3, [r7, #20]
 8008b08:	045b      	lsls	r3, r3, #17
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <VL53L0X_GetInterruptThresholds+0x68>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10f      	bne.n	8008b3c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	461a      	mov	r2, r3
 8008b22:	210c      	movs	r1, #12
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f003 fb4f 	bl	800c1c8 <VL53L0X_RdWord>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008b2e:	8abb      	ldrh	r3, [r7, #20]
 8008b30:	045b      	lsls	r3, r3, #17
 8008b32:	461a      	mov	r2, r3
 8008b34:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <VL53L0X_GetInterruptThresholds+0x68>)
 8008b36:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	1ffe0000 	.word	0x1ffe0000

08008b4c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008b5e:	2201      	movs	r2, #1
 8008b60:	210b      	movs	r1, #11
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f003 fa84 	bl	800c070 <VL53L0X_WrByte>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	210b      	movs	r1, #11
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f003 fa7d 	bl	800c070 <VL53L0X_WrByte>
 8008b76:	4603      	mov	r3, r0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008b80:	f107 030d 	add.w	r3, r7, #13
 8008b84:	461a      	mov	r2, r3
 8008b86:	2113      	movs	r1, #19
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f003 faf3 	bl	800c174 <VL53L0X_RdByte>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008b9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d803      	bhi.n	8008bb6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0d3      	beq.n	8008b5e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008bbc:	23f4      	movs	r3, #244	; 0xf4
 8008bbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008bda:	f107 030e 	add.w	r3, r7, #14
 8008bde:	461a      	mov	r2, r3
 8008be0:	2113      	movs	r1, #19
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f003 fac6 	bl	800c174 <VL53L0X_RdByte>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	f003 0207 	and.w	r2, r3, #7
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	f003 0318 	and.w	r3, r3, #24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008c00:	23fa      	movs	r3, #250	; 0xfa
 8008c02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 fa03 	bl	8009030 <VL53L0X_perform_ref_spad_management>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008c48:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008c4c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c52:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008c54:	f107 0308 	add.w	r3, r7, #8
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2128      	movs	r1, #40	; 0x28
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f003 fab3 	bl	800c1c8 <VL53L0X_RdWord>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d11e      	bne.n	8008cac <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008c6e:	893b      	ldrh	r3, [r7, #8]
 8008c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008c78:	893b      	ldrh	r3, [r7, #8]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	dd0b      	ble.n	8008c9c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008c84:	893a      	ldrh	r2, [r7, #8]
 8008c86:	897b      	ldrh	r3, [r7, #10]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	b21b      	sxth	r3, r3
 8008c8e:	461a      	mov	r2, r3
					* 250;
 8008c90:	23fa      	movs	r3, #250	; 0xfa
 8008c92:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e007      	b.n	8008cac <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	23fa      	movs	r3, #250	; 0xfa
 8008ca4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b08b      	sub	sp, #44	; 0x2c
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cde:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	fb01 f202 	mul.w	r2, r1, r2
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf6:	e030      	b.n	8008d5a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d11e      	bne.n	8008d4c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008d0e:	7ffa      	ldrb	r2, [r7, #31]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	fa42 f303 	asr.w	r3, r2, r3
 8008d16:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008d1c:	e016      	b.n	8008d4c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008d1e:	7ffb      	ldrb	r3, [r7, #31]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <get_next_good_spad+0x88>
				success = 1;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	fb02 f203 	mul.w	r2, r2, r3
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	4413      	add	r3, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	601a      	str	r2, [r3, #0]
				break;
 8008d3e:	e009      	b.n	8008d54 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008d40:	7ffb      	ldrb	r3, [r7, #31]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008d4c:	6a3a      	ldr	r2, [r7, #32]
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d3e4      	bcc.n	8008d1e <get_next_good_spad+0x66>
				coarseIndex++) {
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	3301      	adds	r3, #1
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d202      	bcs.n	8008d68 <get_next_good_spad+0xb0>
 8008d62:	7fbb      	ldrb	r3, [r7, #30]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0c7      	beq.n	8008cf8 <get_next_good_spad+0x40>
		}
	}
}
 8008d68:	bf00      	nop
 8008d6a:	372c      	adds	r7, #44	; 0x2c
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	099b      	lsrs	r3, r3, #6
 8008d84:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008d86:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <is_aperture+0x30>)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <is_aperture+0x22>
		isAperture = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	200002bc 	.word	0x200002bc

08008da8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b089      	sub	sp, #36	; 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008db8:	2308      	movs	r3, #8
 8008dba:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dce:	69b9      	ldr	r1, [r7, #24]
 8008dd0:	fb01 f202 	mul.w	r2, r1, r2
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d302      	bcc.n	8008de6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008de0:	23ce      	movs	r3, #206	; 0xce
 8008de2:	77fb      	strb	r3, [r7, #31]
 8008de4:	e010      	b.n	8008e08 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	4413      	add	r3, r2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b25a      	sxtb	r2, r3
 8008df0:	2101      	movs	r1, #1
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	fa01 f303 	lsl.w	r3, r1, r3
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b259      	sxtb	r1, r3
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	4413      	add	r3, r2
 8008e04:	b2ca      	uxtb	r2, r1
 8008e06:	701a      	strb	r2, [r3, #0]

	return status;
 8008e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3724      	adds	r7, #36	; 0x24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008e22:	2306      	movs	r3, #6
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	21b0      	movs	r1, #176	; 0xb0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f003 f8c5 	bl	800bfb8 <VL53L0X_WriteMulti>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008e48:	2306      	movs	r3, #6
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	21b0      	movs	r1, #176	; 0xb0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f003 f8e2 	bl	800c018 <VL53L0X_ReadMulti>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	460b      	mov	r3, r1
 8008e72:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e80:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008e82:	2300      	movs	r3, #0
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e86:	e02b      	b.n	8008ee0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008e88:	f107 031c 	add.w	r3, r7, #28
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff ff11 	bl	8008cb8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d103      	bne.n	8008ea6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e9e:	23ce      	movs	r3, #206	; 0xce
 8008ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008ea4:	e020      	b.n	8008ee8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eac:	4413      	add	r3, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff ff60 	bl	8008d74 <is_aperture>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008ebe:	23ce      	movs	r3, #206	; 0xce
 8008ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008ec4:	e010      	b.n	8008ee8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008eca:	6a3a      	ldr	r2, [r7, #32]
 8008ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f7ff ff6a 	bl	8008da8 <enable_spad_bit>
		currentSpad++;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	3301      	adds	r3, #1
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d3cf      	bcc.n	8008e88 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008eee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff ff8d 	bl	8008e18 <set_ref_spad_map>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d121      	bne.n	8008f50 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008f0c:	f107 0314 	add.w	r3, r7, #20
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff ff93 	bl	8008e3e <get_ref_spad_map>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008f22:	e011      	b.n	8008f48 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	4413      	add	r3, r2
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	f107 0114 	add.w	r1, r7, #20
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	440b      	add	r3, r1
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d003      	beq.n	8008f42 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008f3a:	23ce      	movs	r3, #206	; 0xce
 8008f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008f40:	e006      	b.n	8008f50 <enable_ref_spads+0xec>
			}
			i++;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	3301      	adds	r3, #1
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d3e9      	bcc.n	8008f24 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008f50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3730      	adds	r7, #48	; 0x30
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008f84:	22c0      	movs	r2, #192	; 0xc0
 8008f86:	2101      	movs	r1, #1
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f003 f871 	bl	800c070 <VL53L0X_WrByte>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008f94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d108      	bne.n	8008fae <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008f9c:	f107 0308 	add.w	r3, r7, #8
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fc48 	bl	8008838 <VL53L0X_PerformSingleRangingMeasurement>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d107      	bne.n	8008fc6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	21ff      	movs	r1, #255	; 0xff
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f003 f858 	bl	800c070 <VL53L0X_WrByte>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008fc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d107      	bne.n	8008fde <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	21b6      	movs	r1, #182	; 0xb6
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f003 f8f8 	bl	800c1c8 <VL53L0X_RdWord>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008fde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	21ff      	movs	r1, #255	; 0xff
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f003 f840 	bl	800c070 <VL53L0X_WrByte>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d112      	bne.n	8009024 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009002:	461a      	mov	r2, r3
 8009004:	2101      	movs	r1, #1
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f003 f832 	bl	800c070 <VL53L0X_WrByte>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009012:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009020:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009028:	4618      	mov	r0, r3
 800902a:	3728      	adds	r7, #40	; 0x28
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b09d      	sub	sp, #116	; 0x74
 8009034:	af06      	add	r7, sp, #24
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009042:	23b4      	movs	r3, #180	; 0xb4
 8009044:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009048:	2303      	movs	r3, #3
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800904c:	232c      	movs	r3, #44	; 0x2c
 800904e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800905c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009060:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800906a:	2306      	movs	r3, #6
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009094:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009096:	2300      	movs	r3, #0
 8009098:	64bb      	str	r3, [r7, #72]	; 0x48
 800909a:	e009      	b.n	80090b0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80090aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ac:	3301      	adds	r3, #1
 80090ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3f1      	bcc.n	800909c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090b8:	2201      	movs	r2, #1
 80090ba:	21ff      	movs	r1, #255	; 0xff
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f002 ffd7 	bl	800c070 <VL53L0X_WrByte>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80090c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d107      	bne.n	80090e0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80090d0:	2200      	movs	r2, #0
 80090d2:	214f      	movs	r1, #79	; 0x4f
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f002 ffcb 	bl	800c070 <VL53L0X_WrByte>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80090e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80090e8:	222c      	movs	r2, #44	; 0x2c
 80090ea:	214e      	movs	r1, #78	; 0x4e
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f002 ffbf 	bl	800c070 <VL53L0X_WrByte>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80090f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d107      	bne.n	8009110 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009100:	2200      	movs	r2, #0
 8009102:	21ff      	movs	r1, #255	; 0xff
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f002 ffb3 	bl	800c070 <VL53L0X_WrByte>
 800910a:	4603      	mov	r3, r0
 800910c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009110:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009118:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800911c:	461a      	mov	r2, r3
 800911e:	21b6      	movs	r1, #182	; 0xb6
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f002 ffa5 	bl	800c070 <VL53L0X_WrByte>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800912c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009130:	2b00      	cmp	r3, #0
 8009132:	d107      	bne.n	8009144 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009134:	2200      	movs	r2, #0
 8009136:	2180      	movs	r1, #128	; 0x80
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f002 ff99 	bl	800c070 <VL53L0X_WrByte>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009144:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800914c:	f107 0210 	add.w	r2, r7, #16
 8009150:	f107 0111 	add.w	r1, r7, #17
 8009154:	2300      	movs	r3, #0
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fbbb 	bl	80098d2 <VL53L0X_perform_ref_calibration>
 800915c:	4603      	mov	r3, r0
 800915e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009162:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009166:	2b00      	cmp	r3, #0
 8009168:	d121      	bne.n	80091ae <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009170:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009178:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009186:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800918a:	f107 0218 	add.w	r2, r7, #24
 800918e:	9204      	str	r2, [sp, #16]
 8009190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009192:	9203      	str	r2, [sp, #12]
 8009194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009196:	9202      	str	r2, [sp, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	4623      	mov	r3, r4
 80091a0:	4602      	mov	r2, r0
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fe5e 	bl	8008e64 <enable_ref_spads>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d174      	bne.n	80092a0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80091ba:	f107 0312 	add.w	r3, r7, #18
 80091be:	4619      	mov	r1, r3
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fecb 	bl	8008f5c <perform_ref_signal_measurement>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80091cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d161      	bne.n	8009298 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80091d4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80091d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091d8:	429a      	cmp	r2, r3
 80091da:	d25d      	bcs.n	8009298 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80091dc:	2300      	movs	r3, #0
 80091de:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e0:	e009      	b.n	80091f6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80091f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f2:	3301      	adds	r3, #1
 80091f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d3f1      	bcc.n	80091e2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80091fe:	e002      	b.n	8009206 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009202:	3301      	adds	r3, #1
 8009204:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009206:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800920a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920c:	4413      	add	r3, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fdb0 	bl	8008d74 <is_aperture>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800921a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	429a      	cmp	r2, r3
 8009220:	d3ee      	bcc.n	8009200 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009228:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009236:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800923a:	f107 0218 	add.w	r2, r7, #24
 800923e:	9204      	str	r2, [sp, #16]
 8009240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009242:	9203      	str	r2, [sp, #12]
 8009244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009246:	9202      	str	r2, [sp, #8]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	4623      	mov	r3, r4
 8009250:	4602      	mov	r2, r0
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fe06 	bl	8008e64 <enable_ref_spads>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800925e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009262:	2b00      	cmp	r3, #0
 8009264:	d11b      	bne.n	800929e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800926a:	f107 0312 	add.w	r3, r7, #18
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fe73 	bl	8008f5c <perform_ref_signal_measurement>
 8009276:	4603      	mov	r3, r0
 8009278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800927c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10c      	bne.n	800929e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009284:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009286:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009288:	429a      	cmp	r2, r3
 800928a:	d208      	bcs.n	800929e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009296:	e002      	b.n	800929e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800929c:	e000      	b.n	80092a0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800929e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80092a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f040 80af 	bne.w	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80092aa:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80092ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092ae:	429a      	cmp	r2, r3
 80092b0:	f240 80aa 	bls.w	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80092b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80092c4:	f107 031c 	add.w	r3, r7, #28
 80092c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ca:	4618      	mov	r0, r3
 80092cc:	f003 f82a 	bl	800c324 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80092d0:	8a7b      	ldrh	r3, [r7, #18]
 80092d2:	461a      	mov	r2, r3
 80092d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bfb8      	it	lt
 80092dc:	425b      	neglt	r3, r3
 80092de:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80092e6:	e086      	b.n	80093f6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80092ee:	f107 0314 	add.w	r3, r7, #20
 80092f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092f6:	f7ff fcdf 	bl	8008cb8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d103      	bne.n	800930a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009302:	23ce      	movs	r3, #206	; 0xce
 8009304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009308:	e07e      	b.n	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800930a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	4413      	add	r3, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fd2e 	bl	8008d74 <is_aperture>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931e:	4293      	cmp	r3, r2
 8009320:	d003      	beq.n	800932a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009328:	e06e      	b.n	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800932a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932c:	3301      	adds	r3, #1
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800933a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800933c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fd32 	bl	8008da8 <enable_spad_bit>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800934a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10c      	bne.n	800936c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009354:	3301      	adds	r3, #1
 8009356:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800935e:	4619      	mov	r1, r3
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fd59 	bl	8008e18 <set_ref_spad_map>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800936c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009370:	2b00      	cmp	r3, #0
 8009372:	d146      	bne.n	8009402 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009374:	f107 0312 	add.w	r3, r7, #18
 8009378:	4619      	mov	r1, r3
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fdee 	bl	8008f5c <perform_ref_signal_measurement>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009386:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800938a:	2b00      	cmp	r3, #0
 800938c:	d13b      	bne.n	8009406 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800938e:	8a7b      	ldrh	r3, [r7, #18]
 8009390:	461a      	mov	r2, r3
 8009392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	425b      	neglt	r3, r3
 800939c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800939e:	8a7b      	ldrh	r3, [r7, #18]
 80093a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d21c      	bcs.n	80093e0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80093a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d914      	bls.n	80093d8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80093ae:	f107 031c 	add.w	r3, r7, #28
 80093b2:	4619      	mov	r1, r3
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fd2f 	bl	8008e18 <set_ref_spad_map>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80093c6:	f107 011c 	add.w	r1, r7, #28
 80093ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093cc:	4618      	mov	r0, r3
 80093ce:	f002 ffa9 	bl	800c324 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80093d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d4:	3b01      	subs	r3, #1
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80093d8:	2301      	movs	r3, #1
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e00a      	b.n	80093f6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80093ea:	f107 031c 	add.w	r3, r7, #28
 80093ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 ff97 	bl	800c324 <memcpy>
		while (!complete) {
 80093f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f43f af74 	beq.w	80092e8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009400:	e002      	b.n	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009406:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800940c:	2b00      	cmp	r3, #0
 800940e:	d115      	bne.n	800943c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009414:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800941c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800943c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009440:	4618      	mov	r0, r3
 8009442:	375c      	adds	r7, #92	; 0x5c
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}

08009448 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009448:	b590      	push	{r4, r7, lr}
 800944a:	b093      	sub	sp, #76	; 0x4c
 800944c:	af06      	add	r7, sp, #24
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009460:	23b4      	movs	r3, #180	; 0xb4
 8009462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009466:	2306      	movs	r3, #6
 8009468:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800946a:	232c      	movs	r3, #44	; 0x2c
 800946c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800946e:	2201      	movs	r2, #1
 8009470:	21ff      	movs	r1, #255	; 0xff
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f002 fdfc 	bl	800c070 <VL53L0X_WrByte>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800947e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009486:	2200      	movs	r2, #0
 8009488:	214f      	movs	r1, #79	; 0x4f
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f002 fdf0 	bl	800c070 <VL53L0X_WrByte>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009496:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800949a:	2b00      	cmp	r3, #0
 800949c:	d107      	bne.n	80094ae <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800949e:	222c      	movs	r2, #44	; 0x2c
 80094a0:	214e      	movs	r1, #78	; 0x4e
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f002 fde4 	bl	800c070 <VL53L0X_WrByte>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80094ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094b6:	2200      	movs	r2, #0
 80094b8:	21ff      	movs	r1, #255	; 0xff
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f002 fdd8 	bl	800c070 <VL53L0X_WrByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80094c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80094ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094d2:	461a      	mov	r2, r3
 80094d4:	21b6      	movs	r1, #182	; 0xb6
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f002 fdca 	bl	800c070 <VL53L0X_WrByte>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80094e2:	2300      	movs	r3, #0
 80094e4:	627b      	str	r3, [r7, #36]	; 0x24
 80094e6:	e009      	b.n	80094fc <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80094f2:	2200      	movs	r2, #0
 80094f4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	3301      	adds	r3, #1
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
 80094fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	429a      	cmp	r2, r3
 8009502:	d3f1      	bcc.n	80094e8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d011      	beq.n	800952e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800950a:	e002      	b.n	8009512 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	3301      	adds	r3, #1
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009512:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	4413      	add	r3, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff fc2a 	bl	8008d74 <is_aperture>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d103      	bne.n	800952e <VL53L0X_set_reference_spads+0xe6>
 8009526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	429a      	cmp	r2, r3
 800952c:	d3ee      	bcc.n	800950c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800953a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800953e:	79f9      	ldrb	r1, [r7, #7]
 8009540:	f107 0214 	add.w	r2, r7, #20
 8009544:	9204      	str	r2, [sp, #16]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	9203      	str	r2, [sp, #12]
 800954a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800954c:	9202      	str	r2, [sp, #8]
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4623      	mov	r3, r4
 8009556:	4602      	mov	r2, r0
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff fc83 	bl	8008e64 <enable_ref_spads>
 800955e:	4603      	mov	r3, r0
 8009560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10c      	bne.n	8009586 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	79fa      	ldrb	r2, [r7, #7]
 8009582:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009586:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800958a:	4618      	mov	r0, r3
 800958c:	3734      	adds	r7, #52	; 0x34
 800958e:	46bd      	mov	sp, r7
 8009590:	bd90      	pop	{r4, r7, pc}

08009592 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80095a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	f043 0301 	orr.w	r3, r3, #1
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	2100      	movs	r1, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 fd5a 	bl	800c070 <VL53L0X_WrByte>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80095c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f9bf 	bl	800994c <VL53L0X_measurement_poll_for_completion>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80095d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80095da:	2100      	movs	r1, #0
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fab5 	bl	8008b4c <VL53L0X_ClearInterruptMask>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80095e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d106      	bne.n	80095fc <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80095ee:	2200      	movs	r2, #0
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f002 fd3c 	bl	800c070 <VL53L0X_WrByte>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

	return Status;
 80095fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4608      	mov	r0, r1
 8009612:	4611      	mov	r1, r2
 8009614:	461a      	mov	r2, r3
 8009616:	4603      	mov	r3, r0
 8009618:	70fb      	strb	r3, [r7, #3]
 800961a:	460b      	mov	r3, r1
 800961c:	70bb      	strb	r3, [r7, #2]
 800961e:	4613      	mov	r3, r2
 8009620:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800962a:	2201      	movs	r2, #1
 800962c:	21ff      	movs	r1, #255	; 0xff
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 fd1e 	bl	800c070 <VL53L0X_WrByte>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	4313      	orrs	r3, r2
 800963c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800963e:	2200      	movs	r2, #0
 8009640:	2100      	movs	r1, #0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f002 fd14 	bl	800c070 <VL53L0X_WrByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4313      	orrs	r3, r2
 8009650:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009652:	2200      	movs	r2, #0
 8009654:	21ff      	movs	r1, #255	; 0xff
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f002 fd0a 	bl	800c070 <VL53L0X_WrByte>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4313      	orrs	r3, r2
 8009664:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01e      	beq.n	80096aa <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800966c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d009      	beq.n	8009688 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	21cb      	movs	r1, #203	; 0xcb
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f002 fd7b 	bl	800c174 <VL53L0X_RdByte>
 800967e:	4603      	mov	r3, r0
 8009680:	461a      	mov	r2, r3
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	4313      	orrs	r3, r2
 8009686:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	d02a      	beq.n	80096e6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009690:	f107 030e 	add.w	r3, r7, #14
 8009694:	461a      	mov	r2, r3
 8009696:	21ee      	movs	r1, #238	; 0xee
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f002 fd6b 	bl	800c174 <VL53L0X_RdByte>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e01d      	b.n	80096e6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80096aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80096b2:	78bb      	ldrb	r3, [r7, #2]
 80096b4:	461a      	mov	r2, r3
 80096b6:	21cb      	movs	r1, #203	; 0xcb
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fcd9 	bl	800c070 <VL53L0X_WrByte>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80096c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80096d0:	787b      	ldrb	r3, [r7, #1]
 80096d2:	2280      	movs	r2, #128	; 0x80
 80096d4:	21ee      	movs	r1, #238	; 0xee
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fd18 	bl	800c10c <VL53L0X_UpdateByte>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80096e6:	2201      	movs	r2, #1
 80096e8:	21ff      	movs	r1, #255	; 0xff
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f002 fcc0 	bl	800c070 <VL53L0X_WrByte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80096fa:	2201      	movs	r2, #1
 80096fc:	2100      	movs	r1, #0
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f002 fcb6 	bl	800c070 <VL53L0X_WrByte>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	4313      	orrs	r3, r2
 800970c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800970e:	2200      	movs	r2, #0
 8009710:	21ff      	movs	r1, #255	; 0xff
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 fcac 	bl	800c070 <VL53L0X_WrByte>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	4313      	orrs	r3, r2
 8009720:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	f023 0310 	bic.w	r3, r3, #16
 8009728:	b2da      	uxtb	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	701a      	strb	r2, [r3, #0]

	return Status;
 800972e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b08a      	sub	sp, #40	; 0x28
 800973e:	af04      	add	r7, sp, #16
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	4611      	mov	r1, r2
 8009746:	461a      	mov	r2, r3
 8009748:	460b      	mov	r3, r1
 800974a:	71fb      	strb	r3, [r7, #7]
 800974c:	4613      	mov	r3, r2
 800974e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009750:	2300      	movs	r3, #0
 8009752:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009764:	79bb      	ldrb	r3, [r7, #6]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009770:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009772:	2201      	movs	r2, #1
 8009774:	2101      	movs	r1, #1
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f002 fc7a 	bl	800c070 <VL53L0X_WrByte>
 800977c:	4603      	mov	r3, r0
 800977e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009788:	2140      	movs	r1, #64	; 0x40
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff ff01 	bl	8009592 <VL53L0X_perform_single_ref_calibration>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d115      	bne.n	80097c8 <VL53L0X_perform_vhv_calibration+0x8e>
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d112      	bne.n	80097c8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80097a2:	7d39      	ldrb	r1, [r7, #20]
 80097a4:	7d7a      	ldrb	r2, [r7, #21]
 80097a6:	2300      	movs	r3, #0
 80097a8:	9303      	str	r3, [sp, #12]
 80097aa:	2301      	movs	r3, #1
 80097ac:	9302      	str	r3, [sp, #8]
 80097ae:	f107 0313 	add.w	r3, r7, #19
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	460b      	mov	r3, r1
 80097ba:	2101      	movs	r1, #1
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff ff23 	bl	8009608 <VL53L0X_ref_calibration_io>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]
 80097c6:	e002      	b.n	80097ce <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80097ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d112      	bne.n	80097fc <VL53L0X_perform_vhv_calibration+0xc2>
 80097d6:	79bb      	ldrb	r3, [r7, #6]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00f      	beq.n	80097fc <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80097dc:	7dbb      	ldrb	r3, [r7, #22]
 80097de:	461a      	mov	r2, r3
 80097e0:	2101      	movs	r1, #1
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f002 fc44 	bl	800c070 <VL53L0X_WrByte>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80097ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	7dba      	ldrb	r2, [r7, #22]
 80097f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80097fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	; 0x28
 800980c:	af04      	add	r7, sp, #16
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4611      	mov	r1, r2
 8009814:	461a      	mov	r2, r3
 8009816:	460b      	mov	r3, r1
 8009818:	71fb      	strb	r3, [r7, #7]
 800981a:	4613      	mov	r3, r2
 800981c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800982e:	79bb      	ldrb	r3, [r7, #6]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800983a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800983c:	2202      	movs	r2, #2
 800983e:	2101      	movs	r1, #1
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f002 fc15 	bl	800c070 <VL53L0X_WrByte>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800984a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009852:	2100      	movs	r1, #0
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff fe9c 	bl	8009592 <VL53L0X_perform_single_ref_calibration>
 800985a:	4603      	mov	r3, r0
 800985c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800985e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d115      	bne.n	8009892 <VL53L0X_perform_phase_calibration+0x8a>
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d112      	bne.n	8009892 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800986c:	7d39      	ldrb	r1, [r7, #20]
 800986e:	7d7a      	ldrb	r2, [r7, #21]
 8009870:	2301      	movs	r3, #1
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	2300      	movs	r3, #0
 8009876:	9302      	str	r3, [sp, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	f107 0313 	add.w	r3, r7, #19
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	460b      	mov	r3, r1
 8009884:	2101      	movs	r1, #1
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff febe 	bl	8009608 <VL53L0X_ref_calibration_io>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
 8009890:	e002      	b.n	8009898 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d112      	bne.n	80098c6 <VL53L0X_perform_phase_calibration+0xbe>
 80098a0:	79bb      	ldrb	r3, [r7, #6]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00f      	beq.n	80098c6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80098a6:	7dbb      	ldrb	r3, [r7, #22]
 80098a8:	461a      	mov	r2, r3
 80098aa:	2101      	movs	r1, #1
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f002 fbdf 	bl	800c070 <VL53L0X_WrByte>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80098b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	7dba      	ldrb	r2, [r7, #22]
 80098c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80098c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80098ee:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	2300      	movs	r3, #0
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7ff ff1f 	bl	800973a <VL53L0X_perform_vhv_calibration>
 80098fc:	4603      	mov	r3, r0
 80098fe:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d107      	bne.n	8009918 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	2300      	movs	r3, #0
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff ff7a 	bl	8009808 <VL53L0X_perform_phase_calibration>
 8009914:	4603      	mov	r3, r0
 8009916:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10f      	bne.n	8009940 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009920:	7dbb      	ldrb	r3, [r7, #22]
 8009922:	461a      	mov	r2, r3
 8009924:	2101      	movs	r1, #1
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f002 fba2 	bl	800c070 <VL53L0X_WrByte>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	7dba      	ldrb	r2, [r7, #22]
 800993c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009960:	f107 030f 	add.w	r3, r7, #15
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fe fdff 	bl	800856a <VL53L0X_GetMeasurementDataReady>
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d110      	bne.n	800999a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d00f      	beq.n	800999e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3301      	adds	r3, #1
 8009982:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800998a:	d302      	bcc.n	8009992 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800998c:	23f9      	movs	r3, #249	; 0xf9
 800998e:	75fb      	strb	r3, [r7, #23]
			break;
 8009990:	e006      	b.n	80099a0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f002 fc8c 	bl	800c2b0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009998:	e7e2      	b.n	8009960 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800999e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80099a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	3301      	adds	r3, #1
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	4603      	mov	r3, r0
 80099da:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	085b      	lsrs	r3, r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a08:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009a0a:	e002      	b.n	8009a12 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	089b      	lsrs	r3, r3, #2
 8009a10:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d8f8      	bhi.n	8009a0c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009a1a:	e017      	b.n	8009a4c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d30b      	bcc.n	8009a40 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	085b      	lsrs	r3, r3, #1
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e002      	b.n	8009a46 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	085b      	lsrs	r3, r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	089b      	lsrs	r3, r3, #2
 8009a4a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e4      	bne.n	8009a1c <VL53L0X_isqrt+0x24>
	}

	return res;
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2183      	movs	r1, #131	; 0x83
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f002 fafd 	bl	800c070 <VL53L0X_WrByte>
 8009a76:	4603      	mov	r3, r0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11e      	bne.n	8009ac6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009a8c:	f107 030f 	add.w	r3, r7, #15
 8009a90:	461a      	mov	r2, r3
 8009a92:	2183      	movs	r1, #131	; 0x83
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f002 fb6d 	bl	800c174 <VL53L0X_RdByte>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <VL53L0X_device_read_strobe+0x5a>
 8009aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d106      	bne.n	8009aba <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ab8:	d3e8      	bcc.n	8009a8c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ac0:	d301      	bcc.n	8009ac6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009ac2:	23f9      	movs	r3, #249	; 0xf9
 8009ac4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2183      	movs	r1, #131	; 0x83
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f002 fad0 	bl	800c070 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009ada:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b098      	sub	sp, #96	; 0x60
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	460b      	mov	r3, r1
 8009af0:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009b16:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009b1a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009b2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009b32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	f000 8408 	beq.w	800a34c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	2180      	movs	r1, #128	; 0x80
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 fa95 	bl	800c070 <VL53L0X_WrByte>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b54:	2201      	movs	r2, #1
 8009b56:	21ff      	movs	r1, #255	; 0xff
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f002 fa89 	bl	800c070 <VL53L0X_WrByte>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	461a      	mov	r2, r3
 8009b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f002 fa7d 	bl	800c070 <VL53L0X_WrByte>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009b84:	2206      	movs	r2, #6
 8009b86:	21ff      	movs	r1, #255	; 0xff
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f002 fa71 	bl	800c070 <VL53L0X_WrByte>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	461a      	mov	r2, r3
 8009b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b96:	4313      	orrs	r3, r2
 8009b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009b9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2183      	movs	r1, #131	; 0x83
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f002 fae5 	bl	800c174 <VL53L0X_RdByte>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bbc:	f043 0304 	orr.w	r3, r3, #4
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2183      	movs	r1, #131	; 0x83
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fa52 	bl	800c070 <VL53L0X_WrByte>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009bda:	2207      	movs	r2, #7
 8009bdc:	21ff      	movs	r1, #255	; 0xff
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f002 fa46 	bl	800c070 <VL53L0X_WrByte>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	2181      	movs	r1, #129	; 0x81
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 fa3a 	bl	800c070 <VL53L0X_WrByte>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f002 fb50 	bl	800c2b0 <VL53L0X_PollingDelay>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009c1e:	2201      	movs	r2, #1
 8009c20:	2180      	movs	r1, #128	; 0x80
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f002 fa24 	bl	800c070 <VL53L0X_WrByte>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c30:	4313      	orrs	r3, r2
 8009c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8098 	beq.w	8009d72 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009c42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c46:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f040 8091 	bne.w	8009d72 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009c50:	226b      	movs	r2, #107	; 0x6b
 8009c52:	2194      	movs	r1, #148	; 0x94
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f002 fa0b 	bl	800c070 <VL53L0X_WrByte>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fef9 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	461a      	mov	r2, r3
 8009c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c80:	461a      	mov	r2, r3
 8009c82:	2190      	movs	r1, #144	; 0x90
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 fad7 	bl	800c238 <VL53L0X_RdDWord>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	0a1b      	lsrs	r3, r3, #8
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	0bdb      	lsrs	r3, r3, #15
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009cb4:	2224      	movs	r2, #36	; 0x24
 8009cb6:	2194      	movs	r1, #148	; 0x94
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f002 f9d9 	bl	800c070 <VL53L0X_WrByte>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fec7 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2190      	movs	r1, #144	; 0x90
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 faa5 	bl	800c238 <VL53L0X_RdDWord>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	0e1b      	lsrs	r3, r3, #24
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009d1a:	2225      	movs	r2, #37	; 0x25
 8009d1c:	2194      	movs	r1, #148	; 0x94
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f002 f9a6 	bl	800c070 <VL53L0X_WrByte>
 8009d24:	4603      	mov	r3, r0
 8009d26:	461a      	mov	r2, r3
 8009d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fe94 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2190      	movs	r1, #144	; 0x90
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f002 fa72 	bl	800c238 <VL53L0X_RdDWord>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	0e1b      	lsrs	r3, r3, #24
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	0c1b      	lsrs	r3, r3, #16
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 8189 	beq.w	800a090 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d82:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 8182 	bne.w	800a090 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	2194      	movs	r1, #148	; 0x94
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f002 f96d 	bl	800c070 <VL53L0X_WrByte>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff fe5b 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009daa:	4603      	mov	r3, r0
 8009dac:	461a      	mov	r2, r3
 8009dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009db8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2190      	movs	r1, #144	; 0x90
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f002 f9d7 	bl	800c174 <VL53L0X_RdByte>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009dd4:	227b      	movs	r2, #123	; 0x7b
 8009dd6:	2194      	movs	r1, #148	; 0x94
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f002 f949 	bl	800c070 <VL53L0X_WrByte>
 8009dde:	4603      	mov	r3, r0
 8009de0:	461a      	mov	r2, r3
 8009de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de6:	4313      	orrs	r3, r2
 8009de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fe37 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009df2:	4603      	mov	r3, r0
 8009df4:	461a      	mov	r2, r3
 8009df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009e00:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009e04:	461a      	mov	r2, r3
 8009e06:	2190      	movs	r1, #144	; 0x90
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f002 f9b3 	bl	800c174 <VL53L0X_RdByte>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	461a      	mov	r2, r3
 8009e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009e1c:	2277      	movs	r2, #119	; 0x77
 8009e1e:	2194      	movs	r1, #148	; 0x94
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f002 f925 	bl	800c070 <VL53L0X_WrByte>
 8009e26:	4603      	mov	r3, r0
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fe13 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2190      	movs	r1, #144	; 0x90
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f002 f9f1 	bl	800c238 <VL53L0X_RdDWord>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	0e5b      	lsrs	r3, r3, #25
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	0c9b      	lsrs	r3, r3, #18
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	0adb      	lsrs	r3, r3, #11
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009eae:	2278      	movs	r2, #120	; 0x78
 8009eb0:	2194      	movs	r1, #148	; 0x94
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f002 f8dc 	bl	800c070 <VL53L0X_WrByte>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fdca 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2190      	movs	r1, #144	; 0x90
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f002 f9a8 	bl	800c238 <VL53L0X_RdDWord>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	0f5b      	lsrs	r3, r3, #29
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f00:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f06:	4413      	add	r3, r2
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	0d9b      	lsrs	r3, r3, #22
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	0bdb      	lsrs	r3, r3, #15
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	019b      	lsls	r3, r3, #6
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009f56:	2279      	movs	r2, #121	; 0x79
 8009f58:	2194      	movs	r1, #148	; 0x94
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f002 f888 	bl	800c070 <VL53L0X_WrByte>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff fd76 	bl	8009a60 <VL53L0X_device_read_strobe>
 8009f74:	4603      	mov	r3, r0
 8009f76:	461a      	mov	r2, r3
 8009f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f86:	461a      	mov	r2, r3
 8009f88:	2190      	movs	r1, #144	; 0x90
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f002 f954 	bl	800c238 <VL53L0X_RdDWord>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	0e9b      	lsrs	r3, r3, #26
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fa8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009faa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fae:	4413      	add	r3, r2
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	0cdb      	lsrs	r3, r3, #19
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	0b1b      	lsrs	r3, r3, #12
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009ff0:	227a      	movs	r2, #122	; 0x7a
 8009ff2:	2194      	movs	r1, #148	; 0x94
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f002 f83b 	bl	800c070 <VL53L0X_WrByte>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a002:	4313      	orrs	r3, r2
 800a004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff fd29 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a016:	4313      	orrs	r3, r2
 800a018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a01c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a020:	461a      	mov	r2, r3
 800a022:	2190      	movs	r1, #144	; 0x90
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f002 f907 	bl	800c238 <VL53L0X_RdDWord>
 800a02a:	4603      	mov	r3, r0
 800a02c:	461a      	mov	r2, r3
 800a02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a032:	4313      	orrs	r3, r2
 800a034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	0f9b      	lsrs	r3, r3, #30
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a042:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a048:	4413      	add	r3, r2
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	0ddb      	lsrs	r3, r3, #23
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a066:	b2db      	uxtb	r3, r3
 800a068:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	0a5b      	lsrs	r3, r3, #9
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	089b      	lsrs	r3, r3, #2
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a08a:	2300      	movs	r3, #0
 800a08c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 80f1 	beq.w	800a27e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a09c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a0a0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f040 80ea 	bne.w	800a27e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a0aa:	227b      	movs	r2, #123	; 0x7b
 800a0ac:	2194      	movs	r1, #148	; 0x94
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f001 ffde 	bl	800c070 <VL53L0X_WrByte>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fccc 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a0d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0da:	461a      	mov	r2, r3
 800a0dc:	2190      	movs	r1, #144	; 0x90
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f002 f8aa 	bl	800c238 <VL53L0X_RdDWord>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a0f2:	227c      	movs	r2, #124	; 0x7c
 800a0f4:	2194      	movs	r1, #148	; 0x94
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f001 ffba 	bl	800c070 <VL53L0X_WrByte>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	461a      	mov	r2, r3
 800a100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a104:	4313      	orrs	r3, r2
 800a106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff fca8 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a118:	4313      	orrs	r3, r2
 800a11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a122:	461a      	mov	r2, r3
 800a124:	2190      	movs	r1, #144	; 0x90
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f002 f886 	bl	800c238 <VL53L0X_RdDWord>
 800a12c:	4603      	mov	r3, r0
 800a12e:	461a      	mov	r2, r3
 800a130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a134:	4313      	orrs	r3, r2
 800a136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a13a:	2273      	movs	r2, #115	; 0x73
 800a13c:	2194      	movs	r1, #148	; 0x94
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 ff96 	bl	800c070 <VL53L0X_WrByte>
 800a144:	4603      	mov	r3, r0
 800a146:	461a      	mov	r2, r3
 800a148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a14c:	4313      	orrs	r3, r2
 800a14e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fc84 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a160:	4313      	orrs	r3, r2
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a16a:	461a      	mov	r2, r3
 800a16c:	2190      	movs	r1, #144	; 0x90
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f002 f862 	bl	800c238 <VL53L0X_RdDWord>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a17c:	4313      	orrs	r3, r2
 800a17e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a186:	b29b      	uxth	r3, r3
 800a188:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a18a:	2274      	movs	r2, #116	; 0x74
 800a18c:	2194      	movs	r1, #148	; 0x94
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 ff6e 	bl	800c070 <VL53L0X_WrByte>
 800a194:	4603      	mov	r3, r0
 800a196:	461a      	mov	r2, r3
 800a198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a19c:	4313      	orrs	r3, r2
 800a19e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff fc5c 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	2190      	movs	r1, #144	; 0x90
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f002 f83a 	bl	800c238 <VL53L0X_RdDWord>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a1d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a1dc:	2275      	movs	r2, #117	; 0x75
 800a1de:	2194      	movs	r1, #148	; 0x94
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 ff45 	bl	800c070 <VL53L0X_WrByte>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff fc33 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a202:	4313      	orrs	r3, r2
 800a204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a20c:	461a      	mov	r2, r3
 800a20e:	2190      	movs	r1, #144	; 0x90
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f002 f811 	bl	800c238 <VL53L0X_RdDWord>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a21e:	4313      	orrs	r3, r2
 800a220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a228:	b29b      	uxth	r3, r3
 800a22a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a22c:	2276      	movs	r2, #118	; 0x76
 800a22e:	2194      	movs	r1, #148	; 0x94
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 ff1d 	bl	800c070 <VL53L0X_WrByte>
 800a236:	4603      	mov	r3, r0
 800a238:	461a      	mov	r2, r3
 800a23a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a23e:	4313      	orrs	r3, r2
 800a240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fc0b 	bl	8009a60 <VL53L0X_device_read_strobe>
 800a24a:	4603      	mov	r3, r0
 800a24c:	461a      	mov	r2, r3
 800a24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a252:	4313      	orrs	r3, r2
 800a254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a25c:	461a      	mov	r2, r3
 800a25e:	2190      	movs	r1, #144	; 0x90
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 ffe9 	bl	800c238 <VL53L0X_RdDWord>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a26e:	4313      	orrs	r3, r2
 800a270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a27a:	4313      	orrs	r3, r2
 800a27c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a27e:	2200      	movs	r2, #0
 800a280:	2181      	movs	r1, #129	; 0x81
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fef4 	bl	800c070 <VL53L0X_WrByte>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a290:	4313      	orrs	r3, r2
 800a292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a296:	2206      	movs	r2, #6
 800a298:	21ff      	movs	r1, #255	; 0xff
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fee8 	bl	800c070 <VL53L0X_WrByte>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a2ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	2183      	movs	r1, #131	; 0x83
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 ff5c 	bl	800c174 <VL53L0X_RdByte>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a2ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ce:	f023 0304 	bic.w	r3, r3, #4
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	2183      	movs	r1, #131	; 0x83
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fec9 	bl	800c070 <VL53L0X_WrByte>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	21ff      	movs	r1, #255	; 0xff
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 febd 	bl	800c070 <VL53L0X_WrByte>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2fe:	4313      	orrs	r3, r2
 800a300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a304:	2201      	movs	r2, #1
 800a306:	2100      	movs	r1, #0
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 feb1 	bl	800c070 <VL53L0X_WrByte>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a316:	4313      	orrs	r3, r2
 800a318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a31c:	2200      	movs	r2, #0
 800a31e:	21ff      	movs	r1, #255	; 0xff
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 fea5 	bl	800c070 <VL53L0X_WrByte>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a32e:	4313      	orrs	r3, r2
 800a330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a334:	2200      	movs	r2, #0
 800a336:	2180      	movs	r1, #128	; 0x80
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fe99 	bl	800c070 <VL53L0X_WrByte>
 800a33e:	4603      	mov	r3, r0
 800a340:	461a      	mov	r2, r3
 800a342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a346:	4313      	orrs	r3, r2
 800a348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a34c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a350:	2b00      	cmp	r3, #0
 800a352:	f040 808f 	bne.w	800a474 <VL53L0X_get_info_from_device+0x98e>
 800a356:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a35a:	2b07      	cmp	r3, #7
 800a35c:	f000 808a 	beq.w	800a474 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d024      	beq.n	800a3b4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a36a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a36e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a372:	2b00      	cmp	r3, #0
 800a374:	d11e      	bne.n	800a3b4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a37c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a386:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a38a:	2300      	movs	r3, #0
 800a38c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a38e:	e00e      	b.n	800a3ae <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a390:	f107 0208 	add.w	r2, r7, #8
 800a394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a396:	4413      	add	r3, r2
 800a398:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a3a4:	460a      	mov	r2, r1
 800a3a6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b0:	2b05      	cmp	r3, #5
 800a3b2:	dded      	ble.n	800a390 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d018      	beq.n	800a3f0 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a3be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3c2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d112      	bne.n	800a3f0 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a3ca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a3d4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	33f3      	adds	r3, #243	; 0xf3
 800a3e2:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a3e4:	f107 0310 	add.w	r3, r7, #16
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ec:	f002 fe2a 	bl	800d044 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d030      	beq.n	800a45c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a3fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3fe:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a402:	2b00      	cmp	r3, #0
 800a404:	d12a      	bne.n	800a45c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a418:	025b      	lsls	r3, r3, #9
 800a41a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a420:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a43a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a43e:	fb02 f303 	mul.w	r3, r2, r3
 800a442:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a444:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a448:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a44c:	425b      	negs	r3, r3
 800a44e:	b29b      	uxth	r3, r3
 800a450:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a454:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a45c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	4313      	orrs	r3, r2
 800a464:	b2db      	uxtb	r3, r3
 800a466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a46a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a474:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3760      	adds	r7, #96	; 0x60
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a480:	b490      	push	{r4, r7}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a48c:	f240 6377 	movw	r3, #1655	; 0x677
 800a490:	f04f 0400 	mov.w	r4, #0
 800a494:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800a498:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a49c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc90      	pop	{r4, r7}
 800a4b8:	4770      	bx	lr

0800a4ba <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b087      	sub	sp, #28
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d017      	beq.n	800a504 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a4da:	e005      	b.n	800a4e8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	085b      	lsrs	r3, r3, #1
 800a4e0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a4e2:	89fb      	ldrh	r3, [r7, #14]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f4      	bne.n	800a4dc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a4f2:	89fb      	ldrh	r3, [r7, #14]
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a500:	4413      	add	r3, r2
 800a502:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a504:	8afb      	ldrh	r3, [r7, #22]

}
 800a506:	4618      	mov	r0, r3
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a512:	b480      	push	{r7}
 800a514:	b085      	sub	sp, #20
 800a516:	af00      	add	r7, sp, #0
 800a518:	4603      	mov	r3, r0
 800a51a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a524:	88fa      	ldrh	r2, [r7, #6]
 800a526:	0a12      	lsrs	r2, r2, #8
 800a528:	b292      	uxth	r2, r2
 800a52a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a52c:	3301      	adds	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	4613      	mov	r3, r2
 800a54c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	4619      	mov	r1, r3
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff ff92 	bl	800a480 <VL53L0X_calc_macro_period_ps>
 800a55c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a564:	4a0a      	ldr	r2, [pc, #40]	; (800a590 <VL53L0X_calc_timeout_mclks+0x50>)
 800a566:	fba2 2303 	umull	r2, r3, r2, r3
 800a56a:	099b      	lsrs	r3, r3, #6
 800a56c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a574:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	fbb2 f3f3 	udiv	r3, r2, r3
 800a584:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a586:	69fb      	ldr	r3, [r7, #28]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	10624dd3 	.word	0x10624dd3

0800a594 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	807b      	strh	r3, [r7, #2]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a5a8:	787b      	ldrb	r3, [r7, #1]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff ff67 	bl	800a480 <VL53L0X_calc_macro_period_ps>
 800a5b2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5ba:	4a0a      	ldr	r2, [pc, #40]	; (800a5e4 <VL53L0X_calc_timeout_us+0x50>)
 800a5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c0:	099b      	lsrs	r3, r3, #6
 800a5c2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a5c4:	887b      	ldrh	r3, [r7, #2]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	fb02 f303 	mul.w	r3, r2, r3
 800a5cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a5d0:	4a04      	ldr	r2, [pc, #16]	; (800a5e4 <VL53L0X_calc_timeout_us+0x50>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	099b      	lsrs	r3, r3, #6
 800a5d8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a5da:	697b      	ldr	r3, [r7, #20]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	10624dd3 	.word	0x10624dd3

0800a5e8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	; 0x30
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <get_sequence_step_timeout+0x38>
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d002      	beq.n	800a620 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d128      	bne.n	800a672 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a620:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a624:	461a      	mov	r2, r3
 800a626:	2100      	movs	r1, #0
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7fd fa7d 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a634:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d109      	bne.n	800a650 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a63c:	f107 0320 	add.w	r3, r7, #32
 800a640:	461a      	mov	r2, r3
 800a642:	2146      	movs	r1, #70	; 0x46
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f001 fd95 	bl	800c174 <VL53L0X_RdByte>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a650:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a654:	b29b      	uxth	r3, r3
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff ff5b 	bl	800a512 <VL53L0X_decode_timeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a660:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a666:	4619      	mov	r1, r3
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7ff ff93 	bl	800a594 <VL53L0X_calc_timeout_us>
 800a66e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a670:	e092      	b.n	800a798 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	2b03      	cmp	r3, #3
 800a676:	d135      	bne.n	800a6e4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a678:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a67c:	461a      	mov	r2, r3
 800a67e:	2100      	movs	r1, #0
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7fd fa51 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a686:	4603      	mov	r3, r0
 800a688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a68c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 8081 	bne.w	800a798 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a696:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a69a:	461a      	mov	r2, r3
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fd fa42 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a6aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a6b2:	f107 031e 	add.w	r3, r7, #30
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	2151      	movs	r1, #81	; 0x51
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f001 fd84 	bl	800c1c8 <VL53L0X_RdWord>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a6c6:	8bfb      	ldrh	r3, [r7, #30]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff ff22 	bl	800a512 <VL53L0X_decode_timeout>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a6d2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a6d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff ff5a 	bl	800a594 <VL53L0X_calc_timeout_us>
 800a6e0:	62b8      	str	r0, [r7, #40]	; 0x28
 800a6e2:	e059      	b.n	800a798 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d156      	bne.n	800a798 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a6ea:	f107 0314 	add.w	r3, r7, #20
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fd fb25 	bl	8007d40 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01d      	beq.n	800a73c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a700:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a704:	461a      	mov	r2, r3
 800a706:	2100      	movs	r1, #0
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7fd fa0d 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a714:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10f      	bne.n	800a73c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a71c:	f107 031e 	add.w	r3, r7, #30
 800a720:	461a      	mov	r2, r3
 800a722:	2151      	movs	r1, #81	; 0x51
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f001 fd4f 	bl	800c1c8 <VL53L0X_RdWord>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a730:	8bfb      	ldrh	r3, [r7, #30]
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff feed 	bl	800a512 <VL53L0X_decode_timeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a73c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a744:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a748:	461a      	mov	r2, r3
 800a74a:	2101      	movs	r1, #1
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7fd f9eb 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a758:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10f      	bne.n	800a780 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a760:	f107 031c 	add.w	r3, r7, #28
 800a764:	461a      	mov	r2, r3
 800a766:	2171      	movs	r1, #113	; 0x71
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f001 fd2d 	bl	800c1c8 <VL53L0X_RdWord>
 800a76e:	4603      	mov	r3, r0
 800a770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a774:	8bbb      	ldrh	r3, [r7, #28]
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff fecb 	bl	800a512 <VL53L0X_decode_timeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a788:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a78e:	4619      	mov	r1, r3
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff feff 	bl	800a594 <VL53L0X_calc_timeout_us>
 800a796:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a79c:	601a      	str	r2, [r3, #0]

	return Status;
 800a79e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3730      	adds	r7, #48	; 0x30
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b08a      	sub	sp, #40	; 0x28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a7be:	7afb      	ldrb	r3, [r7, #11]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <set_sequence_step_timeout+0x26>
 800a7c4:	7afb      	ldrb	r3, [r7, #11]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d002      	beq.n	800a7d0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d138      	bne.n	800a842 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a7d0:	f107 031b 	add.w	r3, r7, #27
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7fd f9a5 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a7e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d11a      	bne.n	800a822 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a7ec:	7efb      	ldrb	r3, [r7, #27]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fea4 	bl	800a540 <VL53L0X_calc_timeout_mclks>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a7fc:	8bbb      	ldrh	r3, [r7, #28]
 800a7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a802:	d903      	bls.n	800a80c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a804:	23ff      	movs	r3, #255	; 0xff
 800a806:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a80a:	e004      	b.n	800a816 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a80c:	8bbb      	ldrh	r3, [r7, #28]
 800a80e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a810:	3b01      	subs	r3, #1
 800a812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 80ab 	bne.w	800a982 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a82c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a830:	461a      	mov	r2, r3
 800a832:	2146      	movs	r1, #70	; 0x46
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 fc1b 	bl	800c070 <VL53L0X_WrByte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a840:	e09f      	b.n	800a982 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	2b03      	cmp	r3, #3
 800a846:	d135      	bne.n	800a8b4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d11b      	bne.n	800a888 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a850:	f107 031b 	add.w	r3, r7, #27
 800a854:	461a      	mov	r2, r3
 800a856:	2100      	movs	r1, #0
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7fd f965 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a85e:	4603      	mov	r3, r0
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a864:	7efb      	ldrb	r3, [r7, #27]
 800a866:	461a      	mov	r2, r3
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fe68 	bl	800a540 <VL53L0X_calc_timeout_mclks>
 800a870:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a872:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff fe1f 	bl	800a4ba <VL53L0X_encode_timeout>
 800a87c:	4603      	mov	r3, r0
 800a87e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a880:	8b3a      	ldrh	r2, [r7, #24]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d108      	bne.n	800a8a2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a890:	8b3b      	ldrh	r3, [r7, #24]
 800a892:	461a      	mov	r2, r3
 800a894:	2151      	movs	r1, #81	; 0x51
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 fc0e 	bl	800c0b8 <VL53L0X_WrWord>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a8a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d16b      	bne.n	800a982 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a8b2:	e066      	b.n	800a982 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d160      	bne.n	800a97c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a8ba:	f107 0310 	add.w	r3, r7, #16
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7fd fa3d 	bl	8007d40 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a8ca:	7cfb      	ldrb	r3, [r7, #19]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01d      	beq.n	800a90c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8d0:	f107 031b 	add.w	r3, r7, #27
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7fd f925 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a8e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10f      	bne.n	800a90c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a8ec:	f107 0318 	add.w	r3, r7, #24
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	2151      	movs	r1, #81	; 0x51
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f001 fc67 	bl	800c1c8 <VL53L0X_RdWord>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a900:	8b3b      	ldrh	r3, [r7, #24]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fe05 	bl	800a512 <VL53L0X_decode_timeout>
 800a908:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a90a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a90c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a914:	f107 031b 	add.w	r3, r7, #27
 800a918:	461a      	mov	r2, r3
 800a91a:	2101      	movs	r1, #1
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7fd f903 	bl	8007b28 <VL53L0X_GetVcselPulsePeriod>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d128      	bne.n	800a982 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a930:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800a932:	461a      	mov	r2, r3
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7ff fe02 	bl	800a540 <VL53L0X_calc_timeout_mclks>
 800a93c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a940:	6a3a      	ldr	r2, [r7, #32]
 800a942:	4413      	add	r3, r2
 800a944:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800a946:	6a38      	ldr	r0, [r7, #32]
 800a948:	f7ff fdb7 	bl	800a4ba <VL53L0X_encode_timeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800a950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a954:	2b00      	cmp	r3, #0
 800a956:	d108      	bne.n	800a96a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a958:	8bfb      	ldrh	r3, [r7, #30]
 800a95a:	461a      	mov	r2, r3
 800a95c:	2171      	movs	r1, #113	; 0x71
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f001 fbaa 	bl	800c0b8 <VL53L0X_WrWord>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a96a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d107      	bne.n	800a982 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a97a:	e002      	b.n	800a982 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a97c:	23fc      	movs	r3, #252	; 0xfc
 800a97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	; 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b08a      	sub	sp, #40	; 0x28
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
 800a99a:	4613      	mov	r3, r2
 800a99c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a9aa:	2312      	movs	r3, #18
 800a9ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a9b6:	230e      	movs	r3, #14
 800a9b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a9c0:	78bb      	ldrb	r3, [r7, #2]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9cc:	23fc      	movs	r3, #252	; 0xfc
 800a9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9d2:	e020      	b.n	800aa16 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10d      	bne.n	800a9f6 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a9da:	78ba      	ldrb	r2, [r7, #2]
 800a9dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d304      	bcc.n	800a9ee <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a9e4:	78ba      	ldrb	r2, [r7, #2]
 800a9e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d903      	bls.n	800a9f6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9ee:	23fc      	movs	r3, #252	; 0xfc
 800a9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9f4:	e00f      	b.n	800aa16 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d10c      	bne.n	800aa16 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a9fc:	78ba      	ldrb	r2, [r7, #2]
 800a9fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d304      	bcc.n	800aa10 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800aa06:	78ba      	ldrb	r2, [r7, #2]
 800aa08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d902      	bls.n	800aa16 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa10:	23fc      	movs	r3, #252	; 0xfc
 800aa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800aa16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800aa1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa22:	e239      	b.n	800ae98 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d150      	bne.n	800aacc <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800aa2a:	78bb      	ldrb	r3, [r7, #2]
 800aa2c:	2b0c      	cmp	r3, #12
 800aa2e:	d110      	bne.n	800aa52 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800aa30:	2218      	movs	r2, #24
 800aa32:	2157      	movs	r1, #87	; 0x57
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fb1b 	bl	800c070 <VL53L0X_WrByte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800aa40:	2208      	movs	r2, #8
 800aa42:	2156      	movs	r1, #86	; 0x56
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 fb13 	bl	800c070 <VL53L0X_WrByte>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa50:	e17f      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800aa52:	78bb      	ldrb	r3, [r7, #2]
 800aa54:	2b0e      	cmp	r3, #14
 800aa56:	d110      	bne.n	800aa7a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800aa58:	2230      	movs	r2, #48	; 0x30
 800aa5a:	2157      	movs	r1, #87	; 0x57
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fb07 	bl	800c070 <VL53L0X_WrByte>
 800aa62:	4603      	mov	r3, r0
 800aa64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800aa68:	2208      	movs	r2, #8
 800aa6a:	2156      	movs	r1, #86	; 0x56
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 faff 	bl	800c070 <VL53L0X_WrByte>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa78:	e16b      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800aa7a:	78bb      	ldrb	r3, [r7, #2]
 800aa7c:	2b10      	cmp	r3, #16
 800aa7e:	d110      	bne.n	800aaa2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800aa80:	2240      	movs	r2, #64	; 0x40
 800aa82:	2157      	movs	r1, #87	; 0x57
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 faf3 	bl	800c070 <VL53L0X_WrByte>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800aa90:	2208      	movs	r2, #8
 800aa92:	2156      	movs	r1, #86	; 0x56
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 faeb 	bl	800c070 <VL53L0X_WrByte>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aaa0:	e157      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800aaa2:	78bb      	ldrb	r3, [r7, #2]
 800aaa4:	2b12      	cmp	r3, #18
 800aaa6:	f040 8154 	bne.w	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800aaaa:	2250      	movs	r2, #80	; 0x50
 800aaac:	2157      	movs	r1, #87	; 0x57
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 fade 	bl	800c070 <VL53L0X_WrByte>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800aaba:	2208      	movs	r2, #8
 800aabc:	2156      	movs	r1, #86	; 0x56
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f001 fad6 	bl	800c070 <VL53L0X_WrByte>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aaca:	e142      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	f040 813f 	bne.w	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800aad4:	78bb      	ldrb	r3, [r7, #2]
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d14c      	bne.n	800ab74 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800aada:	2210      	movs	r2, #16
 800aadc:	2148      	movs	r1, #72	; 0x48
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fac6 	bl	800c070 <VL53L0X_WrByte>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800aaea:	2208      	movs	r2, #8
 800aaec:	2147      	movs	r1, #71	; 0x47
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 fabe 	bl	800c070 <VL53L0X_WrByte>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aafa:	2202      	movs	r2, #2
 800aafc:	2132      	movs	r1, #50	; 0x32
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 fab6 	bl	800c070 <VL53L0X_WrByte>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ab12:	220c      	movs	r2, #12
 800ab14:	2130      	movs	r1, #48	; 0x30
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 faaa 	bl	800c070 <VL53L0X_WrByte>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	21ff      	movs	r1, #255	; 0xff
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 fa9e 	bl	800c070 <VL53L0X_WrByte>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ab42:	2230      	movs	r2, #48	; 0x30
 800ab44:	2130      	movs	r1, #48	; 0x30
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fa92 	bl	800c070 <VL53L0X_WrByte>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab54:	4313      	orrs	r3, r2
 800ab56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	21ff      	movs	r1, #255	; 0xff
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fa86 	bl	800c070 <VL53L0X_WrByte>
 800ab64:	4603      	mov	r3, r0
 800ab66:	461a      	mov	r2, r3
 800ab68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab72:	e0ee      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ab74:	78bb      	ldrb	r3, [r7, #2]
 800ab76:	2b0a      	cmp	r3, #10
 800ab78:	d14c      	bne.n	800ac14 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800ab7a:	2228      	movs	r2, #40	; 0x28
 800ab7c:	2148      	movs	r1, #72	; 0x48
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 fa76 	bl	800c070 <VL53L0X_WrByte>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	2147      	movs	r1, #71	; 0x47
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f001 fa6e 	bl	800c070 <VL53L0X_WrByte>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	2132      	movs	r1, #50	; 0x32
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 fa66 	bl	800c070 <VL53L0X_WrByte>
 800aba4:	4603      	mov	r3, r0
 800aba6:	461a      	mov	r2, r3
 800aba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abac:	4313      	orrs	r3, r2
 800abae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800abb2:	2209      	movs	r2, #9
 800abb4:	2130      	movs	r1, #48	; 0x30
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 fa5a 	bl	800c070 <VL53L0X_WrByte>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800abca:	2201      	movs	r2, #1
 800abcc:	21ff      	movs	r1, #255	; 0xff
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 fa4e 	bl	800c070 <VL53L0X_WrByte>
 800abd4:	4603      	mov	r3, r0
 800abd6:	461a      	mov	r2, r3
 800abd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abdc:	4313      	orrs	r3, r2
 800abde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800abe2:	2220      	movs	r2, #32
 800abe4:	2130      	movs	r1, #48	; 0x30
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 fa42 	bl	800c070 <VL53L0X_WrByte>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800abfa:	2200      	movs	r2, #0
 800abfc:	21ff      	movs	r1, #255	; 0xff
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f001 fa36 	bl	800c070 <VL53L0X_WrByte>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac12:	e09e      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ac14:	78bb      	ldrb	r3, [r7, #2]
 800ac16:	2b0c      	cmp	r3, #12
 800ac18:	d14c      	bne.n	800acb4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ac1a:	2238      	movs	r2, #56	; 0x38
 800ac1c:	2148      	movs	r1, #72	; 0x48
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fa26 	bl	800c070 <VL53L0X_WrByte>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	2147      	movs	r1, #71	; 0x47
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f001 fa1e 	bl	800c070 <VL53L0X_WrByte>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ac3a:	2203      	movs	r2, #3
 800ac3c:	2132      	movs	r1, #50	; 0x32
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 fa16 	bl	800c070 <VL53L0X_WrByte>
 800ac44:	4603      	mov	r3, r0
 800ac46:	461a      	mov	r2, r3
 800ac48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ac52:	2208      	movs	r2, #8
 800ac54:	2130      	movs	r1, #48	; 0x30
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f001 fa0a 	bl	800c070 <VL53L0X_WrByte>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac64:	4313      	orrs	r3, r2
 800ac66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	21ff      	movs	r1, #255	; 0xff
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 f9fe 	bl	800c070 <VL53L0X_WrByte>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ac82:	2220      	movs	r2, #32
 800ac84:	2130      	movs	r1, #48	; 0x30
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 f9f2 	bl	800c070 <VL53L0X_WrByte>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac94:	4313      	orrs	r3, r2
 800ac96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	21ff      	movs	r1, #255	; 0xff
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 f9e6 	bl	800c070 <VL53L0X_WrByte>
 800aca4:	4603      	mov	r3, r0
 800aca6:	461a      	mov	r2, r3
 800aca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acac:	4313      	orrs	r3, r2
 800acae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acb2:	e04e      	b.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800acb4:	78bb      	ldrb	r3, [r7, #2]
 800acb6:	2b0e      	cmp	r3, #14
 800acb8:	d14b      	bne.n	800ad52 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800acba:	2248      	movs	r2, #72	; 0x48
 800acbc:	2148      	movs	r1, #72	; 0x48
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 f9d6 	bl	800c070 <VL53L0X_WrByte>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800acca:	2208      	movs	r2, #8
 800accc:	2147      	movs	r1, #71	; 0x47
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 f9ce 	bl	800c070 <VL53L0X_WrByte>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800acda:	2203      	movs	r2, #3
 800acdc:	2132      	movs	r1, #50	; 0x32
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 f9c6 	bl	800c070 <VL53L0X_WrByte>
 800ace4:	4603      	mov	r3, r0
 800ace6:	461a      	mov	r2, r3
 800ace8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acec:	4313      	orrs	r3, r2
 800acee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800acf2:	2207      	movs	r2, #7
 800acf4:	2130      	movs	r1, #48	; 0x30
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 f9ba 	bl	800c070 <VL53L0X_WrByte>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461a      	mov	r2, r3
 800ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad04:	4313      	orrs	r3, r2
 800ad06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	21ff      	movs	r1, #255	; 0xff
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 f9ae 	bl	800c070 <VL53L0X_WrByte>
 800ad14:	4603      	mov	r3, r0
 800ad16:	461a      	mov	r2, r3
 800ad18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ad22:	2220      	movs	r2, #32
 800ad24:	2130      	movs	r1, #48	; 0x30
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 f9a2 	bl	800c070 <VL53L0X_WrByte>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad34:	4313      	orrs	r3, r2
 800ad36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	21ff      	movs	r1, #255	; 0xff
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f996 	bl	800c070 <VL53L0X_WrByte>
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ad52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d17f      	bne.n	800ae5a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ad5a:	78bb      	ldrb	r3, [r7, #2]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe fe38 	bl	80099d2 <VL53L0X_encode_vcsel_period>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d045      	beq.n	800adfe <VL53L0X_set_vcsel_pulse_period+0x470>
 800ad72:	e06e      	b.n	800ae52 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ad74:	f107 0314 	add.w	r3, r7, #20
 800ad78:	461a      	mov	r2, r3
 800ad7a:	2103      	movs	r1, #3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff fc33 	bl	800a5e8 <get_sequence_step_timeout>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ad88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	461a      	mov	r2, r3
 800ad96:	2102      	movs	r1, #2
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fc25 	bl	800a5e8 <get_sequence_step_timeout>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ada4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800adac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800adb0:	461a      	mov	r2, r3
 800adb2:	2150      	movs	r1, #80	; 0x50
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f95b 	bl	800c070 <VL53L0X_WrByte>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800adc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d108      	bne.n	800adda <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	461a      	mov	r2, r3
 800adcc:	2103      	movs	r1, #3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff fceb 	bl	800a7aa <set_sequence_step_timeout>
 800add4:	4603      	mov	r3, r0
 800add6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800adda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d108      	bne.n	800adf4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	461a      	mov	r2, r3
 800ade6:	2102      	movs	r1, #2
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fcde 	bl	800a7aa <set_sequence_step_timeout>
 800adee:	4603      	mov	r3, r0
 800adf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	78ba      	ldrb	r2, [r7, #2]
 800adf8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800adfc:	e02e      	b.n	800ae5c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800adfe:	f107 0318 	add.w	r3, r7, #24
 800ae02:	461a      	mov	r2, r3
 800ae04:	2104      	movs	r1, #4
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fbee 	bl	800a5e8 <get_sequence_step_timeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ae12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ae1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae1e:	461a      	mov	r2, r3
 800ae20:	2170      	movs	r1, #112	; 0x70
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f924 	bl	800c070 <VL53L0X_WrByte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ae2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d108      	bne.n	800ae48 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2104      	movs	r1, #4
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fcb4 	bl	800a7aa <set_sequence_step_timeout>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	78ba      	ldrb	r2, [r7, #2]
 800ae4c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ae50:	e004      	b.n	800ae5c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae52:	23fc      	movs	r3, #252	; 0xfc
 800ae54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae58:	e000      	b.n	800ae5c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ae5a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ae5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ae6a:	69f9      	ldr	r1, [r7, #28]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7fc fe1d 	bl	8007aac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ae78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d109      	bne.n	800ae94 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ae80:	f107 010f 	add.w	r1, r7, #15
 800ae84:	2301      	movs	r3, #1
 800ae86:	2200      	movs	r2, #0
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fe fcbd 	bl	8009808 <VL53L0X_perform_phase_calibration>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ae94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3728      	adds	r7, #40	; 0x28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <VL53L0X_get_vcsel_pulse_period+0x1e>
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d00a      	beq.n	800aed2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800aebc:	e013      	b.n	800aee6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800aebe:	f107 0316 	add.w	r3, r7, #22
 800aec2:	461a      	mov	r2, r3
 800aec4:	2150      	movs	r1, #80	; 0x50
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f001 f954 	bl	800c174 <VL53L0X_RdByte>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800aed0:	e00b      	b.n	800aeea <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800aed2:	f107 0316 	add.w	r3, r7, #22
 800aed6:	461a      	mov	r2, r3
 800aed8:	2170      	movs	r1, #112	; 0x70
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f001 f94a 	bl	800c174 <VL53L0X_RdByte>
 800aee0:	4603      	mov	r3, r0
 800aee2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800aee4:	e001      	b.n	800aeea <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aee6:	23fc      	movs	r3, #252	; 0xfc
 800aee8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800aeea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800aef2:	7dbb      	ldrb	r3, [r7, #22]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe fd59 	bl	80099ac <VL53L0X_decode_vcsel_period>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	701a      	strb	r2, [r3, #0]

	return Status;
 800af02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b092      	sub	sp, #72	; 0x48
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800af1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800af22:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800af24:	f240 7376 	movw	r3, #1910	; 0x776
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800af2a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800af2e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800af30:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af34:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800af36:	f240 234e 	movw	r3, #590	; 0x24e
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800af3c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800af40:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800af42:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800af48:	f240 2326 	movw	r3, #550	; 0x226
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800af52:	f644 6320 	movw	r3, #20000	; 0x4e20
 800af56:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	429a      	cmp	r2, r3
 800af62:	d205      	bcs.n	800af70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af64:	23fc      	movs	r3, #252	; 0xfc
 800af66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800af6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af6e:	e0aa      	b.n	800b0c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800af70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800af7c:	f107 0314 	add.w	r3, r7, #20
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fc fedc 	bl	8007d40 <VL53L0X_GetSequenceStepEnables>
 800af88:	4603      	mov	r3, r0
 800af8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800af8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af92:	2b00      	cmp	r3, #0
 800af94:	d15b      	bne.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800af96:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d105      	bne.n	800afa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800af9c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d102      	bne.n	800afa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800afa2:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d052      	beq.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800afa8:	f107 0310 	add.w	r3, r7, #16
 800afac:	461a      	mov	r2, r3
 800afae:	2102      	movs	r1, #2
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff fb19 	bl	800a5e8 <get_sequence_step_timeout>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800afbc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800afc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800afc8:	e07d      	b.n	800b0c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800afca:	7d3b      	ldrb	r3, [r7, #20]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00f      	beq.n	800aff0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800afd0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800afd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd4:	4413      	add	r3, r2
 800afd6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afdc:	429a      	cmp	r2, r3
 800afde:	d204      	bcs.n	800afea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800afe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	643b      	str	r3, [r7, #64]	; 0x40
 800afe8:	e002      	b.n	800aff0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800afea:	23fc      	movs	r3, #252	; 0xfc
 800afec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aff0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aff8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800affc:	e063      	b.n	800b0c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800affe:	7dbb      	ldrb	r3, [r7, #22]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d011      	beq.n	800b028 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	4413      	add	r3, r2
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b00e:	69fa      	ldr	r2, [r7, #28]
 800b010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b012:	429a      	cmp	r2, r3
 800b014:	d204      	bcs.n	800b020 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	643b      	str	r3, [r7, #64]	; 0x40
 800b01e:	e016      	b.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b020:	23fc      	movs	r3, #252	; 0xfc
 800b022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b026:	e012      	b.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b028:	7d7b      	ldrb	r3, [r7, #21]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00f      	beq.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b032:	4413      	add	r3, r2
 800b034:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b036:	69fa      	ldr	r2, [r7, #28]
 800b038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d204      	bcs.n	800b048 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b03e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	643b      	str	r3, [r7, #64]	; 0x40
 800b046:	e002      	b.n	800b04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b048:	23fc      	movs	r3, #252	; 0xfc
 800b04a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b04e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b056:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b05a:	e034      	b.n	800b0c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d019      	beq.n	800b096 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b062:	f107 030c 	add.w	r3, r7, #12
 800b066:	461a      	mov	r2, r3
 800b068:	2103      	movs	r1, #3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff fabc 	bl	800a5e8 <get_sequence_step_timeout>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b07a:	4413      	add	r3, r2
 800b07c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b07e:	69fa      	ldr	r2, [r7, #28]
 800b080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b082:	429a      	cmp	r2, r3
 800b084:	d204      	bcs.n	800b090 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	643b      	str	r3, [r7, #64]	; 0x40
 800b08e:	e002      	b.n	800b096 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b090:	23fc      	movs	r3, #252	; 0xfc
 800b092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b096:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d111      	bne.n	800b0c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b09e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00e      	beq.n	800b0c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b0a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b0ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff fb7a 	bl	800a7aa <set_sequence_step_timeout>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b0c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3748      	adds	r7, #72	; 0x48
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b090      	sub	sp, #64	; 0x40
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b0de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b0e2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b0e4:	f240 7376 	movw	r3, #1910	; 0x776
 800b0e8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b0ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b0ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b0f0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b0f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b0f6:	f240 234e 	movw	r3, #590	; 0x24e
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b0fc:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b100:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b102:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b106:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b108:	f240 2326 	movw	r3, #550	; 0x226
 800b10c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	441a      	add	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b11c:	f107 0318 	add.w	r3, r7, #24
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7fc fe0c 	bl	8007d40 <VL53L0X_GetSequenceStepEnables>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b12e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b136:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b13a:	e075      	b.n	800b228 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b13c:	7e3b      	ldrb	r3, [r7, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b142:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b148:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d030      	beq.n	800b1b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b14e:	f107 0310 	add.w	r3, r7, #16
 800b152:	461a      	mov	r2, r3
 800b154:	2102      	movs	r1, #2
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff fa46 	bl	800a5e8 <get_sequence_step_timeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b162:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b166:	2b00      	cmp	r3, #0
 800b168:	d122      	bne.n	800b1b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b16a:	7e3b      	ldrb	r3, [r7, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d007      	beq.n	800b180 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b174:	6939      	ldr	r1, [r7, #16]
 800b176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b178:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b17a:	441a      	add	r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b180:	7ebb      	ldrb	r3, [r7, #26]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b18a:	6939      	ldr	r1, [r7, #16]
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	440b      	add	r3, r1
 800b190:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b192:	441a      	add	r2, r3
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e00a      	b.n	800b1b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b19a:	7e7b      	ldrb	r3, [r7, #25]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d007      	beq.n	800b1b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b1a4:	6939      	ldr	r1, [r7, #16]
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b1aa:	441a      	add	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d114      	bne.n	800b1e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b1b8:	7efb      	ldrb	r3, [r7, #27]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d011      	beq.n	800b1e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b1be:	f107 030c 	add.w	r3, r7, #12
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	2103      	movs	r1, #3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7ff fa0e 	bl	800a5e8 <get_sequence_step_timeout>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b1dc:	441a      	add	r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d114      	bne.n	800b214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b1ea:	7f3b      	ldrb	r3, [r7, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d011      	beq.n	800b214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	2104      	movs	r1, #4
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff f9f5 	bl	800a5e8 <get_sequence_step_timeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b208:	6979      	ldr	r1, [r7, #20]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b20e:	441a      	add	r2, r3
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b214:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b224:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3740      	adds	r7, #64	; 0x40
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b242:	e0c6      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	4413      	add	r3, r2
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	3301      	adds	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b254:	7cfb      	ldrb	r3, [r7, #19]
 800b256:	2bff      	cmp	r3, #255	; 0xff
 800b258:	f040 808d 	bne.w	800b376 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	4413      	add	r3, r2
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	747b      	strb	r3, [r7, #17]
			Index++;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	3301      	adds	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b26c:	7c7b      	ldrb	r3, [r7, #17]
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d87e      	bhi.n	800b370 <VL53L0X_load_tuning_settings+0x140>
 800b272:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <VL53L0X_load_tuning_settings+0x48>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b289 	.word	0x0800b289
 800b27c:	0800b2c3 	.word	0x0800b2c3
 800b280:	0800b2fd 	.word	0x0800b2fd
 800b284:	0800b337 	.word	0x0800b337
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	4413      	add	r3, r2
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	743b      	strb	r3, [r7, #16]
				Index++;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	3301      	adds	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4413      	add	r3, r2
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b2a8:	7c3b      	ldrb	r3, [r7, #16]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	89ba      	ldrh	r2, [r7, #12]
 800b2bc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b2c0:	e087      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	743b      	strb	r3, [r7, #16]
				Index++;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b2e2:	7c3b      	ldrb	r3, [r7, #16]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	4413      	add	r3, r2
 800b2f0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	89ba      	ldrh	r2, [r7, #12]
 800b2f6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b2fa:	e06a      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	4413      	add	r3, r2
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	743b      	strb	r3, [r7, #16]
				Index++;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	3301      	adds	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4413      	add	r3, r2
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	3301      	adds	r3, #1
 800b31a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b31c:	7c3b      	ldrb	r3, [r7, #16]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	021b      	lsls	r3, r3, #8
 800b322:	b29a      	uxth	r2, r3
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	b29b      	uxth	r3, r3
 800b328:	4413      	add	r3, r2
 800b32a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	89ba      	ldrh	r2, [r7, #12]
 800b330:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b334:	e04d      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	4413      	add	r3, r2
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	3301      	adds	r3, #1
 800b344:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	4413      	add	r3, r2
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	3301      	adds	r3, #1
 800b354:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b356:	7c3b      	ldrb	r3, [r7, #16]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	b29b      	uxth	r3, r3
 800b362:	4413      	add	r3, r2
 800b364:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	89ba      	ldrh	r2, [r7, #12]
 800b36a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b36e:	e030      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b370:	23fc      	movs	r3, #252	; 0xfc
 800b372:	77fb      	strb	r3, [r7, #31]
 800b374:	e02d      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b376:	7cfb      	ldrb	r3, [r7, #19]
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d828      	bhi.n	800b3ce <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4413      	add	r3, r2
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	3301      	adds	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b38c:	2300      	movs	r3, #0
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	e00f      	b.n	800b3b2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	4413      	add	r3, r2
 800b398:	7819      	ldrb	r1, [r3, #0]
 800b39a:	f107 0208 	add.w	r2, r7, #8
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	460a      	mov	r2, r1
 800b3a4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	61bb      	str	r3, [r7, #24]
 800b3b2:	7cfb      	ldrb	r3, [r7, #19]
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	dbeb      	blt.n	800b392 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b3ba:	7cfb      	ldrb	r3, [r7, #19]
 800b3bc:	f107 0208 	add.w	r2, r7, #8
 800b3c0:	7cb9      	ldrb	r1, [r7, #18]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fdf8 	bl	800bfb8 <VL53L0X_WriteMulti>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	77fb      	strb	r3, [r7, #31]
 800b3cc:	e001      	b.n	800b3d2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b3ce:	23fc      	movs	r3, #252	; 0xfc
 800b3d0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <VL53L0X_load_tuning_settings+0x1b8>
 800b3de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f43f af2e 	beq.w	800b244 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b400:	2300      	movs	r3, #0
 800b402:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b40a:	f107 0313 	add.w	r3, r7, #19
 800b40e:	4619      	mov	r1, r3
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f7fc fd21 	bl	8007e58 <VL53L0X_GetXTalkCompensationEnable>
 800b416:	4603      	mov	r3, r0
 800b418:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b41a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d111      	bne.n	800b446 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b422:	7cfb      	ldrb	r3, [r7, #19]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00e      	beq.n	800b446 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	8a9b      	ldrh	r3, [r3, #20]
 800b432:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	fb02 f303 	mul.w	r3, r2, r3
 800b43a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3380      	adds	r3, #128	; 0x80
 800b440:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b446:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	60b9      	str	r1, [r7, #8]
 800b45c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b45e:	2300      	movs	r3, #0
 800b460:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b46a:	f107 0310 	add.w	r3, r7, #16
 800b46e:	461a      	mov	r2, r3
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff ffbe 	bl	800b3f4 <VL53L0X_get_total_xtalk_rate>
 800b478:	4603      	mov	r3, r0
 800b47a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b47c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d105      	bne.n	800b490 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	441a      	add	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	601a      	str	r2, [r3, #0]

	return Status;
 800b490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b09a      	sub	sp, #104	; 0x68
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b4aa:	2312      	movs	r3, #18
 800b4ac:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b4ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4b2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b4b4:	2342      	movs	r3, #66	; 0x42
 800b4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b4b8:	2306      	movs	r3, #6
 800b4ba:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b4bc:	2307      	movs	r3, #7
 800b4be:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b4d4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4da:	fb02 f303 	mul.w	r3, r2, r3
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e2:	3380      	adds	r3, #128	; 0x80
 800b4e4:	0a1b      	lsrs	r3, r3, #8
 800b4e6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4ec:	fb02 f303 	mul.w	r3, r2, r3
 800b4f0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01b      	beq.n	800b534 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	029b      	lsls	r3, r3, #10
 800b500:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b508:	4413      	add	r3, r2
 800b50a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b50c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	fbb2 f3f3 	udiv	r3, r2, r3
 800b514:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b518:	4613      	mov	r3, r2
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	4413      	add	r3, r2
 800b51e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b522:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b524:	fb02 f303 	mul.w	r3, r2, r3
 800b528:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b52c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b530:	0c1b      	lsrs	r3, r3, #16
 800b532:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b54c:	fb02 f303 	mul.w	r3, r2, r3
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b554:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b558:	0c1b      	lsrs	r3, r3, #16
 800b55a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b55e:	085a      	lsrs	r2, r3, #1
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	441a      	add	r2, r3
 800b564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b566:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b57c:	d302      	bcc.n	800b584 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800b57e:	4b55      	ldr	r3, [pc, #340]	; (800b6d4 <VL53L0X_calc_dmax+0x238>)
 800b580:	663b      	str	r3, [r7, #96]	; 0x60
 800b582:	e016      	b.n	800b5b2 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b586:	085a      	lsrs	r2, r3, #1
 800b588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b58a:	441a      	add	r2, r3
 800b58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b592:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b598:	fb02 f303 	mul.w	r3, r2, r3
 800b59c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b59e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b5a4:	0c1b      	lsrs	r3, r3, #16
 800b5a6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b5a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5ac:	fb02 f303 	mul.w	r3, r2, r3
 800b5b0:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5b4:	039b      	lsls	r3, r3, #14
 800b5b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5ba:	4a47      	ldr	r2, [pc, #284]	; (800b6d8 <VL53L0X_calc_dmax+0x23c>)
 800b5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c0:	099b      	lsrs	r3, r3, #6
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c8:	fb02 f303 	mul.w	r3, r2, r3
 800b5cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5d2:	fb02 f303 	mul.w	r3, r2, r3
 800b5d6:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	3308      	adds	r3, #8
 800b5dc:	091b      	lsrs	r3, r3, #4
 800b5de:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	4413      	add	r3, r2
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b5fa:	0b9b      	lsrs	r3, r3, #14
 800b5fc:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b602:	4413      	add	r3, r2
 800b604:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b608:	085b      	lsrs	r3, r3, #1
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	4413      	add	r3, r2
 800b60e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b610:	69ba      	ldr	r2, [r7, #24]
 800b612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b614:	fbb2 f3f3 	udiv	r3, r2, r3
 800b618:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	039b      	lsls	r3, r3, #14
 800b61e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	085b      	lsrs	r3, r3, #1
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	4413      	add	r3, r2
 800b628:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b632:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b638:	fb02 f303 	mul.w	r3, r2, r3
 800b63c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b644:	4a24      	ldr	r2, [pc, #144]	; (800b6d8 <VL53L0X_calc_dmax+0x23c>)
 800b646:	fba2 2303 	umull	r2, r3, r2, r3
 800b64a:	099b      	lsrs	r3, r3, #6
 800b64c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b65a:	4a1f      	ldr	r2, [pc, #124]	; (800b6d8 <VL53L0X_calc_dmax+0x23c>)
 800b65c:	fba2 2303 	umull	r2, r3, r2, r3
 800b660:	099b      	lsrs	r3, r3, #6
 800b662:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b666:	3380      	adds	r3, #128	; 0x80
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	085a      	lsrs	r2, r3, #1
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	441a      	add	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b680:	65bb      	str	r3, [r7, #88]	; 0x58
 800b682:	e001      	b.n	800b688 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b688:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b68a:	f7fe f9b5 	bl	80099f8 <VL53L0X_isqrt>
 800b68e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	085a      	lsrs	r2, r3, #1
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	441a      	add	r2, r3
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6a6:	e001      	b.n	800b6ac <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b6ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b6ae:	f7fe f9a3 	bl	80099f8 <VL53L0X_isqrt>
 800b6b2:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b6b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d902      	bls.n	800b6c8 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800b6c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b6c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6c6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b6c8:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3768      	adds	r7, #104	; 0x68
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	fff00000 	.word	0xfff00000
 800b6d8:	10624dd3 	.word	0x10624dd3

0800b6dc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b0b4      	sub	sp, #208	; 0xd0
 800b6e0:	af04      	add	r7, sp, #16
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b6ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b6ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b6f2:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b6f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b6fa:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b6fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b702:	f241 235c 	movw	r3, #4700	; 0x125c
 800b706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b70a:	4b9e      	ldr	r3, [pc, #632]	; (800b984 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b70c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b710:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b714:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b716:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b71a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b722:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b724:	4b98      	ldr	r3, [pc, #608]	; (800b988 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b726:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b72e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b732:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b734:	f240 6377 	movw	r3, #1655	; 0x677
 800b738:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b74e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b752:	0c1b      	lsrs	r3, r3, #16
 800b754:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b75c:	f107 0310 	add.w	r3, r7, #16
 800b760:	461a      	mov	r2, r3
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fe74 	bl	800b452 <VL53L0X_get_total_signal_rate>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b770:	f107 0314 	add.w	r3, r7, #20
 800b774:	461a      	mov	r2, r3
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff fe3b 	bl	800b3f4 <VL53L0X_get_total_xtalk_rate>
 800b77e:	4603      	mov	r3, r0
 800b780:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b792:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b796:	0c1b      	lsrs	r3, r3, #16
 800b798:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b7a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b7ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d902      	bls.n	800b7b8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b7b8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d168      	bne.n	800b892 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b7c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b7d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b7d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b7d8:	461a      	mov	r2, r3
 800b7da:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7fe feae 	bl	800a540 <VL53L0X_calc_timeout_mclks>
 800b7e4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b7f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b7fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b7fe:	461a      	mov	r2, r3
 800b800:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7fe fe9b 	bl	800a540 <VL53L0X_calc_timeout_mclks>
 800b80a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b80c:	2303      	movs	r3, #3
 800b80e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b812:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b816:	2b08      	cmp	r3, #8
 800b818:	d102      	bne.n	800b820 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b81a:	2302      	movs	r3, #2
 800b81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b824:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b826:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	02db      	lsls	r3, r3, #11
 800b830:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b834:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b838:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b83c:	4a53      	ldr	r2, [pc, #332]	; (800b98c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b83e:	fba2 2303 	umull	r2, r3, r2, r3
 800b842:	099b      	lsrs	r3, r3, #6
 800b844:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b84c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b84e:	fb02 f303 	mul.w	r3, r2, r3
 800b852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b85a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b85e:	4a4b      	ldr	r2, [pc, #300]	; (800b98c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b860:	fba2 2303 	umull	r2, r3, r2, r3
 800b864:	099b      	lsrs	r3, r3, #6
 800b866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	3380      	adds	r3, #128	; 0x80
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b878:	fb02 f303 	mul.w	r3, r2, r3
 800b87c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b884:	3380      	adds	r3, #128	; 0x80
 800b886:	0a1b      	lsrs	r3, r3, #8
 800b888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	021b      	lsls	r3, r3, #8
 800b890:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b892:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b89a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b89e:	e165      	b.n	800bb6c <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800b8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10c      	bne.n	800b8c0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8ac:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	e153      	b.n	800bb68 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b8c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b8ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8d2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8d6:	041a      	lsls	r2, r3, #16
 800b8d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b8e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d902      	bls.n	800b8f2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b8f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b8f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b8fa:	fb02 f303 	mul.w	r3, r2, r3
 800b8fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b906:	4613      	mov	r3, r2
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f872 	bl	80099f8 <VL53L0X_isqrt>
 800b914:	4603      	mov	r3, r0
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	891b      	ldrh	r3, [r3, #8]
 800b91e:	461a      	mov	r2, r3
 800b920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b922:	fb02 f303 	mul.w	r3, r2, r3
 800b926:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b92a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b92c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b930:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b932:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b934:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b938:	4a14      	ldr	r2, [pc, #80]	; (800b98c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b93a:	fba2 2303 	umull	r2, r3, r2, r3
 800b93e:	099b      	lsrs	r3, r3, #6
 800b940:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b944:	041b      	lsls	r3, r3, #16
 800b946:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b94a:	4a10      	ldr	r2, [pc, #64]	; (800b98c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b94c:	fba2 2303 	umull	r2, r3, r2, r3
 800b950:	099b      	lsrs	r3, r3, #6
 800b952:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b95a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	bfb8      	it	lt
 800b966:	425b      	neglt	r3, r3
 800b968:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	021b      	lsls	r3, r3, #8
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	7e1b      	ldrb	r3, [r3, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00b      	beq.n	800b990 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b97c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b980:	e035      	b.n	800b9ee <VL53L0X_calc_sigma_estimate+0x312>
 800b982:	bf00      	nop
 800b984:	028f87ae 	.word	0x028f87ae
 800b988:	0006999a 	.word	0x0006999a
 800b98c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b996:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9a8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b9b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b9b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9b6:	4413      	add	r3, r2
 800b9b8:	0c1b      	lsrs	r3, r3, #16
 800b9ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b9be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b9c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9ce:	085b      	lsrs	r3, r3, #1
 800b9d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b9d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b9dc:	fb02 f303 	mul.w	r3, r2, r3
 800b9e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b9e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9e8:	0b9b      	lsrs	r3, r3, #14
 800b9ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b9ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f4:	fb02 f303 	mul.w	r3, r2, r3
 800b9f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ba00:	0c1b      	lsrs	r3, r3, #16
 800ba02:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba08:	fb02 f303 	mul.w	r3, r2, r3
 800ba0c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ba0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ba12:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba22:	fb02 f303 	mul.w	r3, r2, r3
 800ba26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ba28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	4413      	add	r3, r2
 800ba2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ba30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba32:	f7fd ffe1 	bl	80099f8 <VL53L0X_isqrt>
 800ba36:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	041b      	lsls	r3, r3, #16
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	3332      	adds	r3, #50	; 0x32
 800ba42:	4a4c      	ldr	r2, [pc, #304]	; (800bb74 <VL53L0X_calc_sigma_estimate+0x498>)
 800ba44:	fba2 2303 	umull	r2, r3, r2, r3
 800ba48:	095a      	lsrs	r2, r3, #5
 800ba4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ba54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba58:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ba5c:	fb02 f303 	mul.w	r3, r2, r3
 800ba60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ba64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba68:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800ba72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba76:	4a40      	ldr	r2, [pc, #256]	; (800bb78 <VL53L0X_calc_sigma_estimate+0x49c>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	0b5b      	lsrs	r3, r3, #13
 800ba7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ba82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d902      	bls.n	800ba92 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ba8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ba92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800baa0:	4a36      	ldr	r2, [pc, #216]	; (800bb7c <VL53L0X_calc_sigma_estimate+0x4a0>)
 800baa2:	fba2 2303 	umull	r2, r3, r2, r3
 800baa6:	099b      	lsrs	r3, r3, #6
 800baa8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800baae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bab2:	441a      	add	r2, r3
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800baba:	4618      	mov	r0, r3
 800babc:	f7fd ff9c 	bl	80099f8 <VL53L0X_isqrt>
 800bac0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bace:	4a2b      	ldr	r2, [pc, #172]	; (800bb7c <VL53L0X_calc_sigma_estimate+0x4a0>)
 800bad0:	fba2 2303 	umull	r2, r3, r2, r3
 800bad4:	099b      	lsrs	r3, r3, #6
 800bad6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800bad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800badc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	fb02 f303 	mul.w	r3, r2, r3
 800baee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800baf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	4413      	add	r3, r2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fd ff7e 	bl	80099f8 <VL53L0X_isqrt>
 800bafc:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800bb0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d009      	beq.n	800bb26 <VL53L0X_calc_sigma_estimate+0x44a>
 800bb12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <VL53L0X_calc_sigma_estimate+0x44a>
 800bb1a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bb1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d903      	bls.n	800bb2e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800bb26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bb34:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800bb40:	6939      	ldr	r1, [r7, #16]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	9303      	str	r3, [sp, #12]
 800bb46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7ff fc9d 	bl	800b49c <VL53L0X_calc_dmax>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb68:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	37c0      	adds	r7, #192	; 0xc0
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	51eb851f 	.word	0x51eb851f
 800bb78:	d1b71759 	.word	0xd1b71759
 800bb7c:	10624dd3 	.word	0x10624dd3

0800bb80 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b090      	sub	sp, #64	; 0x40
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	607a      	str	r2, [r7, #4]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	72fb      	strb	r3, [r7, #11]
 800bb90:	4613      	mov	r3, r2
 800bb92:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800bbd2:	7afb      	ldrb	r3, [r7, #11]
 800bbd4:	10db      	asrs	r3, r3, #3
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	f003 030f 	and.w	r3, r3, #15
 800bbdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800bbe0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d017      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
 800bbe8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbec:	2b05      	cmp	r3, #5
 800bbee:	d013      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800bbf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbf4:	2b07      	cmp	r3, #7
 800bbf6:	d00f      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800bbf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbfc:	2b0c      	cmp	r3, #12
 800bbfe:	d00b      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800bc00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc04:	2b0d      	cmp	r3, #13
 800bc06:	d007      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800bc08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc0c:	2b0e      	cmp	r3, #14
 800bc0e:	d003      	beq.n	800bc18 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800bc10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc14:	2b0f      	cmp	r3, #15
 800bc16:	d103      	bne.n	800bc20 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800bc1e:	e002      	b.n	800bc26 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bc26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bc2e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bc32:	461a      	mov	r2, r3
 800bc34:	2100      	movs	r1, #0
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7fc f9e2 	bl	8008000 <VL53L0X_GetLimitCheckEnable>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bc42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d02e      	beq.n	800bca8 <VL53L0X_get_pal_range_status+0x128>
 800bc4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d12a      	bne.n	800bca8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800bc52:	f107 0310 	add.w	r3, r7, #16
 800bc56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bc5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff fd3d 	bl	800b6dc <VL53L0X_calc_sigma_estimate>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bc68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc76:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bc78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d113      	bne.n	800bca8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800bc80:	f107 0320 	add.w	r3, r7, #32
 800bc84:	461a      	mov	r2, r3
 800bc86:	2100      	movs	r1, #0
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7fc fa3f 	bl	800810c <VL53L0X_GetLimitCheckValue>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d006      	beq.n	800bca8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800bc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d902      	bls.n	800bca8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bca8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bcb0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7fc f9a1 	bl	8008000 <VL53L0X_GetLimitCheckEnable>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bcc4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d044      	beq.n	800bd56 <VL53L0X_get_pal_range_status+0x1d6>
 800bccc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d140      	bne.n	800bd56 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bcd4:	f107 031c 	add.w	r3, r7, #28
 800bcd8:	461a      	mov	r2, r3
 800bcda:	2102      	movs	r1, #2
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7fc fa15 	bl	800810c <VL53L0X_GetLimitCheckValue>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bce8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d107      	bne.n	800bd00 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	21ff      	movs	r1, #255	; 0xff
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f9bb 	bl	800c070 <VL53L0X_WrByte>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800bd00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800bd08:	f107 0316 	add.w	r3, r7, #22
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	21b6      	movs	r1, #182	; 0xb6
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 fa59 	bl	800c1c8 <VL53L0X_RdWord>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800bd1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d107      	bne.n	800bd34 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd24:	2200      	movs	r2, #0
 800bd26:	21ff      	movs	r1, #255	; 0xff
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f9a1 	bl	800c070 <VL53L0X_WrByte>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800bd34:	8afb      	ldrh	r3, [r7, #22]
 800bd36:	025b      	lsls	r3, r3, #9
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd3e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d006      	beq.n	800bd56 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bd48:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bd4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d902      	bls.n	800bd56 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bd56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bd5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd62:	461a      	mov	r2, r3
 800bd64:	2103      	movs	r1, #3
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7fc f94a 	bl	8008000 <VL53L0X_GetLimitCheckEnable>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bd72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d023      	beq.n	800bdc2 <VL53L0X_get_pal_range_status+0x242>
 800bd7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d11f      	bne.n	800bdc2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bd82:	893b      	ldrh	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d102      	bne.n	800bd8e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8c:	e005      	b.n	800bd9a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	021a      	lsls	r2, r3, #8
 800bd92:	893b      	ldrh	r3, [r7, #8]
 800bd94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bd9a:	f107 0318 	add.w	r3, r7, #24
 800bd9e:	461a      	mov	r2, r3
 800bda0:	2103      	movs	r1, #3
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7fc f9b2 	bl	800810c <VL53L0X_GetLimitCheckValue>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d006      	beq.n	800bdc2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bdb4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bdb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d202      	bcs.n	800bdc2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bdc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d14a      	bne.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bdca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d103      	bne.n	800bdda <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd4:	22ff      	movs	r2, #255	; 0xff
 800bdd6:	701a      	strb	r2, [r3, #0]
 800bdd8:	e042      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bdda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d007      	beq.n	800bdf2 <VL53L0X_get_pal_range_status+0x272>
 800bde2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d003      	beq.n	800bdf2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bdea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d103      	bne.n	800bdfa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bdf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf4:	2205      	movs	r2, #5
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e032      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bdfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bdfe:	2b06      	cmp	r3, #6
 800be00:	d003      	beq.n	800be0a <VL53L0X_get_pal_range_status+0x28a>
 800be02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800be06:	2b09      	cmp	r3, #9
 800be08:	d103      	bne.n	800be12 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800be0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0c:	2204      	movs	r2, #4
 800be0e:	701a      	strb	r2, [r3, #0]
 800be10:	e026      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800be12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800be16:	2b08      	cmp	r3, #8
 800be18:	d007      	beq.n	800be2a <VL53L0X_get_pal_range_status+0x2aa>
 800be1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800be1e:	2b0a      	cmp	r3, #10
 800be20:	d003      	beq.n	800be2a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800be22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be26:	2b01      	cmp	r3, #1
 800be28:	d103      	bne.n	800be32 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800be2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be2c:	2203      	movs	r2, #3
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	e016      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800be32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800be36:	2b04      	cmp	r3, #4
 800be38:	d003      	beq.n	800be42 <VL53L0X_get_pal_range_status+0x2c2>
 800be3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d103      	bne.n	800be4a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800be42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be44:	2202      	movs	r2, #2
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	e00a      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800be4a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d103      	bne.n	800be5a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800be52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be54:	2201      	movs	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	e002      	b.n	800be60 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800be5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800be60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800be68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be6a:	2200      	movs	r2, #0
 800be6c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800be6e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800be72:	461a      	mov	r2, r3
 800be74:	2101      	movs	r1, #1
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f7fc f8c2 	bl	8008000 <VL53L0X_GetLimitCheckEnable>
 800be7c:	4603      	mov	r3, r0
 800be7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800be82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be86:	2b00      	cmp	r3, #0
 800be88:	d14f      	bne.n	800bf2a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800be8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <VL53L0X_get_pal_range_status+0x31a>
 800be92:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800be96:	2b01      	cmp	r3, #1
 800be98:	d103      	bne.n	800bea2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800be9a:	2301      	movs	r3, #1
 800be9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea0:	e002      	b.n	800bea8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800beae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800beb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d003      	beq.n	800bec2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800beba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bec2:	2301      	movs	r3, #1
 800bec4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec8:	e002      	b.n	800bed0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800beda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d003      	beq.n	800beea <VL53L0X_get_pal_range_status+0x36a>
 800bee2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d103      	bne.n	800bef2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800beea:	2301      	movs	r3, #1
 800beec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bef0:	e002      	b.n	800bef8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800befe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bf02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <VL53L0X_get_pal_range_status+0x392>
 800bf0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d103      	bne.n	800bf1a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bf12:	2301      	movs	r3, #1
 800bf14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf18:	e002      	b.n	800bf20 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bf26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3740      	adds	r7, #64	; 0x40
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b088      	sub	sp, #32
 800bf3a:	af02      	add	r7, sp, #8
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	330a      	adds	r3, #10
 800bf46:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bf54:	b299      	uxth	r1, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	f7f7 fd45 	bl	80039f0 <HAL_I2C_Master_Transmit>
 800bf66:	4603      	mov	r3, r0
 800bf68:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bf6a:	693b      	ldr	r3, [r7, #16]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	330a      	adds	r3, #10
 800bf84:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bf92:	f043 0301 	orr.w	r3, r3, #1
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	b299      	uxth	r1, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	f7f7 fe17 	bl	8003bd8 <HAL_I2C_Master_Receive>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bfae:	693b      	ldr	r3, [r7, #16]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	607a      	str	r2, [r7, #4]
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	2b3f      	cmp	r3, #63	; 0x3f
 800bfd0:	d902      	bls.n	800bfd8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bfd2:	f06f 0303 	mvn.w	r3, #3
 800bfd6:	e016      	b.n	800c006 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bfd8:	4a0d      	ldr	r2, [pc, #52]	; (800c010 <VL53L0X_WriteMulti+0x58>)
 800bfda:	7afb      	ldrb	r3, [r7, #11]
 800bfdc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	480c      	ldr	r0, [pc, #48]	; (800c014 <VL53L0X_WriteMulti+0x5c>)
 800bfe4:	f000 f99e 	bl	800c324 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	3301      	adds	r3, #1
 800bfec:	461a      	mov	r2, r3
 800bfee:	4908      	ldr	r1, [pc, #32]	; (800c010 <VL53L0X_WriteMulti+0x58>)
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f7ff ffa0 	bl	800bf36 <_I2CWrite>
 800bff6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bffe:	23ec      	movs	r3, #236	; 0xec
 800c000:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20000978 	.word	0x20000978
 800c014:	20000979 	.word	0x20000979

0800c018 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	460b      	mov	r3, r1
 800c026:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c028:	2300      	movs	r3, #0
 800c02a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c02c:	f107 030b 	add.w	r3, r7, #11
 800c030:	2201      	movs	r2, #1
 800c032:	4619      	mov	r1, r3
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff ff7e 	bl	800bf36 <_I2CWrite>
 800c03a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c042:	23ec      	movs	r3, #236	; 0xec
 800c044:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c046:	e00c      	b.n	800c062 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff ff91 	bl	800bf74 <_I2CRead>
 800c052:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c05a:	23ec      	movs	r3, #236	; 0xec
 800c05c:	75fb      	strb	r3, [r7, #23]
 800c05e:	e000      	b.n	800c062 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c060:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	460b      	mov	r3, r1
 800c07a:	70fb      	strb	r3, [r7, #3]
 800c07c:	4613      	mov	r3, r2
 800c07e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c084:	4a0b      	ldr	r2, [pc, #44]	; (800c0b4 <VL53L0X_WrByte+0x44>)
 800c086:	78fb      	ldrb	r3, [r7, #3]
 800c088:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c08a:	4a0a      	ldr	r2, [pc, #40]	; (800c0b4 <VL53L0X_WrByte+0x44>)
 800c08c:	78bb      	ldrb	r3, [r7, #2]
 800c08e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c090:	2202      	movs	r2, #2
 800c092:	4908      	ldr	r1, [pc, #32]	; (800c0b4 <VL53L0X_WrByte+0x44>)
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ff4e 	bl	800bf36 <_I2CWrite>
 800c09a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0a2:	23ec      	movs	r3, #236	; 0xec
 800c0a4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20000978 	.word	0x20000978

0800c0b8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	70fb      	strb	r3, [r7, #3]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c0cc:	4a0e      	ldr	r2, [pc, #56]	; (800c108 <VL53L0X_WrWord+0x50>)
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c0d2:	883b      	ldrh	r3, [r7, #0]
 800c0d4:	0a1b      	lsrs	r3, r3, #8
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	4b0b      	ldr	r3, [pc, #44]	; (800c108 <VL53L0X_WrWord+0x50>)
 800c0dc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c0de:	883b      	ldrh	r3, [r7, #0]
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <VL53L0X_WrWord+0x50>)
 800c0e4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	4907      	ldr	r1, [pc, #28]	; (800c108 <VL53L0X_WrWord+0x50>)
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff ff23 	bl	800bf36 <_I2CWrite>
 800c0f0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0f8:	23ec      	movs	r3, #236	; 0xec
 800c0fa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20000978 	.word	0x20000978

0800c10c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	4608      	mov	r0, r1
 800c116:	4611      	mov	r1, r2
 800c118:	461a      	mov	r2, r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	70fb      	strb	r3, [r7, #3]
 800c11e:	460b      	mov	r3, r1
 800c120:	70bb      	strb	r3, [r7, #2]
 800c122:	4613      	mov	r3, r2
 800c124:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c12a:	f107 020e 	add.w	r2, r7, #14
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f81e 	bl	800c174 <VL53L0X_RdByte>
 800c138:	4603      	mov	r3, r0
 800c13a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800c13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d110      	bne.n	800c166 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800c144:	7bba      	ldrb	r2, [r7, #14]
 800c146:	78bb      	ldrb	r3, [r7, #2]
 800c148:	4013      	ands	r3, r2
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	787b      	ldrb	r3, [r7, #1]
 800c14e:	4313      	orrs	r3, r2
 800c150:	b2db      	uxtb	r3, r3
 800c152:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c154:	7bba      	ldrb	r2, [r7, #14]
 800c156:	78fb      	ldrb	r3, [r7, #3]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff ff88 	bl	800c070 <VL53L0X_WrByte>
 800c160:	4603      	mov	r3, r0
 800c162:	73fb      	strb	r3, [r7, #15]
 800c164:	e000      	b.n	800c168 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c166:	bf00      	nop
done:
    return Status;
 800c168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	460b      	mov	r3, r1
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c182:	2300      	movs	r3, #0
 800c184:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c186:	f107 030b 	add.w	r3, r7, #11
 800c18a:	2201      	movs	r2, #1
 800c18c:	4619      	mov	r1, r3
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f7ff fed1 	bl	800bf36 <_I2CWrite>
 800c194:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c19c:	23ec      	movs	r3, #236	; 0xec
 800c19e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c1a0:	e00c      	b.n	800c1bc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff fee4 	bl	800bf74 <_I2CRead>
 800c1ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1b4:	23ec      	movs	r3, #236	; 0xec
 800c1b6:	75fb      	strb	r3, [r7, #23]
 800c1b8:	e000      	b.n	800c1bc <VL53L0X_RdByte+0x48>
    }
done:
 800c1ba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c1da:	f107 030b 	add.w	r3, r7, #11
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff fea7 	bl	800bf36 <_I2CWrite>
 800c1e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1f0:	23ec      	movs	r3, #236	; 0xec
 800c1f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c1f4:	e017      	b.n	800c226 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	490e      	ldr	r1, [pc, #56]	; (800c234 <VL53L0X_RdWord+0x6c>)
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff feba 	bl	800bf74 <_I2CRead>
 800c200:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c208:	23ec      	movs	r3, #236	; 0xec
 800c20a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c20c:	e00b      	b.n	800c226 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <VL53L0X_RdWord+0x6c>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	021b      	lsls	r3, r3, #8
 800c216:	b29a      	uxth	r2, r3
 800c218:	4b06      	ldr	r3, [pc, #24]	; (800c234 <VL53L0X_RdWord+0x6c>)
 800c21a:	785b      	ldrb	r3, [r3, #1]
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	4413      	add	r3, r2
 800c220:	b29a      	uxth	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000978 	.word	0x20000978

0800c238 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	460b      	mov	r3, r1
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c246:	2300      	movs	r3, #0
 800c248:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c24a:	f107 030b 	add.w	r3, r7, #11
 800c24e:	2201      	movs	r2, #1
 800c250:	4619      	mov	r1, r3
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fe6f 	bl	800bf36 <_I2CWrite>
 800c258:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c260:	23ec      	movs	r3, #236	; 0xec
 800c262:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c264:	e01b      	b.n	800c29e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c266:	2204      	movs	r2, #4
 800c268:	4910      	ldr	r1, [pc, #64]	; (800c2ac <VL53L0X_RdDWord+0x74>)
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff fe82 	bl	800bf74 <_I2CRead>
 800c270:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c278:	23ec      	movs	r3, #236	; 0xec
 800c27a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c27c:	e00f      	b.n	800c29e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c27e:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <VL53L0X_RdDWord+0x74>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	061a      	lsls	r2, r3, #24
 800c284:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <VL53L0X_RdDWord+0x74>)
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	041b      	lsls	r3, r3, #16
 800c28a:	441a      	add	r2, r3
 800c28c:	4b07      	ldr	r3, [pc, #28]	; (800c2ac <VL53L0X_RdDWord+0x74>)
 800c28e:	789b      	ldrb	r3, [r3, #2]
 800c290:	021b      	lsls	r3, r3, #8
 800c292:	4413      	add	r3, r2
 800c294:	4a05      	ldr	r2, [pc, #20]	; (800c2ac <VL53L0X_RdDWord+0x74>)
 800c296:	78d2      	ldrb	r2, [r2, #3]
 800c298:	441a      	add	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000978 	.word	0x20000978

0800c2b0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c2bc:	2002      	movs	r0, #2
 800c2be:	f7f5 fcc5 	bl	8001c4c <HAL_Delay>
    return status;
 800c2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <__errno>:
 800c2d0:	4b01      	ldr	r3, [pc, #4]	; (800c2d8 <__errno+0x8>)
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	200002cc 	.word	0x200002cc

0800c2dc <__libc_init_array>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	4e0d      	ldr	r6, [pc, #52]	; (800c314 <__libc_init_array+0x38>)
 800c2e0:	4c0d      	ldr	r4, [pc, #52]	; (800c318 <__libc_init_array+0x3c>)
 800c2e2:	1ba4      	subs	r4, r4, r6
 800c2e4:	10a4      	asrs	r4, r4, #2
 800c2e6:	2500      	movs	r5, #0
 800c2e8:	42a5      	cmp	r5, r4
 800c2ea:	d109      	bne.n	800c300 <__libc_init_array+0x24>
 800c2ec:	4e0b      	ldr	r6, [pc, #44]	; (800c31c <__libc_init_array+0x40>)
 800c2ee:	4c0c      	ldr	r4, [pc, #48]	; (800c320 <__libc_init_array+0x44>)
 800c2f0:	f004 fa06 	bl	8010700 <_init>
 800c2f4:	1ba4      	subs	r4, r4, r6
 800c2f6:	10a4      	asrs	r4, r4, #2
 800c2f8:	2500      	movs	r5, #0
 800c2fa:	42a5      	cmp	r5, r4
 800c2fc:	d105      	bne.n	800c30a <__libc_init_array+0x2e>
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c304:	4798      	blx	r3
 800c306:	3501      	adds	r5, #1
 800c308:	e7ee      	b.n	800c2e8 <__libc_init_array+0xc>
 800c30a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c30e:	4798      	blx	r3
 800c310:	3501      	adds	r5, #1
 800c312:	e7f2      	b.n	800c2fa <__libc_init_array+0x1e>
 800c314:	08010ac8 	.word	0x08010ac8
 800c318:	08010ac8 	.word	0x08010ac8
 800c31c:	08010ac8 	.word	0x08010ac8
 800c320:	08010acc 	.word	0x08010acc

0800c324 <memcpy>:
 800c324:	b510      	push	{r4, lr}
 800c326:	1e43      	subs	r3, r0, #1
 800c328:	440a      	add	r2, r1
 800c32a:	4291      	cmp	r1, r2
 800c32c:	d100      	bne.n	800c330 <memcpy+0xc>
 800c32e:	bd10      	pop	{r4, pc}
 800c330:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c334:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c338:	e7f7      	b.n	800c32a <memcpy+0x6>

0800c33a <memset>:
 800c33a:	4402      	add	r2, r0
 800c33c:	4603      	mov	r3, r0
 800c33e:	4293      	cmp	r3, r2
 800c340:	d100      	bne.n	800c344 <memset+0xa>
 800c342:	4770      	bx	lr
 800c344:	f803 1b01 	strb.w	r1, [r3], #1
 800c348:	e7f9      	b.n	800c33e <memset+0x4>

0800c34a <__cvt>:
 800c34a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c34e:	ec55 4b10 	vmov	r4, r5, d0
 800c352:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c358:	2d00      	cmp	r5, #0
 800c35a:	460e      	mov	r6, r1
 800c35c:	4691      	mov	r9, r2
 800c35e:	4619      	mov	r1, r3
 800c360:	bfb8      	it	lt
 800c362:	4622      	movlt	r2, r4
 800c364:	462b      	mov	r3, r5
 800c366:	f027 0720 	bic.w	r7, r7, #32
 800c36a:	bfbb      	ittet	lt
 800c36c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c370:	461d      	movlt	r5, r3
 800c372:	2300      	movge	r3, #0
 800c374:	232d      	movlt	r3, #45	; 0x2d
 800c376:	bfb8      	it	lt
 800c378:	4614      	movlt	r4, r2
 800c37a:	2f46      	cmp	r7, #70	; 0x46
 800c37c:	700b      	strb	r3, [r1, #0]
 800c37e:	d004      	beq.n	800c38a <__cvt+0x40>
 800c380:	2f45      	cmp	r7, #69	; 0x45
 800c382:	d100      	bne.n	800c386 <__cvt+0x3c>
 800c384:	3601      	adds	r6, #1
 800c386:	2102      	movs	r1, #2
 800c388:	e000      	b.n	800c38c <__cvt+0x42>
 800c38a:	2103      	movs	r1, #3
 800c38c:	ab03      	add	r3, sp, #12
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	ab02      	add	r3, sp, #8
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	4632      	mov	r2, r6
 800c396:	4653      	mov	r3, sl
 800c398:	ec45 4b10 	vmov	d0, r4, r5
 800c39c:	f001 fd98 	bl	800ded0 <_dtoa_r>
 800c3a0:	2f47      	cmp	r7, #71	; 0x47
 800c3a2:	4680      	mov	r8, r0
 800c3a4:	d102      	bne.n	800c3ac <__cvt+0x62>
 800c3a6:	f019 0f01 	tst.w	r9, #1
 800c3aa:	d026      	beq.n	800c3fa <__cvt+0xb0>
 800c3ac:	2f46      	cmp	r7, #70	; 0x46
 800c3ae:	eb08 0906 	add.w	r9, r8, r6
 800c3b2:	d111      	bne.n	800c3d8 <__cvt+0x8e>
 800c3b4:	f898 3000 	ldrb.w	r3, [r8]
 800c3b8:	2b30      	cmp	r3, #48	; 0x30
 800c3ba:	d10a      	bne.n	800c3d2 <__cvt+0x88>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	f7f4 fb88 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3c8:	b918      	cbnz	r0, 800c3d2 <__cvt+0x88>
 800c3ca:	f1c6 0601 	rsb	r6, r6, #1
 800c3ce:	f8ca 6000 	str.w	r6, [sl]
 800c3d2:	f8da 3000 	ldr.w	r3, [sl]
 800c3d6:	4499      	add	r9, r3
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3e4:	b938      	cbnz	r0, 800c3f6 <__cvt+0xac>
 800c3e6:	2230      	movs	r2, #48	; 0x30
 800c3e8:	9b03      	ldr	r3, [sp, #12]
 800c3ea:	454b      	cmp	r3, r9
 800c3ec:	d205      	bcs.n	800c3fa <__cvt+0xb0>
 800c3ee:	1c59      	adds	r1, r3, #1
 800c3f0:	9103      	str	r1, [sp, #12]
 800c3f2:	701a      	strb	r2, [r3, #0]
 800c3f4:	e7f8      	b.n	800c3e8 <__cvt+0x9e>
 800c3f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3fe:	eba3 0308 	sub.w	r3, r3, r8
 800c402:	4640      	mov	r0, r8
 800c404:	6013      	str	r3, [r2, #0]
 800c406:	b004      	add	sp, #16
 800c408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c40c <__exponent>:
 800c40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c40e:	2900      	cmp	r1, #0
 800c410:	4604      	mov	r4, r0
 800c412:	bfba      	itte	lt
 800c414:	4249      	neglt	r1, r1
 800c416:	232d      	movlt	r3, #45	; 0x2d
 800c418:	232b      	movge	r3, #43	; 0x2b
 800c41a:	2909      	cmp	r1, #9
 800c41c:	f804 2b02 	strb.w	r2, [r4], #2
 800c420:	7043      	strb	r3, [r0, #1]
 800c422:	dd20      	ble.n	800c466 <__exponent+0x5a>
 800c424:	f10d 0307 	add.w	r3, sp, #7
 800c428:	461f      	mov	r7, r3
 800c42a:	260a      	movs	r6, #10
 800c42c:	fb91 f5f6 	sdiv	r5, r1, r6
 800c430:	fb06 1115 	mls	r1, r6, r5, r1
 800c434:	3130      	adds	r1, #48	; 0x30
 800c436:	2d09      	cmp	r5, #9
 800c438:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c43c:	f103 32ff 	add.w	r2, r3, #4294967295
 800c440:	4629      	mov	r1, r5
 800c442:	dc09      	bgt.n	800c458 <__exponent+0x4c>
 800c444:	3130      	adds	r1, #48	; 0x30
 800c446:	3b02      	subs	r3, #2
 800c448:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c44c:	42bb      	cmp	r3, r7
 800c44e:	4622      	mov	r2, r4
 800c450:	d304      	bcc.n	800c45c <__exponent+0x50>
 800c452:	1a10      	subs	r0, r2, r0
 800c454:	b003      	add	sp, #12
 800c456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c458:	4613      	mov	r3, r2
 800c45a:	e7e7      	b.n	800c42c <__exponent+0x20>
 800c45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c460:	f804 2b01 	strb.w	r2, [r4], #1
 800c464:	e7f2      	b.n	800c44c <__exponent+0x40>
 800c466:	2330      	movs	r3, #48	; 0x30
 800c468:	4419      	add	r1, r3
 800c46a:	7083      	strb	r3, [r0, #2]
 800c46c:	1d02      	adds	r2, r0, #4
 800c46e:	70c1      	strb	r1, [r0, #3]
 800c470:	e7ef      	b.n	800c452 <__exponent+0x46>
	...

0800c474 <_printf_float>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	b08d      	sub	sp, #52	; 0x34
 800c47a:	460c      	mov	r4, r1
 800c47c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c480:	4616      	mov	r6, r2
 800c482:	461f      	mov	r7, r3
 800c484:	4605      	mov	r5, r0
 800c486:	f002 fed1 	bl	800f22c <_localeconv_r>
 800c48a:	6803      	ldr	r3, [r0, #0]
 800c48c:	9304      	str	r3, [sp, #16]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f3 fea6 	bl	80001e0 <strlen>
 800c494:	2300      	movs	r3, #0
 800c496:	930a      	str	r3, [sp, #40]	; 0x28
 800c498:	f8d8 3000 	ldr.w	r3, [r8]
 800c49c:	9005      	str	r0, [sp, #20]
 800c49e:	3307      	adds	r3, #7
 800c4a0:	f023 0307 	bic.w	r3, r3, #7
 800c4a4:	f103 0208 	add.w	r2, r3, #8
 800c4a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c4ac:	f8d4 b000 	ldr.w	fp, [r4]
 800c4b0:	f8c8 2000 	str.w	r2, [r8]
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c4c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4c4:	9307      	str	r3, [sp, #28]
 800c4c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ce:	4ba7      	ldr	r3, [pc, #668]	; (800c76c <_printf_float+0x2f8>)
 800c4d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4d4:	f7f4 fb32 	bl	8000b3c <__aeabi_dcmpun>
 800c4d8:	bb70      	cbnz	r0, 800c538 <_printf_float+0xc4>
 800c4da:	f04f 32ff 	mov.w	r2, #4294967295
 800c4de:	4ba3      	ldr	r3, [pc, #652]	; (800c76c <_printf_float+0x2f8>)
 800c4e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4e4:	f7f4 fb0c 	bl	8000b00 <__aeabi_dcmple>
 800c4e8:	bb30      	cbnz	r0, 800c538 <_printf_float+0xc4>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	f7f4 fafb 	bl	8000aec <__aeabi_dcmplt>
 800c4f6:	b110      	cbz	r0, 800c4fe <_printf_float+0x8a>
 800c4f8:	232d      	movs	r3, #45	; 0x2d
 800c4fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4fe:	4a9c      	ldr	r2, [pc, #624]	; (800c770 <_printf_float+0x2fc>)
 800c500:	4b9c      	ldr	r3, [pc, #624]	; (800c774 <_printf_float+0x300>)
 800c502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c506:	bf8c      	ite	hi
 800c508:	4690      	movhi	r8, r2
 800c50a:	4698      	movls	r8, r3
 800c50c:	2303      	movs	r3, #3
 800c50e:	f02b 0204 	bic.w	r2, fp, #4
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	6022      	str	r2, [r4, #0]
 800c516:	f04f 0900 	mov.w	r9, #0
 800c51a:	9700      	str	r7, [sp, #0]
 800c51c:	4633      	mov	r3, r6
 800c51e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c520:	4621      	mov	r1, r4
 800c522:	4628      	mov	r0, r5
 800c524:	f000 f9e6 	bl	800c8f4 <_printf_common>
 800c528:	3001      	adds	r0, #1
 800c52a:	f040 808d 	bne.w	800c648 <_printf_float+0x1d4>
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	b00d      	add	sp, #52	; 0x34
 800c534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c538:	4642      	mov	r2, r8
 800c53a:	464b      	mov	r3, r9
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f4 fafc 	bl	8000b3c <__aeabi_dcmpun>
 800c544:	b110      	cbz	r0, 800c54c <_printf_float+0xd8>
 800c546:	4a8c      	ldr	r2, [pc, #560]	; (800c778 <_printf_float+0x304>)
 800c548:	4b8c      	ldr	r3, [pc, #560]	; (800c77c <_printf_float+0x308>)
 800c54a:	e7da      	b.n	800c502 <_printf_float+0x8e>
 800c54c:	6861      	ldr	r1, [r4, #4]
 800c54e:	1c4b      	adds	r3, r1, #1
 800c550:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c554:	a80a      	add	r0, sp, #40	; 0x28
 800c556:	d13e      	bne.n	800c5d6 <_printf_float+0x162>
 800c558:	2306      	movs	r3, #6
 800c55a:	6063      	str	r3, [r4, #4]
 800c55c:	2300      	movs	r3, #0
 800c55e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c562:	ab09      	add	r3, sp, #36	; 0x24
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	ec49 8b10 	vmov	d0, r8, r9
 800c56a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c56e:	6022      	str	r2, [r4, #0]
 800c570:	f8cd a004 	str.w	sl, [sp, #4]
 800c574:	6861      	ldr	r1, [r4, #4]
 800c576:	4628      	mov	r0, r5
 800c578:	f7ff fee7 	bl	800c34a <__cvt>
 800c57c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c580:	2b47      	cmp	r3, #71	; 0x47
 800c582:	4680      	mov	r8, r0
 800c584:	d109      	bne.n	800c59a <_printf_float+0x126>
 800c586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c588:	1cd8      	adds	r0, r3, #3
 800c58a:	db02      	blt.n	800c592 <_printf_float+0x11e>
 800c58c:	6862      	ldr	r2, [r4, #4]
 800c58e:	4293      	cmp	r3, r2
 800c590:	dd47      	ble.n	800c622 <_printf_float+0x1ae>
 800c592:	f1aa 0a02 	sub.w	sl, sl, #2
 800c596:	fa5f fa8a 	uxtb.w	sl, sl
 800c59a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c59e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5a0:	d824      	bhi.n	800c5ec <_printf_float+0x178>
 800c5a2:	3901      	subs	r1, #1
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5aa:	9109      	str	r1, [sp, #36]	; 0x24
 800c5ac:	f7ff ff2e 	bl	800c40c <__exponent>
 800c5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5b2:	1813      	adds	r3, r2, r0
 800c5b4:	2a01      	cmp	r2, #1
 800c5b6:	4681      	mov	r9, r0
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	dc02      	bgt.n	800c5c2 <_printf_float+0x14e>
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	07d1      	lsls	r1, r2, #31
 800c5c0:	d501      	bpl.n	800c5c6 <_printf_float+0x152>
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	6123      	str	r3, [r4, #16]
 800c5c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d0a5      	beq.n	800c51a <_printf_float+0xa6>
 800c5ce:	232d      	movs	r3, #45	; 0x2d
 800c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d4:	e7a1      	b.n	800c51a <_printf_float+0xa6>
 800c5d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c5da:	f000 8177 	beq.w	800c8cc <_printf_float+0x458>
 800c5de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c5e2:	d1bb      	bne.n	800c55c <_printf_float+0xe8>
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	d1b9      	bne.n	800c55c <_printf_float+0xe8>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e7b6      	b.n	800c55a <_printf_float+0xe6>
 800c5ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c5f0:	d119      	bne.n	800c626 <_printf_float+0x1b2>
 800c5f2:	2900      	cmp	r1, #0
 800c5f4:	6863      	ldr	r3, [r4, #4]
 800c5f6:	dd0c      	ble.n	800c612 <_printf_float+0x19e>
 800c5f8:	6121      	str	r1, [r4, #16]
 800c5fa:	b913      	cbnz	r3, 800c602 <_printf_float+0x18e>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	07d2      	lsls	r2, r2, #31
 800c600:	d502      	bpl.n	800c608 <_printf_float+0x194>
 800c602:	3301      	adds	r3, #1
 800c604:	440b      	add	r3, r1
 800c606:	6123      	str	r3, [r4, #16]
 800c608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c60c:	f04f 0900 	mov.w	r9, #0
 800c610:	e7d9      	b.n	800c5c6 <_printf_float+0x152>
 800c612:	b913      	cbnz	r3, 800c61a <_printf_float+0x1a6>
 800c614:	6822      	ldr	r2, [r4, #0]
 800c616:	07d0      	lsls	r0, r2, #31
 800c618:	d501      	bpl.n	800c61e <_printf_float+0x1aa>
 800c61a:	3302      	adds	r3, #2
 800c61c:	e7f3      	b.n	800c606 <_printf_float+0x192>
 800c61e:	2301      	movs	r3, #1
 800c620:	e7f1      	b.n	800c606 <_printf_float+0x192>
 800c622:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c626:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c62a:	4293      	cmp	r3, r2
 800c62c:	db05      	blt.n	800c63a <_printf_float+0x1c6>
 800c62e:	6822      	ldr	r2, [r4, #0]
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	07d1      	lsls	r1, r2, #31
 800c634:	d5e8      	bpl.n	800c608 <_printf_float+0x194>
 800c636:	3301      	adds	r3, #1
 800c638:	e7e5      	b.n	800c606 <_printf_float+0x192>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfd4      	ite	le
 800c63e:	f1c3 0302 	rsble	r3, r3, #2
 800c642:	2301      	movgt	r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	e7de      	b.n	800c606 <_printf_float+0x192>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	055a      	lsls	r2, r3, #21
 800c64c:	d407      	bmi.n	800c65e <_printf_float+0x1ea>
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	4642      	mov	r2, r8
 800c652:	4631      	mov	r1, r6
 800c654:	4628      	mov	r0, r5
 800c656:	47b8      	blx	r7
 800c658:	3001      	adds	r0, #1
 800c65a:	d12b      	bne.n	800c6b4 <_printf_float+0x240>
 800c65c:	e767      	b.n	800c52e <_printf_float+0xba>
 800c65e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c662:	f240 80dc 	bls.w	800c81e <_printf_float+0x3aa>
 800c666:	2200      	movs	r2, #0
 800c668:	2300      	movs	r3, #0
 800c66a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c66e:	f7f4 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 800c672:	2800      	cmp	r0, #0
 800c674:	d033      	beq.n	800c6de <_printf_float+0x26a>
 800c676:	2301      	movs	r3, #1
 800c678:	4a41      	ldr	r2, [pc, #260]	; (800c780 <_printf_float+0x30c>)
 800c67a:	4631      	mov	r1, r6
 800c67c:	4628      	mov	r0, r5
 800c67e:	47b8      	blx	r7
 800c680:	3001      	adds	r0, #1
 800c682:	f43f af54 	beq.w	800c52e <_printf_float+0xba>
 800c686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c68a:	429a      	cmp	r2, r3
 800c68c:	db02      	blt.n	800c694 <_printf_float+0x220>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	07d8      	lsls	r0, r3, #31
 800c692:	d50f      	bpl.n	800c6b4 <_printf_float+0x240>
 800c694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c698:	4631      	mov	r1, r6
 800c69a:	4628      	mov	r0, r5
 800c69c:	47b8      	blx	r7
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f43f af45 	beq.w	800c52e <_printf_float+0xba>
 800c6a4:	f04f 0800 	mov.w	r8, #0
 800c6a8:	f104 091a 	add.w	r9, r4, #26
 800c6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	4543      	cmp	r3, r8
 800c6b2:	dc09      	bgt.n	800c6c8 <_printf_float+0x254>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	079b      	lsls	r3, r3, #30
 800c6b8:	f100 8103 	bmi.w	800c8c2 <_printf_float+0x44e>
 800c6bc:	68e0      	ldr	r0, [r4, #12]
 800c6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c0:	4298      	cmp	r0, r3
 800c6c2:	bfb8      	it	lt
 800c6c4:	4618      	movlt	r0, r3
 800c6c6:	e734      	b.n	800c532 <_printf_float+0xbe>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	464a      	mov	r2, r9
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f43f af2b 	beq.w	800c52e <_printf_float+0xba>
 800c6d8:	f108 0801 	add.w	r8, r8, #1
 800c6dc:	e7e6      	b.n	800c6ac <_printf_float+0x238>
 800c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dc2b      	bgt.n	800c73c <_printf_float+0x2c8>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	4a26      	ldr	r2, [pc, #152]	; (800c780 <_printf_float+0x30c>)
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f43f af1d 	beq.w	800c52e <_printf_float+0xba>
 800c6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f6:	b923      	cbnz	r3, 800c702 <_printf_float+0x28e>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fa:	b913      	cbnz	r3, 800c702 <_printf_float+0x28e>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	07d9      	lsls	r1, r3, #31
 800c700:	d5d8      	bpl.n	800c6b4 <_printf_float+0x240>
 800c702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f af0e 	beq.w	800c52e <_printf_float+0xba>
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	f104 0a1a 	add.w	sl, r4, #26
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	425b      	negs	r3, r3
 800c71e:	454b      	cmp	r3, r9
 800c720:	dc01      	bgt.n	800c726 <_printf_float+0x2b2>
 800c722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c724:	e794      	b.n	800c650 <_printf_float+0x1dc>
 800c726:	2301      	movs	r3, #1
 800c728:	4652      	mov	r2, sl
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f aefc 	beq.w	800c52e <_printf_float+0xba>
 800c736:	f109 0901 	add.w	r9, r9, #1
 800c73a:	e7ee      	b.n	800c71a <_printf_float+0x2a6>
 800c73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c73e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c740:	429a      	cmp	r2, r3
 800c742:	bfa8      	it	ge
 800c744:	461a      	movge	r2, r3
 800c746:	2a00      	cmp	r2, #0
 800c748:	4691      	mov	r9, r2
 800c74a:	dd07      	ble.n	800c75c <_printf_float+0x2e8>
 800c74c:	4613      	mov	r3, r2
 800c74e:	4631      	mov	r1, r6
 800c750:	4642      	mov	r2, r8
 800c752:	4628      	mov	r0, r5
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f aee9 	beq.w	800c52e <_printf_float+0xba>
 800c75c:	f104 031a 	add.w	r3, r4, #26
 800c760:	f04f 0b00 	mov.w	fp, #0
 800c764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c768:	9306      	str	r3, [sp, #24]
 800c76a:	e015      	b.n	800c798 <_printf_float+0x324>
 800c76c:	7fefffff 	.word	0x7fefffff
 800c770:	080107b0 	.word	0x080107b0
 800c774:	080107ac 	.word	0x080107ac
 800c778:	080107b8 	.word	0x080107b8
 800c77c:	080107b4 	.word	0x080107b4
 800c780:	080107bc 	.word	0x080107bc
 800c784:	2301      	movs	r3, #1
 800c786:	9a06      	ldr	r2, [sp, #24]
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f aecd 	beq.w	800c52e <_printf_float+0xba>
 800c794:	f10b 0b01 	add.w	fp, fp, #1
 800c798:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c79c:	ebaa 0309 	sub.w	r3, sl, r9
 800c7a0:	455b      	cmp	r3, fp
 800c7a2:	dcef      	bgt.n	800c784 <_printf_float+0x310>
 800c7a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	44d0      	add	r8, sl
 800c7ac:	db15      	blt.n	800c7da <_printf_float+0x366>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	07da      	lsls	r2, r3, #31
 800c7b2:	d412      	bmi.n	800c7da <_printf_float+0x366>
 800c7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7b8:	eba3 020a 	sub.w	r2, r3, sl
 800c7bc:	eba3 0a01 	sub.w	sl, r3, r1
 800c7c0:	4592      	cmp	sl, r2
 800c7c2:	bfa8      	it	ge
 800c7c4:	4692      	movge	sl, r2
 800c7c6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ca:	dc0e      	bgt.n	800c7ea <_printf_float+0x376>
 800c7cc:	f04f 0800 	mov.w	r8, #0
 800c7d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7d4:	f104 091a 	add.w	r9, r4, #26
 800c7d8:	e019      	b.n	800c80e <_printf_float+0x39a>
 800c7da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	47b8      	blx	r7
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d1e5      	bne.n	800c7b4 <_printf_float+0x340>
 800c7e8:	e6a1      	b.n	800c52e <_printf_float+0xba>
 800c7ea:	4653      	mov	r3, sl
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	47b8      	blx	r7
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d1e9      	bne.n	800c7cc <_printf_float+0x358>
 800c7f8:	e699      	b.n	800c52e <_printf_float+0xba>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	464a      	mov	r2, r9
 800c7fe:	4631      	mov	r1, r6
 800c800:	4628      	mov	r0, r5
 800c802:	47b8      	blx	r7
 800c804:	3001      	adds	r0, #1
 800c806:	f43f ae92 	beq.w	800c52e <_printf_float+0xba>
 800c80a:	f108 0801 	add.w	r8, r8, #1
 800c80e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c812:	1a9b      	subs	r3, r3, r2
 800c814:	eba3 030a 	sub.w	r3, r3, sl
 800c818:	4543      	cmp	r3, r8
 800c81a:	dcee      	bgt.n	800c7fa <_printf_float+0x386>
 800c81c:	e74a      	b.n	800c6b4 <_printf_float+0x240>
 800c81e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c820:	2a01      	cmp	r2, #1
 800c822:	dc01      	bgt.n	800c828 <_printf_float+0x3b4>
 800c824:	07db      	lsls	r3, r3, #31
 800c826:	d53a      	bpl.n	800c89e <_printf_float+0x42a>
 800c828:	2301      	movs	r3, #1
 800c82a:	4642      	mov	r2, r8
 800c82c:	4631      	mov	r1, r6
 800c82e:	4628      	mov	r0, r5
 800c830:	47b8      	blx	r7
 800c832:	3001      	adds	r0, #1
 800c834:	f43f ae7b 	beq.w	800c52e <_printf_float+0xba>
 800c838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f108 0801 	add.w	r8, r8, #1
 800c848:	f43f ae71 	beq.w	800c52e <_printf_float+0xba>
 800c84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84e:	2200      	movs	r2, #0
 800c850:	f103 3aff 	add.w	sl, r3, #4294967295
 800c854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c858:	2300      	movs	r3, #0
 800c85a:	f7f4 f93d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c85e:	b9c8      	cbnz	r0, 800c894 <_printf_float+0x420>
 800c860:	4653      	mov	r3, sl
 800c862:	4642      	mov	r2, r8
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	d10e      	bne.n	800c88c <_printf_float+0x418>
 800c86e:	e65e      	b.n	800c52e <_printf_float+0xba>
 800c870:	2301      	movs	r3, #1
 800c872:	4652      	mov	r2, sl
 800c874:	4631      	mov	r1, r6
 800c876:	4628      	mov	r0, r5
 800c878:	47b8      	blx	r7
 800c87a:	3001      	adds	r0, #1
 800c87c:	f43f ae57 	beq.w	800c52e <_printf_float+0xba>
 800c880:	f108 0801 	add.w	r8, r8, #1
 800c884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c886:	3b01      	subs	r3, #1
 800c888:	4543      	cmp	r3, r8
 800c88a:	dcf1      	bgt.n	800c870 <_printf_float+0x3fc>
 800c88c:	464b      	mov	r3, r9
 800c88e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c892:	e6de      	b.n	800c652 <_printf_float+0x1de>
 800c894:	f04f 0800 	mov.w	r8, #0
 800c898:	f104 0a1a 	add.w	sl, r4, #26
 800c89c:	e7f2      	b.n	800c884 <_printf_float+0x410>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e7df      	b.n	800c862 <_printf_float+0x3ee>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	464a      	mov	r2, r9
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	47b8      	blx	r7
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	f43f ae3e 	beq.w	800c52e <_printf_float+0xba>
 800c8b2:	f108 0801 	add.w	r8, r8, #1
 800c8b6:	68e3      	ldr	r3, [r4, #12]
 800c8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ba:	1a9b      	subs	r3, r3, r2
 800c8bc:	4543      	cmp	r3, r8
 800c8be:	dcf0      	bgt.n	800c8a2 <_printf_float+0x42e>
 800c8c0:	e6fc      	b.n	800c6bc <_printf_float+0x248>
 800c8c2:	f04f 0800 	mov.w	r8, #0
 800c8c6:	f104 0919 	add.w	r9, r4, #25
 800c8ca:	e7f4      	b.n	800c8b6 <_printf_float+0x442>
 800c8cc:	2900      	cmp	r1, #0
 800c8ce:	f43f ae8b 	beq.w	800c5e8 <_printf_float+0x174>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c8d8:	ab09      	add	r3, sp, #36	; 0x24
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	ec49 8b10 	vmov	d0, r8, r9
 800c8e0:	6022      	str	r2, [r4, #0]
 800c8e2:	f8cd a004 	str.w	sl, [sp, #4]
 800c8e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fd2d 	bl	800c34a <__cvt>
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	e648      	b.n	800c586 <_printf_float+0x112>

0800c8f4 <_printf_common>:
 800c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	4691      	mov	r9, r2
 800c8fa:	461f      	mov	r7, r3
 800c8fc:	688a      	ldr	r2, [r1, #8]
 800c8fe:	690b      	ldr	r3, [r1, #16]
 800c900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c904:	4293      	cmp	r3, r2
 800c906:	bfb8      	it	lt
 800c908:	4613      	movlt	r3, r2
 800c90a:	f8c9 3000 	str.w	r3, [r9]
 800c90e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c912:	4606      	mov	r6, r0
 800c914:	460c      	mov	r4, r1
 800c916:	b112      	cbz	r2, 800c91e <_printf_common+0x2a>
 800c918:	3301      	adds	r3, #1
 800c91a:	f8c9 3000 	str.w	r3, [r9]
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	0699      	lsls	r1, r3, #26
 800c922:	bf42      	ittt	mi
 800c924:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c928:	3302      	addmi	r3, #2
 800c92a:	f8c9 3000 	strmi.w	r3, [r9]
 800c92e:	6825      	ldr	r5, [r4, #0]
 800c930:	f015 0506 	ands.w	r5, r5, #6
 800c934:	d107      	bne.n	800c946 <_printf_common+0x52>
 800c936:	f104 0a19 	add.w	sl, r4, #25
 800c93a:	68e3      	ldr	r3, [r4, #12]
 800c93c:	f8d9 2000 	ldr.w	r2, [r9]
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	42ab      	cmp	r3, r5
 800c944:	dc28      	bgt.n	800c998 <_printf_common+0xa4>
 800c946:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c94a:	6822      	ldr	r2, [r4, #0]
 800c94c:	3300      	adds	r3, #0
 800c94e:	bf18      	it	ne
 800c950:	2301      	movne	r3, #1
 800c952:	0692      	lsls	r2, r2, #26
 800c954:	d42d      	bmi.n	800c9b2 <_printf_common+0xbe>
 800c956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c95a:	4639      	mov	r1, r7
 800c95c:	4630      	mov	r0, r6
 800c95e:	47c0      	blx	r8
 800c960:	3001      	adds	r0, #1
 800c962:	d020      	beq.n	800c9a6 <_printf_common+0xb2>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	68e5      	ldr	r5, [r4, #12]
 800c968:	f8d9 2000 	ldr.w	r2, [r9]
 800c96c:	f003 0306 	and.w	r3, r3, #6
 800c970:	2b04      	cmp	r3, #4
 800c972:	bf08      	it	eq
 800c974:	1aad      	subeq	r5, r5, r2
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	6922      	ldr	r2, [r4, #16]
 800c97a:	bf0c      	ite	eq
 800c97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c980:	2500      	movne	r5, #0
 800c982:	4293      	cmp	r3, r2
 800c984:	bfc4      	itt	gt
 800c986:	1a9b      	subgt	r3, r3, r2
 800c988:	18ed      	addgt	r5, r5, r3
 800c98a:	f04f 0900 	mov.w	r9, #0
 800c98e:	341a      	adds	r4, #26
 800c990:	454d      	cmp	r5, r9
 800c992:	d11a      	bne.n	800c9ca <_printf_common+0xd6>
 800c994:	2000      	movs	r0, #0
 800c996:	e008      	b.n	800c9aa <_printf_common+0xb6>
 800c998:	2301      	movs	r3, #1
 800c99a:	4652      	mov	r2, sl
 800c99c:	4639      	mov	r1, r7
 800c99e:	4630      	mov	r0, r6
 800c9a0:	47c0      	blx	r8
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	d103      	bne.n	800c9ae <_printf_common+0xba>
 800c9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ae:	3501      	adds	r5, #1
 800c9b0:	e7c3      	b.n	800c93a <_printf_common+0x46>
 800c9b2:	18e1      	adds	r1, r4, r3
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	2030      	movs	r0, #48	; 0x30
 800c9b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9bc:	4422      	add	r2, r4
 800c9be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9c6:	3302      	adds	r3, #2
 800c9c8:	e7c5      	b.n	800c956 <_printf_common+0x62>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	47c0      	blx	r8
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d0e6      	beq.n	800c9a6 <_printf_common+0xb2>
 800c9d8:	f109 0901 	add.w	r9, r9, #1
 800c9dc:	e7d8      	b.n	800c990 <_printf_common+0x9c>
	...

0800c9e0 <_printf_i>:
 800c9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	7e09      	ldrb	r1, [r1, #24]
 800c9ec:	b085      	sub	sp, #20
 800c9ee:	296e      	cmp	r1, #110	; 0x6e
 800c9f0:	4617      	mov	r7, r2
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	4698      	mov	r8, r3
 800c9f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9f8:	f000 80b3 	beq.w	800cb62 <_printf_i+0x182>
 800c9fc:	d822      	bhi.n	800ca44 <_printf_i+0x64>
 800c9fe:	2963      	cmp	r1, #99	; 0x63
 800ca00:	d036      	beq.n	800ca70 <_printf_i+0x90>
 800ca02:	d80a      	bhi.n	800ca1a <_printf_i+0x3a>
 800ca04:	2900      	cmp	r1, #0
 800ca06:	f000 80b9 	beq.w	800cb7c <_printf_i+0x19c>
 800ca0a:	2958      	cmp	r1, #88	; 0x58
 800ca0c:	f000 8083 	beq.w	800cb16 <_printf_i+0x136>
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ca18:	e032      	b.n	800ca80 <_printf_i+0xa0>
 800ca1a:	2964      	cmp	r1, #100	; 0x64
 800ca1c:	d001      	beq.n	800ca22 <_printf_i+0x42>
 800ca1e:	2969      	cmp	r1, #105	; 0x69
 800ca20:	d1f6      	bne.n	800ca10 <_printf_i+0x30>
 800ca22:	6820      	ldr	r0, [r4, #0]
 800ca24:	6813      	ldr	r3, [r2, #0]
 800ca26:	0605      	lsls	r5, r0, #24
 800ca28:	f103 0104 	add.w	r1, r3, #4
 800ca2c:	d52a      	bpl.n	800ca84 <_printf_i+0xa4>
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6011      	str	r1, [r2, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	da03      	bge.n	800ca3e <_printf_i+0x5e>
 800ca36:	222d      	movs	r2, #45	; 0x2d
 800ca38:	425b      	negs	r3, r3
 800ca3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ca3e:	486f      	ldr	r0, [pc, #444]	; (800cbfc <_printf_i+0x21c>)
 800ca40:	220a      	movs	r2, #10
 800ca42:	e039      	b.n	800cab8 <_printf_i+0xd8>
 800ca44:	2973      	cmp	r1, #115	; 0x73
 800ca46:	f000 809d 	beq.w	800cb84 <_printf_i+0x1a4>
 800ca4a:	d808      	bhi.n	800ca5e <_printf_i+0x7e>
 800ca4c:	296f      	cmp	r1, #111	; 0x6f
 800ca4e:	d020      	beq.n	800ca92 <_printf_i+0xb2>
 800ca50:	2970      	cmp	r1, #112	; 0x70
 800ca52:	d1dd      	bne.n	800ca10 <_printf_i+0x30>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	f043 0320 	orr.w	r3, r3, #32
 800ca5a:	6023      	str	r3, [r4, #0]
 800ca5c:	e003      	b.n	800ca66 <_printf_i+0x86>
 800ca5e:	2975      	cmp	r1, #117	; 0x75
 800ca60:	d017      	beq.n	800ca92 <_printf_i+0xb2>
 800ca62:	2978      	cmp	r1, #120	; 0x78
 800ca64:	d1d4      	bne.n	800ca10 <_printf_i+0x30>
 800ca66:	2378      	movs	r3, #120	; 0x78
 800ca68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca6c:	4864      	ldr	r0, [pc, #400]	; (800cc00 <_printf_i+0x220>)
 800ca6e:	e055      	b.n	800cb1c <_printf_i+0x13c>
 800ca70:	6813      	ldr	r3, [r2, #0]
 800ca72:	1d19      	adds	r1, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6011      	str	r1, [r2, #0]
 800ca78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca80:	2301      	movs	r3, #1
 800ca82:	e08c      	b.n	800cb9e <_printf_i+0x1be>
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6011      	str	r1, [r2, #0]
 800ca88:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca8c:	bf18      	it	ne
 800ca8e:	b21b      	sxthne	r3, r3
 800ca90:	e7cf      	b.n	800ca32 <_printf_i+0x52>
 800ca92:	6813      	ldr	r3, [r2, #0]
 800ca94:	6825      	ldr	r5, [r4, #0]
 800ca96:	1d18      	adds	r0, r3, #4
 800ca98:	6010      	str	r0, [r2, #0]
 800ca9a:	0628      	lsls	r0, r5, #24
 800ca9c:	d501      	bpl.n	800caa2 <_printf_i+0xc2>
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	e002      	b.n	800caa8 <_printf_i+0xc8>
 800caa2:	0668      	lsls	r0, r5, #25
 800caa4:	d5fb      	bpl.n	800ca9e <_printf_i+0xbe>
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	4854      	ldr	r0, [pc, #336]	; (800cbfc <_printf_i+0x21c>)
 800caaa:	296f      	cmp	r1, #111	; 0x6f
 800caac:	bf14      	ite	ne
 800caae:	220a      	movne	r2, #10
 800cab0:	2208      	moveq	r2, #8
 800cab2:	2100      	movs	r1, #0
 800cab4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cab8:	6865      	ldr	r5, [r4, #4]
 800caba:	60a5      	str	r5, [r4, #8]
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	f2c0 8095 	blt.w	800cbec <_printf_i+0x20c>
 800cac2:	6821      	ldr	r1, [r4, #0]
 800cac4:	f021 0104 	bic.w	r1, r1, #4
 800cac8:	6021      	str	r1, [r4, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d13d      	bne.n	800cb4a <_printf_i+0x16a>
 800cace:	2d00      	cmp	r5, #0
 800cad0:	f040 808e 	bne.w	800cbf0 <_printf_i+0x210>
 800cad4:	4665      	mov	r5, ip
 800cad6:	2a08      	cmp	r2, #8
 800cad8:	d10b      	bne.n	800caf2 <_printf_i+0x112>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	07db      	lsls	r3, r3, #31
 800cade:	d508      	bpl.n	800caf2 <_printf_i+0x112>
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	6862      	ldr	r2, [r4, #4]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	bfde      	ittt	le
 800cae8:	2330      	movle	r3, #48	; 0x30
 800caea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caf2:	ebac 0305 	sub.w	r3, ip, r5
 800caf6:	6123      	str	r3, [r4, #16]
 800caf8:	f8cd 8000 	str.w	r8, [sp]
 800cafc:	463b      	mov	r3, r7
 800cafe:	aa03      	add	r2, sp, #12
 800cb00:	4621      	mov	r1, r4
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7ff fef6 	bl	800c8f4 <_printf_common>
 800cb08:	3001      	adds	r0, #1
 800cb0a:	d14d      	bne.n	800cba8 <_printf_i+0x1c8>
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	b005      	add	sp, #20
 800cb12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb16:	4839      	ldr	r0, [pc, #228]	; (800cbfc <_printf_i+0x21c>)
 800cb18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cb1c:	6813      	ldr	r3, [r2, #0]
 800cb1e:	6821      	ldr	r1, [r4, #0]
 800cb20:	1d1d      	adds	r5, r3, #4
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6015      	str	r5, [r2, #0]
 800cb26:	060a      	lsls	r2, r1, #24
 800cb28:	d50b      	bpl.n	800cb42 <_printf_i+0x162>
 800cb2a:	07ca      	lsls	r2, r1, #31
 800cb2c:	bf44      	itt	mi
 800cb2e:	f041 0120 	orrmi.w	r1, r1, #32
 800cb32:	6021      	strmi	r1, [r4, #0]
 800cb34:	b91b      	cbnz	r3, 800cb3e <_printf_i+0x15e>
 800cb36:	6822      	ldr	r2, [r4, #0]
 800cb38:	f022 0220 	bic.w	r2, r2, #32
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	2210      	movs	r2, #16
 800cb40:	e7b7      	b.n	800cab2 <_printf_i+0xd2>
 800cb42:	064d      	lsls	r5, r1, #25
 800cb44:	bf48      	it	mi
 800cb46:	b29b      	uxthmi	r3, r3
 800cb48:	e7ef      	b.n	800cb2a <_printf_i+0x14a>
 800cb4a:	4665      	mov	r5, ip
 800cb4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb50:	fb02 3311 	mls	r3, r2, r1, r3
 800cb54:	5cc3      	ldrb	r3, [r0, r3]
 800cb56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	d1f5      	bne.n	800cb4c <_printf_i+0x16c>
 800cb60:	e7b9      	b.n	800cad6 <_printf_i+0xf6>
 800cb62:	6813      	ldr	r3, [r2, #0]
 800cb64:	6825      	ldr	r5, [r4, #0]
 800cb66:	6961      	ldr	r1, [r4, #20]
 800cb68:	1d18      	adds	r0, r3, #4
 800cb6a:	6010      	str	r0, [r2, #0]
 800cb6c:	0628      	lsls	r0, r5, #24
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	d501      	bpl.n	800cb76 <_printf_i+0x196>
 800cb72:	6019      	str	r1, [r3, #0]
 800cb74:	e002      	b.n	800cb7c <_printf_i+0x19c>
 800cb76:	066a      	lsls	r2, r5, #25
 800cb78:	d5fb      	bpl.n	800cb72 <_printf_i+0x192>
 800cb7a:	8019      	strh	r1, [r3, #0]
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6123      	str	r3, [r4, #16]
 800cb80:	4665      	mov	r5, ip
 800cb82:	e7b9      	b.n	800caf8 <_printf_i+0x118>
 800cb84:	6813      	ldr	r3, [r2, #0]
 800cb86:	1d19      	adds	r1, r3, #4
 800cb88:	6011      	str	r1, [r2, #0]
 800cb8a:	681d      	ldr	r5, [r3, #0]
 800cb8c:	6862      	ldr	r2, [r4, #4]
 800cb8e:	2100      	movs	r1, #0
 800cb90:	4628      	mov	r0, r5
 800cb92:	f7f3 fb2d 	bl	80001f0 <memchr>
 800cb96:	b108      	cbz	r0, 800cb9c <_printf_i+0x1bc>
 800cb98:	1b40      	subs	r0, r0, r5
 800cb9a:	6060      	str	r0, [r4, #4]
 800cb9c:	6863      	ldr	r3, [r4, #4]
 800cb9e:	6123      	str	r3, [r4, #16]
 800cba0:	2300      	movs	r3, #0
 800cba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba6:	e7a7      	b.n	800caf8 <_printf_i+0x118>
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	462a      	mov	r2, r5
 800cbac:	4639      	mov	r1, r7
 800cbae:	4630      	mov	r0, r6
 800cbb0:	47c0      	blx	r8
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	d0aa      	beq.n	800cb0c <_printf_i+0x12c>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	079b      	lsls	r3, r3, #30
 800cbba:	d413      	bmi.n	800cbe4 <_printf_i+0x204>
 800cbbc:	68e0      	ldr	r0, [r4, #12]
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	4298      	cmp	r0, r3
 800cbc2:	bfb8      	it	lt
 800cbc4:	4618      	movlt	r0, r3
 800cbc6:	e7a3      	b.n	800cb10 <_printf_i+0x130>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	464a      	mov	r2, r9
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4630      	mov	r0, r6
 800cbd0:	47c0      	blx	r8
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	d09a      	beq.n	800cb0c <_printf_i+0x12c>
 800cbd6:	3501      	adds	r5, #1
 800cbd8:	68e3      	ldr	r3, [r4, #12]
 800cbda:	9a03      	ldr	r2, [sp, #12]
 800cbdc:	1a9b      	subs	r3, r3, r2
 800cbde:	42ab      	cmp	r3, r5
 800cbe0:	dcf2      	bgt.n	800cbc8 <_printf_i+0x1e8>
 800cbe2:	e7eb      	b.n	800cbbc <_printf_i+0x1dc>
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	f104 0919 	add.w	r9, r4, #25
 800cbea:	e7f5      	b.n	800cbd8 <_printf_i+0x1f8>
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1ac      	bne.n	800cb4a <_printf_i+0x16a>
 800cbf0:	7803      	ldrb	r3, [r0, #0]
 800cbf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbfa:	e76c      	b.n	800cad6 <_printf_i+0xf6>
 800cbfc:	080107be 	.word	0x080107be
 800cc00:	080107cf 	.word	0x080107cf

0800cc04 <_scanf_float>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	469a      	mov	sl, r3
 800cc0a:	688b      	ldr	r3, [r1, #8]
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	1e5a      	subs	r2, r3, #1
 800cc10:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc14:	b087      	sub	sp, #28
 800cc16:	bf83      	ittte	hi
 800cc18:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cc1c:	189b      	addhi	r3, r3, r2
 800cc1e:	9301      	strhi	r3, [sp, #4]
 800cc20:	2300      	movls	r3, #0
 800cc22:	bf86      	itte	hi
 800cc24:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc28:	608b      	strhi	r3, [r1, #8]
 800cc2a:	9301      	strls	r3, [sp, #4]
 800cc2c:	680b      	ldr	r3, [r1, #0]
 800cc2e:	4688      	mov	r8, r1
 800cc30:	f04f 0b00 	mov.w	fp, #0
 800cc34:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cc38:	f848 3b1c 	str.w	r3, [r8], #28
 800cc3c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800cc40:	4607      	mov	r7, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	4645      	mov	r5, r8
 800cc46:	465a      	mov	r2, fp
 800cc48:	46d9      	mov	r9, fp
 800cc4a:	f8cd b008 	str.w	fp, [sp, #8]
 800cc4e:	68a1      	ldr	r1, [r4, #8]
 800cc50:	b181      	cbz	r1, 800cc74 <_scanf_float+0x70>
 800cc52:	6833      	ldr	r3, [r6, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b49      	cmp	r3, #73	; 0x49
 800cc58:	d071      	beq.n	800cd3e <_scanf_float+0x13a>
 800cc5a:	d84d      	bhi.n	800ccf8 <_scanf_float+0xf4>
 800cc5c:	2b39      	cmp	r3, #57	; 0x39
 800cc5e:	d840      	bhi.n	800cce2 <_scanf_float+0xde>
 800cc60:	2b31      	cmp	r3, #49	; 0x31
 800cc62:	f080 8088 	bcs.w	800cd76 <_scanf_float+0x172>
 800cc66:	2b2d      	cmp	r3, #45	; 0x2d
 800cc68:	f000 8090 	beq.w	800cd8c <_scanf_float+0x188>
 800cc6c:	d815      	bhi.n	800cc9a <_scanf_float+0x96>
 800cc6e:	2b2b      	cmp	r3, #43	; 0x2b
 800cc70:	f000 808c 	beq.w	800cd8c <_scanf_float+0x188>
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	d003      	beq.n	800cc82 <_scanf_float+0x7e>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	3a01      	subs	r2, #1
 800cc84:	2a01      	cmp	r2, #1
 800cc86:	f200 80ea 	bhi.w	800ce5e <_scanf_float+0x25a>
 800cc8a:	4545      	cmp	r5, r8
 800cc8c:	f200 80dc 	bhi.w	800ce48 <_scanf_float+0x244>
 800cc90:	2601      	movs	r6, #1
 800cc92:	4630      	mov	r0, r6
 800cc94:	b007      	add	sp, #28
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc9c:	f000 809f 	beq.w	800cdde <_scanf_float+0x1da>
 800cca0:	2b30      	cmp	r3, #48	; 0x30
 800cca2:	d1e7      	bne.n	800cc74 <_scanf_float+0x70>
 800cca4:	6820      	ldr	r0, [r4, #0]
 800cca6:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ccaa:	d064      	beq.n	800cd76 <_scanf_float+0x172>
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ccb2:	6020      	str	r0, [r4, #0]
 800ccb4:	f109 0901 	add.w	r9, r9, #1
 800ccb8:	b11b      	cbz	r3, 800ccc2 <_scanf_float+0xbe>
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	3101      	adds	r1, #1
 800ccbe:	9301      	str	r3, [sp, #4]
 800ccc0:	60a1      	str	r1, [r4, #8]
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	60a3      	str	r3, [r4, #8]
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	3301      	adds	r3, #1
 800cccc:	6123      	str	r3, [r4, #16]
 800ccce:	6873      	ldr	r3, [r6, #4]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	6073      	str	r3, [r6, #4]
 800ccd6:	f340 80ac 	ble.w	800ce32 <_scanf_float+0x22e>
 800ccda:	6833      	ldr	r3, [r6, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	6033      	str	r3, [r6, #0]
 800cce0:	e7b5      	b.n	800cc4e <_scanf_float+0x4a>
 800cce2:	2b45      	cmp	r3, #69	; 0x45
 800cce4:	f000 8085 	beq.w	800cdf2 <_scanf_float+0x1ee>
 800cce8:	2b46      	cmp	r3, #70	; 0x46
 800ccea:	d06a      	beq.n	800cdc2 <_scanf_float+0x1be>
 800ccec:	2b41      	cmp	r3, #65	; 0x41
 800ccee:	d1c1      	bne.n	800cc74 <_scanf_float+0x70>
 800ccf0:	2a01      	cmp	r2, #1
 800ccf2:	d1bf      	bne.n	800cc74 <_scanf_float+0x70>
 800ccf4:	2202      	movs	r2, #2
 800ccf6:	e046      	b.n	800cd86 <_scanf_float+0x182>
 800ccf8:	2b65      	cmp	r3, #101	; 0x65
 800ccfa:	d07a      	beq.n	800cdf2 <_scanf_float+0x1ee>
 800ccfc:	d818      	bhi.n	800cd30 <_scanf_float+0x12c>
 800ccfe:	2b54      	cmp	r3, #84	; 0x54
 800cd00:	d066      	beq.n	800cdd0 <_scanf_float+0x1cc>
 800cd02:	d811      	bhi.n	800cd28 <_scanf_float+0x124>
 800cd04:	2b4e      	cmp	r3, #78	; 0x4e
 800cd06:	d1b5      	bne.n	800cc74 <_scanf_float+0x70>
 800cd08:	2a00      	cmp	r2, #0
 800cd0a:	d146      	bne.n	800cd9a <_scanf_float+0x196>
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	d145      	bne.n	800cd9e <_scanf_float+0x19a>
 800cd12:	6821      	ldr	r1, [r4, #0]
 800cd14:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cd18:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cd1c:	d13f      	bne.n	800cd9e <_scanf_float+0x19a>
 800cd1e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cd22:	6021      	str	r1, [r4, #0]
 800cd24:	2201      	movs	r2, #1
 800cd26:	e02e      	b.n	800cd86 <_scanf_float+0x182>
 800cd28:	2b59      	cmp	r3, #89	; 0x59
 800cd2a:	d01e      	beq.n	800cd6a <_scanf_float+0x166>
 800cd2c:	2b61      	cmp	r3, #97	; 0x61
 800cd2e:	e7de      	b.n	800ccee <_scanf_float+0xea>
 800cd30:	2b6e      	cmp	r3, #110	; 0x6e
 800cd32:	d0e9      	beq.n	800cd08 <_scanf_float+0x104>
 800cd34:	d815      	bhi.n	800cd62 <_scanf_float+0x15e>
 800cd36:	2b66      	cmp	r3, #102	; 0x66
 800cd38:	d043      	beq.n	800cdc2 <_scanf_float+0x1be>
 800cd3a:	2b69      	cmp	r3, #105	; 0x69
 800cd3c:	d19a      	bne.n	800cc74 <_scanf_float+0x70>
 800cd3e:	f1bb 0f00 	cmp.w	fp, #0
 800cd42:	d138      	bne.n	800cdb6 <_scanf_float+0x1b2>
 800cd44:	f1b9 0f00 	cmp.w	r9, #0
 800cd48:	d197      	bne.n	800cc7a <_scanf_float+0x76>
 800cd4a:	6821      	ldr	r1, [r4, #0]
 800cd4c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cd50:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cd54:	d195      	bne.n	800cc82 <_scanf_float+0x7e>
 800cd56:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cd5a:	6021      	str	r1, [r4, #0]
 800cd5c:	f04f 0b01 	mov.w	fp, #1
 800cd60:	e011      	b.n	800cd86 <_scanf_float+0x182>
 800cd62:	2b74      	cmp	r3, #116	; 0x74
 800cd64:	d034      	beq.n	800cdd0 <_scanf_float+0x1cc>
 800cd66:	2b79      	cmp	r3, #121	; 0x79
 800cd68:	d184      	bne.n	800cc74 <_scanf_float+0x70>
 800cd6a:	f1bb 0f07 	cmp.w	fp, #7
 800cd6e:	d181      	bne.n	800cc74 <_scanf_float+0x70>
 800cd70:	f04f 0b08 	mov.w	fp, #8
 800cd74:	e007      	b.n	800cd86 <_scanf_float+0x182>
 800cd76:	eb12 0f0b 	cmn.w	r2, fp
 800cd7a:	f47f af7b 	bne.w	800cc74 <_scanf_float+0x70>
 800cd7e:	6821      	ldr	r1, [r4, #0]
 800cd80:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800cd84:	6021      	str	r1, [r4, #0]
 800cd86:	702b      	strb	r3, [r5, #0]
 800cd88:	3501      	adds	r5, #1
 800cd8a:	e79a      	b.n	800ccc2 <_scanf_float+0xbe>
 800cd8c:	6821      	ldr	r1, [r4, #0]
 800cd8e:	0608      	lsls	r0, r1, #24
 800cd90:	f57f af70 	bpl.w	800cc74 <_scanf_float+0x70>
 800cd94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cd98:	e7f4      	b.n	800cd84 <_scanf_float+0x180>
 800cd9a:	2a02      	cmp	r2, #2
 800cd9c:	d047      	beq.n	800ce2e <_scanf_float+0x22a>
 800cd9e:	f1bb 0f01 	cmp.w	fp, #1
 800cda2:	d003      	beq.n	800cdac <_scanf_float+0x1a8>
 800cda4:	f1bb 0f04 	cmp.w	fp, #4
 800cda8:	f47f af64 	bne.w	800cc74 <_scanf_float+0x70>
 800cdac:	f10b 0b01 	add.w	fp, fp, #1
 800cdb0:	fa5f fb8b 	uxtb.w	fp, fp
 800cdb4:	e7e7      	b.n	800cd86 <_scanf_float+0x182>
 800cdb6:	f1bb 0f03 	cmp.w	fp, #3
 800cdba:	d0f7      	beq.n	800cdac <_scanf_float+0x1a8>
 800cdbc:	f1bb 0f05 	cmp.w	fp, #5
 800cdc0:	e7f2      	b.n	800cda8 <_scanf_float+0x1a4>
 800cdc2:	f1bb 0f02 	cmp.w	fp, #2
 800cdc6:	f47f af55 	bne.w	800cc74 <_scanf_float+0x70>
 800cdca:	f04f 0b03 	mov.w	fp, #3
 800cdce:	e7da      	b.n	800cd86 <_scanf_float+0x182>
 800cdd0:	f1bb 0f06 	cmp.w	fp, #6
 800cdd4:	f47f af4e 	bne.w	800cc74 <_scanf_float+0x70>
 800cdd8:	f04f 0b07 	mov.w	fp, #7
 800cddc:	e7d3      	b.n	800cd86 <_scanf_float+0x182>
 800cdde:	6821      	ldr	r1, [r4, #0]
 800cde0:	0588      	lsls	r0, r1, #22
 800cde2:	f57f af47 	bpl.w	800cc74 <_scanf_float+0x70>
 800cde6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800cdea:	6021      	str	r1, [r4, #0]
 800cdec:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdf0:	e7c9      	b.n	800cd86 <_scanf_float+0x182>
 800cdf2:	6821      	ldr	r1, [r4, #0]
 800cdf4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cdf8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cdfc:	d006      	beq.n	800ce0c <_scanf_float+0x208>
 800cdfe:	0548      	lsls	r0, r1, #21
 800ce00:	f57f af38 	bpl.w	800cc74 <_scanf_float+0x70>
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	f43f af3b 	beq.w	800cc82 <_scanf_float+0x7e>
 800ce0c:	0588      	lsls	r0, r1, #22
 800ce0e:	bf58      	it	pl
 800ce10:	9802      	ldrpl	r0, [sp, #8]
 800ce12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ce16:	bf58      	it	pl
 800ce18:	eba9 0000 	subpl.w	r0, r9, r0
 800ce1c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ce20:	bf58      	it	pl
 800ce22:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ce26:	6021      	str	r1, [r4, #0]
 800ce28:	f04f 0900 	mov.w	r9, #0
 800ce2c:	e7ab      	b.n	800cd86 <_scanf_float+0x182>
 800ce2e:	2203      	movs	r2, #3
 800ce30:	e7a9      	b.n	800cd86 <_scanf_float+0x182>
 800ce32:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce36:	9205      	str	r2, [sp, #20]
 800ce38:	4631      	mov	r1, r6
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	4798      	blx	r3
 800ce3e:	9a05      	ldr	r2, [sp, #20]
 800ce40:	2800      	cmp	r0, #0
 800ce42:	f43f af04 	beq.w	800cc4e <_scanf_float+0x4a>
 800ce46:	e715      	b.n	800cc74 <_scanf_float+0x70>
 800ce48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce50:	4632      	mov	r2, r6
 800ce52:	4638      	mov	r0, r7
 800ce54:	4798      	blx	r3
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	e715      	b.n	800cc8a <_scanf_float+0x86>
 800ce5e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ce62:	2b06      	cmp	r3, #6
 800ce64:	d80a      	bhi.n	800ce7c <_scanf_float+0x278>
 800ce66:	f1bb 0f02 	cmp.w	fp, #2
 800ce6a:	d968      	bls.n	800cf3e <_scanf_float+0x33a>
 800ce6c:	f1ab 0b03 	sub.w	fp, fp, #3
 800ce70:	fa5f fb8b 	uxtb.w	fp, fp
 800ce74:	eba5 0b0b 	sub.w	fp, r5, fp
 800ce78:	455d      	cmp	r5, fp
 800ce7a:	d14b      	bne.n	800cf14 <_scanf_float+0x310>
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	05da      	lsls	r2, r3, #23
 800ce80:	d51f      	bpl.n	800cec2 <_scanf_float+0x2be>
 800ce82:	055b      	lsls	r3, r3, #21
 800ce84:	d468      	bmi.n	800cf58 <_scanf_float+0x354>
 800ce86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	2965      	cmp	r1, #101	; 0x65
 800ce8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce92:	f105 3bff 	add.w	fp, r5, #4294967295
 800ce96:	6123      	str	r3, [r4, #16]
 800ce98:	d00d      	beq.n	800ceb6 <_scanf_float+0x2b2>
 800ce9a:	2945      	cmp	r1, #69	; 0x45
 800ce9c:	d00b      	beq.n	800ceb6 <_scanf_float+0x2b2>
 800ce9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cea2:	4632      	mov	r2, r6
 800cea4:	4638      	mov	r0, r7
 800cea6:	4798      	blx	r3
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	f1a5 0b02 	sub.w	fp, r5, #2
 800ceb4:	6123      	str	r3, [r4, #16]
 800ceb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ceba:	4632      	mov	r2, r6
 800cebc:	4638      	mov	r0, r7
 800cebe:	4798      	blx	r3
 800cec0:	465d      	mov	r5, fp
 800cec2:	6826      	ldr	r6, [r4, #0]
 800cec4:	f016 0610 	ands.w	r6, r6, #16
 800cec8:	d17a      	bne.n	800cfc0 <_scanf_float+0x3bc>
 800ceca:	702e      	strb	r6, [r5, #0]
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ced2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ced6:	d142      	bne.n	800cf5e <_scanf_float+0x35a>
 800ced8:	9b02      	ldr	r3, [sp, #8]
 800ceda:	eba9 0303 	sub.w	r3, r9, r3
 800cede:	425a      	negs	r2, r3
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d149      	bne.n	800cf78 <_scanf_float+0x374>
 800cee4:	2200      	movs	r2, #0
 800cee6:	4641      	mov	r1, r8
 800cee8:	4638      	mov	r0, r7
 800ceea:	f000 fec5 	bl	800dc78 <_strtod_r>
 800ceee:	6825      	ldr	r5, [r4, #0]
 800cef0:	f8da 3000 	ldr.w	r3, [sl]
 800cef4:	f015 0f02 	tst.w	r5, #2
 800cef8:	f103 0204 	add.w	r2, r3, #4
 800cefc:	ec59 8b10 	vmov	r8, r9, d0
 800cf00:	f8ca 2000 	str.w	r2, [sl]
 800cf04:	d043      	beq.n	800cf8e <_scanf_float+0x38a>
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	e9c3 8900 	strd	r8, r9, [r3]
 800cf0c:	68e3      	ldr	r3, [r4, #12]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	60e3      	str	r3, [r4, #12]
 800cf12:	e6be      	b.n	800cc92 <_scanf_float+0x8e>
 800cf14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cf1c:	4632      	mov	r2, r6
 800cf1e:	4638      	mov	r0, r7
 800cf20:	4798      	blx	r3
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	3b01      	subs	r3, #1
 800cf26:	6123      	str	r3, [r4, #16]
 800cf28:	e7a6      	b.n	800ce78 <_scanf_float+0x274>
 800cf2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf2e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cf32:	4632      	mov	r2, r6
 800cf34:	4638      	mov	r0, r7
 800cf36:	4798      	blx	r3
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	6123      	str	r3, [r4, #16]
 800cf3e:	4545      	cmp	r5, r8
 800cf40:	d8f3      	bhi.n	800cf2a <_scanf_float+0x326>
 800cf42:	e6a5      	b.n	800cc90 <_scanf_float+0x8c>
 800cf44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4638      	mov	r0, r7
 800cf50:	4798      	blx	r3
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	4545      	cmp	r5, r8
 800cf5a:	d8f3      	bhi.n	800cf44 <_scanf_float+0x340>
 800cf5c:	e698      	b.n	800cc90 <_scanf_float+0x8c>
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d0bf      	beq.n	800cee4 <_scanf_float+0x2e0>
 800cf64:	9904      	ldr	r1, [sp, #16]
 800cf66:	230a      	movs	r3, #10
 800cf68:	4632      	mov	r2, r6
 800cf6a:	3101      	adds	r1, #1
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f000 ff0f 	bl	800dd90 <_strtol_r>
 800cf72:	9b03      	ldr	r3, [sp, #12]
 800cf74:	9d04      	ldr	r5, [sp, #16]
 800cf76:	1ac2      	subs	r2, r0, r3
 800cf78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cf7c:	429d      	cmp	r5, r3
 800cf7e:	bf28      	it	cs
 800cf80:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800cf84:	490f      	ldr	r1, [pc, #60]	; (800cfc4 <_scanf_float+0x3c0>)
 800cf86:	4628      	mov	r0, r5
 800cf88:	f000 f83c 	bl	800d004 <siprintf>
 800cf8c:	e7aa      	b.n	800cee4 <_scanf_float+0x2e0>
 800cf8e:	f015 0504 	ands.w	r5, r5, #4
 800cf92:	d1b8      	bne.n	800cf06 <_scanf_float+0x302>
 800cf94:	681f      	ldr	r7, [r3, #0]
 800cf96:	ee10 2a10 	vmov	r2, s0
 800cf9a:	464b      	mov	r3, r9
 800cf9c:	ee10 0a10 	vmov	r0, s0
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	f7f3 fdcb 	bl	8000b3c <__aeabi_dcmpun>
 800cfa6:	b128      	cbz	r0, 800cfb4 <_scanf_float+0x3b0>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 f825 	bl	800cff8 <nanf>
 800cfae:	ed87 0a00 	vstr	s0, [r7]
 800cfb2:	e7ab      	b.n	800cf0c <_scanf_float+0x308>
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	4649      	mov	r1, r9
 800cfb8:	f7f3 fe1e 	bl	8000bf8 <__aeabi_d2f>
 800cfbc:	6038      	str	r0, [r7, #0]
 800cfbe:	e7a5      	b.n	800cf0c <_scanf_float+0x308>
 800cfc0:	2600      	movs	r6, #0
 800cfc2:	e666      	b.n	800cc92 <_scanf_float+0x8e>
 800cfc4:	080107e0 	.word	0x080107e0

0800cfc8 <iprintf>:
 800cfc8:	b40f      	push	{r0, r1, r2, r3}
 800cfca:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <iprintf+0x2c>)
 800cfcc:	b513      	push	{r0, r1, r4, lr}
 800cfce:	681c      	ldr	r4, [r3, #0]
 800cfd0:	b124      	cbz	r4, 800cfdc <iprintf+0x14>
 800cfd2:	69a3      	ldr	r3, [r4, #24]
 800cfd4:	b913      	cbnz	r3, 800cfdc <iprintf+0x14>
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f001 fd72 	bl	800eac0 <__sinit>
 800cfdc:	ab05      	add	r3, sp, #20
 800cfde:	9a04      	ldr	r2, [sp, #16]
 800cfe0:	68a1      	ldr	r1, [r4, #8]
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f002 ff7b 	bl	800fee0 <_vfiprintf_r>
 800cfea:	b002      	add	sp, #8
 800cfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff0:	b004      	add	sp, #16
 800cff2:	4770      	bx	lr
 800cff4:	200002cc 	.word	0x200002cc

0800cff8 <nanf>:
 800cff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d000 <nanf+0x8>
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	7fc00000 	.word	0x7fc00000

0800d004 <siprintf>:
 800d004:	b40e      	push	{r1, r2, r3}
 800d006:	b500      	push	{lr}
 800d008:	b09c      	sub	sp, #112	; 0x70
 800d00a:	ab1d      	add	r3, sp, #116	; 0x74
 800d00c:	9002      	str	r0, [sp, #8]
 800d00e:	9006      	str	r0, [sp, #24]
 800d010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d014:	4809      	ldr	r0, [pc, #36]	; (800d03c <siprintf+0x38>)
 800d016:	9107      	str	r1, [sp, #28]
 800d018:	9104      	str	r1, [sp, #16]
 800d01a:	4909      	ldr	r1, [pc, #36]	; (800d040 <siprintf+0x3c>)
 800d01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d020:	9105      	str	r1, [sp, #20]
 800d022:	6800      	ldr	r0, [r0, #0]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	a902      	add	r1, sp, #8
 800d028:	f002 fe38 	bl	800fc9c <_svfiprintf_r>
 800d02c:	9b02      	ldr	r3, [sp, #8]
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	b01c      	add	sp, #112	; 0x70
 800d034:	f85d eb04 	ldr.w	lr, [sp], #4
 800d038:	b003      	add	sp, #12
 800d03a:	4770      	bx	lr
 800d03c:	200002cc 	.word	0x200002cc
 800d040:	ffff0208 	.word	0xffff0208

0800d044 <strcpy>:
 800d044:	4603      	mov	r3, r0
 800d046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d04a:	f803 2b01 	strb.w	r2, [r3], #1
 800d04e:	2a00      	cmp	r2, #0
 800d050:	d1f9      	bne.n	800d046 <strcpy+0x2>
 800d052:	4770      	bx	lr

0800d054 <sulp>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	4604      	mov	r4, r0
 800d058:	460d      	mov	r5, r1
 800d05a:	ec45 4b10 	vmov	d0, r4, r5
 800d05e:	4616      	mov	r6, r2
 800d060:	f002 fbd8 	bl	800f814 <__ulp>
 800d064:	ec51 0b10 	vmov	r0, r1, d0
 800d068:	b17e      	cbz	r6, 800d08a <sulp+0x36>
 800d06a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d06e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d072:	2b00      	cmp	r3, #0
 800d074:	dd09      	ble.n	800d08a <sulp+0x36>
 800d076:	051b      	lsls	r3, r3, #20
 800d078:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d07c:	2400      	movs	r4, #0
 800d07e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d082:	4622      	mov	r2, r4
 800d084:	462b      	mov	r3, r5
 800d086:	f7f3 fabf 	bl	8000608 <__aeabi_dmul>
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	0000      	movs	r0, r0
	...

0800d090 <_strtod_l>:
 800d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	461f      	mov	r7, r3
 800d096:	b0a1      	sub	sp, #132	; 0x84
 800d098:	2300      	movs	r3, #0
 800d09a:	4681      	mov	r9, r0
 800d09c:	4638      	mov	r0, r7
 800d09e:	460e      	mov	r6, r1
 800d0a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0a2:	931c      	str	r3, [sp, #112]	; 0x70
 800d0a4:	f002 f8bf 	bl	800f226 <__localeconv_l>
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	6800      	ldr	r0, [r0, #0]
 800d0ac:	f7f3 f898 	bl	80001e0 <strlen>
 800d0b0:	f04f 0a00 	mov.w	sl, #0
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f04f 0b00 	mov.w	fp, #0
 800d0ba:	961b      	str	r6, [sp, #108]	; 0x6c
 800d0bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0be:	781a      	ldrb	r2, [r3, #0]
 800d0c0:	2a0d      	cmp	r2, #13
 800d0c2:	d832      	bhi.n	800d12a <_strtod_l+0x9a>
 800d0c4:	2a09      	cmp	r2, #9
 800d0c6:	d236      	bcs.n	800d136 <_strtod_l+0xa6>
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	d03e      	beq.n	800d14a <_strtod_l+0xba>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d0d2:	782b      	ldrb	r3, [r5, #0]
 800d0d4:	2b30      	cmp	r3, #48	; 0x30
 800d0d6:	f040 80ac 	bne.w	800d232 <_strtod_l+0x1a2>
 800d0da:	786b      	ldrb	r3, [r5, #1]
 800d0dc:	2b58      	cmp	r3, #88	; 0x58
 800d0de:	d001      	beq.n	800d0e4 <_strtod_l+0x54>
 800d0e0:	2b78      	cmp	r3, #120	; 0x78
 800d0e2:	d167      	bne.n	800d1b4 <_strtod_l+0x124>
 800d0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	ab1c      	add	r3, sp, #112	; 0x70
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	9702      	str	r7, [sp, #8]
 800d0ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d0f0:	4a88      	ldr	r2, [pc, #544]	; (800d314 <_strtod_l+0x284>)
 800d0f2:	a91b      	add	r1, sp, #108	; 0x6c
 800d0f4:	4648      	mov	r0, r9
 800d0f6:	f001 fdbc 	bl	800ec72 <__gethex>
 800d0fa:	f010 0407 	ands.w	r4, r0, #7
 800d0fe:	4606      	mov	r6, r0
 800d100:	d005      	beq.n	800d10e <_strtod_l+0x7e>
 800d102:	2c06      	cmp	r4, #6
 800d104:	d12b      	bne.n	800d15e <_strtod_l+0xce>
 800d106:	3501      	adds	r5, #1
 800d108:	2300      	movs	r3, #0
 800d10a:	951b      	str	r5, [sp, #108]	; 0x6c
 800d10c:	930d      	str	r3, [sp, #52]	; 0x34
 800d10e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d110:	2b00      	cmp	r3, #0
 800d112:	f040 859a 	bne.w	800dc4a <_strtod_l+0xbba>
 800d116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d118:	b1e3      	cbz	r3, 800d154 <_strtod_l+0xc4>
 800d11a:	4652      	mov	r2, sl
 800d11c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d120:	ec43 2b10 	vmov	d0, r2, r3
 800d124:	b021      	add	sp, #132	; 0x84
 800d126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12a:	2a2b      	cmp	r2, #43	; 0x2b
 800d12c:	d015      	beq.n	800d15a <_strtod_l+0xca>
 800d12e:	2a2d      	cmp	r2, #45	; 0x2d
 800d130:	d004      	beq.n	800d13c <_strtod_l+0xac>
 800d132:	2a20      	cmp	r2, #32
 800d134:	d1ca      	bne.n	800d0cc <_strtod_l+0x3c>
 800d136:	3301      	adds	r3, #1
 800d138:	931b      	str	r3, [sp, #108]	; 0x6c
 800d13a:	e7bf      	b.n	800d0bc <_strtod_l+0x2c>
 800d13c:	2201      	movs	r2, #1
 800d13e:	920d      	str	r2, [sp, #52]	; 0x34
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	921b      	str	r2, [sp, #108]	; 0x6c
 800d144:	785b      	ldrb	r3, [r3, #1]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1c2      	bne.n	800d0d0 <_strtod_l+0x40>
 800d14a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d14c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 8579 	bne.w	800dc46 <_strtod_l+0xbb6>
 800d154:	4652      	mov	r2, sl
 800d156:	465b      	mov	r3, fp
 800d158:	e7e2      	b.n	800d120 <_strtod_l+0x90>
 800d15a:	2200      	movs	r2, #0
 800d15c:	e7ef      	b.n	800d13e <_strtod_l+0xae>
 800d15e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d160:	b13a      	cbz	r2, 800d172 <_strtod_l+0xe2>
 800d162:	2135      	movs	r1, #53	; 0x35
 800d164:	a81e      	add	r0, sp, #120	; 0x78
 800d166:	f002 fc4d 	bl	800fa04 <__copybits>
 800d16a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d16c:	4648      	mov	r0, r9
 800d16e:	f002 f8b9 	bl	800f2e4 <_Bfree>
 800d172:	3c01      	subs	r4, #1
 800d174:	2c04      	cmp	r4, #4
 800d176:	d806      	bhi.n	800d186 <_strtod_l+0xf6>
 800d178:	e8df f004 	tbb	[pc, r4]
 800d17c:	1714030a 	.word	0x1714030a
 800d180:	0a          	.byte	0x0a
 800d181:	00          	.byte	0x00
 800d182:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d186:	0730      	lsls	r0, r6, #28
 800d188:	d5c1      	bpl.n	800d10e <_strtod_l+0x7e>
 800d18a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d18e:	e7be      	b.n	800d10e <_strtod_l+0x7e>
 800d190:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d194:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d196:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d19a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d19e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d1a2:	e7f0      	b.n	800d186 <_strtod_l+0xf6>
 800d1a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d318 <_strtod_l+0x288>
 800d1a8:	e7ed      	b.n	800d186 <_strtod_l+0xf6>
 800d1aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d1ae:	f04f 3aff 	mov.w	sl, #4294967295
 800d1b2:	e7e8      	b.n	800d186 <_strtod_l+0xf6>
 800d1b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1b6:	1c5a      	adds	r2, r3, #1
 800d1b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800d1ba:	785b      	ldrb	r3, [r3, #1]
 800d1bc:	2b30      	cmp	r3, #48	; 0x30
 800d1be:	d0f9      	beq.n	800d1b4 <_strtod_l+0x124>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0a4      	beq.n	800d10e <_strtod_l+0x7e>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	9306      	str	r3, [sp, #24]
 800d1ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1cc:	9308      	str	r3, [sp, #32]
 800d1ce:	9507      	str	r5, [sp, #28]
 800d1d0:	9505      	str	r5, [sp, #20]
 800d1d2:	220a      	movs	r2, #10
 800d1d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d1d6:	7807      	ldrb	r7, [r0, #0]
 800d1d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d1dc:	b2d9      	uxtb	r1, r3
 800d1de:	2909      	cmp	r1, #9
 800d1e0:	d929      	bls.n	800d236 <_strtod_l+0x1a6>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	f8d8 1000 	ldr.w	r1, [r8]
 800d1e8:	f002 ffe3 	bl	80101b2 <strncmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d031      	beq.n	800d254 <_strtod_l+0x1c4>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	9c05      	ldr	r4, [sp, #20]
 800d1f4:	9004      	str	r0, [sp, #16]
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	2b65      	cmp	r3, #101	; 0x65
 800d1fc:	d001      	beq.n	800d202 <_strtod_l+0x172>
 800d1fe:	2b45      	cmp	r3, #69	; 0x45
 800d200:	d114      	bne.n	800d22c <_strtod_l+0x19c>
 800d202:	b924      	cbnz	r4, 800d20e <_strtod_l+0x17e>
 800d204:	b910      	cbnz	r0, 800d20c <_strtod_l+0x17c>
 800d206:	9b06      	ldr	r3, [sp, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d09e      	beq.n	800d14a <_strtod_l+0xba>
 800d20c:	2400      	movs	r4, #0
 800d20e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d210:	1c73      	adds	r3, r6, #1
 800d212:	931b      	str	r3, [sp, #108]	; 0x6c
 800d214:	7873      	ldrb	r3, [r6, #1]
 800d216:	2b2b      	cmp	r3, #43	; 0x2b
 800d218:	d078      	beq.n	800d30c <_strtod_l+0x27c>
 800d21a:	2b2d      	cmp	r3, #45	; 0x2d
 800d21c:	d070      	beq.n	800d300 <_strtod_l+0x270>
 800d21e:	f04f 0c00 	mov.w	ip, #0
 800d222:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d226:	2f09      	cmp	r7, #9
 800d228:	d97c      	bls.n	800d324 <_strtod_l+0x294>
 800d22a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d22c:	f04f 0e00 	mov.w	lr, #0
 800d230:	e09a      	b.n	800d368 <_strtod_l+0x2d8>
 800d232:	2300      	movs	r3, #0
 800d234:	e7c7      	b.n	800d1c6 <_strtod_l+0x136>
 800d236:	9905      	ldr	r1, [sp, #20]
 800d238:	2908      	cmp	r1, #8
 800d23a:	bfdd      	ittte	le
 800d23c:	9907      	ldrle	r1, [sp, #28]
 800d23e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d242:	9307      	strle	r3, [sp, #28]
 800d244:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d248:	9b05      	ldr	r3, [sp, #20]
 800d24a:	3001      	adds	r0, #1
 800d24c:	3301      	adds	r3, #1
 800d24e:	9305      	str	r3, [sp, #20]
 800d250:	901b      	str	r0, [sp, #108]	; 0x6c
 800d252:	e7bf      	b.n	800d1d4 <_strtod_l+0x144>
 800d254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d256:	191a      	adds	r2, r3, r4
 800d258:	921b      	str	r2, [sp, #108]	; 0x6c
 800d25a:	9a05      	ldr	r2, [sp, #20]
 800d25c:	5d1b      	ldrb	r3, [r3, r4]
 800d25e:	2a00      	cmp	r2, #0
 800d260:	d037      	beq.n	800d2d2 <_strtod_l+0x242>
 800d262:	9c05      	ldr	r4, [sp, #20]
 800d264:	4602      	mov	r2, r0
 800d266:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d26a:	2909      	cmp	r1, #9
 800d26c:	d913      	bls.n	800d296 <_strtod_l+0x206>
 800d26e:	2101      	movs	r1, #1
 800d270:	9104      	str	r1, [sp, #16]
 800d272:	e7c2      	b.n	800d1fa <_strtod_l+0x16a>
 800d274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	921b      	str	r2, [sp, #108]	; 0x6c
 800d27a:	785b      	ldrb	r3, [r3, #1]
 800d27c:	3001      	adds	r0, #1
 800d27e:	2b30      	cmp	r3, #48	; 0x30
 800d280:	d0f8      	beq.n	800d274 <_strtod_l+0x1e4>
 800d282:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d286:	2a08      	cmp	r2, #8
 800d288:	f200 84e4 	bhi.w	800dc54 <_strtod_l+0xbc4>
 800d28c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d28e:	9208      	str	r2, [sp, #32]
 800d290:	4602      	mov	r2, r0
 800d292:	2000      	movs	r0, #0
 800d294:	4604      	mov	r4, r0
 800d296:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d29a:	f100 0101 	add.w	r1, r0, #1
 800d29e:	d012      	beq.n	800d2c6 <_strtod_l+0x236>
 800d2a0:	440a      	add	r2, r1
 800d2a2:	eb00 0c04 	add.w	ip, r0, r4
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	270a      	movs	r7, #10
 800d2aa:	458c      	cmp	ip, r1
 800d2ac:	d113      	bne.n	800d2d6 <_strtod_l+0x246>
 800d2ae:	1821      	adds	r1, r4, r0
 800d2b0:	2908      	cmp	r1, #8
 800d2b2:	f104 0401 	add.w	r4, r4, #1
 800d2b6:	4404      	add	r4, r0
 800d2b8:	dc19      	bgt.n	800d2ee <_strtod_l+0x25e>
 800d2ba:	9b07      	ldr	r3, [sp, #28]
 800d2bc:	210a      	movs	r1, #10
 800d2be:	fb01 e303 	mla	r3, r1, r3, lr
 800d2c2:	9307      	str	r3, [sp, #28]
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2c8:	1c58      	adds	r0, r3, #1
 800d2ca:	901b      	str	r0, [sp, #108]	; 0x6c
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	e7c9      	b.n	800d266 <_strtod_l+0x1d6>
 800d2d2:	9805      	ldr	r0, [sp, #20]
 800d2d4:	e7d3      	b.n	800d27e <_strtod_l+0x1ee>
 800d2d6:	2908      	cmp	r1, #8
 800d2d8:	f101 0101 	add.w	r1, r1, #1
 800d2dc:	dc03      	bgt.n	800d2e6 <_strtod_l+0x256>
 800d2de:	9b07      	ldr	r3, [sp, #28]
 800d2e0:	437b      	muls	r3, r7
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	e7e1      	b.n	800d2aa <_strtod_l+0x21a>
 800d2e6:	2910      	cmp	r1, #16
 800d2e8:	bfd8      	it	le
 800d2ea:	437d      	mulle	r5, r7
 800d2ec:	e7dd      	b.n	800d2aa <_strtod_l+0x21a>
 800d2ee:	2c10      	cmp	r4, #16
 800d2f0:	bfdc      	itt	le
 800d2f2:	210a      	movle	r1, #10
 800d2f4:	fb01 e505 	mlale	r5, r1, r5, lr
 800d2f8:	e7e4      	b.n	800d2c4 <_strtod_l+0x234>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	e781      	b.n	800d204 <_strtod_l+0x174>
 800d300:	f04f 0c01 	mov.w	ip, #1
 800d304:	1cb3      	adds	r3, r6, #2
 800d306:	931b      	str	r3, [sp, #108]	; 0x6c
 800d308:	78b3      	ldrb	r3, [r6, #2]
 800d30a:	e78a      	b.n	800d222 <_strtod_l+0x192>
 800d30c:	f04f 0c00 	mov.w	ip, #0
 800d310:	e7f8      	b.n	800d304 <_strtod_l+0x274>
 800d312:	bf00      	nop
 800d314:	080107e8 	.word	0x080107e8
 800d318:	7ff00000 	.word	0x7ff00000
 800d31c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d31e:	1c5f      	adds	r7, r3, #1
 800d320:	971b      	str	r7, [sp, #108]	; 0x6c
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b30      	cmp	r3, #48	; 0x30
 800d326:	d0f9      	beq.n	800d31c <_strtod_l+0x28c>
 800d328:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d32c:	2f08      	cmp	r7, #8
 800d32e:	f63f af7d 	bhi.w	800d22c <_strtod_l+0x19c>
 800d332:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d338:	930a      	str	r3, [sp, #40]	; 0x28
 800d33a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d33c:	1c5f      	adds	r7, r3, #1
 800d33e:	971b      	str	r7, [sp, #108]	; 0x6c
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d346:	f1b8 0f09 	cmp.w	r8, #9
 800d34a:	d937      	bls.n	800d3bc <_strtod_l+0x32c>
 800d34c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d34e:	1a7f      	subs	r7, r7, r1
 800d350:	2f08      	cmp	r7, #8
 800d352:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d356:	dc37      	bgt.n	800d3c8 <_strtod_l+0x338>
 800d358:	45be      	cmp	lr, r7
 800d35a:	bfa8      	it	ge
 800d35c:	46be      	movge	lr, r7
 800d35e:	f1bc 0f00 	cmp.w	ip, #0
 800d362:	d001      	beq.n	800d368 <_strtod_l+0x2d8>
 800d364:	f1ce 0e00 	rsb	lr, lr, #0
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d151      	bne.n	800d410 <_strtod_l+0x380>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f47f aece 	bne.w	800d10e <_strtod_l+0x7e>
 800d372:	9a06      	ldr	r2, [sp, #24]
 800d374:	2a00      	cmp	r2, #0
 800d376:	f47f aeca 	bne.w	800d10e <_strtod_l+0x7e>
 800d37a:	9a04      	ldr	r2, [sp, #16]
 800d37c:	2a00      	cmp	r2, #0
 800d37e:	f47f aee4 	bne.w	800d14a <_strtod_l+0xba>
 800d382:	2b4e      	cmp	r3, #78	; 0x4e
 800d384:	d027      	beq.n	800d3d6 <_strtod_l+0x346>
 800d386:	dc21      	bgt.n	800d3cc <_strtod_l+0x33c>
 800d388:	2b49      	cmp	r3, #73	; 0x49
 800d38a:	f47f aede 	bne.w	800d14a <_strtod_l+0xba>
 800d38e:	49a0      	ldr	r1, [pc, #640]	; (800d610 <_strtod_l+0x580>)
 800d390:	a81b      	add	r0, sp, #108	; 0x6c
 800d392:	f001 fea1 	bl	800f0d8 <__match>
 800d396:	2800      	cmp	r0, #0
 800d398:	f43f aed7 	beq.w	800d14a <_strtod_l+0xba>
 800d39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d39e:	499d      	ldr	r1, [pc, #628]	; (800d614 <_strtod_l+0x584>)
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	a81b      	add	r0, sp, #108	; 0x6c
 800d3a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3a6:	f001 fe97 	bl	800f0d8 <__match>
 800d3aa:	b910      	cbnz	r0, 800d3b2 <_strtod_l+0x322>
 800d3ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d628 <_strtod_l+0x598>
 800d3b6:	f04f 0a00 	mov.w	sl, #0
 800d3ba:	e6a8      	b.n	800d10e <_strtod_l+0x7e>
 800d3bc:	210a      	movs	r1, #10
 800d3be:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d3c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d3c6:	e7b8      	b.n	800d33a <_strtod_l+0x2aa>
 800d3c8:	46be      	mov	lr, r7
 800d3ca:	e7c8      	b.n	800d35e <_strtod_l+0x2ce>
 800d3cc:	2b69      	cmp	r3, #105	; 0x69
 800d3ce:	d0de      	beq.n	800d38e <_strtod_l+0x2fe>
 800d3d0:	2b6e      	cmp	r3, #110	; 0x6e
 800d3d2:	f47f aeba 	bne.w	800d14a <_strtod_l+0xba>
 800d3d6:	4990      	ldr	r1, [pc, #576]	; (800d618 <_strtod_l+0x588>)
 800d3d8:	a81b      	add	r0, sp, #108	; 0x6c
 800d3da:	f001 fe7d 	bl	800f0d8 <__match>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f43f aeb3 	beq.w	800d14a <_strtod_l+0xba>
 800d3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b28      	cmp	r3, #40	; 0x28
 800d3ea:	d10e      	bne.n	800d40a <_strtod_l+0x37a>
 800d3ec:	aa1e      	add	r2, sp, #120	; 0x78
 800d3ee:	498b      	ldr	r1, [pc, #556]	; (800d61c <_strtod_l+0x58c>)
 800d3f0:	a81b      	add	r0, sp, #108	; 0x6c
 800d3f2:	f001 fe85 	bl	800f100 <__hexnan>
 800d3f6:	2805      	cmp	r0, #5
 800d3f8:	d107      	bne.n	800d40a <_strtod_l+0x37a>
 800d3fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d400:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d404:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d408:	e681      	b.n	800d10e <_strtod_l+0x7e>
 800d40a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d630 <_strtod_l+0x5a0>
 800d40e:	e7d2      	b.n	800d3b6 <_strtod_l+0x326>
 800d410:	ebae 0302 	sub.w	r3, lr, r2
 800d414:	9306      	str	r3, [sp, #24]
 800d416:	9b05      	ldr	r3, [sp, #20]
 800d418:	9807      	ldr	r0, [sp, #28]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bf08      	it	eq
 800d41e:	4623      	moveq	r3, r4
 800d420:	2c10      	cmp	r4, #16
 800d422:	9305      	str	r3, [sp, #20]
 800d424:	46a0      	mov	r8, r4
 800d426:	bfa8      	it	ge
 800d428:	f04f 0810 	movge.w	r8, #16
 800d42c:	f7f3 f872 	bl	8000514 <__aeabi_ui2d>
 800d430:	2c09      	cmp	r4, #9
 800d432:	4682      	mov	sl, r0
 800d434:	468b      	mov	fp, r1
 800d436:	dc13      	bgt.n	800d460 <_strtod_l+0x3d0>
 800d438:	9b06      	ldr	r3, [sp, #24]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f43f ae67 	beq.w	800d10e <_strtod_l+0x7e>
 800d440:	9b06      	ldr	r3, [sp, #24]
 800d442:	dd7a      	ble.n	800d53a <_strtod_l+0x4aa>
 800d444:	2b16      	cmp	r3, #22
 800d446:	dc61      	bgt.n	800d50c <_strtod_l+0x47c>
 800d448:	4a75      	ldr	r2, [pc, #468]	; (800d620 <_strtod_l+0x590>)
 800d44a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d44e:	e9de 0100 	ldrd	r0, r1, [lr]
 800d452:	4652      	mov	r2, sl
 800d454:	465b      	mov	r3, fp
 800d456:	f7f3 f8d7 	bl	8000608 <__aeabi_dmul>
 800d45a:	4682      	mov	sl, r0
 800d45c:	468b      	mov	fp, r1
 800d45e:	e656      	b.n	800d10e <_strtod_l+0x7e>
 800d460:	4b6f      	ldr	r3, [pc, #444]	; (800d620 <_strtod_l+0x590>)
 800d462:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d466:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d46a:	f7f3 f8cd 	bl	8000608 <__aeabi_dmul>
 800d46e:	4606      	mov	r6, r0
 800d470:	4628      	mov	r0, r5
 800d472:	460f      	mov	r7, r1
 800d474:	f7f3 f84e 	bl	8000514 <__aeabi_ui2d>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7f2 ff0c 	bl	800029c <__adddf3>
 800d484:	2c0f      	cmp	r4, #15
 800d486:	4682      	mov	sl, r0
 800d488:	468b      	mov	fp, r1
 800d48a:	ddd5      	ble.n	800d438 <_strtod_l+0x3a8>
 800d48c:	9b06      	ldr	r3, [sp, #24]
 800d48e:	eba4 0808 	sub.w	r8, r4, r8
 800d492:	4498      	add	r8, r3
 800d494:	f1b8 0f00 	cmp.w	r8, #0
 800d498:	f340 8096 	ble.w	800d5c8 <_strtod_l+0x538>
 800d49c:	f018 030f 	ands.w	r3, r8, #15
 800d4a0:	d00a      	beq.n	800d4b8 <_strtod_l+0x428>
 800d4a2:	495f      	ldr	r1, [pc, #380]	; (800d620 <_strtod_l+0x590>)
 800d4a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4a8:	4652      	mov	r2, sl
 800d4aa:	465b      	mov	r3, fp
 800d4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4b0:	f7f3 f8aa 	bl	8000608 <__aeabi_dmul>
 800d4b4:	4682      	mov	sl, r0
 800d4b6:	468b      	mov	fp, r1
 800d4b8:	f038 080f 	bics.w	r8, r8, #15
 800d4bc:	d073      	beq.n	800d5a6 <_strtod_l+0x516>
 800d4be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d4c2:	dd47      	ble.n	800d554 <_strtod_l+0x4c4>
 800d4c4:	2400      	movs	r4, #0
 800d4c6:	46a0      	mov	r8, r4
 800d4c8:	9407      	str	r4, [sp, #28]
 800d4ca:	9405      	str	r4, [sp, #20]
 800d4cc:	2322      	movs	r3, #34	; 0x22
 800d4ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d628 <_strtod_l+0x598>
 800d4d2:	f8c9 3000 	str.w	r3, [r9]
 800d4d6:	f04f 0a00 	mov.w	sl, #0
 800d4da:	9b07      	ldr	r3, [sp, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f43f ae16 	beq.w	800d10e <_strtod_l+0x7e>
 800d4e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	f001 fefd 	bl	800f2e4 <_Bfree>
 800d4ea:	9905      	ldr	r1, [sp, #20]
 800d4ec:	4648      	mov	r0, r9
 800d4ee:	f001 fef9 	bl	800f2e4 <_Bfree>
 800d4f2:	4641      	mov	r1, r8
 800d4f4:	4648      	mov	r0, r9
 800d4f6:	f001 fef5 	bl	800f2e4 <_Bfree>
 800d4fa:	9907      	ldr	r1, [sp, #28]
 800d4fc:	4648      	mov	r0, r9
 800d4fe:	f001 fef1 	bl	800f2e4 <_Bfree>
 800d502:	4621      	mov	r1, r4
 800d504:	4648      	mov	r0, r9
 800d506:	f001 feed 	bl	800f2e4 <_Bfree>
 800d50a:	e600      	b.n	800d10e <_strtod_l+0x7e>
 800d50c:	9a06      	ldr	r2, [sp, #24]
 800d50e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d512:	4293      	cmp	r3, r2
 800d514:	dbba      	blt.n	800d48c <_strtod_l+0x3fc>
 800d516:	4d42      	ldr	r5, [pc, #264]	; (800d620 <_strtod_l+0x590>)
 800d518:	f1c4 040f 	rsb	r4, r4, #15
 800d51c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d520:	4652      	mov	r2, sl
 800d522:	465b      	mov	r3, fp
 800d524:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d528:	f7f3 f86e 	bl	8000608 <__aeabi_dmul>
 800d52c:	9b06      	ldr	r3, [sp, #24]
 800d52e:	1b1c      	subs	r4, r3, r4
 800d530:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d534:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d538:	e78d      	b.n	800d456 <_strtod_l+0x3c6>
 800d53a:	f113 0f16 	cmn.w	r3, #22
 800d53e:	dba5      	blt.n	800d48c <_strtod_l+0x3fc>
 800d540:	4a37      	ldr	r2, [pc, #220]	; (800d620 <_strtod_l+0x590>)
 800d542:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d546:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d54a:	4650      	mov	r0, sl
 800d54c:	4659      	mov	r1, fp
 800d54e:	f7f3 f985 	bl	800085c <__aeabi_ddiv>
 800d552:	e782      	b.n	800d45a <_strtod_l+0x3ca>
 800d554:	2300      	movs	r3, #0
 800d556:	4e33      	ldr	r6, [pc, #204]	; (800d624 <_strtod_l+0x594>)
 800d558:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d55c:	4650      	mov	r0, sl
 800d55e:	4659      	mov	r1, fp
 800d560:	461d      	mov	r5, r3
 800d562:	f1b8 0f01 	cmp.w	r8, #1
 800d566:	dc21      	bgt.n	800d5ac <_strtod_l+0x51c>
 800d568:	b10b      	cbz	r3, 800d56e <_strtod_l+0x4de>
 800d56a:	4682      	mov	sl, r0
 800d56c:	468b      	mov	fp, r1
 800d56e:	4b2d      	ldr	r3, [pc, #180]	; (800d624 <_strtod_l+0x594>)
 800d570:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d574:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d578:	4652      	mov	r2, sl
 800d57a:	465b      	mov	r3, fp
 800d57c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d580:	f7f3 f842 	bl	8000608 <__aeabi_dmul>
 800d584:	4b28      	ldr	r3, [pc, #160]	; (800d628 <_strtod_l+0x598>)
 800d586:	460a      	mov	r2, r1
 800d588:	400b      	ands	r3, r1
 800d58a:	4928      	ldr	r1, [pc, #160]	; (800d62c <_strtod_l+0x59c>)
 800d58c:	428b      	cmp	r3, r1
 800d58e:	4682      	mov	sl, r0
 800d590:	d898      	bhi.n	800d4c4 <_strtod_l+0x434>
 800d592:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d596:	428b      	cmp	r3, r1
 800d598:	bf86      	itte	hi
 800d59a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d634 <_strtod_l+0x5a4>
 800d59e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d5a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	e077      	b.n	800d69c <_strtod_l+0x60c>
 800d5ac:	f018 0f01 	tst.w	r8, #1
 800d5b0:	d006      	beq.n	800d5c0 <_strtod_l+0x530>
 800d5b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	f7f3 f825 	bl	8000608 <__aeabi_dmul>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5c6:	e7cc      	b.n	800d562 <_strtod_l+0x4d2>
 800d5c8:	d0ed      	beq.n	800d5a6 <_strtod_l+0x516>
 800d5ca:	f1c8 0800 	rsb	r8, r8, #0
 800d5ce:	f018 020f 	ands.w	r2, r8, #15
 800d5d2:	d00a      	beq.n	800d5ea <_strtod_l+0x55a>
 800d5d4:	4b12      	ldr	r3, [pc, #72]	; (800d620 <_strtod_l+0x590>)
 800d5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5da:	4650      	mov	r0, sl
 800d5dc:	4659      	mov	r1, fp
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f3 f93b 	bl	800085c <__aeabi_ddiv>
 800d5e6:	4682      	mov	sl, r0
 800d5e8:	468b      	mov	fp, r1
 800d5ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5ee:	d0da      	beq.n	800d5a6 <_strtod_l+0x516>
 800d5f0:	f1b8 0f1f 	cmp.w	r8, #31
 800d5f4:	dd20      	ble.n	800d638 <_strtod_l+0x5a8>
 800d5f6:	2400      	movs	r4, #0
 800d5f8:	46a0      	mov	r8, r4
 800d5fa:	9407      	str	r4, [sp, #28]
 800d5fc:	9405      	str	r4, [sp, #20]
 800d5fe:	2322      	movs	r3, #34	; 0x22
 800d600:	f04f 0a00 	mov.w	sl, #0
 800d604:	f04f 0b00 	mov.w	fp, #0
 800d608:	f8c9 3000 	str.w	r3, [r9]
 800d60c:	e765      	b.n	800d4da <_strtod_l+0x44a>
 800d60e:	bf00      	nop
 800d610:	080107b1 	.word	0x080107b1
 800d614:	0801083b 	.word	0x0801083b
 800d618:	080107b9 	.word	0x080107b9
 800d61c:	080107fc 	.word	0x080107fc
 800d620:	080108e0 	.word	0x080108e0
 800d624:	080108b8 	.word	0x080108b8
 800d628:	7ff00000 	.word	0x7ff00000
 800d62c:	7ca00000 	.word	0x7ca00000
 800d630:	fff80000 	.word	0xfff80000
 800d634:	7fefffff 	.word	0x7fefffff
 800d638:	f018 0310 	ands.w	r3, r8, #16
 800d63c:	bf18      	it	ne
 800d63e:	236a      	movne	r3, #106	; 0x6a
 800d640:	4da0      	ldr	r5, [pc, #640]	; (800d8c4 <_strtod_l+0x834>)
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	4650      	mov	r0, sl
 800d646:	4659      	mov	r1, fp
 800d648:	2300      	movs	r3, #0
 800d64a:	f1b8 0f00 	cmp.w	r8, #0
 800d64e:	f300 810a 	bgt.w	800d866 <_strtod_l+0x7d6>
 800d652:	b10b      	cbz	r3, 800d658 <_strtod_l+0x5c8>
 800d654:	4682      	mov	sl, r0
 800d656:	468b      	mov	fp, r1
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	b1bb      	cbz	r3, 800d68c <_strtod_l+0x5fc>
 800d65c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d664:	2b00      	cmp	r3, #0
 800d666:	4659      	mov	r1, fp
 800d668:	dd10      	ble.n	800d68c <_strtod_l+0x5fc>
 800d66a:	2b1f      	cmp	r3, #31
 800d66c:	f340 8107 	ble.w	800d87e <_strtod_l+0x7ee>
 800d670:	2b34      	cmp	r3, #52	; 0x34
 800d672:	bfde      	ittt	le
 800d674:	3b20      	suble	r3, #32
 800d676:	f04f 32ff 	movle.w	r2, #4294967295
 800d67a:	fa02 f303 	lslle.w	r3, r2, r3
 800d67e:	f04f 0a00 	mov.w	sl, #0
 800d682:	bfcc      	ite	gt
 800d684:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d688:	ea03 0b01 	andle.w	fp, r3, r1
 800d68c:	2200      	movs	r2, #0
 800d68e:	2300      	movs	r3, #0
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	f7f3 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d1ac      	bne.n	800d5f6 <_strtod_l+0x566>
 800d69c:	9b07      	ldr	r3, [sp, #28]
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	9a05      	ldr	r2, [sp, #20]
 800d6a2:	9908      	ldr	r1, [sp, #32]
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	4648      	mov	r0, r9
 800d6a8:	f001 fe6e 	bl	800f388 <__s2b>
 800d6ac:	9007      	str	r0, [sp, #28]
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	f43f af08 	beq.w	800d4c4 <_strtod_l+0x434>
 800d6b4:	9a06      	ldr	r2, [sp, #24]
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	2a00      	cmp	r2, #0
 800d6ba:	f1c3 0300 	rsb	r3, r3, #0
 800d6be:	bfa8      	it	ge
 800d6c0:	2300      	movge	r3, #0
 800d6c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d6c4:	2400      	movs	r4, #0
 800d6c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d6ca:	9316      	str	r3, [sp, #88]	; 0x58
 800d6cc:	46a0      	mov	r8, r4
 800d6ce:	9b07      	ldr	r3, [sp, #28]
 800d6d0:	4648      	mov	r0, r9
 800d6d2:	6859      	ldr	r1, [r3, #4]
 800d6d4:	f001 fdd2 	bl	800f27c <_Balloc>
 800d6d8:	9005      	str	r0, [sp, #20]
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	f43f aef6 	beq.w	800d4cc <_strtod_l+0x43c>
 800d6e0:	9b07      	ldr	r3, [sp, #28]
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	3202      	adds	r2, #2
 800d6e6:	f103 010c 	add.w	r1, r3, #12
 800d6ea:	0092      	lsls	r2, r2, #2
 800d6ec:	300c      	adds	r0, #12
 800d6ee:	f7fe fe19 	bl	800c324 <memcpy>
 800d6f2:	aa1e      	add	r2, sp, #120	; 0x78
 800d6f4:	a91d      	add	r1, sp, #116	; 0x74
 800d6f6:	ec4b ab10 	vmov	d0, sl, fp
 800d6fa:	4648      	mov	r0, r9
 800d6fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d700:	f002 f8fe 	bl	800f900 <__d2b>
 800d704:	901c      	str	r0, [sp, #112]	; 0x70
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f aee0 	beq.w	800d4cc <_strtod_l+0x43c>
 800d70c:	2101      	movs	r1, #1
 800d70e:	4648      	mov	r0, r9
 800d710:	f001 fec6 	bl	800f4a0 <__i2b>
 800d714:	4680      	mov	r8, r0
 800d716:	2800      	cmp	r0, #0
 800d718:	f43f aed8 	beq.w	800d4cc <_strtod_l+0x43c>
 800d71c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d71e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d720:	2e00      	cmp	r6, #0
 800d722:	bfab      	itete	ge
 800d724:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d726:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d728:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d72a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d72c:	bfac      	ite	ge
 800d72e:	18f7      	addge	r7, r6, r3
 800d730:	1b9d      	sublt	r5, r3, r6
 800d732:	9b04      	ldr	r3, [sp, #16]
 800d734:	1af6      	subs	r6, r6, r3
 800d736:	4416      	add	r6, r2
 800d738:	4b63      	ldr	r3, [pc, #396]	; (800d8c8 <_strtod_l+0x838>)
 800d73a:	3e01      	subs	r6, #1
 800d73c:	429e      	cmp	r6, r3
 800d73e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d742:	f280 80af 	bge.w	800d8a4 <_strtod_l+0x814>
 800d746:	1b9b      	subs	r3, r3, r6
 800d748:	2b1f      	cmp	r3, #31
 800d74a:	eba2 0203 	sub.w	r2, r2, r3
 800d74e:	f04f 0101 	mov.w	r1, #1
 800d752:	f300 809b 	bgt.w	800d88c <_strtod_l+0x7fc>
 800d756:	fa01 f303 	lsl.w	r3, r1, r3
 800d75a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d75c:	2300      	movs	r3, #0
 800d75e:	930a      	str	r3, [sp, #40]	; 0x28
 800d760:	18be      	adds	r6, r7, r2
 800d762:	9b04      	ldr	r3, [sp, #16]
 800d764:	42b7      	cmp	r7, r6
 800d766:	4415      	add	r5, r2
 800d768:	441d      	add	r5, r3
 800d76a:	463b      	mov	r3, r7
 800d76c:	bfa8      	it	ge
 800d76e:	4633      	movge	r3, r6
 800d770:	42ab      	cmp	r3, r5
 800d772:	bfa8      	it	ge
 800d774:	462b      	movge	r3, r5
 800d776:	2b00      	cmp	r3, #0
 800d778:	bfc2      	ittt	gt
 800d77a:	1af6      	subgt	r6, r6, r3
 800d77c:	1aed      	subgt	r5, r5, r3
 800d77e:	1aff      	subgt	r7, r7, r3
 800d780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d782:	b1bb      	cbz	r3, 800d7b4 <_strtod_l+0x724>
 800d784:	4641      	mov	r1, r8
 800d786:	461a      	mov	r2, r3
 800d788:	4648      	mov	r0, r9
 800d78a:	f001 ff29 	bl	800f5e0 <__pow5mult>
 800d78e:	4680      	mov	r8, r0
 800d790:	2800      	cmp	r0, #0
 800d792:	f43f ae9b 	beq.w	800d4cc <_strtod_l+0x43c>
 800d796:	4601      	mov	r1, r0
 800d798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d79a:	4648      	mov	r0, r9
 800d79c:	f001 fe89 	bl	800f4b2 <__multiply>
 800d7a0:	900c      	str	r0, [sp, #48]	; 0x30
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	f43f ae92 	beq.w	800d4cc <_strtod_l+0x43c>
 800d7a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7aa:	4648      	mov	r0, r9
 800d7ac:	f001 fd9a 	bl	800f2e4 <_Bfree>
 800d7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b2:	931c      	str	r3, [sp, #112]	; 0x70
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	dc7a      	bgt.n	800d8ae <_strtod_l+0x81e>
 800d7b8:	9b06      	ldr	r3, [sp, #24]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dd08      	ble.n	800d7d0 <_strtod_l+0x740>
 800d7be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7c0:	9905      	ldr	r1, [sp, #20]
 800d7c2:	4648      	mov	r0, r9
 800d7c4:	f001 ff0c 	bl	800f5e0 <__pow5mult>
 800d7c8:	9005      	str	r0, [sp, #20]
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f43f ae7e 	beq.w	800d4cc <_strtod_l+0x43c>
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	dd08      	ble.n	800d7e6 <_strtod_l+0x756>
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	9905      	ldr	r1, [sp, #20]
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f001 ff4f 	bl	800f67c <__lshift>
 800d7de:	9005      	str	r0, [sp, #20]
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	f43f ae73 	beq.w	800d4cc <_strtod_l+0x43c>
 800d7e6:	2f00      	cmp	r7, #0
 800d7e8:	dd08      	ble.n	800d7fc <_strtod_l+0x76c>
 800d7ea:	4641      	mov	r1, r8
 800d7ec:	463a      	mov	r2, r7
 800d7ee:	4648      	mov	r0, r9
 800d7f0:	f001 ff44 	bl	800f67c <__lshift>
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f ae68 	beq.w	800d4cc <_strtod_l+0x43c>
 800d7fc:	9a05      	ldr	r2, [sp, #20]
 800d7fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d800:	4648      	mov	r0, r9
 800d802:	f001 ffa9 	bl	800f758 <__mdiff>
 800d806:	4604      	mov	r4, r0
 800d808:	2800      	cmp	r0, #0
 800d80a:	f43f ae5f 	beq.w	800d4cc <_strtod_l+0x43c>
 800d80e:	68c3      	ldr	r3, [r0, #12]
 800d810:	930c      	str	r3, [sp, #48]	; 0x30
 800d812:	2300      	movs	r3, #0
 800d814:	60c3      	str	r3, [r0, #12]
 800d816:	4641      	mov	r1, r8
 800d818:	f001 ff84 	bl	800f724 <__mcmp>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	da55      	bge.n	800d8cc <_strtod_l+0x83c>
 800d820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d822:	b9e3      	cbnz	r3, 800d85e <_strtod_l+0x7ce>
 800d824:	f1ba 0f00 	cmp.w	sl, #0
 800d828:	d119      	bne.n	800d85e <_strtod_l+0x7ce>
 800d82a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d82e:	b9b3      	cbnz	r3, 800d85e <_strtod_l+0x7ce>
 800d830:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d834:	0d1b      	lsrs	r3, r3, #20
 800d836:	051b      	lsls	r3, r3, #20
 800d838:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d83c:	d90f      	bls.n	800d85e <_strtod_l+0x7ce>
 800d83e:	6963      	ldr	r3, [r4, #20]
 800d840:	b913      	cbnz	r3, 800d848 <_strtod_l+0x7b8>
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	2b01      	cmp	r3, #1
 800d846:	dd0a      	ble.n	800d85e <_strtod_l+0x7ce>
 800d848:	4621      	mov	r1, r4
 800d84a:	2201      	movs	r2, #1
 800d84c:	4648      	mov	r0, r9
 800d84e:	f001 ff15 	bl	800f67c <__lshift>
 800d852:	4641      	mov	r1, r8
 800d854:	4604      	mov	r4, r0
 800d856:	f001 ff65 	bl	800f724 <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	dc67      	bgt.n	800d92e <_strtod_l+0x89e>
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d171      	bne.n	800d948 <_strtod_l+0x8b8>
 800d864:	e63d      	b.n	800d4e2 <_strtod_l+0x452>
 800d866:	f018 0f01 	tst.w	r8, #1
 800d86a:	d004      	beq.n	800d876 <_strtod_l+0x7e6>
 800d86c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d870:	f7f2 feca 	bl	8000608 <__aeabi_dmul>
 800d874:	2301      	movs	r3, #1
 800d876:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d87a:	3508      	adds	r5, #8
 800d87c:	e6e5      	b.n	800d64a <_strtod_l+0x5ba>
 800d87e:	f04f 32ff 	mov.w	r2, #4294967295
 800d882:	fa02 f303 	lsl.w	r3, r2, r3
 800d886:	ea03 0a0a 	and.w	sl, r3, sl
 800d88a:	e6ff      	b.n	800d68c <_strtod_l+0x5fc>
 800d88c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d890:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d894:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d898:	36e2      	adds	r6, #226	; 0xe2
 800d89a:	fa01 f306 	lsl.w	r3, r1, r6
 800d89e:	930a      	str	r3, [sp, #40]	; 0x28
 800d8a0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d8a2:	e75d      	b.n	800d760 <_strtod_l+0x6d0>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8ac:	e758      	b.n	800d760 <_strtod_l+0x6d0>
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	f001 fee2 	bl	800f67c <__lshift>
 800d8b8:	901c      	str	r0, [sp, #112]	; 0x70
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f47f af7c 	bne.w	800d7b8 <_strtod_l+0x728>
 800d8c0:	e604      	b.n	800d4cc <_strtod_l+0x43c>
 800d8c2:	bf00      	nop
 800d8c4:	08010810 	.word	0x08010810
 800d8c8:	fffffc02 	.word	0xfffffc02
 800d8cc:	465d      	mov	r5, fp
 800d8ce:	f040 8086 	bne.w	800d9de <_strtod_l+0x94e>
 800d8d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8d8:	b32a      	cbz	r2, 800d926 <_strtod_l+0x896>
 800d8da:	4aaf      	ldr	r2, [pc, #700]	; (800db98 <_strtod_l+0xb08>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d153      	bne.n	800d988 <_strtod_l+0x8f8>
 800d8e0:	9b04      	ldr	r3, [sp, #16]
 800d8e2:	4650      	mov	r0, sl
 800d8e4:	b1d3      	cbz	r3, 800d91c <_strtod_l+0x88c>
 800d8e6:	4aad      	ldr	r2, [pc, #692]	; (800db9c <_strtod_l+0xb0c>)
 800d8e8:	402a      	ands	r2, r5
 800d8ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d8ee:	f04f 31ff 	mov.w	r1, #4294967295
 800d8f2:	d816      	bhi.n	800d922 <_strtod_l+0x892>
 800d8f4:	0d12      	lsrs	r2, r2, #20
 800d8f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d8fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d8fe:	4298      	cmp	r0, r3
 800d900:	d142      	bne.n	800d988 <_strtod_l+0x8f8>
 800d902:	4ba7      	ldr	r3, [pc, #668]	; (800dba0 <_strtod_l+0xb10>)
 800d904:	429d      	cmp	r5, r3
 800d906:	d102      	bne.n	800d90e <_strtod_l+0x87e>
 800d908:	3001      	adds	r0, #1
 800d90a:	f43f addf 	beq.w	800d4cc <_strtod_l+0x43c>
 800d90e:	4ba3      	ldr	r3, [pc, #652]	; (800db9c <_strtod_l+0xb0c>)
 800d910:	402b      	ands	r3, r5
 800d912:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d916:	f04f 0a00 	mov.w	sl, #0
 800d91a:	e7a0      	b.n	800d85e <_strtod_l+0x7ce>
 800d91c:	f04f 33ff 	mov.w	r3, #4294967295
 800d920:	e7ed      	b.n	800d8fe <_strtod_l+0x86e>
 800d922:	460b      	mov	r3, r1
 800d924:	e7eb      	b.n	800d8fe <_strtod_l+0x86e>
 800d926:	bb7b      	cbnz	r3, 800d988 <_strtod_l+0x8f8>
 800d928:	f1ba 0f00 	cmp.w	sl, #0
 800d92c:	d12c      	bne.n	800d988 <_strtod_l+0x8f8>
 800d92e:	9904      	ldr	r1, [sp, #16]
 800d930:	4a9a      	ldr	r2, [pc, #616]	; (800db9c <_strtod_l+0xb0c>)
 800d932:	465b      	mov	r3, fp
 800d934:	b1f1      	cbz	r1, 800d974 <_strtod_l+0x8e4>
 800d936:	ea02 010b 	and.w	r1, r2, fp
 800d93a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d93e:	dc19      	bgt.n	800d974 <_strtod_l+0x8e4>
 800d940:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d944:	f77f ae5b 	ble.w	800d5fe <_strtod_l+0x56e>
 800d948:	4a96      	ldr	r2, [pc, #600]	; (800dba4 <_strtod_l+0xb14>)
 800d94a:	2300      	movs	r3, #0
 800d94c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d950:	4650      	mov	r0, sl
 800d952:	4659      	mov	r1, fp
 800d954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d958:	f7f2 fe56 	bl	8000608 <__aeabi_dmul>
 800d95c:	4682      	mov	sl, r0
 800d95e:	468b      	mov	fp, r1
 800d960:	2900      	cmp	r1, #0
 800d962:	f47f adbe 	bne.w	800d4e2 <_strtod_l+0x452>
 800d966:	2800      	cmp	r0, #0
 800d968:	f47f adbb 	bne.w	800d4e2 <_strtod_l+0x452>
 800d96c:	2322      	movs	r3, #34	; 0x22
 800d96e:	f8c9 3000 	str.w	r3, [r9]
 800d972:	e5b6      	b.n	800d4e2 <_strtod_l+0x452>
 800d974:	4013      	ands	r3, r2
 800d976:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d97a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d97e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d982:	f04f 3aff 	mov.w	sl, #4294967295
 800d986:	e76a      	b.n	800d85e <_strtod_l+0x7ce>
 800d988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d98a:	b193      	cbz	r3, 800d9b2 <_strtod_l+0x922>
 800d98c:	422b      	tst	r3, r5
 800d98e:	f43f af66 	beq.w	800d85e <_strtod_l+0x7ce>
 800d992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d994:	9a04      	ldr	r2, [sp, #16]
 800d996:	4650      	mov	r0, sl
 800d998:	4659      	mov	r1, fp
 800d99a:	b173      	cbz	r3, 800d9ba <_strtod_l+0x92a>
 800d99c:	f7ff fb5a 	bl	800d054 <sulp>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9a8:	f7f2 fc78 	bl	800029c <__adddf3>
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	e755      	b.n	800d85e <_strtod_l+0x7ce>
 800d9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9b4:	ea13 0f0a 	tst.w	r3, sl
 800d9b8:	e7e9      	b.n	800d98e <_strtod_l+0x8fe>
 800d9ba:	f7ff fb4b 	bl	800d054 <sulp>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9c6:	f7f2 fc67 	bl	8000298 <__aeabi_dsub>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	468b      	mov	fp, r1
 800d9d2:	f7f3 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f47f ae11 	bne.w	800d5fe <_strtod_l+0x56e>
 800d9dc:	e73f      	b.n	800d85e <_strtod_l+0x7ce>
 800d9de:	4641      	mov	r1, r8
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f001 ffdc 	bl	800f99e <__ratio>
 800d9e6:	ec57 6b10 	vmov	r6, r7, d0
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9f0:	ee10 0a10 	vmov	r0, s0
 800d9f4:	4639      	mov	r1, r7
 800d9f6:	f7f3 f883 	bl	8000b00 <__aeabi_dcmple>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d077      	beq.n	800daee <_strtod_l+0xa5e>
 800d9fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da00:	2b00      	cmp	r3, #0
 800da02:	d04a      	beq.n	800da9a <_strtod_l+0xa0a>
 800da04:	4b68      	ldr	r3, [pc, #416]	; (800dba8 <_strtod_l+0xb18>)
 800da06:	2200      	movs	r2, #0
 800da08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800da0c:	4f66      	ldr	r7, [pc, #408]	; (800dba8 <_strtod_l+0xb18>)
 800da0e:	2600      	movs	r6, #0
 800da10:	4b62      	ldr	r3, [pc, #392]	; (800db9c <_strtod_l+0xb0c>)
 800da12:	402b      	ands	r3, r5
 800da14:	930f      	str	r3, [sp, #60]	; 0x3c
 800da16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da18:	4b64      	ldr	r3, [pc, #400]	; (800dbac <_strtod_l+0xb1c>)
 800da1a:	429a      	cmp	r2, r3
 800da1c:	f040 80ce 	bne.w	800dbbc <_strtod_l+0xb2c>
 800da20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da28:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800da2c:	ec4b ab10 	vmov	d0, sl, fp
 800da30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800da34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800da38:	f001 feec 	bl	800f814 <__ulp>
 800da3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da40:	ec53 2b10 	vmov	r2, r3, d0
 800da44:	f7f2 fde0 	bl	8000608 <__aeabi_dmul>
 800da48:	4652      	mov	r2, sl
 800da4a:	465b      	mov	r3, fp
 800da4c:	f7f2 fc26 	bl	800029c <__adddf3>
 800da50:	460b      	mov	r3, r1
 800da52:	4952      	ldr	r1, [pc, #328]	; (800db9c <_strtod_l+0xb0c>)
 800da54:	4a56      	ldr	r2, [pc, #344]	; (800dbb0 <_strtod_l+0xb20>)
 800da56:	4019      	ands	r1, r3
 800da58:	4291      	cmp	r1, r2
 800da5a:	4682      	mov	sl, r0
 800da5c:	d95b      	bls.n	800db16 <_strtod_l+0xa86>
 800da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da64:	4293      	cmp	r3, r2
 800da66:	d103      	bne.n	800da70 <_strtod_l+0x9e0>
 800da68:	9b08      	ldr	r3, [sp, #32]
 800da6a:	3301      	adds	r3, #1
 800da6c:	f43f ad2e 	beq.w	800d4cc <_strtod_l+0x43c>
 800da70:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800dba0 <_strtod_l+0xb10>
 800da74:	f04f 3aff 	mov.w	sl, #4294967295
 800da78:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da7a:	4648      	mov	r0, r9
 800da7c:	f001 fc32 	bl	800f2e4 <_Bfree>
 800da80:	9905      	ldr	r1, [sp, #20]
 800da82:	4648      	mov	r0, r9
 800da84:	f001 fc2e 	bl	800f2e4 <_Bfree>
 800da88:	4641      	mov	r1, r8
 800da8a:	4648      	mov	r0, r9
 800da8c:	f001 fc2a 	bl	800f2e4 <_Bfree>
 800da90:	4621      	mov	r1, r4
 800da92:	4648      	mov	r0, r9
 800da94:	f001 fc26 	bl	800f2e4 <_Bfree>
 800da98:	e619      	b.n	800d6ce <_strtod_l+0x63e>
 800da9a:	f1ba 0f00 	cmp.w	sl, #0
 800da9e:	d11a      	bne.n	800dad6 <_strtod_l+0xa46>
 800daa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800daa4:	b9eb      	cbnz	r3, 800dae2 <_strtod_l+0xa52>
 800daa6:	2200      	movs	r2, #0
 800daa8:	4b3f      	ldr	r3, [pc, #252]	; (800dba8 <_strtod_l+0xb18>)
 800daaa:	4630      	mov	r0, r6
 800daac:	4639      	mov	r1, r7
 800daae:	f7f3 f81d 	bl	8000aec <__aeabi_dcmplt>
 800dab2:	b9c8      	cbnz	r0, 800dae8 <_strtod_l+0xa58>
 800dab4:	4630      	mov	r0, r6
 800dab6:	4639      	mov	r1, r7
 800dab8:	2200      	movs	r2, #0
 800daba:	4b3e      	ldr	r3, [pc, #248]	; (800dbb4 <_strtod_l+0xb24>)
 800dabc:	f7f2 fda4 	bl	8000608 <__aeabi_dmul>
 800dac0:	4606      	mov	r6, r0
 800dac2:	460f      	mov	r7, r1
 800dac4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dac8:	9618      	str	r6, [sp, #96]	; 0x60
 800daca:	9319      	str	r3, [sp, #100]	; 0x64
 800dacc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800dad0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dad4:	e79c      	b.n	800da10 <_strtod_l+0x980>
 800dad6:	f1ba 0f01 	cmp.w	sl, #1
 800dada:	d102      	bne.n	800dae2 <_strtod_l+0xa52>
 800dadc:	2d00      	cmp	r5, #0
 800dade:	f43f ad8e 	beq.w	800d5fe <_strtod_l+0x56e>
 800dae2:	2200      	movs	r2, #0
 800dae4:	4b34      	ldr	r3, [pc, #208]	; (800dbb8 <_strtod_l+0xb28>)
 800dae6:	e78f      	b.n	800da08 <_strtod_l+0x978>
 800dae8:	2600      	movs	r6, #0
 800daea:	4f32      	ldr	r7, [pc, #200]	; (800dbb4 <_strtod_l+0xb24>)
 800daec:	e7ea      	b.n	800dac4 <_strtod_l+0xa34>
 800daee:	4b31      	ldr	r3, [pc, #196]	; (800dbb4 <_strtod_l+0xb24>)
 800daf0:	4630      	mov	r0, r6
 800daf2:	4639      	mov	r1, r7
 800daf4:	2200      	movs	r2, #0
 800daf6:	f7f2 fd87 	bl	8000608 <__aeabi_dmul>
 800dafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	b933      	cbnz	r3, 800db10 <_strtod_l+0xa80>
 800db02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db06:	9010      	str	r0, [sp, #64]	; 0x40
 800db08:	9311      	str	r3, [sp, #68]	; 0x44
 800db0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db0e:	e7df      	b.n	800dad0 <_strtod_l+0xa40>
 800db10:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800db14:	e7f9      	b.n	800db0a <_strtod_l+0xa7a>
 800db16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800db1a:	9b04      	ldr	r3, [sp, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1ab      	bne.n	800da78 <_strtod_l+0x9e8>
 800db20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db24:	0d1b      	lsrs	r3, r3, #20
 800db26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db28:	051b      	lsls	r3, r3, #20
 800db2a:	429a      	cmp	r2, r3
 800db2c:	465d      	mov	r5, fp
 800db2e:	d1a3      	bne.n	800da78 <_strtod_l+0x9e8>
 800db30:	4639      	mov	r1, r7
 800db32:	4630      	mov	r0, r6
 800db34:	f7f3 f818 	bl	8000b68 <__aeabi_d2iz>
 800db38:	f7f2 fcfc 	bl	8000534 <__aeabi_i2d>
 800db3c:	460b      	mov	r3, r1
 800db3e:	4602      	mov	r2, r0
 800db40:	4639      	mov	r1, r7
 800db42:	4630      	mov	r0, r6
 800db44:	f7f2 fba8 	bl	8000298 <__aeabi_dsub>
 800db48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db4a:	4606      	mov	r6, r0
 800db4c:	460f      	mov	r7, r1
 800db4e:	b933      	cbnz	r3, 800db5e <_strtod_l+0xace>
 800db50:	f1ba 0f00 	cmp.w	sl, #0
 800db54:	d103      	bne.n	800db5e <_strtod_l+0xace>
 800db56:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800db5a:	2d00      	cmp	r5, #0
 800db5c:	d06d      	beq.n	800dc3a <_strtod_l+0xbaa>
 800db5e:	a30a      	add	r3, pc, #40	; (adr r3, 800db88 <_strtod_l+0xaf8>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	4630      	mov	r0, r6
 800db66:	4639      	mov	r1, r7
 800db68:	f7f2 ffc0 	bl	8000aec <__aeabi_dcmplt>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	f47f acb8 	bne.w	800d4e2 <_strtod_l+0x452>
 800db72:	a307      	add	r3, pc, #28	; (adr r3, 800db90 <_strtod_l+0xb00>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	4630      	mov	r0, r6
 800db7a:	4639      	mov	r1, r7
 800db7c:	f7f2 ffd4 	bl	8000b28 <__aeabi_dcmpgt>
 800db80:	2800      	cmp	r0, #0
 800db82:	f43f af79 	beq.w	800da78 <_strtod_l+0x9e8>
 800db86:	e4ac      	b.n	800d4e2 <_strtod_l+0x452>
 800db88:	94a03595 	.word	0x94a03595
 800db8c:	3fdfffff 	.word	0x3fdfffff
 800db90:	35afe535 	.word	0x35afe535
 800db94:	3fe00000 	.word	0x3fe00000
 800db98:	000fffff 	.word	0x000fffff
 800db9c:	7ff00000 	.word	0x7ff00000
 800dba0:	7fefffff 	.word	0x7fefffff
 800dba4:	39500000 	.word	0x39500000
 800dba8:	3ff00000 	.word	0x3ff00000
 800dbac:	7fe00000 	.word	0x7fe00000
 800dbb0:	7c9fffff 	.word	0x7c9fffff
 800dbb4:	3fe00000 	.word	0x3fe00000
 800dbb8:	bff00000 	.word	0xbff00000
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	b333      	cbz	r3, 800dc0e <_strtod_l+0xb7e>
 800dbc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dbc6:	d822      	bhi.n	800dc0e <_strtod_l+0xb7e>
 800dbc8:	a327      	add	r3, pc, #156	; (adr r3, 800dc68 <_strtod_l+0xbd8>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	4630      	mov	r0, r6
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	f7f2 ff95 	bl	8000b00 <__aeabi_dcmple>
 800dbd6:	b1a0      	cbz	r0, 800dc02 <_strtod_l+0xb72>
 800dbd8:	4639      	mov	r1, r7
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7f2 ffec 	bl	8000bb8 <__aeabi_d2uiz>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	bf08      	it	eq
 800dbe4:	2001      	moveq	r0, #1
 800dbe6:	f7f2 fc95 	bl	8000514 <__aeabi_ui2d>
 800dbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbec:	4606      	mov	r6, r0
 800dbee:	460f      	mov	r7, r1
 800dbf0:	bb03      	cbnz	r3, 800dc34 <_strtod_l+0xba4>
 800dbf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbf6:	9012      	str	r0, [sp, #72]	; 0x48
 800dbf8:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dbfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dc02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc06:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800dc12:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dc16:	f001 fdfd 	bl	800f814 <__ulp>
 800dc1a:	4650      	mov	r0, sl
 800dc1c:	ec53 2b10 	vmov	r2, r3, d0
 800dc20:	4659      	mov	r1, fp
 800dc22:	f7f2 fcf1 	bl	8000608 <__aeabi_dmul>
 800dc26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dc2a:	f7f2 fb37 	bl	800029c <__adddf3>
 800dc2e:	4682      	mov	sl, r0
 800dc30:	468b      	mov	fp, r1
 800dc32:	e772      	b.n	800db1a <_strtod_l+0xa8a>
 800dc34:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800dc38:	e7df      	b.n	800dbfa <_strtod_l+0xb6a>
 800dc3a:	a30d      	add	r3, pc, #52	; (adr r3, 800dc70 <_strtod_l+0xbe0>)
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	f7f2 ff54 	bl	8000aec <__aeabi_dcmplt>
 800dc44:	e79c      	b.n	800db80 <_strtod_l+0xaf0>
 800dc46:	2300      	movs	r3, #0
 800dc48:	930d      	str	r3, [sp, #52]	; 0x34
 800dc4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	f7ff ba61 	b.w	800d116 <_strtod_l+0x86>
 800dc54:	2b65      	cmp	r3, #101	; 0x65
 800dc56:	f04f 0200 	mov.w	r2, #0
 800dc5a:	f43f ab4e 	beq.w	800d2fa <_strtod_l+0x26a>
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4614      	mov	r4, r2
 800dc62:	9104      	str	r1, [sp, #16]
 800dc64:	f7ff bacb 	b.w	800d1fe <_strtod_l+0x16e>
 800dc68:	ffc00000 	.word	0xffc00000
 800dc6c:	41dfffff 	.word	0x41dfffff
 800dc70:	94a03595 	.word	0x94a03595
 800dc74:	3fcfffff 	.word	0x3fcfffff

0800dc78 <_strtod_r>:
 800dc78:	4b05      	ldr	r3, [pc, #20]	; (800dc90 <_strtod_r+0x18>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	b410      	push	{r4}
 800dc7e:	6a1b      	ldr	r3, [r3, #32]
 800dc80:	4c04      	ldr	r4, [pc, #16]	; (800dc94 <_strtod_r+0x1c>)
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bf08      	it	eq
 800dc86:	4623      	moveq	r3, r4
 800dc88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc8c:	f7ff ba00 	b.w	800d090 <_strtod_l>
 800dc90:	200002cc 	.word	0x200002cc
 800dc94:	20000330 	.word	0x20000330

0800dc98 <_strtol_l.isra.0>:
 800dc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	4689      	mov	r9, r1
 800dca0:	4692      	mov	sl, r2
 800dca2:	461e      	mov	r6, r3
 800dca4:	460f      	mov	r7, r1
 800dca6:	463d      	mov	r5, r7
 800dca8:	9808      	ldr	r0, [sp, #32]
 800dcaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcae:	f001 fab7 	bl	800f220 <__locale_ctype_ptr_l>
 800dcb2:	4420      	add	r0, r4
 800dcb4:	7843      	ldrb	r3, [r0, #1]
 800dcb6:	f013 0308 	ands.w	r3, r3, #8
 800dcba:	d132      	bne.n	800dd22 <_strtol_l.isra.0+0x8a>
 800dcbc:	2c2d      	cmp	r4, #45	; 0x2d
 800dcbe:	d132      	bne.n	800dd26 <_strtol_l.isra.0+0x8e>
 800dcc0:	787c      	ldrb	r4, [r7, #1]
 800dcc2:	1cbd      	adds	r5, r7, #2
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	2e00      	cmp	r6, #0
 800dcc8:	d05d      	beq.n	800dd86 <_strtol_l.isra.0+0xee>
 800dcca:	2e10      	cmp	r6, #16
 800dccc:	d109      	bne.n	800dce2 <_strtol_l.isra.0+0x4a>
 800dcce:	2c30      	cmp	r4, #48	; 0x30
 800dcd0:	d107      	bne.n	800dce2 <_strtol_l.isra.0+0x4a>
 800dcd2:	782b      	ldrb	r3, [r5, #0]
 800dcd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dcd8:	2b58      	cmp	r3, #88	; 0x58
 800dcda:	d14f      	bne.n	800dd7c <_strtol_l.isra.0+0xe4>
 800dcdc:	786c      	ldrb	r4, [r5, #1]
 800dcde:	2610      	movs	r6, #16
 800dce0:	3502      	adds	r5, #2
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	bf14      	ite	ne
 800dce6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dcea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dcee:	2700      	movs	r7, #0
 800dcf0:	fbb1 fcf6 	udiv	ip, r1, r6
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dcfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dcfe:	2b09      	cmp	r3, #9
 800dd00:	d817      	bhi.n	800dd32 <_strtol_l.isra.0+0x9a>
 800dd02:	461c      	mov	r4, r3
 800dd04:	42a6      	cmp	r6, r4
 800dd06:	dd23      	ble.n	800dd50 <_strtol_l.isra.0+0xb8>
 800dd08:	1c7b      	adds	r3, r7, #1
 800dd0a:	d007      	beq.n	800dd1c <_strtol_l.isra.0+0x84>
 800dd0c:	4584      	cmp	ip, r0
 800dd0e:	d31c      	bcc.n	800dd4a <_strtol_l.isra.0+0xb2>
 800dd10:	d101      	bne.n	800dd16 <_strtol_l.isra.0+0x7e>
 800dd12:	45a6      	cmp	lr, r4
 800dd14:	db19      	blt.n	800dd4a <_strtol_l.isra.0+0xb2>
 800dd16:	fb00 4006 	mla	r0, r0, r6, r4
 800dd1a:	2701      	movs	r7, #1
 800dd1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd20:	e7eb      	b.n	800dcfa <_strtol_l.isra.0+0x62>
 800dd22:	462f      	mov	r7, r5
 800dd24:	e7bf      	b.n	800dca6 <_strtol_l.isra.0+0xe>
 800dd26:	2c2b      	cmp	r4, #43	; 0x2b
 800dd28:	bf04      	itt	eq
 800dd2a:	1cbd      	addeq	r5, r7, #2
 800dd2c:	787c      	ldrbeq	r4, [r7, #1]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	e7c9      	b.n	800dcc6 <_strtol_l.isra.0+0x2e>
 800dd32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dd36:	2b19      	cmp	r3, #25
 800dd38:	d801      	bhi.n	800dd3e <_strtol_l.isra.0+0xa6>
 800dd3a:	3c37      	subs	r4, #55	; 0x37
 800dd3c:	e7e2      	b.n	800dd04 <_strtol_l.isra.0+0x6c>
 800dd3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dd42:	2b19      	cmp	r3, #25
 800dd44:	d804      	bhi.n	800dd50 <_strtol_l.isra.0+0xb8>
 800dd46:	3c57      	subs	r4, #87	; 0x57
 800dd48:	e7dc      	b.n	800dd04 <_strtol_l.isra.0+0x6c>
 800dd4a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd4e:	e7e5      	b.n	800dd1c <_strtol_l.isra.0+0x84>
 800dd50:	1c7b      	adds	r3, r7, #1
 800dd52:	d108      	bne.n	800dd66 <_strtol_l.isra.0+0xce>
 800dd54:	2322      	movs	r3, #34	; 0x22
 800dd56:	f8c8 3000 	str.w	r3, [r8]
 800dd5a:	4608      	mov	r0, r1
 800dd5c:	f1ba 0f00 	cmp.w	sl, #0
 800dd60:	d107      	bne.n	800dd72 <_strtol_l.isra.0+0xda>
 800dd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd66:	b102      	cbz	r2, 800dd6a <_strtol_l.isra.0+0xd2>
 800dd68:	4240      	negs	r0, r0
 800dd6a:	f1ba 0f00 	cmp.w	sl, #0
 800dd6e:	d0f8      	beq.n	800dd62 <_strtol_l.isra.0+0xca>
 800dd70:	b10f      	cbz	r7, 800dd76 <_strtol_l.isra.0+0xde>
 800dd72:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd76:	f8ca 9000 	str.w	r9, [sl]
 800dd7a:	e7f2      	b.n	800dd62 <_strtol_l.isra.0+0xca>
 800dd7c:	2430      	movs	r4, #48	; 0x30
 800dd7e:	2e00      	cmp	r6, #0
 800dd80:	d1af      	bne.n	800dce2 <_strtol_l.isra.0+0x4a>
 800dd82:	2608      	movs	r6, #8
 800dd84:	e7ad      	b.n	800dce2 <_strtol_l.isra.0+0x4a>
 800dd86:	2c30      	cmp	r4, #48	; 0x30
 800dd88:	d0a3      	beq.n	800dcd2 <_strtol_l.isra.0+0x3a>
 800dd8a:	260a      	movs	r6, #10
 800dd8c:	e7a9      	b.n	800dce2 <_strtol_l.isra.0+0x4a>
	...

0800dd90 <_strtol_r>:
 800dd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd92:	4c06      	ldr	r4, [pc, #24]	; (800ddac <_strtol_r+0x1c>)
 800dd94:	4d06      	ldr	r5, [pc, #24]	; (800ddb0 <_strtol_r+0x20>)
 800dd96:	6824      	ldr	r4, [r4, #0]
 800dd98:	6a24      	ldr	r4, [r4, #32]
 800dd9a:	2c00      	cmp	r4, #0
 800dd9c:	bf08      	it	eq
 800dd9e:	462c      	moveq	r4, r5
 800dda0:	9400      	str	r4, [sp, #0]
 800dda2:	f7ff ff79 	bl	800dc98 <_strtol_l.isra.0>
 800dda6:	b003      	add	sp, #12
 800dda8:	bd30      	pop	{r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	200002cc 	.word	0x200002cc
 800ddb0:	20000330 	.word	0x20000330

0800ddb4 <quorem>:
 800ddb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	6903      	ldr	r3, [r0, #16]
 800ddba:	690c      	ldr	r4, [r1, #16]
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	f2c0 8082 	blt.w	800dec8 <quorem+0x114>
 800ddc4:	3c01      	subs	r4, #1
 800ddc6:	f101 0714 	add.w	r7, r1, #20
 800ddca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ddce:	f100 0614 	add.w	r6, r0, #20
 800ddd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ddd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ddda:	eb06 030c 	add.w	r3, r6, ip
 800ddde:	3501      	adds	r5, #1
 800dde0:	eb07 090c 	add.w	r9, r7, ip
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	fbb0 f5f5 	udiv	r5, r0, r5
 800ddea:	b395      	cbz	r5, 800de52 <quorem+0x9e>
 800ddec:	f04f 0a00 	mov.w	sl, #0
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	46b6      	mov	lr, r6
 800ddf4:	46d3      	mov	fp, sl
 800ddf6:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddfa:	b293      	uxth	r3, r2
 800ddfc:	fb05 a303 	mla	r3, r5, r3, sl
 800de00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de04:	b29b      	uxth	r3, r3
 800de06:	ebab 0303 	sub.w	r3, fp, r3
 800de0a:	0c12      	lsrs	r2, r2, #16
 800de0c:	f8de b000 	ldr.w	fp, [lr]
 800de10:	fb05 a202 	mla	r2, r5, r2, sl
 800de14:	fa13 f38b 	uxtah	r3, r3, fp
 800de18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800de1c:	fa1f fb82 	uxth.w	fp, r2
 800de20:	f8de 2000 	ldr.w	r2, [lr]
 800de24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800de28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de32:	4581      	cmp	r9, r0
 800de34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800de38:	f84e 3b04 	str.w	r3, [lr], #4
 800de3c:	d2db      	bcs.n	800ddf6 <quorem+0x42>
 800de3e:	f856 300c 	ldr.w	r3, [r6, ip]
 800de42:	b933      	cbnz	r3, 800de52 <quorem+0x9e>
 800de44:	9b01      	ldr	r3, [sp, #4]
 800de46:	3b04      	subs	r3, #4
 800de48:	429e      	cmp	r6, r3
 800de4a:	461a      	mov	r2, r3
 800de4c:	d330      	bcc.n	800deb0 <quorem+0xfc>
 800de4e:	f8c8 4010 	str.w	r4, [r8, #16]
 800de52:	4640      	mov	r0, r8
 800de54:	f001 fc66 	bl	800f724 <__mcmp>
 800de58:	2800      	cmp	r0, #0
 800de5a:	db25      	blt.n	800dea8 <quorem+0xf4>
 800de5c:	3501      	adds	r5, #1
 800de5e:	4630      	mov	r0, r6
 800de60:	f04f 0c00 	mov.w	ip, #0
 800de64:	f857 2b04 	ldr.w	r2, [r7], #4
 800de68:	f8d0 e000 	ldr.w	lr, [r0]
 800de6c:	b293      	uxth	r3, r2
 800de6e:	ebac 0303 	sub.w	r3, ip, r3
 800de72:	0c12      	lsrs	r2, r2, #16
 800de74:	fa13 f38e 	uxtah	r3, r3, lr
 800de78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de80:	b29b      	uxth	r3, r3
 800de82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de86:	45b9      	cmp	r9, r7
 800de88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de8c:	f840 3b04 	str.w	r3, [r0], #4
 800de90:	d2e8      	bcs.n	800de64 <quorem+0xb0>
 800de92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800de96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800de9a:	b92a      	cbnz	r2, 800dea8 <quorem+0xf4>
 800de9c:	3b04      	subs	r3, #4
 800de9e:	429e      	cmp	r6, r3
 800dea0:	461a      	mov	r2, r3
 800dea2:	d30b      	bcc.n	800debc <quorem+0x108>
 800dea4:	f8c8 4010 	str.w	r4, [r8, #16]
 800dea8:	4628      	mov	r0, r5
 800deaa:	b003      	add	sp, #12
 800deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb0:	6812      	ldr	r2, [r2, #0]
 800deb2:	3b04      	subs	r3, #4
 800deb4:	2a00      	cmp	r2, #0
 800deb6:	d1ca      	bne.n	800de4e <quorem+0x9a>
 800deb8:	3c01      	subs	r4, #1
 800deba:	e7c5      	b.n	800de48 <quorem+0x94>
 800debc:	6812      	ldr	r2, [r2, #0]
 800debe:	3b04      	subs	r3, #4
 800dec0:	2a00      	cmp	r2, #0
 800dec2:	d1ef      	bne.n	800dea4 <quorem+0xf0>
 800dec4:	3c01      	subs	r4, #1
 800dec6:	e7ea      	b.n	800de9e <quorem+0xea>
 800dec8:	2000      	movs	r0, #0
 800deca:	e7ee      	b.n	800deaa <quorem+0xf6>
 800decc:	0000      	movs	r0, r0
	...

0800ded0 <_dtoa_r>:
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	ec57 6b10 	vmov	r6, r7, d0
 800ded8:	b097      	sub	sp, #92	; 0x5c
 800deda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dedc:	9106      	str	r1, [sp, #24]
 800dede:	4604      	mov	r4, r0
 800dee0:	920b      	str	r2, [sp, #44]	; 0x2c
 800dee2:	9312      	str	r3, [sp, #72]	; 0x48
 800dee4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dee8:	e9cd 6700 	strd	r6, r7, [sp]
 800deec:	b93d      	cbnz	r5, 800defe <_dtoa_r+0x2e>
 800deee:	2010      	movs	r0, #16
 800def0:	f001 f9aa 	bl	800f248 <malloc>
 800def4:	6260      	str	r0, [r4, #36]	; 0x24
 800def6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800defa:	6005      	str	r5, [r0, #0]
 800defc:	60c5      	str	r5, [r0, #12]
 800defe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df00:	6819      	ldr	r1, [r3, #0]
 800df02:	b151      	cbz	r1, 800df1a <_dtoa_r+0x4a>
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	604a      	str	r2, [r1, #4]
 800df08:	2301      	movs	r3, #1
 800df0a:	4093      	lsls	r3, r2
 800df0c:	608b      	str	r3, [r1, #8]
 800df0e:	4620      	mov	r0, r4
 800df10:	f001 f9e8 	bl	800f2e4 <_Bfree>
 800df14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df16:	2200      	movs	r2, #0
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	1e3b      	subs	r3, r7, #0
 800df1c:	bfbb      	ittet	lt
 800df1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df22:	9301      	strlt	r3, [sp, #4]
 800df24:	2300      	movge	r3, #0
 800df26:	2201      	movlt	r2, #1
 800df28:	bfac      	ite	ge
 800df2a:	f8c8 3000 	strge.w	r3, [r8]
 800df2e:	f8c8 2000 	strlt.w	r2, [r8]
 800df32:	4baf      	ldr	r3, [pc, #700]	; (800e1f0 <_dtoa_r+0x320>)
 800df34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800df38:	ea33 0308 	bics.w	r3, r3, r8
 800df3c:	d114      	bne.n	800df68 <_dtoa_r+0x98>
 800df3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df40:	f242 730f 	movw	r3, #9999	; 0x270f
 800df44:	6013      	str	r3, [r2, #0]
 800df46:	9b00      	ldr	r3, [sp, #0]
 800df48:	b923      	cbnz	r3, 800df54 <_dtoa_r+0x84>
 800df4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800df4e:	2800      	cmp	r0, #0
 800df50:	f000 8542 	beq.w	800e9d8 <_dtoa_r+0xb08>
 800df54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e204 <_dtoa_r+0x334>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 8544 	beq.w	800e9e8 <_dtoa_r+0xb18>
 800df60:	f10b 0303 	add.w	r3, fp, #3
 800df64:	f000 bd3e 	b.w	800e9e4 <_dtoa_r+0xb14>
 800df68:	e9dd 6700 	ldrd	r6, r7, [sp]
 800df6c:	2200      	movs	r2, #0
 800df6e:	2300      	movs	r3, #0
 800df70:	4630      	mov	r0, r6
 800df72:	4639      	mov	r1, r7
 800df74:	f7f2 fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800df78:	4681      	mov	r9, r0
 800df7a:	b168      	cbz	r0, 800df98 <_dtoa_r+0xc8>
 800df7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df7e:	2301      	movs	r3, #1
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 8524 	beq.w	800e9d2 <_dtoa_r+0xb02>
 800df8a:	4b9a      	ldr	r3, [pc, #616]	; (800e1f4 <_dtoa_r+0x324>)
 800df8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df8e:	f103 3bff 	add.w	fp, r3, #4294967295
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	f000 bd28 	b.w	800e9e8 <_dtoa_r+0xb18>
 800df98:	aa14      	add	r2, sp, #80	; 0x50
 800df9a:	a915      	add	r1, sp, #84	; 0x54
 800df9c:	ec47 6b10 	vmov	d0, r6, r7
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f001 fcad 	bl	800f900 <__d2b>
 800dfa6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dfaa:	9004      	str	r0, [sp, #16]
 800dfac:	2d00      	cmp	r5, #0
 800dfae:	d07c      	beq.n	800e0aa <_dtoa_r+0x1da>
 800dfb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dfb8:	46b2      	mov	sl, r6
 800dfba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800dfbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	4b8b      	ldr	r3, [pc, #556]	; (800e1f8 <_dtoa_r+0x328>)
 800dfca:	4650      	mov	r0, sl
 800dfcc:	4659      	mov	r1, fp
 800dfce:	f7f2 f963 	bl	8000298 <__aeabi_dsub>
 800dfd2:	a381      	add	r3, pc, #516	; (adr r3, 800e1d8 <_dtoa_r+0x308>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 fb16 	bl	8000608 <__aeabi_dmul>
 800dfdc:	a380      	add	r3, pc, #512	; (adr r3, 800e1e0 <_dtoa_r+0x310>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f7f2 f95b 	bl	800029c <__adddf3>
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	4628      	mov	r0, r5
 800dfea:	460f      	mov	r7, r1
 800dfec:	f7f2 faa2 	bl	8000534 <__aeabi_i2d>
 800dff0:	a37d      	add	r3, pc, #500	; (adr r3, 800e1e8 <_dtoa_r+0x318>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	f7f2 fb07 	bl	8000608 <__aeabi_dmul>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4630      	mov	r0, r6
 800e000:	4639      	mov	r1, r7
 800e002:	f7f2 f94b 	bl	800029c <__adddf3>
 800e006:	4606      	mov	r6, r0
 800e008:	460f      	mov	r7, r1
 800e00a:	f7f2 fdad 	bl	8000b68 <__aeabi_d2iz>
 800e00e:	2200      	movs	r2, #0
 800e010:	4682      	mov	sl, r0
 800e012:	2300      	movs	r3, #0
 800e014:	4630      	mov	r0, r6
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 fd68 	bl	8000aec <__aeabi_dcmplt>
 800e01c:	b148      	cbz	r0, 800e032 <_dtoa_r+0x162>
 800e01e:	4650      	mov	r0, sl
 800e020:	f7f2 fa88 	bl	8000534 <__aeabi_i2d>
 800e024:	4632      	mov	r2, r6
 800e026:	463b      	mov	r3, r7
 800e028:	f7f2 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800e02c:	b908      	cbnz	r0, 800e032 <_dtoa_r+0x162>
 800e02e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e032:	f1ba 0f16 	cmp.w	sl, #22
 800e036:	d859      	bhi.n	800e0ec <_dtoa_r+0x21c>
 800e038:	4970      	ldr	r1, [pc, #448]	; (800e1fc <_dtoa_r+0x32c>)
 800e03a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e042:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e046:	f7f2 fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d050      	beq.n	800e0f0 <_dtoa_r+0x220>
 800e04e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e052:	2300      	movs	r3, #0
 800e054:	930f      	str	r3, [sp, #60]	; 0x3c
 800e056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e058:	1b5d      	subs	r5, r3, r5
 800e05a:	f1b5 0801 	subs.w	r8, r5, #1
 800e05e:	bf49      	itett	mi
 800e060:	f1c5 0301 	rsbmi	r3, r5, #1
 800e064:	2300      	movpl	r3, #0
 800e066:	9305      	strmi	r3, [sp, #20]
 800e068:	f04f 0800 	movmi.w	r8, #0
 800e06c:	bf58      	it	pl
 800e06e:	9305      	strpl	r3, [sp, #20]
 800e070:	f1ba 0f00 	cmp.w	sl, #0
 800e074:	db3e      	blt.n	800e0f4 <_dtoa_r+0x224>
 800e076:	2300      	movs	r3, #0
 800e078:	44d0      	add	r8, sl
 800e07a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e07e:	9307      	str	r3, [sp, #28]
 800e080:	9b06      	ldr	r3, [sp, #24]
 800e082:	2b09      	cmp	r3, #9
 800e084:	f200 8090 	bhi.w	800e1a8 <_dtoa_r+0x2d8>
 800e088:	2b05      	cmp	r3, #5
 800e08a:	bfc4      	itt	gt
 800e08c:	3b04      	subgt	r3, #4
 800e08e:	9306      	strgt	r3, [sp, #24]
 800e090:	9b06      	ldr	r3, [sp, #24]
 800e092:	f1a3 0302 	sub.w	r3, r3, #2
 800e096:	bfcc      	ite	gt
 800e098:	2500      	movgt	r5, #0
 800e09a:	2501      	movle	r5, #1
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	f200 808f 	bhi.w	800e1c0 <_dtoa_r+0x2f0>
 800e0a2:	e8df f003 	tbb	[pc, r3]
 800e0a6:	7f7d      	.short	0x7f7d
 800e0a8:	7131      	.short	0x7131
 800e0aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e0ae:	441d      	add	r5, r3
 800e0b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e0b4:	2820      	cmp	r0, #32
 800e0b6:	dd13      	ble.n	800e0e0 <_dtoa_r+0x210>
 800e0b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e0bc:	9b00      	ldr	r3, [sp, #0]
 800e0be:	fa08 f800 	lsl.w	r8, r8, r0
 800e0c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e0c6:	fa23 f000 	lsr.w	r0, r3, r0
 800e0ca:	ea48 0000 	orr.w	r0, r8, r0
 800e0ce:	f7f2 fa21 	bl	8000514 <__aeabi_ui2d>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e0da:	3d01      	subs	r5, #1
 800e0dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e0de:	e772      	b.n	800dfc6 <_dtoa_r+0xf6>
 800e0e0:	9b00      	ldr	r3, [sp, #0]
 800e0e2:	f1c0 0020 	rsb	r0, r0, #32
 800e0e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e0ea:	e7f0      	b.n	800e0ce <_dtoa_r+0x1fe>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e7b1      	b.n	800e054 <_dtoa_r+0x184>
 800e0f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800e0f2:	e7b0      	b.n	800e056 <_dtoa_r+0x186>
 800e0f4:	9b05      	ldr	r3, [sp, #20]
 800e0f6:	eba3 030a 	sub.w	r3, r3, sl
 800e0fa:	9305      	str	r3, [sp, #20]
 800e0fc:	f1ca 0300 	rsb	r3, sl, #0
 800e100:	9307      	str	r3, [sp, #28]
 800e102:	2300      	movs	r3, #0
 800e104:	930e      	str	r3, [sp, #56]	; 0x38
 800e106:	e7bb      	b.n	800e080 <_dtoa_r+0x1b0>
 800e108:	2301      	movs	r3, #1
 800e10a:	930a      	str	r3, [sp, #40]	; 0x28
 800e10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dd59      	ble.n	800e1c6 <_dtoa_r+0x2f6>
 800e112:	9302      	str	r3, [sp, #8]
 800e114:	4699      	mov	r9, r3
 800e116:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e118:	2200      	movs	r2, #0
 800e11a:	6072      	str	r2, [r6, #4]
 800e11c:	2204      	movs	r2, #4
 800e11e:	f102 0014 	add.w	r0, r2, #20
 800e122:	4298      	cmp	r0, r3
 800e124:	6871      	ldr	r1, [r6, #4]
 800e126:	d953      	bls.n	800e1d0 <_dtoa_r+0x300>
 800e128:	4620      	mov	r0, r4
 800e12a:	f001 f8a7 	bl	800f27c <_Balloc>
 800e12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e130:	6030      	str	r0, [r6, #0]
 800e132:	f1b9 0f0e 	cmp.w	r9, #14
 800e136:	f8d3 b000 	ldr.w	fp, [r3]
 800e13a:	f200 80e6 	bhi.w	800e30a <_dtoa_r+0x43a>
 800e13e:	2d00      	cmp	r5, #0
 800e140:	f000 80e3 	beq.w	800e30a <_dtoa_r+0x43a>
 800e144:	ed9d 7b00 	vldr	d7, [sp]
 800e148:	f1ba 0f00 	cmp.w	sl, #0
 800e14c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e150:	dd74      	ble.n	800e23c <_dtoa_r+0x36c>
 800e152:	4a2a      	ldr	r2, [pc, #168]	; (800e1fc <_dtoa_r+0x32c>)
 800e154:	f00a 030f 	and.w	r3, sl, #15
 800e158:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e15c:	ed93 7b00 	vldr	d7, [r3]
 800e160:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e164:	06f0      	lsls	r0, r6, #27
 800e166:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e16a:	d565      	bpl.n	800e238 <_dtoa_r+0x368>
 800e16c:	4b24      	ldr	r3, [pc, #144]	; (800e200 <_dtoa_r+0x330>)
 800e16e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e172:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e176:	f7f2 fb71 	bl	800085c <__aeabi_ddiv>
 800e17a:	e9cd 0100 	strd	r0, r1, [sp]
 800e17e:	f006 060f 	and.w	r6, r6, #15
 800e182:	2503      	movs	r5, #3
 800e184:	4f1e      	ldr	r7, [pc, #120]	; (800e200 <_dtoa_r+0x330>)
 800e186:	e04c      	b.n	800e222 <_dtoa_r+0x352>
 800e188:	2301      	movs	r3, #1
 800e18a:	930a      	str	r3, [sp, #40]	; 0x28
 800e18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e18e:	4453      	add	r3, sl
 800e190:	f103 0901 	add.w	r9, r3, #1
 800e194:	9302      	str	r3, [sp, #8]
 800e196:	464b      	mov	r3, r9
 800e198:	2b01      	cmp	r3, #1
 800e19a:	bfb8      	it	lt
 800e19c:	2301      	movlt	r3, #1
 800e19e:	e7ba      	b.n	800e116 <_dtoa_r+0x246>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	e7b2      	b.n	800e10a <_dtoa_r+0x23a>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e7f0      	b.n	800e18a <_dtoa_r+0x2ba>
 800e1a8:	2501      	movs	r5, #1
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	9306      	str	r3, [sp, #24]
 800e1ae:	950a      	str	r5, [sp, #40]	; 0x28
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	9302      	str	r3, [sp, #8]
 800e1b6:	4699      	mov	r9, r3
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2312      	movs	r3, #18
 800e1bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800e1be:	e7aa      	b.n	800e116 <_dtoa_r+0x246>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c4:	e7f4      	b.n	800e1b0 <_dtoa_r+0x2e0>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	4699      	mov	r9, r3
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	e7f5      	b.n	800e1bc <_dtoa_r+0x2ec>
 800e1d0:	3101      	adds	r1, #1
 800e1d2:	6071      	str	r1, [r6, #4]
 800e1d4:	0052      	lsls	r2, r2, #1
 800e1d6:	e7a2      	b.n	800e11e <_dtoa_r+0x24e>
 800e1d8:	636f4361 	.word	0x636f4361
 800e1dc:	3fd287a7 	.word	0x3fd287a7
 800e1e0:	8b60c8b3 	.word	0x8b60c8b3
 800e1e4:	3fc68a28 	.word	0x3fc68a28
 800e1e8:	509f79fb 	.word	0x509f79fb
 800e1ec:	3fd34413 	.word	0x3fd34413
 800e1f0:	7ff00000 	.word	0x7ff00000
 800e1f4:	080107bd 	.word	0x080107bd
 800e1f8:	3ff80000 	.word	0x3ff80000
 800e1fc:	080108e0 	.word	0x080108e0
 800e200:	080108b8 	.word	0x080108b8
 800e204:	08010841 	.word	0x08010841
 800e208:	07f1      	lsls	r1, r6, #31
 800e20a:	d508      	bpl.n	800e21e <_dtoa_r+0x34e>
 800e20c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e214:	f7f2 f9f8 	bl	8000608 <__aeabi_dmul>
 800e218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e21c:	3501      	adds	r5, #1
 800e21e:	1076      	asrs	r6, r6, #1
 800e220:	3708      	adds	r7, #8
 800e222:	2e00      	cmp	r6, #0
 800e224:	d1f0      	bne.n	800e208 <_dtoa_r+0x338>
 800e226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e22a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e22e:	f7f2 fb15 	bl	800085c <__aeabi_ddiv>
 800e232:	e9cd 0100 	strd	r0, r1, [sp]
 800e236:	e01a      	b.n	800e26e <_dtoa_r+0x39e>
 800e238:	2502      	movs	r5, #2
 800e23a:	e7a3      	b.n	800e184 <_dtoa_r+0x2b4>
 800e23c:	f000 80a0 	beq.w	800e380 <_dtoa_r+0x4b0>
 800e240:	f1ca 0600 	rsb	r6, sl, #0
 800e244:	4b9f      	ldr	r3, [pc, #636]	; (800e4c4 <_dtoa_r+0x5f4>)
 800e246:	4fa0      	ldr	r7, [pc, #640]	; (800e4c8 <_dtoa_r+0x5f8>)
 800e248:	f006 020f 	and.w	r2, r6, #15
 800e24c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e258:	f7f2 f9d6 	bl	8000608 <__aeabi_dmul>
 800e25c:	e9cd 0100 	strd	r0, r1, [sp]
 800e260:	1136      	asrs	r6, r6, #4
 800e262:	2300      	movs	r3, #0
 800e264:	2502      	movs	r5, #2
 800e266:	2e00      	cmp	r6, #0
 800e268:	d17f      	bne.n	800e36a <_dtoa_r+0x49a>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1e1      	bne.n	800e232 <_dtoa_r+0x362>
 800e26e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 8087 	beq.w	800e384 <_dtoa_r+0x4b4>
 800e276:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e27a:	2200      	movs	r2, #0
 800e27c:	4b93      	ldr	r3, [pc, #588]	; (800e4cc <_dtoa_r+0x5fc>)
 800e27e:	4630      	mov	r0, r6
 800e280:	4639      	mov	r1, r7
 800e282:	f7f2 fc33 	bl	8000aec <__aeabi_dcmplt>
 800e286:	2800      	cmp	r0, #0
 800e288:	d07c      	beq.n	800e384 <_dtoa_r+0x4b4>
 800e28a:	f1b9 0f00 	cmp.w	r9, #0
 800e28e:	d079      	beq.n	800e384 <_dtoa_r+0x4b4>
 800e290:	9b02      	ldr	r3, [sp, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	dd35      	ble.n	800e302 <_dtoa_r+0x432>
 800e296:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e29a:	9308      	str	r3, [sp, #32]
 800e29c:	4639      	mov	r1, r7
 800e29e:	2200      	movs	r2, #0
 800e2a0:	4b8b      	ldr	r3, [pc, #556]	; (800e4d0 <_dtoa_r+0x600>)
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7f2 f9b0 	bl	8000608 <__aeabi_dmul>
 800e2a8:	e9cd 0100 	strd	r0, r1, [sp]
 800e2ac:	9f02      	ldr	r7, [sp, #8]
 800e2ae:	3501      	adds	r5, #1
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f7f2 f93f 	bl	8000534 <__aeabi_i2d>
 800e2b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ba:	f7f2 f9a5 	bl	8000608 <__aeabi_dmul>
 800e2be:	2200      	movs	r2, #0
 800e2c0:	4b84      	ldr	r3, [pc, #528]	; (800e4d4 <_dtoa_r+0x604>)
 800e2c2:	f7f1 ffeb 	bl	800029c <__adddf3>
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e2cc:	2f00      	cmp	r7, #0
 800e2ce:	d15d      	bne.n	800e38c <_dtoa_r+0x4bc>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	4b81      	ldr	r3, [pc, #516]	; (800e4d8 <_dtoa_r+0x608>)
 800e2d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2d8:	f7f1 ffde 	bl	8000298 <__aeabi_dsub>
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4633      	mov	r3, r6
 800e2e0:	e9cd 0100 	strd	r0, r1, [sp]
 800e2e4:	f7f2 fc20 	bl	8000b28 <__aeabi_dcmpgt>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	f040 8288 	bne.w	800e7fe <_dtoa_r+0x92e>
 800e2ee:	462a      	mov	r2, r5
 800e2f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2f8:	f7f2 fbf8 	bl	8000aec <__aeabi_dcmplt>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	f040 827c 	bne.w	800e7fa <_dtoa_r+0x92a>
 800e302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e306:	e9cd 2300 	strd	r2, r3, [sp]
 800e30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f2c0 8150 	blt.w	800e5b2 <_dtoa_r+0x6e2>
 800e312:	f1ba 0f0e 	cmp.w	sl, #14
 800e316:	f300 814c 	bgt.w	800e5b2 <_dtoa_r+0x6e2>
 800e31a:	4b6a      	ldr	r3, [pc, #424]	; (800e4c4 <_dtoa_r+0x5f4>)
 800e31c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e320:	ed93 7b00 	vldr	d7, [r3]
 800e324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e326:	2b00      	cmp	r3, #0
 800e328:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e32c:	f280 80d8 	bge.w	800e4e0 <_dtoa_r+0x610>
 800e330:	f1b9 0f00 	cmp.w	r9, #0
 800e334:	f300 80d4 	bgt.w	800e4e0 <_dtoa_r+0x610>
 800e338:	f040 825e 	bne.w	800e7f8 <_dtoa_r+0x928>
 800e33c:	2200      	movs	r2, #0
 800e33e:	4b66      	ldr	r3, [pc, #408]	; (800e4d8 <_dtoa_r+0x608>)
 800e340:	ec51 0b17 	vmov	r0, r1, d7
 800e344:	f7f2 f960 	bl	8000608 <__aeabi_dmul>
 800e348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e34c:	f7f2 fbe2 	bl	8000b14 <__aeabi_dcmpge>
 800e350:	464f      	mov	r7, r9
 800e352:	464e      	mov	r6, r9
 800e354:	2800      	cmp	r0, #0
 800e356:	f040 8234 	bne.w	800e7c2 <_dtoa_r+0x8f2>
 800e35a:	2331      	movs	r3, #49	; 0x31
 800e35c:	f10b 0501 	add.w	r5, fp, #1
 800e360:	f88b 3000 	strb.w	r3, [fp]
 800e364:	f10a 0a01 	add.w	sl, sl, #1
 800e368:	e22f      	b.n	800e7ca <_dtoa_r+0x8fa>
 800e36a:	07f2      	lsls	r2, r6, #31
 800e36c:	d505      	bpl.n	800e37a <_dtoa_r+0x4aa>
 800e36e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e372:	f7f2 f949 	bl	8000608 <__aeabi_dmul>
 800e376:	3501      	adds	r5, #1
 800e378:	2301      	movs	r3, #1
 800e37a:	1076      	asrs	r6, r6, #1
 800e37c:	3708      	adds	r7, #8
 800e37e:	e772      	b.n	800e266 <_dtoa_r+0x396>
 800e380:	2502      	movs	r5, #2
 800e382:	e774      	b.n	800e26e <_dtoa_r+0x39e>
 800e384:	f8cd a020 	str.w	sl, [sp, #32]
 800e388:	464f      	mov	r7, r9
 800e38a:	e791      	b.n	800e2b0 <_dtoa_r+0x3e0>
 800e38c:	4b4d      	ldr	r3, [pc, #308]	; (800e4c4 <_dtoa_r+0x5f4>)
 800e38e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e392:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d047      	beq.n	800e42c <_dtoa_r+0x55c>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	494e      	ldr	r1, [pc, #312]	; (800e4dc <_dtoa_r+0x60c>)
 800e3a4:	f7f2 fa5a 	bl	800085c <__aeabi_ddiv>
 800e3a8:	462a      	mov	r2, r5
 800e3aa:	4633      	mov	r3, r6
 800e3ac:	f7f1 ff74 	bl	8000298 <__aeabi_dsub>
 800e3b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e3b4:	465d      	mov	r5, fp
 800e3b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3ba:	f7f2 fbd5 	bl	8000b68 <__aeabi_d2iz>
 800e3be:	4606      	mov	r6, r0
 800e3c0:	f7f2 f8b8 	bl	8000534 <__aeabi_i2d>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3cc:	f7f1 ff64 	bl	8000298 <__aeabi_dsub>
 800e3d0:	3630      	adds	r6, #48	; 0x30
 800e3d2:	f805 6b01 	strb.w	r6, [r5], #1
 800e3d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e3da:	e9cd 0100 	strd	r0, r1, [sp]
 800e3de:	f7f2 fb85 	bl	8000aec <__aeabi_dcmplt>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d163      	bne.n	800e4ae <_dtoa_r+0x5de>
 800e3e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	4937      	ldr	r1, [pc, #220]	; (800e4cc <_dtoa_r+0x5fc>)
 800e3ee:	f7f1 ff53 	bl	8000298 <__aeabi_dsub>
 800e3f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e3f6:	f7f2 fb79 	bl	8000aec <__aeabi_dcmplt>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	f040 80b7 	bne.w	800e56e <_dtoa_r+0x69e>
 800e400:	eba5 030b 	sub.w	r3, r5, fp
 800e404:	429f      	cmp	r7, r3
 800e406:	f77f af7c 	ble.w	800e302 <_dtoa_r+0x432>
 800e40a:	2200      	movs	r2, #0
 800e40c:	4b30      	ldr	r3, [pc, #192]	; (800e4d0 <_dtoa_r+0x600>)
 800e40e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e412:	f7f2 f8f9 	bl	8000608 <__aeabi_dmul>
 800e416:	2200      	movs	r2, #0
 800e418:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e41c:	4b2c      	ldr	r3, [pc, #176]	; (800e4d0 <_dtoa_r+0x600>)
 800e41e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e422:	f7f2 f8f1 	bl	8000608 <__aeabi_dmul>
 800e426:	e9cd 0100 	strd	r0, r1, [sp]
 800e42a:	e7c4      	b.n	800e3b6 <_dtoa_r+0x4e6>
 800e42c:	462a      	mov	r2, r5
 800e42e:	4633      	mov	r3, r6
 800e430:	f7f2 f8ea 	bl	8000608 <__aeabi_dmul>
 800e434:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e438:	eb0b 0507 	add.w	r5, fp, r7
 800e43c:	465e      	mov	r6, fp
 800e43e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e442:	f7f2 fb91 	bl	8000b68 <__aeabi_d2iz>
 800e446:	4607      	mov	r7, r0
 800e448:	f7f2 f874 	bl	8000534 <__aeabi_i2d>
 800e44c:	3730      	adds	r7, #48	; 0x30
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e456:	f7f1 ff1f 	bl	8000298 <__aeabi_dsub>
 800e45a:	f806 7b01 	strb.w	r7, [r6], #1
 800e45e:	42ae      	cmp	r6, r5
 800e460:	e9cd 0100 	strd	r0, r1, [sp]
 800e464:	f04f 0200 	mov.w	r2, #0
 800e468:	d126      	bne.n	800e4b8 <_dtoa_r+0x5e8>
 800e46a:	4b1c      	ldr	r3, [pc, #112]	; (800e4dc <_dtoa_r+0x60c>)
 800e46c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e470:	f7f1 ff14 	bl	800029c <__adddf3>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e47c:	f7f2 fb54 	bl	8000b28 <__aeabi_dcmpgt>
 800e480:	2800      	cmp	r0, #0
 800e482:	d174      	bne.n	800e56e <_dtoa_r+0x69e>
 800e484:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e488:	2000      	movs	r0, #0
 800e48a:	4914      	ldr	r1, [pc, #80]	; (800e4dc <_dtoa_r+0x60c>)
 800e48c:	f7f1 ff04 	bl	8000298 <__aeabi_dsub>
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e498:	f7f2 fb28 	bl	8000aec <__aeabi_dcmplt>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	f43f af30 	beq.w	800e302 <_dtoa_r+0x432>
 800e4a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4a6:	2b30      	cmp	r3, #48	; 0x30
 800e4a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e4ac:	d002      	beq.n	800e4b4 <_dtoa_r+0x5e4>
 800e4ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e4b2:	e04a      	b.n	800e54a <_dtoa_r+0x67a>
 800e4b4:	4615      	mov	r5, r2
 800e4b6:	e7f4      	b.n	800e4a2 <_dtoa_r+0x5d2>
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <_dtoa_r+0x600>)
 800e4ba:	f7f2 f8a5 	bl	8000608 <__aeabi_dmul>
 800e4be:	e9cd 0100 	strd	r0, r1, [sp]
 800e4c2:	e7bc      	b.n	800e43e <_dtoa_r+0x56e>
 800e4c4:	080108e0 	.word	0x080108e0
 800e4c8:	080108b8 	.word	0x080108b8
 800e4cc:	3ff00000 	.word	0x3ff00000
 800e4d0:	40240000 	.word	0x40240000
 800e4d4:	401c0000 	.word	0x401c0000
 800e4d8:	40140000 	.word	0x40140000
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e4e4:	465d      	mov	r5, fp
 800e4e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	f7f2 f9b5 	bl	800085c <__aeabi_ddiv>
 800e4f2:	f7f2 fb39 	bl	8000b68 <__aeabi_d2iz>
 800e4f6:	4680      	mov	r8, r0
 800e4f8:	f7f2 f81c 	bl	8000534 <__aeabi_i2d>
 800e4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e500:	f7f2 f882 	bl	8000608 <__aeabi_dmul>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	4630      	mov	r0, r6
 800e50a:	4639      	mov	r1, r7
 800e50c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e510:	f7f1 fec2 	bl	8000298 <__aeabi_dsub>
 800e514:	f805 6b01 	strb.w	r6, [r5], #1
 800e518:	eba5 060b 	sub.w	r6, r5, fp
 800e51c:	45b1      	cmp	r9, r6
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	d139      	bne.n	800e598 <_dtoa_r+0x6c8>
 800e524:	f7f1 feba 	bl	800029c <__adddf3>
 800e528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e52c:	4606      	mov	r6, r0
 800e52e:	460f      	mov	r7, r1
 800e530:	f7f2 fafa 	bl	8000b28 <__aeabi_dcmpgt>
 800e534:	b9c8      	cbnz	r0, 800e56a <_dtoa_r+0x69a>
 800e536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e53a:	4630      	mov	r0, r6
 800e53c:	4639      	mov	r1, r7
 800e53e:	f7f2 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e542:	b110      	cbz	r0, 800e54a <_dtoa_r+0x67a>
 800e544:	f018 0f01 	tst.w	r8, #1
 800e548:	d10f      	bne.n	800e56a <_dtoa_r+0x69a>
 800e54a:	9904      	ldr	r1, [sp, #16]
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 fec9 	bl	800f2e4 <_Bfree>
 800e552:	2300      	movs	r3, #0
 800e554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e556:	702b      	strb	r3, [r5, #0]
 800e558:	f10a 0301 	add.w	r3, sl, #1
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 8241 	beq.w	800e9e8 <_dtoa_r+0xb18>
 800e566:	601d      	str	r5, [r3, #0]
 800e568:	e23e      	b.n	800e9e8 <_dtoa_r+0xb18>
 800e56a:	f8cd a020 	str.w	sl, [sp, #32]
 800e56e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e572:	2a39      	cmp	r2, #57	; 0x39
 800e574:	f105 33ff 	add.w	r3, r5, #4294967295
 800e578:	d108      	bne.n	800e58c <_dtoa_r+0x6bc>
 800e57a:	459b      	cmp	fp, r3
 800e57c:	d10a      	bne.n	800e594 <_dtoa_r+0x6c4>
 800e57e:	9b08      	ldr	r3, [sp, #32]
 800e580:	3301      	adds	r3, #1
 800e582:	9308      	str	r3, [sp, #32]
 800e584:	2330      	movs	r3, #48	; 0x30
 800e586:	f88b 3000 	strb.w	r3, [fp]
 800e58a:	465b      	mov	r3, fp
 800e58c:	781a      	ldrb	r2, [r3, #0]
 800e58e:	3201      	adds	r2, #1
 800e590:	701a      	strb	r2, [r3, #0]
 800e592:	e78c      	b.n	800e4ae <_dtoa_r+0x5de>
 800e594:	461d      	mov	r5, r3
 800e596:	e7ea      	b.n	800e56e <_dtoa_r+0x69e>
 800e598:	2200      	movs	r2, #0
 800e59a:	4b9b      	ldr	r3, [pc, #620]	; (800e808 <_dtoa_r+0x938>)
 800e59c:	f7f2 f834 	bl	8000608 <__aeabi_dmul>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	460f      	mov	r7, r1
 800e5a8:	f7f2 fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d09a      	beq.n	800e4e6 <_dtoa_r+0x616>
 800e5b0:	e7cb      	b.n	800e54a <_dtoa_r+0x67a>
 800e5b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5b4:	2a00      	cmp	r2, #0
 800e5b6:	f000 808b 	beq.w	800e6d0 <_dtoa_r+0x800>
 800e5ba:	9a06      	ldr	r2, [sp, #24]
 800e5bc:	2a01      	cmp	r2, #1
 800e5be:	dc6e      	bgt.n	800e69e <_dtoa_r+0x7ce>
 800e5c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5c2:	2a00      	cmp	r2, #0
 800e5c4:	d067      	beq.n	800e696 <_dtoa_r+0x7c6>
 800e5c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5ca:	9f07      	ldr	r7, [sp, #28]
 800e5cc:	9d05      	ldr	r5, [sp, #20]
 800e5ce:	9a05      	ldr	r2, [sp, #20]
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	441a      	add	r2, r3
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	9205      	str	r2, [sp, #20]
 800e5d8:	4498      	add	r8, r3
 800e5da:	f000 ff61 	bl	800f4a0 <__i2b>
 800e5de:	4606      	mov	r6, r0
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	dd0c      	ble.n	800e5fe <_dtoa_r+0x72e>
 800e5e4:	f1b8 0f00 	cmp.w	r8, #0
 800e5e8:	dd09      	ble.n	800e5fe <_dtoa_r+0x72e>
 800e5ea:	4545      	cmp	r5, r8
 800e5ec:	9a05      	ldr	r2, [sp, #20]
 800e5ee:	462b      	mov	r3, r5
 800e5f0:	bfa8      	it	ge
 800e5f2:	4643      	movge	r3, r8
 800e5f4:	1ad2      	subs	r2, r2, r3
 800e5f6:	9205      	str	r2, [sp, #20]
 800e5f8:	1aed      	subs	r5, r5, r3
 800e5fa:	eba8 0803 	sub.w	r8, r8, r3
 800e5fe:	9b07      	ldr	r3, [sp, #28]
 800e600:	b1eb      	cbz	r3, 800e63e <_dtoa_r+0x76e>
 800e602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e604:	2b00      	cmp	r3, #0
 800e606:	d067      	beq.n	800e6d8 <_dtoa_r+0x808>
 800e608:	b18f      	cbz	r7, 800e62e <_dtoa_r+0x75e>
 800e60a:	4631      	mov	r1, r6
 800e60c:	463a      	mov	r2, r7
 800e60e:	4620      	mov	r0, r4
 800e610:	f000 ffe6 	bl	800f5e0 <__pow5mult>
 800e614:	9a04      	ldr	r2, [sp, #16]
 800e616:	4601      	mov	r1, r0
 800e618:	4606      	mov	r6, r0
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 ff49 	bl	800f4b2 <__multiply>
 800e620:	9904      	ldr	r1, [sp, #16]
 800e622:	9008      	str	r0, [sp, #32]
 800e624:	4620      	mov	r0, r4
 800e626:	f000 fe5d 	bl	800f2e4 <_Bfree>
 800e62a:	9b08      	ldr	r3, [sp, #32]
 800e62c:	9304      	str	r3, [sp, #16]
 800e62e:	9b07      	ldr	r3, [sp, #28]
 800e630:	1bda      	subs	r2, r3, r7
 800e632:	d004      	beq.n	800e63e <_dtoa_r+0x76e>
 800e634:	9904      	ldr	r1, [sp, #16]
 800e636:	4620      	mov	r0, r4
 800e638:	f000 ffd2 	bl	800f5e0 <__pow5mult>
 800e63c:	9004      	str	r0, [sp, #16]
 800e63e:	2101      	movs	r1, #1
 800e640:	4620      	mov	r0, r4
 800e642:	f000 ff2d 	bl	800f4a0 <__i2b>
 800e646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e648:	4607      	mov	r7, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 81d0 	beq.w	800e9f0 <_dtoa_r+0xb20>
 800e650:	461a      	mov	r2, r3
 800e652:	4601      	mov	r1, r0
 800e654:	4620      	mov	r0, r4
 800e656:	f000 ffc3 	bl	800f5e0 <__pow5mult>
 800e65a:	9b06      	ldr	r3, [sp, #24]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	4607      	mov	r7, r0
 800e660:	dc40      	bgt.n	800e6e4 <_dtoa_r+0x814>
 800e662:	9b00      	ldr	r3, [sp, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d139      	bne.n	800e6dc <_dtoa_r+0x80c>
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d136      	bne.n	800e6e0 <_dtoa_r+0x810>
 800e672:	9b01      	ldr	r3, [sp, #4]
 800e674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e678:	0d1b      	lsrs	r3, r3, #20
 800e67a:	051b      	lsls	r3, r3, #20
 800e67c:	b12b      	cbz	r3, 800e68a <_dtoa_r+0x7ba>
 800e67e:	9b05      	ldr	r3, [sp, #20]
 800e680:	3301      	adds	r3, #1
 800e682:	9305      	str	r3, [sp, #20]
 800e684:	f108 0801 	add.w	r8, r8, #1
 800e688:	2301      	movs	r3, #1
 800e68a:	9307      	str	r3, [sp, #28]
 800e68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d12a      	bne.n	800e6e8 <_dtoa_r+0x818>
 800e692:	2001      	movs	r0, #1
 800e694:	e030      	b.n	800e6f8 <_dtoa_r+0x828>
 800e696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e698:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e69c:	e795      	b.n	800e5ca <_dtoa_r+0x6fa>
 800e69e:	9b07      	ldr	r3, [sp, #28]
 800e6a0:	f109 37ff 	add.w	r7, r9, #4294967295
 800e6a4:	42bb      	cmp	r3, r7
 800e6a6:	bfbf      	itttt	lt
 800e6a8:	9b07      	ldrlt	r3, [sp, #28]
 800e6aa:	9707      	strlt	r7, [sp, #28]
 800e6ac:	1afa      	sublt	r2, r7, r3
 800e6ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e6b0:	bfbb      	ittet	lt
 800e6b2:	189b      	addlt	r3, r3, r2
 800e6b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e6b6:	1bdf      	subge	r7, r3, r7
 800e6b8:	2700      	movlt	r7, #0
 800e6ba:	f1b9 0f00 	cmp.w	r9, #0
 800e6be:	bfb5      	itete	lt
 800e6c0:	9b05      	ldrlt	r3, [sp, #20]
 800e6c2:	9d05      	ldrge	r5, [sp, #20]
 800e6c4:	eba3 0509 	sublt.w	r5, r3, r9
 800e6c8:	464b      	movge	r3, r9
 800e6ca:	bfb8      	it	lt
 800e6cc:	2300      	movlt	r3, #0
 800e6ce:	e77e      	b.n	800e5ce <_dtoa_r+0x6fe>
 800e6d0:	9f07      	ldr	r7, [sp, #28]
 800e6d2:	9d05      	ldr	r5, [sp, #20]
 800e6d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e6d6:	e783      	b.n	800e5e0 <_dtoa_r+0x710>
 800e6d8:	9a07      	ldr	r2, [sp, #28]
 800e6da:	e7ab      	b.n	800e634 <_dtoa_r+0x764>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	e7d4      	b.n	800e68a <_dtoa_r+0x7ba>
 800e6e0:	9b00      	ldr	r3, [sp, #0]
 800e6e2:	e7d2      	b.n	800e68a <_dtoa_r+0x7ba>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	9307      	str	r3, [sp, #28]
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e6ee:	6918      	ldr	r0, [r3, #16]
 800e6f0:	f000 fe88 	bl	800f404 <__hi0bits>
 800e6f4:	f1c0 0020 	rsb	r0, r0, #32
 800e6f8:	4440      	add	r0, r8
 800e6fa:	f010 001f 	ands.w	r0, r0, #31
 800e6fe:	d047      	beq.n	800e790 <_dtoa_r+0x8c0>
 800e700:	f1c0 0320 	rsb	r3, r0, #32
 800e704:	2b04      	cmp	r3, #4
 800e706:	dd3b      	ble.n	800e780 <_dtoa_r+0x8b0>
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	f1c0 001c 	rsb	r0, r0, #28
 800e70e:	4403      	add	r3, r0
 800e710:	9305      	str	r3, [sp, #20]
 800e712:	4405      	add	r5, r0
 800e714:	4480      	add	r8, r0
 800e716:	9b05      	ldr	r3, [sp, #20]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	dd05      	ble.n	800e728 <_dtoa_r+0x858>
 800e71c:	461a      	mov	r2, r3
 800e71e:	9904      	ldr	r1, [sp, #16]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 ffab 	bl	800f67c <__lshift>
 800e726:	9004      	str	r0, [sp, #16]
 800e728:	f1b8 0f00 	cmp.w	r8, #0
 800e72c:	dd05      	ble.n	800e73a <_dtoa_r+0x86a>
 800e72e:	4639      	mov	r1, r7
 800e730:	4642      	mov	r2, r8
 800e732:	4620      	mov	r0, r4
 800e734:	f000 ffa2 	bl	800f67c <__lshift>
 800e738:	4607      	mov	r7, r0
 800e73a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e73c:	b353      	cbz	r3, 800e794 <_dtoa_r+0x8c4>
 800e73e:	4639      	mov	r1, r7
 800e740:	9804      	ldr	r0, [sp, #16]
 800e742:	f000 ffef 	bl	800f724 <__mcmp>
 800e746:	2800      	cmp	r0, #0
 800e748:	da24      	bge.n	800e794 <_dtoa_r+0x8c4>
 800e74a:	2300      	movs	r3, #0
 800e74c:	220a      	movs	r2, #10
 800e74e:	9904      	ldr	r1, [sp, #16]
 800e750:	4620      	mov	r0, r4
 800e752:	f000 fdde 	bl	800f312 <__multadd>
 800e756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e758:	9004      	str	r0, [sp, #16]
 800e75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f000 814d 	beq.w	800e9fe <_dtoa_r+0xb2e>
 800e764:	2300      	movs	r3, #0
 800e766:	4631      	mov	r1, r6
 800e768:	220a      	movs	r2, #10
 800e76a:	4620      	mov	r0, r4
 800e76c:	f000 fdd1 	bl	800f312 <__multadd>
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	4606      	mov	r6, r0
 800e776:	dc4f      	bgt.n	800e818 <_dtoa_r+0x948>
 800e778:	9b06      	ldr	r3, [sp, #24]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	dd4c      	ble.n	800e818 <_dtoa_r+0x948>
 800e77e:	e011      	b.n	800e7a4 <_dtoa_r+0x8d4>
 800e780:	d0c9      	beq.n	800e716 <_dtoa_r+0x846>
 800e782:	9a05      	ldr	r2, [sp, #20]
 800e784:	331c      	adds	r3, #28
 800e786:	441a      	add	r2, r3
 800e788:	9205      	str	r2, [sp, #20]
 800e78a:	441d      	add	r5, r3
 800e78c:	4498      	add	r8, r3
 800e78e:	e7c2      	b.n	800e716 <_dtoa_r+0x846>
 800e790:	4603      	mov	r3, r0
 800e792:	e7f6      	b.n	800e782 <_dtoa_r+0x8b2>
 800e794:	f1b9 0f00 	cmp.w	r9, #0
 800e798:	dc38      	bgt.n	800e80c <_dtoa_r+0x93c>
 800e79a:	9b06      	ldr	r3, [sp, #24]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	dd35      	ble.n	800e80c <_dtoa_r+0x93c>
 800e7a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e7a4:	9b02      	ldr	r3, [sp, #8]
 800e7a6:	b963      	cbnz	r3, 800e7c2 <_dtoa_r+0x8f2>
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	2205      	movs	r2, #5
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 fdb0 	bl	800f312 <__multadd>
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	9804      	ldr	r0, [sp, #16]
 800e7b8:	f000 ffb4 	bl	800f724 <__mcmp>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f73f adcc 	bgt.w	800e35a <_dtoa_r+0x48a>
 800e7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7c4:	465d      	mov	r5, fp
 800e7c6:	ea6f 0a03 	mvn.w	sl, r3
 800e7ca:	f04f 0900 	mov.w	r9, #0
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 fd87 	bl	800f2e4 <_Bfree>
 800e7d6:	2e00      	cmp	r6, #0
 800e7d8:	f43f aeb7 	beq.w	800e54a <_dtoa_r+0x67a>
 800e7dc:	f1b9 0f00 	cmp.w	r9, #0
 800e7e0:	d005      	beq.n	800e7ee <_dtoa_r+0x91e>
 800e7e2:	45b1      	cmp	r9, r6
 800e7e4:	d003      	beq.n	800e7ee <_dtoa_r+0x91e>
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f000 fd7b 	bl	800f2e4 <_Bfree>
 800e7ee:	4631      	mov	r1, r6
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fd77 	bl	800f2e4 <_Bfree>
 800e7f6:	e6a8      	b.n	800e54a <_dtoa_r+0x67a>
 800e7f8:	2700      	movs	r7, #0
 800e7fa:	463e      	mov	r6, r7
 800e7fc:	e7e1      	b.n	800e7c2 <_dtoa_r+0x8f2>
 800e7fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e802:	463e      	mov	r6, r7
 800e804:	e5a9      	b.n	800e35a <_dtoa_r+0x48a>
 800e806:	bf00      	nop
 800e808:	40240000 	.word	0x40240000
 800e80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e80e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	f000 80fa 	beq.w	800ea0c <_dtoa_r+0xb3c>
 800e818:	2d00      	cmp	r5, #0
 800e81a:	dd05      	ble.n	800e828 <_dtoa_r+0x958>
 800e81c:	4631      	mov	r1, r6
 800e81e:	462a      	mov	r2, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f000 ff2b 	bl	800f67c <__lshift>
 800e826:	4606      	mov	r6, r0
 800e828:	9b07      	ldr	r3, [sp, #28]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d04c      	beq.n	800e8c8 <_dtoa_r+0x9f8>
 800e82e:	6871      	ldr	r1, [r6, #4]
 800e830:	4620      	mov	r0, r4
 800e832:	f000 fd23 	bl	800f27c <_Balloc>
 800e836:	6932      	ldr	r2, [r6, #16]
 800e838:	3202      	adds	r2, #2
 800e83a:	4605      	mov	r5, r0
 800e83c:	0092      	lsls	r2, r2, #2
 800e83e:	f106 010c 	add.w	r1, r6, #12
 800e842:	300c      	adds	r0, #12
 800e844:	f7fd fd6e 	bl	800c324 <memcpy>
 800e848:	2201      	movs	r2, #1
 800e84a:	4629      	mov	r1, r5
 800e84c:	4620      	mov	r0, r4
 800e84e:	f000 ff15 	bl	800f67c <__lshift>
 800e852:	9b00      	ldr	r3, [sp, #0]
 800e854:	f8cd b014 	str.w	fp, [sp, #20]
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	46b1      	mov	r9, r6
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	4606      	mov	r6, r0
 800e862:	4639      	mov	r1, r7
 800e864:	9804      	ldr	r0, [sp, #16]
 800e866:	f7ff faa5 	bl	800ddb4 <quorem>
 800e86a:	4649      	mov	r1, r9
 800e86c:	4605      	mov	r5, r0
 800e86e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e872:	9804      	ldr	r0, [sp, #16]
 800e874:	f000 ff56 	bl	800f724 <__mcmp>
 800e878:	4632      	mov	r2, r6
 800e87a:	9000      	str	r0, [sp, #0]
 800e87c:	4639      	mov	r1, r7
 800e87e:	4620      	mov	r0, r4
 800e880:	f000 ff6a 	bl	800f758 <__mdiff>
 800e884:	68c3      	ldr	r3, [r0, #12]
 800e886:	4602      	mov	r2, r0
 800e888:	bb03      	cbnz	r3, 800e8cc <_dtoa_r+0x9fc>
 800e88a:	4601      	mov	r1, r0
 800e88c:	9008      	str	r0, [sp, #32]
 800e88e:	9804      	ldr	r0, [sp, #16]
 800e890:	f000 ff48 	bl	800f724 <__mcmp>
 800e894:	9a08      	ldr	r2, [sp, #32]
 800e896:	4603      	mov	r3, r0
 800e898:	4611      	mov	r1, r2
 800e89a:	4620      	mov	r0, r4
 800e89c:	9308      	str	r3, [sp, #32]
 800e89e:	f000 fd21 	bl	800f2e4 <_Bfree>
 800e8a2:	9b08      	ldr	r3, [sp, #32]
 800e8a4:	b9a3      	cbnz	r3, 800e8d0 <_dtoa_r+0xa00>
 800e8a6:	9a06      	ldr	r2, [sp, #24]
 800e8a8:	b992      	cbnz	r2, 800e8d0 <_dtoa_r+0xa00>
 800e8aa:	9a07      	ldr	r2, [sp, #28]
 800e8ac:	b982      	cbnz	r2, 800e8d0 <_dtoa_r+0xa00>
 800e8ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e8b2:	d029      	beq.n	800e908 <_dtoa_r+0xa38>
 800e8b4:	9b00      	ldr	r3, [sp, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dd01      	ble.n	800e8be <_dtoa_r+0x9ee>
 800e8ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e8be:	9b05      	ldr	r3, [sp, #20]
 800e8c0:	1c5d      	adds	r5, r3, #1
 800e8c2:	f883 8000 	strb.w	r8, [r3]
 800e8c6:	e782      	b.n	800e7ce <_dtoa_r+0x8fe>
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	e7c2      	b.n	800e852 <_dtoa_r+0x982>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e7e3      	b.n	800e898 <_dtoa_r+0x9c8>
 800e8d0:	9a00      	ldr	r2, [sp, #0]
 800e8d2:	2a00      	cmp	r2, #0
 800e8d4:	db04      	blt.n	800e8e0 <_dtoa_r+0xa10>
 800e8d6:	d125      	bne.n	800e924 <_dtoa_r+0xa54>
 800e8d8:	9a06      	ldr	r2, [sp, #24]
 800e8da:	bb1a      	cbnz	r2, 800e924 <_dtoa_r+0xa54>
 800e8dc:	9a07      	ldr	r2, [sp, #28]
 800e8de:	bb0a      	cbnz	r2, 800e924 <_dtoa_r+0xa54>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	ddec      	ble.n	800e8be <_dtoa_r+0x9ee>
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	9904      	ldr	r1, [sp, #16]
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	f000 fec7 	bl	800f67c <__lshift>
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	9004      	str	r0, [sp, #16]
 800e8f2:	f000 ff17 	bl	800f724 <__mcmp>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	dc03      	bgt.n	800e902 <_dtoa_r+0xa32>
 800e8fa:	d1e0      	bne.n	800e8be <_dtoa_r+0x9ee>
 800e8fc:	f018 0f01 	tst.w	r8, #1
 800e900:	d0dd      	beq.n	800e8be <_dtoa_r+0x9ee>
 800e902:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e906:	d1d8      	bne.n	800e8ba <_dtoa_r+0x9ea>
 800e908:	9b05      	ldr	r3, [sp, #20]
 800e90a:	9a05      	ldr	r2, [sp, #20]
 800e90c:	1c5d      	adds	r5, r3, #1
 800e90e:	2339      	movs	r3, #57	; 0x39
 800e910:	7013      	strb	r3, [r2, #0]
 800e912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e916:	2b39      	cmp	r3, #57	; 0x39
 800e918:	f105 32ff 	add.w	r2, r5, #4294967295
 800e91c:	d04f      	beq.n	800e9be <_dtoa_r+0xaee>
 800e91e:	3301      	adds	r3, #1
 800e920:	7013      	strb	r3, [r2, #0]
 800e922:	e754      	b.n	800e7ce <_dtoa_r+0x8fe>
 800e924:	9a05      	ldr	r2, [sp, #20]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f102 0501 	add.w	r5, r2, #1
 800e92c:	dd06      	ble.n	800e93c <_dtoa_r+0xa6c>
 800e92e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e932:	d0e9      	beq.n	800e908 <_dtoa_r+0xa38>
 800e934:	f108 0801 	add.w	r8, r8, #1
 800e938:	9b05      	ldr	r3, [sp, #20]
 800e93a:	e7c2      	b.n	800e8c2 <_dtoa_r+0x9f2>
 800e93c:	9a02      	ldr	r2, [sp, #8]
 800e93e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e942:	eba5 030b 	sub.w	r3, r5, fp
 800e946:	4293      	cmp	r3, r2
 800e948:	d021      	beq.n	800e98e <_dtoa_r+0xabe>
 800e94a:	2300      	movs	r3, #0
 800e94c:	220a      	movs	r2, #10
 800e94e:	9904      	ldr	r1, [sp, #16]
 800e950:	4620      	mov	r0, r4
 800e952:	f000 fcde 	bl	800f312 <__multadd>
 800e956:	45b1      	cmp	r9, r6
 800e958:	9004      	str	r0, [sp, #16]
 800e95a:	f04f 0300 	mov.w	r3, #0
 800e95e:	f04f 020a 	mov.w	r2, #10
 800e962:	4649      	mov	r1, r9
 800e964:	4620      	mov	r0, r4
 800e966:	d105      	bne.n	800e974 <_dtoa_r+0xaa4>
 800e968:	f000 fcd3 	bl	800f312 <__multadd>
 800e96c:	4681      	mov	r9, r0
 800e96e:	4606      	mov	r6, r0
 800e970:	9505      	str	r5, [sp, #20]
 800e972:	e776      	b.n	800e862 <_dtoa_r+0x992>
 800e974:	f000 fccd 	bl	800f312 <__multadd>
 800e978:	4631      	mov	r1, r6
 800e97a:	4681      	mov	r9, r0
 800e97c:	2300      	movs	r3, #0
 800e97e:	220a      	movs	r2, #10
 800e980:	4620      	mov	r0, r4
 800e982:	f000 fcc6 	bl	800f312 <__multadd>
 800e986:	4606      	mov	r6, r0
 800e988:	e7f2      	b.n	800e970 <_dtoa_r+0xaa0>
 800e98a:	f04f 0900 	mov.w	r9, #0
 800e98e:	2201      	movs	r2, #1
 800e990:	9904      	ldr	r1, [sp, #16]
 800e992:	4620      	mov	r0, r4
 800e994:	f000 fe72 	bl	800f67c <__lshift>
 800e998:	4639      	mov	r1, r7
 800e99a:	9004      	str	r0, [sp, #16]
 800e99c:	f000 fec2 	bl	800f724 <__mcmp>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	dcb6      	bgt.n	800e912 <_dtoa_r+0xa42>
 800e9a4:	d102      	bne.n	800e9ac <_dtoa_r+0xadc>
 800e9a6:	f018 0f01 	tst.w	r8, #1
 800e9aa:	d1b2      	bne.n	800e912 <_dtoa_r+0xa42>
 800e9ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9b0:	2b30      	cmp	r3, #48	; 0x30
 800e9b2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e9b6:	f47f af0a 	bne.w	800e7ce <_dtoa_r+0x8fe>
 800e9ba:	4615      	mov	r5, r2
 800e9bc:	e7f6      	b.n	800e9ac <_dtoa_r+0xadc>
 800e9be:	4593      	cmp	fp, r2
 800e9c0:	d105      	bne.n	800e9ce <_dtoa_r+0xafe>
 800e9c2:	2331      	movs	r3, #49	; 0x31
 800e9c4:	f10a 0a01 	add.w	sl, sl, #1
 800e9c8:	f88b 3000 	strb.w	r3, [fp]
 800e9cc:	e6ff      	b.n	800e7ce <_dtoa_r+0x8fe>
 800e9ce:	4615      	mov	r5, r2
 800e9d0:	e79f      	b.n	800e912 <_dtoa_r+0xa42>
 800e9d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ea38 <_dtoa_r+0xb68>
 800e9d6:	e007      	b.n	800e9e8 <_dtoa_r+0xb18>
 800e9d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ea3c <_dtoa_r+0xb6c>
 800e9de:	b11b      	cbz	r3, 800e9e8 <_dtoa_r+0xb18>
 800e9e0:	f10b 0308 	add.w	r3, fp, #8
 800e9e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9e6:	6013      	str	r3, [r2, #0]
 800e9e8:	4658      	mov	r0, fp
 800e9ea:	b017      	add	sp, #92	; 0x5c
 800e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f0:	9b06      	ldr	r3, [sp, #24]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	f77f ae35 	ble.w	800e662 <_dtoa_r+0x792>
 800e9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9fa:	9307      	str	r3, [sp, #28]
 800e9fc:	e649      	b.n	800e692 <_dtoa_r+0x7c2>
 800e9fe:	9b02      	ldr	r3, [sp, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	dc03      	bgt.n	800ea0c <_dtoa_r+0xb3c>
 800ea04:	9b06      	ldr	r3, [sp, #24]
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	f73f aecc 	bgt.w	800e7a4 <_dtoa_r+0x8d4>
 800ea0c:	465d      	mov	r5, fp
 800ea0e:	4639      	mov	r1, r7
 800ea10:	9804      	ldr	r0, [sp, #16]
 800ea12:	f7ff f9cf 	bl	800ddb4 <quorem>
 800ea16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ea1a:	f805 8b01 	strb.w	r8, [r5], #1
 800ea1e:	9a02      	ldr	r2, [sp, #8]
 800ea20:	eba5 030b 	sub.w	r3, r5, fp
 800ea24:	429a      	cmp	r2, r3
 800ea26:	ddb0      	ble.n	800e98a <_dtoa_r+0xaba>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	220a      	movs	r2, #10
 800ea2c:	9904      	ldr	r1, [sp, #16]
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f000 fc6f 	bl	800f312 <__multadd>
 800ea34:	9004      	str	r0, [sp, #16]
 800ea36:	e7ea      	b.n	800ea0e <_dtoa_r+0xb3e>
 800ea38:	080107bc 	.word	0x080107bc
 800ea3c:	08010838 	.word	0x08010838

0800ea40 <std>:
 800ea40:	2300      	movs	r3, #0
 800ea42:	b510      	push	{r4, lr}
 800ea44:	4604      	mov	r4, r0
 800ea46:	e9c0 3300 	strd	r3, r3, [r0]
 800ea4a:	6083      	str	r3, [r0, #8]
 800ea4c:	8181      	strh	r1, [r0, #12]
 800ea4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ea50:	81c2      	strh	r2, [r0, #14]
 800ea52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea56:	6183      	str	r3, [r0, #24]
 800ea58:	4619      	mov	r1, r3
 800ea5a:	2208      	movs	r2, #8
 800ea5c:	305c      	adds	r0, #92	; 0x5c
 800ea5e:	f7fd fc6c 	bl	800c33a <memset>
 800ea62:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <std+0x38>)
 800ea64:	6263      	str	r3, [r4, #36]	; 0x24
 800ea66:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <std+0x3c>)
 800ea68:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea6a:	4b05      	ldr	r3, [pc, #20]	; (800ea80 <std+0x40>)
 800ea6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea6e:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <std+0x44>)
 800ea70:	6224      	str	r4, [r4, #32]
 800ea72:	6323      	str	r3, [r4, #48]	; 0x30
 800ea74:	bd10      	pop	{r4, pc}
 800ea76:	bf00      	nop
 800ea78:	0801012d 	.word	0x0801012d
 800ea7c:	0801014f 	.word	0x0801014f
 800ea80:	08010187 	.word	0x08010187
 800ea84:	080101ab 	.word	0x080101ab

0800ea88 <_cleanup_r>:
 800ea88:	4901      	ldr	r1, [pc, #4]	; (800ea90 <_cleanup_r+0x8>)
 800ea8a:	f000 b885 	b.w	800eb98 <_fwalk_reent>
 800ea8e:	bf00      	nop
 800ea90:	080104c5 	.word	0x080104c5

0800ea94 <__sfmoreglue>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	1e4a      	subs	r2, r1, #1
 800ea98:	2568      	movs	r5, #104	; 0x68
 800ea9a:	4355      	muls	r5, r2
 800ea9c:	460e      	mov	r6, r1
 800ea9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eaa2:	f001 f847 	bl	800fb34 <_malloc_r>
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	b140      	cbz	r0, 800eabc <__sfmoreglue+0x28>
 800eaaa:	2100      	movs	r1, #0
 800eaac:	e9c0 1600 	strd	r1, r6, [r0]
 800eab0:	300c      	adds	r0, #12
 800eab2:	60a0      	str	r0, [r4, #8]
 800eab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eab8:	f7fd fc3f 	bl	800c33a <memset>
 800eabc:	4620      	mov	r0, r4
 800eabe:	bd70      	pop	{r4, r5, r6, pc}

0800eac0 <__sinit>:
 800eac0:	6983      	ldr	r3, [r0, #24]
 800eac2:	b510      	push	{r4, lr}
 800eac4:	4604      	mov	r4, r0
 800eac6:	bb33      	cbnz	r3, 800eb16 <__sinit+0x56>
 800eac8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eacc:	6503      	str	r3, [r0, #80]	; 0x50
 800eace:	4b12      	ldr	r3, [pc, #72]	; (800eb18 <__sinit+0x58>)
 800ead0:	4a12      	ldr	r2, [pc, #72]	; (800eb1c <__sinit+0x5c>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	6282      	str	r2, [r0, #40]	; 0x28
 800ead6:	4298      	cmp	r0, r3
 800ead8:	bf04      	itt	eq
 800eada:	2301      	moveq	r3, #1
 800eadc:	6183      	streq	r3, [r0, #24]
 800eade:	f000 f81f 	bl	800eb20 <__sfp>
 800eae2:	6060      	str	r0, [r4, #4]
 800eae4:	4620      	mov	r0, r4
 800eae6:	f000 f81b 	bl	800eb20 <__sfp>
 800eaea:	60a0      	str	r0, [r4, #8]
 800eaec:	4620      	mov	r0, r4
 800eaee:	f000 f817 	bl	800eb20 <__sfp>
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	60e0      	str	r0, [r4, #12]
 800eaf6:	2104      	movs	r1, #4
 800eaf8:	6860      	ldr	r0, [r4, #4]
 800eafa:	f7ff ffa1 	bl	800ea40 <std>
 800eafe:	2201      	movs	r2, #1
 800eb00:	2109      	movs	r1, #9
 800eb02:	68a0      	ldr	r0, [r4, #8]
 800eb04:	f7ff ff9c 	bl	800ea40 <std>
 800eb08:	2202      	movs	r2, #2
 800eb0a:	2112      	movs	r1, #18
 800eb0c:	68e0      	ldr	r0, [r4, #12]
 800eb0e:	f7ff ff97 	bl	800ea40 <std>
 800eb12:	2301      	movs	r3, #1
 800eb14:	61a3      	str	r3, [r4, #24]
 800eb16:	bd10      	pop	{r4, pc}
 800eb18:	080107a8 	.word	0x080107a8
 800eb1c:	0800ea89 	.word	0x0800ea89

0800eb20 <__sfp>:
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	4b1b      	ldr	r3, [pc, #108]	; (800eb90 <__sfp+0x70>)
 800eb24:	681e      	ldr	r6, [r3, #0]
 800eb26:	69b3      	ldr	r3, [r6, #24]
 800eb28:	4607      	mov	r7, r0
 800eb2a:	b913      	cbnz	r3, 800eb32 <__sfp+0x12>
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff ffc7 	bl	800eac0 <__sinit>
 800eb32:	3648      	adds	r6, #72	; 0x48
 800eb34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	d503      	bpl.n	800eb44 <__sfp+0x24>
 800eb3c:	6833      	ldr	r3, [r6, #0]
 800eb3e:	b133      	cbz	r3, 800eb4e <__sfp+0x2e>
 800eb40:	6836      	ldr	r6, [r6, #0]
 800eb42:	e7f7      	b.n	800eb34 <__sfp+0x14>
 800eb44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb48:	b16d      	cbz	r5, 800eb66 <__sfp+0x46>
 800eb4a:	3468      	adds	r4, #104	; 0x68
 800eb4c:	e7f4      	b.n	800eb38 <__sfp+0x18>
 800eb4e:	2104      	movs	r1, #4
 800eb50:	4638      	mov	r0, r7
 800eb52:	f7ff ff9f 	bl	800ea94 <__sfmoreglue>
 800eb56:	6030      	str	r0, [r6, #0]
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d1f1      	bne.n	800eb40 <__sfp+0x20>
 800eb5c:	230c      	movs	r3, #12
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	4604      	mov	r4, r0
 800eb62:	4620      	mov	r0, r4
 800eb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <__sfp+0x74>)
 800eb68:	6665      	str	r5, [r4, #100]	; 0x64
 800eb6a:	e9c4 5500 	strd	r5, r5, [r4]
 800eb6e:	60a5      	str	r5, [r4, #8]
 800eb70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eb74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800eb78:	2208      	movs	r2, #8
 800eb7a:	4629      	mov	r1, r5
 800eb7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb80:	f7fd fbdb 	bl	800c33a <memset>
 800eb84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb8c:	e7e9      	b.n	800eb62 <__sfp+0x42>
 800eb8e:	bf00      	nop
 800eb90:	080107a8 	.word	0x080107a8
 800eb94:	ffff0001 	.word	0xffff0001

0800eb98 <_fwalk_reent>:
 800eb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb9c:	4680      	mov	r8, r0
 800eb9e:	4689      	mov	r9, r1
 800eba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eba4:	2600      	movs	r6, #0
 800eba6:	b914      	cbnz	r4, 800ebae <_fwalk_reent+0x16>
 800eba8:	4630      	mov	r0, r6
 800ebaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ebb2:	3f01      	subs	r7, #1
 800ebb4:	d501      	bpl.n	800ebba <_fwalk_reent+0x22>
 800ebb6:	6824      	ldr	r4, [r4, #0]
 800ebb8:	e7f5      	b.n	800eba6 <_fwalk_reent+0xe>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d907      	bls.n	800ebd0 <_fwalk_reent+0x38>
 800ebc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	d003      	beq.n	800ebd0 <_fwalk_reent+0x38>
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4640      	mov	r0, r8
 800ebcc:	47c8      	blx	r9
 800ebce:	4306      	orrs	r6, r0
 800ebd0:	3568      	adds	r5, #104	; 0x68
 800ebd2:	e7ee      	b.n	800ebb2 <_fwalk_reent+0x1a>

0800ebd4 <rshift>:
 800ebd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd6:	6906      	ldr	r6, [r0, #16]
 800ebd8:	114b      	asrs	r3, r1, #5
 800ebda:	429e      	cmp	r6, r3
 800ebdc:	f100 0414 	add.w	r4, r0, #20
 800ebe0:	dd30      	ble.n	800ec44 <rshift+0x70>
 800ebe2:	f011 011f 	ands.w	r1, r1, #31
 800ebe6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ebea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ebee:	d108      	bne.n	800ec02 <rshift+0x2e>
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	42b2      	cmp	r2, r6
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	d211      	bcs.n	800ec1c <rshift+0x48>
 800ebf8:	f852 3b04 	ldr.w	r3, [r2], #4
 800ebfc:	f841 3b04 	str.w	r3, [r1], #4
 800ec00:	e7f7      	b.n	800ebf2 <rshift+0x1e>
 800ec02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ec06:	f1c1 0c20 	rsb	ip, r1, #32
 800ec0a:	40cd      	lsrs	r5, r1
 800ec0c:	3204      	adds	r2, #4
 800ec0e:	4623      	mov	r3, r4
 800ec10:	42b2      	cmp	r2, r6
 800ec12:	4617      	mov	r7, r2
 800ec14:	d30c      	bcc.n	800ec30 <rshift+0x5c>
 800ec16:	601d      	str	r5, [r3, #0]
 800ec18:	b105      	cbz	r5, 800ec1c <rshift+0x48>
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	1b1a      	subs	r2, r3, r4
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec24:	bf08      	it	eq
 800ec26:	2300      	moveq	r3, #0
 800ec28:	6102      	str	r2, [r0, #16]
 800ec2a:	bf08      	it	eq
 800ec2c:	6143      	streq	r3, [r0, #20]
 800ec2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec30:	683f      	ldr	r7, [r7, #0]
 800ec32:	fa07 f70c 	lsl.w	r7, r7, ip
 800ec36:	433d      	orrs	r5, r7
 800ec38:	f843 5b04 	str.w	r5, [r3], #4
 800ec3c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ec40:	40cd      	lsrs	r5, r1
 800ec42:	e7e5      	b.n	800ec10 <rshift+0x3c>
 800ec44:	4623      	mov	r3, r4
 800ec46:	e7e9      	b.n	800ec1c <rshift+0x48>

0800ec48 <__hexdig_fun>:
 800ec48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d802      	bhi.n	800ec56 <__hexdig_fun+0xe>
 800ec50:	3820      	subs	r0, #32
 800ec52:	b2c0      	uxtb	r0, r0
 800ec54:	4770      	bx	lr
 800ec56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ec5a:	2b05      	cmp	r3, #5
 800ec5c:	d801      	bhi.n	800ec62 <__hexdig_fun+0x1a>
 800ec5e:	3847      	subs	r0, #71	; 0x47
 800ec60:	e7f7      	b.n	800ec52 <__hexdig_fun+0xa>
 800ec62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ec66:	2b05      	cmp	r3, #5
 800ec68:	d801      	bhi.n	800ec6e <__hexdig_fun+0x26>
 800ec6a:	3827      	subs	r0, #39	; 0x27
 800ec6c:	e7f1      	b.n	800ec52 <__hexdig_fun+0xa>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	4770      	bx	lr

0800ec72 <__gethex>:
 800ec72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec76:	b08b      	sub	sp, #44	; 0x2c
 800ec78:	468a      	mov	sl, r1
 800ec7a:	9002      	str	r0, [sp, #8]
 800ec7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ec7e:	9306      	str	r3, [sp, #24]
 800ec80:	4690      	mov	r8, r2
 800ec82:	f000 fad0 	bl	800f226 <__localeconv_l>
 800ec86:	6803      	ldr	r3, [r0, #0]
 800ec88:	9303      	str	r3, [sp, #12]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7f1 faa8 	bl	80001e0 <strlen>
 800ec90:	9b03      	ldr	r3, [sp, #12]
 800ec92:	9001      	str	r0, [sp, #4]
 800ec94:	4403      	add	r3, r0
 800ec96:	f04f 0b00 	mov.w	fp, #0
 800ec9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ec9e:	9307      	str	r3, [sp, #28]
 800eca0:	f8da 3000 	ldr.w	r3, [sl]
 800eca4:	3302      	adds	r3, #2
 800eca6:	461f      	mov	r7, r3
 800eca8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ecac:	2830      	cmp	r0, #48	; 0x30
 800ecae:	d06c      	beq.n	800ed8a <__gethex+0x118>
 800ecb0:	f7ff ffca 	bl	800ec48 <__hexdig_fun>
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d16a      	bne.n	800ed90 <__gethex+0x11e>
 800ecba:	9a01      	ldr	r2, [sp, #4]
 800ecbc:	9903      	ldr	r1, [sp, #12]
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f001 fa77 	bl	80101b2 <strncmp>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d166      	bne.n	800ed96 <__gethex+0x124>
 800ecc8:	9b01      	ldr	r3, [sp, #4]
 800ecca:	5cf8      	ldrb	r0, [r7, r3]
 800eccc:	18fe      	adds	r6, r7, r3
 800ecce:	f7ff ffbb 	bl	800ec48 <__hexdig_fun>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d062      	beq.n	800ed9c <__gethex+0x12a>
 800ecd6:	4633      	mov	r3, r6
 800ecd8:	7818      	ldrb	r0, [r3, #0]
 800ecda:	2830      	cmp	r0, #48	; 0x30
 800ecdc:	461f      	mov	r7, r3
 800ecde:	f103 0301 	add.w	r3, r3, #1
 800ece2:	d0f9      	beq.n	800ecd8 <__gethex+0x66>
 800ece4:	f7ff ffb0 	bl	800ec48 <__hexdig_fun>
 800ece8:	fab0 f580 	clz	r5, r0
 800ecec:	096d      	lsrs	r5, r5, #5
 800ecee:	4634      	mov	r4, r6
 800ecf0:	f04f 0b01 	mov.w	fp, #1
 800ecf4:	463a      	mov	r2, r7
 800ecf6:	4616      	mov	r6, r2
 800ecf8:	3201      	adds	r2, #1
 800ecfa:	7830      	ldrb	r0, [r6, #0]
 800ecfc:	f7ff ffa4 	bl	800ec48 <__hexdig_fun>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d1f8      	bne.n	800ecf6 <__gethex+0x84>
 800ed04:	9a01      	ldr	r2, [sp, #4]
 800ed06:	9903      	ldr	r1, [sp, #12]
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f001 fa52 	bl	80101b2 <strncmp>
 800ed0e:	b950      	cbnz	r0, 800ed26 <__gethex+0xb4>
 800ed10:	b954      	cbnz	r4, 800ed28 <__gethex+0xb6>
 800ed12:	9b01      	ldr	r3, [sp, #4]
 800ed14:	18f4      	adds	r4, r6, r3
 800ed16:	4622      	mov	r2, r4
 800ed18:	4616      	mov	r6, r2
 800ed1a:	3201      	adds	r2, #1
 800ed1c:	7830      	ldrb	r0, [r6, #0]
 800ed1e:	f7ff ff93 	bl	800ec48 <__hexdig_fun>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d1f8      	bne.n	800ed18 <__gethex+0xa6>
 800ed26:	b10c      	cbz	r4, 800ed2c <__gethex+0xba>
 800ed28:	1ba4      	subs	r4, r4, r6
 800ed2a:	00a4      	lsls	r4, r4, #2
 800ed2c:	7833      	ldrb	r3, [r6, #0]
 800ed2e:	2b50      	cmp	r3, #80	; 0x50
 800ed30:	d001      	beq.n	800ed36 <__gethex+0xc4>
 800ed32:	2b70      	cmp	r3, #112	; 0x70
 800ed34:	d140      	bne.n	800edb8 <__gethex+0x146>
 800ed36:	7873      	ldrb	r3, [r6, #1]
 800ed38:	2b2b      	cmp	r3, #43	; 0x2b
 800ed3a:	d031      	beq.n	800eda0 <__gethex+0x12e>
 800ed3c:	2b2d      	cmp	r3, #45	; 0x2d
 800ed3e:	d033      	beq.n	800eda8 <__gethex+0x136>
 800ed40:	1c71      	adds	r1, r6, #1
 800ed42:	f04f 0900 	mov.w	r9, #0
 800ed46:	7808      	ldrb	r0, [r1, #0]
 800ed48:	f7ff ff7e 	bl	800ec48 <__hexdig_fun>
 800ed4c:	1e43      	subs	r3, r0, #1
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b18      	cmp	r3, #24
 800ed52:	d831      	bhi.n	800edb8 <__gethex+0x146>
 800ed54:	f1a0 0210 	sub.w	r2, r0, #16
 800ed58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed5c:	f7ff ff74 	bl	800ec48 <__hexdig_fun>
 800ed60:	1e43      	subs	r3, r0, #1
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b18      	cmp	r3, #24
 800ed66:	d922      	bls.n	800edae <__gethex+0x13c>
 800ed68:	f1b9 0f00 	cmp.w	r9, #0
 800ed6c:	d000      	beq.n	800ed70 <__gethex+0xfe>
 800ed6e:	4252      	negs	r2, r2
 800ed70:	4414      	add	r4, r2
 800ed72:	f8ca 1000 	str.w	r1, [sl]
 800ed76:	b30d      	cbz	r5, 800edbc <__gethex+0x14a>
 800ed78:	f1bb 0f00 	cmp.w	fp, #0
 800ed7c:	bf0c      	ite	eq
 800ed7e:	2706      	moveq	r7, #6
 800ed80:	2700      	movne	r7, #0
 800ed82:	4638      	mov	r0, r7
 800ed84:	b00b      	add	sp, #44	; 0x2c
 800ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8a:	f10b 0b01 	add.w	fp, fp, #1
 800ed8e:	e78a      	b.n	800eca6 <__gethex+0x34>
 800ed90:	2500      	movs	r5, #0
 800ed92:	462c      	mov	r4, r5
 800ed94:	e7ae      	b.n	800ecf4 <__gethex+0x82>
 800ed96:	463e      	mov	r6, r7
 800ed98:	2501      	movs	r5, #1
 800ed9a:	e7c7      	b.n	800ed2c <__gethex+0xba>
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	e7fb      	b.n	800ed98 <__gethex+0x126>
 800eda0:	f04f 0900 	mov.w	r9, #0
 800eda4:	1cb1      	adds	r1, r6, #2
 800eda6:	e7ce      	b.n	800ed46 <__gethex+0xd4>
 800eda8:	f04f 0901 	mov.w	r9, #1
 800edac:	e7fa      	b.n	800eda4 <__gethex+0x132>
 800edae:	230a      	movs	r3, #10
 800edb0:	fb03 0202 	mla	r2, r3, r2, r0
 800edb4:	3a10      	subs	r2, #16
 800edb6:	e7cf      	b.n	800ed58 <__gethex+0xe6>
 800edb8:	4631      	mov	r1, r6
 800edba:	e7da      	b.n	800ed72 <__gethex+0x100>
 800edbc:	1bf3      	subs	r3, r6, r7
 800edbe:	3b01      	subs	r3, #1
 800edc0:	4629      	mov	r1, r5
 800edc2:	2b07      	cmp	r3, #7
 800edc4:	dc49      	bgt.n	800ee5a <__gethex+0x1e8>
 800edc6:	9802      	ldr	r0, [sp, #8]
 800edc8:	f000 fa58 	bl	800f27c <_Balloc>
 800edcc:	9b01      	ldr	r3, [sp, #4]
 800edce:	f100 0914 	add.w	r9, r0, #20
 800edd2:	f04f 0b00 	mov.w	fp, #0
 800edd6:	f1c3 0301 	rsb	r3, r3, #1
 800edda:	4605      	mov	r5, r0
 800eddc:	f8cd 9010 	str.w	r9, [sp, #16]
 800ede0:	46da      	mov	sl, fp
 800ede2:	9308      	str	r3, [sp, #32]
 800ede4:	42b7      	cmp	r7, r6
 800ede6:	d33b      	bcc.n	800ee60 <__gethex+0x1ee>
 800ede8:	9804      	ldr	r0, [sp, #16]
 800edea:	f840 ab04 	str.w	sl, [r0], #4
 800edee:	eba0 0009 	sub.w	r0, r0, r9
 800edf2:	1080      	asrs	r0, r0, #2
 800edf4:	6128      	str	r0, [r5, #16]
 800edf6:	0147      	lsls	r7, r0, #5
 800edf8:	4650      	mov	r0, sl
 800edfa:	f000 fb03 	bl	800f404 <__hi0bits>
 800edfe:	f8d8 6000 	ldr.w	r6, [r8]
 800ee02:	1a3f      	subs	r7, r7, r0
 800ee04:	42b7      	cmp	r7, r6
 800ee06:	dd64      	ble.n	800eed2 <__gethex+0x260>
 800ee08:	1bbf      	subs	r7, r7, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f000 fe13 	bl	800fa38 <__any_on>
 800ee12:	4682      	mov	sl, r0
 800ee14:	b178      	cbz	r0, 800ee36 <__gethex+0x1c4>
 800ee16:	1e7b      	subs	r3, r7, #1
 800ee18:	1159      	asrs	r1, r3, #5
 800ee1a:	f003 021f 	and.w	r2, r3, #31
 800ee1e:	f04f 0a01 	mov.w	sl, #1
 800ee22:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ee26:	fa0a f202 	lsl.w	r2, sl, r2
 800ee2a:	420a      	tst	r2, r1
 800ee2c:	d003      	beq.n	800ee36 <__gethex+0x1c4>
 800ee2e:	4553      	cmp	r3, sl
 800ee30:	dc46      	bgt.n	800eec0 <__gethex+0x24e>
 800ee32:	f04f 0a02 	mov.w	sl, #2
 800ee36:	4639      	mov	r1, r7
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f7ff fecb 	bl	800ebd4 <rshift>
 800ee3e:	443c      	add	r4, r7
 800ee40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee44:	42a3      	cmp	r3, r4
 800ee46:	da52      	bge.n	800eeee <__gethex+0x27c>
 800ee48:	4629      	mov	r1, r5
 800ee4a:	9802      	ldr	r0, [sp, #8]
 800ee4c:	f000 fa4a 	bl	800f2e4 <_Bfree>
 800ee50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee52:	2300      	movs	r3, #0
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	27a3      	movs	r7, #163	; 0xa3
 800ee58:	e793      	b.n	800ed82 <__gethex+0x110>
 800ee5a:	3101      	adds	r1, #1
 800ee5c:	105b      	asrs	r3, r3, #1
 800ee5e:	e7b0      	b.n	800edc2 <__gethex+0x150>
 800ee60:	1e73      	subs	r3, r6, #1
 800ee62:	9305      	str	r3, [sp, #20]
 800ee64:	9a07      	ldr	r2, [sp, #28]
 800ee66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d018      	beq.n	800eea0 <__gethex+0x22e>
 800ee6e:	f1bb 0f20 	cmp.w	fp, #32
 800ee72:	d107      	bne.n	800ee84 <__gethex+0x212>
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	f8c3 a000 	str.w	sl, [r3]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	f04f 0a00 	mov.w	sl, #0
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	46d3      	mov	fp, sl
 800ee84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ee88:	f7ff fede 	bl	800ec48 <__hexdig_fun>
 800ee8c:	f000 000f 	and.w	r0, r0, #15
 800ee90:	fa00 f00b 	lsl.w	r0, r0, fp
 800ee94:	ea4a 0a00 	orr.w	sl, sl, r0
 800ee98:	f10b 0b04 	add.w	fp, fp, #4
 800ee9c:	9b05      	ldr	r3, [sp, #20]
 800ee9e:	e00d      	b.n	800eebc <__gethex+0x24a>
 800eea0:	9b05      	ldr	r3, [sp, #20]
 800eea2:	9a08      	ldr	r2, [sp, #32]
 800eea4:	4413      	add	r3, r2
 800eea6:	42bb      	cmp	r3, r7
 800eea8:	d3e1      	bcc.n	800ee6e <__gethex+0x1fc>
 800eeaa:	4618      	mov	r0, r3
 800eeac:	9a01      	ldr	r2, [sp, #4]
 800eeae:	9903      	ldr	r1, [sp, #12]
 800eeb0:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb2:	f001 f97e 	bl	80101b2 <strncmp>
 800eeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d1d8      	bne.n	800ee6e <__gethex+0x1fc>
 800eebc:	461e      	mov	r6, r3
 800eebe:	e791      	b.n	800ede4 <__gethex+0x172>
 800eec0:	1eb9      	subs	r1, r7, #2
 800eec2:	4628      	mov	r0, r5
 800eec4:	f000 fdb8 	bl	800fa38 <__any_on>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d0b2      	beq.n	800ee32 <__gethex+0x1c0>
 800eecc:	f04f 0a03 	mov.w	sl, #3
 800eed0:	e7b1      	b.n	800ee36 <__gethex+0x1c4>
 800eed2:	da09      	bge.n	800eee8 <__gethex+0x276>
 800eed4:	1bf7      	subs	r7, r6, r7
 800eed6:	4629      	mov	r1, r5
 800eed8:	463a      	mov	r2, r7
 800eeda:	9802      	ldr	r0, [sp, #8]
 800eedc:	f000 fbce 	bl	800f67c <__lshift>
 800eee0:	1be4      	subs	r4, r4, r7
 800eee2:	4605      	mov	r5, r0
 800eee4:	f100 0914 	add.w	r9, r0, #20
 800eee8:	f04f 0a00 	mov.w	sl, #0
 800eeec:	e7a8      	b.n	800ee40 <__gethex+0x1ce>
 800eeee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eef2:	42a0      	cmp	r0, r4
 800eef4:	dd6a      	ble.n	800efcc <__gethex+0x35a>
 800eef6:	1b04      	subs	r4, r0, r4
 800eef8:	42a6      	cmp	r6, r4
 800eefa:	dc2e      	bgt.n	800ef5a <__gethex+0x2e8>
 800eefc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d022      	beq.n	800ef4a <__gethex+0x2d8>
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d024      	beq.n	800ef52 <__gethex+0x2e0>
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d115      	bne.n	800ef38 <__gethex+0x2c6>
 800ef0c:	42a6      	cmp	r6, r4
 800ef0e:	d113      	bne.n	800ef38 <__gethex+0x2c6>
 800ef10:	2e01      	cmp	r6, #1
 800ef12:	dc0b      	bgt.n	800ef2c <__gethex+0x2ba>
 800ef14:	9a06      	ldr	r2, [sp, #24]
 800ef16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	612b      	str	r3, [r5, #16]
 800ef20:	f8c9 3000 	str.w	r3, [r9]
 800ef24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef26:	2762      	movs	r7, #98	; 0x62
 800ef28:	601d      	str	r5, [r3, #0]
 800ef2a:	e72a      	b.n	800ed82 <__gethex+0x110>
 800ef2c:	1e71      	subs	r1, r6, #1
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f000 fd82 	bl	800fa38 <__any_on>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d1ed      	bne.n	800ef14 <__gethex+0x2a2>
 800ef38:	4629      	mov	r1, r5
 800ef3a:	9802      	ldr	r0, [sp, #8]
 800ef3c:	f000 f9d2 	bl	800f2e4 <_Bfree>
 800ef40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef42:	2300      	movs	r3, #0
 800ef44:	6013      	str	r3, [r2, #0]
 800ef46:	2750      	movs	r7, #80	; 0x50
 800ef48:	e71b      	b.n	800ed82 <__gethex+0x110>
 800ef4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d0e1      	beq.n	800ef14 <__gethex+0x2a2>
 800ef50:	e7f2      	b.n	800ef38 <__gethex+0x2c6>
 800ef52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1dd      	bne.n	800ef14 <__gethex+0x2a2>
 800ef58:	e7ee      	b.n	800ef38 <__gethex+0x2c6>
 800ef5a:	1e67      	subs	r7, r4, #1
 800ef5c:	f1ba 0f00 	cmp.w	sl, #0
 800ef60:	d131      	bne.n	800efc6 <__gethex+0x354>
 800ef62:	b127      	cbz	r7, 800ef6e <__gethex+0x2fc>
 800ef64:	4639      	mov	r1, r7
 800ef66:	4628      	mov	r0, r5
 800ef68:	f000 fd66 	bl	800fa38 <__any_on>
 800ef6c:	4682      	mov	sl, r0
 800ef6e:	117a      	asrs	r2, r7, #5
 800ef70:	2301      	movs	r3, #1
 800ef72:	f007 071f 	and.w	r7, r7, #31
 800ef76:	fa03 f707 	lsl.w	r7, r3, r7
 800ef7a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ef7e:	4621      	mov	r1, r4
 800ef80:	421f      	tst	r7, r3
 800ef82:	4628      	mov	r0, r5
 800ef84:	bf18      	it	ne
 800ef86:	f04a 0a02 	orrne.w	sl, sl, #2
 800ef8a:	1b36      	subs	r6, r6, r4
 800ef8c:	f7ff fe22 	bl	800ebd4 <rshift>
 800ef90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ef94:	2702      	movs	r7, #2
 800ef96:	f1ba 0f00 	cmp.w	sl, #0
 800ef9a:	d048      	beq.n	800f02e <__gethex+0x3bc>
 800ef9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efa0:	2b02      	cmp	r3, #2
 800efa2:	d015      	beq.n	800efd0 <__gethex+0x35e>
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	d017      	beq.n	800efd8 <__gethex+0x366>
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d109      	bne.n	800efc0 <__gethex+0x34e>
 800efac:	f01a 0f02 	tst.w	sl, #2
 800efb0:	d006      	beq.n	800efc0 <__gethex+0x34e>
 800efb2:	f8d9 3000 	ldr.w	r3, [r9]
 800efb6:	ea4a 0a03 	orr.w	sl, sl, r3
 800efba:	f01a 0f01 	tst.w	sl, #1
 800efbe:	d10e      	bne.n	800efde <__gethex+0x36c>
 800efc0:	f047 0710 	orr.w	r7, r7, #16
 800efc4:	e033      	b.n	800f02e <__gethex+0x3bc>
 800efc6:	f04f 0a01 	mov.w	sl, #1
 800efca:	e7d0      	b.n	800ef6e <__gethex+0x2fc>
 800efcc:	2701      	movs	r7, #1
 800efce:	e7e2      	b.n	800ef96 <__gethex+0x324>
 800efd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efd2:	f1c3 0301 	rsb	r3, r3, #1
 800efd6:	9315      	str	r3, [sp, #84]	; 0x54
 800efd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0f0      	beq.n	800efc0 <__gethex+0x34e>
 800efde:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800efe2:	f105 0314 	add.w	r3, r5, #20
 800efe6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800efea:	eb03 010a 	add.w	r1, r3, sl
 800efee:	f04f 0c00 	mov.w	ip, #0
 800eff2:	4618      	mov	r0, r3
 800eff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800effc:	d01c      	beq.n	800f038 <__gethex+0x3c6>
 800effe:	3201      	adds	r2, #1
 800f000:	6002      	str	r2, [r0, #0]
 800f002:	2f02      	cmp	r7, #2
 800f004:	f105 0314 	add.w	r3, r5, #20
 800f008:	d138      	bne.n	800f07c <__gethex+0x40a>
 800f00a:	f8d8 2000 	ldr.w	r2, [r8]
 800f00e:	3a01      	subs	r2, #1
 800f010:	42b2      	cmp	r2, r6
 800f012:	d10a      	bne.n	800f02a <__gethex+0x3b8>
 800f014:	1171      	asrs	r1, r6, #5
 800f016:	2201      	movs	r2, #1
 800f018:	f006 061f 	and.w	r6, r6, #31
 800f01c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f020:	fa02 f606 	lsl.w	r6, r2, r6
 800f024:	421e      	tst	r6, r3
 800f026:	bf18      	it	ne
 800f028:	4617      	movne	r7, r2
 800f02a:	f047 0720 	orr.w	r7, r7, #32
 800f02e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f030:	601d      	str	r5, [r3, #0]
 800f032:	9b06      	ldr	r3, [sp, #24]
 800f034:	601c      	str	r4, [r3, #0]
 800f036:	e6a4      	b.n	800ed82 <__gethex+0x110>
 800f038:	4299      	cmp	r1, r3
 800f03a:	f843 cc04 	str.w	ip, [r3, #-4]
 800f03e:	d8d8      	bhi.n	800eff2 <__gethex+0x380>
 800f040:	68ab      	ldr	r3, [r5, #8]
 800f042:	4599      	cmp	r9, r3
 800f044:	db12      	blt.n	800f06c <__gethex+0x3fa>
 800f046:	6869      	ldr	r1, [r5, #4]
 800f048:	9802      	ldr	r0, [sp, #8]
 800f04a:	3101      	adds	r1, #1
 800f04c:	f000 f916 	bl	800f27c <_Balloc>
 800f050:	692a      	ldr	r2, [r5, #16]
 800f052:	3202      	adds	r2, #2
 800f054:	f105 010c 	add.w	r1, r5, #12
 800f058:	4683      	mov	fp, r0
 800f05a:	0092      	lsls	r2, r2, #2
 800f05c:	300c      	adds	r0, #12
 800f05e:	f7fd f961 	bl	800c324 <memcpy>
 800f062:	4629      	mov	r1, r5
 800f064:	9802      	ldr	r0, [sp, #8]
 800f066:	f000 f93d 	bl	800f2e4 <_Bfree>
 800f06a:	465d      	mov	r5, fp
 800f06c:	692b      	ldr	r3, [r5, #16]
 800f06e:	1c5a      	adds	r2, r3, #1
 800f070:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f074:	612a      	str	r2, [r5, #16]
 800f076:	2201      	movs	r2, #1
 800f078:	615a      	str	r2, [r3, #20]
 800f07a:	e7c2      	b.n	800f002 <__gethex+0x390>
 800f07c:	692a      	ldr	r2, [r5, #16]
 800f07e:	454a      	cmp	r2, r9
 800f080:	dd0b      	ble.n	800f09a <__gethex+0x428>
 800f082:	2101      	movs	r1, #1
 800f084:	4628      	mov	r0, r5
 800f086:	f7ff fda5 	bl	800ebd4 <rshift>
 800f08a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f08e:	3401      	adds	r4, #1
 800f090:	42a3      	cmp	r3, r4
 800f092:	f6ff aed9 	blt.w	800ee48 <__gethex+0x1d6>
 800f096:	2701      	movs	r7, #1
 800f098:	e7c7      	b.n	800f02a <__gethex+0x3b8>
 800f09a:	f016 061f 	ands.w	r6, r6, #31
 800f09e:	d0fa      	beq.n	800f096 <__gethex+0x424>
 800f0a0:	449a      	add	sl, r3
 800f0a2:	f1c6 0620 	rsb	r6, r6, #32
 800f0a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f0aa:	f000 f9ab 	bl	800f404 <__hi0bits>
 800f0ae:	42b0      	cmp	r0, r6
 800f0b0:	dbe7      	blt.n	800f082 <__gethex+0x410>
 800f0b2:	e7f0      	b.n	800f096 <__gethex+0x424>

0800f0b4 <L_shift>:
 800f0b4:	f1c2 0208 	rsb	r2, r2, #8
 800f0b8:	0092      	lsls	r2, r2, #2
 800f0ba:	b570      	push	{r4, r5, r6, lr}
 800f0bc:	f1c2 0620 	rsb	r6, r2, #32
 800f0c0:	6843      	ldr	r3, [r0, #4]
 800f0c2:	6804      	ldr	r4, [r0, #0]
 800f0c4:	fa03 f506 	lsl.w	r5, r3, r6
 800f0c8:	432c      	orrs	r4, r5
 800f0ca:	40d3      	lsrs	r3, r2
 800f0cc:	6004      	str	r4, [r0, #0]
 800f0ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0d2:	4288      	cmp	r0, r1
 800f0d4:	d3f4      	bcc.n	800f0c0 <L_shift+0xc>
 800f0d6:	bd70      	pop	{r4, r5, r6, pc}

0800f0d8 <__match>:
 800f0d8:	b530      	push	{r4, r5, lr}
 800f0da:	6803      	ldr	r3, [r0, #0]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0e2:	b914      	cbnz	r4, 800f0ea <__match+0x12>
 800f0e4:	6003      	str	r3, [r0, #0]
 800f0e6:	2001      	movs	r0, #1
 800f0e8:	bd30      	pop	{r4, r5, pc}
 800f0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f0f2:	2d19      	cmp	r5, #25
 800f0f4:	bf98      	it	ls
 800f0f6:	3220      	addls	r2, #32
 800f0f8:	42a2      	cmp	r2, r4
 800f0fa:	d0f0      	beq.n	800f0de <__match+0x6>
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	e7f3      	b.n	800f0e8 <__match+0x10>

0800f100 <__hexnan>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	680b      	ldr	r3, [r1, #0]
 800f106:	6801      	ldr	r1, [r0, #0]
 800f108:	115f      	asrs	r7, r3, #5
 800f10a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f10e:	f013 031f 	ands.w	r3, r3, #31
 800f112:	b087      	sub	sp, #28
 800f114:	bf18      	it	ne
 800f116:	3704      	addne	r7, #4
 800f118:	2500      	movs	r5, #0
 800f11a:	1f3e      	subs	r6, r7, #4
 800f11c:	4682      	mov	sl, r0
 800f11e:	4690      	mov	r8, r2
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f847 5c04 	str.w	r5, [r7, #-4]
 800f126:	46b1      	mov	r9, r6
 800f128:	4634      	mov	r4, r6
 800f12a:	9502      	str	r5, [sp, #8]
 800f12c:	46ab      	mov	fp, r5
 800f12e:	784a      	ldrb	r2, [r1, #1]
 800f130:	1c4b      	adds	r3, r1, #1
 800f132:	9303      	str	r3, [sp, #12]
 800f134:	b342      	cbz	r2, 800f188 <__hexnan+0x88>
 800f136:	4610      	mov	r0, r2
 800f138:	9105      	str	r1, [sp, #20]
 800f13a:	9204      	str	r2, [sp, #16]
 800f13c:	f7ff fd84 	bl	800ec48 <__hexdig_fun>
 800f140:	2800      	cmp	r0, #0
 800f142:	d143      	bne.n	800f1cc <__hexnan+0xcc>
 800f144:	9a04      	ldr	r2, [sp, #16]
 800f146:	9905      	ldr	r1, [sp, #20]
 800f148:	2a20      	cmp	r2, #32
 800f14a:	d818      	bhi.n	800f17e <__hexnan+0x7e>
 800f14c:	9b02      	ldr	r3, [sp, #8]
 800f14e:	459b      	cmp	fp, r3
 800f150:	dd13      	ble.n	800f17a <__hexnan+0x7a>
 800f152:	454c      	cmp	r4, r9
 800f154:	d206      	bcs.n	800f164 <__hexnan+0x64>
 800f156:	2d07      	cmp	r5, #7
 800f158:	dc04      	bgt.n	800f164 <__hexnan+0x64>
 800f15a:	462a      	mov	r2, r5
 800f15c:	4649      	mov	r1, r9
 800f15e:	4620      	mov	r0, r4
 800f160:	f7ff ffa8 	bl	800f0b4 <L_shift>
 800f164:	4544      	cmp	r4, r8
 800f166:	d944      	bls.n	800f1f2 <__hexnan+0xf2>
 800f168:	2300      	movs	r3, #0
 800f16a:	f1a4 0904 	sub.w	r9, r4, #4
 800f16e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f172:	f8cd b008 	str.w	fp, [sp, #8]
 800f176:	464c      	mov	r4, r9
 800f178:	461d      	mov	r5, r3
 800f17a:	9903      	ldr	r1, [sp, #12]
 800f17c:	e7d7      	b.n	800f12e <__hexnan+0x2e>
 800f17e:	2a29      	cmp	r2, #41	; 0x29
 800f180:	d14a      	bne.n	800f218 <__hexnan+0x118>
 800f182:	3102      	adds	r1, #2
 800f184:	f8ca 1000 	str.w	r1, [sl]
 800f188:	f1bb 0f00 	cmp.w	fp, #0
 800f18c:	d044      	beq.n	800f218 <__hexnan+0x118>
 800f18e:	454c      	cmp	r4, r9
 800f190:	d206      	bcs.n	800f1a0 <__hexnan+0xa0>
 800f192:	2d07      	cmp	r5, #7
 800f194:	dc04      	bgt.n	800f1a0 <__hexnan+0xa0>
 800f196:	462a      	mov	r2, r5
 800f198:	4649      	mov	r1, r9
 800f19a:	4620      	mov	r0, r4
 800f19c:	f7ff ff8a 	bl	800f0b4 <L_shift>
 800f1a0:	4544      	cmp	r4, r8
 800f1a2:	d928      	bls.n	800f1f6 <__hexnan+0xf6>
 800f1a4:	4643      	mov	r3, r8
 800f1a6:	f854 2b04 	ldr.w	r2, [r4], #4
 800f1aa:	f843 2b04 	str.w	r2, [r3], #4
 800f1ae:	42a6      	cmp	r6, r4
 800f1b0:	d2f9      	bcs.n	800f1a6 <__hexnan+0xa6>
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f843 2b04 	str.w	r2, [r3], #4
 800f1b8:	429e      	cmp	r6, r3
 800f1ba:	d2fb      	bcs.n	800f1b4 <__hexnan+0xb4>
 800f1bc:	6833      	ldr	r3, [r6, #0]
 800f1be:	b91b      	cbnz	r3, 800f1c8 <__hexnan+0xc8>
 800f1c0:	4546      	cmp	r6, r8
 800f1c2:	d127      	bne.n	800f214 <__hexnan+0x114>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	6033      	str	r3, [r6, #0]
 800f1c8:	2005      	movs	r0, #5
 800f1ca:	e026      	b.n	800f21a <__hexnan+0x11a>
 800f1cc:	3501      	adds	r5, #1
 800f1ce:	2d08      	cmp	r5, #8
 800f1d0:	f10b 0b01 	add.w	fp, fp, #1
 800f1d4:	dd06      	ble.n	800f1e4 <__hexnan+0xe4>
 800f1d6:	4544      	cmp	r4, r8
 800f1d8:	d9cf      	bls.n	800f17a <__hexnan+0x7a>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1e0:	2501      	movs	r5, #1
 800f1e2:	3c04      	subs	r4, #4
 800f1e4:	6822      	ldr	r2, [r4, #0]
 800f1e6:	f000 000f 	and.w	r0, r0, #15
 800f1ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f1ee:	6020      	str	r0, [r4, #0]
 800f1f0:	e7c3      	b.n	800f17a <__hexnan+0x7a>
 800f1f2:	2508      	movs	r5, #8
 800f1f4:	e7c1      	b.n	800f17a <__hexnan+0x7a>
 800f1f6:	9b01      	ldr	r3, [sp, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0df      	beq.n	800f1bc <__hexnan+0xbc>
 800f1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f200:	f1c3 0320 	rsb	r3, r3, #32
 800f204:	fa22 f303 	lsr.w	r3, r2, r3
 800f208:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f20c:	401a      	ands	r2, r3
 800f20e:	f847 2c04 	str.w	r2, [r7, #-4]
 800f212:	e7d3      	b.n	800f1bc <__hexnan+0xbc>
 800f214:	3e04      	subs	r6, #4
 800f216:	e7d1      	b.n	800f1bc <__hexnan+0xbc>
 800f218:	2004      	movs	r0, #4
 800f21a:	b007      	add	sp, #28
 800f21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f220 <__locale_ctype_ptr_l>:
 800f220:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f224:	4770      	bx	lr

0800f226 <__localeconv_l>:
 800f226:	30f0      	adds	r0, #240	; 0xf0
 800f228:	4770      	bx	lr
	...

0800f22c <_localeconv_r>:
 800f22c:	4b04      	ldr	r3, [pc, #16]	; (800f240 <_localeconv_r+0x14>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6a18      	ldr	r0, [r3, #32]
 800f232:	4b04      	ldr	r3, [pc, #16]	; (800f244 <_localeconv_r+0x18>)
 800f234:	2800      	cmp	r0, #0
 800f236:	bf08      	it	eq
 800f238:	4618      	moveq	r0, r3
 800f23a:	30f0      	adds	r0, #240	; 0xf0
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	200002cc 	.word	0x200002cc
 800f244:	20000330 	.word	0x20000330

0800f248 <malloc>:
 800f248:	4b02      	ldr	r3, [pc, #8]	; (800f254 <malloc+0xc>)
 800f24a:	4601      	mov	r1, r0
 800f24c:	6818      	ldr	r0, [r3, #0]
 800f24e:	f000 bc71 	b.w	800fb34 <_malloc_r>
 800f252:	bf00      	nop
 800f254:	200002cc 	.word	0x200002cc

0800f258 <__ascii_mbtowc>:
 800f258:	b082      	sub	sp, #8
 800f25a:	b901      	cbnz	r1, 800f25e <__ascii_mbtowc+0x6>
 800f25c:	a901      	add	r1, sp, #4
 800f25e:	b142      	cbz	r2, 800f272 <__ascii_mbtowc+0x1a>
 800f260:	b14b      	cbz	r3, 800f276 <__ascii_mbtowc+0x1e>
 800f262:	7813      	ldrb	r3, [r2, #0]
 800f264:	600b      	str	r3, [r1, #0]
 800f266:	7812      	ldrb	r2, [r2, #0]
 800f268:	1c10      	adds	r0, r2, #0
 800f26a:	bf18      	it	ne
 800f26c:	2001      	movne	r0, #1
 800f26e:	b002      	add	sp, #8
 800f270:	4770      	bx	lr
 800f272:	4610      	mov	r0, r2
 800f274:	e7fb      	b.n	800f26e <__ascii_mbtowc+0x16>
 800f276:	f06f 0001 	mvn.w	r0, #1
 800f27a:	e7f8      	b.n	800f26e <__ascii_mbtowc+0x16>

0800f27c <_Balloc>:
 800f27c:	b570      	push	{r4, r5, r6, lr}
 800f27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f280:	4604      	mov	r4, r0
 800f282:	460e      	mov	r6, r1
 800f284:	b93d      	cbnz	r5, 800f296 <_Balloc+0x1a>
 800f286:	2010      	movs	r0, #16
 800f288:	f7ff ffde 	bl	800f248 <malloc>
 800f28c:	6260      	str	r0, [r4, #36]	; 0x24
 800f28e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f292:	6005      	str	r5, [r0, #0]
 800f294:	60c5      	str	r5, [r0, #12]
 800f296:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f298:	68eb      	ldr	r3, [r5, #12]
 800f29a:	b183      	cbz	r3, 800f2be <_Balloc+0x42>
 800f29c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f2a4:	b9b8      	cbnz	r0, 800f2d6 <_Balloc+0x5a>
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	fa01 f506 	lsl.w	r5, r1, r6
 800f2ac:	1d6a      	adds	r2, r5, #5
 800f2ae:	0092      	lsls	r2, r2, #2
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 fbe2 	bl	800fa7a <_calloc_r>
 800f2b6:	b160      	cbz	r0, 800f2d2 <_Balloc+0x56>
 800f2b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f2bc:	e00e      	b.n	800f2dc <_Balloc+0x60>
 800f2be:	2221      	movs	r2, #33	; 0x21
 800f2c0:	2104      	movs	r1, #4
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fbd9 	bl	800fa7a <_calloc_r>
 800f2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ca:	60e8      	str	r0, [r5, #12]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1e4      	bne.n	800f29c <_Balloc+0x20>
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
 800f2d6:	6802      	ldr	r2, [r0, #0]
 800f2d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2e2:	e7f7      	b.n	800f2d4 <_Balloc+0x58>

0800f2e4 <_Bfree>:
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	b93c      	cbnz	r4, 800f2fe <_Bfree+0x1a>
 800f2ee:	2010      	movs	r0, #16
 800f2f0:	f7ff ffaa 	bl	800f248 <malloc>
 800f2f4:	6270      	str	r0, [r6, #36]	; 0x24
 800f2f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2fa:	6004      	str	r4, [r0, #0]
 800f2fc:	60c4      	str	r4, [r0, #12]
 800f2fe:	b13d      	cbz	r5, 800f310 <_Bfree+0x2c>
 800f300:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f302:	686a      	ldr	r2, [r5, #4]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f30a:	6029      	str	r1, [r5, #0]
 800f30c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f310:	bd70      	pop	{r4, r5, r6, pc}

0800f312 <__multadd>:
 800f312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f316:	690d      	ldr	r5, [r1, #16]
 800f318:	461f      	mov	r7, r3
 800f31a:	4606      	mov	r6, r0
 800f31c:	460c      	mov	r4, r1
 800f31e:	f101 0c14 	add.w	ip, r1, #20
 800f322:	2300      	movs	r3, #0
 800f324:	f8dc 0000 	ldr.w	r0, [ip]
 800f328:	b281      	uxth	r1, r0
 800f32a:	fb02 7101 	mla	r1, r2, r1, r7
 800f32e:	0c0f      	lsrs	r7, r1, #16
 800f330:	0c00      	lsrs	r0, r0, #16
 800f332:	fb02 7000 	mla	r0, r2, r0, r7
 800f336:	b289      	uxth	r1, r1
 800f338:	3301      	adds	r3, #1
 800f33a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f33e:	429d      	cmp	r5, r3
 800f340:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f344:	f84c 1b04 	str.w	r1, [ip], #4
 800f348:	dcec      	bgt.n	800f324 <__multadd+0x12>
 800f34a:	b1d7      	cbz	r7, 800f382 <__multadd+0x70>
 800f34c:	68a3      	ldr	r3, [r4, #8]
 800f34e:	42ab      	cmp	r3, r5
 800f350:	dc12      	bgt.n	800f378 <__multadd+0x66>
 800f352:	6861      	ldr	r1, [r4, #4]
 800f354:	4630      	mov	r0, r6
 800f356:	3101      	adds	r1, #1
 800f358:	f7ff ff90 	bl	800f27c <_Balloc>
 800f35c:	6922      	ldr	r2, [r4, #16]
 800f35e:	3202      	adds	r2, #2
 800f360:	f104 010c 	add.w	r1, r4, #12
 800f364:	4680      	mov	r8, r0
 800f366:	0092      	lsls	r2, r2, #2
 800f368:	300c      	adds	r0, #12
 800f36a:	f7fc ffdb 	bl	800c324 <memcpy>
 800f36e:	4621      	mov	r1, r4
 800f370:	4630      	mov	r0, r6
 800f372:	f7ff ffb7 	bl	800f2e4 <_Bfree>
 800f376:	4644      	mov	r4, r8
 800f378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f37c:	3501      	adds	r5, #1
 800f37e:	615f      	str	r7, [r3, #20]
 800f380:	6125      	str	r5, [r4, #16]
 800f382:	4620      	mov	r0, r4
 800f384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f388 <__s2b>:
 800f388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f38c:	460c      	mov	r4, r1
 800f38e:	4615      	mov	r5, r2
 800f390:	461f      	mov	r7, r3
 800f392:	2209      	movs	r2, #9
 800f394:	3308      	adds	r3, #8
 800f396:	4606      	mov	r6, r0
 800f398:	fb93 f3f2 	sdiv	r3, r3, r2
 800f39c:	2100      	movs	r1, #0
 800f39e:	2201      	movs	r2, #1
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	db20      	blt.n	800f3e6 <__s2b+0x5e>
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f7ff ff69 	bl	800f27c <_Balloc>
 800f3aa:	9b08      	ldr	r3, [sp, #32]
 800f3ac:	6143      	str	r3, [r0, #20]
 800f3ae:	2d09      	cmp	r5, #9
 800f3b0:	f04f 0301 	mov.w	r3, #1
 800f3b4:	6103      	str	r3, [r0, #16]
 800f3b6:	dd19      	ble.n	800f3ec <__s2b+0x64>
 800f3b8:	f104 0809 	add.w	r8, r4, #9
 800f3bc:	46c1      	mov	r9, r8
 800f3be:	442c      	add	r4, r5
 800f3c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f3c4:	4601      	mov	r1, r0
 800f3c6:	3b30      	subs	r3, #48	; 0x30
 800f3c8:	220a      	movs	r2, #10
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ffa1 	bl	800f312 <__multadd>
 800f3d0:	45a1      	cmp	r9, r4
 800f3d2:	d1f5      	bne.n	800f3c0 <__s2b+0x38>
 800f3d4:	eb08 0405 	add.w	r4, r8, r5
 800f3d8:	3c08      	subs	r4, #8
 800f3da:	1b2d      	subs	r5, r5, r4
 800f3dc:	1963      	adds	r3, r4, r5
 800f3de:	42bb      	cmp	r3, r7
 800f3e0:	db07      	blt.n	800f3f2 <__s2b+0x6a>
 800f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e6:	0052      	lsls	r2, r2, #1
 800f3e8:	3101      	adds	r1, #1
 800f3ea:	e7d9      	b.n	800f3a0 <__s2b+0x18>
 800f3ec:	340a      	adds	r4, #10
 800f3ee:	2509      	movs	r5, #9
 800f3f0:	e7f3      	b.n	800f3da <__s2b+0x52>
 800f3f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	3b30      	subs	r3, #48	; 0x30
 800f3fa:	220a      	movs	r2, #10
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7ff ff88 	bl	800f312 <__multadd>
 800f402:	e7eb      	b.n	800f3dc <__s2b+0x54>

0800f404 <__hi0bits>:
 800f404:	0c02      	lsrs	r2, r0, #16
 800f406:	0412      	lsls	r2, r2, #16
 800f408:	4603      	mov	r3, r0
 800f40a:	b9b2      	cbnz	r2, 800f43a <__hi0bits+0x36>
 800f40c:	0403      	lsls	r3, r0, #16
 800f40e:	2010      	movs	r0, #16
 800f410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f414:	bf04      	itt	eq
 800f416:	021b      	lsleq	r3, r3, #8
 800f418:	3008      	addeq	r0, #8
 800f41a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f41e:	bf04      	itt	eq
 800f420:	011b      	lsleq	r3, r3, #4
 800f422:	3004      	addeq	r0, #4
 800f424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f428:	bf04      	itt	eq
 800f42a:	009b      	lsleq	r3, r3, #2
 800f42c:	3002      	addeq	r0, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	db06      	blt.n	800f440 <__hi0bits+0x3c>
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	d503      	bpl.n	800f43e <__hi0bits+0x3a>
 800f436:	3001      	adds	r0, #1
 800f438:	4770      	bx	lr
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7e8      	b.n	800f410 <__hi0bits+0xc>
 800f43e:	2020      	movs	r0, #32
 800f440:	4770      	bx	lr

0800f442 <__lo0bits>:
 800f442:	6803      	ldr	r3, [r0, #0]
 800f444:	f013 0207 	ands.w	r2, r3, #7
 800f448:	4601      	mov	r1, r0
 800f44a:	d00b      	beq.n	800f464 <__lo0bits+0x22>
 800f44c:	07da      	lsls	r2, r3, #31
 800f44e:	d423      	bmi.n	800f498 <__lo0bits+0x56>
 800f450:	0798      	lsls	r0, r3, #30
 800f452:	bf49      	itett	mi
 800f454:	085b      	lsrmi	r3, r3, #1
 800f456:	089b      	lsrpl	r3, r3, #2
 800f458:	2001      	movmi	r0, #1
 800f45a:	600b      	strmi	r3, [r1, #0]
 800f45c:	bf5c      	itt	pl
 800f45e:	600b      	strpl	r3, [r1, #0]
 800f460:	2002      	movpl	r0, #2
 800f462:	4770      	bx	lr
 800f464:	b298      	uxth	r0, r3
 800f466:	b9a8      	cbnz	r0, 800f494 <__lo0bits+0x52>
 800f468:	0c1b      	lsrs	r3, r3, #16
 800f46a:	2010      	movs	r0, #16
 800f46c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f470:	bf04      	itt	eq
 800f472:	0a1b      	lsreq	r3, r3, #8
 800f474:	3008      	addeq	r0, #8
 800f476:	071a      	lsls	r2, r3, #28
 800f478:	bf04      	itt	eq
 800f47a:	091b      	lsreq	r3, r3, #4
 800f47c:	3004      	addeq	r0, #4
 800f47e:	079a      	lsls	r2, r3, #30
 800f480:	bf04      	itt	eq
 800f482:	089b      	lsreq	r3, r3, #2
 800f484:	3002      	addeq	r0, #2
 800f486:	07da      	lsls	r2, r3, #31
 800f488:	d402      	bmi.n	800f490 <__lo0bits+0x4e>
 800f48a:	085b      	lsrs	r3, r3, #1
 800f48c:	d006      	beq.n	800f49c <__lo0bits+0x5a>
 800f48e:	3001      	adds	r0, #1
 800f490:	600b      	str	r3, [r1, #0]
 800f492:	4770      	bx	lr
 800f494:	4610      	mov	r0, r2
 800f496:	e7e9      	b.n	800f46c <__lo0bits+0x2a>
 800f498:	2000      	movs	r0, #0
 800f49a:	4770      	bx	lr
 800f49c:	2020      	movs	r0, #32
 800f49e:	4770      	bx	lr

0800f4a0 <__i2b>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	f7ff fee9 	bl	800f27c <_Balloc>
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	6144      	str	r4, [r0, #20]
 800f4ae:	6102      	str	r2, [r0, #16]
 800f4b0:	bd10      	pop	{r4, pc}

0800f4b2 <__multiply>:
 800f4b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b6:	4614      	mov	r4, r2
 800f4b8:	690a      	ldr	r2, [r1, #16]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	bfb8      	it	lt
 800f4c0:	460b      	movlt	r3, r1
 800f4c2:	4688      	mov	r8, r1
 800f4c4:	bfbc      	itt	lt
 800f4c6:	46a0      	movlt	r8, r4
 800f4c8:	461c      	movlt	r4, r3
 800f4ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f4ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f4d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f4da:	eb07 0609 	add.w	r6, r7, r9
 800f4de:	42b3      	cmp	r3, r6
 800f4e0:	bfb8      	it	lt
 800f4e2:	3101      	addlt	r1, #1
 800f4e4:	f7ff feca 	bl	800f27c <_Balloc>
 800f4e8:	f100 0514 	add.w	r5, r0, #20
 800f4ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f4f0:	462b      	mov	r3, r5
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	4573      	cmp	r3, lr
 800f4f6:	d316      	bcc.n	800f526 <__multiply+0x74>
 800f4f8:	f104 0214 	add.w	r2, r4, #20
 800f4fc:	f108 0114 	add.w	r1, r8, #20
 800f500:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f504:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	9b00      	ldr	r3, [sp, #0]
 800f50c:	9201      	str	r2, [sp, #4]
 800f50e:	4293      	cmp	r3, r2
 800f510:	d80c      	bhi.n	800f52c <__multiply+0x7a>
 800f512:	2e00      	cmp	r6, #0
 800f514:	dd03      	ble.n	800f51e <__multiply+0x6c>
 800f516:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d05d      	beq.n	800f5da <__multiply+0x128>
 800f51e:	6106      	str	r6, [r0, #16]
 800f520:	b003      	add	sp, #12
 800f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f526:	f843 2b04 	str.w	r2, [r3], #4
 800f52a:	e7e3      	b.n	800f4f4 <__multiply+0x42>
 800f52c:	f8b2 b000 	ldrh.w	fp, [r2]
 800f530:	f1bb 0f00 	cmp.w	fp, #0
 800f534:	d023      	beq.n	800f57e <__multiply+0xcc>
 800f536:	4689      	mov	r9, r1
 800f538:	46ac      	mov	ip, r5
 800f53a:	f04f 0800 	mov.w	r8, #0
 800f53e:	f859 4b04 	ldr.w	r4, [r9], #4
 800f542:	f8dc a000 	ldr.w	sl, [ip]
 800f546:	b2a3      	uxth	r3, r4
 800f548:	fa1f fa8a 	uxth.w	sl, sl
 800f54c:	fb0b a303 	mla	r3, fp, r3, sl
 800f550:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f554:	f8dc 4000 	ldr.w	r4, [ip]
 800f558:	4443      	add	r3, r8
 800f55a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f55e:	fb0b 840a 	mla	r4, fp, sl, r8
 800f562:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f566:	46e2      	mov	sl, ip
 800f568:	b29b      	uxth	r3, r3
 800f56a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f56e:	454f      	cmp	r7, r9
 800f570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f574:	f84a 3b04 	str.w	r3, [sl], #4
 800f578:	d82b      	bhi.n	800f5d2 <__multiply+0x120>
 800f57a:	f8cc 8004 	str.w	r8, [ip, #4]
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f584:	3204      	adds	r2, #4
 800f586:	f1ba 0f00 	cmp.w	sl, #0
 800f58a:	d020      	beq.n	800f5ce <__multiply+0x11c>
 800f58c:	682b      	ldr	r3, [r5, #0]
 800f58e:	4689      	mov	r9, r1
 800f590:	46a8      	mov	r8, r5
 800f592:	f04f 0b00 	mov.w	fp, #0
 800f596:	f8b9 c000 	ldrh.w	ip, [r9]
 800f59a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f59e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f5a2:	445c      	add	r4, fp
 800f5a4:	46c4      	mov	ip, r8
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f5ac:	f84c 3b04 	str.w	r3, [ip], #4
 800f5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f5b8:	0c1b      	lsrs	r3, r3, #16
 800f5ba:	fb0a b303 	mla	r3, sl, r3, fp
 800f5be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f5c2:	454f      	cmp	r7, r9
 800f5c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f5c8:	d805      	bhi.n	800f5d6 <__multiply+0x124>
 800f5ca:	f8c8 3004 	str.w	r3, [r8, #4]
 800f5ce:	3504      	adds	r5, #4
 800f5d0:	e79b      	b.n	800f50a <__multiply+0x58>
 800f5d2:	46d4      	mov	ip, sl
 800f5d4:	e7b3      	b.n	800f53e <__multiply+0x8c>
 800f5d6:	46e0      	mov	r8, ip
 800f5d8:	e7dd      	b.n	800f596 <__multiply+0xe4>
 800f5da:	3e01      	subs	r6, #1
 800f5dc:	e799      	b.n	800f512 <__multiply+0x60>
	...

0800f5e0 <__pow5mult>:
 800f5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e4:	4615      	mov	r5, r2
 800f5e6:	f012 0203 	ands.w	r2, r2, #3
 800f5ea:	4606      	mov	r6, r0
 800f5ec:	460f      	mov	r7, r1
 800f5ee:	d007      	beq.n	800f600 <__pow5mult+0x20>
 800f5f0:	3a01      	subs	r2, #1
 800f5f2:	4c21      	ldr	r4, [pc, #132]	; (800f678 <__pow5mult+0x98>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5fa:	f7ff fe8a 	bl	800f312 <__multadd>
 800f5fe:	4607      	mov	r7, r0
 800f600:	10ad      	asrs	r5, r5, #2
 800f602:	d035      	beq.n	800f670 <__pow5mult+0x90>
 800f604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f606:	b93c      	cbnz	r4, 800f618 <__pow5mult+0x38>
 800f608:	2010      	movs	r0, #16
 800f60a:	f7ff fe1d 	bl	800f248 <malloc>
 800f60e:	6270      	str	r0, [r6, #36]	; 0x24
 800f610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f614:	6004      	str	r4, [r0, #0]
 800f616:	60c4      	str	r4, [r0, #12]
 800f618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f61c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f620:	b94c      	cbnz	r4, 800f636 <__pow5mult+0x56>
 800f622:	f240 2171 	movw	r1, #625	; 0x271
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff ff3a 	bl	800f4a0 <__i2b>
 800f62c:	2300      	movs	r3, #0
 800f62e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f632:	4604      	mov	r4, r0
 800f634:	6003      	str	r3, [r0, #0]
 800f636:	f04f 0800 	mov.w	r8, #0
 800f63a:	07eb      	lsls	r3, r5, #31
 800f63c:	d50a      	bpl.n	800f654 <__pow5mult+0x74>
 800f63e:	4639      	mov	r1, r7
 800f640:	4622      	mov	r2, r4
 800f642:	4630      	mov	r0, r6
 800f644:	f7ff ff35 	bl	800f4b2 <__multiply>
 800f648:	4639      	mov	r1, r7
 800f64a:	4681      	mov	r9, r0
 800f64c:	4630      	mov	r0, r6
 800f64e:	f7ff fe49 	bl	800f2e4 <_Bfree>
 800f652:	464f      	mov	r7, r9
 800f654:	106d      	asrs	r5, r5, #1
 800f656:	d00b      	beq.n	800f670 <__pow5mult+0x90>
 800f658:	6820      	ldr	r0, [r4, #0]
 800f65a:	b938      	cbnz	r0, 800f66c <__pow5mult+0x8c>
 800f65c:	4622      	mov	r2, r4
 800f65e:	4621      	mov	r1, r4
 800f660:	4630      	mov	r0, r6
 800f662:	f7ff ff26 	bl	800f4b2 <__multiply>
 800f666:	6020      	str	r0, [r4, #0]
 800f668:	f8c0 8000 	str.w	r8, [r0]
 800f66c:	4604      	mov	r4, r0
 800f66e:	e7e4      	b.n	800f63a <__pow5mult+0x5a>
 800f670:	4638      	mov	r0, r7
 800f672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f676:	bf00      	nop
 800f678:	080109a8 	.word	0x080109a8

0800f67c <__lshift>:
 800f67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f680:	460c      	mov	r4, r1
 800f682:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f686:	6923      	ldr	r3, [r4, #16]
 800f688:	6849      	ldr	r1, [r1, #4]
 800f68a:	eb0a 0903 	add.w	r9, sl, r3
 800f68e:	68a3      	ldr	r3, [r4, #8]
 800f690:	4607      	mov	r7, r0
 800f692:	4616      	mov	r6, r2
 800f694:	f109 0501 	add.w	r5, r9, #1
 800f698:	42ab      	cmp	r3, r5
 800f69a:	db32      	blt.n	800f702 <__lshift+0x86>
 800f69c:	4638      	mov	r0, r7
 800f69e:	f7ff fded 	bl	800f27c <_Balloc>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4680      	mov	r8, r0
 800f6a6:	f100 0114 	add.w	r1, r0, #20
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4553      	cmp	r3, sl
 800f6ae:	db2b      	blt.n	800f708 <__lshift+0x8c>
 800f6b0:	6920      	ldr	r0, [r4, #16]
 800f6b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6b6:	f104 0314 	add.w	r3, r4, #20
 800f6ba:	f016 021f 	ands.w	r2, r6, #31
 800f6be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6c6:	d025      	beq.n	800f714 <__lshift+0x98>
 800f6c8:	f1c2 0e20 	rsb	lr, r2, #32
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	681e      	ldr	r6, [r3, #0]
 800f6d0:	468a      	mov	sl, r1
 800f6d2:	4096      	lsls	r6, r2
 800f6d4:	4330      	orrs	r0, r6
 800f6d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f6da:	f853 0b04 	ldr.w	r0, [r3], #4
 800f6de:	459c      	cmp	ip, r3
 800f6e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800f6e4:	d814      	bhi.n	800f710 <__lshift+0x94>
 800f6e6:	6048      	str	r0, [r1, #4]
 800f6e8:	b108      	cbz	r0, 800f6ee <__lshift+0x72>
 800f6ea:	f109 0502 	add.w	r5, r9, #2
 800f6ee:	3d01      	subs	r5, #1
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	f7ff fdf4 	bl	800f2e4 <_Bfree>
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f702:	3101      	adds	r1, #1
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	e7c7      	b.n	800f698 <__lshift+0x1c>
 800f708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f70c:	3301      	adds	r3, #1
 800f70e:	e7cd      	b.n	800f6ac <__lshift+0x30>
 800f710:	4651      	mov	r1, sl
 800f712:	e7dc      	b.n	800f6ce <__lshift+0x52>
 800f714:	3904      	subs	r1, #4
 800f716:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f71e:	459c      	cmp	ip, r3
 800f720:	d8f9      	bhi.n	800f716 <__lshift+0x9a>
 800f722:	e7e4      	b.n	800f6ee <__lshift+0x72>

0800f724 <__mcmp>:
 800f724:	6903      	ldr	r3, [r0, #16]
 800f726:	690a      	ldr	r2, [r1, #16]
 800f728:	1a9b      	subs	r3, r3, r2
 800f72a:	b530      	push	{r4, r5, lr}
 800f72c:	d10c      	bne.n	800f748 <__mcmp+0x24>
 800f72e:	0092      	lsls	r2, r2, #2
 800f730:	3014      	adds	r0, #20
 800f732:	3114      	adds	r1, #20
 800f734:	1884      	adds	r4, r0, r2
 800f736:	4411      	add	r1, r2
 800f738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f73c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f740:	4295      	cmp	r5, r2
 800f742:	d003      	beq.n	800f74c <__mcmp+0x28>
 800f744:	d305      	bcc.n	800f752 <__mcmp+0x2e>
 800f746:	2301      	movs	r3, #1
 800f748:	4618      	mov	r0, r3
 800f74a:	bd30      	pop	{r4, r5, pc}
 800f74c:	42a0      	cmp	r0, r4
 800f74e:	d3f3      	bcc.n	800f738 <__mcmp+0x14>
 800f750:	e7fa      	b.n	800f748 <__mcmp+0x24>
 800f752:	f04f 33ff 	mov.w	r3, #4294967295
 800f756:	e7f7      	b.n	800f748 <__mcmp+0x24>

0800f758 <__mdiff>:
 800f758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f75c:	460d      	mov	r5, r1
 800f75e:	4607      	mov	r7, r0
 800f760:	4611      	mov	r1, r2
 800f762:	4628      	mov	r0, r5
 800f764:	4614      	mov	r4, r2
 800f766:	f7ff ffdd 	bl	800f724 <__mcmp>
 800f76a:	1e06      	subs	r6, r0, #0
 800f76c:	d108      	bne.n	800f780 <__mdiff+0x28>
 800f76e:	4631      	mov	r1, r6
 800f770:	4638      	mov	r0, r7
 800f772:	f7ff fd83 	bl	800f27c <_Balloc>
 800f776:	2301      	movs	r3, #1
 800f778:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f780:	bfa4      	itt	ge
 800f782:	4623      	movge	r3, r4
 800f784:	462c      	movge	r4, r5
 800f786:	4638      	mov	r0, r7
 800f788:	6861      	ldr	r1, [r4, #4]
 800f78a:	bfa6      	itte	ge
 800f78c:	461d      	movge	r5, r3
 800f78e:	2600      	movge	r6, #0
 800f790:	2601      	movlt	r6, #1
 800f792:	f7ff fd73 	bl	800f27c <_Balloc>
 800f796:	692b      	ldr	r3, [r5, #16]
 800f798:	60c6      	str	r6, [r0, #12]
 800f79a:	6926      	ldr	r6, [r4, #16]
 800f79c:	f105 0914 	add.w	r9, r5, #20
 800f7a0:	f104 0214 	add.w	r2, r4, #20
 800f7a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f7a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f7ac:	f100 0514 	add.w	r5, r0, #20
 800f7b0:	f04f 0e00 	mov.w	lr, #0
 800f7b4:	f852 ab04 	ldr.w	sl, [r2], #4
 800f7b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800f7bc:	fa1e f18a 	uxtah	r1, lr, sl
 800f7c0:	b2a3      	uxth	r3, r4
 800f7c2:	1ac9      	subs	r1, r1, r3
 800f7c4:	0c23      	lsrs	r3, r4, #16
 800f7c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f7ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f7ce:	b289      	uxth	r1, r1
 800f7d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f7d4:	45c8      	cmp	r8, r9
 800f7d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f7da:	4694      	mov	ip, r2
 800f7dc:	f845 3b04 	str.w	r3, [r5], #4
 800f7e0:	d8e8      	bhi.n	800f7b4 <__mdiff+0x5c>
 800f7e2:	45bc      	cmp	ip, r7
 800f7e4:	d304      	bcc.n	800f7f0 <__mdiff+0x98>
 800f7e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f7ea:	b183      	cbz	r3, 800f80e <__mdiff+0xb6>
 800f7ec:	6106      	str	r6, [r0, #16]
 800f7ee:	e7c5      	b.n	800f77c <__mdiff+0x24>
 800f7f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f7f4:	fa1e f381 	uxtah	r3, lr, r1
 800f7f8:	141a      	asrs	r2, r3, #16
 800f7fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f804:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f808:	f845 3b04 	str.w	r3, [r5], #4
 800f80c:	e7e9      	b.n	800f7e2 <__mdiff+0x8a>
 800f80e:	3e01      	subs	r6, #1
 800f810:	e7e9      	b.n	800f7e6 <__mdiff+0x8e>
	...

0800f814 <__ulp>:
 800f814:	4b12      	ldr	r3, [pc, #72]	; (800f860 <__ulp+0x4c>)
 800f816:	ee10 2a90 	vmov	r2, s1
 800f81a:	401a      	ands	r2, r3
 800f81c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f820:	2b00      	cmp	r3, #0
 800f822:	dd04      	ble.n	800f82e <__ulp+0x1a>
 800f824:	2000      	movs	r0, #0
 800f826:	4619      	mov	r1, r3
 800f828:	ec41 0b10 	vmov	d0, r0, r1
 800f82c:	4770      	bx	lr
 800f82e:	425b      	negs	r3, r3
 800f830:	151b      	asrs	r3, r3, #20
 800f832:	2b13      	cmp	r3, #19
 800f834:	f04f 0000 	mov.w	r0, #0
 800f838:	f04f 0100 	mov.w	r1, #0
 800f83c:	dc04      	bgt.n	800f848 <__ulp+0x34>
 800f83e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f842:	fa42 f103 	asr.w	r1, r2, r3
 800f846:	e7ef      	b.n	800f828 <__ulp+0x14>
 800f848:	3b14      	subs	r3, #20
 800f84a:	2b1e      	cmp	r3, #30
 800f84c:	f04f 0201 	mov.w	r2, #1
 800f850:	bfda      	itte	le
 800f852:	f1c3 031f 	rsble	r3, r3, #31
 800f856:	fa02 f303 	lslle.w	r3, r2, r3
 800f85a:	4613      	movgt	r3, r2
 800f85c:	4618      	mov	r0, r3
 800f85e:	e7e3      	b.n	800f828 <__ulp+0x14>
 800f860:	7ff00000 	.word	0x7ff00000

0800f864 <__b2d>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	6905      	ldr	r5, [r0, #16]
 800f868:	f100 0714 	add.w	r7, r0, #20
 800f86c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f870:	1f2e      	subs	r6, r5, #4
 800f872:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f876:	4620      	mov	r0, r4
 800f878:	f7ff fdc4 	bl	800f404 <__hi0bits>
 800f87c:	f1c0 0320 	rsb	r3, r0, #32
 800f880:	280a      	cmp	r0, #10
 800f882:	600b      	str	r3, [r1, #0]
 800f884:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f8fc <__b2d+0x98>
 800f888:	dc14      	bgt.n	800f8b4 <__b2d+0x50>
 800f88a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f88e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f892:	42b7      	cmp	r7, r6
 800f894:	ea41 030c 	orr.w	r3, r1, ip
 800f898:	bf34      	ite	cc
 800f89a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f89e:	2100      	movcs	r1, #0
 800f8a0:	3015      	adds	r0, #21
 800f8a2:	fa04 f000 	lsl.w	r0, r4, r0
 800f8a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f8aa:	ea40 0201 	orr.w	r2, r0, r1
 800f8ae:	ec43 2b10 	vmov	d0, r2, r3
 800f8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b4:	42b7      	cmp	r7, r6
 800f8b6:	bf3a      	itte	cc
 800f8b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f8bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f8c0:	2100      	movcs	r1, #0
 800f8c2:	380b      	subs	r0, #11
 800f8c4:	d015      	beq.n	800f8f2 <__b2d+0x8e>
 800f8c6:	4084      	lsls	r4, r0
 800f8c8:	f1c0 0520 	rsb	r5, r0, #32
 800f8cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f8d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f8d4:	42be      	cmp	r6, r7
 800f8d6:	fa21 fc05 	lsr.w	ip, r1, r5
 800f8da:	ea44 030c 	orr.w	r3, r4, ip
 800f8de:	bf8c      	ite	hi
 800f8e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f8e4:	2400      	movls	r4, #0
 800f8e6:	fa01 f000 	lsl.w	r0, r1, r0
 800f8ea:	40ec      	lsrs	r4, r5
 800f8ec:	ea40 0204 	orr.w	r2, r0, r4
 800f8f0:	e7dd      	b.n	800f8ae <__b2d+0x4a>
 800f8f2:	ea44 030c 	orr.w	r3, r4, ip
 800f8f6:	460a      	mov	r2, r1
 800f8f8:	e7d9      	b.n	800f8ae <__b2d+0x4a>
 800f8fa:	bf00      	nop
 800f8fc:	3ff00000 	.word	0x3ff00000

0800f900 <__d2b>:
 800f900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f904:	460e      	mov	r6, r1
 800f906:	2101      	movs	r1, #1
 800f908:	ec59 8b10 	vmov	r8, r9, d0
 800f90c:	4615      	mov	r5, r2
 800f90e:	f7ff fcb5 	bl	800f27c <_Balloc>
 800f912:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f916:	4607      	mov	r7, r0
 800f918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f91c:	bb34      	cbnz	r4, 800f96c <__d2b+0x6c>
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	f1b8 0300 	subs.w	r3, r8, #0
 800f924:	d027      	beq.n	800f976 <__d2b+0x76>
 800f926:	a802      	add	r0, sp, #8
 800f928:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f92c:	f7ff fd89 	bl	800f442 <__lo0bits>
 800f930:	9900      	ldr	r1, [sp, #0]
 800f932:	b1f0      	cbz	r0, 800f972 <__d2b+0x72>
 800f934:	9a01      	ldr	r2, [sp, #4]
 800f936:	f1c0 0320 	rsb	r3, r0, #32
 800f93a:	fa02 f303 	lsl.w	r3, r2, r3
 800f93e:	430b      	orrs	r3, r1
 800f940:	40c2      	lsrs	r2, r0
 800f942:	617b      	str	r3, [r7, #20]
 800f944:	9201      	str	r2, [sp, #4]
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	61bb      	str	r3, [r7, #24]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	bf14      	ite	ne
 800f94e:	2102      	movne	r1, #2
 800f950:	2101      	moveq	r1, #1
 800f952:	6139      	str	r1, [r7, #16]
 800f954:	b1c4      	cbz	r4, 800f988 <__d2b+0x88>
 800f956:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f95a:	4404      	add	r4, r0
 800f95c:	6034      	str	r4, [r6, #0]
 800f95e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f962:	6028      	str	r0, [r5, #0]
 800f964:	4638      	mov	r0, r7
 800f966:	b003      	add	sp, #12
 800f968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f96c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f970:	e7d5      	b.n	800f91e <__d2b+0x1e>
 800f972:	6179      	str	r1, [r7, #20]
 800f974:	e7e7      	b.n	800f946 <__d2b+0x46>
 800f976:	a801      	add	r0, sp, #4
 800f978:	f7ff fd63 	bl	800f442 <__lo0bits>
 800f97c:	9b01      	ldr	r3, [sp, #4]
 800f97e:	617b      	str	r3, [r7, #20]
 800f980:	2101      	movs	r1, #1
 800f982:	6139      	str	r1, [r7, #16]
 800f984:	3020      	adds	r0, #32
 800f986:	e7e5      	b.n	800f954 <__d2b+0x54>
 800f988:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f990:	6030      	str	r0, [r6, #0]
 800f992:	6918      	ldr	r0, [r3, #16]
 800f994:	f7ff fd36 	bl	800f404 <__hi0bits>
 800f998:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f99c:	e7e1      	b.n	800f962 <__d2b+0x62>

0800f99e <__ratio>:
 800f99e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a2:	4688      	mov	r8, r1
 800f9a4:	4669      	mov	r1, sp
 800f9a6:	4681      	mov	r9, r0
 800f9a8:	f7ff ff5c 	bl	800f864 <__b2d>
 800f9ac:	a901      	add	r1, sp, #4
 800f9ae:	4640      	mov	r0, r8
 800f9b0:	ec57 6b10 	vmov	r6, r7, d0
 800f9b4:	f7ff ff56 	bl	800f864 <__b2d>
 800f9b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9c0:	eba3 0c02 	sub.w	ip, r3, r2
 800f9c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9c8:	1a9b      	subs	r3, r3, r2
 800f9ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f9ce:	ec5b ab10 	vmov	sl, fp, d0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	bfce      	itee	gt
 800f9d6:	463a      	movgt	r2, r7
 800f9d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f9dc:	465a      	movle	r2, fp
 800f9de:	4659      	mov	r1, fp
 800f9e0:	463d      	mov	r5, r7
 800f9e2:	bfd4      	ite	le
 800f9e4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f9e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	ee10 2a10 	vmov	r2, s0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	f7f0 ff31 	bl	800085c <__aeabi_ddiv>
 800f9fa:	ec41 0b10 	vmov	d0, r0, r1
 800f9fe:	b003      	add	sp, #12
 800fa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa04 <__copybits>:
 800fa04:	3901      	subs	r1, #1
 800fa06:	b510      	push	{r4, lr}
 800fa08:	1149      	asrs	r1, r1, #5
 800fa0a:	6914      	ldr	r4, [r2, #16]
 800fa0c:	3101      	adds	r1, #1
 800fa0e:	f102 0314 	add.w	r3, r2, #20
 800fa12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa1a:	42a3      	cmp	r3, r4
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	d303      	bcc.n	800fa28 <__copybits+0x24>
 800fa20:	2300      	movs	r3, #0
 800fa22:	428a      	cmp	r2, r1
 800fa24:	d305      	bcc.n	800fa32 <__copybits+0x2e>
 800fa26:	bd10      	pop	{r4, pc}
 800fa28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa2c:	f840 2b04 	str.w	r2, [r0], #4
 800fa30:	e7f3      	b.n	800fa1a <__copybits+0x16>
 800fa32:	f842 3b04 	str.w	r3, [r2], #4
 800fa36:	e7f4      	b.n	800fa22 <__copybits+0x1e>

0800fa38 <__any_on>:
 800fa38:	f100 0214 	add.w	r2, r0, #20
 800fa3c:	6900      	ldr	r0, [r0, #16]
 800fa3e:	114b      	asrs	r3, r1, #5
 800fa40:	4298      	cmp	r0, r3
 800fa42:	b510      	push	{r4, lr}
 800fa44:	db11      	blt.n	800fa6a <__any_on+0x32>
 800fa46:	dd0a      	ble.n	800fa5e <__any_on+0x26>
 800fa48:	f011 011f 	ands.w	r1, r1, #31
 800fa4c:	d007      	beq.n	800fa5e <__any_on+0x26>
 800fa4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa52:	fa24 f001 	lsr.w	r0, r4, r1
 800fa56:	fa00 f101 	lsl.w	r1, r0, r1
 800fa5a:	428c      	cmp	r4, r1
 800fa5c:	d10b      	bne.n	800fa76 <__any_on+0x3e>
 800fa5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d803      	bhi.n	800fa6e <__any_on+0x36>
 800fa66:	2000      	movs	r0, #0
 800fa68:	bd10      	pop	{r4, pc}
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	e7f7      	b.n	800fa5e <__any_on+0x26>
 800fa6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa72:	2900      	cmp	r1, #0
 800fa74:	d0f5      	beq.n	800fa62 <__any_on+0x2a>
 800fa76:	2001      	movs	r0, #1
 800fa78:	e7f6      	b.n	800fa68 <__any_on+0x30>

0800fa7a <_calloc_r>:
 800fa7a:	b538      	push	{r3, r4, r5, lr}
 800fa7c:	fb02 f401 	mul.w	r4, r2, r1
 800fa80:	4621      	mov	r1, r4
 800fa82:	f000 f857 	bl	800fb34 <_malloc_r>
 800fa86:	4605      	mov	r5, r0
 800fa88:	b118      	cbz	r0, 800fa92 <_calloc_r+0x18>
 800fa8a:	4622      	mov	r2, r4
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	f7fc fc54 	bl	800c33a <memset>
 800fa92:	4628      	mov	r0, r5
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fa98 <_free_r>:
 800fa98:	b538      	push	{r3, r4, r5, lr}
 800fa9a:	4605      	mov	r5, r0
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	d045      	beq.n	800fb2c <_free_r+0x94>
 800faa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa4:	1f0c      	subs	r4, r1, #4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	bfb8      	it	lt
 800faaa:	18e4      	addlt	r4, r4, r3
 800faac:	f000 fdc3 	bl	8010636 <__malloc_lock>
 800fab0:	4a1f      	ldr	r2, [pc, #124]	; (800fb30 <_free_r+0x98>)
 800fab2:	6813      	ldr	r3, [r2, #0]
 800fab4:	4610      	mov	r0, r2
 800fab6:	b933      	cbnz	r3, 800fac6 <_free_r+0x2e>
 800fab8:	6063      	str	r3, [r4, #4]
 800faba:	6014      	str	r4, [r2, #0]
 800fabc:	4628      	mov	r0, r5
 800fabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fac2:	f000 bdb9 	b.w	8010638 <__malloc_unlock>
 800fac6:	42a3      	cmp	r3, r4
 800fac8:	d90c      	bls.n	800fae4 <_free_r+0x4c>
 800faca:	6821      	ldr	r1, [r4, #0]
 800facc:	1862      	adds	r2, r4, r1
 800face:	4293      	cmp	r3, r2
 800fad0:	bf04      	itt	eq
 800fad2:	681a      	ldreq	r2, [r3, #0]
 800fad4:	685b      	ldreq	r3, [r3, #4]
 800fad6:	6063      	str	r3, [r4, #4]
 800fad8:	bf04      	itt	eq
 800fada:	1852      	addeq	r2, r2, r1
 800fadc:	6022      	streq	r2, [r4, #0]
 800fade:	6004      	str	r4, [r0, #0]
 800fae0:	e7ec      	b.n	800fabc <_free_r+0x24>
 800fae2:	4613      	mov	r3, r2
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	b10a      	cbz	r2, 800faec <_free_r+0x54>
 800fae8:	42a2      	cmp	r2, r4
 800faea:	d9fa      	bls.n	800fae2 <_free_r+0x4a>
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	1858      	adds	r0, r3, r1
 800faf0:	42a0      	cmp	r0, r4
 800faf2:	d10b      	bne.n	800fb0c <_free_r+0x74>
 800faf4:	6820      	ldr	r0, [r4, #0]
 800faf6:	4401      	add	r1, r0
 800faf8:	1858      	adds	r0, r3, r1
 800fafa:	4282      	cmp	r2, r0
 800fafc:	6019      	str	r1, [r3, #0]
 800fafe:	d1dd      	bne.n	800fabc <_free_r+0x24>
 800fb00:	6810      	ldr	r0, [r2, #0]
 800fb02:	6852      	ldr	r2, [r2, #4]
 800fb04:	605a      	str	r2, [r3, #4]
 800fb06:	4401      	add	r1, r0
 800fb08:	6019      	str	r1, [r3, #0]
 800fb0a:	e7d7      	b.n	800fabc <_free_r+0x24>
 800fb0c:	d902      	bls.n	800fb14 <_free_r+0x7c>
 800fb0e:	230c      	movs	r3, #12
 800fb10:	602b      	str	r3, [r5, #0]
 800fb12:	e7d3      	b.n	800fabc <_free_r+0x24>
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	1821      	adds	r1, r4, r0
 800fb18:	428a      	cmp	r2, r1
 800fb1a:	bf04      	itt	eq
 800fb1c:	6811      	ldreq	r1, [r2, #0]
 800fb1e:	6852      	ldreq	r2, [r2, #4]
 800fb20:	6062      	str	r2, [r4, #4]
 800fb22:	bf04      	itt	eq
 800fb24:	1809      	addeq	r1, r1, r0
 800fb26:	6021      	streq	r1, [r4, #0]
 800fb28:	605c      	str	r4, [r3, #4]
 800fb2a:	e7c7      	b.n	800fabc <_free_r+0x24>
 800fb2c:	bd38      	pop	{r3, r4, r5, pc}
 800fb2e:	bf00      	nop
 800fb30:	200004bc 	.word	0x200004bc

0800fb34 <_malloc_r>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	1ccd      	adds	r5, r1, #3
 800fb38:	f025 0503 	bic.w	r5, r5, #3
 800fb3c:	3508      	adds	r5, #8
 800fb3e:	2d0c      	cmp	r5, #12
 800fb40:	bf38      	it	cc
 800fb42:	250c      	movcc	r5, #12
 800fb44:	2d00      	cmp	r5, #0
 800fb46:	4606      	mov	r6, r0
 800fb48:	db01      	blt.n	800fb4e <_malloc_r+0x1a>
 800fb4a:	42a9      	cmp	r1, r5
 800fb4c:	d903      	bls.n	800fb56 <_malloc_r+0x22>
 800fb4e:	230c      	movs	r3, #12
 800fb50:	6033      	str	r3, [r6, #0]
 800fb52:	2000      	movs	r0, #0
 800fb54:	bd70      	pop	{r4, r5, r6, pc}
 800fb56:	f000 fd6e 	bl	8010636 <__malloc_lock>
 800fb5a:	4a21      	ldr	r2, [pc, #132]	; (800fbe0 <_malloc_r+0xac>)
 800fb5c:	6814      	ldr	r4, [r2, #0]
 800fb5e:	4621      	mov	r1, r4
 800fb60:	b991      	cbnz	r1, 800fb88 <_malloc_r+0x54>
 800fb62:	4c20      	ldr	r4, [pc, #128]	; (800fbe4 <_malloc_r+0xb0>)
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	b91b      	cbnz	r3, 800fb70 <_malloc_r+0x3c>
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f000 facf 	bl	801010c <_sbrk_r>
 800fb6e:	6020      	str	r0, [r4, #0]
 800fb70:	4629      	mov	r1, r5
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 faca 	bl	801010c <_sbrk_r>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d124      	bne.n	800fbc6 <_malloc_r+0x92>
 800fb7c:	230c      	movs	r3, #12
 800fb7e:	6033      	str	r3, [r6, #0]
 800fb80:	4630      	mov	r0, r6
 800fb82:	f000 fd59 	bl	8010638 <__malloc_unlock>
 800fb86:	e7e4      	b.n	800fb52 <_malloc_r+0x1e>
 800fb88:	680b      	ldr	r3, [r1, #0]
 800fb8a:	1b5b      	subs	r3, r3, r5
 800fb8c:	d418      	bmi.n	800fbc0 <_malloc_r+0x8c>
 800fb8e:	2b0b      	cmp	r3, #11
 800fb90:	d90f      	bls.n	800fbb2 <_malloc_r+0x7e>
 800fb92:	600b      	str	r3, [r1, #0]
 800fb94:	50cd      	str	r5, [r1, r3]
 800fb96:	18cc      	adds	r4, r1, r3
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f000 fd4d 	bl	8010638 <__malloc_unlock>
 800fb9e:	f104 000b 	add.w	r0, r4, #11
 800fba2:	1d23      	adds	r3, r4, #4
 800fba4:	f020 0007 	bic.w	r0, r0, #7
 800fba8:	1ac3      	subs	r3, r0, r3
 800fbaa:	d0d3      	beq.n	800fb54 <_malloc_r+0x20>
 800fbac:	425a      	negs	r2, r3
 800fbae:	50e2      	str	r2, [r4, r3]
 800fbb0:	e7d0      	b.n	800fb54 <_malloc_r+0x20>
 800fbb2:	428c      	cmp	r4, r1
 800fbb4:	684b      	ldr	r3, [r1, #4]
 800fbb6:	bf16      	itet	ne
 800fbb8:	6063      	strne	r3, [r4, #4]
 800fbba:	6013      	streq	r3, [r2, #0]
 800fbbc:	460c      	movne	r4, r1
 800fbbe:	e7eb      	b.n	800fb98 <_malloc_r+0x64>
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	6849      	ldr	r1, [r1, #4]
 800fbc4:	e7cc      	b.n	800fb60 <_malloc_r+0x2c>
 800fbc6:	1cc4      	adds	r4, r0, #3
 800fbc8:	f024 0403 	bic.w	r4, r4, #3
 800fbcc:	42a0      	cmp	r0, r4
 800fbce:	d005      	beq.n	800fbdc <_malloc_r+0xa8>
 800fbd0:	1a21      	subs	r1, r4, r0
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f000 fa9a 	bl	801010c <_sbrk_r>
 800fbd8:	3001      	adds	r0, #1
 800fbda:	d0cf      	beq.n	800fb7c <_malloc_r+0x48>
 800fbdc:	6025      	str	r5, [r4, #0]
 800fbde:	e7db      	b.n	800fb98 <_malloc_r+0x64>
 800fbe0:	200004bc 	.word	0x200004bc
 800fbe4:	200004c0 	.word	0x200004c0

0800fbe8 <__ssputs_r>:
 800fbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbec:	688e      	ldr	r6, [r1, #8]
 800fbee:	429e      	cmp	r6, r3
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4690      	mov	r8, r2
 800fbf6:	4699      	mov	r9, r3
 800fbf8:	d837      	bhi.n	800fc6a <__ssputs_r+0x82>
 800fbfa:	898a      	ldrh	r2, [r1, #12]
 800fbfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc00:	d031      	beq.n	800fc66 <__ssputs_r+0x7e>
 800fc02:	6825      	ldr	r5, [r4, #0]
 800fc04:	6909      	ldr	r1, [r1, #16]
 800fc06:	1a6f      	subs	r7, r5, r1
 800fc08:	6965      	ldr	r5, [r4, #20]
 800fc0a:	2302      	movs	r3, #2
 800fc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc10:	fb95 f5f3 	sdiv	r5, r5, r3
 800fc14:	f109 0301 	add.w	r3, r9, #1
 800fc18:	443b      	add	r3, r7
 800fc1a:	429d      	cmp	r5, r3
 800fc1c:	bf38      	it	cc
 800fc1e:	461d      	movcc	r5, r3
 800fc20:	0553      	lsls	r3, r2, #21
 800fc22:	d530      	bpl.n	800fc86 <__ssputs_r+0x9e>
 800fc24:	4629      	mov	r1, r5
 800fc26:	f7ff ff85 	bl	800fb34 <_malloc_r>
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	b950      	cbnz	r0, 800fc44 <__ssputs_r+0x5c>
 800fc2e:	230c      	movs	r3, #12
 800fc30:	f8ca 3000 	str.w	r3, [sl]
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc44:	463a      	mov	r2, r7
 800fc46:	6921      	ldr	r1, [r4, #16]
 800fc48:	f7fc fb6c 	bl	800c324 <memcpy>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc56:	81a3      	strh	r3, [r4, #12]
 800fc58:	6126      	str	r6, [r4, #16]
 800fc5a:	6165      	str	r5, [r4, #20]
 800fc5c:	443e      	add	r6, r7
 800fc5e:	1bed      	subs	r5, r5, r7
 800fc60:	6026      	str	r6, [r4, #0]
 800fc62:	60a5      	str	r5, [r4, #8]
 800fc64:	464e      	mov	r6, r9
 800fc66:	454e      	cmp	r6, r9
 800fc68:	d900      	bls.n	800fc6c <__ssputs_r+0x84>
 800fc6a:	464e      	mov	r6, r9
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	4641      	mov	r1, r8
 800fc70:	6820      	ldr	r0, [r4, #0]
 800fc72:	f000 fcc7 	bl	8010604 <memmove>
 800fc76:	68a3      	ldr	r3, [r4, #8]
 800fc78:	1b9b      	subs	r3, r3, r6
 800fc7a:	60a3      	str	r3, [r4, #8]
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	441e      	add	r6, r3
 800fc80:	6026      	str	r6, [r4, #0]
 800fc82:	2000      	movs	r0, #0
 800fc84:	e7dc      	b.n	800fc40 <__ssputs_r+0x58>
 800fc86:	462a      	mov	r2, r5
 800fc88:	f000 fcd7 	bl	801063a <_realloc_r>
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d1e2      	bne.n	800fc58 <__ssputs_r+0x70>
 800fc92:	6921      	ldr	r1, [r4, #16]
 800fc94:	4650      	mov	r0, sl
 800fc96:	f7ff feff 	bl	800fa98 <_free_r>
 800fc9a:	e7c8      	b.n	800fc2e <__ssputs_r+0x46>

0800fc9c <_svfiprintf_r>:
 800fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	461d      	mov	r5, r3
 800fca2:	898b      	ldrh	r3, [r1, #12]
 800fca4:	061f      	lsls	r7, r3, #24
 800fca6:	b09d      	sub	sp, #116	; 0x74
 800fca8:	4680      	mov	r8, r0
 800fcaa:	460c      	mov	r4, r1
 800fcac:	4616      	mov	r6, r2
 800fcae:	d50f      	bpl.n	800fcd0 <_svfiprintf_r+0x34>
 800fcb0:	690b      	ldr	r3, [r1, #16]
 800fcb2:	b96b      	cbnz	r3, 800fcd0 <_svfiprintf_r+0x34>
 800fcb4:	2140      	movs	r1, #64	; 0x40
 800fcb6:	f7ff ff3d 	bl	800fb34 <_malloc_r>
 800fcba:	6020      	str	r0, [r4, #0]
 800fcbc:	6120      	str	r0, [r4, #16]
 800fcbe:	b928      	cbnz	r0, 800fccc <_svfiprintf_r+0x30>
 800fcc0:	230c      	movs	r3, #12
 800fcc2:	f8c8 3000 	str.w	r3, [r8]
 800fcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcca:	e0c8      	b.n	800fe5e <_svfiprintf_r+0x1c2>
 800fccc:	2340      	movs	r3, #64	; 0x40
 800fcce:	6163      	str	r3, [r4, #20]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd4:	2320      	movs	r3, #32
 800fcd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcda:	2330      	movs	r3, #48	; 0x30
 800fcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fce0:	9503      	str	r5, [sp, #12]
 800fce2:	f04f 0b01 	mov.w	fp, #1
 800fce6:	4637      	mov	r7, r6
 800fce8:	463d      	mov	r5, r7
 800fcea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcee:	b10b      	cbz	r3, 800fcf4 <_svfiprintf_r+0x58>
 800fcf0:	2b25      	cmp	r3, #37	; 0x25
 800fcf2:	d13e      	bne.n	800fd72 <_svfiprintf_r+0xd6>
 800fcf4:	ebb7 0a06 	subs.w	sl, r7, r6
 800fcf8:	d00b      	beq.n	800fd12 <_svfiprintf_r+0x76>
 800fcfa:	4653      	mov	r3, sl
 800fcfc:	4632      	mov	r2, r6
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4640      	mov	r0, r8
 800fd02:	f7ff ff71 	bl	800fbe8 <__ssputs_r>
 800fd06:	3001      	adds	r0, #1
 800fd08:	f000 80a4 	beq.w	800fe54 <_svfiprintf_r+0x1b8>
 800fd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0e:	4453      	add	r3, sl
 800fd10:	9309      	str	r3, [sp, #36]	; 0x24
 800fd12:	783b      	ldrb	r3, [r7, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 809d 	beq.w	800fe54 <_svfiprintf_r+0x1b8>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd24:	9304      	str	r3, [sp, #16]
 800fd26:	9307      	str	r3, [sp, #28]
 800fd28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd2c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd2e:	462f      	mov	r7, r5
 800fd30:	2205      	movs	r2, #5
 800fd32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fd36:	4850      	ldr	r0, [pc, #320]	; (800fe78 <_svfiprintf_r+0x1dc>)
 800fd38:	f7f0 fa5a 	bl	80001f0 <memchr>
 800fd3c:	9b04      	ldr	r3, [sp, #16]
 800fd3e:	b9d0      	cbnz	r0, 800fd76 <_svfiprintf_r+0xda>
 800fd40:	06d9      	lsls	r1, r3, #27
 800fd42:	bf44      	itt	mi
 800fd44:	2220      	movmi	r2, #32
 800fd46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd4a:	071a      	lsls	r2, r3, #28
 800fd4c:	bf44      	itt	mi
 800fd4e:	222b      	movmi	r2, #43	; 0x2b
 800fd50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd54:	782a      	ldrb	r2, [r5, #0]
 800fd56:	2a2a      	cmp	r2, #42	; 0x2a
 800fd58:	d015      	beq.n	800fd86 <_svfiprintf_r+0xea>
 800fd5a:	9a07      	ldr	r2, [sp, #28]
 800fd5c:	462f      	mov	r7, r5
 800fd5e:	2000      	movs	r0, #0
 800fd60:	250a      	movs	r5, #10
 800fd62:	4639      	mov	r1, r7
 800fd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd68:	3b30      	subs	r3, #48	; 0x30
 800fd6a:	2b09      	cmp	r3, #9
 800fd6c:	d94d      	bls.n	800fe0a <_svfiprintf_r+0x16e>
 800fd6e:	b1b8      	cbz	r0, 800fda0 <_svfiprintf_r+0x104>
 800fd70:	e00f      	b.n	800fd92 <_svfiprintf_r+0xf6>
 800fd72:	462f      	mov	r7, r5
 800fd74:	e7b8      	b.n	800fce8 <_svfiprintf_r+0x4c>
 800fd76:	4a40      	ldr	r2, [pc, #256]	; (800fe78 <_svfiprintf_r+0x1dc>)
 800fd78:	1a80      	subs	r0, r0, r2
 800fd7a:	fa0b f000 	lsl.w	r0, fp, r0
 800fd7e:	4318      	orrs	r0, r3
 800fd80:	9004      	str	r0, [sp, #16]
 800fd82:	463d      	mov	r5, r7
 800fd84:	e7d3      	b.n	800fd2e <_svfiprintf_r+0x92>
 800fd86:	9a03      	ldr	r2, [sp, #12]
 800fd88:	1d11      	adds	r1, r2, #4
 800fd8a:	6812      	ldr	r2, [r2, #0]
 800fd8c:	9103      	str	r1, [sp, #12]
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	db01      	blt.n	800fd96 <_svfiprintf_r+0xfa>
 800fd92:	9207      	str	r2, [sp, #28]
 800fd94:	e004      	b.n	800fda0 <_svfiprintf_r+0x104>
 800fd96:	4252      	negs	r2, r2
 800fd98:	f043 0302 	orr.w	r3, r3, #2
 800fd9c:	9207      	str	r2, [sp, #28]
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	783b      	ldrb	r3, [r7, #0]
 800fda2:	2b2e      	cmp	r3, #46	; 0x2e
 800fda4:	d10c      	bne.n	800fdc0 <_svfiprintf_r+0x124>
 800fda6:	787b      	ldrb	r3, [r7, #1]
 800fda8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdaa:	d133      	bne.n	800fe14 <_svfiprintf_r+0x178>
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	1d1a      	adds	r2, r3, #4
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	9203      	str	r2, [sp, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	bfb8      	it	lt
 800fdb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdbc:	3702      	adds	r7, #2
 800fdbe:	9305      	str	r3, [sp, #20]
 800fdc0:	4d2e      	ldr	r5, [pc, #184]	; (800fe7c <_svfiprintf_r+0x1e0>)
 800fdc2:	7839      	ldrb	r1, [r7, #0]
 800fdc4:	2203      	movs	r2, #3
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7f0 fa12 	bl	80001f0 <memchr>
 800fdcc:	b138      	cbz	r0, 800fdde <_svfiprintf_r+0x142>
 800fdce:	2340      	movs	r3, #64	; 0x40
 800fdd0:	1b40      	subs	r0, r0, r5
 800fdd2:	fa03 f000 	lsl.w	r0, r3, r0
 800fdd6:	9b04      	ldr	r3, [sp, #16]
 800fdd8:	4303      	orrs	r3, r0
 800fdda:	3701      	adds	r7, #1
 800fddc:	9304      	str	r3, [sp, #16]
 800fdde:	7839      	ldrb	r1, [r7, #0]
 800fde0:	4827      	ldr	r0, [pc, #156]	; (800fe80 <_svfiprintf_r+0x1e4>)
 800fde2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fde6:	2206      	movs	r2, #6
 800fde8:	1c7e      	adds	r6, r7, #1
 800fdea:	f7f0 fa01 	bl	80001f0 <memchr>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d038      	beq.n	800fe64 <_svfiprintf_r+0x1c8>
 800fdf2:	4b24      	ldr	r3, [pc, #144]	; (800fe84 <_svfiprintf_r+0x1e8>)
 800fdf4:	bb13      	cbnz	r3, 800fe3c <_svfiprintf_r+0x1a0>
 800fdf6:	9b03      	ldr	r3, [sp, #12]
 800fdf8:	3307      	adds	r3, #7
 800fdfa:	f023 0307 	bic.w	r3, r3, #7
 800fdfe:	3308      	adds	r3, #8
 800fe00:	9303      	str	r3, [sp, #12]
 800fe02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe04:	444b      	add	r3, r9
 800fe06:	9309      	str	r3, [sp, #36]	; 0x24
 800fe08:	e76d      	b.n	800fce6 <_svfiprintf_r+0x4a>
 800fe0a:	fb05 3202 	mla	r2, r5, r2, r3
 800fe0e:	2001      	movs	r0, #1
 800fe10:	460f      	mov	r7, r1
 800fe12:	e7a6      	b.n	800fd62 <_svfiprintf_r+0xc6>
 800fe14:	2300      	movs	r3, #0
 800fe16:	3701      	adds	r7, #1
 800fe18:	9305      	str	r3, [sp, #20]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	250a      	movs	r5, #10
 800fe1e:	4638      	mov	r0, r7
 800fe20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe24:	3a30      	subs	r2, #48	; 0x30
 800fe26:	2a09      	cmp	r2, #9
 800fe28:	d903      	bls.n	800fe32 <_svfiprintf_r+0x196>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c8      	beq.n	800fdc0 <_svfiprintf_r+0x124>
 800fe2e:	9105      	str	r1, [sp, #20]
 800fe30:	e7c6      	b.n	800fdc0 <_svfiprintf_r+0x124>
 800fe32:	fb05 2101 	mla	r1, r5, r1, r2
 800fe36:	2301      	movs	r3, #1
 800fe38:	4607      	mov	r7, r0
 800fe3a:	e7f0      	b.n	800fe1e <_svfiprintf_r+0x182>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	4622      	mov	r2, r4
 800fe42:	4b11      	ldr	r3, [pc, #68]	; (800fe88 <_svfiprintf_r+0x1ec>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4640      	mov	r0, r8
 800fe48:	f7fc fb14 	bl	800c474 <_printf_float>
 800fe4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fe50:	4681      	mov	r9, r0
 800fe52:	d1d6      	bne.n	800fe02 <_svfiprintf_r+0x166>
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	065b      	lsls	r3, r3, #25
 800fe58:	f53f af35 	bmi.w	800fcc6 <_svfiprintf_r+0x2a>
 800fe5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe5e:	b01d      	add	sp, #116	; 0x74
 800fe60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe64:	ab03      	add	r3, sp, #12
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	4622      	mov	r2, r4
 800fe6a:	4b07      	ldr	r3, [pc, #28]	; (800fe88 <_svfiprintf_r+0x1ec>)
 800fe6c:	a904      	add	r1, sp, #16
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f7fc fdb6 	bl	800c9e0 <_printf_i>
 800fe74:	e7ea      	b.n	800fe4c <_svfiprintf_r+0x1b0>
 800fe76:	bf00      	nop
 800fe78:	080109b4 	.word	0x080109b4
 800fe7c:	080109ba 	.word	0x080109ba
 800fe80:	080109be 	.word	0x080109be
 800fe84:	0800c475 	.word	0x0800c475
 800fe88:	0800fbe9 	.word	0x0800fbe9

0800fe8c <__sfputc_r>:
 800fe8c:	6893      	ldr	r3, [r2, #8]
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	b410      	push	{r4}
 800fe94:	6093      	str	r3, [r2, #8]
 800fe96:	da08      	bge.n	800feaa <__sfputc_r+0x1e>
 800fe98:	6994      	ldr	r4, [r2, #24]
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	db01      	blt.n	800fea2 <__sfputc_r+0x16>
 800fe9e:	290a      	cmp	r1, #10
 800fea0:	d103      	bne.n	800feaa <__sfputc_r+0x1e>
 800fea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fea6:	f000 b997 	b.w	80101d8 <__swbuf_r>
 800feaa:	6813      	ldr	r3, [r2, #0]
 800feac:	1c58      	adds	r0, r3, #1
 800feae:	6010      	str	r0, [r2, #0]
 800feb0:	7019      	strb	r1, [r3, #0]
 800feb2:	4608      	mov	r0, r1
 800feb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feb8:	4770      	bx	lr

0800feba <__sfputs_r>:
 800feba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febc:	4606      	mov	r6, r0
 800febe:	460f      	mov	r7, r1
 800fec0:	4614      	mov	r4, r2
 800fec2:	18d5      	adds	r5, r2, r3
 800fec4:	42ac      	cmp	r4, r5
 800fec6:	d101      	bne.n	800fecc <__sfputs_r+0x12>
 800fec8:	2000      	movs	r0, #0
 800feca:	e007      	b.n	800fedc <__sfputs_r+0x22>
 800fecc:	463a      	mov	r2, r7
 800fece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fed2:	4630      	mov	r0, r6
 800fed4:	f7ff ffda 	bl	800fe8c <__sfputc_r>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d1f3      	bne.n	800fec4 <__sfputs_r+0xa>
 800fedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fee0 <_vfiprintf_r>:
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	460c      	mov	r4, r1
 800fee6:	b09d      	sub	sp, #116	; 0x74
 800fee8:	4617      	mov	r7, r2
 800feea:	461d      	mov	r5, r3
 800feec:	4606      	mov	r6, r0
 800feee:	b118      	cbz	r0, 800fef8 <_vfiprintf_r+0x18>
 800fef0:	6983      	ldr	r3, [r0, #24]
 800fef2:	b90b      	cbnz	r3, 800fef8 <_vfiprintf_r+0x18>
 800fef4:	f7fe fde4 	bl	800eac0 <__sinit>
 800fef8:	4b7c      	ldr	r3, [pc, #496]	; (80100ec <_vfiprintf_r+0x20c>)
 800fefa:	429c      	cmp	r4, r3
 800fefc:	d158      	bne.n	800ffb0 <_vfiprintf_r+0xd0>
 800fefe:	6874      	ldr	r4, [r6, #4]
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	0718      	lsls	r0, r3, #28
 800ff04:	d55e      	bpl.n	800ffc4 <_vfiprintf_r+0xe4>
 800ff06:	6923      	ldr	r3, [r4, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d05b      	beq.n	800ffc4 <_vfiprintf_r+0xe4>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff10:	2320      	movs	r3, #32
 800ff12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff16:	2330      	movs	r3, #48	; 0x30
 800ff18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff1c:	9503      	str	r5, [sp, #12]
 800ff1e:	f04f 0b01 	mov.w	fp, #1
 800ff22:	46b8      	mov	r8, r7
 800ff24:	4645      	mov	r5, r8
 800ff26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff2a:	b10b      	cbz	r3, 800ff30 <_vfiprintf_r+0x50>
 800ff2c:	2b25      	cmp	r3, #37	; 0x25
 800ff2e:	d154      	bne.n	800ffda <_vfiprintf_r+0xfa>
 800ff30:	ebb8 0a07 	subs.w	sl, r8, r7
 800ff34:	d00b      	beq.n	800ff4e <_vfiprintf_r+0x6e>
 800ff36:	4653      	mov	r3, sl
 800ff38:	463a      	mov	r2, r7
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	f7ff ffbc 	bl	800feba <__sfputs_r>
 800ff42:	3001      	adds	r0, #1
 800ff44:	f000 80c2 	beq.w	80100cc <_vfiprintf_r+0x1ec>
 800ff48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4a:	4453      	add	r3, sl
 800ff4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff4e:	f898 3000 	ldrb.w	r3, [r8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	f000 80ba 	beq.w	80100cc <_vfiprintf_r+0x1ec>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff62:	9304      	str	r3, [sp, #16]
 800ff64:	9307      	str	r3, [sp, #28]
 800ff66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff6c:	46a8      	mov	r8, r5
 800ff6e:	2205      	movs	r2, #5
 800ff70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ff74:	485e      	ldr	r0, [pc, #376]	; (80100f0 <_vfiprintf_r+0x210>)
 800ff76:	f7f0 f93b 	bl	80001f0 <memchr>
 800ff7a:	9b04      	ldr	r3, [sp, #16]
 800ff7c:	bb78      	cbnz	r0, 800ffde <_vfiprintf_r+0xfe>
 800ff7e:	06d9      	lsls	r1, r3, #27
 800ff80:	bf44      	itt	mi
 800ff82:	2220      	movmi	r2, #32
 800ff84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff88:	071a      	lsls	r2, r3, #28
 800ff8a:	bf44      	itt	mi
 800ff8c:	222b      	movmi	r2, #43	; 0x2b
 800ff8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff92:	782a      	ldrb	r2, [r5, #0]
 800ff94:	2a2a      	cmp	r2, #42	; 0x2a
 800ff96:	d02a      	beq.n	800ffee <_vfiprintf_r+0x10e>
 800ff98:	9a07      	ldr	r2, [sp, #28]
 800ff9a:	46a8      	mov	r8, r5
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	250a      	movs	r5, #10
 800ffa0:	4641      	mov	r1, r8
 800ffa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffa6:	3b30      	subs	r3, #48	; 0x30
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	d969      	bls.n	8010080 <_vfiprintf_r+0x1a0>
 800ffac:	b360      	cbz	r0, 8010008 <_vfiprintf_r+0x128>
 800ffae:	e024      	b.n	800fffa <_vfiprintf_r+0x11a>
 800ffb0:	4b50      	ldr	r3, [pc, #320]	; (80100f4 <_vfiprintf_r+0x214>)
 800ffb2:	429c      	cmp	r4, r3
 800ffb4:	d101      	bne.n	800ffba <_vfiprintf_r+0xda>
 800ffb6:	68b4      	ldr	r4, [r6, #8]
 800ffb8:	e7a2      	b.n	800ff00 <_vfiprintf_r+0x20>
 800ffba:	4b4f      	ldr	r3, [pc, #316]	; (80100f8 <_vfiprintf_r+0x218>)
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	bf08      	it	eq
 800ffc0:	68f4      	ldreq	r4, [r6, #12]
 800ffc2:	e79d      	b.n	800ff00 <_vfiprintf_r+0x20>
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	f000 f978 	bl	80102bc <__swsetup_r>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d09d      	beq.n	800ff0c <_vfiprintf_r+0x2c>
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	b01d      	add	sp, #116	; 0x74
 800ffd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffda:	46a8      	mov	r8, r5
 800ffdc:	e7a2      	b.n	800ff24 <_vfiprintf_r+0x44>
 800ffde:	4a44      	ldr	r2, [pc, #272]	; (80100f0 <_vfiprintf_r+0x210>)
 800ffe0:	1a80      	subs	r0, r0, r2
 800ffe2:	fa0b f000 	lsl.w	r0, fp, r0
 800ffe6:	4318      	orrs	r0, r3
 800ffe8:	9004      	str	r0, [sp, #16]
 800ffea:	4645      	mov	r5, r8
 800ffec:	e7be      	b.n	800ff6c <_vfiprintf_r+0x8c>
 800ffee:	9a03      	ldr	r2, [sp, #12]
 800fff0:	1d11      	adds	r1, r2, #4
 800fff2:	6812      	ldr	r2, [r2, #0]
 800fff4:	9103      	str	r1, [sp, #12]
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	db01      	blt.n	800fffe <_vfiprintf_r+0x11e>
 800fffa:	9207      	str	r2, [sp, #28]
 800fffc:	e004      	b.n	8010008 <_vfiprintf_r+0x128>
 800fffe:	4252      	negs	r2, r2
 8010000:	f043 0302 	orr.w	r3, r3, #2
 8010004:	9207      	str	r2, [sp, #28]
 8010006:	9304      	str	r3, [sp, #16]
 8010008:	f898 3000 	ldrb.w	r3, [r8]
 801000c:	2b2e      	cmp	r3, #46	; 0x2e
 801000e:	d10e      	bne.n	801002e <_vfiprintf_r+0x14e>
 8010010:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010014:	2b2a      	cmp	r3, #42	; 0x2a
 8010016:	d138      	bne.n	801008a <_vfiprintf_r+0x1aa>
 8010018:	9b03      	ldr	r3, [sp, #12]
 801001a:	1d1a      	adds	r2, r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	9203      	str	r2, [sp, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	bfb8      	it	lt
 8010024:	f04f 33ff 	movlt.w	r3, #4294967295
 8010028:	f108 0802 	add.w	r8, r8, #2
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	4d33      	ldr	r5, [pc, #204]	; (80100fc <_vfiprintf_r+0x21c>)
 8010030:	f898 1000 	ldrb.w	r1, [r8]
 8010034:	2203      	movs	r2, #3
 8010036:	4628      	mov	r0, r5
 8010038:	f7f0 f8da 	bl	80001f0 <memchr>
 801003c:	b140      	cbz	r0, 8010050 <_vfiprintf_r+0x170>
 801003e:	2340      	movs	r3, #64	; 0x40
 8010040:	1b40      	subs	r0, r0, r5
 8010042:	fa03 f000 	lsl.w	r0, r3, r0
 8010046:	9b04      	ldr	r3, [sp, #16]
 8010048:	4303      	orrs	r3, r0
 801004a:	f108 0801 	add.w	r8, r8, #1
 801004e:	9304      	str	r3, [sp, #16]
 8010050:	f898 1000 	ldrb.w	r1, [r8]
 8010054:	482a      	ldr	r0, [pc, #168]	; (8010100 <_vfiprintf_r+0x220>)
 8010056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801005a:	2206      	movs	r2, #6
 801005c:	f108 0701 	add.w	r7, r8, #1
 8010060:	f7f0 f8c6 	bl	80001f0 <memchr>
 8010064:	2800      	cmp	r0, #0
 8010066:	d037      	beq.n	80100d8 <_vfiprintf_r+0x1f8>
 8010068:	4b26      	ldr	r3, [pc, #152]	; (8010104 <_vfiprintf_r+0x224>)
 801006a:	bb1b      	cbnz	r3, 80100b4 <_vfiprintf_r+0x1d4>
 801006c:	9b03      	ldr	r3, [sp, #12]
 801006e:	3307      	adds	r3, #7
 8010070:	f023 0307 	bic.w	r3, r3, #7
 8010074:	3308      	adds	r3, #8
 8010076:	9303      	str	r3, [sp, #12]
 8010078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007a:	444b      	add	r3, r9
 801007c:	9309      	str	r3, [sp, #36]	; 0x24
 801007e:	e750      	b.n	800ff22 <_vfiprintf_r+0x42>
 8010080:	fb05 3202 	mla	r2, r5, r2, r3
 8010084:	2001      	movs	r0, #1
 8010086:	4688      	mov	r8, r1
 8010088:	e78a      	b.n	800ffa0 <_vfiprintf_r+0xc0>
 801008a:	2300      	movs	r3, #0
 801008c:	f108 0801 	add.w	r8, r8, #1
 8010090:	9305      	str	r3, [sp, #20]
 8010092:	4619      	mov	r1, r3
 8010094:	250a      	movs	r5, #10
 8010096:	4640      	mov	r0, r8
 8010098:	f810 2b01 	ldrb.w	r2, [r0], #1
 801009c:	3a30      	subs	r2, #48	; 0x30
 801009e:	2a09      	cmp	r2, #9
 80100a0:	d903      	bls.n	80100aa <_vfiprintf_r+0x1ca>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d0c3      	beq.n	801002e <_vfiprintf_r+0x14e>
 80100a6:	9105      	str	r1, [sp, #20]
 80100a8:	e7c1      	b.n	801002e <_vfiprintf_r+0x14e>
 80100aa:	fb05 2101 	mla	r1, r5, r1, r2
 80100ae:	2301      	movs	r3, #1
 80100b0:	4680      	mov	r8, r0
 80100b2:	e7f0      	b.n	8010096 <_vfiprintf_r+0x1b6>
 80100b4:	ab03      	add	r3, sp, #12
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	4622      	mov	r2, r4
 80100ba:	4b13      	ldr	r3, [pc, #76]	; (8010108 <_vfiprintf_r+0x228>)
 80100bc:	a904      	add	r1, sp, #16
 80100be:	4630      	mov	r0, r6
 80100c0:	f7fc f9d8 	bl	800c474 <_printf_float>
 80100c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80100c8:	4681      	mov	r9, r0
 80100ca:	d1d5      	bne.n	8010078 <_vfiprintf_r+0x198>
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	065b      	lsls	r3, r3, #25
 80100d0:	f53f af7e 	bmi.w	800ffd0 <_vfiprintf_r+0xf0>
 80100d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100d6:	e77d      	b.n	800ffd4 <_vfiprintf_r+0xf4>
 80100d8:	ab03      	add	r3, sp, #12
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	4622      	mov	r2, r4
 80100de:	4b0a      	ldr	r3, [pc, #40]	; (8010108 <_vfiprintf_r+0x228>)
 80100e0:	a904      	add	r1, sp, #16
 80100e2:	4630      	mov	r0, r6
 80100e4:	f7fc fc7c 	bl	800c9e0 <_printf_i>
 80100e8:	e7ec      	b.n	80100c4 <_vfiprintf_r+0x1e4>
 80100ea:	bf00      	nop
 80100ec:	08010868 	.word	0x08010868
 80100f0:	080109b4 	.word	0x080109b4
 80100f4:	08010888 	.word	0x08010888
 80100f8:	08010848 	.word	0x08010848
 80100fc:	080109ba 	.word	0x080109ba
 8010100:	080109be 	.word	0x080109be
 8010104:	0800c475 	.word	0x0800c475
 8010108:	0800febb 	.word	0x0800febb

0801010c <_sbrk_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4c06      	ldr	r4, [pc, #24]	; (8010128 <_sbrk_r+0x1c>)
 8010110:	2300      	movs	r3, #0
 8010112:	4605      	mov	r5, r0
 8010114:	4608      	mov	r0, r1
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f7f1 fa5e 	bl	80015d8 <_sbrk>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_sbrk_r+0x1a>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	b103      	cbz	r3, 8010126 <_sbrk_r+0x1a>
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200009b8 	.word	0x200009b8

0801012c <__sread>:
 801012c:	b510      	push	{r4, lr}
 801012e:	460c      	mov	r4, r1
 8010130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010134:	f000 faa8 	bl	8010688 <_read_r>
 8010138:	2800      	cmp	r0, #0
 801013a:	bfab      	itete	ge
 801013c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801013e:	89a3      	ldrhlt	r3, [r4, #12]
 8010140:	181b      	addge	r3, r3, r0
 8010142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010146:	bfac      	ite	ge
 8010148:	6563      	strge	r3, [r4, #84]	; 0x54
 801014a:	81a3      	strhlt	r3, [r4, #12]
 801014c:	bd10      	pop	{r4, pc}

0801014e <__swrite>:
 801014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	461f      	mov	r7, r3
 8010154:	898b      	ldrh	r3, [r1, #12]
 8010156:	05db      	lsls	r3, r3, #23
 8010158:	4605      	mov	r5, r0
 801015a:	460c      	mov	r4, r1
 801015c:	4616      	mov	r6, r2
 801015e:	d505      	bpl.n	801016c <__swrite+0x1e>
 8010160:	2302      	movs	r3, #2
 8010162:	2200      	movs	r2, #0
 8010164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010168:	f000 f9d6 	bl	8010518 <_lseek_r>
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010176:	81a3      	strh	r3, [r4, #12]
 8010178:	4632      	mov	r2, r6
 801017a:	463b      	mov	r3, r7
 801017c:	4628      	mov	r0, r5
 801017e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010182:	f000 b889 	b.w	8010298 <_write_r>

08010186 <__sseek>:
 8010186:	b510      	push	{r4, lr}
 8010188:	460c      	mov	r4, r1
 801018a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018e:	f000 f9c3 	bl	8010518 <_lseek_r>
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	bf15      	itete	ne
 8010198:	6560      	strne	r0, [r4, #84]	; 0x54
 801019a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801019e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101a2:	81a3      	strheq	r3, [r4, #12]
 80101a4:	bf18      	it	ne
 80101a6:	81a3      	strhne	r3, [r4, #12]
 80101a8:	bd10      	pop	{r4, pc}

080101aa <__sclose>:
 80101aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ae:	f000 b8f3 	b.w	8010398 <_close_r>

080101b2 <strncmp>:
 80101b2:	b510      	push	{r4, lr}
 80101b4:	b16a      	cbz	r2, 80101d2 <strncmp+0x20>
 80101b6:	3901      	subs	r1, #1
 80101b8:	1884      	adds	r4, r0, r2
 80101ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d103      	bne.n	80101ce <strncmp+0x1c>
 80101c6:	42a0      	cmp	r0, r4
 80101c8:	d001      	beq.n	80101ce <strncmp+0x1c>
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1f5      	bne.n	80101ba <strncmp+0x8>
 80101ce:	1a98      	subs	r0, r3, r2
 80101d0:	bd10      	pop	{r4, pc}
 80101d2:	4610      	mov	r0, r2
 80101d4:	e7fc      	b.n	80101d0 <strncmp+0x1e>
	...

080101d8 <__swbuf_r>:
 80101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101da:	460e      	mov	r6, r1
 80101dc:	4614      	mov	r4, r2
 80101de:	4605      	mov	r5, r0
 80101e0:	b118      	cbz	r0, 80101ea <__swbuf_r+0x12>
 80101e2:	6983      	ldr	r3, [r0, #24]
 80101e4:	b90b      	cbnz	r3, 80101ea <__swbuf_r+0x12>
 80101e6:	f7fe fc6b 	bl	800eac0 <__sinit>
 80101ea:	4b21      	ldr	r3, [pc, #132]	; (8010270 <__swbuf_r+0x98>)
 80101ec:	429c      	cmp	r4, r3
 80101ee:	d12a      	bne.n	8010246 <__swbuf_r+0x6e>
 80101f0:	686c      	ldr	r4, [r5, #4]
 80101f2:	69a3      	ldr	r3, [r4, #24]
 80101f4:	60a3      	str	r3, [r4, #8]
 80101f6:	89a3      	ldrh	r3, [r4, #12]
 80101f8:	071a      	lsls	r2, r3, #28
 80101fa:	d52e      	bpl.n	801025a <__swbuf_r+0x82>
 80101fc:	6923      	ldr	r3, [r4, #16]
 80101fe:	b363      	cbz	r3, 801025a <__swbuf_r+0x82>
 8010200:	6923      	ldr	r3, [r4, #16]
 8010202:	6820      	ldr	r0, [r4, #0]
 8010204:	1ac0      	subs	r0, r0, r3
 8010206:	6963      	ldr	r3, [r4, #20]
 8010208:	b2f6      	uxtb	r6, r6
 801020a:	4283      	cmp	r3, r0
 801020c:	4637      	mov	r7, r6
 801020e:	dc04      	bgt.n	801021a <__swbuf_r+0x42>
 8010210:	4621      	mov	r1, r4
 8010212:	4628      	mov	r0, r5
 8010214:	f000 f956 	bl	80104c4 <_fflush_r>
 8010218:	bb28      	cbnz	r0, 8010266 <__swbuf_r+0x8e>
 801021a:	68a3      	ldr	r3, [r4, #8]
 801021c:	3b01      	subs	r3, #1
 801021e:	60a3      	str	r3, [r4, #8]
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	6022      	str	r2, [r4, #0]
 8010226:	701e      	strb	r6, [r3, #0]
 8010228:	6963      	ldr	r3, [r4, #20]
 801022a:	3001      	adds	r0, #1
 801022c:	4283      	cmp	r3, r0
 801022e:	d004      	beq.n	801023a <__swbuf_r+0x62>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	07db      	lsls	r3, r3, #31
 8010234:	d519      	bpl.n	801026a <__swbuf_r+0x92>
 8010236:	2e0a      	cmp	r6, #10
 8010238:	d117      	bne.n	801026a <__swbuf_r+0x92>
 801023a:	4621      	mov	r1, r4
 801023c:	4628      	mov	r0, r5
 801023e:	f000 f941 	bl	80104c4 <_fflush_r>
 8010242:	b190      	cbz	r0, 801026a <__swbuf_r+0x92>
 8010244:	e00f      	b.n	8010266 <__swbuf_r+0x8e>
 8010246:	4b0b      	ldr	r3, [pc, #44]	; (8010274 <__swbuf_r+0x9c>)
 8010248:	429c      	cmp	r4, r3
 801024a:	d101      	bne.n	8010250 <__swbuf_r+0x78>
 801024c:	68ac      	ldr	r4, [r5, #8]
 801024e:	e7d0      	b.n	80101f2 <__swbuf_r+0x1a>
 8010250:	4b09      	ldr	r3, [pc, #36]	; (8010278 <__swbuf_r+0xa0>)
 8010252:	429c      	cmp	r4, r3
 8010254:	bf08      	it	eq
 8010256:	68ec      	ldreq	r4, [r5, #12]
 8010258:	e7cb      	b.n	80101f2 <__swbuf_r+0x1a>
 801025a:	4621      	mov	r1, r4
 801025c:	4628      	mov	r0, r5
 801025e:	f000 f82d 	bl	80102bc <__swsetup_r>
 8010262:	2800      	cmp	r0, #0
 8010264:	d0cc      	beq.n	8010200 <__swbuf_r+0x28>
 8010266:	f04f 37ff 	mov.w	r7, #4294967295
 801026a:	4638      	mov	r0, r7
 801026c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801026e:	bf00      	nop
 8010270:	08010868 	.word	0x08010868
 8010274:	08010888 	.word	0x08010888
 8010278:	08010848 	.word	0x08010848

0801027c <__ascii_wctomb>:
 801027c:	b149      	cbz	r1, 8010292 <__ascii_wctomb+0x16>
 801027e:	2aff      	cmp	r2, #255	; 0xff
 8010280:	bf85      	ittet	hi
 8010282:	238a      	movhi	r3, #138	; 0x8a
 8010284:	6003      	strhi	r3, [r0, #0]
 8010286:	700a      	strbls	r2, [r1, #0]
 8010288:	f04f 30ff 	movhi.w	r0, #4294967295
 801028c:	bf98      	it	ls
 801028e:	2001      	movls	r0, #1
 8010290:	4770      	bx	lr
 8010292:	4608      	mov	r0, r1
 8010294:	4770      	bx	lr
	...

08010298 <_write_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4c07      	ldr	r4, [pc, #28]	; (80102b8 <_write_r+0x20>)
 801029c:	4605      	mov	r5, r0
 801029e:	4608      	mov	r0, r1
 80102a0:	4611      	mov	r1, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	6022      	str	r2, [r4, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	f7f1 fb72 	bl	8001990 <_write>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d102      	bne.n	80102b6 <_write_r+0x1e>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	b103      	cbz	r3, 80102b6 <_write_r+0x1e>
 80102b4:	602b      	str	r3, [r5, #0]
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	200009b8 	.word	0x200009b8

080102bc <__swsetup_r>:
 80102bc:	4b32      	ldr	r3, [pc, #200]	; (8010388 <__swsetup_r+0xcc>)
 80102be:	b570      	push	{r4, r5, r6, lr}
 80102c0:	681d      	ldr	r5, [r3, #0]
 80102c2:	4606      	mov	r6, r0
 80102c4:	460c      	mov	r4, r1
 80102c6:	b125      	cbz	r5, 80102d2 <__swsetup_r+0x16>
 80102c8:	69ab      	ldr	r3, [r5, #24]
 80102ca:	b913      	cbnz	r3, 80102d2 <__swsetup_r+0x16>
 80102cc:	4628      	mov	r0, r5
 80102ce:	f7fe fbf7 	bl	800eac0 <__sinit>
 80102d2:	4b2e      	ldr	r3, [pc, #184]	; (801038c <__swsetup_r+0xd0>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	d10f      	bne.n	80102f8 <__swsetup_r+0x3c>
 80102d8:	686c      	ldr	r4, [r5, #4]
 80102da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102de:	b29a      	uxth	r2, r3
 80102e0:	0715      	lsls	r5, r2, #28
 80102e2:	d42c      	bmi.n	801033e <__swsetup_r+0x82>
 80102e4:	06d0      	lsls	r0, r2, #27
 80102e6:	d411      	bmi.n	801030c <__swsetup_r+0x50>
 80102e8:	2209      	movs	r2, #9
 80102ea:	6032      	str	r2, [r6, #0]
 80102ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102f0:	81a3      	strh	r3, [r4, #12]
 80102f2:	f04f 30ff 	mov.w	r0, #4294967295
 80102f6:	e03e      	b.n	8010376 <__swsetup_r+0xba>
 80102f8:	4b25      	ldr	r3, [pc, #148]	; (8010390 <__swsetup_r+0xd4>)
 80102fa:	429c      	cmp	r4, r3
 80102fc:	d101      	bne.n	8010302 <__swsetup_r+0x46>
 80102fe:	68ac      	ldr	r4, [r5, #8]
 8010300:	e7eb      	b.n	80102da <__swsetup_r+0x1e>
 8010302:	4b24      	ldr	r3, [pc, #144]	; (8010394 <__swsetup_r+0xd8>)
 8010304:	429c      	cmp	r4, r3
 8010306:	bf08      	it	eq
 8010308:	68ec      	ldreq	r4, [r5, #12]
 801030a:	e7e6      	b.n	80102da <__swsetup_r+0x1e>
 801030c:	0751      	lsls	r1, r2, #29
 801030e:	d512      	bpl.n	8010336 <__swsetup_r+0x7a>
 8010310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010312:	b141      	cbz	r1, 8010326 <__swsetup_r+0x6a>
 8010314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010318:	4299      	cmp	r1, r3
 801031a:	d002      	beq.n	8010322 <__swsetup_r+0x66>
 801031c:	4630      	mov	r0, r6
 801031e:	f7ff fbbb 	bl	800fa98 <_free_r>
 8010322:	2300      	movs	r3, #0
 8010324:	6363      	str	r3, [r4, #52]	; 0x34
 8010326:	89a3      	ldrh	r3, [r4, #12]
 8010328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801032c:	81a3      	strh	r3, [r4, #12]
 801032e:	2300      	movs	r3, #0
 8010330:	6063      	str	r3, [r4, #4]
 8010332:	6923      	ldr	r3, [r4, #16]
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	89a3      	ldrh	r3, [r4, #12]
 8010338:	f043 0308 	orr.w	r3, r3, #8
 801033c:	81a3      	strh	r3, [r4, #12]
 801033e:	6923      	ldr	r3, [r4, #16]
 8010340:	b94b      	cbnz	r3, 8010356 <__swsetup_r+0x9a>
 8010342:	89a3      	ldrh	r3, [r4, #12]
 8010344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801034c:	d003      	beq.n	8010356 <__swsetup_r+0x9a>
 801034e:	4621      	mov	r1, r4
 8010350:	4630      	mov	r0, r6
 8010352:	f000 f917 	bl	8010584 <__smakebuf_r>
 8010356:	89a2      	ldrh	r2, [r4, #12]
 8010358:	f012 0301 	ands.w	r3, r2, #1
 801035c:	d00c      	beq.n	8010378 <__swsetup_r+0xbc>
 801035e:	2300      	movs	r3, #0
 8010360:	60a3      	str	r3, [r4, #8]
 8010362:	6963      	ldr	r3, [r4, #20]
 8010364:	425b      	negs	r3, r3
 8010366:	61a3      	str	r3, [r4, #24]
 8010368:	6923      	ldr	r3, [r4, #16]
 801036a:	b953      	cbnz	r3, 8010382 <__swsetup_r+0xc6>
 801036c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010370:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010374:	d1ba      	bne.n	80102ec <__swsetup_r+0x30>
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	0792      	lsls	r2, r2, #30
 801037a:	bf58      	it	pl
 801037c:	6963      	ldrpl	r3, [r4, #20]
 801037e:	60a3      	str	r3, [r4, #8]
 8010380:	e7f2      	b.n	8010368 <__swsetup_r+0xac>
 8010382:	2000      	movs	r0, #0
 8010384:	e7f7      	b.n	8010376 <__swsetup_r+0xba>
 8010386:	bf00      	nop
 8010388:	200002cc 	.word	0x200002cc
 801038c:	08010868 	.word	0x08010868
 8010390:	08010888 	.word	0x08010888
 8010394:	08010848 	.word	0x08010848

08010398 <_close_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4c06      	ldr	r4, [pc, #24]	; (80103b4 <_close_r+0x1c>)
 801039c:	2300      	movs	r3, #0
 801039e:	4605      	mov	r5, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	6023      	str	r3, [r4, #0]
 80103a4:	f7f1 f8e3 	bl	800156e <_close>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_close_r+0x1a>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_close_r+0x1a>
 80103b0:	602b      	str	r3, [r5, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	200009b8 	.word	0x200009b8

080103b8 <__sflush_r>:
 80103b8:	898a      	ldrh	r2, [r1, #12]
 80103ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103be:	4605      	mov	r5, r0
 80103c0:	0710      	lsls	r0, r2, #28
 80103c2:	460c      	mov	r4, r1
 80103c4:	d458      	bmi.n	8010478 <__sflush_r+0xc0>
 80103c6:	684b      	ldr	r3, [r1, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	dc05      	bgt.n	80103d8 <__sflush_r+0x20>
 80103cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	dc02      	bgt.n	80103d8 <__sflush_r+0x20>
 80103d2:	2000      	movs	r0, #0
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103da:	2e00      	cmp	r6, #0
 80103dc:	d0f9      	beq.n	80103d2 <__sflush_r+0x1a>
 80103de:	2300      	movs	r3, #0
 80103e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103e4:	682f      	ldr	r7, [r5, #0]
 80103e6:	6a21      	ldr	r1, [r4, #32]
 80103e8:	602b      	str	r3, [r5, #0]
 80103ea:	d032      	beq.n	8010452 <__sflush_r+0x9a>
 80103ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103ee:	89a3      	ldrh	r3, [r4, #12]
 80103f0:	075a      	lsls	r2, r3, #29
 80103f2:	d505      	bpl.n	8010400 <__sflush_r+0x48>
 80103f4:	6863      	ldr	r3, [r4, #4]
 80103f6:	1ac0      	subs	r0, r0, r3
 80103f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103fa:	b10b      	cbz	r3, 8010400 <__sflush_r+0x48>
 80103fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103fe:	1ac0      	subs	r0, r0, r3
 8010400:	2300      	movs	r3, #0
 8010402:	4602      	mov	r2, r0
 8010404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010406:	6a21      	ldr	r1, [r4, #32]
 8010408:	4628      	mov	r0, r5
 801040a:	47b0      	blx	r6
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	89a3      	ldrh	r3, [r4, #12]
 8010410:	d106      	bne.n	8010420 <__sflush_r+0x68>
 8010412:	6829      	ldr	r1, [r5, #0]
 8010414:	291d      	cmp	r1, #29
 8010416:	d848      	bhi.n	80104aa <__sflush_r+0xf2>
 8010418:	4a29      	ldr	r2, [pc, #164]	; (80104c0 <__sflush_r+0x108>)
 801041a:	40ca      	lsrs	r2, r1
 801041c:	07d6      	lsls	r6, r2, #31
 801041e:	d544      	bpl.n	80104aa <__sflush_r+0xf2>
 8010420:	2200      	movs	r2, #0
 8010422:	6062      	str	r2, [r4, #4]
 8010424:	04d9      	lsls	r1, r3, #19
 8010426:	6922      	ldr	r2, [r4, #16]
 8010428:	6022      	str	r2, [r4, #0]
 801042a:	d504      	bpl.n	8010436 <__sflush_r+0x7e>
 801042c:	1c42      	adds	r2, r0, #1
 801042e:	d101      	bne.n	8010434 <__sflush_r+0x7c>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b903      	cbnz	r3, 8010436 <__sflush_r+0x7e>
 8010434:	6560      	str	r0, [r4, #84]	; 0x54
 8010436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010438:	602f      	str	r7, [r5, #0]
 801043a:	2900      	cmp	r1, #0
 801043c:	d0c9      	beq.n	80103d2 <__sflush_r+0x1a>
 801043e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010442:	4299      	cmp	r1, r3
 8010444:	d002      	beq.n	801044c <__sflush_r+0x94>
 8010446:	4628      	mov	r0, r5
 8010448:	f7ff fb26 	bl	800fa98 <_free_r>
 801044c:	2000      	movs	r0, #0
 801044e:	6360      	str	r0, [r4, #52]	; 0x34
 8010450:	e7c0      	b.n	80103d4 <__sflush_r+0x1c>
 8010452:	2301      	movs	r3, #1
 8010454:	4628      	mov	r0, r5
 8010456:	47b0      	blx	r6
 8010458:	1c41      	adds	r1, r0, #1
 801045a:	d1c8      	bne.n	80103ee <__sflush_r+0x36>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d0c5      	beq.n	80103ee <__sflush_r+0x36>
 8010462:	2b1d      	cmp	r3, #29
 8010464:	d001      	beq.n	801046a <__sflush_r+0xb2>
 8010466:	2b16      	cmp	r3, #22
 8010468:	d101      	bne.n	801046e <__sflush_r+0xb6>
 801046a:	602f      	str	r7, [r5, #0]
 801046c:	e7b1      	b.n	80103d2 <__sflush_r+0x1a>
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010474:	81a3      	strh	r3, [r4, #12]
 8010476:	e7ad      	b.n	80103d4 <__sflush_r+0x1c>
 8010478:	690f      	ldr	r7, [r1, #16]
 801047a:	2f00      	cmp	r7, #0
 801047c:	d0a9      	beq.n	80103d2 <__sflush_r+0x1a>
 801047e:	0793      	lsls	r3, r2, #30
 8010480:	680e      	ldr	r6, [r1, #0]
 8010482:	bf08      	it	eq
 8010484:	694b      	ldreq	r3, [r1, #20]
 8010486:	600f      	str	r7, [r1, #0]
 8010488:	bf18      	it	ne
 801048a:	2300      	movne	r3, #0
 801048c:	eba6 0807 	sub.w	r8, r6, r7
 8010490:	608b      	str	r3, [r1, #8]
 8010492:	f1b8 0f00 	cmp.w	r8, #0
 8010496:	dd9c      	ble.n	80103d2 <__sflush_r+0x1a>
 8010498:	4643      	mov	r3, r8
 801049a:	463a      	mov	r2, r7
 801049c:	6a21      	ldr	r1, [r4, #32]
 801049e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104a0:	4628      	mov	r0, r5
 80104a2:	47b0      	blx	r6
 80104a4:	2800      	cmp	r0, #0
 80104a6:	dc06      	bgt.n	80104b6 <__sflush_r+0xfe>
 80104a8:	89a3      	ldrh	r3, [r4, #12]
 80104aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104ae:	81a3      	strh	r3, [r4, #12]
 80104b0:	f04f 30ff 	mov.w	r0, #4294967295
 80104b4:	e78e      	b.n	80103d4 <__sflush_r+0x1c>
 80104b6:	4407      	add	r7, r0
 80104b8:	eba8 0800 	sub.w	r8, r8, r0
 80104bc:	e7e9      	b.n	8010492 <__sflush_r+0xda>
 80104be:	bf00      	nop
 80104c0:	20400001 	.word	0x20400001

080104c4 <_fflush_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	690b      	ldr	r3, [r1, #16]
 80104c8:	4605      	mov	r5, r0
 80104ca:	460c      	mov	r4, r1
 80104cc:	b1db      	cbz	r3, 8010506 <_fflush_r+0x42>
 80104ce:	b118      	cbz	r0, 80104d8 <_fflush_r+0x14>
 80104d0:	6983      	ldr	r3, [r0, #24]
 80104d2:	b90b      	cbnz	r3, 80104d8 <_fflush_r+0x14>
 80104d4:	f7fe faf4 	bl	800eac0 <__sinit>
 80104d8:	4b0c      	ldr	r3, [pc, #48]	; (801050c <_fflush_r+0x48>)
 80104da:	429c      	cmp	r4, r3
 80104dc:	d109      	bne.n	80104f2 <_fflush_r+0x2e>
 80104de:	686c      	ldr	r4, [r5, #4]
 80104e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e4:	b17b      	cbz	r3, 8010506 <_fflush_r+0x42>
 80104e6:	4621      	mov	r1, r4
 80104e8:	4628      	mov	r0, r5
 80104ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ee:	f7ff bf63 	b.w	80103b8 <__sflush_r>
 80104f2:	4b07      	ldr	r3, [pc, #28]	; (8010510 <_fflush_r+0x4c>)
 80104f4:	429c      	cmp	r4, r3
 80104f6:	d101      	bne.n	80104fc <_fflush_r+0x38>
 80104f8:	68ac      	ldr	r4, [r5, #8]
 80104fa:	e7f1      	b.n	80104e0 <_fflush_r+0x1c>
 80104fc:	4b05      	ldr	r3, [pc, #20]	; (8010514 <_fflush_r+0x50>)
 80104fe:	429c      	cmp	r4, r3
 8010500:	bf08      	it	eq
 8010502:	68ec      	ldreq	r4, [r5, #12]
 8010504:	e7ec      	b.n	80104e0 <_fflush_r+0x1c>
 8010506:	2000      	movs	r0, #0
 8010508:	bd38      	pop	{r3, r4, r5, pc}
 801050a:	bf00      	nop
 801050c:	08010868 	.word	0x08010868
 8010510:	08010888 	.word	0x08010888
 8010514:	08010848 	.word	0x08010848

08010518 <_lseek_r>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	4c07      	ldr	r4, [pc, #28]	; (8010538 <_lseek_r+0x20>)
 801051c:	4605      	mov	r5, r0
 801051e:	4608      	mov	r0, r1
 8010520:	4611      	mov	r1, r2
 8010522:	2200      	movs	r2, #0
 8010524:	6022      	str	r2, [r4, #0]
 8010526:	461a      	mov	r2, r3
 8010528:	f7f1 f848 	bl	80015bc <_lseek>
 801052c:	1c43      	adds	r3, r0, #1
 801052e:	d102      	bne.n	8010536 <_lseek_r+0x1e>
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	b103      	cbz	r3, 8010536 <_lseek_r+0x1e>
 8010534:	602b      	str	r3, [r5, #0]
 8010536:	bd38      	pop	{r3, r4, r5, pc}
 8010538:	200009b8 	.word	0x200009b8

0801053c <__swhatbuf_r>:
 801053c:	b570      	push	{r4, r5, r6, lr}
 801053e:	460e      	mov	r6, r1
 8010540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010544:	2900      	cmp	r1, #0
 8010546:	b096      	sub	sp, #88	; 0x58
 8010548:	4614      	mov	r4, r2
 801054a:	461d      	mov	r5, r3
 801054c:	da07      	bge.n	801055e <__swhatbuf_r+0x22>
 801054e:	2300      	movs	r3, #0
 8010550:	602b      	str	r3, [r5, #0]
 8010552:	89b3      	ldrh	r3, [r6, #12]
 8010554:	061a      	lsls	r2, r3, #24
 8010556:	d410      	bmi.n	801057a <__swhatbuf_r+0x3e>
 8010558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801055c:	e00e      	b.n	801057c <__swhatbuf_r+0x40>
 801055e:	466a      	mov	r2, sp
 8010560:	f000 f8a4 	bl	80106ac <_fstat_r>
 8010564:	2800      	cmp	r0, #0
 8010566:	dbf2      	blt.n	801054e <__swhatbuf_r+0x12>
 8010568:	9a01      	ldr	r2, [sp, #4]
 801056a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801056e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010572:	425a      	negs	r2, r3
 8010574:	415a      	adcs	r2, r3
 8010576:	602a      	str	r2, [r5, #0]
 8010578:	e7ee      	b.n	8010558 <__swhatbuf_r+0x1c>
 801057a:	2340      	movs	r3, #64	; 0x40
 801057c:	2000      	movs	r0, #0
 801057e:	6023      	str	r3, [r4, #0]
 8010580:	b016      	add	sp, #88	; 0x58
 8010582:	bd70      	pop	{r4, r5, r6, pc}

08010584 <__smakebuf_r>:
 8010584:	898b      	ldrh	r3, [r1, #12]
 8010586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010588:	079d      	lsls	r5, r3, #30
 801058a:	4606      	mov	r6, r0
 801058c:	460c      	mov	r4, r1
 801058e:	d507      	bpl.n	80105a0 <__smakebuf_r+0x1c>
 8010590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	6123      	str	r3, [r4, #16]
 8010598:	2301      	movs	r3, #1
 801059a:	6163      	str	r3, [r4, #20]
 801059c:	b002      	add	sp, #8
 801059e:	bd70      	pop	{r4, r5, r6, pc}
 80105a0:	ab01      	add	r3, sp, #4
 80105a2:	466a      	mov	r2, sp
 80105a4:	f7ff ffca 	bl	801053c <__swhatbuf_r>
 80105a8:	9900      	ldr	r1, [sp, #0]
 80105aa:	4605      	mov	r5, r0
 80105ac:	4630      	mov	r0, r6
 80105ae:	f7ff fac1 	bl	800fb34 <_malloc_r>
 80105b2:	b948      	cbnz	r0, 80105c8 <__smakebuf_r+0x44>
 80105b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b8:	059a      	lsls	r2, r3, #22
 80105ba:	d4ef      	bmi.n	801059c <__smakebuf_r+0x18>
 80105bc:	f023 0303 	bic.w	r3, r3, #3
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	81a3      	strh	r3, [r4, #12]
 80105c6:	e7e3      	b.n	8010590 <__smakebuf_r+0xc>
 80105c8:	4b0d      	ldr	r3, [pc, #52]	; (8010600 <__smakebuf_r+0x7c>)
 80105ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	6020      	str	r0, [r4, #0]
 80105d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105d4:	81a3      	strh	r3, [r4, #12]
 80105d6:	9b00      	ldr	r3, [sp, #0]
 80105d8:	6163      	str	r3, [r4, #20]
 80105da:	9b01      	ldr	r3, [sp, #4]
 80105dc:	6120      	str	r0, [r4, #16]
 80105de:	b15b      	cbz	r3, 80105f8 <__smakebuf_r+0x74>
 80105e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105e4:	4630      	mov	r0, r6
 80105e6:	f000 f873 	bl	80106d0 <_isatty_r>
 80105ea:	b128      	cbz	r0, 80105f8 <__smakebuf_r+0x74>
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	f023 0303 	bic.w	r3, r3, #3
 80105f2:	f043 0301 	orr.w	r3, r3, #1
 80105f6:	81a3      	strh	r3, [r4, #12]
 80105f8:	89a3      	ldrh	r3, [r4, #12]
 80105fa:	431d      	orrs	r5, r3
 80105fc:	81a5      	strh	r5, [r4, #12]
 80105fe:	e7cd      	b.n	801059c <__smakebuf_r+0x18>
 8010600:	0800ea89 	.word	0x0800ea89

08010604 <memmove>:
 8010604:	4288      	cmp	r0, r1
 8010606:	b510      	push	{r4, lr}
 8010608:	eb01 0302 	add.w	r3, r1, r2
 801060c:	d807      	bhi.n	801061e <memmove+0x1a>
 801060e:	1e42      	subs	r2, r0, #1
 8010610:	4299      	cmp	r1, r3
 8010612:	d00a      	beq.n	801062a <memmove+0x26>
 8010614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010618:	f802 4f01 	strb.w	r4, [r2, #1]!
 801061c:	e7f8      	b.n	8010610 <memmove+0xc>
 801061e:	4283      	cmp	r3, r0
 8010620:	d9f5      	bls.n	801060e <memmove+0xa>
 8010622:	1881      	adds	r1, r0, r2
 8010624:	1ad2      	subs	r2, r2, r3
 8010626:	42d3      	cmn	r3, r2
 8010628:	d100      	bne.n	801062c <memmove+0x28>
 801062a:	bd10      	pop	{r4, pc}
 801062c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010630:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010634:	e7f7      	b.n	8010626 <memmove+0x22>

08010636 <__malloc_lock>:
 8010636:	4770      	bx	lr

08010638 <__malloc_unlock>:
 8010638:	4770      	bx	lr

0801063a <_realloc_r>:
 801063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063c:	4607      	mov	r7, r0
 801063e:	4614      	mov	r4, r2
 8010640:	460e      	mov	r6, r1
 8010642:	b921      	cbnz	r1, 801064e <_realloc_r+0x14>
 8010644:	4611      	mov	r1, r2
 8010646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801064a:	f7ff ba73 	b.w	800fb34 <_malloc_r>
 801064e:	b922      	cbnz	r2, 801065a <_realloc_r+0x20>
 8010650:	f7ff fa22 	bl	800fa98 <_free_r>
 8010654:	4625      	mov	r5, r4
 8010656:	4628      	mov	r0, r5
 8010658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801065a:	f000 f849 	bl	80106f0 <_malloc_usable_size_r>
 801065e:	42a0      	cmp	r0, r4
 8010660:	d20f      	bcs.n	8010682 <_realloc_r+0x48>
 8010662:	4621      	mov	r1, r4
 8010664:	4638      	mov	r0, r7
 8010666:	f7ff fa65 	bl	800fb34 <_malloc_r>
 801066a:	4605      	mov	r5, r0
 801066c:	2800      	cmp	r0, #0
 801066e:	d0f2      	beq.n	8010656 <_realloc_r+0x1c>
 8010670:	4631      	mov	r1, r6
 8010672:	4622      	mov	r2, r4
 8010674:	f7fb fe56 	bl	800c324 <memcpy>
 8010678:	4631      	mov	r1, r6
 801067a:	4638      	mov	r0, r7
 801067c:	f7ff fa0c 	bl	800fa98 <_free_r>
 8010680:	e7e9      	b.n	8010656 <_realloc_r+0x1c>
 8010682:	4635      	mov	r5, r6
 8010684:	e7e7      	b.n	8010656 <_realloc_r+0x1c>
	...

08010688 <_read_r>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	4c07      	ldr	r4, [pc, #28]	; (80106a8 <_read_r+0x20>)
 801068c:	4605      	mov	r5, r0
 801068e:	4608      	mov	r0, r1
 8010690:	4611      	mov	r1, r2
 8010692:	2200      	movs	r2, #0
 8010694:	6022      	str	r2, [r4, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	f7f0 ff4c 	bl	8001534 <_read>
 801069c:	1c43      	adds	r3, r0, #1
 801069e:	d102      	bne.n	80106a6 <_read_r+0x1e>
 80106a0:	6823      	ldr	r3, [r4, #0]
 80106a2:	b103      	cbz	r3, 80106a6 <_read_r+0x1e>
 80106a4:	602b      	str	r3, [r5, #0]
 80106a6:	bd38      	pop	{r3, r4, r5, pc}
 80106a8:	200009b8 	.word	0x200009b8

080106ac <_fstat_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4c07      	ldr	r4, [pc, #28]	; (80106cc <_fstat_r+0x20>)
 80106b0:	2300      	movs	r3, #0
 80106b2:	4605      	mov	r5, r0
 80106b4:	4608      	mov	r0, r1
 80106b6:	4611      	mov	r1, r2
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	f7f0 ff64 	bl	8001586 <_fstat>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d102      	bne.n	80106c8 <_fstat_r+0x1c>
 80106c2:	6823      	ldr	r3, [r4, #0]
 80106c4:	b103      	cbz	r3, 80106c8 <_fstat_r+0x1c>
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	bf00      	nop
 80106cc:	200009b8 	.word	0x200009b8

080106d0 <_isatty_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4c06      	ldr	r4, [pc, #24]	; (80106ec <_isatty_r+0x1c>)
 80106d4:	2300      	movs	r3, #0
 80106d6:	4605      	mov	r5, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	f7f0 ff63 	bl	80015a6 <_isatty>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_isatty_r+0x1a>
 80106e4:	6823      	ldr	r3, [r4, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_isatty_r+0x1a>
 80106e8:	602b      	str	r3, [r5, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	200009b8 	.word	0x200009b8

080106f0 <_malloc_usable_size_r>:
 80106f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106f4:	1f18      	subs	r0, r3, #4
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	bfbc      	itt	lt
 80106fa:	580b      	ldrlt	r3, [r1, r0]
 80106fc:	18c0      	addlt	r0, r0, r3
 80106fe:	4770      	bx	lr

08010700 <_init>:
 8010700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010702:	bf00      	nop
 8010704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010706:	bc08      	pop	{r3}
 8010708:	469e      	mov	lr, r3
 801070a:	4770      	bx	lr

0801070c <_fini>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	bf00      	nop
 8010710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010712:	bc08      	pop	{r3}
 8010714:	469e      	mov	lr, r3
 8010716:	4770      	bx	lr
