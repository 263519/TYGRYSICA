
ciach3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a530  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800a6d0  0800a6d0  0001a6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa70  0800aa70  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa70  0800aa70  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa70  0800aa70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa70  0800aa70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800aa78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  0800ac54  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800ac54  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001740a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b00  00000000  00000000  00037616  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024323  00000000  00000000  0003c370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012dac  00000000  00000000  00060693  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9411  00000000  00000000  0007343f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc4  00000000  00000000  0014c8cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6b8 	.word	0x0800a6b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a6b8 	.word	0x0800a6b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f000 feb0 	bl	8001a6c <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 fac1 	bl	8001298 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f001 f894 	bl	8001e60 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 faab 	bl	8001298 <Error_Handler>
  }

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000204 	.word	0x20000204
 8000d50:	50000100 	.word	0x50000100

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x74>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d124      	bne.n	8000dc0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_ADC_MspInit+0x78>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = SHARP_Pin;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SHARP_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fcb4 	bl	8002728 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50000100 	.word	0x50000100
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b41      	ldr	r3, [pc, #260]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a34      	ldr	r2, [pc, #208]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_GPIO_Init+0x11c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 fe01 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f64f 719e 	movw	r1, #65438	; 0xff9e
 8000e40:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <MX_GPIO_Init+0x120>)
 8000e42:	f001 fdfb 	bl	8002a3c <HAL_GPIO_WritePin>
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0x124>)
 8000e5e:	f001 fc63 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e62:	2320      	movs	r3, #32
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f001 fc54 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TOF1_INT_Pin|TOF2_INT_Pin;
 8000e80:	2330      	movs	r3, #48	; 0x30
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <MX_GPIO_Init+0x124>)
 8000e96:	f001 fc47 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR_MOTOR1_A_Pin|DIR_MOTOR1_B_Pin|ENC2_B_Pin|SHIFT_CLK_Pin
 8000e9a:	f64f 739e 	movw	r3, #65438	; 0xff9e
 8000e9e:	60fb      	str	r3, [r7, #12]
                          |SHIFT_SER_Pin|SHIFT_LATCH_Pin|XSHUT_TOF1_Pin|XSHUT_TOF2_Pin
                          |DIR_MOTOR2_A_Pin|DIR_MOTOR2_B_Pin|ENC1_A_Pin|ENC1_B_Pin
                          |ENC2_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <MX_GPIO_Init+0x120>)
 8000eb4:	f001 fc38 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <MX_GPIO_Init+0x124>)
 8000ed0:	f001 fc2a 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f001 fbee 	bl	80026ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 fc07 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48000800 	.word	0x48000800

08000ef8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_I2C2_Init+0x78>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0000020B;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f04:	f240 220b 	movw	r2, #523	; 0x20b
 8000f08:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f36:	f001 fdbc 	bl	8002ab2 <HAL_I2C_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f40:	f000 f9aa 	bl	8001298 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f48:	f002 fba4 	bl	8003694 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 f9a1 	bl	8001298 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_I2C2_Init+0x74>)
 8000f5a:	f002 fbe6 	bl	800372a <HAL_I2CEx_ConfigDigitalFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f64:	f000 f998 	bl	8001298 <Error_Handler>
  }

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200002a0 	.word	0x200002a0
 8000f70:	40005800 	.word	0x40005800

08000f74 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <MX_I2C3_Init+0x78>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <MX_I2C3_Init+0x7c>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000fb0:	f001 fd7f 	bl	8002ab2 <HAL_I2C_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fba:	f000 f96d 	bl	8001298 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000fc2:	f002 fb67 	bl	8003694 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f000 f964 	bl	8001298 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_I2C3_Init+0x74>)
 8000fd4:	f002 fba9 	bl	800372a <HAL_I2CEx_ConfigDigitalFilter>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f000 f95b 	bl	8001298 <Error_Handler>
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000254 	.word	0x20000254
 8000fec:	40007800 	.word	0x40007800
 8000ff0:	2000090e 	.word	0x2000090e

08000ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a3e      	ldr	r2, [pc, #248]	; (800110c <HAL_I2C_MspInit+0x118>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12a      	bne.n	800106c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a3d      	ldr	r2, [pc, #244]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GYRO_TOF_SCL_Pin|GYRO_TOF_SDA_Pin;
 800102e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001034:	2312      	movs	r3, #18
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001040:	2304      	movs	r3, #4
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f001 fb6b 	bl	8002728 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800106a:	e04b      	b.n	8001104 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_I2C_MspInit+0x120>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d146      	bne.n	8001104 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 800107c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6153      	str	r3, [r2, #20]
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOF2_SDA_Pin;
 80010a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ac:	2312      	movs	r3, #18
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SDA_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <HAL_I2C_MspInit+0x124>)
 80010c4:	f001 fb30 	bl	8002728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOF2_SCL_Pin;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80010da:	2303      	movs	r3, #3
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOF2_SCL_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fb1e 	bl	8002728 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 80010f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_I2C_MspInit+0x11c>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
}
 8001104:	bf00      	nop
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005800 	.word	0x40005800
 8001110:	40021000 	.word	0x40021000
 8001114:	40007800 	.word	0x40007800
 8001118:	48000800 	.word	0x48000800

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f000 fc1c 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f84c 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f7ff fe52 	bl	8000dd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112c:	f000 faf6 	bl	800171c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001130:	f7ff fdb2 	bl	8000c98 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001134:	f7ff fee0 	bl	8000ef8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001138:	f7ff ff1c 	bl	8000f74 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800113c:	f000 fb1e 	bl	800177c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001140:	f000 fa2e 	bl	80015a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001144:	f000 f8b0 	bl	80012a8 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MPU6050_ReadAccelerometerRaw(&acc_x, &acc_y, &acc_z);
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <main+0x84>)
 800114a:	4916      	ldr	r1, [pc, #88]	; (80011a4 <main+0x88>)
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <main+0x8c>)
 800114e:	f000 f8e5 	bl	800131c <MPU6050_ReadAccelerometerRaw>
	  printf("acc_x: %d, acc_y: %d,acc_z: %d\r\n",acc_x, acc_y, acc_z);
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <main+0x8c>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	4619      	mov	r1, r3
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <main+0x88>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	461a      	mov	r2, r3
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <main+0x84>)
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <main+0x90>)
 800116a:	f005 ff13 	bl	8006f94 <iprintf>
	  MPU6050_ReadAccelerometerRaw(&gyr_x, &gyr_y, &gyr_z);
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <main+0x94>)
 8001170:	4910      	ldr	r1, [pc, #64]	; (80011b4 <main+0x98>)
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <main+0x9c>)
 8001174:	f000 f8d2 	bl	800131c <MPU6050_ReadAccelerometerRaw>
	  printf("gyr_x: %d, gyr_y: %d,gyr_z: %d\r\n",gyr_x, gyr_y, gyr_z);
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <main+0x9c>)
 800117a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117e:	4619      	mov	r1, r3
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <main+0x98>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <main+0x94>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <main+0xa0>)
 8001190:	f005 ff00 	bl	8006f94 <iprintf>
	  HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f000 fc46 	bl	8001a28 <HAL_Delay>
	  MPU6050_ReadAccelerometerRaw(&acc_x, &acc_y, &acc_z);
 800119c:	e7d4      	b.n	8001148 <main+0x2c>
 800119e:	bf00      	nop
 80011a0:	200002f6 	.word	0x200002f6
 80011a4:	200002ec 	.word	0x200002ec
 80011a8:	200002f4 	.word	0x200002f4
 80011ac:	0800a6d0 	.word	0x0800a6d0
 80011b0:	200002f0 	.word	0x200002f0
 80011b4:	200002f2 	.word	0x200002f2
 80011b8:	200002ee 	.word	0x200002ee
 80011bc:	0800a6f4 	.word	0x0800a6f4

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0a6      	sub	sp, #152	; 0x98
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 f899 	bl	8006306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2258      	movs	r2, #88	; 0x58
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 f88b 	bl	8006306 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800120c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fad0 	bl	80037c4 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800122a:	f000 f835 	bl	8001298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f9d0 	bl	80045f0 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001256:	f000 f81f 	bl	8001298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <SystemClock_Config+0xd4>)
 800125c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001274:	2300      	movs	r3, #0
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fbee 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001286:	f000 f807 	bl	8001298 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3798      	adds	r7, #152	; 0x98
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	002400c6 	.word	0x002400c6

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <MPU6050_Init>:
#include "mpu6050.h"

extern I2C_HandleTypeDef hi2c2;
#define I2C_TIMEOUT 10

void MPU6050_Init(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af04      	add	r7, sp, #16
	 // try to connect once, timeout 100 ms
	  HAL_I2C_IsDeviceReady(&hi2c2,MPU6050_ADDRESS, 1, I2C_TIMEOUT);
 80012ae:	230a      	movs	r3, #10
 80012b0:	2201      	movs	r2, #1
 80012b2:	21d0      	movs	r1, #208	; 0xd0
 80012b4:	4818      	ldr	r0, [pc, #96]	; (8001318 <MPU6050_Init+0x70>)
 80012b6:	f001 feb9 	bl	800302c <HAL_I2C_IsDeviceReady>

	  // GYRO CONFIG
	  uint8_t select_data = FS_SEL_GYRO_500;
 80012ba:	2308      	movs	r3, #8
 80012bc:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,GYRO_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 80012be:	230a      	movs	r3, #10
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	221b      	movs	r2, #27
 80012ce:	21d0      	movs	r1, #208	; 0xd0
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MPU6050_Init+0x70>)
 80012d2:	f001 fc7d 	bl	8002bd0 <HAL_I2C_Mem_Write>

	  // ACCEL CONFIG
	  select_data =  AFS_SEL_ACC_4G;
 80012d6:	2308      	movs	r3, #8
 80012d8:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS,ACCEL_CONFIG, 1, &select_data, 1, I2C_TIMEOUT);
 80012da:	230a      	movs	r3, #10
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	221c      	movs	r2, #28
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <MPU6050_Init+0x70>)
 80012ee:	f001 fc6f 	bl	8002bd0 <HAL_I2C_Mem_Write>

	  // EXIT SLEEP MODE
	  select_data = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &select_data, 1, I2C_TIMEOUT);
 80012f6:	230a      	movs	r3, #10
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	226b      	movs	r2, #107	; 0x6b
 8001306:	21d0      	movs	r1, #208	; 0xd0
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <MPU6050_Init+0x70>)
 800130a:	f001 fc61 	bl	8002bd0 <HAL_I2C_Mem_Write>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002a0 	.word	0x200002a0

0800131c <MPU6050_ReadAccelerometerRaw>:

void MPU6050_ReadAccelerometerRaw(int16_t *x, int16_t *y, int16_t *z){
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af04      	add	r7, sp, #16
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDRESS, ACCEL_XOUT_H, 1, data, 6, I2C_TIMEOUT);
 8001328:	230a      	movs	r3, #10
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2306      	movs	r3, #6
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	223b      	movs	r2, #59	; 0x3b
 800133a:	21d0      	movs	r1, #208	; 0xd0
 800133c:	4810      	ldr	r0, [pc, #64]	; (8001380 <MPU6050_ReadAccelerometerRaw+0x64>)
 800133e:	f001 fd5b 	bl	8002df8 <HAL_I2C_Mem_Read>

	*x = ((int16_t)data[0] << 8) | data[1];
 8001342:	7c3b      	ldrb	r3, [r7, #16]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7c7b      	ldrb	r3, [r7, #17]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t)data[2] << 8) | data[3];
 8001354:	7cbb      	ldrb	r3, [r7, #18]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7cfb      	ldrb	r3, [r7, #19]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21a      	sxth	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t)data[4] << 8) | data[5];
 8001366:	7d3b      	ldrb	r3, [r7, #20]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	801a      	strh	r2, [r3, #0]

}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002a0 	.word	0x200002a0

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x44>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f001 f972 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 fae2 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800142c:	2010      	movs	r0, #16
 800142e:	f001 fb1d 	bl	8002a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}

08001436 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e00a      	b.n	800145e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001448:	f3af 8000 	nop.w
 800144c:	4601      	mov	r1, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	dbf0      	blt.n	8001448 <_read+0x12>
	}

return len;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e009      	b.n	8001496 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fa1c 	bl	80018c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	dbf1      	blt.n	8001482 <_write+0x12>
	}
	return len;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_close>:

int _close(int file)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d0:	605a      	str	r2, [r3, #4]
	return 0;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_isatty>:

int _isatty(int file)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f004 feac 	bl	800629c <__errno>
 8001544:	4602      	mov	r2, r0
 8001546:	230c      	movs	r3, #12
 8001548:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20010000 	.word	0x20010000
 8001570:	00000400 	.word	0x00000400
 8001574:	200001f8 	.word	0x200001f8
 8001578:	20000458 	.word	0x20000458

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015c6:	4a28      	ldr	r2, [pc, #160]	; (8001668 <MX_TIM4_Init+0xc8>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015cc:	2247      	movs	r2, #71	; 0x47
 80015ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80015dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <MX_TIM4_Init+0xc4>)
 80015ec:	f003 fc54 	bl	8004e98 <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f7ff fe4f 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM4_Init+0xc4>)
 800160a:	f004 f955 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001614:	f7ff fe40 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM4_Init+0xc4>)
 8001630:	f003 fc8a 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800163a:	f7ff fe2d 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	2204      	movs	r2, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM4_Init+0xc4>)
 8001646:	f003 fc7f 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001650:	f7ff fe22 	bl	8001298 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM4_Init+0xc4>)
 8001656:	f000 f829 	bl	80016ac <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002f8 	.word	0x200002f8
 8001668:	40000800 	.word	0x40000800

0800166c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_TIM_PWM_MspInit+0x38>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10b      	bne.n	8001696 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11d      	bne.n	800170a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	6153      	str	r3, [r2, #20]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_Pin|PWM_MOTOR_2_Pin;
 80016e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80016f8:	230a      	movs	r3, #10
 80016fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f001 f80f 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40000800 	.word	0x40000800
 8001718:	40021000 	.word	0x40021000

0800171c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <MX_USART2_UART_Init+0x5c>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART2_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART2_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART2_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART2_UART_Init+0x58>)
 8001760:	f004 f936 	bl	80059d0 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800176a:	f7ff fd95 	bl	8001298 <Error_Handler>
  }

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003c8 	.word	0x200003c8
 8001778:	40004400 	.word	0x40004400

0800177c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <MX_USART3_UART_Init+0x5c>)
 8001784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART3_UART_Init+0x58>)
 80017c0:	f004 f906 	bl	80059d0 <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017ca:	f7ff fd65 	bl	8001298 <Error_Handler>
  }

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000344 	.word	0x20000344
 80017d8:	40004800 	.word	0x40004800

080017dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <HAL_UART_MspInit+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d129      	bne.n	8001852 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_UART_MspInit+0xe0>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_UART_MspInit+0xe0>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182e:	230c      	movs	r3, #12
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f000 ff6c 	bl	8002728 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001850:	e02d      	b.n	80018ae <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_UART_MspInit+0xe4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d128      	bne.n	80018ae <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_UART_MspInit+0xe0>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	61d3      	str	r3, [r2, #28]
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_UART_MspInit+0xe0>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_UART_MspInit+0xe0>)
 800187a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800187e:	6153      	str	r3, [r2, #20]
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_UART_MspInit+0xe0>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_TX_Pin|STM_RX_Pin;
 800188c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189e:	2307      	movs	r3, #7
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <HAL_UART_MspInit+0xe8>)
 80018aa:	f000 ff3d 	bl	8002728 <HAL_GPIO_Init>
}
 80018ae:	bf00      	nop
 80018b0:	3730      	adds	r7, #48	; 0x30
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40004400 	.word	0x40004400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40004800 	.word	0x40004800
 80018c4:	48000800 	.word	0x48000800

080018c8 <__io_putchar>:
/* USER CODE BEGIN 1 */
/*!
 * Redefiniton of function _write to print things on a serial port
 */
int __io_putchar(int ch)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d109      	bne.n	80018ea <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80018d6:	230d      	movs	r3, #13
 80018d8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80018da:	f107 010f 	add.w	r1, r7, #15
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	2201      	movs	r2, #1
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <__io_putchar+0x3c>)
 80018e6:	f004 f8c1 	bl	8005a6c <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80018ea:	1d39      	adds	r1, r7, #4
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2201      	movs	r2, #1
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <__io_putchar+0x3c>)
 80018f4:	f004 f8ba 	bl	8005a6c <HAL_UART_Transmit>
    return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200003c8 	.word	0x200003c8

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopForever+0xe>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopForever+0x16>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001932:	f7ff fe23 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f004 fcb7 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7ff fbef 	bl	800111c <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001940:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800194c:	0800aa78 	.word	0x0800aa78
  ldr r2, =_sbss
 8001950:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001954:	20000454 	.word	0x20000454

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>
	...

0800195c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_Init+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_Init+0x28>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 fe99 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fd04 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000

08001988 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 feb1 	bl	800270e <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 fe79 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	2000044c 	.word	0x2000044c

08001a10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2000044c 	.word	0x2000044c

08001a28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_Delay+0x40>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b09a      	sub	sp, #104	; 0x68
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e1e3      	b.n	8001e54 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d176      	bne.n	8001b8c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d152      	bne.n	8001b4c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff f947 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13b      	bne.n	8001b4c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fcaf 	bl	8002438 <ADC_Disable>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d12f      	bne.n	8001b4c <HAL_ADC_Init+0xe0>
 8001aec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d12b      	bne.n	8001b4c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001afc:	f023 0302 	bic.w	r3, r3, #2
 8001b00:	f043 0202 	orr.w	r2, r3, #2
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b16:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b26:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_ADC_Init+0x308>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_ADC_Init+0x30c>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b3e:	e002      	b.n	8001b46 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b68:	d110      	bne.n	8001b8c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f023 0312 	bic.w	r3, r3, #18
 8001b72:	f043 0210 	orr.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 8150 	bne.w	8001e3a <HAL_ADC_Init+0x3ce>
 8001b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 814b 	bne.w	8001e3a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8143 	bne.w	8001e3a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bcc:	d004      	beq.n	8001bd8 <HAL_ADC_Init+0x16c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6a      	ldr	r2, [pc, #424]	; (8001d7c <HAL_ADC_Init+0x310>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_Init+0x170>
 8001bd8:	4b69      	ldr	r3, [pc, #420]	; (8001d80 <HAL_ADC_Init+0x314>)
 8001bda:	e000      	b.n	8001bde <HAL_ADC_Init+0x172>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <HAL_ADC_Init+0x318>)
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d102      	bne.n	8001bf0 <HAL_ADC_Init+0x184>
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_ADC_Init+0x310>)
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e01a      	b.n	8001c26 <HAL_ADC_Init+0x1ba>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a61      	ldr	r2, [pc, #388]	; (8001d7c <HAL_ADC_Init+0x310>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d103      	bne.n	8001c02 <HAL_ADC_Init+0x196>
 8001bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e011      	b.n	8001c26 <HAL_ADC_Init+0x1ba>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <HAL_ADC_Init+0x31c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <HAL_ADC_Init+0x1a6>
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_ADC_Init+0x320>)
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e009      	b.n	8001c26 <HAL_ADC_Init+0x1ba>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_ADC_Init+0x320>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d102      	bne.n	8001c22 <HAL_ADC_Init+0x1b6>
 8001c1c:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_ADC_Init+0x31c>)
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e001      	b.n	8001c26 <HAL_ADC_Init+0x1ba>
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_ADC_Init+0x1da>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x1da>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Init+0x1dc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11c      	bne.n	8001c86 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_ADC_Init+0x202>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Init+0x202>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_ADC_Init+0x204>
 8001c6e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d108      	bne.n	8001c86 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c84:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e5b      	ldrb	r3, [r3, #25]
 8001c8a:	035b      	lsls	r3, r3, #13
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c90:	2a01      	cmp	r2, #1
 8001c92:	d002      	beq.n	8001c9a <HAL_ADC_Init+0x22e>
 8001c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c98:	e000      	b.n	8001c9c <HAL_ADC_Init+0x230>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cac:	4313      	orrs	r3, r2
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d11b      	bne.n	8001cf2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7e5b      	ldrb	r3, [r3, #25]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	045a      	lsls	r2, r3, #17
 8001cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd4:	e00d      	b.n	8001cf2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cde:	f043 0220 	orr.w	r2, r3, #32
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d054      	beq.n	8001da4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_ADC_Init+0x31c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d004      	beq.n	8001d0e <HAL_ADC_Init+0x2a2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_ADC_Init+0x320>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d140      	bne.n	8001d90 <HAL_ADC_Init+0x324>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d16:	d02a      	beq.n	8001d6e <HAL_ADC_Init+0x302>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d20:	d022      	beq.n	8001d68 <HAL_ADC_Init+0x2fc>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d2a:	d01a      	beq.n	8001d62 <HAL_ADC_Init+0x2f6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001d34:	d012      	beq.n	8001d5c <HAL_ADC_Init+0x2f0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001d3e:	d00a      	beq.n	8001d56 <HAL_ADC_Init+0x2ea>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001d48:	d002      	beq.n	8001d50 <HAL_ADC_Init+0x2e4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	e023      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d54:	e020      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d60:	e01a      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d66:	e017      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d68:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001d6c:	e014      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d6e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001d72:	e011      	b.n	8001d98 <HAL_ADC_Init+0x32c>
 8001d74:	20000000 	.word	0x20000000
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	50000100 	.word	0x50000100
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700
 8001d88:	50000400 	.word	0x50000400
 8001d8c:	50000500 	.word	0x50000500
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da0:	4313      	orrs	r3, r2
 8001da2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d114      	bne.n	8001ddc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e1b      	ldrb	r3, [r3, #24]
 8001dca:	039a      	lsls	r2, r3, #14
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_ADC_Init+0x3f0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001dec:	430b      	orrs	r3, r1
 8001dee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10c      	bne.n	8001e12 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f023 010f 	bic.w	r1, r3, #15
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e10:	e007      	b.n	8001e22 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 020f 	bic.w	r2, r2, #15
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	e00a      	b.n	8001e50 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f023 0312 	bic.w	r3, r3, #18
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3768      	adds	r7, #104	; 0x68
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	fff0c007 	.word	0xfff0c007

08001e60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b09b      	sub	sp, #108	; 0x6c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x22>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e2cb      	b.n	800241a <HAL_ADC_ConfigChannel+0x5ba>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 82af 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d81c      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	231f      	movs	r3, #31
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e063      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b09      	cmp	r3, #9
 8001ee2:	d81e      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	3b1e      	subs	r3, #30
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	4019      	ands	r1, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	3b1e      	subs	r3, #30
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f20:	e040      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b0e      	cmp	r3, #14
 8001f28:	d81e      	bhi.n	8001f68 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	3b3c      	subs	r3, #60	; 0x3c
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4019      	ands	r1, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	3b3c      	subs	r3, #60	; 0x3c
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
 8001f66:	e01d      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	3b5a      	subs	r3, #90	; 0x5a
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	4019      	ands	r1, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	3b5a      	subs	r3, #90	; 0x5a
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 80e5 	bne.w	800217e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	d91c      	bls.n	8001ff6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6999      	ldr	r1, [r3, #24]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b1e      	subs	r3, #30
 8001fce:	2207      	movs	r2, #7
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4019      	ands	r1, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6898      	ldr	r0, [r3, #8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e019      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6959      	ldr	r1, [r3, #20]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	2207      	movs	r2, #7
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	4019      	ands	r1, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	3b01      	subs	r3, #1
 8002048:	2b03      	cmp	r3, #3
 800204a:	d84f      	bhi.n	80020ec <HAL_ADC_ConfigChannel+0x28c>
 800204c:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <HAL_ADC_ConfigChannel+0x1f4>)
 800204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002052:	bf00      	nop
 8002054:	08002065 	.word	0x08002065
 8002058:	08002087 	.word	0x08002087
 800205c:	080020a9 	.word	0x080020a9
 8002060:	080020cb 	.word	0x080020cb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800206a:	4b9f      	ldr	r3, [pc, #636]	; (80022e8 <HAL_ADC_ConfigChannel+0x488>)
 800206c:	4013      	ands	r3, r2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	0691      	lsls	r1, r2, #26
 8002074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002076:	430a      	orrs	r2, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002082:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002084:	e07e      	b.n	8002184 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800208c:	4b96      	ldr	r3, [pc, #600]	; (80022e8 <HAL_ADC_ConfigChannel+0x488>)
 800208e:	4013      	ands	r3, r2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	0691      	lsls	r1, r2, #26
 8002096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002098:	430a      	orrs	r2, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020a6:	e06d      	b.n	8002184 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ae:	4b8e      	ldr	r3, [pc, #568]	; (80022e8 <HAL_ADC_ConfigChannel+0x488>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	0691      	lsls	r1, r2, #26
 80020b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020ba:	430a      	orrs	r2, r1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020c8:	e05c      	b.n	8002184 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020d0:	4b85      	ldr	r3, [pc, #532]	; (80022e8 <HAL_ADC_ConfigChannel+0x488>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	0691      	lsls	r1, r2, #26
 80020da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020dc:	430a      	orrs	r2, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020ea:	e04b      	b.n	8002184 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d107      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800210e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002132:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	069b      	lsls	r3, r3, #26
 8002144:	429a      	cmp	r2, r3
 8002146:	d107      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002156:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	069b      	lsls	r3, r3, #26
 8002168:	429a      	cmp	r2, r3
 800216a:	d10a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800217c:	e001      	b.n	8002182 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800217e:	bf00      	nop
 8002180:	e000      	b.n	8002184 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002182:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x344>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x344>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x346>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8131 	bne.w	800240e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d00f      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80021d2:	e049      	b.n	8002268 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b09      	cmp	r3, #9
 80021f4:	d91c      	bls.n	8002230 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6999      	ldr	r1, [r3, #24]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	3b1b      	subs	r3, #27
 8002208:	2207      	movs	r2, #7
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	4019      	ands	r1, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6898      	ldr	r0, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	3b1b      	subs	r3, #27
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	619a      	str	r2, [r3, #24]
 800222e:	e01b      	b.n	8002268 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6959      	ldr	r1, [r3, #20]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002270:	d004      	beq.n	800227c <HAL_ADC_ConfigChannel+0x41c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_ADC_ConfigChannel+0x48c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x420>
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_ADC_ConfigChannel+0x490>)
 800227e:	e000      	b.n	8002282 <HAL_ADC_ConfigChannel+0x422>
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_ADC_ConfigChannel+0x494>)
 8002282:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b10      	cmp	r3, #16
 800228a:	d105      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800228c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800229c:	2b11      	cmp	r3, #17
 800229e:	d105      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	f040 80ac 	bne.w	800240e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 80a5 	bne.w	800240e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022cc:	d102      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x474>
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_ADC_ConfigChannel+0x48c>)
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e023      	b.n	800231c <HAL_ADC_ConfigChannel+0x4bc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_ADC_ConfigChannel+0x48c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10c      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x498>
 80022de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e01a      	b.n	800231c <HAL_ADC_ConfigChannel+0x4bc>
 80022e6:	bf00      	nop
 80022e8:	83fff000 	.word	0x83fff000
 80022ec:	50000100 	.word	0x50000100
 80022f0:	50000300 	.word	0x50000300
 80022f4:	50000700 	.word	0x50000700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <HAL_ADC_ConfigChannel+0x5c8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d102      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x4a8>
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_ADC_ConfigChannel+0x5cc>)
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e009      	b.n	800231c <HAL_ADC_ConfigChannel+0x4bc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_ADC_ConfigChannel+0x5cc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d102      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x4b8>
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <HAL_ADC_ConfigChannel+0x5c8>)
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e001      	b.n	800231c <HAL_ADC_ConfigChannel+0x4bc>
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_ADC_ConfigChannel+0x4dc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x4dc>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_ADC_ConfigChannel+0x4de>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d150      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002342:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x504>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x504>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_ADC_ConfigChannel+0x506>
 8002364:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13c      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d11d      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x54e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237a:	d118      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800237c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002386:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_ADC_ConfigChannel+0x5d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_ADC_ConfigChannel+0x5d4>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9a      	lsrs	r2, r3, #18
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800239e:	e002      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023ac:	e02e      	b.n	800240c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b11      	cmp	r3, #17
 80023b4:	d10b      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x56e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023be:	d106      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023cc:	e01e      	b.n	800240c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b12      	cmp	r3, #18
 80023d4:	d11a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023e2:	e013      	b.n	800240c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023f6:	e00a      	b.n	800240e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0220 	orr.w	r2, r3, #32
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800240a:	e000      	b.n	800240e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800240c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800241a:	4618      	mov	r0, r3
 800241c:	376c      	adds	r7, #108	; 0x6c
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	50000400 	.word	0x50000400
 800242c:	50000500 	.word	0x50000500
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83

08002438 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <ADC_Disable+0x2c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <ADC_Disable+0x2c>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <ADC_Disable+0x2e>
 8002464:	2300      	movs	r3, #0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d047      	beq.n	80024fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030d 	and.w	r3, r3, #13
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10f      	bne.n	8002498 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0202 	orr.w	r2, r2, #2
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2203      	movs	r2, #3
 800248e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002490:	f7ff fabe 	bl	8001a10 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002496:	e029      	b.n	80024ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0210 	orr.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e023      	b.n	80024fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024b4:	f7ff faac 	bl	8001a10 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d914      	bls.n	80024ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10d      	bne.n	80024ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d0dc      	beq.n	80024b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff29 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff3e 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff31 	bl	8002568 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	e160      	b.n	80029fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8152 	beq.w	80029f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d005      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0201 	and.w	r2, r3, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d017      	beq.n	8002806 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d123      	bne.n	800285a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	6939      	ldr	r1, [r7, #16]
 8002856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0203 	and.w	r2, r3, #3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80ac 	beq.w	80029f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289c:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <HAL_GPIO_Init+0x2f0>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_GPIO_Init+0x2f0>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_GPIO_Init+0x2f0>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028b4:	4a59      	ldr	r2, [pc, #356]	; (8002a1c <HAL_GPIO_Init+0x2f4>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028de:	d025      	beq.n	800292c <HAL_GPIO_Init+0x204>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_GPIO_Init+0x2f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01f      	beq.n	8002928 <HAL_GPIO_Init+0x200>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a4e      	ldr	r2, [pc, #312]	; (8002a24 <HAL_GPIO_Init+0x2fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d019      	beq.n	8002924 <HAL_GPIO_Init+0x1fc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <HAL_GPIO_Init+0x300>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <HAL_GPIO_Init+0x1f8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_GPIO_Init+0x304>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00d      	beq.n	800291c <HAL_GPIO_Init+0x1f4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_GPIO_Init+0x308>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <HAL_GPIO_Init+0x1f0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_GPIO_Init+0x30c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_GPIO_Init+0x1ec>
 8002910:	2306      	movs	r3, #6
 8002912:	e00c      	b.n	800292e <HAL_GPIO_Init+0x206>
 8002914:	2307      	movs	r3, #7
 8002916:	e00a      	b.n	800292e <HAL_GPIO_Init+0x206>
 8002918:	2305      	movs	r3, #5
 800291a:	e008      	b.n	800292e <HAL_GPIO_Init+0x206>
 800291c:	2304      	movs	r3, #4
 800291e:	e006      	b.n	800292e <HAL_GPIO_Init+0x206>
 8002920:	2303      	movs	r3, #3
 8002922:	e004      	b.n	800292e <HAL_GPIO_Init+0x206>
 8002924:	2302      	movs	r3, #2
 8002926:	e002      	b.n	800292e <HAL_GPIO_Init+0x206>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_GPIO_Init+0x206>
 800292c:	2300      	movs	r3, #0
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4093      	lsls	r3, r2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800293e:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_GPIO_Init+0x2f4>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294c:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <HAL_GPIO_Init+0x310>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_GPIO_Init+0x310>)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <HAL_GPIO_Init+0x310>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <HAL_GPIO_Init+0x310>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_GPIO_Init+0x310>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_GPIO_Init+0x310>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_GPIO_Init+0x310>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_GPIO_Init+0x310>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f ae97 	bne.w	8002738 <HAL_GPIO_Init+0x10>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	48000c00 	.word	0x48000c00
 8002a2c:	48001000 	.word	0x48001000
 8002a30:	48001400 	.word	0x48001400
 8002a34:	48001800 	.word	0x48001800
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f806 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e081      	b.n	8002bc8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7fe fa8b 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2224      	movs	r2, #36	; 0x24
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	e006      	b.n	8002b3a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d104      	bne.n	8002b4c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69d9      	ldr	r1, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f040 80f9 	bne.w	8002dea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_I2C_Mem_Write+0x34>
 8002bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ed      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Write+0x4e>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e0e6      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c26:	f7fe fef3 	bl	8001a10 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2319      	movs	r3, #25
 8002c32:	2201      	movs	r2, #1
 8002c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fbcb 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d1      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c70:	88f8      	ldrh	r0, [r7, #6]
 8002c72:	893a      	ldrh	r2, [r7, #8]
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	4603      	mov	r3, r0
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fadb 	bl	800323c <I2C_RequestMemoryWrite>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0a9      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d90e      	bls.n	8002cc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fcbd 	bl	8003638 <I2C_TransferConfig>
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fcac 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fbb5 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e07b      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d034      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x1c8>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d130      	bne.n	8002d98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fb47 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04d      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2bff      	cmp	r3, #255	; 0xff
 8002d58:	d90e      	bls.n	8002d78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc61 	bl	8003638 <I2C_TransferConfig>
 8002d76:	e00f      	b.n	8002d98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fc50 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d19e      	bne.n	8002ce0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fb94 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e01a      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_I2C_Mem_Write+0x224>)
 8002dca:	400b      	ands	r3, r1
 8002dcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	fe00e800 	.word	0xfe00e800

08002df8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 80fd 	bne.w	800301a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_I2C_Mem_Read+0x34>
 8002e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0f1      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x4e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0ea      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fddf 	bl	8001a10 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2319      	movs	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fab7 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d5      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2222      	movs	r2, #34	; 0x22
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e98:	88f8      	ldrh	r0, [r7, #6]
 8002e9a:	893a      	ldrh	r2, [r7, #8]
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fa1b 	bl	80032e4 <I2C_RequestMemoryRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0ad      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d90e      	bls.n	8002ee8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	4b52      	ldr	r3, [pc, #328]	; (8003024 <HAL_I2C_Mem_Read+0x22c>)
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fba9 	bl	8003638 <I2C_TransferConfig>
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_I2C_Mem_Read+0x22c>)
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb98 	bl	8003638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2104      	movs	r1, #4
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa5e 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07c      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d034      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x1d0>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d130      	bne.n	8002fc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fa2f 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04d      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2bff      	cmp	r3, #255	; 0xff
 8002f88:	d90e      	bls.n	8002fa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	22ff      	movs	r2, #255	; 0xff
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fb49 	bl	8003638 <I2C_TransferConfig>
 8002fa6:	e00f      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fb38 	bl	8003638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d19a      	bne.n	8002f08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa7c 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01a      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2220      	movs	r2, #32
 8002fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_I2C_Mem_Read+0x230>)
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	80002400 	.word	0x80002400
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 80f1 	bne.w	8003230 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305c:	d101      	bne.n	8003062 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	e0e7      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2C_IsDeviceReady+0x44>
 800306c:	2302      	movs	r3, #2
 800306e:	e0e0      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2224      	movs	r2, #36	; 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_I2C_IsDeviceReady+0x72>
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003094:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800309c:	e004      	b.n	80030a8 <HAL_I2C_IsDeviceReady+0x7c>
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fcaf 	bl	8001a10 <HAL_GetTick>
 80030b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030e0:	e034      	b.n	800314c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d01a      	beq.n	8003120 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fc91 	bl	8001a10 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <HAL_I2C_IsDeviceReady+0xd4>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e088      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800314c:	7ffb      	ldrb	r3, [r7, #31]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <HAL_I2C_IsDeviceReady+0x12c>
 8003152:	7fbb      	ldrb	r3, [r7, #30]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0c4      	beq.n	80030e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b10      	cmp	r3, #16
 8003164:	d01a      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	2120      	movs	r1, #32
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f92f 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e058      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e04a      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2120      	movs	r1, #32
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f914 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03d      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2220      	movs	r2, #32
 80031c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d118      	bne.n	8003200 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2120      	movs	r1, #32
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f8f3 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01c      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2220      	movs	r2, #32
 80031fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3301      	adds	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	f63f af3b 	bhi.w	8003086 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	460b      	mov	r3, r1
 8003250:	813b      	strh	r3, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8979      	ldrh	r1, [r7, #10]
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <I2C_RequestMemoryWrite+0xa4>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f9e7 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f8f0 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e02c      	b.n	80032d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
 800328e:	e015      	b.n	80032bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	b29b      	uxth	r3, r3
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	69b9      	ldr	r1, [r7, #24]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8d6 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e012      	b.n	80032d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b2:	893b      	ldrh	r3, [r7, #8]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f884 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	80002000 	.word	0x80002000

080032e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	8979      	ldrh	r1, [r7, #10]
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <I2C_RequestMemoryRead+0xa4>)
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f994 	bl	8003638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f89d 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e02c      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
 8003334:	e015      	b.n	8003362 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	b29b      	uxth	r3, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f883 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e012      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2200      	movs	r2, #0
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f831 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	80002000 	.word	0x80002000

0800338c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d103      	bne.n	80033aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	619a      	str	r2, [r3, #24]
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e022      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d01e      	beq.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fb0f 	bl	8001a10 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d113      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e00f      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d0cd      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003460:	e02c      	b.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f870 	bl	800354c <I2C_IsAcknowledgeFailed>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02a      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d01e      	beq.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fac7 	bl	8001a10 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d1cb      	bne.n	8003462 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	e028      	b.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f830 	bl	800354c <I2C_IsAcknowledgeFailed>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e026      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe fa8b 	bl	8001a10 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d1cf      	bne.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b10      	cmp	r3, #16
 8003564:	d161      	bne.n	800362a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003574:	d02b      	beq.n	80035ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003584:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003586:	e022      	b.n	80035ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d01e      	beq.n	80035ce <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe fa3e 	bl	8001a10 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_IsAcknowledgeFailed+0x5a>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d113      	bne.n	80035ce <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e02e      	b.n	800362c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d1d5      	bne.n	8003588 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2210      	movs	r2, #16
 80035e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2220      	movs	r2, #32
 80035ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff fecd 	bl	800338c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <I2C_IsAcknowledgeFailed+0xe8>)
 80035fe:	400b      	ands	r3, r1
 8003600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fe00e800 	.word	0xfe00e800

08003638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	4613      	mov	r3, r2
 8003648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	0d5b      	lsrs	r3, r3, #21
 8003654:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <I2C_TransferConfig+0x58>)
 800365a:	430b      	orrs	r3, r1
 800365c:	43db      	mvns	r3, r3
 800365e:	ea02 0103 	and.w	r1, r2, r3
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003668:	7a7b      	ldrb	r3, [r7, #9]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	431a      	orrs	r2, r3
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	03ff63ff 	.word	0x03ff63ff

08003694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d138      	bne.n	800371c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e032      	b.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b20      	cmp	r3, #32
 800373e:	d139      	bne.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800374a:	2302      	movs	r3, #2
 800374c:	e033      	b.n	80037b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800377c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e000      	b.n	80037b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f000 bf01 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8160 	beq.w	8003aae <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037ee:	4bae      	ldr	r3, [pc, #696]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d00c      	beq.n	8003814 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037fa:	4bab      	ldr	r3, [pc, #684]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d159      	bne.n	80038ba <HAL_RCC_OscConfig+0xf6>
 8003806:	4ba8      	ldr	r3, [pc, #672]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d152      	bne.n	80038ba <HAL_RCC_OscConfig+0xf6>
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003828:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <HAL_RCC_OscConfig+0x82>
 8003840:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0xae>
 8003846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800385a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800385e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003862:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800386e:	4b8e      	ldr	r3, [pc, #568]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003876:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800387a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003886:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800388a:	fab2 f282 	clz	r2, r2
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f002 021f 	and.w	r2, r2, #31
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f202 	lsl.w	r2, r1, r2
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8102 	beq.w	8003aac <HAL_RCC_OscConfig+0x2e8>
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 80fc 	bne.w	8003aac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f000 be93 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x110>
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e030      	b.n	8003936 <HAL_RCC_OscConfig+0x172>
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x134>
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a71      	ldr	r2, [pc, #452]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6e      	ldr	r2, [pc, #440]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80038f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e01e      	b.n	8003936 <HAL_RCC_OscConfig+0x172>
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x15a>
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 800390a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a64      	ldr	r2, [pc, #400]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x172>
 800391e:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a61      	ldr	r2, [pc, #388]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5e      	ldr	r2, [pc, #376]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d059      	beq.n	80039f4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f866 	bl	8001a10 <HAL_GetTick>
 8003944:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394a:	f7fe f861 	bl	8001a10 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d902      	bls.n	8003960 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f000 be40 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003964:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003974:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <HAL_RCC_OscConfig+0x1ce>
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	e015      	b.n	80039be <HAL_RCC_OscConfig+0x1fa>
 8003992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003996:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80039a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80039ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039c2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80039c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80039ca:	fa92 f2a2 	rbit	r2, r2
 80039ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80039d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80039d6:	fab2 f282 	clz	r2, r2
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f042 0220 	orr.w	r2, r2, #32
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	f002 021f 	and.w	r2, r2, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ab      	beq.n	800394a <HAL_RCC_OscConfig+0x186>
 80039f2:	e05c      	b.n	8003aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe f80c 	bl	8001a10 <HAL_GetTick>
 80039f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fe:	f7fe f807 	bl	8001a10 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d902      	bls.n	8003a14 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	f000 bde6 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a18:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003a28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_RCC_OscConfig+0x282>
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x2ae>
 8003a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_RCC_OscConfig+0x2e4>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a76:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003a7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003a7e:	fa92 f2a2 	rbit	r2, r2
 8003a82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003a86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f002 021f 	and.w	r2, r2, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ab      	bne.n	80039fe <HAL_RCC_OscConfig+0x23a>
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_OscConfig+0x2ea>
 8003aa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8170 	beq.w	8003d9e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003abe:	4bd0      	ldr	r3, [pc, #832]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003aca:	4bcd      	ldr	r3, [pc, #820]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d16d      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3ee>
 8003ad6:	4bca      	ldr	r3, [pc, #808]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	d166      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3ee>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d102      	bne.n	8003b14 <HAL_RCC_OscConfig+0x350>
 8003b0e:	4bbc      	ldr	r3, [pc, #752]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	e013      	b.n	8003b3c <HAL_RCC_OscConfig+0x378>
 8003b14:	2302      	movs	r3, #2
 8003b16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003b26:	2302      	movs	r3, #2
 8003b28:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b38:	4bb1      	ldr	r3, [pc, #708]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003b42:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003b46:	fa92 f2a2 	rbit	r2, r2
 8003b4a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003b4e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f042 0220 	orr.w	r2, r2, #32
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	f002 021f 	and.w	r2, r2, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f202 	lsl.w	r2, r1, r2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCC_OscConfig+0x3ba>
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f000 bd31 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4ba0      	ldr	r3, [pc, #640]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	21f8      	movs	r1, #248	; 0xf8
 8003b8e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003b96:	fa91 f1a1 	rbit	r1, r1
 8003b9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003b9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ba2:	fab1 f181 	clz	r1, r1
 8003ba6:	b2c9      	uxtb	r1, r1
 8003ba8:	408b      	lsls	r3, r1
 8003baa:	4995      	ldr	r1, [pc, #596]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb0:	e0f5      	b.n	8003d9e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8085 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x504>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003bd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	461a      	mov	r2, r3
 8003be6:	2301      	movs	r3, #1
 8003be8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd ff11 	bl	8001a10 <HAL_GetTick>
 8003bee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fd ff0c 	bl	8001a10 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d902      	bls.n	8003c0a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f000 bceb 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003c1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0x476>
 8003c34:	4b72      	ldr	r3, [pc, #456]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	e013      	b.n	8003c62 <HAL_RCC_OscConfig+0x49e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c5e:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2202      	movs	r2, #2
 8003c64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003c6c:	fa92 f2a2 	rbit	r2, r2
 8003c70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003c74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f042 0220 	orr.w	r2, r2, #32
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0af      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	21f8      	movs	r1, #248	; 0xf8
 8003ca4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003cac:	fa91 f1a1 	rbit	r1, r1
 8003cb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003cb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003cb8:	fab1 f181 	clz	r1, r1
 8003cbc:	b2c9      	uxtb	r1, r1
 8003cbe:	408b      	lsls	r3, r1
 8003cc0:	494f      	ldr	r1, [pc, #316]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
 8003cc6:	e06a      	b.n	8003d9e <HAL_RCC_OscConfig+0x5da>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003cda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fe8c 	bl	8001a10 <HAL_GetTick>
 8003cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fd fe87 	bl	8001a10 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f000 bc66 	b.w	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003d26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0x580>
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e013      	b.n	8003d6c <HAL_RCC_OscConfig+0x5a8>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003d56:	2302      	movs	r3, #2
 8003d58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_RCC_OscConfig+0x63c>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003d72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003d7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f042 0220 	orr.w	r2, r2, #32
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f002 021f 	and.w	r2, r2, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f202 	lsl.w	r2, r1, r2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1af      	bne.n	8003cfe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80da 	beq.w	8003f62 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d069      	beq.n	8003e8c <HAL_RCC_OscConfig+0x6c8>
 8003db8:	2301      	movs	r3, #1
 8003dba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x640>)
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2301      	movs	r3, #1
 8003de0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fd fe15 	bl	8001a10 <HAL_GetTick>
 8003de6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	e00d      	b.n	8003e08 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fd fe10 	bl	8001a10 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d905      	bls.n	8003e08 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e3ef      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	10908120 	.word	0x10908120
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003e20:	2202      	movs	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	fa93 f2a3 	rbit	r2, r3
 8003e46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4c:	4ba4      	ldr	r3, [pc, #656]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e54:	2102      	movs	r1, #2
 8003e56:	6019      	str	r1, [r3, #0]
 8003e58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	fa93 f1a3 	rbit	r1, r3
 8003e62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e66:	6019      	str	r1, [r3, #0]
  return result;
 8003e68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0b0      	beq.n	8003dec <HAL_RCC_OscConfig+0x628>
 8003e8a:	e06a      	b.n	8003f62 <HAL_RCC_OscConfig+0x79e>
 8003e8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ea2:	601a      	str	r2, [r3, #0]
  return result;
 8003ea4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b8c      	ldr	r3, [pc, #560]	; (80040e4 <HAL_RCC_OscConfig+0x920>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fda7 	bl	8001a10 <HAL_GetTick>
 8003ec2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec6:	e009      	b.n	8003edc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fda2 	bl	8001a10 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e381      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8003edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ef8:	2202      	movs	r2, #2
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f10:	2202      	movs	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	6019      	str	r1, [r3, #0]
 8003f30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f1a3 	rbit	r1, r3
 8003f3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f3e:	6019      	str	r1, [r3, #0]
  return result;
 8003f40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2101      	movs	r1, #1
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1b2      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8157 	beq.w	8004220 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f78:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d112      	bne.n	8003faa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4a55      	ldr	r2, [pc, #340]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	61d3      	str	r3, [r2, #28]
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f98:	f107 030c 	add.w	r3, r7, #12
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_RCC_OscConfig+0x924>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11a      	bne.n	8003fec <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb6:	4b4c      	ldr	r3, [pc, #304]	; (80040e8 <HAL_RCC_OscConfig+0x924>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4b      	ldr	r2, [pc, #300]	; (80040e8 <HAL_RCC_OscConfig+0x924>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fd25 	bl	8001a10 <HAL_GetTick>
 8003fc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	e009      	b.n	8003fe0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd fd20 	bl	8001a10 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b64      	cmp	r3, #100	; 0x64
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e2ff      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x924>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x840>
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4a39      	ldr	r2, [pc, #228]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	e02f      	b.n	8004064 <HAL_RCC_OscConfig+0x8a0>
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x864>
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a33      	ldr	r2, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0x8a0>
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x888>
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0x8a0>
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06a      	beq.n	8004144 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406e:	f7fd fccf 	bl	8001a10 <HAL_GetTick>
 8004072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd fcca 	bl	8001a10 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	; 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e2a7      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8004090:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004094:	2202      	movs	r2, #2
 8004096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040ac:	2202      	movs	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040be:	601a      	str	r2, [r3, #0]
  return result;
 80040c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d108      	bne.n	80040ec <HAL_RCC_OscConfig+0x928>
 80040da:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <HAL_RCC_OscConfig+0x91c>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	e013      	b.n	8004108 <HAL_RCC_OscConfig+0x944>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	10908120 	.word	0x10908120
 80040e8:	40007000 	.word	0x40007000
 80040ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040f0:	2202      	movs	r2, #2
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	4bc0      	ldr	r3, [pc, #768]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800410c:	2102      	movs	r1, #2
 800410e:	6011      	str	r1, [r2, #0]
 8004110:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	fa92 f1a2 	rbit	r1, r2
 800411a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800411e:	6011      	str	r1, [r2, #0]
  return result;
 8004120:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	fab2 f282 	clz	r2, r2
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f002 021f 	and.w	r2, r2, #31
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f202 	lsl.w	r2, r1, r2
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d09a      	beq.n	8004078 <HAL_RCC_OscConfig+0x8b4>
 8004142:	e063      	b.n	800420c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fd fc64 	bl	8001a10 <HAL_GetTick>
 8004148:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	e00b      	b.n	8004166 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fd fc5f 	bl	8001a10 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e23c      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 8004166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800416a:	2202      	movs	r2, #2
 800416c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004182:	2202      	movs	r2, #2
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	fa93 f2a3 	rbit	r2, r3
 8004190:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004194:	601a      	str	r2, [r3, #0]
  return result;
 8004196:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800419a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_OscConfig+0x9f2>
 80041b0:	4b95      	ldr	r3, [pc, #596]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	e00d      	b.n	80041d2 <HAL_RCC_OscConfig+0xa0e>
 80041b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041ba:	2202      	movs	r2, #2
 80041bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	fa93 f2a3 	rbit	r2, r3
 80041c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	4b8e      	ldr	r3, [pc, #568]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80041d6:	2102      	movs	r1, #2
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	fa92 f1a2 	rbit	r1, r2
 80041e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80041e8:	6011      	str	r1, [r2, #0]
  return result;
 80041ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	fab2 f282 	clz	r2, r2
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	f002 021f 	and.w	r2, r2, #31
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1a0      	bne.n	800414e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800420c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a7b      	ldr	r2, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 81d9 	beq.w	80045de <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800422c:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	f000 81a6 	beq.w	8004586 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 811e 	bne.w	8004482 <HAL_RCC_OscConfig+0xcbe>
 8004246:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800424a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800424e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800425e:	601a      	str	r2, [r3, #0]
  return result;
 8004260:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004264:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd fbc8 	bl	8001a10 <HAL_GetTick>
 8004280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004284:	e009      	b.n	800429a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd fbc3 	bl	8001a10 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1a2      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 800429a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800429e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	fa93 f2a3 	rbit	r2, r3
 80042ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042b2:	601a      	str	r2, [r3, #0]
  return result;
 80042b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_OscConfig+0xb10>
 80042ce:	4b4e      	ldr	r3, [pc, #312]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	e01b      	b.n	800430c <HAL_RCC_OscConfig+0xb48>
 80042d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fa93 f2a3 	rbit	r2, r3
 80042e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004310:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	fa92 f1a2 	rbit	r1, r2
 8004320:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004324:	6011      	str	r1, [r2, #0]
  return result;
 8004326:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	fab2 f282 	clz	r2, r2
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	f042 0220 	orr.w	r2, r2, #32
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	f002 021f 	and.w	r2, r2, #31
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d19e      	bne.n	8004286 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f023 020f 	bic.w	r2, r3, #15
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	492c      	ldr	r1, [pc, #176]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 8004358:	4313      	orrs	r3, r2
 800435a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a19      	ldr	r1, [r3, #32]
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	430b      	orrs	r3, r1
 8004372:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800437c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	fa93 f2a3 	rbit	r2, r3
 800438c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004390:	601a      	str	r2, [r3, #0]
  return result;
 8004392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004396:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	461a      	mov	r2, r3
 80043aa:	2301      	movs	r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd fb2f 	bl	8001a10 <HAL_GetTick>
 80043b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b6:	e009      	b.n	80043cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fd fb2a 	bl	8001a10 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e109      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 80043cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	fa93 f2a3 	rbit	r2, r3
 80043e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043e4:	601a      	str	r2, [r3, #0]
  return result;
 80043e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <HAL_RCC_OscConfig+0xc48>
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <HAL_RCC_OscConfig+0xc44>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	e01e      	b.n	8004444 <HAL_RCC_OscConfig+0xc80>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800442a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	fa93 f2a3 	rbit	r2, r3
 800443a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_OscConfig+0xe28>)
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	fa92 f1a2 	rbit	r1, r2
 8004458:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800445c:	6011      	str	r1, [r2, #0]
  return result;
 800445e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f042 0220 	orr.w	r2, r2, #32
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	f002 021f 	and.w	r2, r2, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d09b      	beq.n	80043b8 <HAL_RCC_OscConfig+0xbf4>
 8004480:	e0ad      	b.n	80045de <HAL_RCC_OscConfig+0xe1a>
 8004482:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800448a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800449a:	601a      	str	r2, [r3, #0]
  return result;
 800449c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd faaa 	bl	8001a10 <HAL_GetTick>
 80044bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	e009      	b.n	80044d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fd faa5 	bl	8001a10 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e084      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
 80044d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ee:	601a      	str	r2, [r3, #0]
  return result;
 80044f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HAL_RCC_OscConfig+0xd4c>
 800450a:	4b38      	ldr	r3, [pc, #224]	; (80045ec <HAL_RCC_OscConfig+0xe28>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	e01b      	b.n	8004548 <HAL_RCC_OscConfig+0xd84>
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	fa93 f2a3 	rbit	r2, r3
 8004524:	f107 0320 	add.w	r3, r7, #32
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f107 031c 	add.w	r3, r7, #28
 800452e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	fa93 f2a3 	rbit	r2, r3
 800453e:	f107 0318 	add.w	r3, r7, #24
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCC_OscConfig+0xe28>)
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f107 0214 	add.w	r2, r7, #20
 800454c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004550:	6011      	str	r1, [r2, #0]
 8004552:	f107 0214 	add.w	r2, r7, #20
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	fa92 f1a2 	rbit	r1, r2
 800455c:	f107 0210 	add.w	r2, r7, #16
 8004560:	6011      	str	r1, [r2, #0]
  return result;
 8004562:	f107 0210 	add.w	r2, r7, #16
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	fab2 f282 	clz	r2, r2
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	f042 0220 	orr.w	r2, r2, #32
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	f002 021f 	and.w	r2, r2, #31
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d19e      	bne.n	80044c2 <HAL_RCC_OscConfig+0xcfe>
 8004584:	e02b      	b.n	80045de <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e025      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0xe28>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800459c:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCC_OscConfig+0xe28>)
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d111      	bne.n	80045da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d108      	bne.n	80045da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80045c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000

080045f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b09e      	sub	sp, #120	; 0x78
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e162      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b90      	ldr	r3, [pc, #576]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d910      	bls.n	8004638 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b8d      	ldr	r3, [pc, #564]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 0207 	bic.w	r2, r3, #7
 800461e:	498b      	ldr	r1, [pc, #556]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b89      	ldr	r3, [pc, #548]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e14a      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b82      	ldr	r3, [pc, #520]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	497f      	ldr	r1, [pc, #508]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80dc 	beq.w	800481c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d13c      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xf6>
 800466c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004670:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <HAL_RCC_ClockConfig+0xa6>
 8004690:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	e00f      	b.n	80046b6 <HAL_RCC_ClockConfig+0xc6>
 8004696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	667b      	str	r3, [r7, #100]	; 0x64
 80046a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046a8:	663b      	str	r3, [r7, #96]	; 0x60
 80046aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b2:	4b67      	ldr	r3, [pc, #412]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80046bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046be:	fa92 f2a2 	rbit	r2, r2
 80046c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80046c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046c6:	fab2 f282 	clz	r2, r2
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	f042 0220 	orr.w	r2, r2, #32
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	f002 021f 	and.w	r2, r2, #31
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f202 	lsl.w	r2, r1, r2
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d17b      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0f3      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d13c      	bne.n	8004768 <HAL_RCC_ClockConfig+0x178>
 80046ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d102      	bne.n	8004718 <HAL_RCC_ClockConfig+0x128>
 8004712:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	e00f      	b.n	8004738 <HAL_RCC_ClockConfig+0x148>
 8004718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800471c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
 8004726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004734:	4b46      	ldr	r3, [pc, #280]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800473c:	63ba      	str	r2, [r7, #56]	; 0x38
 800473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004740:	fa92 f2a2 	rbit	r2, r2
 8004744:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004748:	fab2 f282 	clz	r2, r2
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	f042 0220 	orr.w	r2, r2, #32
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	f002 021f 	and.w	r2, r2, #31
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f202 	lsl.w	r2, r1, r2
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d13a      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0b2      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
 8004768:	2302      	movs	r3, #2
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
 800478a:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	e00d      	b.n	80047ac <HAL_RCC_ClockConfig+0x1bc>
 8004790:	2302      	movs	r3, #2
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	2302      	movs	r3, #2
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	2202      	movs	r2, #2
 80047ae:	61ba      	str	r2, [r7, #24]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	fa92 f2a2 	rbit	r2, r2
 80047b6:	617a      	str	r2, [r7, #20]
  return result;
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	fab2 f282 	clz	r2, r2
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	f042 0220 	orr.w	r2, r2, #32
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	f002 021f 	and.w	r2, r2, #31
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e079      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	491a      	ldr	r1, [pc, #104]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fd f910 	bl	8001a10 <HAL_GetTick>
 80047f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd f90c 	bl	8001a10 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e061      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <HAL_RCC_ClockConfig+0x260>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d214      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4906      	ldr	r1, [pc, #24]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCC_ClockConfig+0x25c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e040      	b.n	80048ce <HAL_RCC_ClockConfig+0x2de>
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	491a      	ldr	r1, [pc, #104]	; (80048d8 <HAL_RCC_ClockConfig+0x2e8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4912      	ldr	r1, [pc, #72]	; (80048d8 <HAL_RCC_ClockConfig+0x2e8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004892:	f000 f829 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 8004896:	4601      	mov	r1, r0
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_RCC_ClockConfig+0x2e8>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	22f0      	movs	r2, #240	; 0xf0
 80048a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	fa92 f2a2 	rbit	r2, r2
 80048aa:	60fa      	str	r2, [r7, #12]
  return result;
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	fab2 f282 	clz	r2, r2
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	40d3      	lsrs	r3, r2
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x2ec>)
 80048b8:	5cd3      	ldrb	r3, [r2, r3]
 80048ba:	fa21 f303 	lsr.w	r3, r1, r3
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <HAL_RCC_ClockConfig+0x2f0>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCC_ClockConfig+0x2f4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd f85e 	bl	8001988 <HAL_InitTick>
  
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3778      	adds	r7, #120	; 0x78
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	0800a718 	.word	0x0800a718
 80048e0:	20000000 	.word	0x20000000
 80048e4:	20000004 	.word	0x20000004

080048e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b08b      	sub	sp, #44	; 0x2c
 80048ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b04      	cmp	r3, #4
 8004910:	d002      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x30>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d003      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x36>
 8004916:	e03f      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800491a:	623b      	str	r3, [r7, #32]
      break;
 800491c:	e03f      	b.n	800499e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004924:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004928:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	fa92 f2a2 	rbit	r2, r2
 8004930:	607a      	str	r2, [r7, #4]
  return result;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	fab2 f282 	clz	r2, r2
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	40d3      	lsrs	r3, r2
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	220f      	movs	r2, #15
 800494c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	fa92 f2a2 	rbit	r2, r2
 8004954:	60fa      	str	r2, [r7, #12]
  return result;
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	fab2 f282 	clz	r2, r2
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	40d3      	lsrs	r3, r2
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	fbb2 f2f3 	udiv	r2, r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	e007      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004982:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	fbb2 f2f3 	udiv	r2, r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	623b      	str	r3, [r7, #32]
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800499a:	623b      	str	r3, [r7, #32]
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	6a3b      	ldr	r3, [r7, #32]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	372c      	adds	r7, #44	; 0x2c
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40021000 	.word	0x40021000
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	0800a730 	.word	0x0800a730
 80049b8:	0800a740 	.word	0x0800a740

080049bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000000 	.word	0x20000000

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80049da:	f7ff ffef 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049de:	4601      	mov	r1, r0
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	fa92 f2a2 	rbit	r2, r2
 80049f4:	603a      	str	r2, [r7, #0]
  return result;
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	fab2 f282 	clz	r2, r2
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	40d3      	lsrs	r3, r2
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	0800a728 	.word	0x0800a728

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004a1e:	f7ff ffcd 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a22:	4601      	mov	r1, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004a2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	fa92 f2a2 	rbit	r2, r2
 8004a38:	603a      	str	r2, [r7, #0]
  return result;
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	fab2 f282 	clz	r2, r2
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	40d3      	lsrs	r3, r2
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004a46:	5cd3      	ldrb	r3, [r2, r3]
 8004a48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800a728 	.word	0x0800a728

08004a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b092      	sub	sp, #72	; 0x48
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80d4 	beq.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a80:	4b4e      	ldr	r3, [pc, #312]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10e      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a96:	61d3      	str	r3, [r2, #28]
 8004a98:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aaa:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d118      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab6:	4b42      	ldr	r3, [pc, #264]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a41      	ldr	r2, [pc, #260]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7fc ffa5 	bl	8001a10 <HAL_GetTick>
 8004ac6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fc ffa1 	bl	8001a10 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	; 0x64
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1d6      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004adc:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae8:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8084 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d07c      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b08:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	461a      	mov	r2, r3
 8004b32:	2301      	movs	r3, #1
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04b      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fc ff51 	bl	8001a10 <HAL_GetTick>
 8004b6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fc ff4d 	bl	8001a10 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e180      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	2302      	movs	r3, #2
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d108      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004bb6:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	e00d      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	10908100 	.word	0x10908100
 8004bc8:	2302      	movs	r3, #2
 8004bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	4ba0      	ldr	r3, [pc, #640]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2202      	movs	r2, #2
 8004bda:	613a      	str	r2, [r7, #16]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	fa92 f2a2 	rbit	r2, r2
 8004be2:	60fa      	str	r2, [r7, #12]
  return result;
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	fab2 f282 	clz	r2, r2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f002 021f 	and.w	r2, r2, #31
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0b7      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c02:	4b95      	ldr	r3, [pc, #596]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4992      	ldr	r1, [pc, #584]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b8e      	ldr	r3, [pc, #568]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4a8d      	ldr	r2, [pc, #564]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c34:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f023 0203 	bic.w	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4985      	ldr	r1, [pc, #532]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c52:	4b81      	ldr	r3, [pc, #516]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	497e      	ldr	r1, [pc, #504]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c70:	4b79      	ldr	r3, [pc, #484]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4976      	ldr	r1, [pc, #472]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c8e:	4b72      	ldr	r3, [pc, #456]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	496f      	ldr	r1, [pc, #444]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004cac:	4b6a      	ldr	r3, [pc, #424]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	4967      	ldr	r1, [pc, #412]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cca:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f023 0220 	bic.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4960      	ldr	r1, [pc, #384]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ce8:	4b5b      	ldr	r3, [pc, #364]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	4958      	ldr	r1, [pc, #352]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d06:	4b54      	ldr	r3, [pc, #336]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4951      	ldr	r1, [pc, #324]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d24:	4b4c      	ldr	r3, [pc, #304]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4949      	ldr	r1, [pc, #292]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d42:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4942      	ldr	r1, [pc, #264]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	493a      	ldr	r1, [pc, #232]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4933      	ldr	r1, [pc, #204]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	492b      	ldr	r1, [pc, #172]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4924      	ldr	r1, [pc, #144]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	491c      	ldr	r1, [pc, #112]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004df6:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	4915      	ldr	r1, [pc, #84]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	490d      	ldr	r1, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	4906      	ldr	r1, [pc, #24]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e50:	4b01      	ldr	r3, [pc, #4]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e64:	490b      	ldr	r1, [pc, #44]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	4904      	ldr	r1, [pc, #16]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3748      	adds	r7, #72	; 0x48
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000

08004e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e049      	b.n	8004f3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fbd4 	bl	800166c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 f94a 	bl	8005170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0ff      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b14      	cmp	r3, #20
 8004f72:	f200 80f0 	bhi.w	8005156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08005157 	.word	0x08005157
 8004f84:	08005157 	.word	0x08005157
 8004f88:	08005157 	.word	0x08005157
 8004f8c:	08005011 	.word	0x08005011
 8004f90:	08005157 	.word	0x08005157
 8004f94:	08005157 	.word	0x08005157
 8004f98:	08005157 	.word	0x08005157
 8004f9c:	08005053 	.word	0x08005053
 8004fa0:	08005157 	.word	0x08005157
 8004fa4:	08005157 	.word	0x08005157
 8004fa8:	08005157 	.word	0x08005157
 8004fac:	08005093 	.word	0x08005093
 8004fb0:	08005157 	.word	0x08005157
 8004fb4:	08005157 	.word	0x08005157
 8004fb8:	08005157 	.word	0x08005157
 8004fbc:	080050d5 	.word	0x080050d5
 8004fc0:	08005157 	.word	0x08005157
 8004fc4:	08005157 	.word	0x08005157
 8004fc8:	08005157 	.word	0x08005157
 8004fcc:	08005115 	.word	0x08005115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f968 	bl	80052ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0208 	orr.w	r2, r2, #8
 8004fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	619a      	str	r2, [r3, #24]
      break;
 800500e:	e0a5      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f9e2 	bl	80053e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	619a      	str	r2, [r3, #24]
      break;
 8005050:	e084      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa55 	bl	8005508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0204 	bic.w	r2, r2, #4
 800507c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69d9      	ldr	r1, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	61da      	str	r2, [r3, #28]
      break;
 8005090:	e064      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fac7 	bl	800562c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	021a      	lsls	r2, r3, #8
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	61da      	str	r2, [r3, #28]
      break;
 80050d2:	e043      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fb16 	bl	800570c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005112:	e023      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb60 	bl	80057e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	021a      	lsls	r2, r3, #8
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005154:	e002      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
      break;
 800515a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop

08005170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a42      	ldr	r2, [pc, #264]	; (800528c <TIM_Base_SetConfig+0x11c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518e:	d00f      	beq.n	80051b0 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <TIM_Base_SetConfig+0x120>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00b      	beq.n	80051b0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3e      	ldr	r2, [pc, #248]	; (8005294 <TIM_Base_SetConfig+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3d      	ldr	r2, [pc, #244]	; (8005298 <TIM_Base_SetConfig+0x128>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <TIM_Base_SetConfig+0x12c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d108      	bne.n	80051c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a31      	ldr	r2, [pc, #196]	; (800528c <TIM_Base_SetConfig+0x11c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01f      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d01b      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2e      	ldr	r2, [pc, #184]	; (8005290 <TIM_Base_SetConfig+0x120>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d017      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2d      	ldr	r2, [pc, #180]	; (8005294 <TIM_Base_SetConfig+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <TIM_Base_SetConfig+0x128>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2c      	ldr	r2, [pc, #176]	; (80052a0 <TIM_Base_SetConfig+0x130>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <TIM_Base_SetConfig+0x134>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <TIM_Base_SetConfig+0x138>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0x9a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a25      	ldr	r2, [pc, #148]	; (800529c <TIM_Base_SetConfig+0x12c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <TIM_Base_SetConfig+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <TIM_Base_SetConfig+0x100>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a13      	ldr	r2, [pc, #76]	; (8005298 <TIM_Base_SetConfig+0x128>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_Base_SetConfig+0x100>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <TIM_Base_SetConfig+0x130>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_Base_SetConfig+0x100>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <TIM_Base_SetConfig+0x134>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x100>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <TIM_Base_SetConfig+0x138>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x100>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0c      	ldr	r2, [pc, #48]	; (800529c <TIM_Base_SetConfig+0x12c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d103      	bne.n	8005278 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	615a      	str	r2, [r3, #20]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40013400 	.word	0x40013400
 800529c:	40015000 	.word	0x40015000
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 0302 	bic.w	r3, r3, #2
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a30      	ldr	r2, [pc, #192]	; (80053c8 <TIM_OC1_SetConfig+0x11c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <TIM_OC1_SetConfig+0x88>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_OC1_SetConfig+0x120>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00f      	beq.n	8005334 <TIM_OC1_SetConfig+0x88>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <TIM_OC1_SetConfig+0x124>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00b      	beq.n	8005334 <TIM_OC1_SetConfig+0x88>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <TIM_OC1_SetConfig+0x128>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_OC1_SetConfig+0x88>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <TIM_OC1_SetConfig+0x12c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_OC1_SetConfig+0x88>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <TIM_OC1_SetConfig+0x130>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10c      	bne.n	800534e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0308 	bic.w	r3, r3, #8
 800533a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <TIM_OC1_SetConfig+0x11c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_OC1_SetConfig+0xd2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <TIM_OC1_SetConfig+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_OC1_SetConfig+0xd2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <TIM_OC1_SetConfig+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC1_SetConfig+0xd2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <TIM_OC1_SetConfig+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC1_SetConfig+0xd2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <TIM_OC1_SetConfig+0x12c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC1_SetConfig+0xd2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <TIM_OC1_SetConfig+0x130>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d111      	bne.n	80053a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40013400 	.word	0x40013400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800
 80053dc:	40015000 	.word	0x40015000

080053e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0320 	bic.w	r3, r3, #32
 800542e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <TIM_OC2_SetConfig+0x110>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC2_SetConfig+0x74>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2b      	ldr	r2, [pc, #172]	; (80054f4 <TIM_OC2_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC2_SetConfig+0x74>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2a      	ldr	r2, [pc, #168]	; (80054f8 <TIM_OC2_SetConfig+0x118>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10d      	bne.n	8005470 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <TIM_OC2_SetConfig+0x110>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <TIM_OC2_SetConfig+0xc0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <TIM_OC2_SetConfig+0x114>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00f      	beq.n	80054a0 <TIM_OC2_SetConfig+0xc0>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <TIM_OC2_SetConfig+0x11c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_OC2_SetConfig+0xc0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <TIM_OC2_SetConfig+0x120>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_OC2_SetConfig+0xc0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <TIM_OC2_SetConfig+0x124>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC2_SetConfig+0xc0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC2_SetConfig+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d113      	bne.n	80054c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40015000 	.word	0x40015000
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <TIM_OC3_SetConfig+0x10c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_OC3_SetConfig+0x72>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <TIM_OC3_SetConfig+0x110>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x72>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <TIM_OC3_SetConfig+0x114>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d10d      	bne.n	8005596 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005594:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <TIM_OC3_SetConfig+0x10c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_OC3_SetConfig+0xbe>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <TIM_OC3_SetConfig+0x110>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC3_SetConfig+0xbe>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <TIM_OC3_SetConfig+0x118>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC3_SetConfig+0xbe>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_OC3_SetConfig+0x11c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC3_SetConfig+0xbe>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <TIM_OC3_SetConfig+0x120>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC3_SetConfig+0xbe>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a16      	ldr	r2, [pc, #88]	; (800561c <TIM_OC3_SetConfig+0x114>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40015000 	.word	0x40015000
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <TIM_OC4_SetConfig+0xc8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <TIM_OC4_SetConfig+0x8c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <TIM_OC4_SetConfig+0xcc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00f      	beq.n	80056b8 <TIM_OC4_SetConfig+0x8c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <TIM_OC4_SetConfig+0xd0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_OC4_SetConfig+0x8c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a17      	ldr	r2, [pc, #92]	; (8005700 <TIM_OC4_SetConfig+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_OC4_SetConfig+0x8c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a16      	ldr	r2, [pc, #88]	; (8005704 <TIM_OC4_SetConfig+0xd8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC4_SetConfig+0x8c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <TIM_OC4_SetConfig+0xdc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d109      	bne.n	80056cc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40015000 	.word	0x40015000

0800570c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <TIM_OC5_SetConfig+0xbc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <TIM_OC5_SetConfig+0xc0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <TIM_OC5_SetConfig+0xc4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <TIM_OC5_SetConfig+0xc8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <TIM_OC5_SetConfig+0xcc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC5_SetConfig+0x82>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <TIM_OC5_SetConfig+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d109      	bne.n	80057a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	40015000 	.word	0x40015000

080057e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	051b      	lsls	r3, r3, #20
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <TIM_OC6_SetConfig+0xc0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <TIM_OC6_SetConfig+0xc4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00f      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <TIM_OC6_SetConfig+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00b      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <TIM_OC6_SetConfig+0xcc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <TIM_OC6_SetConfig+0xd0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC6_SetConfig+0x84>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <TIM_OC6_SetConfig+0xd4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d109      	bne.n	8005878 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40015000 	.word	0x40015000

080058b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e06d      	b.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d01d      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d018      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a16      	ldr	r2, [pc, #88]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a11      	ldr	r2, [pc, #68]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10c      	bne.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40015000 	.word	0x40015000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40014000 	.word	0x40014000

080059d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e040      	b.n	8005a64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fb fef2 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2224      	movs	r2, #36	; 0x24
 80059fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8c0 	bl	8005b94 <UART_SetConfig>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e022      	b.n	8005a64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa88 	bl	8005f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb0f 	bl	8006080 <UART_CheckIdleState>
 8005a62:	4603      	mov	r3, r0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	f040 8082 	bne.w	8005b8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_UART_Transmit+0x26>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07a      	b.n	8005b8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit+0x38>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e073      	b.n	8005b8c <HAL_UART_Transmit+0x120>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2221      	movs	r2, #33	; 0x21
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fb ffa9 	bl	8001a10 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d108      	bne.n	8005aec <HAL_UART_Transmit+0x80>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e003      	b.n	8005af4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005afc:	e02d      	b.n	8005b5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fb02 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e039      	b.n	8005b8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3302      	adds	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e008      	b.n	8005b48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	b292      	uxth	r2, r2
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1cb      	bne.n	8005afe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2140      	movs	r1, #64	; 0x40
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 face 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e005      	b.n	8005b8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4baa      	ldr	r3, [pc, #680]	; (8005e68 <UART_SetConfig+0x2d4>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a98      	ldr	r2, [pc, #608]	; (8005e6c <UART_SetConfig+0x2d8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d121      	bne.n	8005c54 <UART_SetConfig+0xc0>
 8005c10:	4b97      	ldr	r3, [pc, #604]	; (8005e70 <UART_SetConfig+0x2dc>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d817      	bhi.n	8005c4c <UART_SetConfig+0xb8>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0x90>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c41 	.word	0x08005c41
 8005c2c:	08005c47 	.word	0x08005c47
 8005c30:	08005c3b 	.word	0x08005c3b
 8005c34:	2301      	movs	r3, #1
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e0b2      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e0af      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c40:	2304      	movs	r3, #4
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e0ac      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c46:	2308      	movs	r3, #8
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e0a9      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	bf00      	nop
 8005c52:	e0a5      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a86      	ldr	r2, [pc, #536]	; (8005e74 <UART_SetConfig+0x2e0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d123      	bne.n	8005ca6 <UART_SetConfig+0x112>
 8005c5e:	4b84      	ldr	r3, [pc, #528]	; (8005e70 <UART_SetConfig+0x2dc>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6a:	d012      	beq.n	8005c92 <UART_SetConfig+0xfe>
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d802      	bhi.n	8005c78 <UART_SetConfig+0xe4>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <UART_SetConfig+0xf2>
 8005c76:	e012      	b.n	8005c9e <UART_SetConfig+0x10a>
 8005c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c7c:	d00c      	beq.n	8005c98 <UART_SetConfig+0x104>
 8005c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c82:	d003      	beq.n	8005c8c <UART_SetConfig+0xf8>
 8005c84:	e00b      	b.n	8005c9e <UART_SetConfig+0x10a>
 8005c86:	2300      	movs	r3, #0
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e089      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e086      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c92:	2304      	movs	r3, #4
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e083      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e080      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	bf00      	nop
 8005ca4:	e07c      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a73      	ldr	r2, [pc, #460]	; (8005e78 <UART_SetConfig+0x2e4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d123      	bne.n	8005cf8 <UART_SetConfig+0x164>
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <UART_SetConfig+0x2dc>)
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cbc:	d012      	beq.n	8005ce4 <UART_SetConfig+0x150>
 8005cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc2:	d802      	bhi.n	8005cca <UART_SetConfig+0x136>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <UART_SetConfig+0x144>
 8005cc8:	e012      	b.n	8005cf0 <UART_SetConfig+0x15c>
 8005cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cce:	d00c      	beq.n	8005cea <UART_SetConfig+0x156>
 8005cd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cd4:	d003      	beq.n	8005cde <UART_SetConfig+0x14a>
 8005cd6:	e00b      	b.n	8005cf0 <UART_SetConfig+0x15c>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e060      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e05d      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e05a      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005cea:	2308      	movs	r3, #8
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e057      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	bf00      	nop
 8005cf6:	e053      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a5f      	ldr	r2, [pc, #380]	; (8005e7c <UART_SetConfig+0x2e8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d123      	bne.n	8005d4a <UART_SetConfig+0x1b6>
 8005d02:	4b5b      	ldr	r3, [pc, #364]	; (8005e70 <UART_SetConfig+0x2dc>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d0e:	d012      	beq.n	8005d36 <UART_SetConfig+0x1a2>
 8005d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d14:	d802      	bhi.n	8005d1c <UART_SetConfig+0x188>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <UART_SetConfig+0x196>
 8005d1a:	e012      	b.n	8005d42 <UART_SetConfig+0x1ae>
 8005d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d20:	d00c      	beq.n	8005d3c <UART_SetConfig+0x1a8>
 8005d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d26:	d003      	beq.n	8005d30 <UART_SetConfig+0x19c>
 8005d28:	e00b      	b.n	8005d42 <UART_SetConfig+0x1ae>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e037      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e034      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d36:	2304      	movs	r3, #4
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e031      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e02e      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d42:	2310      	movs	r3, #16
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	bf00      	nop
 8005d48:	e02a      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a4c      	ldr	r2, [pc, #304]	; (8005e80 <UART_SetConfig+0x2ec>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d123      	bne.n	8005d9c <UART_SetConfig+0x208>
 8005d54:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <UART_SetConfig+0x2dc>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d60:	d012      	beq.n	8005d88 <UART_SetConfig+0x1f4>
 8005d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d66:	d802      	bhi.n	8005d6e <UART_SetConfig+0x1da>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <UART_SetConfig+0x1e8>
 8005d6c:	e012      	b.n	8005d94 <UART_SetConfig+0x200>
 8005d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d72:	d00c      	beq.n	8005d8e <UART_SetConfig+0x1fa>
 8005d74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d78:	d003      	beq.n	8005d82 <UART_SetConfig+0x1ee>
 8005d7a:	e00b      	b.n	8005d94 <UART_SetConfig+0x200>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e00e      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d82:	2302      	movs	r3, #2
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e00b      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	77fb      	strb	r3, [r7, #31]
 8005d92:	e005      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d94:	2310      	movs	r3, #16
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	bf00      	nop
 8005d9a:	e001      	b.n	8005da0 <UART_SetConfig+0x20c>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da8:	d16e      	bne.n	8005e88 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d828      	bhi.n	8005e02 <UART_SetConfig+0x26e>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x224>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	08005e03 	.word	0x08005e03
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005e03 	.word	0x08005e03
 8005dd0:	08005e03 	.word	0x08005e03
 8005dd4:	08005e03 	.word	0x08005e03
 8005dd8:	08005dfb 	.word	0x08005dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fe fdfa 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8005de0:	61b8      	str	r0, [r7, #24]
        break;
 8005de2:	e013      	b.n	8005e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fe fe18 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8005de8:	61b8      	str	r0, [r7, #24]
        break;
 8005dea:	e00f      	b.n	8005e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <UART_SetConfig+0x2f0>)
 8005dee:	61bb      	str	r3, [r7, #24]
        break;
 8005df0:	e00c      	b.n	8005e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe fd79 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 8005df6:	61b8      	str	r0, [r7, #24]
        break;
 8005df8:	e008      	b.n	8005e0c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfe:	61bb      	str	r3, [r7, #24]
        break;
 8005e00:	e004      	b.n	8005e0c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	77bb      	strb	r3, [r7, #30]
        break;
 8005e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8086 	beq.w	8005f20 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	005a      	lsls	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	441a      	add	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b0f      	cmp	r3, #15
 8005e30:	d916      	bls.n	8005e60 <UART_SetConfig+0x2cc>
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d212      	bcs.n	8005e60 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f023 030f 	bic.w	r3, r3, #15
 8005e42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	89fa      	ldrh	r2, [r7, #14]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	e05f      	b.n	8005f20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	77bb      	strb	r3, [r7, #30]
 8005e64:	e05c      	b.n	8005f20 <UART_SetConfig+0x38c>
 8005e66:	bf00      	nop
 8005e68:	efff69f3 	.word	0xefff69f3
 8005e6c:	40013800 	.word	0x40013800
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40004400 	.word	0x40004400
 8005e78:	40004800 	.word	0x40004800
 8005e7c:	40004c00 	.word	0x40004c00
 8005e80:	40005000 	.word	0x40005000
 8005e84:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e88:	7ffb      	ldrb	r3, [r7, #31]
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d827      	bhi.n	8005ede <UART_SetConfig+0x34a>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0x300>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005ec1 	.word	0x08005ec1
 8005e9c:	08005ec9 	.word	0x08005ec9
 8005ea0:	08005edf 	.word	0x08005edf
 8005ea4:	08005ecf 	.word	0x08005ecf
 8005ea8:	08005edf 	.word	0x08005edf
 8005eac:	08005edf 	.word	0x08005edf
 8005eb0:	08005edf 	.word	0x08005edf
 8005eb4:	08005ed7 	.word	0x08005ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7fe fd8c 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8005ebc:	61b8      	str	r0, [r7, #24]
        break;
 8005ebe:	e013      	b.n	8005ee8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec0:	f7fe fdaa 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8005ec4:	61b8      	str	r0, [r7, #24]
        break;
 8005ec6:	e00f      	b.n	8005ee8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <UART_SetConfig+0x3a4>)
 8005eca:	61bb      	str	r3, [r7, #24]
        break;
 8005ecc:	e00c      	b.n	8005ee8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ece:	f7fe fd0b 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 8005ed2:	61b8      	str	r0, [r7, #24]
        break;
 8005ed4:	e008      	b.n	8005ee8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eda:	61bb      	str	r3, [r7, #24]
        break;
 8005edc:	e004      	b.n	8005ee8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085a      	lsrs	r2, r3, #1
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d908      	bls.n	8005f1c <UART_SetConfig+0x388>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f10:	d204      	bcs.n	8005f1c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	e001      	b.n	8005f20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	007a1200 	.word	0x007a1200

08005f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01a      	beq.n	8006052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603a:	d10a      	bne.n	8006052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006090:	f7fb fcbe 	bl	8001a10 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d10e      	bne.n	80060c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f82d 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e023      	b.n	800610a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d10e      	bne.n	80060ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f817 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e00d      	b.n	800610a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b09c      	sub	sp, #112	; 0x70
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	e0a5      	b.n	8006270 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	f000 80a1 	beq.w	8006270 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fb fc6f 	bl	8001a10 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <UART_WaitOnFlagUntilTimeout+0x32>
 800613e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006140:	2b00      	cmp	r3, #0
 8006142:	d13e      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006158:	667b      	str	r3, [r7, #100]	; 0x64
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006164:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006196:	64ba      	str	r2, [r7, #72]	; 0x48
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800619c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e067      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d04f      	beq.n	8006270 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061de:	d147      	bne.n	8006270 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800620e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	613b      	str	r3, [r7, #16]
   return(result);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	66bb      	str	r3, [r7, #104]	; 0x68
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800623c:	623a      	str	r2, [r7, #32]
 800623e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69f9      	ldr	r1, [r7, #28]
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	61bb      	str	r3, [r7, #24]
   return(result);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e010      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	429a      	cmp	r2, r3
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	429a      	cmp	r2, r3
 800628c:	f43f af4a 	beq.w	8006124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3770      	adds	r7, #112	; 0x70
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <__errno>:
 800629c:	4b01      	ldr	r3, [pc, #4]	; (80062a4 <__errno+0x8>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4e0d      	ldr	r6, [pc, #52]	; (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	; (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1ba4      	subs	r4, r4, r6
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2500      	movs	r5, #0
 80062b4:	42a5      	cmp	r5, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4e0b      	ldr	r6, [pc, #44]	; (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	; (80062ec <__libc_init_array+0x44>)
 80062bc:	f004 f9fc 	bl	800a6b8 <_init>
 80062c0:	1ba4      	subs	r4, r4, r6
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2500      	movs	r5, #0
 80062c6:	42a5      	cmp	r5, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062d0:	4798      	blx	r3
 80062d2:	3501      	adds	r5, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062da:	4798      	blx	r3
 80062dc:	3501      	adds	r5, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	0800aa70 	.word	0x0800aa70
 80062e4:	0800aa70 	.word	0x0800aa70
 80062e8:	0800aa70 	.word	0x0800aa70
 80062ec:	0800aa74 	.word	0x0800aa74

080062f0 <memcpy>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	1e43      	subs	r3, r0, #1
 80062f4:	440a      	add	r2, r1
 80062f6:	4291      	cmp	r1, r2
 80062f8:	d100      	bne.n	80062fc <memcpy+0xc>
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006304:	e7f7      	b.n	80062f6 <memcpy+0x6>

08006306 <memset>:
 8006306:	4402      	add	r2, r0
 8006308:	4603      	mov	r3, r0
 800630a:	4293      	cmp	r3, r2
 800630c:	d100      	bne.n	8006310 <memset+0xa>
 800630e:	4770      	bx	lr
 8006310:	f803 1b01 	strb.w	r1, [r3], #1
 8006314:	e7f9      	b.n	800630a <memset+0x4>

08006316 <__cvt>:
 8006316:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800631a:	ec55 4b10 	vmov	r4, r5, d0
 800631e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006320:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006324:	2d00      	cmp	r5, #0
 8006326:	460e      	mov	r6, r1
 8006328:	4691      	mov	r9, r2
 800632a:	4619      	mov	r1, r3
 800632c:	bfb8      	it	lt
 800632e:	4622      	movlt	r2, r4
 8006330:	462b      	mov	r3, r5
 8006332:	f027 0720 	bic.w	r7, r7, #32
 8006336:	bfbb      	ittet	lt
 8006338:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800633c:	461d      	movlt	r5, r3
 800633e:	2300      	movge	r3, #0
 8006340:	232d      	movlt	r3, #45	; 0x2d
 8006342:	bfb8      	it	lt
 8006344:	4614      	movlt	r4, r2
 8006346:	2f46      	cmp	r7, #70	; 0x46
 8006348:	700b      	strb	r3, [r1, #0]
 800634a:	d004      	beq.n	8006356 <__cvt+0x40>
 800634c:	2f45      	cmp	r7, #69	; 0x45
 800634e:	d100      	bne.n	8006352 <__cvt+0x3c>
 8006350:	3601      	adds	r6, #1
 8006352:	2102      	movs	r1, #2
 8006354:	e000      	b.n	8006358 <__cvt+0x42>
 8006356:	2103      	movs	r1, #3
 8006358:	ab03      	add	r3, sp, #12
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	ab02      	add	r3, sp, #8
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4632      	mov	r2, r6
 8006362:	4653      	mov	r3, sl
 8006364:	ec45 4b10 	vmov	d0, r4, r5
 8006368:	f001 fd8e 	bl	8007e88 <_dtoa_r>
 800636c:	2f47      	cmp	r7, #71	; 0x47
 800636e:	4680      	mov	r8, r0
 8006370:	d102      	bne.n	8006378 <__cvt+0x62>
 8006372:	f019 0f01 	tst.w	r9, #1
 8006376:	d026      	beq.n	80063c6 <__cvt+0xb0>
 8006378:	2f46      	cmp	r7, #70	; 0x46
 800637a:	eb08 0906 	add.w	r9, r8, r6
 800637e:	d111      	bne.n	80063a4 <__cvt+0x8e>
 8006380:	f898 3000 	ldrb.w	r3, [r8]
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d10a      	bne.n	800639e <__cvt+0x88>
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7fa fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006394:	b918      	cbnz	r0, 800639e <__cvt+0x88>
 8006396:	f1c6 0601 	rsb	r6, r6, #1
 800639a:	f8ca 6000 	str.w	r6, [sl]
 800639e:	f8da 3000 	ldr.w	r3, [sl]
 80063a2:	4499      	add	r9, r3
 80063a4:	2200      	movs	r2, #0
 80063a6:	2300      	movs	r3, #0
 80063a8:	4620      	mov	r0, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7fa fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b0:	b938      	cbnz	r0, 80063c2 <__cvt+0xac>
 80063b2:	2230      	movs	r2, #48	; 0x30
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	454b      	cmp	r3, r9
 80063b8:	d205      	bcs.n	80063c6 <__cvt+0xb0>
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	9103      	str	r1, [sp, #12]
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	e7f8      	b.n	80063b4 <__cvt+0x9e>
 80063c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ca:	eba3 0308 	sub.w	r3, r3, r8
 80063ce:	4640      	mov	r0, r8
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	b004      	add	sp, #16
 80063d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080063d8 <__exponent>:
 80063d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063da:	2900      	cmp	r1, #0
 80063dc:	4604      	mov	r4, r0
 80063de:	bfba      	itte	lt
 80063e0:	4249      	neglt	r1, r1
 80063e2:	232d      	movlt	r3, #45	; 0x2d
 80063e4:	232b      	movge	r3, #43	; 0x2b
 80063e6:	2909      	cmp	r1, #9
 80063e8:	f804 2b02 	strb.w	r2, [r4], #2
 80063ec:	7043      	strb	r3, [r0, #1]
 80063ee:	dd20      	ble.n	8006432 <__exponent+0x5a>
 80063f0:	f10d 0307 	add.w	r3, sp, #7
 80063f4:	461f      	mov	r7, r3
 80063f6:	260a      	movs	r6, #10
 80063f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80063fc:	fb06 1115 	mls	r1, r6, r5, r1
 8006400:	3130      	adds	r1, #48	; 0x30
 8006402:	2d09      	cmp	r5, #9
 8006404:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006408:	f103 32ff 	add.w	r2, r3, #4294967295
 800640c:	4629      	mov	r1, r5
 800640e:	dc09      	bgt.n	8006424 <__exponent+0x4c>
 8006410:	3130      	adds	r1, #48	; 0x30
 8006412:	3b02      	subs	r3, #2
 8006414:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006418:	42bb      	cmp	r3, r7
 800641a:	4622      	mov	r2, r4
 800641c:	d304      	bcc.n	8006428 <__exponent+0x50>
 800641e:	1a10      	subs	r0, r2, r0
 8006420:	b003      	add	sp, #12
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006424:	4613      	mov	r3, r2
 8006426:	e7e7      	b.n	80063f8 <__exponent+0x20>
 8006428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800642c:	f804 2b01 	strb.w	r2, [r4], #1
 8006430:	e7f2      	b.n	8006418 <__exponent+0x40>
 8006432:	2330      	movs	r3, #48	; 0x30
 8006434:	4419      	add	r1, r3
 8006436:	7083      	strb	r3, [r0, #2]
 8006438:	1d02      	adds	r2, r0, #4
 800643a:	70c1      	strb	r1, [r0, #3]
 800643c:	e7ef      	b.n	800641e <__exponent+0x46>
	...

08006440 <_printf_float>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	b08d      	sub	sp, #52	; 0x34
 8006446:	460c      	mov	r4, r1
 8006448:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800644c:	4616      	mov	r6, r2
 800644e:	461f      	mov	r7, r3
 8006450:	4605      	mov	r5, r0
 8006452:	f002 fec7 	bl	80091e4 <_localeconv_r>
 8006456:	6803      	ldr	r3, [r0, #0]
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	4618      	mov	r0, r3
 800645c:	f7f9 fec0 	bl	80001e0 <strlen>
 8006460:	2300      	movs	r3, #0
 8006462:	930a      	str	r3, [sp, #40]	; 0x28
 8006464:	f8d8 3000 	ldr.w	r3, [r8]
 8006468:	9005      	str	r0, [sp, #20]
 800646a:	3307      	adds	r3, #7
 800646c:	f023 0307 	bic.w	r3, r3, #7
 8006470:	f103 0208 	add.w	r2, r3, #8
 8006474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006478:	f8d4 b000 	ldr.w	fp, [r4]
 800647c:	f8c8 2000 	str.w	r2, [r8]
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006488:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800648c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006490:	9307      	str	r3, [sp, #28]
 8006492:	f8cd 8018 	str.w	r8, [sp, #24]
 8006496:	f04f 32ff 	mov.w	r2, #4294967295
 800649a:	4ba7      	ldr	r3, [pc, #668]	; (8006738 <_printf_float+0x2f8>)
 800649c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a0:	f7fa fb4c 	bl	8000b3c <__aeabi_dcmpun>
 80064a4:	bb70      	cbnz	r0, 8006504 <_printf_float+0xc4>
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	4ba3      	ldr	r3, [pc, #652]	; (8006738 <_printf_float+0x2f8>)
 80064ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b0:	f7fa fb26 	bl	8000b00 <__aeabi_dcmple>
 80064b4:	bb30      	cbnz	r0, 8006504 <_printf_float+0xc4>
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	f7fa fb15 	bl	8000aec <__aeabi_dcmplt>
 80064c2:	b110      	cbz	r0, 80064ca <_printf_float+0x8a>
 80064c4:	232d      	movs	r3, #45	; 0x2d
 80064c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ca:	4a9c      	ldr	r2, [pc, #624]	; (800673c <_printf_float+0x2fc>)
 80064cc:	4b9c      	ldr	r3, [pc, #624]	; (8006740 <_printf_float+0x300>)
 80064ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80064d2:	bf8c      	ite	hi
 80064d4:	4690      	movhi	r8, r2
 80064d6:	4698      	movls	r8, r3
 80064d8:	2303      	movs	r3, #3
 80064da:	f02b 0204 	bic.w	r2, fp, #4
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	f04f 0900 	mov.w	r9, #0
 80064e6:	9700      	str	r7, [sp, #0]
 80064e8:	4633      	mov	r3, r6
 80064ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80064ec:	4621      	mov	r1, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f9e6 	bl	80068c0 <_printf_common>
 80064f4:	3001      	adds	r0, #1
 80064f6:	f040 808d 	bne.w	8006614 <_printf_float+0x1d4>
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295
 80064fe:	b00d      	add	sp, #52	; 0x34
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7fa fb16 	bl	8000b3c <__aeabi_dcmpun>
 8006510:	b110      	cbz	r0, 8006518 <_printf_float+0xd8>
 8006512:	4a8c      	ldr	r2, [pc, #560]	; (8006744 <_printf_float+0x304>)
 8006514:	4b8c      	ldr	r3, [pc, #560]	; (8006748 <_printf_float+0x308>)
 8006516:	e7da      	b.n	80064ce <_printf_float+0x8e>
 8006518:	6861      	ldr	r1, [r4, #4]
 800651a:	1c4b      	adds	r3, r1, #1
 800651c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006520:	a80a      	add	r0, sp, #40	; 0x28
 8006522:	d13e      	bne.n	80065a2 <_printf_float+0x162>
 8006524:	2306      	movs	r3, #6
 8006526:	6063      	str	r3, [r4, #4]
 8006528:	2300      	movs	r3, #0
 800652a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800652e:	ab09      	add	r3, sp, #36	; 0x24
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	ec49 8b10 	vmov	d0, r8, r9
 8006536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800653a:	6022      	str	r2, [r4, #0]
 800653c:	f8cd a004 	str.w	sl, [sp, #4]
 8006540:	6861      	ldr	r1, [r4, #4]
 8006542:	4628      	mov	r0, r5
 8006544:	f7ff fee7 	bl	8006316 <__cvt>
 8006548:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800654c:	2b47      	cmp	r3, #71	; 0x47
 800654e:	4680      	mov	r8, r0
 8006550:	d109      	bne.n	8006566 <_printf_float+0x126>
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	1cd8      	adds	r0, r3, #3
 8006556:	db02      	blt.n	800655e <_printf_float+0x11e>
 8006558:	6862      	ldr	r2, [r4, #4]
 800655a:	4293      	cmp	r3, r2
 800655c:	dd47      	ble.n	80065ee <_printf_float+0x1ae>
 800655e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006562:	fa5f fa8a 	uxtb.w	sl, sl
 8006566:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800656a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800656c:	d824      	bhi.n	80065b8 <_printf_float+0x178>
 800656e:	3901      	subs	r1, #1
 8006570:	4652      	mov	r2, sl
 8006572:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006576:	9109      	str	r1, [sp, #36]	; 0x24
 8006578:	f7ff ff2e 	bl	80063d8 <__exponent>
 800657c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800657e:	1813      	adds	r3, r2, r0
 8006580:	2a01      	cmp	r2, #1
 8006582:	4681      	mov	r9, r0
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	dc02      	bgt.n	800658e <_printf_float+0x14e>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	07d1      	lsls	r1, r2, #31
 800658c:	d501      	bpl.n	8006592 <_printf_float+0x152>
 800658e:	3301      	adds	r3, #1
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0a5      	beq.n	80064e6 <_printf_float+0xa6>
 800659a:	232d      	movs	r3, #45	; 0x2d
 800659c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a0:	e7a1      	b.n	80064e6 <_printf_float+0xa6>
 80065a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80065a6:	f000 8177 	beq.w	8006898 <_printf_float+0x458>
 80065aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80065ae:	d1bb      	bne.n	8006528 <_printf_float+0xe8>
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d1b9      	bne.n	8006528 <_printf_float+0xe8>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7b6      	b.n	8006526 <_printf_float+0xe6>
 80065b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80065bc:	d119      	bne.n	80065f2 <_printf_float+0x1b2>
 80065be:	2900      	cmp	r1, #0
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	dd0c      	ble.n	80065de <_printf_float+0x19e>
 80065c4:	6121      	str	r1, [r4, #16]
 80065c6:	b913      	cbnz	r3, 80065ce <_printf_float+0x18e>
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	07d2      	lsls	r2, r2, #31
 80065cc:	d502      	bpl.n	80065d4 <_printf_float+0x194>
 80065ce:	3301      	adds	r3, #1
 80065d0:	440b      	add	r3, r1
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80065d8:	f04f 0900 	mov.w	r9, #0
 80065dc:	e7d9      	b.n	8006592 <_printf_float+0x152>
 80065de:	b913      	cbnz	r3, 80065e6 <_printf_float+0x1a6>
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	07d0      	lsls	r0, r2, #31
 80065e4:	d501      	bpl.n	80065ea <_printf_float+0x1aa>
 80065e6:	3302      	adds	r3, #2
 80065e8:	e7f3      	b.n	80065d2 <_printf_float+0x192>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e7f1      	b.n	80065d2 <_printf_float+0x192>
 80065ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80065f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065f6:	4293      	cmp	r3, r2
 80065f8:	db05      	blt.n	8006606 <_printf_float+0x1c6>
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	07d1      	lsls	r1, r2, #31
 8006600:	d5e8      	bpl.n	80065d4 <_printf_float+0x194>
 8006602:	3301      	adds	r3, #1
 8006604:	e7e5      	b.n	80065d2 <_printf_float+0x192>
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfd4      	ite	le
 800660a:	f1c3 0302 	rsble	r3, r3, #2
 800660e:	2301      	movgt	r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	e7de      	b.n	80065d2 <_printf_float+0x192>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	055a      	lsls	r2, r3, #21
 8006618:	d407      	bmi.n	800662a <_printf_float+0x1ea>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d12b      	bne.n	8006680 <_printf_float+0x240>
 8006628:	e767      	b.n	80064fa <_printf_float+0xba>
 800662a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800662e:	f240 80dc 	bls.w	80067ea <_printf_float+0x3aa>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800663a:	f7fa fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800663e:	2800      	cmp	r0, #0
 8006640:	d033      	beq.n	80066aa <_printf_float+0x26a>
 8006642:	2301      	movs	r3, #1
 8006644:	4a41      	ldr	r2, [pc, #260]	; (800674c <_printf_float+0x30c>)
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f af54 	beq.w	80064fa <_printf_float+0xba>
 8006652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006656:	429a      	cmp	r2, r3
 8006658:	db02      	blt.n	8006660 <_printf_float+0x220>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	07d8      	lsls	r0, r3, #31
 800665e:	d50f      	bpl.n	8006680 <_printf_float+0x240>
 8006660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af45 	beq.w	80064fa <_printf_float+0xba>
 8006670:	f04f 0800 	mov.w	r8, #0
 8006674:	f104 091a 	add.w	r9, r4, #26
 8006678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667a:	3b01      	subs	r3, #1
 800667c:	4543      	cmp	r3, r8
 800667e:	dc09      	bgt.n	8006694 <_printf_float+0x254>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	079b      	lsls	r3, r3, #30
 8006684:	f100 8103 	bmi.w	800688e <_printf_float+0x44e>
 8006688:	68e0      	ldr	r0, [r4, #12]
 800668a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668c:	4298      	cmp	r0, r3
 800668e:	bfb8      	it	lt
 8006690:	4618      	movlt	r0, r3
 8006692:	e734      	b.n	80064fe <_printf_float+0xbe>
 8006694:	2301      	movs	r3, #1
 8006696:	464a      	mov	r2, r9
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f af2b 	beq.w	80064fa <_printf_float+0xba>
 80066a4:	f108 0801 	add.w	r8, r8, #1
 80066a8:	e7e6      	b.n	8006678 <_printf_float+0x238>
 80066aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dc2b      	bgt.n	8006708 <_printf_float+0x2c8>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4a26      	ldr	r2, [pc, #152]	; (800674c <_printf_float+0x30c>)
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f af1d 	beq.w	80064fa <_printf_float+0xba>
 80066c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c2:	b923      	cbnz	r3, 80066ce <_printf_float+0x28e>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c6:	b913      	cbnz	r3, 80066ce <_printf_float+0x28e>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	07d9      	lsls	r1, r3, #31
 80066cc:	d5d8      	bpl.n	8006680 <_printf_float+0x240>
 80066ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f af0e 	beq.w	80064fa <_printf_float+0xba>
 80066de:	f04f 0900 	mov.w	r9, #0
 80066e2:	f104 0a1a 	add.w	sl, r4, #26
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	425b      	negs	r3, r3
 80066ea:	454b      	cmp	r3, r9
 80066ec:	dc01      	bgt.n	80066f2 <_printf_float+0x2b2>
 80066ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f0:	e794      	b.n	800661c <_printf_float+0x1dc>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f aefc 	beq.w	80064fa <_printf_float+0xba>
 8006702:	f109 0901 	add.w	r9, r9, #1
 8006706:	e7ee      	b.n	80066e6 <_printf_float+0x2a6>
 8006708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800670a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800670c:	429a      	cmp	r2, r3
 800670e:	bfa8      	it	ge
 8006710:	461a      	movge	r2, r3
 8006712:	2a00      	cmp	r2, #0
 8006714:	4691      	mov	r9, r2
 8006716:	dd07      	ble.n	8006728 <_printf_float+0x2e8>
 8006718:	4613      	mov	r3, r2
 800671a:	4631      	mov	r1, r6
 800671c:	4642      	mov	r2, r8
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f aee9 	beq.w	80064fa <_printf_float+0xba>
 8006728:	f104 031a 	add.w	r3, r4, #26
 800672c:	f04f 0b00 	mov.w	fp, #0
 8006730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006734:	9306      	str	r3, [sp, #24]
 8006736:	e015      	b.n	8006764 <_printf_float+0x324>
 8006738:	7fefffff 	.word	0x7fefffff
 800673c:	0800a758 	.word	0x0800a758
 8006740:	0800a754 	.word	0x0800a754
 8006744:	0800a760 	.word	0x0800a760
 8006748:	0800a75c 	.word	0x0800a75c
 800674c:	0800a764 	.word	0x0800a764
 8006750:	2301      	movs	r3, #1
 8006752:	9a06      	ldr	r2, [sp, #24]
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f aecd 	beq.w	80064fa <_printf_float+0xba>
 8006760:	f10b 0b01 	add.w	fp, fp, #1
 8006764:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006768:	ebaa 0309 	sub.w	r3, sl, r9
 800676c:	455b      	cmp	r3, fp
 800676e:	dcef      	bgt.n	8006750 <_printf_float+0x310>
 8006770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006774:	429a      	cmp	r2, r3
 8006776:	44d0      	add	r8, sl
 8006778:	db15      	blt.n	80067a6 <_printf_float+0x366>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	07da      	lsls	r2, r3, #31
 800677e:	d412      	bmi.n	80067a6 <_printf_float+0x366>
 8006780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006784:	eba3 020a 	sub.w	r2, r3, sl
 8006788:	eba3 0a01 	sub.w	sl, r3, r1
 800678c:	4592      	cmp	sl, r2
 800678e:	bfa8      	it	ge
 8006790:	4692      	movge	sl, r2
 8006792:	f1ba 0f00 	cmp.w	sl, #0
 8006796:	dc0e      	bgt.n	80067b6 <_printf_float+0x376>
 8006798:	f04f 0800 	mov.w	r8, #0
 800679c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067a0:	f104 091a 	add.w	r9, r4, #26
 80067a4:	e019      	b.n	80067da <_printf_float+0x39a>
 80067a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	d1e5      	bne.n	8006780 <_printf_float+0x340>
 80067b4:	e6a1      	b.n	80064fa <_printf_float+0xba>
 80067b6:	4653      	mov	r3, sl
 80067b8:	4642      	mov	r2, r8
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	d1e9      	bne.n	8006798 <_printf_float+0x358>
 80067c4:	e699      	b.n	80064fa <_printf_float+0xba>
 80067c6:	2301      	movs	r3, #1
 80067c8:	464a      	mov	r2, r9
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae92 	beq.w	80064fa <_printf_float+0xba>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	eba3 030a 	sub.w	r3, r3, sl
 80067e4:	4543      	cmp	r3, r8
 80067e6:	dcee      	bgt.n	80067c6 <_printf_float+0x386>
 80067e8:	e74a      	b.n	8006680 <_printf_float+0x240>
 80067ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ec:	2a01      	cmp	r2, #1
 80067ee:	dc01      	bgt.n	80067f4 <_printf_float+0x3b4>
 80067f0:	07db      	lsls	r3, r3, #31
 80067f2:	d53a      	bpl.n	800686a <_printf_float+0x42a>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4642      	mov	r2, r8
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f ae7b 	beq.w	80064fa <_printf_float+0xba>
 8006804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f108 0801 	add.w	r8, r8, #1
 8006814:	f43f ae71 	beq.w	80064fa <_printf_float+0xba>
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	2200      	movs	r2, #0
 800681c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006824:	2300      	movs	r3, #0
 8006826:	f7fa f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800682a:	b9c8      	cbnz	r0, 8006860 <_printf_float+0x420>
 800682c:	4653      	mov	r3, sl
 800682e:	4642      	mov	r2, r8
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	d10e      	bne.n	8006858 <_printf_float+0x418>
 800683a:	e65e      	b.n	80064fa <_printf_float+0xba>
 800683c:	2301      	movs	r3, #1
 800683e:	4652      	mov	r2, sl
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae57 	beq.w	80064fa <_printf_float+0xba>
 800684c:	f108 0801 	add.w	r8, r8, #1
 8006850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	4543      	cmp	r3, r8
 8006856:	dcf1      	bgt.n	800683c <_printf_float+0x3fc>
 8006858:	464b      	mov	r3, r9
 800685a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800685e:	e6de      	b.n	800661e <_printf_float+0x1de>
 8006860:	f04f 0800 	mov.w	r8, #0
 8006864:	f104 0a1a 	add.w	sl, r4, #26
 8006868:	e7f2      	b.n	8006850 <_printf_float+0x410>
 800686a:	2301      	movs	r3, #1
 800686c:	e7df      	b.n	800682e <_printf_float+0x3ee>
 800686e:	2301      	movs	r3, #1
 8006870:	464a      	mov	r2, r9
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae3e 	beq.w	80064fa <_printf_float+0xba>
 800687e:	f108 0801 	add.w	r8, r8, #1
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	4543      	cmp	r3, r8
 800688a:	dcf0      	bgt.n	800686e <_printf_float+0x42e>
 800688c:	e6fc      	b.n	8006688 <_printf_float+0x248>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	f104 0919 	add.w	r9, r4, #25
 8006896:	e7f4      	b.n	8006882 <_printf_float+0x442>
 8006898:	2900      	cmp	r1, #0
 800689a:	f43f ae8b 	beq.w	80065b4 <_printf_float+0x174>
 800689e:	2300      	movs	r3, #0
 80068a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80068a4:	ab09      	add	r3, sp, #36	; 0x24
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	ec49 8b10 	vmov	d0, r8, r9
 80068ac:	6022      	str	r2, [r4, #0]
 80068ae:	f8cd a004 	str.w	sl, [sp, #4]
 80068b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7ff fd2d 	bl	8006316 <__cvt>
 80068bc:	4680      	mov	r8, r0
 80068be:	e648      	b.n	8006552 <_printf_float+0x112>

080068c0 <_printf_common>:
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	4691      	mov	r9, r2
 80068c6:	461f      	mov	r7, r3
 80068c8:	688a      	ldr	r2, [r1, #8]
 80068ca:	690b      	ldr	r3, [r1, #16]
 80068cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bfb8      	it	lt
 80068d4:	4613      	movlt	r3, r2
 80068d6:	f8c9 3000 	str.w	r3, [r9]
 80068da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	b112      	cbz	r2, 80068ea <_printf_common+0x2a>
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c9 3000 	str.w	r3, [r9]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0699      	lsls	r1, r3, #26
 80068ee:	bf42      	ittt	mi
 80068f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068f4:	3302      	addmi	r3, #2
 80068f6:	f8c9 3000 	strmi.w	r3, [r9]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	f015 0506 	ands.w	r5, r5, #6
 8006900:	d107      	bne.n	8006912 <_printf_common+0x52>
 8006902:	f104 0a19 	add.w	sl, r4, #25
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	f8d9 2000 	ldr.w	r2, [r9]
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	42ab      	cmp	r3, r5
 8006910:	dc28      	bgt.n	8006964 <_printf_common+0xa4>
 8006912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	3300      	adds	r3, #0
 800691a:	bf18      	it	ne
 800691c:	2301      	movne	r3, #1
 800691e:	0692      	lsls	r2, r2, #26
 8006920:	d42d      	bmi.n	800697e <_printf_common+0xbe>
 8006922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006926:	4639      	mov	r1, r7
 8006928:	4630      	mov	r0, r6
 800692a:	47c0      	blx	r8
 800692c:	3001      	adds	r0, #1
 800692e:	d020      	beq.n	8006972 <_printf_common+0xb2>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	68e5      	ldr	r5, [r4, #12]
 8006934:	f8d9 2000 	ldr.w	r2, [r9]
 8006938:	f003 0306 	and.w	r3, r3, #6
 800693c:	2b04      	cmp	r3, #4
 800693e:	bf08      	it	eq
 8006940:	1aad      	subeq	r5, r5, r2
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	6922      	ldr	r2, [r4, #16]
 8006946:	bf0c      	ite	eq
 8006948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800694c:	2500      	movne	r5, #0
 800694e:	4293      	cmp	r3, r2
 8006950:	bfc4      	itt	gt
 8006952:	1a9b      	subgt	r3, r3, r2
 8006954:	18ed      	addgt	r5, r5, r3
 8006956:	f04f 0900 	mov.w	r9, #0
 800695a:	341a      	adds	r4, #26
 800695c:	454d      	cmp	r5, r9
 800695e:	d11a      	bne.n	8006996 <_printf_common+0xd6>
 8006960:	2000      	movs	r0, #0
 8006962:	e008      	b.n	8006976 <_printf_common+0xb6>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4639      	mov	r1, r7
 800696a:	4630      	mov	r0, r6
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d103      	bne.n	800697a <_printf_common+0xba>
 8006972:	f04f 30ff 	mov.w	r0, #4294967295
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	3501      	adds	r5, #1
 800697c:	e7c3      	b.n	8006906 <_printf_common+0x46>
 800697e:	18e1      	adds	r1, r4, r3
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	2030      	movs	r0, #48	; 0x30
 8006984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006988:	4422      	add	r2, r4
 800698a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800698e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006992:	3302      	adds	r3, #2
 8006994:	e7c5      	b.n	8006922 <_printf_common+0x62>
 8006996:	2301      	movs	r3, #1
 8006998:	4622      	mov	r2, r4
 800699a:	4639      	mov	r1, r7
 800699c:	4630      	mov	r0, r6
 800699e:	47c0      	blx	r8
 80069a0:	3001      	adds	r0, #1
 80069a2:	d0e6      	beq.n	8006972 <_printf_common+0xb2>
 80069a4:	f109 0901 	add.w	r9, r9, #1
 80069a8:	e7d8      	b.n	800695c <_printf_common+0x9c>
	...

080069ac <_printf_i>:
 80069ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80069b4:	460c      	mov	r4, r1
 80069b6:	7e09      	ldrb	r1, [r1, #24]
 80069b8:	b085      	sub	sp, #20
 80069ba:	296e      	cmp	r1, #110	; 0x6e
 80069bc:	4617      	mov	r7, r2
 80069be:	4606      	mov	r6, r0
 80069c0:	4698      	mov	r8, r3
 80069c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069c4:	f000 80b3 	beq.w	8006b2e <_printf_i+0x182>
 80069c8:	d822      	bhi.n	8006a10 <_printf_i+0x64>
 80069ca:	2963      	cmp	r1, #99	; 0x63
 80069cc:	d036      	beq.n	8006a3c <_printf_i+0x90>
 80069ce:	d80a      	bhi.n	80069e6 <_printf_i+0x3a>
 80069d0:	2900      	cmp	r1, #0
 80069d2:	f000 80b9 	beq.w	8006b48 <_printf_i+0x19c>
 80069d6:	2958      	cmp	r1, #88	; 0x58
 80069d8:	f000 8083 	beq.w	8006ae2 <_printf_i+0x136>
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80069e4:	e032      	b.n	8006a4c <_printf_i+0xa0>
 80069e6:	2964      	cmp	r1, #100	; 0x64
 80069e8:	d001      	beq.n	80069ee <_printf_i+0x42>
 80069ea:	2969      	cmp	r1, #105	; 0x69
 80069ec:	d1f6      	bne.n	80069dc <_printf_i+0x30>
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	6813      	ldr	r3, [r2, #0]
 80069f2:	0605      	lsls	r5, r0, #24
 80069f4:	f103 0104 	add.w	r1, r3, #4
 80069f8:	d52a      	bpl.n	8006a50 <_printf_i+0xa4>
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da03      	bge.n	8006a0a <_printf_i+0x5e>
 8006a02:	222d      	movs	r2, #45	; 0x2d
 8006a04:	425b      	negs	r3, r3
 8006a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a0a:	486f      	ldr	r0, [pc, #444]	; (8006bc8 <_printf_i+0x21c>)
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	e039      	b.n	8006a84 <_printf_i+0xd8>
 8006a10:	2973      	cmp	r1, #115	; 0x73
 8006a12:	f000 809d 	beq.w	8006b50 <_printf_i+0x1a4>
 8006a16:	d808      	bhi.n	8006a2a <_printf_i+0x7e>
 8006a18:	296f      	cmp	r1, #111	; 0x6f
 8006a1a:	d020      	beq.n	8006a5e <_printf_i+0xb2>
 8006a1c:	2970      	cmp	r1, #112	; 0x70
 8006a1e:	d1dd      	bne.n	80069dc <_printf_i+0x30>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e003      	b.n	8006a32 <_printf_i+0x86>
 8006a2a:	2975      	cmp	r1, #117	; 0x75
 8006a2c:	d017      	beq.n	8006a5e <_printf_i+0xb2>
 8006a2e:	2978      	cmp	r1, #120	; 0x78
 8006a30:	d1d4      	bne.n	80069dc <_printf_i+0x30>
 8006a32:	2378      	movs	r3, #120	; 0x78
 8006a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a38:	4864      	ldr	r0, [pc, #400]	; (8006bcc <_printf_i+0x220>)
 8006a3a:	e055      	b.n	8006ae8 <_printf_i+0x13c>
 8006a3c:	6813      	ldr	r3, [r2, #0]
 8006a3e:	1d19      	adds	r1, r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6011      	str	r1, [r2, #0]
 8006a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e08c      	b.n	8006b6a <_printf_i+0x1be>
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6011      	str	r1, [r2, #0]
 8006a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a58:	bf18      	it	ne
 8006a5a:	b21b      	sxthne	r3, r3
 8006a5c:	e7cf      	b.n	80069fe <_printf_i+0x52>
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	6825      	ldr	r5, [r4, #0]
 8006a62:	1d18      	adds	r0, r3, #4
 8006a64:	6010      	str	r0, [r2, #0]
 8006a66:	0628      	lsls	r0, r5, #24
 8006a68:	d501      	bpl.n	8006a6e <_printf_i+0xc2>
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	e002      	b.n	8006a74 <_printf_i+0xc8>
 8006a6e:	0668      	lsls	r0, r5, #25
 8006a70:	d5fb      	bpl.n	8006a6a <_printf_i+0xbe>
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	4854      	ldr	r0, [pc, #336]	; (8006bc8 <_printf_i+0x21c>)
 8006a76:	296f      	cmp	r1, #111	; 0x6f
 8006a78:	bf14      	ite	ne
 8006a7a:	220a      	movne	r2, #10
 8006a7c:	2208      	moveq	r2, #8
 8006a7e:	2100      	movs	r1, #0
 8006a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a84:	6865      	ldr	r5, [r4, #4]
 8006a86:	60a5      	str	r5, [r4, #8]
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	f2c0 8095 	blt.w	8006bb8 <_printf_i+0x20c>
 8006a8e:	6821      	ldr	r1, [r4, #0]
 8006a90:	f021 0104 	bic.w	r1, r1, #4
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d13d      	bne.n	8006b16 <_printf_i+0x16a>
 8006a9a:	2d00      	cmp	r5, #0
 8006a9c:	f040 808e 	bne.w	8006bbc <_printf_i+0x210>
 8006aa0:	4665      	mov	r5, ip
 8006aa2:	2a08      	cmp	r2, #8
 8006aa4:	d10b      	bne.n	8006abe <_printf_i+0x112>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d508      	bpl.n	8006abe <_printf_i+0x112>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	bfde      	ittt	le
 8006ab4:	2330      	movle	r3, #48	; 0x30
 8006ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006abe:	ebac 0305 	sub.w	r3, ip, r5
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	f8cd 8000 	str.w	r8, [sp]
 8006ac8:	463b      	mov	r3, r7
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7ff fef6 	bl	80068c0 <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14d      	bne.n	8006b74 <_printf_i+0x1c8>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	b005      	add	sp, #20
 8006ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	4839      	ldr	r0, [pc, #228]	; (8006bc8 <_printf_i+0x21c>)
 8006ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	6821      	ldr	r1, [r4, #0]
 8006aec:	1d1d      	adds	r5, r3, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6015      	str	r5, [r2, #0]
 8006af2:	060a      	lsls	r2, r1, #24
 8006af4:	d50b      	bpl.n	8006b0e <_printf_i+0x162>
 8006af6:	07ca      	lsls	r2, r1, #31
 8006af8:	bf44      	itt	mi
 8006afa:	f041 0120 	orrmi.w	r1, r1, #32
 8006afe:	6021      	strmi	r1, [r4, #0]
 8006b00:	b91b      	cbnz	r3, 8006b0a <_printf_i+0x15e>
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	f022 0220 	bic.w	r2, r2, #32
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	2210      	movs	r2, #16
 8006b0c:	e7b7      	b.n	8006a7e <_printf_i+0xd2>
 8006b0e:	064d      	lsls	r5, r1, #25
 8006b10:	bf48      	it	mi
 8006b12:	b29b      	uxthmi	r3, r3
 8006b14:	e7ef      	b.n	8006af6 <_printf_i+0x14a>
 8006b16:	4665      	mov	r5, ip
 8006b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8006b20:	5cc3      	ldrb	r3, [r0, r3]
 8006b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b26:	460b      	mov	r3, r1
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d1f5      	bne.n	8006b18 <_printf_i+0x16c>
 8006b2c:	e7b9      	b.n	8006aa2 <_printf_i+0xf6>
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	6961      	ldr	r1, [r4, #20]
 8006b34:	1d18      	adds	r0, r3, #4
 8006b36:	6010      	str	r0, [r2, #0]
 8006b38:	0628      	lsls	r0, r5, #24
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0x196>
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <_printf_i+0x19c>
 8006b42:	066a      	lsls	r2, r5, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0x192>
 8006b46:	8019      	strh	r1, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	4665      	mov	r5, ip
 8006b4e:	e7b9      	b.n	8006ac4 <_printf_i+0x118>
 8006b50:	6813      	ldr	r3, [r2, #0]
 8006b52:	1d19      	adds	r1, r3, #4
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	681d      	ldr	r5, [r3, #0]
 8006b58:	6862      	ldr	r2, [r4, #4]
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f7f9 fb47 	bl	80001f0 <memchr>
 8006b62:	b108      	cbz	r0, 8006b68 <_printf_i+0x1bc>
 8006b64:	1b40      	subs	r0, r0, r5
 8006b66:	6060      	str	r0, [r4, #4]
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b72:	e7a7      	b.n	8006ac4 <_printf_i+0x118>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	462a      	mov	r2, r5
 8006b78:	4639      	mov	r1, r7
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0aa      	beq.n	8006ad8 <_printf_i+0x12c>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	079b      	lsls	r3, r3, #30
 8006b86:	d413      	bmi.n	8006bb0 <_printf_i+0x204>
 8006b88:	68e0      	ldr	r0, [r4, #12]
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	bfb8      	it	lt
 8006b90:	4618      	movlt	r0, r3
 8006b92:	e7a3      	b.n	8006adc <_printf_i+0x130>
 8006b94:	2301      	movs	r3, #1
 8006b96:	464a      	mov	r2, r9
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d09a      	beq.n	8006ad8 <_printf_i+0x12c>
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	68e3      	ldr	r3, [r4, #12]
 8006ba6:	9a03      	ldr	r2, [sp, #12]
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	dcf2      	bgt.n	8006b94 <_printf_i+0x1e8>
 8006bae:	e7eb      	b.n	8006b88 <_printf_i+0x1dc>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	f104 0919 	add.w	r9, r4, #25
 8006bb6:	e7f5      	b.n	8006ba4 <_printf_i+0x1f8>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ac      	bne.n	8006b16 <_printf_i+0x16a>
 8006bbc:	7803      	ldrb	r3, [r0, #0]
 8006bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc6:	e76c      	b.n	8006aa2 <_printf_i+0xf6>
 8006bc8:	0800a766 	.word	0x0800a766
 8006bcc:	0800a777 	.word	0x0800a777

08006bd0 <_scanf_float>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	469a      	mov	sl, r3
 8006bd6:	688b      	ldr	r3, [r1, #8]
 8006bd8:	4616      	mov	r6, r2
 8006bda:	1e5a      	subs	r2, r3, #1
 8006bdc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006be0:	b087      	sub	sp, #28
 8006be2:	bf83      	ittte	hi
 8006be4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006be8:	189b      	addhi	r3, r3, r2
 8006bea:	9301      	strhi	r3, [sp, #4]
 8006bec:	2300      	movls	r3, #0
 8006bee:	bf86      	itte	hi
 8006bf0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006bf4:	608b      	strhi	r3, [r1, #8]
 8006bf6:	9301      	strls	r3, [sp, #4]
 8006bf8:	680b      	ldr	r3, [r1, #0]
 8006bfa:	4688      	mov	r8, r1
 8006bfc:	f04f 0b00 	mov.w	fp, #0
 8006c00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c04:	f848 3b1c 	str.w	r3, [r8], #28
 8006c08:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	4645      	mov	r5, r8
 8006c12:	465a      	mov	r2, fp
 8006c14:	46d9      	mov	r9, fp
 8006c16:	f8cd b008 	str.w	fp, [sp, #8]
 8006c1a:	68a1      	ldr	r1, [r4, #8]
 8006c1c:	b181      	cbz	r1, 8006c40 <_scanf_float+0x70>
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b49      	cmp	r3, #73	; 0x49
 8006c24:	d071      	beq.n	8006d0a <_scanf_float+0x13a>
 8006c26:	d84d      	bhi.n	8006cc4 <_scanf_float+0xf4>
 8006c28:	2b39      	cmp	r3, #57	; 0x39
 8006c2a:	d840      	bhi.n	8006cae <_scanf_float+0xde>
 8006c2c:	2b31      	cmp	r3, #49	; 0x31
 8006c2e:	f080 8088 	bcs.w	8006d42 <_scanf_float+0x172>
 8006c32:	2b2d      	cmp	r3, #45	; 0x2d
 8006c34:	f000 8090 	beq.w	8006d58 <_scanf_float+0x188>
 8006c38:	d815      	bhi.n	8006c66 <_scanf_float+0x96>
 8006c3a:	2b2b      	cmp	r3, #43	; 0x2b
 8006c3c:	f000 808c 	beq.w	8006d58 <_scanf_float+0x188>
 8006c40:	f1b9 0f00 	cmp.w	r9, #0
 8006c44:	d003      	beq.n	8006c4e <_scanf_float+0x7e>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	f200 80ea 	bhi.w	8006e2a <_scanf_float+0x25a>
 8006c56:	4545      	cmp	r5, r8
 8006c58:	f200 80dc 	bhi.w	8006e14 <_scanf_float+0x244>
 8006c5c:	2601      	movs	r6, #1
 8006c5e:	4630      	mov	r0, r6
 8006c60:	b007      	add	sp, #28
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	2b2e      	cmp	r3, #46	; 0x2e
 8006c68:	f000 809f 	beq.w	8006daa <_scanf_float+0x1da>
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d1e7      	bne.n	8006c40 <_scanf_float+0x70>
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006c76:	d064      	beq.n	8006d42 <_scanf_float+0x172>
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	f109 0901 	add.w	r9, r9, #1
 8006c84:	b11b      	cbz	r3, 8006c8e <_scanf_float+0xbe>
 8006c86:	3b01      	subs	r3, #1
 8006c88:	3101      	adds	r1, #1
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	60a1      	str	r1, [r4, #8]
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	3301      	adds	r3, #1
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	6873      	ldr	r3, [r6, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	6073      	str	r3, [r6, #4]
 8006ca2:	f340 80ac 	ble.w	8006dfe <_scanf_float+0x22e>
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	e7b5      	b.n	8006c1a <_scanf_float+0x4a>
 8006cae:	2b45      	cmp	r3, #69	; 0x45
 8006cb0:	f000 8085 	beq.w	8006dbe <_scanf_float+0x1ee>
 8006cb4:	2b46      	cmp	r3, #70	; 0x46
 8006cb6:	d06a      	beq.n	8006d8e <_scanf_float+0x1be>
 8006cb8:	2b41      	cmp	r3, #65	; 0x41
 8006cba:	d1c1      	bne.n	8006c40 <_scanf_float+0x70>
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	d1bf      	bne.n	8006c40 <_scanf_float+0x70>
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	e046      	b.n	8006d52 <_scanf_float+0x182>
 8006cc4:	2b65      	cmp	r3, #101	; 0x65
 8006cc6:	d07a      	beq.n	8006dbe <_scanf_float+0x1ee>
 8006cc8:	d818      	bhi.n	8006cfc <_scanf_float+0x12c>
 8006cca:	2b54      	cmp	r3, #84	; 0x54
 8006ccc:	d066      	beq.n	8006d9c <_scanf_float+0x1cc>
 8006cce:	d811      	bhi.n	8006cf4 <_scanf_float+0x124>
 8006cd0:	2b4e      	cmp	r3, #78	; 0x4e
 8006cd2:	d1b5      	bne.n	8006c40 <_scanf_float+0x70>
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d146      	bne.n	8006d66 <_scanf_float+0x196>
 8006cd8:	f1b9 0f00 	cmp.w	r9, #0
 8006cdc:	d145      	bne.n	8006d6a <_scanf_float+0x19a>
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006ce4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ce8:	d13f      	bne.n	8006d6a <_scanf_float+0x19a>
 8006cea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006cee:	6021      	str	r1, [r4, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	e02e      	b.n	8006d52 <_scanf_float+0x182>
 8006cf4:	2b59      	cmp	r3, #89	; 0x59
 8006cf6:	d01e      	beq.n	8006d36 <_scanf_float+0x166>
 8006cf8:	2b61      	cmp	r3, #97	; 0x61
 8006cfa:	e7de      	b.n	8006cba <_scanf_float+0xea>
 8006cfc:	2b6e      	cmp	r3, #110	; 0x6e
 8006cfe:	d0e9      	beq.n	8006cd4 <_scanf_float+0x104>
 8006d00:	d815      	bhi.n	8006d2e <_scanf_float+0x15e>
 8006d02:	2b66      	cmp	r3, #102	; 0x66
 8006d04:	d043      	beq.n	8006d8e <_scanf_float+0x1be>
 8006d06:	2b69      	cmp	r3, #105	; 0x69
 8006d08:	d19a      	bne.n	8006c40 <_scanf_float+0x70>
 8006d0a:	f1bb 0f00 	cmp.w	fp, #0
 8006d0e:	d138      	bne.n	8006d82 <_scanf_float+0x1b2>
 8006d10:	f1b9 0f00 	cmp.w	r9, #0
 8006d14:	d197      	bne.n	8006c46 <_scanf_float+0x76>
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d1c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d20:	d195      	bne.n	8006c4e <_scanf_float+0x7e>
 8006d22:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d26:	6021      	str	r1, [r4, #0]
 8006d28:	f04f 0b01 	mov.w	fp, #1
 8006d2c:	e011      	b.n	8006d52 <_scanf_float+0x182>
 8006d2e:	2b74      	cmp	r3, #116	; 0x74
 8006d30:	d034      	beq.n	8006d9c <_scanf_float+0x1cc>
 8006d32:	2b79      	cmp	r3, #121	; 0x79
 8006d34:	d184      	bne.n	8006c40 <_scanf_float+0x70>
 8006d36:	f1bb 0f07 	cmp.w	fp, #7
 8006d3a:	d181      	bne.n	8006c40 <_scanf_float+0x70>
 8006d3c:	f04f 0b08 	mov.w	fp, #8
 8006d40:	e007      	b.n	8006d52 <_scanf_float+0x182>
 8006d42:	eb12 0f0b 	cmn.w	r2, fp
 8006d46:	f47f af7b 	bne.w	8006c40 <_scanf_float+0x70>
 8006d4a:	6821      	ldr	r1, [r4, #0]
 8006d4c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006d50:	6021      	str	r1, [r4, #0]
 8006d52:	702b      	strb	r3, [r5, #0]
 8006d54:	3501      	adds	r5, #1
 8006d56:	e79a      	b.n	8006c8e <_scanf_float+0xbe>
 8006d58:	6821      	ldr	r1, [r4, #0]
 8006d5a:	0608      	lsls	r0, r1, #24
 8006d5c:	f57f af70 	bpl.w	8006c40 <_scanf_float+0x70>
 8006d60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d64:	e7f4      	b.n	8006d50 <_scanf_float+0x180>
 8006d66:	2a02      	cmp	r2, #2
 8006d68:	d047      	beq.n	8006dfa <_scanf_float+0x22a>
 8006d6a:	f1bb 0f01 	cmp.w	fp, #1
 8006d6e:	d003      	beq.n	8006d78 <_scanf_float+0x1a8>
 8006d70:	f1bb 0f04 	cmp.w	fp, #4
 8006d74:	f47f af64 	bne.w	8006c40 <_scanf_float+0x70>
 8006d78:	f10b 0b01 	add.w	fp, fp, #1
 8006d7c:	fa5f fb8b 	uxtb.w	fp, fp
 8006d80:	e7e7      	b.n	8006d52 <_scanf_float+0x182>
 8006d82:	f1bb 0f03 	cmp.w	fp, #3
 8006d86:	d0f7      	beq.n	8006d78 <_scanf_float+0x1a8>
 8006d88:	f1bb 0f05 	cmp.w	fp, #5
 8006d8c:	e7f2      	b.n	8006d74 <_scanf_float+0x1a4>
 8006d8e:	f1bb 0f02 	cmp.w	fp, #2
 8006d92:	f47f af55 	bne.w	8006c40 <_scanf_float+0x70>
 8006d96:	f04f 0b03 	mov.w	fp, #3
 8006d9a:	e7da      	b.n	8006d52 <_scanf_float+0x182>
 8006d9c:	f1bb 0f06 	cmp.w	fp, #6
 8006da0:	f47f af4e 	bne.w	8006c40 <_scanf_float+0x70>
 8006da4:	f04f 0b07 	mov.w	fp, #7
 8006da8:	e7d3      	b.n	8006d52 <_scanf_float+0x182>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	0588      	lsls	r0, r1, #22
 8006dae:	f57f af47 	bpl.w	8006c40 <_scanf_float+0x70>
 8006db2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006db6:	6021      	str	r1, [r4, #0]
 8006db8:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dbc:	e7c9      	b.n	8006d52 <_scanf_float+0x182>
 8006dbe:	6821      	ldr	r1, [r4, #0]
 8006dc0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006dc4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006dc8:	d006      	beq.n	8006dd8 <_scanf_float+0x208>
 8006dca:	0548      	lsls	r0, r1, #21
 8006dcc:	f57f af38 	bpl.w	8006c40 <_scanf_float+0x70>
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	f43f af3b 	beq.w	8006c4e <_scanf_float+0x7e>
 8006dd8:	0588      	lsls	r0, r1, #22
 8006dda:	bf58      	it	pl
 8006ddc:	9802      	ldrpl	r0, [sp, #8]
 8006dde:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006de2:	bf58      	it	pl
 8006de4:	eba9 0000 	subpl.w	r0, r9, r0
 8006de8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006dec:	bf58      	it	pl
 8006dee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006df2:	6021      	str	r1, [r4, #0]
 8006df4:	f04f 0900 	mov.w	r9, #0
 8006df8:	e7ab      	b.n	8006d52 <_scanf_float+0x182>
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	e7a9      	b.n	8006d52 <_scanf_float+0x182>
 8006dfe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e02:	9205      	str	r2, [sp, #20]
 8006e04:	4631      	mov	r1, r6
 8006e06:	4638      	mov	r0, r7
 8006e08:	4798      	blx	r3
 8006e0a:	9a05      	ldr	r2, [sp, #20]
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f43f af04 	beq.w	8006c1a <_scanf_float+0x4a>
 8006e12:	e715      	b.n	8006c40 <_scanf_float+0x70>
 8006e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	4638      	mov	r0, r7
 8006e20:	4798      	blx	r3
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	6123      	str	r3, [r4, #16]
 8006e28:	e715      	b.n	8006c56 <_scanf_float+0x86>
 8006e2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d80a      	bhi.n	8006e48 <_scanf_float+0x278>
 8006e32:	f1bb 0f02 	cmp.w	fp, #2
 8006e36:	d968      	bls.n	8006f0a <_scanf_float+0x33a>
 8006e38:	f1ab 0b03 	sub.w	fp, fp, #3
 8006e3c:	fa5f fb8b 	uxtb.w	fp, fp
 8006e40:	eba5 0b0b 	sub.w	fp, r5, fp
 8006e44:	455d      	cmp	r5, fp
 8006e46:	d14b      	bne.n	8006ee0 <_scanf_float+0x310>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	05da      	lsls	r2, r3, #23
 8006e4c:	d51f      	bpl.n	8006e8e <_scanf_float+0x2be>
 8006e4e:	055b      	lsls	r3, r3, #21
 8006e50:	d468      	bmi.n	8006f24 <_scanf_float+0x354>
 8006e52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	2965      	cmp	r1, #101	; 0x65
 8006e5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e5e:	f105 3bff 	add.w	fp, r5, #4294967295
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	d00d      	beq.n	8006e82 <_scanf_float+0x2b2>
 8006e66:	2945      	cmp	r1, #69	; 0x45
 8006e68:	d00b      	beq.n	8006e82 <_scanf_float+0x2b2>
 8006e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e6e:	4632      	mov	r2, r6
 8006e70:	4638      	mov	r0, r7
 8006e72:	4798      	blx	r3
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e86:	4632      	mov	r2, r6
 8006e88:	4638      	mov	r0, r7
 8006e8a:	4798      	blx	r3
 8006e8c:	465d      	mov	r5, fp
 8006e8e:	6826      	ldr	r6, [r4, #0]
 8006e90:	f016 0610 	ands.w	r6, r6, #16
 8006e94:	d17a      	bne.n	8006f8c <_scanf_float+0x3bc>
 8006e96:	702e      	strb	r6, [r5, #0]
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d142      	bne.n	8006f2a <_scanf_float+0x35a>
 8006ea4:	9b02      	ldr	r3, [sp, #8]
 8006ea6:	eba9 0303 	sub.w	r3, r9, r3
 8006eaa:	425a      	negs	r2, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d149      	bne.n	8006f44 <_scanf_float+0x374>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f000 febb 	bl	8007c30 <_strtod_r>
 8006eba:	6825      	ldr	r5, [r4, #0]
 8006ebc:	f8da 3000 	ldr.w	r3, [sl]
 8006ec0:	f015 0f02 	tst.w	r5, #2
 8006ec4:	f103 0204 	add.w	r2, r3, #4
 8006ec8:	ec59 8b10 	vmov	r8, r9, d0
 8006ecc:	f8ca 2000 	str.w	r2, [sl]
 8006ed0:	d043      	beq.n	8006f5a <_scanf_float+0x38a>
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	e9c3 8900 	strd	r8, r9, [r3]
 8006ed8:	68e3      	ldr	r3, [r4, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60e3      	str	r3, [r4, #12]
 8006ede:	e6be      	b.n	8006c5e <_scanf_float+0x8e>
 8006ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4638      	mov	r0, r7
 8006eec:	4798      	blx	r3
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	e7a6      	b.n	8006e44 <_scanf_float+0x274>
 8006ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006efa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006efe:	4632      	mov	r2, r6
 8006f00:	4638      	mov	r0, r7
 8006f02:	4798      	blx	r3
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	4545      	cmp	r5, r8
 8006f0c:	d8f3      	bhi.n	8006ef6 <_scanf_float+0x326>
 8006f0e:	e6a5      	b.n	8006c5c <_scanf_float+0x8c>
 8006f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	4798      	blx	r3
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	4545      	cmp	r5, r8
 8006f26:	d8f3      	bhi.n	8006f10 <_scanf_float+0x340>
 8006f28:	e698      	b.n	8006c5c <_scanf_float+0x8c>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0bf      	beq.n	8006eb0 <_scanf_float+0x2e0>
 8006f30:	9904      	ldr	r1, [sp, #16]
 8006f32:	230a      	movs	r3, #10
 8006f34:	4632      	mov	r2, r6
 8006f36:	3101      	adds	r1, #1
 8006f38:	4638      	mov	r0, r7
 8006f3a:	f000 ff05 	bl	8007d48 <_strtol_r>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	9d04      	ldr	r5, [sp, #16]
 8006f42:	1ac2      	subs	r2, r0, r3
 8006f44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f48:	429d      	cmp	r5, r3
 8006f4a:	bf28      	it	cs
 8006f4c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006f50:	490f      	ldr	r1, [pc, #60]	; (8006f90 <_scanf_float+0x3c0>)
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f83c 	bl	8006fd0 <siprintf>
 8006f58:	e7aa      	b.n	8006eb0 <_scanf_float+0x2e0>
 8006f5a:	f015 0504 	ands.w	r5, r5, #4
 8006f5e:	d1b8      	bne.n	8006ed2 <_scanf_float+0x302>
 8006f60:	681f      	ldr	r7, [r3, #0]
 8006f62:	ee10 2a10 	vmov	r2, s0
 8006f66:	464b      	mov	r3, r9
 8006f68:	ee10 0a10 	vmov	r0, s0
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 fde5 	bl	8000b3c <__aeabi_dcmpun>
 8006f72:	b128      	cbz	r0, 8006f80 <_scanf_float+0x3b0>
 8006f74:	4628      	mov	r0, r5
 8006f76:	f000 f825 	bl	8006fc4 <nanf>
 8006f7a:	ed87 0a00 	vstr	s0, [r7]
 8006f7e:	e7ab      	b.n	8006ed8 <_scanf_float+0x308>
 8006f80:	4640      	mov	r0, r8
 8006f82:	4649      	mov	r1, r9
 8006f84:	f7f9 fe38 	bl	8000bf8 <__aeabi_d2f>
 8006f88:	6038      	str	r0, [r7, #0]
 8006f8a:	e7a5      	b.n	8006ed8 <_scanf_float+0x308>
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	e666      	b.n	8006c5e <_scanf_float+0x8e>
 8006f90:	0800a788 	.word	0x0800a788

08006f94 <iprintf>:
 8006f94:	b40f      	push	{r0, r1, r2, r3}
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <iprintf+0x2c>)
 8006f98:	b513      	push	{r0, r1, r4, lr}
 8006f9a:	681c      	ldr	r4, [r3, #0]
 8006f9c:	b124      	cbz	r4, 8006fa8 <iprintf+0x14>
 8006f9e:	69a3      	ldr	r3, [r4, #24]
 8006fa0:	b913      	cbnz	r3, 8006fa8 <iprintf+0x14>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f001 fd68 	bl	8008a78 <__sinit>
 8006fa8:	ab05      	add	r3, sp, #20
 8006faa:	9a04      	ldr	r2, [sp, #16]
 8006fac:	68a1      	ldr	r1, [r4, #8]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f002 ff71 	bl	8009e98 <_vfiprintf_r>
 8006fb6:	b002      	add	sp, #8
 8006fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbc:	b004      	add	sp, #16
 8006fbe:	4770      	bx	lr
 8006fc0:	2000000c 	.word	0x2000000c

08006fc4 <nanf>:
 8006fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fcc <nanf+0x8>
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	7fc00000 	.word	0x7fc00000

08006fd0 <siprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b500      	push	{lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fe0:	4809      	ldr	r0, [pc, #36]	; (8007008 <siprintf+0x38>)
 8006fe2:	9107      	str	r1, [sp, #28]
 8006fe4:	9104      	str	r1, [sp, #16]
 8006fe6:	4909      	ldr	r1, [pc, #36]	; (800700c <siprintf+0x3c>)
 8006fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	a902      	add	r1, sp, #8
 8006ff4:	f002 fe2e 	bl	8009c54 <_svfiprintf_r>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	b01c      	add	sp, #112	; 0x70
 8007000:	f85d eb04 	ldr.w	lr, [sp], #4
 8007004:	b003      	add	sp, #12
 8007006:	4770      	bx	lr
 8007008:	2000000c 	.word	0x2000000c
 800700c:	ffff0208 	.word	0xffff0208

08007010 <sulp>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	ec45 4b10 	vmov	d0, r4, r5
 800701a:	4616      	mov	r6, r2
 800701c:	f002 fbd6 	bl	80097cc <__ulp>
 8007020:	ec51 0b10 	vmov	r0, r1, d0
 8007024:	b17e      	cbz	r6, 8007046 <sulp+0x36>
 8007026:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800702a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800702e:	2b00      	cmp	r3, #0
 8007030:	dd09      	ble.n	8007046 <sulp+0x36>
 8007032:	051b      	lsls	r3, r3, #20
 8007034:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007038:	2400      	movs	r4, #0
 800703a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800703e:	4622      	mov	r2, r4
 8007040:	462b      	mov	r3, r5
 8007042:	f7f9 fae1 	bl	8000608 <__aeabi_dmul>
 8007046:	bd70      	pop	{r4, r5, r6, pc}

08007048 <_strtod_l>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	461f      	mov	r7, r3
 800704e:	b0a1      	sub	sp, #132	; 0x84
 8007050:	2300      	movs	r3, #0
 8007052:	4681      	mov	r9, r0
 8007054:	4638      	mov	r0, r7
 8007056:	460e      	mov	r6, r1
 8007058:	9217      	str	r2, [sp, #92]	; 0x5c
 800705a:	931c      	str	r3, [sp, #112]	; 0x70
 800705c:	f002 f8bf 	bl	80091de <__localeconv_l>
 8007060:	4680      	mov	r8, r0
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	f7f9 f8bc 	bl	80001e0 <strlen>
 8007068:	f04f 0a00 	mov.w	sl, #0
 800706c:	4604      	mov	r4, r0
 800706e:	f04f 0b00 	mov.w	fp, #0
 8007072:	961b      	str	r6, [sp, #108]	; 0x6c
 8007074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	2a0d      	cmp	r2, #13
 800707a:	d832      	bhi.n	80070e2 <_strtod_l+0x9a>
 800707c:	2a09      	cmp	r2, #9
 800707e:	d236      	bcs.n	80070ee <_strtod_l+0xa6>
 8007080:	2a00      	cmp	r2, #0
 8007082:	d03e      	beq.n	8007102 <_strtod_l+0xba>
 8007084:	2300      	movs	r3, #0
 8007086:	930d      	str	r3, [sp, #52]	; 0x34
 8007088:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800708a:	782b      	ldrb	r3, [r5, #0]
 800708c:	2b30      	cmp	r3, #48	; 0x30
 800708e:	f040 80ac 	bne.w	80071ea <_strtod_l+0x1a2>
 8007092:	786b      	ldrb	r3, [r5, #1]
 8007094:	2b58      	cmp	r3, #88	; 0x58
 8007096:	d001      	beq.n	800709c <_strtod_l+0x54>
 8007098:	2b78      	cmp	r3, #120	; 0x78
 800709a:	d167      	bne.n	800716c <_strtod_l+0x124>
 800709c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	ab1c      	add	r3, sp, #112	; 0x70
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	9702      	str	r7, [sp, #8]
 80070a6:	ab1d      	add	r3, sp, #116	; 0x74
 80070a8:	4a88      	ldr	r2, [pc, #544]	; (80072cc <_strtod_l+0x284>)
 80070aa:	a91b      	add	r1, sp, #108	; 0x6c
 80070ac:	4648      	mov	r0, r9
 80070ae:	f001 fdbc 	bl	8008c2a <__gethex>
 80070b2:	f010 0407 	ands.w	r4, r0, #7
 80070b6:	4606      	mov	r6, r0
 80070b8:	d005      	beq.n	80070c6 <_strtod_l+0x7e>
 80070ba:	2c06      	cmp	r4, #6
 80070bc:	d12b      	bne.n	8007116 <_strtod_l+0xce>
 80070be:	3501      	adds	r5, #1
 80070c0:	2300      	movs	r3, #0
 80070c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80070c4:	930d      	str	r3, [sp, #52]	; 0x34
 80070c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 859a 	bne.w	8007c02 <_strtod_l+0xbba>
 80070ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d0:	b1e3      	cbz	r3, 800710c <_strtod_l+0xc4>
 80070d2:	4652      	mov	r2, sl
 80070d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80070d8:	ec43 2b10 	vmov	d0, r2, r3
 80070dc:	b021      	add	sp, #132	; 0x84
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	2a2b      	cmp	r2, #43	; 0x2b
 80070e4:	d015      	beq.n	8007112 <_strtod_l+0xca>
 80070e6:	2a2d      	cmp	r2, #45	; 0x2d
 80070e8:	d004      	beq.n	80070f4 <_strtod_l+0xac>
 80070ea:	2a20      	cmp	r2, #32
 80070ec:	d1ca      	bne.n	8007084 <_strtod_l+0x3c>
 80070ee:	3301      	adds	r3, #1
 80070f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80070f2:	e7bf      	b.n	8007074 <_strtod_l+0x2c>
 80070f4:	2201      	movs	r2, #1
 80070f6:	920d      	str	r2, [sp, #52]	; 0x34
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1c2      	bne.n	8007088 <_strtod_l+0x40>
 8007102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007104:	961b      	str	r6, [sp, #108]	; 0x6c
 8007106:	2b00      	cmp	r3, #0
 8007108:	f040 8579 	bne.w	8007bfe <_strtod_l+0xbb6>
 800710c:	4652      	mov	r2, sl
 800710e:	465b      	mov	r3, fp
 8007110:	e7e2      	b.n	80070d8 <_strtod_l+0x90>
 8007112:	2200      	movs	r2, #0
 8007114:	e7ef      	b.n	80070f6 <_strtod_l+0xae>
 8007116:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007118:	b13a      	cbz	r2, 800712a <_strtod_l+0xe2>
 800711a:	2135      	movs	r1, #53	; 0x35
 800711c:	a81e      	add	r0, sp, #120	; 0x78
 800711e:	f002 fc4d 	bl	80099bc <__copybits>
 8007122:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007124:	4648      	mov	r0, r9
 8007126:	f002 f8b9 	bl	800929c <_Bfree>
 800712a:	3c01      	subs	r4, #1
 800712c:	2c04      	cmp	r4, #4
 800712e:	d806      	bhi.n	800713e <_strtod_l+0xf6>
 8007130:	e8df f004 	tbb	[pc, r4]
 8007134:	1714030a 	.word	0x1714030a
 8007138:	0a          	.byte	0x0a
 8007139:	00          	.byte	0x00
 800713a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800713e:	0730      	lsls	r0, r6, #28
 8007140:	d5c1      	bpl.n	80070c6 <_strtod_l+0x7e>
 8007142:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007146:	e7be      	b.n	80070c6 <_strtod_l+0x7e>
 8007148:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800714c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800714e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007152:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007156:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800715a:	e7f0      	b.n	800713e <_strtod_l+0xf6>
 800715c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80072d0 <_strtod_l+0x288>
 8007160:	e7ed      	b.n	800713e <_strtod_l+0xf6>
 8007162:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007166:	f04f 3aff 	mov.w	sl, #4294967295
 800716a:	e7e8      	b.n	800713e <_strtod_l+0xf6>
 800716c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	921b      	str	r2, [sp, #108]	; 0x6c
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b30      	cmp	r3, #48	; 0x30
 8007176:	d0f9      	beq.n	800716c <_strtod_l+0x124>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0a4      	beq.n	80070c6 <_strtod_l+0x7e>
 800717c:	2301      	movs	r3, #1
 800717e:	2500      	movs	r5, #0
 8007180:	9306      	str	r3, [sp, #24]
 8007182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007184:	9308      	str	r3, [sp, #32]
 8007186:	9507      	str	r5, [sp, #28]
 8007188:	9505      	str	r5, [sp, #20]
 800718a:	220a      	movs	r2, #10
 800718c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800718e:	7807      	ldrb	r7, [r0, #0]
 8007190:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007194:	b2d9      	uxtb	r1, r3
 8007196:	2909      	cmp	r1, #9
 8007198:	d929      	bls.n	80071ee <_strtod_l+0x1a6>
 800719a:	4622      	mov	r2, r4
 800719c:	f8d8 1000 	ldr.w	r1, [r8]
 80071a0:	f002 ffe3 	bl	800a16a <strncmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d031      	beq.n	800720c <_strtod_l+0x1c4>
 80071a8:	2000      	movs	r0, #0
 80071aa:	9c05      	ldr	r4, [sp, #20]
 80071ac:	9004      	str	r0, [sp, #16]
 80071ae:	463b      	mov	r3, r7
 80071b0:	4602      	mov	r2, r0
 80071b2:	2b65      	cmp	r3, #101	; 0x65
 80071b4:	d001      	beq.n	80071ba <_strtod_l+0x172>
 80071b6:	2b45      	cmp	r3, #69	; 0x45
 80071b8:	d114      	bne.n	80071e4 <_strtod_l+0x19c>
 80071ba:	b924      	cbnz	r4, 80071c6 <_strtod_l+0x17e>
 80071bc:	b910      	cbnz	r0, 80071c4 <_strtod_l+0x17c>
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d09e      	beq.n	8007102 <_strtod_l+0xba>
 80071c4:	2400      	movs	r4, #0
 80071c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80071c8:	1c73      	adds	r3, r6, #1
 80071ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80071cc:	7873      	ldrb	r3, [r6, #1]
 80071ce:	2b2b      	cmp	r3, #43	; 0x2b
 80071d0:	d078      	beq.n	80072c4 <_strtod_l+0x27c>
 80071d2:	2b2d      	cmp	r3, #45	; 0x2d
 80071d4:	d070      	beq.n	80072b8 <_strtod_l+0x270>
 80071d6:	f04f 0c00 	mov.w	ip, #0
 80071da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80071de:	2f09      	cmp	r7, #9
 80071e0:	d97c      	bls.n	80072dc <_strtod_l+0x294>
 80071e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80071e4:	f04f 0e00 	mov.w	lr, #0
 80071e8:	e09a      	b.n	8007320 <_strtod_l+0x2d8>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e7c7      	b.n	800717e <_strtod_l+0x136>
 80071ee:	9905      	ldr	r1, [sp, #20]
 80071f0:	2908      	cmp	r1, #8
 80071f2:	bfdd      	ittte	le
 80071f4:	9907      	ldrle	r1, [sp, #28]
 80071f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80071fa:	9307      	strle	r3, [sp, #28]
 80071fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007200:	9b05      	ldr	r3, [sp, #20]
 8007202:	3001      	adds	r0, #1
 8007204:	3301      	adds	r3, #1
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	901b      	str	r0, [sp, #108]	; 0x6c
 800720a:	e7bf      	b.n	800718c <_strtod_l+0x144>
 800720c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800720e:	191a      	adds	r2, r3, r4
 8007210:	921b      	str	r2, [sp, #108]	; 0x6c
 8007212:	9a05      	ldr	r2, [sp, #20]
 8007214:	5d1b      	ldrb	r3, [r3, r4]
 8007216:	2a00      	cmp	r2, #0
 8007218:	d037      	beq.n	800728a <_strtod_l+0x242>
 800721a:	9c05      	ldr	r4, [sp, #20]
 800721c:	4602      	mov	r2, r0
 800721e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007222:	2909      	cmp	r1, #9
 8007224:	d913      	bls.n	800724e <_strtod_l+0x206>
 8007226:	2101      	movs	r1, #1
 8007228:	9104      	str	r1, [sp, #16]
 800722a:	e7c2      	b.n	80071b2 <_strtod_l+0x16a>
 800722c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	921b      	str	r2, [sp, #108]	; 0x6c
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	3001      	adds	r0, #1
 8007236:	2b30      	cmp	r3, #48	; 0x30
 8007238:	d0f8      	beq.n	800722c <_strtod_l+0x1e4>
 800723a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800723e:	2a08      	cmp	r2, #8
 8007240:	f200 84e4 	bhi.w	8007c0c <_strtod_l+0xbc4>
 8007244:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007246:	9208      	str	r2, [sp, #32]
 8007248:	4602      	mov	r2, r0
 800724a:	2000      	movs	r0, #0
 800724c:	4604      	mov	r4, r0
 800724e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007252:	f100 0101 	add.w	r1, r0, #1
 8007256:	d012      	beq.n	800727e <_strtod_l+0x236>
 8007258:	440a      	add	r2, r1
 800725a:	eb00 0c04 	add.w	ip, r0, r4
 800725e:	4621      	mov	r1, r4
 8007260:	270a      	movs	r7, #10
 8007262:	458c      	cmp	ip, r1
 8007264:	d113      	bne.n	800728e <_strtod_l+0x246>
 8007266:	1821      	adds	r1, r4, r0
 8007268:	2908      	cmp	r1, #8
 800726a:	f104 0401 	add.w	r4, r4, #1
 800726e:	4404      	add	r4, r0
 8007270:	dc19      	bgt.n	80072a6 <_strtod_l+0x25e>
 8007272:	9b07      	ldr	r3, [sp, #28]
 8007274:	210a      	movs	r1, #10
 8007276:	fb01 e303 	mla	r3, r1, r3, lr
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	2100      	movs	r1, #0
 800727e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007280:	1c58      	adds	r0, r3, #1
 8007282:	901b      	str	r0, [sp, #108]	; 0x6c
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	4608      	mov	r0, r1
 8007288:	e7c9      	b.n	800721e <_strtod_l+0x1d6>
 800728a:	9805      	ldr	r0, [sp, #20]
 800728c:	e7d3      	b.n	8007236 <_strtod_l+0x1ee>
 800728e:	2908      	cmp	r1, #8
 8007290:	f101 0101 	add.w	r1, r1, #1
 8007294:	dc03      	bgt.n	800729e <_strtod_l+0x256>
 8007296:	9b07      	ldr	r3, [sp, #28]
 8007298:	437b      	muls	r3, r7
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	e7e1      	b.n	8007262 <_strtod_l+0x21a>
 800729e:	2910      	cmp	r1, #16
 80072a0:	bfd8      	it	le
 80072a2:	437d      	mulle	r5, r7
 80072a4:	e7dd      	b.n	8007262 <_strtod_l+0x21a>
 80072a6:	2c10      	cmp	r4, #16
 80072a8:	bfdc      	itt	le
 80072aa:	210a      	movle	r1, #10
 80072ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80072b0:	e7e4      	b.n	800727c <_strtod_l+0x234>
 80072b2:	2301      	movs	r3, #1
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	e781      	b.n	80071bc <_strtod_l+0x174>
 80072b8:	f04f 0c01 	mov.w	ip, #1
 80072bc:	1cb3      	adds	r3, r6, #2
 80072be:	931b      	str	r3, [sp, #108]	; 0x6c
 80072c0:	78b3      	ldrb	r3, [r6, #2]
 80072c2:	e78a      	b.n	80071da <_strtod_l+0x192>
 80072c4:	f04f 0c00 	mov.w	ip, #0
 80072c8:	e7f8      	b.n	80072bc <_strtod_l+0x274>
 80072ca:	bf00      	nop
 80072cc:	0800a790 	.word	0x0800a790
 80072d0:	7ff00000 	.word	0x7ff00000
 80072d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072d6:	1c5f      	adds	r7, r3, #1
 80072d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b30      	cmp	r3, #48	; 0x30
 80072de:	d0f9      	beq.n	80072d4 <_strtod_l+0x28c>
 80072e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80072e4:	2f08      	cmp	r7, #8
 80072e6:	f63f af7d 	bhi.w	80071e4 <_strtod_l+0x19c>
 80072ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80072ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072f0:	930a      	str	r3, [sp, #40]	; 0x28
 80072f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072f4:	1c5f      	adds	r7, r3, #1
 80072f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80072fe:	f1b8 0f09 	cmp.w	r8, #9
 8007302:	d937      	bls.n	8007374 <_strtod_l+0x32c>
 8007304:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007306:	1a7f      	subs	r7, r7, r1
 8007308:	2f08      	cmp	r7, #8
 800730a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800730e:	dc37      	bgt.n	8007380 <_strtod_l+0x338>
 8007310:	45be      	cmp	lr, r7
 8007312:	bfa8      	it	ge
 8007314:	46be      	movge	lr, r7
 8007316:	f1bc 0f00 	cmp.w	ip, #0
 800731a:	d001      	beq.n	8007320 <_strtod_l+0x2d8>
 800731c:	f1ce 0e00 	rsb	lr, lr, #0
 8007320:	2c00      	cmp	r4, #0
 8007322:	d151      	bne.n	80073c8 <_strtod_l+0x380>
 8007324:	2800      	cmp	r0, #0
 8007326:	f47f aece 	bne.w	80070c6 <_strtod_l+0x7e>
 800732a:	9a06      	ldr	r2, [sp, #24]
 800732c:	2a00      	cmp	r2, #0
 800732e:	f47f aeca 	bne.w	80070c6 <_strtod_l+0x7e>
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	2a00      	cmp	r2, #0
 8007336:	f47f aee4 	bne.w	8007102 <_strtod_l+0xba>
 800733a:	2b4e      	cmp	r3, #78	; 0x4e
 800733c:	d027      	beq.n	800738e <_strtod_l+0x346>
 800733e:	dc21      	bgt.n	8007384 <_strtod_l+0x33c>
 8007340:	2b49      	cmp	r3, #73	; 0x49
 8007342:	f47f aede 	bne.w	8007102 <_strtod_l+0xba>
 8007346:	49a0      	ldr	r1, [pc, #640]	; (80075c8 <_strtod_l+0x580>)
 8007348:	a81b      	add	r0, sp, #108	; 0x6c
 800734a:	f001 fea1 	bl	8009090 <__match>
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f aed7 	beq.w	8007102 <_strtod_l+0xba>
 8007354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007356:	499d      	ldr	r1, [pc, #628]	; (80075cc <_strtod_l+0x584>)
 8007358:	3b01      	subs	r3, #1
 800735a:	a81b      	add	r0, sp, #108	; 0x6c
 800735c:	931b      	str	r3, [sp, #108]	; 0x6c
 800735e:	f001 fe97 	bl	8009090 <__match>
 8007362:	b910      	cbnz	r0, 800736a <_strtod_l+0x322>
 8007364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007366:	3301      	adds	r3, #1
 8007368:	931b      	str	r3, [sp, #108]	; 0x6c
 800736a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80075e0 <_strtod_l+0x598>
 800736e:	f04f 0a00 	mov.w	sl, #0
 8007372:	e6a8      	b.n	80070c6 <_strtod_l+0x7e>
 8007374:	210a      	movs	r1, #10
 8007376:	fb01 3e0e 	mla	lr, r1, lr, r3
 800737a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800737e:	e7b8      	b.n	80072f2 <_strtod_l+0x2aa>
 8007380:	46be      	mov	lr, r7
 8007382:	e7c8      	b.n	8007316 <_strtod_l+0x2ce>
 8007384:	2b69      	cmp	r3, #105	; 0x69
 8007386:	d0de      	beq.n	8007346 <_strtod_l+0x2fe>
 8007388:	2b6e      	cmp	r3, #110	; 0x6e
 800738a:	f47f aeba 	bne.w	8007102 <_strtod_l+0xba>
 800738e:	4990      	ldr	r1, [pc, #576]	; (80075d0 <_strtod_l+0x588>)
 8007390:	a81b      	add	r0, sp, #108	; 0x6c
 8007392:	f001 fe7d 	bl	8009090 <__match>
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aeb3 	beq.w	8007102 <_strtod_l+0xba>
 800739c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b28      	cmp	r3, #40	; 0x28
 80073a2:	d10e      	bne.n	80073c2 <_strtod_l+0x37a>
 80073a4:	aa1e      	add	r2, sp, #120	; 0x78
 80073a6:	498b      	ldr	r1, [pc, #556]	; (80075d4 <_strtod_l+0x58c>)
 80073a8:	a81b      	add	r0, sp, #108	; 0x6c
 80073aa:	f001 fe85 	bl	80090b8 <__hexnan>
 80073ae:	2805      	cmp	r0, #5
 80073b0:	d107      	bne.n	80073c2 <_strtod_l+0x37a>
 80073b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80073b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80073bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80073c0:	e681      	b.n	80070c6 <_strtod_l+0x7e>
 80073c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80075e8 <_strtod_l+0x5a0>
 80073c6:	e7d2      	b.n	800736e <_strtod_l+0x326>
 80073c8:	ebae 0302 	sub.w	r3, lr, r2
 80073cc:	9306      	str	r3, [sp, #24]
 80073ce:	9b05      	ldr	r3, [sp, #20]
 80073d0:	9807      	ldr	r0, [sp, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bf08      	it	eq
 80073d6:	4623      	moveq	r3, r4
 80073d8:	2c10      	cmp	r4, #16
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	46a0      	mov	r8, r4
 80073de:	bfa8      	it	ge
 80073e0:	f04f 0810 	movge.w	r8, #16
 80073e4:	f7f9 f896 	bl	8000514 <__aeabi_ui2d>
 80073e8:	2c09      	cmp	r4, #9
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	dc13      	bgt.n	8007418 <_strtod_l+0x3d0>
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f43f ae67 	beq.w	80070c6 <_strtod_l+0x7e>
 80073f8:	9b06      	ldr	r3, [sp, #24]
 80073fa:	dd7a      	ble.n	80074f2 <_strtod_l+0x4aa>
 80073fc:	2b16      	cmp	r3, #22
 80073fe:	dc61      	bgt.n	80074c4 <_strtod_l+0x47c>
 8007400:	4a75      	ldr	r2, [pc, #468]	; (80075d8 <_strtod_l+0x590>)
 8007402:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007406:	e9de 0100 	ldrd	r0, r1, [lr]
 800740a:	4652      	mov	r2, sl
 800740c:	465b      	mov	r3, fp
 800740e:	f7f9 f8fb 	bl	8000608 <__aeabi_dmul>
 8007412:	4682      	mov	sl, r0
 8007414:	468b      	mov	fp, r1
 8007416:	e656      	b.n	80070c6 <_strtod_l+0x7e>
 8007418:	4b6f      	ldr	r3, [pc, #444]	; (80075d8 <_strtod_l+0x590>)
 800741a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800741e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007422:	f7f9 f8f1 	bl	8000608 <__aeabi_dmul>
 8007426:	4606      	mov	r6, r0
 8007428:	4628      	mov	r0, r5
 800742a:	460f      	mov	r7, r1
 800742c:	f7f9 f872 	bl	8000514 <__aeabi_ui2d>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f8 ff30 	bl	800029c <__adddf3>
 800743c:	2c0f      	cmp	r4, #15
 800743e:	4682      	mov	sl, r0
 8007440:	468b      	mov	fp, r1
 8007442:	ddd5      	ble.n	80073f0 <_strtod_l+0x3a8>
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	eba4 0808 	sub.w	r8, r4, r8
 800744a:	4498      	add	r8, r3
 800744c:	f1b8 0f00 	cmp.w	r8, #0
 8007450:	f340 8096 	ble.w	8007580 <_strtod_l+0x538>
 8007454:	f018 030f 	ands.w	r3, r8, #15
 8007458:	d00a      	beq.n	8007470 <_strtod_l+0x428>
 800745a:	495f      	ldr	r1, [pc, #380]	; (80075d8 <_strtod_l+0x590>)
 800745c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007460:	4652      	mov	r2, sl
 8007462:	465b      	mov	r3, fp
 8007464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007468:	f7f9 f8ce 	bl	8000608 <__aeabi_dmul>
 800746c:	4682      	mov	sl, r0
 800746e:	468b      	mov	fp, r1
 8007470:	f038 080f 	bics.w	r8, r8, #15
 8007474:	d073      	beq.n	800755e <_strtod_l+0x516>
 8007476:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800747a:	dd47      	ble.n	800750c <_strtod_l+0x4c4>
 800747c:	2400      	movs	r4, #0
 800747e:	46a0      	mov	r8, r4
 8007480:	9407      	str	r4, [sp, #28]
 8007482:	9405      	str	r4, [sp, #20]
 8007484:	2322      	movs	r3, #34	; 0x22
 8007486:	f8df b158 	ldr.w	fp, [pc, #344]	; 80075e0 <_strtod_l+0x598>
 800748a:	f8c9 3000 	str.w	r3, [r9]
 800748e:	f04f 0a00 	mov.w	sl, #0
 8007492:	9b07      	ldr	r3, [sp, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f43f ae16 	beq.w	80070c6 <_strtod_l+0x7e>
 800749a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800749c:	4648      	mov	r0, r9
 800749e:	f001 fefd 	bl	800929c <_Bfree>
 80074a2:	9905      	ldr	r1, [sp, #20]
 80074a4:	4648      	mov	r0, r9
 80074a6:	f001 fef9 	bl	800929c <_Bfree>
 80074aa:	4641      	mov	r1, r8
 80074ac:	4648      	mov	r0, r9
 80074ae:	f001 fef5 	bl	800929c <_Bfree>
 80074b2:	9907      	ldr	r1, [sp, #28]
 80074b4:	4648      	mov	r0, r9
 80074b6:	f001 fef1 	bl	800929c <_Bfree>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4648      	mov	r0, r9
 80074be:	f001 feed 	bl	800929c <_Bfree>
 80074c2:	e600      	b.n	80070c6 <_strtod_l+0x7e>
 80074c4:	9a06      	ldr	r2, [sp, #24]
 80074c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80074ca:	4293      	cmp	r3, r2
 80074cc:	dbba      	blt.n	8007444 <_strtod_l+0x3fc>
 80074ce:	4d42      	ldr	r5, [pc, #264]	; (80075d8 <_strtod_l+0x590>)
 80074d0:	f1c4 040f 	rsb	r4, r4, #15
 80074d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80074d8:	4652      	mov	r2, sl
 80074da:	465b      	mov	r3, fp
 80074dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	1b1c      	subs	r4, r3, r4
 80074e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80074ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074f0:	e78d      	b.n	800740e <_strtod_l+0x3c6>
 80074f2:	f113 0f16 	cmn.w	r3, #22
 80074f6:	dba5      	blt.n	8007444 <_strtod_l+0x3fc>
 80074f8:	4a37      	ldr	r2, [pc, #220]	; (80075d8 <_strtod_l+0x590>)
 80074fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80074fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007502:	4650      	mov	r0, sl
 8007504:	4659      	mov	r1, fp
 8007506:	f7f9 f9a9 	bl	800085c <__aeabi_ddiv>
 800750a:	e782      	b.n	8007412 <_strtod_l+0x3ca>
 800750c:	2300      	movs	r3, #0
 800750e:	4e33      	ldr	r6, [pc, #204]	; (80075dc <_strtod_l+0x594>)
 8007510:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007514:	4650      	mov	r0, sl
 8007516:	4659      	mov	r1, fp
 8007518:	461d      	mov	r5, r3
 800751a:	f1b8 0f01 	cmp.w	r8, #1
 800751e:	dc21      	bgt.n	8007564 <_strtod_l+0x51c>
 8007520:	b10b      	cbz	r3, 8007526 <_strtod_l+0x4de>
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <_strtod_l+0x594>)
 8007528:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800752c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007530:	4652      	mov	r2, sl
 8007532:	465b      	mov	r3, fp
 8007534:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007538:	f7f9 f866 	bl	8000608 <__aeabi_dmul>
 800753c:	4b28      	ldr	r3, [pc, #160]	; (80075e0 <_strtod_l+0x598>)
 800753e:	460a      	mov	r2, r1
 8007540:	400b      	ands	r3, r1
 8007542:	4928      	ldr	r1, [pc, #160]	; (80075e4 <_strtod_l+0x59c>)
 8007544:	428b      	cmp	r3, r1
 8007546:	4682      	mov	sl, r0
 8007548:	d898      	bhi.n	800747c <_strtod_l+0x434>
 800754a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800754e:	428b      	cmp	r3, r1
 8007550:	bf86      	itte	hi
 8007552:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80075ec <_strtod_l+0x5a4>
 8007556:	f04f 3aff 	movhi.w	sl, #4294967295
 800755a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800755e:	2300      	movs	r3, #0
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	e077      	b.n	8007654 <_strtod_l+0x60c>
 8007564:	f018 0f01 	tst.w	r8, #1
 8007568:	d006      	beq.n	8007578 <_strtod_l+0x530>
 800756a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f9 f849 	bl	8000608 <__aeabi_dmul>
 8007576:	2301      	movs	r3, #1
 8007578:	3501      	adds	r5, #1
 800757a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800757e:	e7cc      	b.n	800751a <_strtod_l+0x4d2>
 8007580:	d0ed      	beq.n	800755e <_strtod_l+0x516>
 8007582:	f1c8 0800 	rsb	r8, r8, #0
 8007586:	f018 020f 	ands.w	r2, r8, #15
 800758a:	d00a      	beq.n	80075a2 <_strtod_l+0x55a>
 800758c:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <_strtod_l+0x590>)
 800758e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007592:	4650      	mov	r0, sl
 8007594:	4659      	mov	r1, fp
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f7f9 f95f 	bl	800085c <__aeabi_ddiv>
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80075a6:	d0da      	beq.n	800755e <_strtod_l+0x516>
 80075a8:	f1b8 0f1f 	cmp.w	r8, #31
 80075ac:	dd20      	ble.n	80075f0 <_strtod_l+0x5a8>
 80075ae:	2400      	movs	r4, #0
 80075b0:	46a0      	mov	r8, r4
 80075b2:	9407      	str	r4, [sp, #28]
 80075b4:	9405      	str	r4, [sp, #20]
 80075b6:	2322      	movs	r3, #34	; 0x22
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	f04f 0b00 	mov.w	fp, #0
 80075c0:	f8c9 3000 	str.w	r3, [r9]
 80075c4:	e765      	b.n	8007492 <_strtod_l+0x44a>
 80075c6:	bf00      	nop
 80075c8:	0800a759 	.word	0x0800a759
 80075cc:	0800a7e3 	.word	0x0800a7e3
 80075d0:	0800a761 	.word	0x0800a761
 80075d4:	0800a7a4 	.word	0x0800a7a4
 80075d8:	0800a888 	.word	0x0800a888
 80075dc:	0800a860 	.word	0x0800a860
 80075e0:	7ff00000 	.word	0x7ff00000
 80075e4:	7ca00000 	.word	0x7ca00000
 80075e8:	fff80000 	.word	0xfff80000
 80075ec:	7fefffff 	.word	0x7fefffff
 80075f0:	f018 0310 	ands.w	r3, r8, #16
 80075f4:	bf18      	it	ne
 80075f6:	236a      	movne	r3, #106	; 0x6a
 80075f8:	4da0      	ldr	r5, [pc, #640]	; (800787c <_strtod_l+0x834>)
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	4650      	mov	r0, sl
 80075fe:	4659      	mov	r1, fp
 8007600:	2300      	movs	r3, #0
 8007602:	f1b8 0f00 	cmp.w	r8, #0
 8007606:	f300 810a 	bgt.w	800781e <_strtod_l+0x7d6>
 800760a:	b10b      	cbz	r3, 8007610 <_strtod_l+0x5c8>
 800760c:	4682      	mov	sl, r0
 800760e:	468b      	mov	fp, r1
 8007610:	9b04      	ldr	r3, [sp, #16]
 8007612:	b1bb      	cbz	r3, 8007644 <_strtod_l+0x5fc>
 8007614:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007618:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800761c:	2b00      	cmp	r3, #0
 800761e:	4659      	mov	r1, fp
 8007620:	dd10      	ble.n	8007644 <_strtod_l+0x5fc>
 8007622:	2b1f      	cmp	r3, #31
 8007624:	f340 8107 	ble.w	8007836 <_strtod_l+0x7ee>
 8007628:	2b34      	cmp	r3, #52	; 0x34
 800762a:	bfde      	ittt	le
 800762c:	3b20      	suble	r3, #32
 800762e:	f04f 32ff 	movle.w	r2, #4294967295
 8007632:	fa02 f303 	lslle.w	r3, r2, r3
 8007636:	f04f 0a00 	mov.w	sl, #0
 800763a:	bfcc      	ite	gt
 800763c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007640:	ea03 0b01 	andle.w	fp, r3, r1
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	4650      	mov	r0, sl
 800764a:	4659      	mov	r1, fp
 800764c:	f7f9 fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007650:	2800      	cmp	r0, #0
 8007652:	d1ac      	bne.n	80075ae <_strtod_l+0x566>
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	9a05      	ldr	r2, [sp, #20]
 800765a:	9908      	ldr	r1, [sp, #32]
 800765c:	4623      	mov	r3, r4
 800765e:	4648      	mov	r0, r9
 8007660:	f001 fe6e 	bl	8009340 <__s2b>
 8007664:	9007      	str	r0, [sp, #28]
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f af08 	beq.w	800747c <_strtod_l+0x434>
 800766c:	9a06      	ldr	r2, [sp, #24]
 800766e:	9b06      	ldr	r3, [sp, #24]
 8007670:	2a00      	cmp	r2, #0
 8007672:	f1c3 0300 	rsb	r3, r3, #0
 8007676:	bfa8      	it	ge
 8007678:	2300      	movge	r3, #0
 800767a:	930e      	str	r3, [sp, #56]	; 0x38
 800767c:	2400      	movs	r4, #0
 800767e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007682:	9316      	str	r3, [sp, #88]	; 0x58
 8007684:	46a0      	mov	r8, r4
 8007686:	9b07      	ldr	r3, [sp, #28]
 8007688:	4648      	mov	r0, r9
 800768a:	6859      	ldr	r1, [r3, #4]
 800768c:	f001 fdd2 	bl	8009234 <_Balloc>
 8007690:	9005      	str	r0, [sp, #20]
 8007692:	2800      	cmp	r0, #0
 8007694:	f43f aef6 	beq.w	8007484 <_strtod_l+0x43c>
 8007698:	9b07      	ldr	r3, [sp, #28]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	3202      	adds	r2, #2
 800769e:	f103 010c 	add.w	r1, r3, #12
 80076a2:	0092      	lsls	r2, r2, #2
 80076a4:	300c      	adds	r0, #12
 80076a6:	f7fe fe23 	bl	80062f0 <memcpy>
 80076aa:	aa1e      	add	r2, sp, #120	; 0x78
 80076ac:	a91d      	add	r1, sp, #116	; 0x74
 80076ae:	ec4b ab10 	vmov	d0, sl, fp
 80076b2:	4648      	mov	r0, r9
 80076b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80076b8:	f002 f8fe 	bl	80098b8 <__d2b>
 80076bc:	901c      	str	r0, [sp, #112]	; 0x70
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aee0 	beq.w	8007484 <_strtod_l+0x43c>
 80076c4:	2101      	movs	r1, #1
 80076c6:	4648      	mov	r0, r9
 80076c8:	f001 fec6 	bl	8009458 <__i2b>
 80076cc:	4680      	mov	r8, r0
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f aed8 	beq.w	8007484 <_strtod_l+0x43c>
 80076d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80076d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076d8:	2e00      	cmp	r6, #0
 80076da:	bfab      	itete	ge
 80076dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80076de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80076e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80076e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80076e4:	bfac      	ite	ge
 80076e6:	18f7      	addge	r7, r6, r3
 80076e8:	1b9d      	sublt	r5, r3, r6
 80076ea:	9b04      	ldr	r3, [sp, #16]
 80076ec:	1af6      	subs	r6, r6, r3
 80076ee:	4416      	add	r6, r2
 80076f0:	4b63      	ldr	r3, [pc, #396]	; (8007880 <_strtod_l+0x838>)
 80076f2:	3e01      	subs	r6, #1
 80076f4:	429e      	cmp	r6, r3
 80076f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076fa:	f280 80af 	bge.w	800785c <_strtod_l+0x814>
 80076fe:	1b9b      	subs	r3, r3, r6
 8007700:	2b1f      	cmp	r3, #31
 8007702:	eba2 0203 	sub.w	r2, r2, r3
 8007706:	f04f 0101 	mov.w	r1, #1
 800770a:	f300 809b 	bgt.w	8007844 <_strtod_l+0x7fc>
 800770e:	fa01 f303 	lsl.w	r3, r1, r3
 8007712:	930f      	str	r3, [sp, #60]	; 0x3c
 8007714:	2300      	movs	r3, #0
 8007716:	930a      	str	r3, [sp, #40]	; 0x28
 8007718:	18be      	adds	r6, r7, r2
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	42b7      	cmp	r7, r6
 800771e:	4415      	add	r5, r2
 8007720:	441d      	add	r5, r3
 8007722:	463b      	mov	r3, r7
 8007724:	bfa8      	it	ge
 8007726:	4633      	movge	r3, r6
 8007728:	42ab      	cmp	r3, r5
 800772a:	bfa8      	it	ge
 800772c:	462b      	movge	r3, r5
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfc2      	ittt	gt
 8007732:	1af6      	subgt	r6, r6, r3
 8007734:	1aed      	subgt	r5, r5, r3
 8007736:	1aff      	subgt	r7, r7, r3
 8007738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800773a:	b1bb      	cbz	r3, 800776c <_strtod_l+0x724>
 800773c:	4641      	mov	r1, r8
 800773e:	461a      	mov	r2, r3
 8007740:	4648      	mov	r0, r9
 8007742:	f001 ff29 	bl	8009598 <__pow5mult>
 8007746:	4680      	mov	r8, r0
 8007748:	2800      	cmp	r0, #0
 800774a:	f43f ae9b 	beq.w	8007484 <_strtod_l+0x43c>
 800774e:	4601      	mov	r1, r0
 8007750:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007752:	4648      	mov	r0, r9
 8007754:	f001 fe89 	bl	800946a <__multiply>
 8007758:	900c      	str	r0, [sp, #48]	; 0x30
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f ae92 	beq.w	8007484 <_strtod_l+0x43c>
 8007760:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007762:	4648      	mov	r0, r9
 8007764:	f001 fd9a 	bl	800929c <_Bfree>
 8007768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776a:	931c      	str	r3, [sp, #112]	; 0x70
 800776c:	2e00      	cmp	r6, #0
 800776e:	dc7a      	bgt.n	8007866 <_strtod_l+0x81e>
 8007770:	9b06      	ldr	r3, [sp, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	dd08      	ble.n	8007788 <_strtod_l+0x740>
 8007776:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007778:	9905      	ldr	r1, [sp, #20]
 800777a:	4648      	mov	r0, r9
 800777c:	f001 ff0c 	bl	8009598 <__pow5mult>
 8007780:	9005      	str	r0, [sp, #20]
 8007782:	2800      	cmp	r0, #0
 8007784:	f43f ae7e 	beq.w	8007484 <_strtod_l+0x43c>
 8007788:	2d00      	cmp	r5, #0
 800778a:	dd08      	ble.n	800779e <_strtod_l+0x756>
 800778c:	462a      	mov	r2, r5
 800778e:	9905      	ldr	r1, [sp, #20]
 8007790:	4648      	mov	r0, r9
 8007792:	f001 ff4f 	bl	8009634 <__lshift>
 8007796:	9005      	str	r0, [sp, #20]
 8007798:	2800      	cmp	r0, #0
 800779a:	f43f ae73 	beq.w	8007484 <_strtod_l+0x43c>
 800779e:	2f00      	cmp	r7, #0
 80077a0:	dd08      	ble.n	80077b4 <_strtod_l+0x76c>
 80077a2:	4641      	mov	r1, r8
 80077a4:	463a      	mov	r2, r7
 80077a6:	4648      	mov	r0, r9
 80077a8:	f001 ff44 	bl	8009634 <__lshift>
 80077ac:	4680      	mov	r8, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f43f ae68 	beq.w	8007484 <_strtod_l+0x43c>
 80077b4:	9a05      	ldr	r2, [sp, #20]
 80077b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077b8:	4648      	mov	r0, r9
 80077ba:	f001 ffa9 	bl	8009710 <__mdiff>
 80077be:	4604      	mov	r4, r0
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f43f ae5f 	beq.w	8007484 <_strtod_l+0x43c>
 80077c6:	68c3      	ldr	r3, [r0, #12]
 80077c8:	930c      	str	r3, [sp, #48]	; 0x30
 80077ca:	2300      	movs	r3, #0
 80077cc:	60c3      	str	r3, [r0, #12]
 80077ce:	4641      	mov	r1, r8
 80077d0:	f001 ff84 	bl	80096dc <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	da55      	bge.n	8007884 <_strtod_l+0x83c>
 80077d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077da:	b9e3      	cbnz	r3, 8007816 <_strtod_l+0x7ce>
 80077dc:	f1ba 0f00 	cmp.w	sl, #0
 80077e0:	d119      	bne.n	8007816 <_strtod_l+0x7ce>
 80077e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e6:	b9b3      	cbnz	r3, 8007816 <_strtod_l+0x7ce>
 80077e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077ec:	0d1b      	lsrs	r3, r3, #20
 80077ee:	051b      	lsls	r3, r3, #20
 80077f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077f4:	d90f      	bls.n	8007816 <_strtod_l+0x7ce>
 80077f6:	6963      	ldr	r3, [r4, #20]
 80077f8:	b913      	cbnz	r3, 8007800 <_strtod_l+0x7b8>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	dd0a      	ble.n	8007816 <_strtod_l+0x7ce>
 8007800:	4621      	mov	r1, r4
 8007802:	2201      	movs	r2, #1
 8007804:	4648      	mov	r0, r9
 8007806:	f001 ff15 	bl	8009634 <__lshift>
 800780a:	4641      	mov	r1, r8
 800780c:	4604      	mov	r4, r0
 800780e:	f001 ff65 	bl	80096dc <__mcmp>
 8007812:	2800      	cmp	r0, #0
 8007814:	dc67      	bgt.n	80078e6 <_strtod_l+0x89e>
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d171      	bne.n	8007900 <_strtod_l+0x8b8>
 800781c:	e63d      	b.n	800749a <_strtod_l+0x452>
 800781e:	f018 0f01 	tst.w	r8, #1
 8007822:	d004      	beq.n	800782e <_strtod_l+0x7e6>
 8007824:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	2301      	movs	r3, #1
 800782e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007832:	3508      	adds	r5, #8
 8007834:	e6e5      	b.n	8007602 <_strtod_l+0x5ba>
 8007836:	f04f 32ff 	mov.w	r2, #4294967295
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	ea03 0a0a 	and.w	sl, r3, sl
 8007842:	e6ff      	b.n	8007644 <_strtod_l+0x5fc>
 8007844:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007848:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800784c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007850:	36e2      	adds	r6, #226	; 0xe2
 8007852:	fa01 f306 	lsl.w	r3, r1, r6
 8007856:	930a      	str	r3, [sp, #40]	; 0x28
 8007858:	910f      	str	r1, [sp, #60]	; 0x3c
 800785a:	e75d      	b.n	8007718 <_strtod_l+0x6d0>
 800785c:	2300      	movs	r3, #0
 800785e:	930a      	str	r3, [sp, #40]	; 0x28
 8007860:	2301      	movs	r3, #1
 8007862:	930f      	str	r3, [sp, #60]	; 0x3c
 8007864:	e758      	b.n	8007718 <_strtod_l+0x6d0>
 8007866:	4632      	mov	r2, r6
 8007868:	991c      	ldr	r1, [sp, #112]	; 0x70
 800786a:	4648      	mov	r0, r9
 800786c:	f001 fee2 	bl	8009634 <__lshift>
 8007870:	901c      	str	r0, [sp, #112]	; 0x70
 8007872:	2800      	cmp	r0, #0
 8007874:	f47f af7c 	bne.w	8007770 <_strtod_l+0x728>
 8007878:	e604      	b.n	8007484 <_strtod_l+0x43c>
 800787a:	bf00      	nop
 800787c:	0800a7b8 	.word	0x0800a7b8
 8007880:	fffffc02 	.word	0xfffffc02
 8007884:	465d      	mov	r5, fp
 8007886:	f040 8086 	bne.w	8007996 <_strtod_l+0x94e>
 800788a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800788c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007890:	b32a      	cbz	r2, 80078de <_strtod_l+0x896>
 8007892:	4aaf      	ldr	r2, [pc, #700]	; (8007b50 <_strtod_l+0xb08>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d153      	bne.n	8007940 <_strtod_l+0x8f8>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4650      	mov	r0, sl
 800789c:	b1d3      	cbz	r3, 80078d4 <_strtod_l+0x88c>
 800789e:	4aad      	ldr	r2, [pc, #692]	; (8007b54 <_strtod_l+0xb0c>)
 80078a0:	402a      	ands	r2, r5
 80078a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80078a6:	f04f 31ff 	mov.w	r1, #4294967295
 80078aa:	d816      	bhi.n	80078da <_strtod_l+0x892>
 80078ac:	0d12      	lsrs	r2, r2, #20
 80078ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078b2:	fa01 f303 	lsl.w	r3, r1, r3
 80078b6:	4298      	cmp	r0, r3
 80078b8:	d142      	bne.n	8007940 <_strtod_l+0x8f8>
 80078ba:	4ba7      	ldr	r3, [pc, #668]	; (8007b58 <_strtod_l+0xb10>)
 80078bc:	429d      	cmp	r5, r3
 80078be:	d102      	bne.n	80078c6 <_strtod_l+0x87e>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f43f addf 	beq.w	8007484 <_strtod_l+0x43c>
 80078c6:	4ba3      	ldr	r3, [pc, #652]	; (8007b54 <_strtod_l+0xb0c>)
 80078c8:	402b      	ands	r3, r5
 80078ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80078ce:	f04f 0a00 	mov.w	sl, #0
 80078d2:	e7a0      	b.n	8007816 <_strtod_l+0x7ce>
 80078d4:	f04f 33ff 	mov.w	r3, #4294967295
 80078d8:	e7ed      	b.n	80078b6 <_strtod_l+0x86e>
 80078da:	460b      	mov	r3, r1
 80078dc:	e7eb      	b.n	80078b6 <_strtod_l+0x86e>
 80078de:	bb7b      	cbnz	r3, 8007940 <_strtod_l+0x8f8>
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	d12c      	bne.n	8007940 <_strtod_l+0x8f8>
 80078e6:	9904      	ldr	r1, [sp, #16]
 80078e8:	4a9a      	ldr	r2, [pc, #616]	; (8007b54 <_strtod_l+0xb0c>)
 80078ea:	465b      	mov	r3, fp
 80078ec:	b1f1      	cbz	r1, 800792c <_strtod_l+0x8e4>
 80078ee:	ea02 010b 	and.w	r1, r2, fp
 80078f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078f6:	dc19      	bgt.n	800792c <_strtod_l+0x8e4>
 80078f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078fc:	f77f ae5b 	ble.w	80075b6 <_strtod_l+0x56e>
 8007900:	4a96      	ldr	r2, [pc, #600]	; (8007b5c <_strtod_l+0xb14>)
 8007902:	2300      	movs	r3, #0
 8007904:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007908:	4650      	mov	r0, sl
 800790a:	4659      	mov	r1, fp
 800790c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007910:	f7f8 fe7a 	bl	8000608 <__aeabi_dmul>
 8007914:	4682      	mov	sl, r0
 8007916:	468b      	mov	fp, r1
 8007918:	2900      	cmp	r1, #0
 800791a:	f47f adbe 	bne.w	800749a <_strtod_l+0x452>
 800791e:	2800      	cmp	r0, #0
 8007920:	f47f adbb 	bne.w	800749a <_strtod_l+0x452>
 8007924:	2322      	movs	r3, #34	; 0x22
 8007926:	f8c9 3000 	str.w	r3, [r9]
 800792a:	e5b6      	b.n	800749a <_strtod_l+0x452>
 800792c:	4013      	ands	r3, r2
 800792e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007932:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007936:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800793a:	f04f 3aff 	mov.w	sl, #4294967295
 800793e:	e76a      	b.n	8007816 <_strtod_l+0x7ce>
 8007940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007942:	b193      	cbz	r3, 800796a <_strtod_l+0x922>
 8007944:	422b      	tst	r3, r5
 8007946:	f43f af66 	beq.w	8007816 <_strtod_l+0x7ce>
 800794a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	4650      	mov	r0, sl
 8007950:	4659      	mov	r1, fp
 8007952:	b173      	cbz	r3, 8007972 <_strtod_l+0x92a>
 8007954:	f7ff fb5c 	bl	8007010 <sulp>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007960:	f7f8 fc9c 	bl	800029c <__adddf3>
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	e755      	b.n	8007816 <_strtod_l+0x7ce>
 800796a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800796c:	ea13 0f0a 	tst.w	r3, sl
 8007970:	e7e9      	b.n	8007946 <_strtod_l+0x8fe>
 8007972:	f7ff fb4d 	bl	8007010 <sulp>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800797e:	f7f8 fc8b 	bl	8000298 <__aeabi_dsub>
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	f7f9 f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800798e:	2800      	cmp	r0, #0
 8007990:	f47f ae11 	bne.w	80075b6 <_strtod_l+0x56e>
 8007994:	e73f      	b.n	8007816 <_strtod_l+0x7ce>
 8007996:	4641      	mov	r1, r8
 8007998:	4620      	mov	r0, r4
 800799a:	f001 ffdc 	bl	8009956 <__ratio>
 800799e:	ec57 6b10 	vmov	r6, r7, d0
 80079a2:	2200      	movs	r2, #0
 80079a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a8:	ee10 0a10 	vmov	r0, s0
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f9 f8a7 	bl	8000b00 <__aeabi_dcmple>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d077      	beq.n	8007aa6 <_strtod_l+0xa5e>
 80079b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d04a      	beq.n	8007a52 <_strtod_l+0xa0a>
 80079bc:	4b68      	ldr	r3, [pc, #416]	; (8007b60 <_strtod_l+0xb18>)
 80079be:	2200      	movs	r2, #0
 80079c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80079c4:	4f66      	ldr	r7, [pc, #408]	; (8007b60 <_strtod_l+0xb18>)
 80079c6:	2600      	movs	r6, #0
 80079c8:	4b62      	ldr	r3, [pc, #392]	; (8007b54 <_strtod_l+0xb0c>)
 80079ca:	402b      	ands	r3, r5
 80079cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079d0:	4b64      	ldr	r3, [pc, #400]	; (8007b64 <_strtod_l+0xb1c>)
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f040 80ce 	bne.w	8007b74 <_strtod_l+0xb2c>
 80079d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80079e4:	ec4b ab10 	vmov	d0, sl, fp
 80079e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80079ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80079f0:	f001 feec 	bl	80097cc <__ulp>
 80079f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079f8:	ec53 2b10 	vmov	r2, r3, d0
 80079fc:	f7f8 fe04 	bl	8000608 <__aeabi_dmul>
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	f7f8 fc4a 	bl	800029c <__adddf3>
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4952      	ldr	r1, [pc, #328]	; (8007b54 <_strtod_l+0xb0c>)
 8007a0c:	4a56      	ldr	r2, [pc, #344]	; (8007b68 <_strtod_l+0xb20>)
 8007a0e:	4019      	ands	r1, r3
 8007a10:	4291      	cmp	r1, r2
 8007a12:	4682      	mov	sl, r0
 8007a14:	d95b      	bls.n	8007ace <_strtod_l+0xa86>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d103      	bne.n	8007a28 <_strtod_l+0x9e0>
 8007a20:	9b08      	ldr	r3, [sp, #32]
 8007a22:	3301      	adds	r3, #1
 8007a24:	f43f ad2e 	beq.w	8007484 <_strtod_l+0x43c>
 8007a28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007b58 <_strtod_l+0xb10>
 8007a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a32:	4648      	mov	r0, r9
 8007a34:	f001 fc32 	bl	800929c <_Bfree>
 8007a38:	9905      	ldr	r1, [sp, #20]
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	f001 fc2e 	bl	800929c <_Bfree>
 8007a40:	4641      	mov	r1, r8
 8007a42:	4648      	mov	r0, r9
 8007a44:	f001 fc2a 	bl	800929c <_Bfree>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4648      	mov	r0, r9
 8007a4c:	f001 fc26 	bl	800929c <_Bfree>
 8007a50:	e619      	b.n	8007686 <_strtod_l+0x63e>
 8007a52:	f1ba 0f00 	cmp.w	sl, #0
 8007a56:	d11a      	bne.n	8007a8e <_strtod_l+0xa46>
 8007a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a5c:	b9eb      	cbnz	r3, 8007a9a <_strtod_l+0xa52>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4b3f      	ldr	r3, [pc, #252]	; (8007b60 <_strtod_l+0xb18>)
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7f9 f841 	bl	8000aec <__aeabi_dcmplt>
 8007a6a:	b9c8      	cbnz	r0, 8007aa0 <_strtod_l+0xa58>
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	4639      	mov	r1, r7
 8007a70:	2200      	movs	r2, #0
 8007a72:	4b3e      	ldr	r3, [pc, #248]	; (8007b6c <_strtod_l+0xb24>)
 8007a74:	f7f8 fdc8 	bl	8000608 <__aeabi_dmul>
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a80:	9618      	str	r6, [sp, #96]	; 0x60
 8007a82:	9319      	str	r3, [sp, #100]	; 0x64
 8007a84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007a88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a8c:	e79c      	b.n	80079c8 <_strtod_l+0x980>
 8007a8e:	f1ba 0f01 	cmp.w	sl, #1
 8007a92:	d102      	bne.n	8007a9a <_strtod_l+0xa52>
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	f43f ad8e 	beq.w	80075b6 <_strtod_l+0x56e>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	4b34      	ldr	r3, [pc, #208]	; (8007b70 <_strtod_l+0xb28>)
 8007a9e:	e78f      	b.n	80079c0 <_strtod_l+0x978>
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	4f32      	ldr	r7, [pc, #200]	; (8007b6c <_strtod_l+0xb24>)
 8007aa4:	e7ea      	b.n	8007a7c <_strtod_l+0xa34>
 8007aa6:	4b31      	ldr	r3, [pc, #196]	; (8007b6c <_strtod_l+0xb24>)
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	2200      	movs	r2, #0
 8007aae:	f7f8 fdab 	bl	8000608 <__aeabi_dmul>
 8007ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	b933      	cbnz	r3, 8007ac8 <_strtod_l+0xa80>
 8007aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007abe:	9010      	str	r0, [sp, #64]	; 0x40
 8007ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8007ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ac6:	e7df      	b.n	8007a88 <_strtod_l+0xa40>
 8007ac8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007acc:	e7f9      	b.n	8007ac2 <_strtod_l+0xa7a>
 8007ace:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ab      	bne.n	8007a30 <_strtod_l+0x9e8>
 8007ad8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007adc:	0d1b      	lsrs	r3, r3, #20
 8007ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ae0:	051b      	lsls	r3, r3, #20
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	465d      	mov	r5, fp
 8007ae6:	d1a3      	bne.n	8007a30 <_strtod_l+0x9e8>
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7f9 f83c 	bl	8000b68 <__aeabi_d2iz>
 8007af0:	f7f8 fd20 	bl	8000534 <__aeabi_i2d>
 8007af4:	460b      	mov	r3, r1
 8007af6:	4602      	mov	r2, r0
 8007af8:	4639      	mov	r1, r7
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7f8 fbcc 	bl	8000298 <__aeabi_dsub>
 8007b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b02:	4606      	mov	r6, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	b933      	cbnz	r3, 8007b16 <_strtod_l+0xace>
 8007b08:	f1ba 0f00 	cmp.w	sl, #0
 8007b0c:	d103      	bne.n	8007b16 <_strtod_l+0xace>
 8007b0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	d06d      	beq.n	8007bf2 <_strtod_l+0xbaa>
 8007b16:	a30a      	add	r3, pc, #40	; (adr r3, 8007b40 <_strtod_l+0xaf8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7f8 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f47f acb8 	bne.w	800749a <_strtod_l+0x452>
 8007b2a:	a307      	add	r3, pc, #28	; (adr r3, 8007b48 <_strtod_l+0xb00>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f43f af79 	beq.w	8007a30 <_strtod_l+0x9e8>
 8007b3e:	e4ac      	b.n	800749a <_strtod_l+0x452>
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fdfffff 	.word	0x3fdfffff
 8007b48:	35afe535 	.word	0x35afe535
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	000fffff 	.word	0x000fffff
 8007b54:	7ff00000 	.word	0x7ff00000
 8007b58:	7fefffff 	.word	0x7fefffff
 8007b5c:	39500000 	.word	0x39500000
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	7fe00000 	.word	0x7fe00000
 8007b68:	7c9fffff 	.word	0x7c9fffff
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	bff00000 	.word	0xbff00000
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	b333      	cbz	r3, 8007bc6 <_strtod_l+0xb7e>
 8007b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b7e:	d822      	bhi.n	8007bc6 <_strtod_l+0xb7e>
 8007b80:	a327      	add	r3, pc, #156	; (adr r3, 8007c20 <_strtod_l+0xbd8>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	4630      	mov	r0, r6
 8007b88:	4639      	mov	r1, r7
 8007b8a:	f7f8 ffb9 	bl	8000b00 <__aeabi_dcmple>
 8007b8e:	b1a0      	cbz	r0, 8007bba <_strtod_l+0xb72>
 8007b90:	4639      	mov	r1, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7f9 f810 	bl	8000bb8 <__aeabi_d2uiz>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	bf08      	it	eq
 8007b9c:	2001      	moveq	r0, #1
 8007b9e:	f7f8 fcb9 	bl	8000514 <__aeabi_ui2d>
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	bb03      	cbnz	r3, 8007bec <_strtod_l+0xba4>
 8007baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bae:	9012      	str	r0, [sp, #72]	; 0x48
 8007bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007bb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007bca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007bce:	f001 fdfd 	bl	80097cc <__ulp>
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	ec53 2b10 	vmov	r2, r3, d0
 8007bd8:	4659      	mov	r1, fp
 8007bda:	f7f8 fd15 	bl	8000608 <__aeabi_dmul>
 8007bde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007be2:	f7f8 fb5b 	bl	800029c <__adddf3>
 8007be6:	4682      	mov	sl, r0
 8007be8:	468b      	mov	fp, r1
 8007bea:	e772      	b.n	8007ad2 <_strtod_l+0xa8a>
 8007bec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007bf0:	e7df      	b.n	8007bb2 <_strtod_l+0xb6a>
 8007bf2:	a30d      	add	r3, pc, #52	; (adr r3, 8007c28 <_strtod_l+0xbe0>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 ff78 	bl	8000aec <__aeabi_dcmplt>
 8007bfc:	e79c      	b.n	8007b38 <_strtod_l+0xaf0>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	930d      	str	r3, [sp, #52]	; 0x34
 8007c02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	f7ff ba61 	b.w	80070ce <_strtod_l+0x86>
 8007c0c:	2b65      	cmp	r3, #101	; 0x65
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f43f ab4e 	beq.w	80072b2 <_strtod_l+0x26a>
 8007c16:	2101      	movs	r1, #1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	9104      	str	r1, [sp, #16]
 8007c1c:	f7ff bacb 	b.w	80071b6 <_strtod_l+0x16e>
 8007c20:	ffc00000 	.word	0xffc00000
 8007c24:	41dfffff 	.word	0x41dfffff
 8007c28:	94a03595 	.word	0x94a03595
 8007c2c:	3fcfffff 	.word	0x3fcfffff

08007c30 <_strtod_r>:
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <_strtod_r+0x18>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b410      	push	{r4}
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	4c04      	ldr	r4, [pc, #16]	; (8007c4c <_strtod_r+0x1c>)
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf08      	it	eq
 8007c3e:	4623      	moveq	r3, r4
 8007c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c44:	f7ff ba00 	b.w	8007048 <_strtod_l>
 8007c48:	2000000c 	.word	0x2000000c
 8007c4c:	20000070 	.word	0x20000070

08007c50 <_strtol_l.isra.0>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	4692      	mov	sl, r2
 8007c5a:	461e      	mov	r6, r3
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	463d      	mov	r5, r7
 8007c60:	9808      	ldr	r0, [sp, #32]
 8007c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c66:	f001 fab7 	bl	80091d8 <__locale_ctype_ptr_l>
 8007c6a:	4420      	add	r0, r4
 8007c6c:	7843      	ldrb	r3, [r0, #1]
 8007c6e:	f013 0308 	ands.w	r3, r3, #8
 8007c72:	d132      	bne.n	8007cda <_strtol_l.isra.0+0x8a>
 8007c74:	2c2d      	cmp	r4, #45	; 0x2d
 8007c76:	d132      	bne.n	8007cde <_strtol_l.isra.0+0x8e>
 8007c78:	787c      	ldrb	r4, [r7, #1]
 8007c7a:	1cbd      	adds	r5, r7, #2
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d05d      	beq.n	8007d3e <_strtol_l.isra.0+0xee>
 8007c82:	2e10      	cmp	r6, #16
 8007c84:	d109      	bne.n	8007c9a <_strtol_l.isra.0+0x4a>
 8007c86:	2c30      	cmp	r4, #48	; 0x30
 8007c88:	d107      	bne.n	8007c9a <_strtol_l.isra.0+0x4a>
 8007c8a:	782b      	ldrb	r3, [r5, #0]
 8007c8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c90:	2b58      	cmp	r3, #88	; 0x58
 8007c92:	d14f      	bne.n	8007d34 <_strtol_l.isra.0+0xe4>
 8007c94:	786c      	ldrb	r4, [r5, #1]
 8007c96:	2610      	movs	r6, #16
 8007c98:	3502      	adds	r5, #2
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	bf14      	ite	ne
 8007c9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007ca2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007ca6:	2700      	movs	r7, #0
 8007ca8:	fbb1 fcf6 	udiv	ip, r1, r6
 8007cac:	4638      	mov	r0, r7
 8007cae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007cb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007cb6:	2b09      	cmp	r3, #9
 8007cb8:	d817      	bhi.n	8007cea <_strtol_l.isra.0+0x9a>
 8007cba:	461c      	mov	r4, r3
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	dd23      	ble.n	8007d08 <_strtol_l.isra.0+0xb8>
 8007cc0:	1c7b      	adds	r3, r7, #1
 8007cc2:	d007      	beq.n	8007cd4 <_strtol_l.isra.0+0x84>
 8007cc4:	4584      	cmp	ip, r0
 8007cc6:	d31c      	bcc.n	8007d02 <_strtol_l.isra.0+0xb2>
 8007cc8:	d101      	bne.n	8007cce <_strtol_l.isra.0+0x7e>
 8007cca:	45a6      	cmp	lr, r4
 8007ccc:	db19      	blt.n	8007d02 <_strtol_l.isra.0+0xb2>
 8007cce:	fb00 4006 	mla	r0, r0, r6, r4
 8007cd2:	2701      	movs	r7, #1
 8007cd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cd8:	e7eb      	b.n	8007cb2 <_strtol_l.isra.0+0x62>
 8007cda:	462f      	mov	r7, r5
 8007cdc:	e7bf      	b.n	8007c5e <_strtol_l.isra.0+0xe>
 8007cde:	2c2b      	cmp	r4, #43	; 0x2b
 8007ce0:	bf04      	itt	eq
 8007ce2:	1cbd      	addeq	r5, r7, #2
 8007ce4:	787c      	ldrbeq	r4, [r7, #1]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	e7c9      	b.n	8007c7e <_strtol_l.isra.0+0x2e>
 8007cea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007cee:	2b19      	cmp	r3, #25
 8007cf0:	d801      	bhi.n	8007cf6 <_strtol_l.isra.0+0xa6>
 8007cf2:	3c37      	subs	r4, #55	; 0x37
 8007cf4:	e7e2      	b.n	8007cbc <_strtol_l.isra.0+0x6c>
 8007cf6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007cfa:	2b19      	cmp	r3, #25
 8007cfc:	d804      	bhi.n	8007d08 <_strtol_l.isra.0+0xb8>
 8007cfe:	3c57      	subs	r4, #87	; 0x57
 8007d00:	e7dc      	b.n	8007cbc <_strtol_l.isra.0+0x6c>
 8007d02:	f04f 37ff 	mov.w	r7, #4294967295
 8007d06:	e7e5      	b.n	8007cd4 <_strtol_l.isra.0+0x84>
 8007d08:	1c7b      	adds	r3, r7, #1
 8007d0a:	d108      	bne.n	8007d1e <_strtol_l.isra.0+0xce>
 8007d0c:	2322      	movs	r3, #34	; 0x22
 8007d0e:	f8c8 3000 	str.w	r3, [r8]
 8007d12:	4608      	mov	r0, r1
 8007d14:	f1ba 0f00 	cmp.w	sl, #0
 8007d18:	d107      	bne.n	8007d2a <_strtol_l.isra.0+0xda>
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	b102      	cbz	r2, 8007d22 <_strtol_l.isra.0+0xd2>
 8007d20:	4240      	negs	r0, r0
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d0f8      	beq.n	8007d1a <_strtol_l.isra.0+0xca>
 8007d28:	b10f      	cbz	r7, 8007d2e <_strtol_l.isra.0+0xde>
 8007d2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d2e:	f8ca 9000 	str.w	r9, [sl]
 8007d32:	e7f2      	b.n	8007d1a <_strtol_l.isra.0+0xca>
 8007d34:	2430      	movs	r4, #48	; 0x30
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	d1af      	bne.n	8007c9a <_strtol_l.isra.0+0x4a>
 8007d3a:	2608      	movs	r6, #8
 8007d3c:	e7ad      	b.n	8007c9a <_strtol_l.isra.0+0x4a>
 8007d3e:	2c30      	cmp	r4, #48	; 0x30
 8007d40:	d0a3      	beq.n	8007c8a <_strtol_l.isra.0+0x3a>
 8007d42:	260a      	movs	r6, #10
 8007d44:	e7a9      	b.n	8007c9a <_strtol_l.isra.0+0x4a>
	...

08007d48 <_strtol_r>:
 8007d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d4a:	4c06      	ldr	r4, [pc, #24]	; (8007d64 <_strtol_r+0x1c>)
 8007d4c:	4d06      	ldr	r5, [pc, #24]	; (8007d68 <_strtol_r+0x20>)
 8007d4e:	6824      	ldr	r4, [r4, #0]
 8007d50:	6a24      	ldr	r4, [r4, #32]
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	bf08      	it	eq
 8007d56:	462c      	moveq	r4, r5
 8007d58:	9400      	str	r4, [sp, #0]
 8007d5a:	f7ff ff79 	bl	8007c50 <_strtol_l.isra.0>
 8007d5e:	b003      	add	sp, #12
 8007d60:	bd30      	pop	{r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	2000000c 	.word	0x2000000c
 8007d68:	20000070 	.word	0x20000070

08007d6c <quorem>:
 8007d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	6903      	ldr	r3, [r0, #16]
 8007d72:	690c      	ldr	r4, [r1, #16]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	4680      	mov	r8, r0
 8007d78:	f2c0 8082 	blt.w	8007e80 <quorem+0x114>
 8007d7c:	3c01      	subs	r4, #1
 8007d7e:	f101 0714 	add.w	r7, r1, #20
 8007d82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007d86:	f100 0614 	add.w	r6, r0, #20
 8007d8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d92:	eb06 030c 	add.w	r3, r6, ip
 8007d96:	3501      	adds	r5, #1
 8007d98:	eb07 090c 	add.w	r9, r7, ip
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007da2:	b395      	cbz	r5, 8007e0a <quorem+0x9e>
 8007da4:	f04f 0a00 	mov.w	sl, #0
 8007da8:	4638      	mov	r0, r7
 8007daa:	46b6      	mov	lr, r6
 8007dac:	46d3      	mov	fp, sl
 8007dae:	f850 2b04 	ldr.w	r2, [r0], #4
 8007db2:	b293      	uxth	r3, r2
 8007db4:	fb05 a303 	mla	r3, r5, r3, sl
 8007db8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	ebab 0303 	sub.w	r3, fp, r3
 8007dc2:	0c12      	lsrs	r2, r2, #16
 8007dc4:	f8de b000 	ldr.w	fp, [lr]
 8007dc8:	fb05 a202 	mla	r2, r5, r2, sl
 8007dcc:	fa13 f38b 	uxtah	r3, r3, fp
 8007dd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007dd4:	fa1f fb82 	uxth.w	fp, r2
 8007dd8:	f8de 2000 	ldr.w	r2, [lr]
 8007ddc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dea:	4581      	cmp	r9, r0
 8007dec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007df0:	f84e 3b04 	str.w	r3, [lr], #4
 8007df4:	d2db      	bcs.n	8007dae <quorem+0x42>
 8007df6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007dfa:	b933      	cbnz	r3, 8007e0a <quorem+0x9e>
 8007dfc:	9b01      	ldr	r3, [sp, #4]
 8007dfe:	3b04      	subs	r3, #4
 8007e00:	429e      	cmp	r6, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	d330      	bcc.n	8007e68 <quorem+0xfc>
 8007e06:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	f001 fc66 	bl	80096dc <__mcmp>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	db25      	blt.n	8007e60 <quorem+0xf4>
 8007e14:	3501      	adds	r5, #1
 8007e16:	4630      	mov	r0, r6
 8007e18:	f04f 0c00 	mov.w	ip, #0
 8007e1c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007e20:	f8d0 e000 	ldr.w	lr, [r0]
 8007e24:	b293      	uxth	r3, r2
 8007e26:	ebac 0303 	sub.w	r3, ip, r3
 8007e2a:	0c12      	lsrs	r2, r2, #16
 8007e2c:	fa13 f38e 	uxtah	r3, r3, lr
 8007e30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e3e:	45b9      	cmp	r9, r7
 8007e40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e44:	f840 3b04 	str.w	r3, [r0], #4
 8007e48:	d2e8      	bcs.n	8007e1c <quorem+0xb0>
 8007e4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007e4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007e52:	b92a      	cbnz	r2, 8007e60 <quorem+0xf4>
 8007e54:	3b04      	subs	r3, #4
 8007e56:	429e      	cmp	r6, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	d30b      	bcc.n	8007e74 <quorem+0x108>
 8007e5c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e60:	4628      	mov	r0, r5
 8007e62:	b003      	add	sp, #12
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d1ca      	bne.n	8007e06 <quorem+0x9a>
 8007e70:	3c01      	subs	r4, #1
 8007e72:	e7c5      	b.n	8007e00 <quorem+0x94>
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d1ef      	bne.n	8007e5c <quorem+0xf0>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	e7ea      	b.n	8007e56 <quorem+0xea>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e7ee      	b.n	8007e62 <quorem+0xf6>
 8007e84:	0000      	movs	r0, r0
	...

08007e88 <_dtoa_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	ec57 6b10 	vmov	r6, r7, d0
 8007e90:	b097      	sub	sp, #92	; 0x5c
 8007e92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e94:	9106      	str	r1, [sp, #24]
 8007e96:	4604      	mov	r4, r0
 8007e98:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e9a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ea0:	e9cd 6700 	strd	r6, r7, [sp]
 8007ea4:	b93d      	cbnz	r5, 8007eb6 <_dtoa_r+0x2e>
 8007ea6:	2010      	movs	r0, #16
 8007ea8:	f001 f9aa 	bl	8009200 <malloc>
 8007eac:	6260      	str	r0, [r4, #36]	; 0x24
 8007eae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007eb2:	6005      	str	r5, [r0, #0]
 8007eb4:	60c5      	str	r5, [r0, #12]
 8007eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eb8:	6819      	ldr	r1, [r3, #0]
 8007eba:	b151      	cbz	r1, 8007ed2 <_dtoa_r+0x4a>
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	604a      	str	r2, [r1, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4093      	lsls	r3, r2
 8007ec4:	608b      	str	r3, [r1, #8]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f001 f9e8 	bl	800929c <_Bfree>
 8007ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	1e3b      	subs	r3, r7, #0
 8007ed4:	bfbb      	ittet	lt
 8007ed6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007eda:	9301      	strlt	r3, [sp, #4]
 8007edc:	2300      	movge	r3, #0
 8007ede:	2201      	movlt	r2, #1
 8007ee0:	bfac      	ite	ge
 8007ee2:	f8c8 3000 	strge.w	r3, [r8]
 8007ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8007eea:	4baf      	ldr	r3, [pc, #700]	; (80081a8 <_dtoa_r+0x320>)
 8007eec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ef0:	ea33 0308 	bics.w	r3, r3, r8
 8007ef4:	d114      	bne.n	8007f20 <_dtoa_r+0x98>
 8007ef6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	9b00      	ldr	r3, [sp, #0]
 8007f00:	b923      	cbnz	r3, 8007f0c <_dtoa_r+0x84>
 8007f02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f000 8542 	beq.w	8008990 <_dtoa_r+0xb08>
 8007f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80081bc <_dtoa_r+0x334>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8544 	beq.w	80089a0 <_dtoa_r+0xb18>
 8007f18:	f10b 0303 	add.w	r3, fp, #3
 8007f1c:	f000 bd3e 	b.w	800899c <_dtoa_r+0xb14>
 8007f20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f24:	2200      	movs	r2, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f7f8 fdd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f30:	4681      	mov	r9, r0
 8007f32:	b168      	cbz	r0, 8007f50 <_dtoa_r+0xc8>
 8007f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f36:	2301      	movs	r3, #1
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8524 	beq.w	800898a <_dtoa_r+0xb02>
 8007f42:	4b9a      	ldr	r3, [pc, #616]	; (80081ac <_dtoa_r+0x324>)
 8007f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f46:	f103 3bff 	add.w	fp, r3, #4294967295
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	f000 bd28 	b.w	80089a0 <_dtoa_r+0xb18>
 8007f50:	aa14      	add	r2, sp, #80	; 0x50
 8007f52:	a915      	add	r1, sp, #84	; 0x54
 8007f54:	ec47 6b10 	vmov	d0, r6, r7
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f001 fcad 	bl	80098b8 <__d2b>
 8007f5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f62:	9004      	str	r0, [sp, #16]
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	d07c      	beq.n	8008062 <_dtoa_r+0x1da>
 8007f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007f70:	46b2      	mov	sl, r6
 8007f72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b8b      	ldr	r3, [pc, #556]	; (80081b0 <_dtoa_r+0x328>)
 8007f82:	4650      	mov	r0, sl
 8007f84:	4659      	mov	r1, fp
 8007f86:	f7f8 f987 	bl	8000298 <__aeabi_dsub>
 8007f8a:	a381      	add	r3, pc, #516	; (adr r3, 8008190 <_dtoa_r+0x308>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 fb3a 	bl	8000608 <__aeabi_dmul>
 8007f94:	a380      	add	r3, pc, #512	; (adr r3, 8008198 <_dtoa_r+0x310>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 f97f 	bl	800029c <__adddf3>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	f7f8 fac6 	bl	8000534 <__aeabi_i2d>
 8007fa8:	a37d      	add	r3, pc, #500	; (adr r3, 80081a0 <_dtoa_r+0x318>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f7f8 fb2b 	bl	8000608 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 f96f 	bl	800029c <__adddf3>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	f7f8 fdd1 	bl	8000b68 <__aeabi_d2iz>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4682      	mov	sl, r0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fd8c 	bl	8000aec <__aeabi_dcmplt>
 8007fd4:	b148      	cbz	r0, 8007fea <_dtoa_r+0x162>
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	f7f8 faac 	bl	8000534 <__aeabi_i2d>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	f7f8 fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fe4:	b908      	cbnz	r0, 8007fea <_dtoa_r+0x162>
 8007fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fea:	f1ba 0f16 	cmp.w	sl, #22
 8007fee:	d859      	bhi.n	80080a4 <_dtoa_r+0x21c>
 8007ff0:	4970      	ldr	r1, [pc, #448]	; (80081b4 <_dtoa_r+0x32c>)
 8007ff2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ffe:	f7f8 fd93 	bl	8000b28 <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	d050      	beq.n	80080a8 <_dtoa_r+0x220>
 8008006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800800a:	2300      	movs	r3, #0
 800800c:	930f      	str	r3, [sp, #60]	; 0x3c
 800800e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008010:	1b5d      	subs	r5, r3, r5
 8008012:	f1b5 0801 	subs.w	r8, r5, #1
 8008016:	bf49      	itett	mi
 8008018:	f1c5 0301 	rsbmi	r3, r5, #1
 800801c:	2300      	movpl	r3, #0
 800801e:	9305      	strmi	r3, [sp, #20]
 8008020:	f04f 0800 	movmi.w	r8, #0
 8008024:	bf58      	it	pl
 8008026:	9305      	strpl	r3, [sp, #20]
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	db3e      	blt.n	80080ac <_dtoa_r+0x224>
 800802e:	2300      	movs	r3, #0
 8008030:	44d0      	add	r8, sl
 8008032:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	2b09      	cmp	r3, #9
 800803c:	f200 8090 	bhi.w	8008160 <_dtoa_r+0x2d8>
 8008040:	2b05      	cmp	r3, #5
 8008042:	bfc4      	itt	gt
 8008044:	3b04      	subgt	r3, #4
 8008046:	9306      	strgt	r3, [sp, #24]
 8008048:	9b06      	ldr	r3, [sp, #24]
 800804a:	f1a3 0302 	sub.w	r3, r3, #2
 800804e:	bfcc      	ite	gt
 8008050:	2500      	movgt	r5, #0
 8008052:	2501      	movle	r5, #1
 8008054:	2b03      	cmp	r3, #3
 8008056:	f200 808f 	bhi.w	8008178 <_dtoa_r+0x2f0>
 800805a:	e8df f003 	tbb	[pc, r3]
 800805e:	7f7d      	.short	0x7f7d
 8008060:	7131      	.short	0x7131
 8008062:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008066:	441d      	add	r5, r3
 8008068:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800806c:	2820      	cmp	r0, #32
 800806e:	dd13      	ble.n	8008098 <_dtoa_r+0x210>
 8008070:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	fa08 f800 	lsl.w	r8, r8, r0
 800807a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800807e:	fa23 f000 	lsr.w	r0, r3, r0
 8008082:	ea48 0000 	orr.w	r0, r8, r0
 8008086:	f7f8 fa45 	bl	8000514 <__aeabi_ui2d>
 800808a:	2301      	movs	r3, #1
 800808c:	4682      	mov	sl, r0
 800808e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008092:	3d01      	subs	r5, #1
 8008094:	9313      	str	r3, [sp, #76]	; 0x4c
 8008096:	e772      	b.n	8007f7e <_dtoa_r+0xf6>
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	f1c0 0020 	rsb	r0, r0, #32
 800809e:	fa03 f000 	lsl.w	r0, r3, r0
 80080a2:	e7f0      	b.n	8008086 <_dtoa_r+0x1fe>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e7b1      	b.n	800800c <_dtoa_r+0x184>
 80080a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80080aa:	e7b0      	b.n	800800e <_dtoa_r+0x186>
 80080ac:	9b05      	ldr	r3, [sp, #20]
 80080ae:	eba3 030a 	sub.w	r3, r3, sl
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	f1ca 0300 	rsb	r3, sl, #0
 80080b8:	9307      	str	r3, [sp, #28]
 80080ba:	2300      	movs	r3, #0
 80080bc:	930e      	str	r3, [sp, #56]	; 0x38
 80080be:	e7bb      	b.n	8008038 <_dtoa_r+0x1b0>
 80080c0:	2301      	movs	r3, #1
 80080c2:	930a      	str	r3, [sp, #40]	; 0x28
 80080c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd59      	ble.n	800817e <_dtoa_r+0x2f6>
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	4699      	mov	r9, r3
 80080ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080d0:	2200      	movs	r2, #0
 80080d2:	6072      	str	r2, [r6, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	f102 0014 	add.w	r0, r2, #20
 80080da:	4298      	cmp	r0, r3
 80080dc:	6871      	ldr	r1, [r6, #4]
 80080de:	d953      	bls.n	8008188 <_dtoa_r+0x300>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f001 f8a7 	bl	8009234 <_Balloc>
 80080e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e8:	6030      	str	r0, [r6, #0]
 80080ea:	f1b9 0f0e 	cmp.w	r9, #14
 80080ee:	f8d3 b000 	ldr.w	fp, [r3]
 80080f2:	f200 80e6 	bhi.w	80082c2 <_dtoa_r+0x43a>
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	f000 80e3 	beq.w	80082c2 <_dtoa_r+0x43a>
 80080fc:	ed9d 7b00 	vldr	d7, [sp]
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008108:	dd74      	ble.n	80081f4 <_dtoa_r+0x36c>
 800810a:	4a2a      	ldr	r2, [pc, #168]	; (80081b4 <_dtoa_r+0x32c>)
 800810c:	f00a 030f 	and.w	r3, sl, #15
 8008110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008114:	ed93 7b00 	vldr	d7, [r3]
 8008118:	ea4f 162a 	mov.w	r6, sl, asr #4
 800811c:	06f0      	lsls	r0, r6, #27
 800811e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008122:	d565      	bpl.n	80081f0 <_dtoa_r+0x368>
 8008124:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <_dtoa_r+0x330>)
 8008126:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800812a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800812e:	f7f8 fb95 	bl	800085c <__aeabi_ddiv>
 8008132:	e9cd 0100 	strd	r0, r1, [sp]
 8008136:	f006 060f 	and.w	r6, r6, #15
 800813a:	2503      	movs	r5, #3
 800813c:	4f1e      	ldr	r7, [pc, #120]	; (80081b8 <_dtoa_r+0x330>)
 800813e:	e04c      	b.n	80081da <_dtoa_r+0x352>
 8008140:	2301      	movs	r3, #1
 8008142:	930a      	str	r3, [sp, #40]	; 0x28
 8008144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008146:	4453      	add	r3, sl
 8008148:	f103 0901 	add.w	r9, r3, #1
 800814c:	9302      	str	r3, [sp, #8]
 800814e:	464b      	mov	r3, r9
 8008150:	2b01      	cmp	r3, #1
 8008152:	bfb8      	it	lt
 8008154:	2301      	movlt	r3, #1
 8008156:	e7ba      	b.n	80080ce <_dtoa_r+0x246>
 8008158:	2300      	movs	r3, #0
 800815a:	e7b2      	b.n	80080c2 <_dtoa_r+0x23a>
 800815c:	2300      	movs	r3, #0
 800815e:	e7f0      	b.n	8008142 <_dtoa_r+0x2ba>
 8008160:	2501      	movs	r5, #1
 8008162:	2300      	movs	r3, #0
 8008164:	9306      	str	r3, [sp, #24]
 8008166:	950a      	str	r5, [sp, #40]	; 0x28
 8008168:	f04f 33ff 	mov.w	r3, #4294967295
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	4699      	mov	r9, r3
 8008170:	2200      	movs	r2, #0
 8008172:	2312      	movs	r3, #18
 8008174:	920b      	str	r2, [sp, #44]	; 0x2c
 8008176:	e7aa      	b.n	80080ce <_dtoa_r+0x246>
 8008178:	2301      	movs	r3, #1
 800817a:	930a      	str	r3, [sp, #40]	; 0x28
 800817c:	e7f4      	b.n	8008168 <_dtoa_r+0x2e0>
 800817e:	2301      	movs	r3, #1
 8008180:	9302      	str	r3, [sp, #8]
 8008182:	4699      	mov	r9, r3
 8008184:	461a      	mov	r2, r3
 8008186:	e7f5      	b.n	8008174 <_dtoa_r+0x2ec>
 8008188:	3101      	adds	r1, #1
 800818a:	6071      	str	r1, [r6, #4]
 800818c:	0052      	lsls	r2, r2, #1
 800818e:	e7a2      	b.n	80080d6 <_dtoa_r+0x24e>
 8008190:	636f4361 	.word	0x636f4361
 8008194:	3fd287a7 	.word	0x3fd287a7
 8008198:	8b60c8b3 	.word	0x8b60c8b3
 800819c:	3fc68a28 	.word	0x3fc68a28
 80081a0:	509f79fb 	.word	0x509f79fb
 80081a4:	3fd34413 	.word	0x3fd34413
 80081a8:	7ff00000 	.word	0x7ff00000
 80081ac:	0800a765 	.word	0x0800a765
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	0800a888 	.word	0x0800a888
 80081b8:	0800a860 	.word	0x0800a860
 80081bc:	0800a7e9 	.word	0x0800a7e9
 80081c0:	07f1      	lsls	r1, r6, #31
 80081c2:	d508      	bpl.n	80081d6 <_dtoa_r+0x34e>
 80081c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081cc:	f7f8 fa1c 	bl	8000608 <__aeabi_dmul>
 80081d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081d4:	3501      	adds	r5, #1
 80081d6:	1076      	asrs	r6, r6, #1
 80081d8:	3708      	adds	r7, #8
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d1f0      	bne.n	80081c0 <_dtoa_r+0x338>
 80081de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e6:	f7f8 fb39 	bl	800085c <__aeabi_ddiv>
 80081ea:	e9cd 0100 	strd	r0, r1, [sp]
 80081ee:	e01a      	b.n	8008226 <_dtoa_r+0x39e>
 80081f0:	2502      	movs	r5, #2
 80081f2:	e7a3      	b.n	800813c <_dtoa_r+0x2b4>
 80081f4:	f000 80a0 	beq.w	8008338 <_dtoa_r+0x4b0>
 80081f8:	f1ca 0600 	rsb	r6, sl, #0
 80081fc:	4b9f      	ldr	r3, [pc, #636]	; (800847c <_dtoa_r+0x5f4>)
 80081fe:	4fa0      	ldr	r7, [pc, #640]	; (8008480 <_dtoa_r+0x5f8>)
 8008200:	f006 020f 	and.w	r2, r6, #15
 8008204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008210:	f7f8 f9fa 	bl	8000608 <__aeabi_dmul>
 8008214:	e9cd 0100 	strd	r0, r1, [sp]
 8008218:	1136      	asrs	r6, r6, #4
 800821a:	2300      	movs	r3, #0
 800821c:	2502      	movs	r5, #2
 800821e:	2e00      	cmp	r6, #0
 8008220:	d17f      	bne.n	8008322 <_dtoa_r+0x49a>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e1      	bne.n	80081ea <_dtoa_r+0x362>
 8008226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8087 	beq.w	800833c <_dtoa_r+0x4b4>
 800822e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008232:	2200      	movs	r2, #0
 8008234:	4b93      	ldr	r3, [pc, #588]	; (8008484 <_dtoa_r+0x5fc>)
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f8 fc57 	bl	8000aec <__aeabi_dcmplt>
 800823e:	2800      	cmp	r0, #0
 8008240:	d07c      	beq.n	800833c <_dtoa_r+0x4b4>
 8008242:	f1b9 0f00 	cmp.w	r9, #0
 8008246:	d079      	beq.n	800833c <_dtoa_r+0x4b4>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd35      	ble.n	80082ba <_dtoa_r+0x432>
 800824e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008252:	9308      	str	r3, [sp, #32]
 8008254:	4639      	mov	r1, r7
 8008256:	2200      	movs	r2, #0
 8008258:	4b8b      	ldr	r3, [pc, #556]	; (8008488 <_dtoa_r+0x600>)
 800825a:	4630      	mov	r0, r6
 800825c:	f7f8 f9d4 	bl	8000608 <__aeabi_dmul>
 8008260:	e9cd 0100 	strd	r0, r1, [sp]
 8008264:	9f02      	ldr	r7, [sp, #8]
 8008266:	3501      	adds	r5, #1
 8008268:	4628      	mov	r0, r5
 800826a:	f7f8 f963 	bl	8000534 <__aeabi_i2d>
 800826e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	2200      	movs	r2, #0
 8008278:	4b84      	ldr	r3, [pc, #528]	; (800848c <_dtoa_r+0x604>)
 800827a:	f7f8 f80f 	bl	800029c <__adddf3>
 800827e:	4605      	mov	r5, r0
 8008280:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008284:	2f00      	cmp	r7, #0
 8008286:	d15d      	bne.n	8008344 <_dtoa_r+0x4bc>
 8008288:	2200      	movs	r2, #0
 800828a:	4b81      	ldr	r3, [pc, #516]	; (8008490 <_dtoa_r+0x608>)
 800828c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008290:	f7f8 f802 	bl	8000298 <__aeabi_dsub>
 8008294:	462a      	mov	r2, r5
 8008296:	4633      	mov	r3, r6
 8008298:	e9cd 0100 	strd	r0, r1, [sp]
 800829c:	f7f8 fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f040 8288 	bne.w	80087b6 <_dtoa_r+0x92e>
 80082a6:	462a      	mov	r2, r5
 80082a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b0:	f7f8 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f040 827c 	bne.w	80087b2 <_dtoa_r+0x92a>
 80082ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082be:	e9cd 2300 	strd	r2, r3, [sp]
 80082c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f2c0 8150 	blt.w	800856a <_dtoa_r+0x6e2>
 80082ca:	f1ba 0f0e 	cmp.w	sl, #14
 80082ce:	f300 814c 	bgt.w	800856a <_dtoa_r+0x6e2>
 80082d2:	4b6a      	ldr	r3, [pc, #424]	; (800847c <_dtoa_r+0x5f4>)
 80082d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082d8:	ed93 7b00 	vldr	d7, [r3]
 80082dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082e4:	f280 80d8 	bge.w	8008498 <_dtoa_r+0x610>
 80082e8:	f1b9 0f00 	cmp.w	r9, #0
 80082ec:	f300 80d4 	bgt.w	8008498 <_dtoa_r+0x610>
 80082f0:	f040 825e 	bne.w	80087b0 <_dtoa_r+0x928>
 80082f4:	2200      	movs	r2, #0
 80082f6:	4b66      	ldr	r3, [pc, #408]	; (8008490 <_dtoa_r+0x608>)
 80082f8:	ec51 0b17 	vmov	r0, r1, d7
 80082fc:	f7f8 f984 	bl	8000608 <__aeabi_dmul>
 8008300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008304:	f7f8 fc06 	bl	8000b14 <__aeabi_dcmpge>
 8008308:	464f      	mov	r7, r9
 800830a:	464e      	mov	r6, r9
 800830c:	2800      	cmp	r0, #0
 800830e:	f040 8234 	bne.w	800877a <_dtoa_r+0x8f2>
 8008312:	2331      	movs	r3, #49	; 0x31
 8008314:	f10b 0501 	add.w	r5, fp, #1
 8008318:	f88b 3000 	strb.w	r3, [fp]
 800831c:	f10a 0a01 	add.w	sl, sl, #1
 8008320:	e22f      	b.n	8008782 <_dtoa_r+0x8fa>
 8008322:	07f2      	lsls	r2, r6, #31
 8008324:	d505      	bpl.n	8008332 <_dtoa_r+0x4aa>
 8008326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800832a:	f7f8 f96d 	bl	8000608 <__aeabi_dmul>
 800832e:	3501      	adds	r5, #1
 8008330:	2301      	movs	r3, #1
 8008332:	1076      	asrs	r6, r6, #1
 8008334:	3708      	adds	r7, #8
 8008336:	e772      	b.n	800821e <_dtoa_r+0x396>
 8008338:	2502      	movs	r5, #2
 800833a:	e774      	b.n	8008226 <_dtoa_r+0x39e>
 800833c:	f8cd a020 	str.w	sl, [sp, #32]
 8008340:	464f      	mov	r7, r9
 8008342:	e791      	b.n	8008268 <_dtoa_r+0x3e0>
 8008344:	4b4d      	ldr	r3, [pc, #308]	; (800847c <_dtoa_r+0x5f4>)
 8008346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800834a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800834e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008350:	2b00      	cmp	r3, #0
 8008352:	d047      	beq.n	80083e4 <_dtoa_r+0x55c>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	2000      	movs	r0, #0
 800835a:	494e      	ldr	r1, [pc, #312]	; (8008494 <_dtoa_r+0x60c>)
 800835c:	f7f8 fa7e 	bl	800085c <__aeabi_ddiv>
 8008360:	462a      	mov	r2, r5
 8008362:	4633      	mov	r3, r6
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800836c:	465d      	mov	r5, fp
 800836e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008372:	f7f8 fbf9 	bl	8000b68 <__aeabi_d2iz>
 8008376:	4606      	mov	r6, r0
 8008378:	f7f8 f8dc 	bl	8000534 <__aeabi_i2d>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008384:	f7f7 ff88 	bl	8000298 <__aeabi_dsub>
 8008388:	3630      	adds	r6, #48	; 0x30
 800838a:	f805 6b01 	strb.w	r6, [r5], #1
 800838e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008392:	e9cd 0100 	strd	r0, r1, [sp]
 8008396:	f7f8 fba9 	bl	8000aec <__aeabi_dcmplt>
 800839a:	2800      	cmp	r0, #0
 800839c:	d163      	bne.n	8008466 <_dtoa_r+0x5de>
 800839e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a2:	2000      	movs	r0, #0
 80083a4:	4937      	ldr	r1, [pc, #220]	; (8008484 <_dtoa_r+0x5fc>)
 80083a6:	f7f7 ff77 	bl	8000298 <__aeabi_dsub>
 80083aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083ae:	f7f8 fb9d 	bl	8000aec <__aeabi_dcmplt>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	f040 80b7 	bne.w	8008526 <_dtoa_r+0x69e>
 80083b8:	eba5 030b 	sub.w	r3, r5, fp
 80083bc:	429f      	cmp	r7, r3
 80083be:	f77f af7c 	ble.w	80082ba <_dtoa_r+0x432>
 80083c2:	2200      	movs	r2, #0
 80083c4:	4b30      	ldr	r3, [pc, #192]	; (8008488 <_dtoa_r+0x600>)
 80083c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ca:	f7f8 f91d 	bl	8000608 <__aeabi_dmul>
 80083ce:	2200      	movs	r2, #0
 80083d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083d4:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <_dtoa_r+0x600>)
 80083d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083da:	f7f8 f915 	bl	8000608 <__aeabi_dmul>
 80083de:	e9cd 0100 	strd	r0, r1, [sp]
 80083e2:	e7c4      	b.n	800836e <_dtoa_r+0x4e6>
 80083e4:	462a      	mov	r2, r5
 80083e6:	4633      	mov	r3, r6
 80083e8:	f7f8 f90e 	bl	8000608 <__aeabi_dmul>
 80083ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083f0:	eb0b 0507 	add.w	r5, fp, r7
 80083f4:	465e      	mov	r6, fp
 80083f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083fa:	f7f8 fbb5 	bl	8000b68 <__aeabi_d2iz>
 80083fe:	4607      	mov	r7, r0
 8008400:	f7f8 f898 	bl	8000534 <__aeabi_i2d>
 8008404:	3730      	adds	r7, #48	; 0x30
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800840e:	f7f7 ff43 	bl	8000298 <__aeabi_dsub>
 8008412:	f806 7b01 	strb.w	r7, [r6], #1
 8008416:	42ae      	cmp	r6, r5
 8008418:	e9cd 0100 	strd	r0, r1, [sp]
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	d126      	bne.n	8008470 <_dtoa_r+0x5e8>
 8008422:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <_dtoa_r+0x60c>)
 8008424:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008428:	f7f7 ff38 	bl	800029c <__adddf3>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008434:	f7f8 fb78 	bl	8000b28 <__aeabi_dcmpgt>
 8008438:	2800      	cmp	r0, #0
 800843a:	d174      	bne.n	8008526 <_dtoa_r+0x69e>
 800843c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008440:	2000      	movs	r0, #0
 8008442:	4914      	ldr	r1, [pc, #80]	; (8008494 <_dtoa_r+0x60c>)
 8008444:	f7f7 ff28 	bl	8000298 <__aeabi_dsub>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008450:	f7f8 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8008454:	2800      	cmp	r0, #0
 8008456:	f43f af30 	beq.w	80082ba <_dtoa_r+0x432>
 800845a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	f105 32ff 	add.w	r2, r5, #4294967295
 8008464:	d002      	beq.n	800846c <_dtoa_r+0x5e4>
 8008466:	f8dd a020 	ldr.w	sl, [sp, #32]
 800846a:	e04a      	b.n	8008502 <_dtoa_r+0x67a>
 800846c:	4615      	mov	r5, r2
 800846e:	e7f4      	b.n	800845a <_dtoa_r+0x5d2>
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <_dtoa_r+0x600>)
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	e9cd 0100 	strd	r0, r1, [sp]
 800847a:	e7bc      	b.n	80083f6 <_dtoa_r+0x56e>
 800847c:	0800a888 	.word	0x0800a888
 8008480:	0800a860 	.word	0x0800a860
 8008484:	3ff00000 	.word	0x3ff00000
 8008488:	40240000 	.word	0x40240000
 800848c:	401c0000 	.word	0x401c0000
 8008490:	40140000 	.word	0x40140000
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	e9dd 6700 	ldrd	r6, r7, [sp]
 800849c:	465d      	mov	r5, fp
 800849e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a2:	4630      	mov	r0, r6
 80084a4:	4639      	mov	r1, r7
 80084a6:	f7f8 f9d9 	bl	800085c <__aeabi_ddiv>
 80084aa:	f7f8 fb5d 	bl	8000b68 <__aeabi_d2iz>
 80084ae:	4680      	mov	r8, r0
 80084b0:	f7f8 f840 	bl	8000534 <__aeabi_i2d>
 80084b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80084c8:	f7f7 fee6 	bl	8000298 <__aeabi_dsub>
 80084cc:	f805 6b01 	strb.w	r6, [r5], #1
 80084d0:	eba5 060b 	sub.w	r6, r5, fp
 80084d4:	45b1      	cmp	r9, r6
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	d139      	bne.n	8008550 <_dtoa_r+0x6c8>
 80084dc:	f7f7 fede 	bl	800029c <__adddf3>
 80084e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	f7f8 fb1e 	bl	8000b28 <__aeabi_dcmpgt>
 80084ec:	b9c8      	cbnz	r0, 8008522 <_dtoa_r+0x69a>
 80084ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 faef 	bl	8000ad8 <__aeabi_dcmpeq>
 80084fa:	b110      	cbz	r0, 8008502 <_dtoa_r+0x67a>
 80084fc:	f018 0f01 	tst.w	r8, #1
 8008500:	d10f      	bne.n	8008522 <_dtoa_r+0x69a>
 8008502:	9904      	ldr	r1, [sp, #16]
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fec9 	bl	800929c <_Bfree>
 800850a:	2300      	movs	r3, #0
 800850c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800850e:	702b      	strb	r3, [r5, #0]
 8008510:	f10a 0301 	add.w	r3, sl, #1
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8241 	beq.w	80089a0 <_dtoa_r+0xb18>
 800851e:	601d      	str	r5, [r3, #0]
 8008520:	e23e      	b.n	80089a0 <_dtoa_r+0xb18>
 8008522:	f8cd a020 	str.w	sl, [sp, #32]
 8008526:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800852a:	2a39      	cmp	r2, #57	; 0x39
 800852c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008530:	d108      	bne.n	8008544 <_dtoa_r+0x6bc>
 8008532:	459b      	cmp	fp, r3
 8008534:	d10a      	bne.n	800854c <_dtoa_r+0x6c4>
 8008536:	9b08      	ldr	r3, [sp, #32]
 8008538:	3301      	adds	r3, #1
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	2330      	movs	r3, #48	; 0x30
 800853e:	f88b 3000 	strb.w	r3, [fp]
 8008542:	465b      	mov	r3, fp
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	3201      	adds	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e78c      	b.n	8008466 <_dtoa_r+0x5de>
 800854c:	461d      	mov	r5, r3
 800854e:	e7ea      	b.n	8008526 <_dtoa_r+0x69e>
 8008550:	2200      	movs	r2, #0
 8008552:	4b9b      	ldr	r3, [pc, #620]	; (80087c0 <_dtoa_r+0x938>)
 8008554:	f7f8 f858 	bl	8000608 <__aeabi_dmul>
 8008558:	2200      	movs	r2, #0
 800855a:	2300      	movs	r3, #0
 800855c:	4606      	mov	r6, r0
 800855e:	460f      	mov	r7, r1
 8008560:	f7f8 faba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008564:	2800      	cmp	r0, #0
 8008566:	d09a      	beq.n	800849e <_dtoa_r+0x616>
 8008568:	e7cb      	b.n	8008502 <_dtoa_r+0x67a>
 800856a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800856c:	2a00      	cmp	r2, #0
 800856e:	f000 808b 	beq.w	8008688 <_dtoa_r+0x800>
 8008572:	9a06      	ldr	r2, [sp, #24]
 8008574:	2a01      	cmp	r2, #1
 8008576:	dc6e      	bgt.n	8008656 <_dtoa_r+0x7ce>
 8008578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800857a:	2a00      	cmp	r2, #0
 800857c:	d067      	beq.n	800864e <_dtoa_r+0x7c6>
 800857e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008582:	9f07      	ldr	r7, [sp, #28]
 8008584:	9d05      	ldr	r5, [sp, #20]
 8008586:	9a05      	ldr	r2, [sp, #20]
 8008588:	2101      	movs	r1, #1
 800858a:	441a      	add	r2, r3
 800858c:	4620      	mov	r0, r4
 800858e:	9205      	str	r2, [sp, #20]
 8008590:	4498      	add	r8, r3
 8008592:	f000 ff61 	bl	8009458 <__i2b>
 8008596:	4606      	mov	r6, r0
 8008598:	2d00      	cmp	r5, #0
 800859a:	dd0c      	ble.n	80085b6 <_dtoa_r+0x72e>
 800859c:	f1b8 0f00 	cmp.w	r8, #0
 80085a0:	dd09      	ble.n	80085b6 <_dtoa_r+0x72e>
 80085a2:	4545      	cmp	r5, r8
 80085a4:	9a05      	ldr	r2, [sp, #20]
 80085a6:	462b      	mov	r3, r5
 80085a8:	bfa8      	it	ge
 80085aa:	4643      	movge	r3, r8
 80085ac:	1ad2      	subs	r2, r2, r3
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	1aed      	subs	r5, r5, r3
 80085b2:	eba8 0803 	sub.w	r8, r8, r3
 80085b6:	9b07      	ldr	r3, [sp, #28]
 80085b8:	b1eb      	cbz	r3, 80085f6 <_dtoa_r+0x76e>
 80085ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d067      	beq.n	8008690 <_dtoa_r+0x808>
 80085c0:	b18f      	cbz	r7, 80085e6 <_dtoa_r+0x75e>
 80085c2:	4631      	mov	r1, r6
 80085c4:	463a      	mov	r2, r7
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 ffe6 	bl	8009598 <__pow5mult>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	4601      	mov	r1, r0
 80085d0:	4606      	mov	r6, r0
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 ff49 	bl	800946a <__multiply>
 80085d8:	9904      	ldr	r1, [sp, #16]
 80085da:	9008      	str	r0, [sp, #32]
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fe5d 	bl	800929c <_Bfree>
 80085e2:	9b08      	ldr	r3, [sp, #32]
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	9b07      	ldr	r3, [sp, #28]
 80085e8:	1bda      	subs	r2, r3, r7
 80085ea:	d004      	beq.n	80085f6 <_dtoa_r+0x76e>
 80085ec:	9904      	ldr	r1, [sp, #16]
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 ffd2 	bl	8009598 <__pow5mult>
 80085f4:	9004      	str	r0, [sp, #16]
 80085f6:	2101      	movs	r1, #1
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 ff2d 	bl	8009458 <__i2b>
 80085fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008600:	4607      	mov	r7, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 81d0 	beq.w	80089a8 <_dtoa_r+0xb20>
 8008608:	461a      	mov	r2, r3
 800860a:	4601      	mov	r1, r0
 800860c:	4620      	mov	r0, r4
 800860e:	f000 ffc3 	bl	8009598 <__pow5mult>
 8008612:	9b06      	ldr	r3, [sp, #24]
 8008614:	2b01      	cmp	r3, #1
 8008616:	4607      	mov	r7, r0
 8008618:	dc40      	bgt.n	800869c <_dtoa_r+0x814>
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d139      	bne.n	8008694 <_dtoa_r+0x80c>
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008626:	2b00      	cmp	r3, #0
 8008628:	d136      	bne.n	8008698 <_dtoa_r+0x810>
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008630:	0d1b      	lsrs	r3, r3, #20
 8008632:	051b      	lsls	r3, r3, #20
 8008634:	b12b      	cbz	r3, 8008642 <_dtoa_r+0x7ba>
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	3301      	adds	r3, #1
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	f108 0801 	add.w	r8, r8, #1
 8008640:	2301      	movs	r3, #1
 8008642:	9307      	str	r3, [sp, #28]
 8008644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008646:	2b00      	cmp	r3, #0
 8008648:	d12a      	bne.n	80086a0 <_dtoa_r+0x818>
 800864a:	2001      	movs	r0, #1
 800864c:	e030      	b.n	80086b0 <_dtoa_r+0x828>
 800864e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008650:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008654:	e795      	b.n	8008582 <_dtoa_r+0x6fa>
 8008656:	9b07      	ldr	r3, [sp, #28]
 8008658:	f109 37ff 	add.w	r7, r9, #4294967295
 800865c:	42bb      	cmp	r3, r7
 800865e:	bfbf      	itttt	lt
 8008660:	9b07      	ldrlt	r3, [sp, #28]
 8008662:	9707      	strlt	r7, [sp, #28]
 8008664:	1afa      	sublt	r2, r7, r3
 8008666:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008668:	bfbb      	ittet	lt
 800866a:	189b      	addlt	r3, r3, r2
 800866c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800866e:	1bdf      	subge	r7, r3, r7
 8008670:	2700      	movlt	r7, #0
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	bfb5      	itete	lt
 8008678:	9b05      	ldrlt	r3, [sp, #20]
 800867a:	9d05      	ldrge	r5, [sp, #20]
 800867c:	eba3 0509 	sublt.w	r5, r3, r9
 8008680:	464b      	movge	r3, r9
 8008682:	bfb8      	it	lt
 8008684:	2300      	movlt	r3, #0
 8008686:	e77e      	b.n	8008586 <_dtoa_r+0x6fe>
 8008688:	9f07      	ldr	r7, [sp, #28]
 800868a:	9d05      	ldr	r5, [sp, #20]
 800868c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800868e:	e783      	b.n	8008598 <_dtoa_r+0x710>
 8008690:	9a07      	ldr	r2, [sp, #28]
 8008692:	e7ab      	b.n	80085ec <_dtoa_r+0x764>
 8008694:	2300      	movs	r3, #0
 8008696:	e7d4      	b.n	8008642 <_dtoa_r+0x7ba>
 8008698:	9b00      	ldr	r3, [sp, #0]
 800869a:	e7d2      	b.n	8008642 <_dtoa_r+0x7ba>
 800869c:	2300      	movs	r3, #0
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80086a6:	6918      	ldr	r0, [r3, #16]
 80086a8:	f000 fe88 	bl	80093bc <__hi0bits>
 80086ac:	f1c0 0020 	rsb	r0, r0, #32
 80086b0:	4440      	add	r0, r8
 80086b2:	f010 001f 	ands.w	r0, r0, #31
 80086b6:	d047      	beq.n	8008748 <_dtoa_r+0x8c0>
 80086b8:	f1c0 0320 	rsb	r3, r0, #32
 80086bc:	2b04      	cmp	r3, #4
 80086be:	dd3b      	ble.n	8008738 <_dtoa_r+0x8b0>
 80086c0:	9b05      	ldr	r3, [sp, #20]
 80086c2:	f1c0 001c 	rsb	r0, r0, #28
 80086c6:	4403      	add	r3, r0
 80086c8:	9305      	str	r3, [sp, #20]
 80086ca:	4405      	add	r5, r0
 80086cc:	4480      	add	r8, r0
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	dd05      	ble.n	80086e0 <_dtoa_r+0x858>
 80086d4:	461a      	mov	r2, r3
 80086d6:	9904      	ldr	r1, [sp, #16]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 ffab 	bl	8009634 <__lshift>
 80086de:	9004      	str	r0, [sp, #16]
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	dd05      	ble.n	80086f2 <_dtoa_r+0x86a>
 80086e6:	4639      	mov	r1, r7
 80086e8:	4642      	mov	r2, r8
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 ffa2 	bl	8009634 <__lshift>
 80086f0:	4607      	mov	r7, r0
 80086f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f4:	b353      	cbz	r3, 800874c <_dtoa_r+0x8c4>
 80086f6:	4639      	mov	r1, r7
 80086f8:	9804      	ldr	r0, [sp, #16]
 80086fa:	f000 ffef 	bl	80096dc <__mcmp>
 80086fe:	2800      	cmp	r0, #0
 8008700:	da24      	bge.n	800874c <_dtoa_r+0x8c4>
 8008702:	2300      	movs	r3, #0
 8008704:	220a      	movs	r2, #10
 8008706:	9904      	ldr	r1, [sp, #16]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fdde 	bl	80092ca <__multadd>
 800870e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008710:	9004      	str	r0, [sp, #16]
 8008712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 814d 	beq.w	80089b6 <_dtoa_r+0xb2e>
 800871c:	2300      	movs	r3, #0
 800871e:	4631      	mov	r1, r6
 8008720:	220a      	movs	r2, #10
 8008722:	4620      	mov	r0, r4
 8008724:	f000 fdd1 	bl	80092ca <__multadd>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	4606      	mov	r6, r0
 800872e:	dc4f      	bgt.n	80087d0 <_dtoa_r+0x948>
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	2b02      	cmp	r3, #2
 8008734:	dd4c      	ble.n	80087d0 <_dtoa_r+0x948>
 8008736:	e011      	b.n	800875c <_dtoa_r+0x8d4>
 8008738:	d0c9      	beq.n	80086ce <_dtoa_r+0x846>
 800873a:	9a05      	ldr	r2, [sp, #20]
 800873c:	331c      	adds	r3, #28
 800873e:	441a      	add	r2, r3
 8008740:	9205      	str	r2, [sp, #20]
 8008742:	441d      	add	r5, r3
 8008744:	4498      	add	r8, r3
 8008746:	e7c2      	b.n	80086ce <_dtoa_r+0x846>
 8008748:	4603      	mov	r3, r0
 800874a:	e7f6      	b.n	800873a <_dtoa_r+0x8b2>
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	dc38      	bgt.n	80087c4 <_dtoa_r+0x93c>
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	2b02      	cmp	r3, #2
 8008756:	dd35      	ble.n	80087c4 <_dtoa_r+0x93c>
 8008758:	f8cd 9008 	str.w	r9, [sp, #8]
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	b963      	cbnz	r3, 800877a <_dtoa_r+0x8f2>
 8008760:	4639      	mov	r1, r7
 8008762:	2205      	movs	r2, #5
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fdb0 	bl	80092ca <__multadd>
 800876a:	4601      	mov	r1, r0
 800876c:	4607      	mov	r7, r0
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	f000 ffb4 	bl	80096dc <__mcmp>
 8008774:	2800      	cmp	r0, #0
 8008776:	f73f adcc 	bgt.w	8008312 <_dtoa_r+0x48a>
 800877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877c:	465d      	mov	r5, fp
 800877e:	ea6f 0a03 	mvn.w	sl, r3
 8008782:	f04f 0900 	mov.w	r9, #0
 8008786:	4639      	mov	r1, r7
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fd87 	bl	800929c <_Bfree>
 800878e:	2e00      	cmp	r6, #0
 8008790:	f43f aeb7 	beq.w	8008502 <_dtoa_r+0x67a>
 8008794:	f1b9 0f00 	cmp.w	r9, #0
 8008798:	d005      	beq.n	80087a6 <_dtoa_r+0x91e>
 800879a:	45b1      	cmp	r9, r6
 800879c:	d003      	beq.n	80087a6 <_dtoa_r+0x91e>
 800879e:	4649      	mov	r1, r9
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fd7b 	bl	800929c <_Bfree>
 80087a6:	4631      	mov	r1, r6
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fd77 	bl	800929c <_Bfree>
 80087ae:	e6a8      	b.n	8008502 <_dtoa_r+0x67a>
 80087b0:	2700      	movs	r7, #0
 80087b2:	463e      	mov	r6, r7
 80087b4:	e7e1      	b.n	800877a <_dtoa_r+0x8f2>
 80087b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087ba:	463e      	mov	r6, r7
 80087bc:	e5a9      	b.n	8008312 <_dtoa_r+0x48a>
 80087be:	bf00      	nop
 80087c0:	40240000 	.word	0x40240000
 80087c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80fa 	beq.w	80089c4 <_dtoa_r+0xb3c>
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x958>
 80087d4:	4631      	mov	r1, r6
 80087d6:	462a      	mov	r2, r5
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 ff2b 	bl	8009634 <__lshift>
 80087de:	4606      	mov	r6, r0
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d04c      	beq.n	8008880 <_dtoa_r+0x9f8>
 80087e6:	6871      	ldr	r1, [r6, #4]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fd23 	bl	8009234 <_Balloc>
 80087ee:	6932      	ldr	r2, [r6, #16]
 80087f0:	3202      	adds	r2, #2
 80087f2:	4605      	mov	r5, r0
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	f106 010c 	add.w	r1, r6, #12
 80087fa:	300c      	adds	r0, #12
 80087fc:	f7fd fd78 	bl	80062f0 <memcpy>
 8008800:	2201      	movs	r2, #1
 8008802:	4629      	mov	r1, r5
 8008804:	4620      	mov	r0, r4
 8008806:	f000 ff15 	bl	8009634 <__lshift>
 800880a:	9b00      	ldr	r3, [sp, #0]
 800880c:	f8cd b014 	str.w	fp, [sp, #20]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	46b1      	mov	r9, r6
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	4606      	mov	r6, r0
 800881a:	4639      	mov	r1, r7
 800881c:	9804      	ldr	r0, [sp, #16]
 800881e:	f7ff faa5 	bl	8007d6c <quorem>
 8008822:	4649      	mov	r1, r9
 8008824:	4605      	mov	r5, r0
 8008826:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800882a:	9804      	ldr	r0, [sp, #16]
 800882c:	f000 ff56 	bl	80096dc <__mcmp>
 8008830:	4632      	mov	r2, r6
 8008832:	9000      	str	r0, [sp, #0]
 8008834:	4639      	mov	r1, r7
 8008836:	4620      	mov	r0, r4
 8008838:	f000 ff6a 	bl	8009710 <__mdiff>
 800883c:	68c3      	ldr	r3, [r0, #12]
 800883e:	4602      	mov	r2, r0
 8008840:	bb03      	cbnz	r3, 8008884 <_dtoa_r+0x9fc>
 8008842:	4601      	mov	r1, r0
 8008844:	9008      	str	r0, [sp, #32]
 8008846:	9804      	ldr	r0, [sp, #16]
 8008848:	f000 ff48 	bl	80096dc <__mcmp>
 800884c:	9a08      	ldr	r2, [sp, #32]
 800884e:	4603      	mov	r3, r0
 8008850:	4611      	mov	r1, r2
 8008852:	4620      	mov	r0, r4
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	f000 fd21 	bl	800929c <_Bfree>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	b9a3      	cbnz	r3, 8008888 <_dtoa_r+0xa00>
 800885e:	9a06      	ldr	r2, [sp, #24]
 8008860:	b992      	cbnz	r2, 8008888 <_dtoa_r+0xa00>
 8008862:	9a07      	ldr	r2, [sp, #28]
 8008864:	b982      	cbnz	r2, 8008888 <_dtoa_r+0xa00>
 8008866:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800886a:	d029      	beq.n	80088c0 <_dtoa_r+0xa38>
 800886c:	9b00      	ldr	r3, [sp, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd01      	ble.n	8008876 <_dtoa_r+0x9ee>
 8008872:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008876:	9b05      	ldr	r3, [sp, #20]
 8008878:	1c5d      	adds	r5, r3, #1
 800887a:	f883 8000 	strb.w	r8, [r3]
 800887e:	e782      	b.n	8008786 <_dtoa_r+0x8fe>
 8008880:	4630      	mov	r0, r6
 8008882:	e7c2      	b.n	800880a <_dtoa_r+0x982>
 8008884:	2301      	movs	r3, #1
 8008886:	e7e3      	b.n	8008850 <_dtoa_r+0x9c8>
 8008888:	9a00      	ldr	r2, [sp, #0]
 800888a:	2a00      	cmp	r2, #0
 800888c:	db04      	blt.n	8008898 <_dtoa_r+0xa10>
 800888e:	d125      	bne.n	80088dc <_dtoa_r+0xa54>
 8008890:	9a06      	ldr	r2, [sp, #24]
 8008892:	bb1a      	cbnz	r2, 80088dc <_dtoa_r+0xa54>
 8008894:	9a07      	ldr	r2, [sp, #28]
 8008896:	bb0a      	cbnz	r2, 80088dc <_dtoa_r+0xa54>
 8008898:	2b00      	cmp	r3, #0
 800889a:	ddec      	ble.n	8008876 <_dtoa_r+0x9ee>
 800889c:	2201      	movs	r2, #1
 800889e:	9904      	ldr	r1, [sp, #16]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fec7 	bl	8009634 <__lshift>
 80088a6:	4639      	mov	r1, r7
 80088a8:	9004      	str	r0, [sp, #16]
 80088aa:	f000 ff17 	bl	80096dc <__mcmp>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	dc03      	bgt.n	80088ba <_dtoa_r+0xa32>
 80088b2:	d1e0      	bne.n	8008876 <_dtoa_r+0x9ee>
 80088b4:	f018 0f01 	tst.w	r8, #1
 80088b8:	d0dd      	beq.n	8008876 <_dtoa_r+0x9ee>
 80088ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088be:	d1d8      	bne.n	8008872 <_dtoa_r+0x9ea>
 80088c0:	9b05      	ldr	r3, [sp, #20]
 80088c2:	9a05      	ldr	r2, [sp, #20]
 80088c4:	1c5d      	adds	r5, r3, #1
 80088c6:	2339      	movs	r3, #57	; 0x39
 80088c8:	7013      	strb	r3, [r2, #0]
 80088ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088ce:	2b39      	cmp	r3, #57	; 0x39
 80088d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80088d4:	d04f      	beq.n	8008976 <_dtoa_r+0xaee>
 80088d6:	3301      	adds	r3, #1
 80088d8:	7013      	strb	r3, [r2, #0]
 80088da:	e754      	b.n	8008786 <_dtoa_r+0x8fe>
 80088dc:	9a05      	ldr	r2, [sp, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f102 0501 	add.w	r5, r2, #1
 80088e4:	dd06      	ble.n	80088f4 <_dtoa_r+0xa6c>
 80088e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088ea:	d0e9      	beq.n	80088c0 <_dtoa_r+0xa38>
 80088ec:	f108 0801 	add.w	r8, r8, #1
 80088f0:	9b05      	ldr	r3, [sp, #20]
 80088f2:	e7c2      	b.n	800887a <_dtoa_r+0x9f2>
 80088f4:	9a02      	ldr	r2, [sp, #8]
 80088f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80088fa:	eba5 030b 	sub.w	r3, r5, fp
 80088fe:	4293      	cmp	r3, r2
 8008900:	d021      	beq.n	8008946 <_dtoa_r+0xabe>
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	9904      	ldr	r1, [sp, #16]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fcde 	bl	80092ca <__multadd>
 800890e:	45b1      	cmp	r9, r6
 8008910:	9004      	str	r0, [sp, #16]
 8008912:	f04f 0300 	mov.w	r3, #0
 8008916:	f04f 020a 	mov.w	r2, #10
 800891a:	4649      	mov	r1, r9
 800891c:	4620      	mov	r0, r4
 800891e:	d105      	bne.n	800892c <_dtoa_r+0xaa4>
 8008920:	f000 fcd3 	bl	80092ca <__multadd>
 8008924:	4681      	mov	r9, r0
 8008926:	4606      	mov	r6, r0
 8008928:	9505      	str	r5, [sp, #20]
 800892a:	e776      	b.n	800881a <_dtoa_r+0x992>
 800892c:	f000 fccd 	bl	80092ca <__multadd>
 8008930:	4631      	mov	r1, r6
 8008932:	4681      	mov	r9, r0
 8008934:	2300      	movs	r3, #0
 8008936:	220a      	movs	r2, #10
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fcc6 	bl	80092ca <__multadd>
 800893e:	4606      	mov	r6, r0
 8008940:	e7f2      	b.n	8008928 <_dtoa_r+0xaa0>
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	2201      	movs	r2, #1
 8008948:	9904      	ldr	r1, [sp, #16]
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fe72 	bl	8009634 <__lshift>
 8008950:	4639      	mov	r1, r7
 8008952:	9004      	str	r0, [sp, #16]
 8008954:	f000 fec2 	bl	80096dc <__mcmp>
 8008958:	2800      	cmp	r0, #0
 800895a:	dcb6      	bgt.n	80088ca <_dtoa_r+0xa42>
 800895c:	d102      	bne.n	8008964 <_dtoa_r+0xadc>
 800895e:	f018 0f01 	tst.w	r8, #1
 8008962:	d1b2      	bne.n	80088ca <_dtoa_r+0xa42>
 8008964:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008968:	2b30      	cmp	r3, #48	; 0x30
 800896a:	f105 32ff 	add.w	r2, r5, #4294967295
 800896e:	f47f af0a 	bne.w	8008786 <_dtoa_r+0x8fe>
 8008972:	4615      	mov	r5, r2
 8008974:	e7f6      	b.n	8008964 <_dtoa_r+0xadc>
 8008976:	4593      	cmp	fp, r2
 8008978:	d105      	bne.n	8008986 <_dtoa_r+0xafe>
 800897a:	2331      	movs	r3, #49	; 0x31
 800897c:	f10a 0a01 	add.w	sl, sl, #1
 8008980:	f88b 3000 	strb.w	r3, [fp]
 8008984:	e6ff      	b.n	8008786 <_dtoa_r+0x8fe>
 8008986:	4615      	mov	r5, r2
 8008988:	e79f      	b.n	80088ca <_dtoa_r+0xa42>
 800898a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80089f0 <_dtoa_r+0xb68>
 800898e:	e007      	b.n	80089a0 <_dtoa_r+0xb18>
 8008990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008992:	f8df b060 	ldr.w	fp, [pc, #96]	; 80089f4 <_dtoa_r+0xb6c>
 8008996:	b11b      	cbz	r3, 80089a0 <_dtoa_r+0xb18>
 8008998:	f10b 0308 	add.w	r3, fp, #8
 800899c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	4658      	mov	r0, fp
 80089a2:	b017      	add	sp, #92	; 0x5c
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	f77f ae35 	ble.w	800861a <_dtoa_r+0x792>
 80089b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	e649      	b.n	800864a <_dtoa_r+0x7c2>
 80089b6:	9b02      	ldr	r3, [sp, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dc03      	bgt.n	80089c4 <_dtoa_r+0xb3c>
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	f73f aecc 	bgt.w	800875c <_dtoa_r+0x8d4>
 80089c4:	465d      	mov	r5, fp
 80089c6:	4639      	mov	r1, r7
 80089c8:	9804      	ldr	r0, [sp, #16]
 80089ca:	f7ff f9cf 	bl	8007d6c <quorem>
 80089ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089d2:	f805 8b01 	strb.w	r8, [r5], #1
 80089d6:	9a02      	ldr	r2, [sp, #8]
 80089d8:	eba5 030b 	sub.w	r3, r5, fp
 80089dc:	429a      	cmp	r2, r3
 80089de:	ddb0      	ble.n	8008942 <_dtoa_r+0xaba>
 80089e0:	2300      	movs	r3, #0
 80089e2:	220a      	movs	r2, #10
 80089e4:	9904      	ldr	r1, [sp, #16]
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fc6f 	bl	80092ca <__multadd>
 80089ec:	9004      	str	r0, [sp, #16]
 80089ee:	e7ea      	b.n	80089c6 <_dtoa_r+0xb3e>
 80089f0:	0800a764 	.word	0x0800a764
 80089f4:	0800a7e0 	.word	0x0800a7e0

080089f8 <std>:
 80089f8:	2300      	movs	r3, #0
 80089fa:	b510      	push	{r4, lr}
 80089fc:	4604      	mov	r4, r0
 80089fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008a02:	6083      	str	r3, [r0, #8]
 8008a04:	8181      	strh	r1, [r0, #12]
 8008a06:	6643      	str	r3, [r0, #100]	; 0x64
 8008a08:	81c2      	strh	r2, [r0, #14]
 8008a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a0e:	6183      	str	r3, [r0, #24]
 8008a10:	4619      	mov	r1, r3
 8008a12:	2208      	movs	r2, #8
 8008a14:	305c      	adds	r0, #92	; 0x5c
 8008a16:	f7fd fc76 	bl	8006306 <memset>
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <std+0x38>)
 8008a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <std+0x3c>)
 8008a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <std+0x40>)
 8008a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <std+0x44>)
 8008a28:	6224      	str	r4, [r4, #32]
 8008a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800a0e5 	.word	0x0800a0e5
 8008a34:	0800a107 	.word	0x0800a107
 8008a38:	0800a13f 	.word	0x0800a13f
 8008a3c:	0800a163 	.word	0x0800a163

08008a40 <_cleanup_r>:
 8008a40:	4901      	ldr	r1, [pc, #4]	; (8008a48 <_cleanup_r+0x8>)
 8008a42:	f000 b885 	b.w	8008b50 <_fwalk_reent>
 8008a46:	bf00      	nop
 8008a48:	0800a47d 	.word	0x0800a47d

08008a4c <__sfmoreglue>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	1e4a      	subs	r2, r1, #1
 8008a50:	2568      	movs	r5, #104	; 0x68
 8008a52:	4355      	muls	r5, r2
 8008a54:	460e      	mov	r6, r1
 8008a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a5a:	f001 f847 	bl	8009aec <_malloc_r>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	b140      	cbz	r0, 8008a74 <__sfmoreglue+0x28>
 8008a62:	2100      	movs	r1, #0
 8008a64:	e9c0 1600 	strd	r1, r6, [r0]
 8008a68:	300c      	adds	r0, #12
 8008a6a:	60a0      	str	r0, [r4, #8]
 8008a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a70:	f7fd fc49 	bl	8006306 <memset>
 8008a74:	4620      	mov	r0, r4
 8008a76:	bd70      	pop	{r4, r5, r6, pc}

08008a78 <__sinit>:
 8008a78:	6983      	ldr	r3, [r0, #24]
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	bb33      	cbnz	r3, 8008ace <__sinit+0x56>
 8008a80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a84:	6503      	str	r3, [r0, #80]	; 0x50
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <__sinit+0x58>)
 8008a88:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <__sinit+0x5c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6282      	str	r2, [r0, #40]	; 0x28
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	bf04      	itt	eq
 8008a92:	2301      	moveq	r3, #1
 8008a94:	6183      	streq	r3, [r0, #24]
 8008a96:	f000 f81f 	bl	8008ad8 <__sfp>
 8008a9a:	6060      	str	r0, [r4, #4]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 f81b 	bl	8008ad8 <__sfp>
 8008aa2:	60a0      	str	r0, [r4, #8]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 f817 	bl	8008ad8 <__sfp>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	60e0      	str	r0, [r4, #12]
 8008aae:	2104      	movs	r1, #4
 8008ab0:	6860      	ldr	r0, [r4, #4]
 8008ab2:	f7ff ffa1 	bl	80089f8 <std>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	2109      	movs	r1, #9
 8008aba:	68a0      	ldr	r0, [r4, #8]
 8008abc:	f7ff ff9c 	bl	80089f8 <std>
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	68e0      	ldr	r0, [r4, #12]
 8008ac6:	f7ff ff97 	bl	80089f8 <std>
 8008aca:	2301      	movs	r3, #1
 8008acc:	61a3      	str	r3, [r4, #24]
 8008ace:	bd10      	pop	{r4, pc}
 8008ad0:	0800a750 	.word	0x0800a750
 8008ad4:	08008a41 	.word	0x08008a41

08008ad8 <__sfp>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4b1b      	ldr	r3, [pc, #108]	; (8008b48 <__sfp+0x70>)
 8008adc:	681e      	ldr	r6, [r3, #0]
 8008ade:	69b3      	ldr	r3, [r6, #24]
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	b913      	cbnz	r3, 8008aea <__sfp+0x12>
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f7ff ffc7 	bl	8008a78 <__sinit>
 8008aea:	3648      	adds	r6, #72	; 0x48
 8008aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	d503      	bpl.n	8008afc <__sfp+0x24>
 8008af4:	6833      	ldr	r3, [r6, #0]
 8008af6:	b133      	cbz	r3, 8008b06 <__sfp+0x2e>
 8008af8:	6836      	ldr	r6, [r6, #0]
 8008afa:	e7f7      	b.n	8008aec <__sfp+0x14>
 8008afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b00:	b16d      	cbz	r5, 8008b1e <__sfp+0x46>
 8008b02:	3468      	adds	r4, #104	; 0x68
 8008b04:	e7f4      	b.n	8008af0 <__sfp+0x18>
 8008b06:	2104      	movs	r1, #4
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff ff9f 	bl	8008a4c <__sfmoreglue>
 8008b0e:	6030      	str	r0, [r6, #0]
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d1f1      	bne.n	8008af8 <__sfp+0x20>
 8008b14:	230c      	movs	r3, #12
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	4604      	mov	r4, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1e:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <__sfp+0x74>)
 8008b20:	6665      	str	r5, [r4, #100]	; 0x64
 8008b22:	e9c4 5500 	strd	r5, r5, [r4]
 8008b26:	60a5      	str	r5, [r4, #8]
 8008b28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b30:	2208      	movs	r2, #8
 8008b32:	4629      	mov	r1, r5
 8008b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b38:	f7fd fbe5 	bl	8006306 <memset>
 8008b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b44:	e7e9      	b.n	8008b1a <__sfp+0x42>
 8008b46:	bf00      	nop
 8008b48:	0800a750 	.word	0x0800a750
 8008b4c:	ffff0001 	.word	0xffff0001

08008b50 <_fwalk_reent>:
 8008b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	b914      	cbnz	r4, 8008b66 <_fwalk_reent+0x16>
 8008b60:	4630      	mov	r0, r6
 8008b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b6a:	3f01      	subs	r7, #1
 8008b6c:	d501      	bpl.n	8008b72 <_fwalk_reent+0x22>
 8008b6e:	6824      	ldr	r4, [r4, #0]
 8008b70:	e7f5      	b.n	8008b5e <_fwalk_reent+0xe>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d907      	bls.n	8008b88 <_fwalk_reent+0x38>
 8008b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	d003      	beq.n	8008b88 <_fwalk_reent+0x38>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4640      	mov	r0, r8
 8008b84:	47c8      	blx	r9
 8008b86:	4306      	orrs	r6, r0
 8008b88:	3568      	adds	r5, #104	; 0x68
 8008b8a:	e7ee      	b.n	8008b6a <_fwalk_reent+0x1a>

08008b8c <rshift>:
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	6906      	ldr	r6, [r0, #16]
 8008b90:	114b      	asrs	r3, r1, #5
 8008b92:	429e      	cmp	r6, r3
 8008b94:	f100 0414 	add.w	r4, r0, #20
 8008b98:	dd30      	ble.n	8008bfc <rshift+0x70>
 8008b9a:	f011 011f 	ands.w	r1, r1, #31
 8008b9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ba2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ba6:	d108      	bne.n	8008bba <rshift+0x2e>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	42b2      	cmp	r2, r6
 8008bac:	460b      	mov	r3, r1
 8008bae:	d211      	bcs.n	8008bd4 <rshift+0x48>
 8008bb0:	f852 3b04 	ldr.w	r3, [r2], #4
 8008bb4:	f841 3b04 	str.w	r3, [r1], #4
 8008bb8:	e7f7      	b.n	8008baa <rshift+0x1e>
 8008bba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008bbe:	f1c1 0c20 	rsb	ip, r1, #32
 8008bc2:	40cd      	lsrs	r5, r1
 8008bc4:	3204      	adds	r2, #4
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	42b2      	cmp	r2, r6
 8008bca:	4617      	mov	r7, r2
 8008bcc:	d30c      	bcc.n	8008be8 <rshift+0x5c>
 8008bce:	601d      	str	r5, [r3, #0]
 8008bd0:	b105      	cbz	r5, 8008bd4 <rshift+0x48>
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	1b1a      	subs	r2, r3, r4
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bdc:	bf08      	it	eq
 8008bde:	2300      	moveq	r3, #0
 8008be0:	6102      	str	r2, [r0, #16]
 8008be2:	bf08      	it	eq
 8008be4:	6143      	streq	r3, [r0, #20]
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	683f      	ldr	r7, [r7, #0]
 8008bea:	fa07 f70c 	lsl.w	r7, r7, ip
 8008bee:	433d      	orrs	r5, r7
 8008bf0:	f843 5b04 	str.w	r5, [r3], #4
 8008bf4:	f852 5b04 	ldr.w	r5, [r2], #4
 8008bf8:	40cd      	lsrs	r5, r1
 8008bfa:	e7e5      	b.n	8008bc8 <rshift+0x3c>
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	e7e9      	b.n	8008bd4 <rshift+0x48>

08008c00 <__hexdig_fun>:
 8008c00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c04:	2b09      	cmp	r3, #9
 8008c06:	d802      	bhi.n	8008c0e <__hexdig_fun+0xe>
 8008c08:	3820      	subs	r0, #32
 8008c0a:	b2c0      	uxtb	r0, r0
 8008c0c:	4770      	bx	lr
 8008c0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d801      	bhi.n	8008c1a <__hexdig_fun+0x1a>
 8008c16:	3847      	subs	r0, #71	; 0x47
 8008c18:	e7f7      	b.n	8008c0a <__hexdig_fun+0xa>
 8008c1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d801      	bhi.n	8008c26 <__hexdig_fun+0x26>
 8008c22:	3827      	subs	r0, #39	; 0x27
 8008c24:	e7f1      	b.n	8008c0a <__hexdig_fun+0xa>
 8008c26:	2000      	movs	r0, #0
 8008c28:	4770      	bx	lr

08008c2a <__gethex>:
 8008c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2e:	b08b      	sub	sp, #44	; 0x2c
 8008c30:	468a      	mov	sl, r1
 8008c32:	9002      	str	r0, [sp, #8]
 8008c34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008c36:	9306      	str	r3, [sp, #24]
 8008c38:	4690      	mov	r8, r2
 8008c3a:	f000 fad0 	bl	80091de <__localeconv_l>
 8008c3e:	6803      	ldr	r3, [r0, #0]
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 facc 	bl	80001e0 <strlen>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	9001      	str	r0, [sp, #4]
 8008c4c:	4403      	add	r3, r0
 8008c4e:	f04f 0b00 	mov.w	fp, #0
 8008c52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	f8da 3000 	ldr.w	r3, [sl]
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	461f      	mov	r7, r3
 8008c60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c64:	2830      	cmp	r0, #48	; 0x30
 8008c66:	d06c      	beq.n	8008d42 <__gethex+0x118>
 8008c68:	f7ff ffca 	bl	8008c00 <__hexdig_fun>
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d16a      	bne.n	8008d48 <__gethex+0x11e>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	9903      	ldr	r1, [sp, #12]
 8008c76:	4638      	mov	r0, r7
 8008c78:	f001 fa77 	bl	800a16a <strncmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d166      	bne.n	8008d4e <__gethex+0x124>
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	5cf8      	ldrb	r0, [r7, r3]
 8008c84:	18fe      	adds	r6, r7, r3
 8008c86:	f7ff ffbb 	bl	8008c00 <__hexdig_fun>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d062      	beq.n	8008d54 <__gethex+0x12a>
 8008c8e:	4633      	mov	r3, r6
 8008c90:	7818      	ldrb	r0, [r3, #0]
 8008c92:	2830      	cmp	r0, #48	; 0x30
 8008c94:	461f      	mov	r7, r3
 8008c96:	f103 0301 	add.w	r3, r3, #1
 8008c9a:	d0f9      	beq.n	8008c90 <__gethex+0x66>
 8008c9c:	f7ff ffb0 	bl	8008c00 <__hexdig_fun>
 8008ca0:	fab0 f580 	clz	r5, r0
 8008ca4:	096d      	lsrs	r5, r5, #5
 8008ca6:	4634      	mov	r4, r6
 8008ca8:	f04f 0b01 	mov.w	fp, #1
 8008cac:	463a      	mov	r2, r7
 8008cae:	4616      	mov	r6, r2
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	7830      	ldrb	r0, [r6, #0]
 8008cb4:	f7ff ffa4 	bl	8008c00 <__hexdig_fun>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d1f8      	bne.n	8008cae <__gethex+0x84>
 8008cbc:	9a01      	ldr	r2, [sp, #4]
 8008cbe:	9903      	ldr	r1, [sp, #12]
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f001 fa52 	bl	800a16a <strncmp>
 8008cc6:	b950      	cbnz	r0, 8008cde <__gethex+0xb4>
 8008cc8:	b954      	cbnz	r4, 8008ce0 <__gethex+0xb6>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	18f4      	adds	r4, r6, r3
 8008cce:	4622      	mov	r2, r4
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	7830      	ldrb	r0, [r6, #0]
 8008cd6:	f7ff ff93 	bl	8008c00 <__hexdig_fun>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1f8      	bne.n	8008cd0 <__gethex+0xa6>
 8008cde:	b10c      	cbz	r4, 8008ce4 <__gethex+0xba>
 8008ce0:	1ba4      	subs	r4, r4, r6
 8008ce2:	00a4      	lsls	r4, r4, #2
 8008ce4:	7833      	ldrb	r3, [r6, #0]
 8008ce6:	2b50      	cmp	r3, #80	; 0x50
 8008ce8:	d001      	beq.n	8008cee <__gethex+0xc4>
 8008cea:	2b70      	cmp	r3, #112	; 0x70
 8008cec:	d140      	bne.n	8008d70 <__gethex+0x146>
 8008cee:	7873      	ldrb	r3, [r6, #1]
 8008cf0:	2b2b      	cmp	r3, #43	; 0x2b
 8008cf2:	d031      	beq.n	8008d58 <__gethex+0x12e>
 8008cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8008cf6:	d033      	beq.n	8008d60 <__gethex+0x136>
 8008cf8:	1c71      	adds	r1, r6, #1
 8008cfa:	f04f 0900 	mov.w	r9, #0
 8008cfe:	7808      	ldrb	r0, [r1, #0]
 8008d00:	f7ff ff7e 	bl	8008c00 <__hexdig_fun>
 8008d04:	1e43      	subs	r3, r0, #1
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b18      	cmp	r3, #24
 8008d0a:	d831      	bhi.n	8008d70 <__gethex+0x146>
 8008d0c:	f1a0 0210 	sub.w	r2, r0, #16
 8008d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d14:	f7ff ff74 	bl	8008c00 <__hexdig_fun>
 8008d18:	1e43      	subs	r3, r0, #1
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b18      	cmp	r3, #24
 8008d1e:	d922      	bls.n	8008d66 <__gethex+0x13c>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	d000      	beq.n	8008d28 <__gethex+0xfe>
 8008d26:	4252      	negs	r2, r2
 8008d28:	4414      	add	r4, r2
 8008d2a:	f8ca 1000 	str.w	r1, [sl]
 8008d2e:	b30d      	cbz	r5, 8008d74 <__gethex+0x14a>
 8008d30:	f1bb 0f00 	cmp.w	fp, #0
 8008d34:	bf0c      	ite	eq
 8008d36:	2706      	moveq	r7, #6
 8008d38:	2700      	movne	r7, #0
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	b00b      	add	sp, #44	; 0x2c
 8008d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d42:	f10b 0b01 	add.w	fp, fp, #1
 8008d46:	e78a      	b.n	8008c5e <__gethex+0x34>
 8008d48:	2500      	movs	r5, #0
 8008d4a:	462c      	mov	r4, r5
 8008d4c:	e7ae      	b.n	8008cac <__gethex+0x82>
 8008d4e:	463e      	mov	r6, r7
 8008d50:	2501      	movs	r5, #1
 8008d52:	e7c7      	b.n	8008ce4 <__gethex+0xba>
 8008d54:	4604      	mov	r4, r0
 8008d56:	e7fb      	b.n	8008d50 <__gethex+0x126>
 8008d58:	f04f 0900 	mov.w	r9, #0
 8008d5c:	1cb1      	adds	r1, r6, #2
 8008d5e:	e7ce      	b.n	8008cfe <__gethex+0xd4>
 8008d60:	f04f 0901 	mov.w	r9, #1
 8008d64:	e7fa      	b.n	8008d5c <__gethex+0x132>
 8008d66:	230a      	movs	r3, #10
 8008d68:	fb03 0202 	mla	r2, r3, r2, r0
 8008d6c:	3a10      	subs	r2, #16
 8008d6e:	e7cf      	b.n	8008d10 <__gethex+0xe6>
 8008d70:	4631      	mov	r1, r6
 8008d72:	e7da      	b.n	8008d2a <__gethex+0x100>
 8008d74:	1bf3      	subs	r3, r6, r7
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4629      	mov	r1, r5
 8008d7a:	2b07      	cmp	r3, #7
 8008d7c:	dc49      	bgt.n	8008e12 <__gethex+0x1e8>
 8008d7e:	9802      	ldr	r0, [sp, #8]
 8008d80:	f000 fa58 	bl	8009234 <_Balloc>
 8008d84:	9b01      	ldr	r3, [sp, #4]
 8008d86:	f100 0914 	add.w	r9, r0, #20
 8008d8a:	f04f 0b00 	mov.w	fp, #0
 8008d8e:	f1c3 0301 	rsb	r3, r3, #1
 8008d92:	4605      	mov	r5, r0
 8008d94:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d98:	46da      	mov	sl, fp
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	42b7      	cmp	r7, r6
 8008d9e:	d33b      	bcc.n	8008e18 <__gethex+0x1ee>
 8008da0:	9804      	ldr	r0, [sp, #16]
 8008da2:	f840 ab04 	str.w	sl, [r0], #4
 8008da6:	eba0 0009 	sub.w	r0, r0, r9
 8008daa:	1080      	asrs	r0, r0, #2
 8008dac:	6128      	str	r0, [r5, #16]
 8008dae:	0147      	lsls	r7, r0, #5
 8008db0:	4650      	mov	r0, sl
 8008db2:	f000 fb03 	bl	80093bc <__hi0bits>
 8008db6:	f8d8 6000 	ldr.w	r6, [r8]
 8008dba:	1a3f      	subs	r7, r7, r0
 8008dbc:	42b7      	cmp	r7, r6
 8008dbe:	dd64      	ble.n	8008e8a <__gethex+0x260>
 8008dc0:	1bbf      	subs	r7, r7, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 fe13 	bl	80099f0 <__any_on>
 8008dca:	4682      	mov	sl, r0
 8008dcc:	b178      	cbz	r0, 8008dee <__gethex+0x1c4>
 8008dce:	1e7b      	subs	r3, r7, #1
 8008dd0:	1159      	asrs	r1, r3, #5
 8008dd2:	f003 021f 	and.w	r2, r3, #31
 8008dd6:	f04f 0a01 	mov.w	sl, #1
 8008dda:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dde:	fa0a f202 	lsl.w	r2, sl, r2
 8008de2:	420a      	tst	r2, r1
 8008de4:	d003      	beq.n	8008dee <__gethex+0x1c4>
 8008de6:	4553      	cmp	r3, sl
 8008de8:	dc46      	bgt.n	8008e78 <__gethex+0x24e>
 8008dea:	f04f 0a02 	mov.w	sl, #2
 8008dee:	4639      	mov	r1, r7
 8008df0:	4628      	mov	r0, r5
 8008df2:	f7ff fecb 	bl	8008b8c <rshift>
 8008df6:	443c      	add	r4, r7
 8008df8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	da52      	bge.n	8008ea6 <__gethex+0x27c>
 8008e00:	4629      	mov	r1, r5
 8008e02:	9802      	ldr	r0, [sp, #8]
 8008e04:	f000 fa4a 	bl	800929c <_Bfree>
 8008e08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	27a3      	movs	r7, #163	; 0xa3
 8008e10:	e793      	b.n	8008d3a <__gethex+0x110>
 8008e12:	3101      	adds	r1, #1
 8008e14:	105b      	asrs	r3, r3, #1
 8008e16:	e7b0      	b.n	8008d7a <__gethex+0x150>
 8008e18:	1e73      	subs	r3, r6, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	9a07      	ldr	r2, [sp, #28]
 8008e1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d018      	beq.n	8008e58 <__gethex+0x22e>
 8008e26:	f1bb 0f20 	cmp.w	fp, #32
 8008e2a:	d107      	bne.n	8008e3c <__gethex+0x212>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	f8c3 a000 	str.w	sl, [r3]
 8008e32:	3304      	adds	r3, #4
 8008e34:	f04f 0a00 	mov.w	sl, #0
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	46d3      	mov	fp, sl
 8008e3c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e40:	f7ff fede 	bl	8008c00 <__hexdig_fun>
 8008e44:	f000 000f 	and.w	r0, r0, #15
 8008e48:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e50:	f10b 0b04 	add.w	fp, fp, #4
 8008e54:	9b05      	ldr	r3, [sp, #20]
 8008e56:	e00d      	b.n	8008e74 <__gethex+0x24a>
 8008e58:	9b05      	ldr	r3, [sp, #20]
 8008e5a:	9a08      	ldr	r2, [sp, #32]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	42bb      	cmp	r3, r7
 8008e60:	d3e1      	bcc.n	8008e26 <__gethex+0x1fc>
 8008e62:	4618      	mov	r0, r3
 8008e64:	9a01      	ldr	r2, [sp, #4]
 8008e66:	9903      	ldr	r1, [sp, #12]
 8008e68:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6a:	f001 f97e 	bl	800a16a <strncmp>
 8008e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d1d8      	bne.n	8008e26 <__gethex+0x1fc>
 8008e74:	461e      	mov	r6, r3
 8008e76:	e791      	b.n	8008d9c <__gethex+0x172>
 8008e78:	1eb9      	subs	r1, r7, #2
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 fdb8 	bl	80099f0 <__any_on>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d0b2      	beq.n	8008dea <__gethex+0x1c0>
 8008e84:	f04f 0a03 	mov.w	sl, #3
 8008e88:	e7b1      	b.n	8008dee <__gethex+0x1c4>
 8008e8a:	da09      	bge.n	8008ea0 <__gethex+0x276>
 8008e8c:	1bf7      	subs	r7, r6, r7
 8008e8e:	4629      	mov	r1, r5
 8008e90:	463a      	mov	r2, r7
 8008e92:	9802      	ldr	r0, [sp, #8]
 8008e94:	f000 fbce 	bl	8009634 <__lshift>
 8008e98:	1be4      	subs	r4, r4, r7
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	f100 0914 	add.w	r9, r0, #20
 8008ea0:	f04f 0a00 	mov.w	sl, #0
 8008ea4:	e7a8      	b.n	8008df8 <__gethex+0x1ce>
 8008ea6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008eaa:	42a0      	cmp	r0, r4
 8008eac:	dd6a      	ble.n	8008f84 <__gethex+0x35a>
 8008eae:	1b04      	subs	r4, r0, r4
 8008eb0:	42a6      	cmp	r6, r4
 8008eb2:	dc2e      	bgt.n	8008f12 <__gethex+0x2e8>
 8008eb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d022      	beq.n	8008f02 <__gethex+0x2d8>
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d024      	beq.n	8008f0a <__gethex+0x2e0>
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d115      	bne.n	8008ef0 <__gethex+0x2c6>
 8008ec4:	42a6      	cmp	r6, r4
 8008ec6:	d113      	bne.n	8008ef0 <__gethex+0x2c6>
 8008ec8:	2e01      	cmp	r6, #1
 8008eca:	dc0b      	bgt.n	8008ee4 <__gethex+0x2ba>
 8008ecc:	9a06      	ldr	r2, [sp, #24]
 8008ece:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	612b      	str	r3, [r5, #16]
 8008ed8:	f8c9 3000 	str.w	r3, [r9]
 8008edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ede:	2762      	movs	r7, #98	; 0x62
 8008ee0:	601d      	str	r5, [r3, #0]
 8008ee2:	e72a      	b.n	8008d3a <__gethex+0x110>
 8008ee4:	1e71      	subs	r1, r6, #1
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fd82 	bl	80099f0 <__any_on>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1ed      	bne.n	8008ecc <__gethex+0x2a2>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	9802      	ldr	r0, [sp, #8]
 8008ef4:	f000 f9d2 	bl	800929c <_Bfree>
 8008ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008efa:	2300      	movs	r3, #0
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	2750      	movs	r7, #80	; 0x50
 8008f00:	e71b      	b.n	8008d3a <__gethex+0x110>
 8008f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0e1      	beq.n	8008ecc <__gethex+0x2a2>
 8008f08:	e7f2      	b.n	8008ef0 <__gethex+0x2c6>
 8008f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1dd      	bne.n	8008ecc <__gethex+0x2a2>
 8008f10:	e7ee      	b.n	8008ef0 <__gethex+0x2c6>
 8008f12:	1e67      	subs	r7, r4, #1
 8008f14:	f1ba 0f00 	cmp.w	sl, #0
 8008f18:	d131      	bne.n	8008f7e <__gethex+0x354>
 8008f1a:	b127      	cbz	r7, 8008f26 <__gethex+0x2fc>
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 fd66 	bl	80099f0 <__any_on>
 8008f24:	4682      	mov	sl, r0
 8008f26:	117a      	asrs	r2, r7, #5
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f007 071f 	and.w	r7, r7, #31
 8008f2e:	fa03 f707 	lsl.w	r7, r3, r7
 8008f32:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008f36:	4621      	mov	r1, r4
 8008f38:	421f      	tst	r7, r3
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	bf18      	it	ne
 8008f3e:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f42:	1b36      	subs	r6, r6, r4
 8008f44:	f7ff fe22 	bl	8008b8c <rshift>
 8008f48:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008f4c:	2702      	movs	r7, #2
 8008f4e:	f1ba 0f00 	cmp.w	sl, #0
 8008f52:	d048      	beq.n	8008fe6 <__gethex+0x3bc>
 8008f54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d015      	beq.n	8008f88 <__gethex+0x35e>
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d017      	beq.n	8008f90 <__gethex+0x366>
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d109      	bne.n	8008f78 <__gethex+0x34e>
 8008f64:	f01a 0f02 	tst.w	sl, #2
 8008f68:	d006      	beq.n	8008f78 <__gethex+0x34e>
 8008f6a:	f8d9 3000 	ldr.w	r3, [r9]
 8008f6e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008f72:	f01a 0f01 	tst.w	sl, #1
 8008f76:	d10e      	bne.n	8008f96 <__gethex+0x36c>
 8008f78:	f047 0710 	orr.w	r7, r7, #16
 8008f7c:	e033      	b.n	8008fe6 <__gethex+0x3bc>
 8008f7e:	f04f 0a01 	mov.w	sl, #1
 8008f82:	e7d0      	b.n	8008f26 <__gethex+0x2fc>
 8008f84:	2701      	movs	r7, #1
 8008f86:	e7e2      	b.n	8008f4e <__gethex+0x324>
 8008f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f8a:	f1c3 0301 	rsb	r3, r3, #1
 8008f8e:	9315      	str	r3, [sp, #84]	; 0x54
 8008f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <__gethex+0x34e>
 8008f96:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008f9a:	f105 0314 	add.w	r3, r5, #20
 8008f9e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008fa2:	eb03 010a 	add.w	r1, r3, sl
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fb4:	d01c      	beq.n	8008ff0 <__gethex+0x3c6>
 8008fb6:	3201      	adds	r2, #1
 8008fb8:	6002      	str	r2, [r0, #0]
 8008fba:	2f02      	cmp	r7, #2
 8008fbc:	f105 0314 	add.w	r3, r5, #20
 8008fc0:	d138      	bne.n	8009034 <__gethex+0x40a>
 8008fc2:	f8d8 2000 	ldr.w	r2, [r8]
 8008fc6:	3a01      	subs	r2, #1
 8008fc8:	42b2      	cmp	r2, r6
 8008fca:	d10a      	bne.n	8008fe2 <__gethex+0x3b8>
 8008fcc:	1171      	asrs	r1, r6, #5
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f006 061f 	and.w	r6, r6, #31
 8008fd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fd8:	fa02 f606 	lsl.w	r6, r2, r6
 8008fdc:	421e      	tst	r6, r3
 8008fde:	bf18      	it	ne
 8008fe0:	4617      	movne	r7, r2
 8008fe2:	f047 0720 	orr.w	r7, r7, #32
 8008fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fe8:	601d      	str	r5, [r3, #0]
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	601c      	str	r4, [r3, #0]
 8008fee:	e6a4      	b.n	8008d3a <__gethex+0x110>
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ff6:	d8d8      	bhi.n	8008faa <__gethex+0x380>
 8008ff8:	68ab      	ldr	r3, [r5, #8]
 8008ffa:	4599      	cmp	r9, r3
 8008ffc:	db12      	blt.n	8009024 <__gethex+0x3fa>
 8008ffe:	6869      	ldr	r1, [r5, #4]
 8009000:	9802      	ldr	r0, [sp, #8]
 8009002:	3101      	adds	r1, #1
 8009004:	f000 f916 	bl	8009234 <_Balloc>
 8009008:	692a      	ldr	r2, [r5, #16]
 800900a:	3202      	adds	r2, #2
 800900c:	f105 010c 	add.w	r1, r5, #12
 8009010:	4683      	mov	fp, r0
 8009012:	0092      	lsls	r2, r2, #2
 8009014:	300c      	adds	r0, #12
 8009016:	f7fd f96b 	bl	80062f0 <memcpy>
 800901a:	4629      	mov	r1, r5
 800901c:	9802      	ldr	r0, [sp, #8]
 800901e:	f000 f93d 	bl	800929c <_Bfree>
 8009022:	465d      	mov	r5, fp
 8009024:	692b      	ldr	r3, [r5, #16]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800902c:	612a      	str	r2, [r5, #16]
 800902e:	2201      	movs	r2, #1
 8009030:	615a      	str	r2, [r3, #20]
 8009032:	e7c2      	b.n	8008fba <__gethex+0x390>
 8009034:	692a      	ldr	r2, [r5, #16]
 8009036:	454a      	cmp	r2, r9
 8009038:	dd0b      	ble.n	8009052 <__gethex+0x428>
 800903a:	2101      	movs	r1, #1
 800903c:	4628      	mov	r0, r5
 800903e:	f7ff fda5 	bl	8008b8c <rshift>
 8009042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009046:	3401      	adds	r4, #1
 8009048:	42a3      	cmp	r3, r4
 800904a:	f6ff aed9 	blt.w	8008e00 <__gethex+0x1d6>
 800904e:	2701      	movs	r7, #1
 8009050:	e7c7      	b.n	8008fe2 <__gethex+0x3b8>
 8009052:	f016 061f 	ands.w	r6, r6, #31
 8009056:	d0fa      	beq.n	800904e <__gethex+0x424>
 8009058:	449a      	add	sl, r3
 800905a:	f1c6 0620 	rsb	r6, r6, #32
 800905e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009062:	f000 f9ab 	bl	80093bc <__hi0bits>
 8009066:	42b0      	cmp	r0, r6
 8009068:	dbe7      	blt.n	800903a <__gethex+0x410>
 800906a:	e7f0      	b.n	800904e <__gethex+0x424>

0800906c <L_shift>:
 800906c:	f1c2 0208 	rsb	r2, r2, #8
 8009070:	0092      	lsls	r2, r2, #2
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	f1c2 0620 	rsb	r6, r2, #32
 8009078:	6843      	ldr	r3, [r0, #4]
 800907a:	6804      	ldr	r4, [r0, #0]
 800907c:	fa03 f506 	lsl.w	r5, r3, r6
 8009080:	432c      	orrs	r4, r5
 8009082:	40d3      	lsrs	r3, r2
 8009084:	6004      	str	r4, [r0, #0]
 8009086:	f840 3f04 	str.w	r3, [r0, #4]!
 800908a:	4288      	cmp	r0, r1
 800908c:	d3f4      	bcc.n	8009078 <L_shift+0xc>
 800908e:	bd70      	pop	{r4, r5, r6, pc}

08009090 <__match>:
 8009090:	b530      	push	{r4, r5, lr}
 8009092:	6803      	ldr	r3, [r0, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909a:	b914      	cbnz	r4, 80090a2 <__match+0x12>
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	2001      	movs	r0, #1
 80090a0:	bd30      	pop	{r4, r5, pc}
 80090a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090aa:	2d19      	cmp	r5, #25
 80090ac:	bf98      	it	ls
 80090ae:	3220      	addls	r2, #32
 80090b0:	42a2      	cmp	r2, r4
 80090b2:	d0f0      	beq.n	8009096 <__match+0x6>
 80090b4:	2000      	movs	r0, #0
 80090b6:	e7f3      	b.n	80090a0 <__match+0x10>

080090b8 <__hexnan>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	680b      	ldr	r3, [r1, #0]
 80090be:	6801      	ldr	r1, [r0, #0]
 80090c0:	115f      	asrs	r7, r3, #5
 80090c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80090c6:	f013 031f 	ands.w	r3, r3, #31
 80090ca:	b087      	sub	sp, #28
 80090cc:	bf18      	it	ne
 80090ce:	3704      	addne	r7, #4
 80090d0:	2500      	movs	r5, #0
 80090d2:	1f3e      	subs	r6, r7, #4
 80090d4:	4682      	mov	sl, r0
 80090d6:	4690      	mov	r8, r2
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f847 5c04 	str.w	r5, [r7, #-4]
 80090de:	46b1      	mov	r9, r6
 80090e0:	4634      	mov	r4, r6
 80090e2:	9502      	str	r5, [sp, #8]
 80090e4:	46ab      	mov	fp, r5
 80090e6:	784a      	ldrb	r2, [r1, #1]
 80090e8:	1c4b      	adds	r3, r1, #1
 80090ea:	9303      	str	r3, [sp, #12]
 80090ec:	b342      	cbz	r2, 8009140 <__hexnan+0x88>
 80090ee:	4610      	mov	r0, r2
 80090f0:	9105      	str	r1, [sp, #20]
 80090f2:	9204      	str	r2, [sp, #16]
 80090f4:	f7ff fd84 	bl	8008c00 <__hexdig_fun>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d143      	bne.n	8009184 <__hexnan+0xcc>
 80090fc:	9a04      	ldr	r2, [sp, #16]
 80090fe:	9905      	ldr	r1, [sp, #20]
 8009100:	2a20      	cmp	r2, #32
 8009102:	d818      	bhi.n	8009136 <__hexnan+0x7e>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	459b      	cmp	fp, r3
 8009108:	dd13      	ble.n	8009132 <__hexnan+0x7a>
 800910a:	454c      	cmp	r4, r9
 800910c:	d206      	bcs.n	800911c <__hexnan+0x64>
 800910e:	2d07      	cmp	r5, #7
 8009110:	dc04      	bgt.n	800911c <__hexnan+0x64>
 8009112:	462a      	mov	r2, r5
 8009114:	4649      	mov	r1, r9
 8009116:	4620      	mov	r0, r4
 8009118:	f7ff ffa8 	bl	800906c <L_shift>
 800911c:	4544      	cmp	r4, r8
 800911e:	d944      	bls.n	80091aa <__hexnan+0xf2>
 8009120:	2300      	movs	r3, #0
 8009122:	f1a4 0904 	sub.w	r9, r4, #4
 8009126:	f844 3c04 	str.w	r3, [r4, #-4]
 800912a:	f8cd b008 	str.w	fp, [sp, #8]
 800912e:	464c      	mov	r4, r9
 8009130:	461d      	mov	r5, r3
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	e7d7      	b.n	80090e6 <__hexnan+0x2e>
 8009136:	2a29      	cmp	r2, #41	; 0x29
 8009138:	d14a      	bne.n	80091d0 <__hexnan+0x118>
 800913a:	3102      	adds	r1, #2
 800913c:	f8ca 1000 	str.w	r1, [sl]
 8009140:	f1bb 0f00 	cmp.w	fp, #0
 8009144:	d044      	beq.n	80091d0 <__hexnan+0x118>
 8009146:	454c      	cmp	r4, r9
 8009148:	d206      	bcs.n	8009158 <__hexnan+0xa0>
 800914a:	2d07      	cmp	r5, #7
 800914c:	dc04      	bgt.n	8009158 <__hexnan+0xa0>
 800914e:	462a      	mov	r2, r5
 8009150:	4649      	mov	r1, r9
 8009152:	4620      	mov	r0, r4
 8009154:	f7ff ff8a 	bl	800906c <L_shift>
 8009158:	4544      	cmp	r4, r8
 800915a:	d928      	bls.n	80091ae <__hexnan+0xf6>
 800915c:	4643      	mov	r3, r8
 800915e:	f854 2b04 	ldr.w	r2, [r4], #4
 8009162:	f843 2b04 	str.w	r2, [r3], #4
 8009166:	42a6      	cmp	r6, r4
 8009168:	d2f9      	bcs.n	800915e <__hexnan+0xa6>
 800916a:	2200      	movs	r2, #0
 800916c:	f843 2b04 	str.w	r2, [r3], #4
 8009170:	429e      	cmp	r6, r3
 8009172:	d2fb      	bcs.n	800916c <__hexnan+0xb4>
 8009174:	6833      	ldr	r3, [r6, #0]
 8009176:	b91b      	cbnz	r3, 8009180 <__hexnan+0xc8>
 8009178:	4546      	cmp	r6, r8
 800917a:	d127      	bne.n	80091cc <__hexnan+0x114>
 800917c:	2301      	movs	r3, #1
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	2005      	movs	r0, #5
 8009182:	e026      	b.n	80091d2 <__hexnan+0x11a>
 8009184:	3501      	adds	r5, #1
 8009186:	2d08      	cmp	r5, #8
 8009188:	f10b 0b01 	add.w	fp, fp, #1
 800918c:	dd06      	ble.n	800919c <__hexnan+0xe4>
 800918e:	4544      	cmp	r4, r8
 8009190:	d9cf      	bls.n	8009132 <__hexnan+0x7a>
 8009192:	2300      	movs	r3, #0
 8009194:	f844 3c04 	str.w	r3, [r4, #-4]
 8009198:	2501      	movs	r5, #1
 800919a:	3c04      	subs	r4, #4
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	f000 000f 	and.w	r0, r0, #15
 80091a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	e7c3      	b.n	8009132 <__hexnan+0x7a>
 80091aa:	2508      	movs	r5, #8
 80091ac:	e7c1      	b.n	8009132 <__hexnan+0x7a>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0df      	beq.n	8009174 <__hexnan+0xbc>
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	f1c3 0320 	rsb	r3, r3, #32
 80091bc:	fa22 f303 	lsr.w	r3, r2, r3
 80091c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80091c4:	401a      	ands	r2, r3
 80091c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80091ca:	e7d3      	b.n	8009174 <__hexnan+0xbc>
 80091cc:	3e04      	subs	r6, #4
 80091ce:	e7d1      	b.n	8009174 <__hexnan+0xbc>
 80091d0:	2004      	movs	r0, #4
 80091d2:	b007      	add	sp, #28
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d8 <__locale_ctype_ptr_l>:
 80091d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80091dc:	4770      	bx	lr

080091de <__localeconv_l>:
 80091de:	30f0      	adds	r0, #240	; 0xf0
 80091e0:	4770      	bx	lr
	...

080091e4 <_localeconv_r>:
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <_localeconv_r+0x14>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6a18      	ldr	r0, [r3, #32]
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <_localeconv_r+0x18>)
 80091ec:	2800      	cmp	r0, #0
 80091ee:	bf08      	it	eq
 80091f0:	4618      	moveq	r0, r3
 80091f2:	30f0      	adds	r0, #240	; 0xf0
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	2000000c 	.word	0x2000000c
 80091fc:	20000070 	.word	0x20000070

08009200 <malloc>:
 8009200:	4b02      	ldr	r3, [pc, #8]	; (800920c <malloc+0xc>)
 8009202:	4601      	mov	r1, r0
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	f000 bc71 	b.w	8009aec <_malloc_r>
 800920a:	bf00      	nop
 800920c:	2000000c 	.word	0x2000000c

08009210 <__ascii_mbtowc>:
 8009210:	b082      	sub	sp, #8
 8009212:	b901      	cbnz	r1, 8009216 <__ascii_mbtowc+0x6>
 8009214:	a901      	add	r1, sp, #4
 8009216:	b142      	cbz	r2, 800922a <__ascii_mbtowc+0x1a>
 8009218:	b14b      	cbz	r3, 800922e <__ascii_mbtowc+0x1e>
 800921a:	7813      	ldrb	r3, [r2, #0]
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	1c10      	adds	r0, r2, #0
 8009222:	bf18      	it	ne
 8009224:	2001      	movne	r0, #1
 8009226:	b002      	add	sp, #8
 8009228:	4770      	bx	lr
 800922a:	4610      	mov	r0, r2
 800922c:	e7fb      	b.n	8009226 <__ascii_mbtowc+0x16>
 800922e:	f06f 0001 	mvn.w	r0, #1
 8009232:	e7f8      	b.n	8009226 <__ascii_mbtowc+0x16>

08009234 <_Balloc>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009238:	4604      	mov	r4, r0
 800923a:	460e      	mov	r6, r1
 800923c:	b93d      	cbnz	r5, 800924e <_Balloc+0x1a>
 800923e:	2010      	movs	r0, #16
 8009240:	f7ff ffde 	bl	8009200 <malloc>
 8009244:	6260      	str	r0, [r4, #36]	; 0x24
 8009246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800924a:	6005      	str	r5, [r0, #0]
 800924c:	60c5      	str	r5, [r0, #12]
 800924e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009250:	68eb      	ldr	r3, [r5, #12]
 8009252:	b183      	cbz	r3, 8009276 <_Balloc+0x42>
 8009254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800925c:	b9b8      	cbnz	r0, 800928e <_Balloc+0x5a>
 800925e:	2101      	movs	r1, #1
 8009260:	fa01 f506 	lsl.w	r5, r1, r6
 8009264:	1d6a      	adds	r2, r5, #5
 8009266:	0092      	lsls	r2, r2, #2
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fbe2 	bl	8009a32 <_calloc_r>
 800926e:	b160      	cbz	r0, 800928a <_Balloc+0x56>
 8009270:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009274:	e00e      	b.n	8009294 <_Balloc+0x60>
 8009276:	2221      	movs	r2, #33	; 0x21
 8009278:	2104      	movs	r1, #4
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fbd9 	bl	8009a32 <_calloc_r>
 8009280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009282:	60e8      	str	r0, [r5, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e4      	bne.n	8009254 <_Balloc+0x20>
 800928a:	2000      	movs	r0, #0
 800928c:	bd70      	pop	{r4, r5, r6, pc}
 800928e:	6802      	ldr	r2, [r0, #0]
 8009290:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009294:	2300      	movs	r3, #0
 8009296:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800929a:	e7f7      	b.n	800928c <_Balloc+0x58>

0800929c <_Bfree>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092a0:	4606      	mov	r6, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	b93c      	cbnz	r4, 80092b6 <_Bfree+0x1a>
 80092a6:	2010      	movs	r0, #16
 80092a8:	f7ff ffaa 	bl	8009200 <malloc>
 80092ac:	6270      	str	r0, [r6, #36]	; 0x24
 80092ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b2:	6004      	str	r4, [r0, #0]
 80092b4:	60c4      	str	r4, [r0, #12]
 80092b6:	b13d      	cbz	r5, 80092c8 <_Bfree+0x2c>
 80092b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092ba:	686a      	ldr	r2, [r5, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092c2:	6029      	str	r1, [r5, #0]
 80092c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80092c8:	bd70      	pop	{r4, r5, r6, pc}

080092ca <__multadd>:
 80092ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ce:	690d      	ldr	r5, [r1, #16]
 80092d0:	461f      	mov	r7, r3
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	f101 0c14 	add.w	ip, r1, #20
 80092da:	2300      	movs	r3, #0
 80092dc:	f8dc 0000 	ldr.w	r0, [ip]
 80092e0:	b281      	uxth	r1, r0
 80092e2:	fb02 7101 	mla	r1, r2, r1, r7
 80092e6:	0c0f      	lsrs	r7, r1, #16
 80092e8:	0c00      	lsrs	r0, r0, #16
 80092ea:	fb02 7000 	mla	r0, r2, r0, r7
 80092ee:	b289      	uxth	r1, r1
 80092f0:	3301      	adds	r3, #1
 80092f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80092f6:	429d      	cmp	r5, r3
 80092f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80092fc:	f84c 1b04 	str.w	r1, [ip], #4
 8009300:	dcec      	bgt.n	80092dc <__multadd+0x12>
 8009302:	b1d7      	cbz	r7, 800933a <__multadd+0x70>
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	42ab      	cmp	r3, r5
 8009308:	dc12      	bgt.n	8009330 <__multadd+0x66>
 800930a:	6861      	ldr	r1, [r4, #4]
 800930c:	4630      	mov	r0, r6
 800930e:	3101      	adds	r1, #1
 8009310:	f7ff ff90 	bl	8009234 <_Balloc>
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	3202      	adds	r2, #2
 8009318:	f104 010c 	add.w	r1, r4, #12
 800931c:	4680      	mov	r8, r0
 800931e:	0092      	lsls	r2, r2, #2
 8009320:	300c      	adds	r0, #12
 8009322:	f7fc ffe5 	bl	80062f0 <memcpy>
 8009326:	4621      	mov	r1, r4
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff ffb7 	bl	800929c <_Bfree>
 800932e:	4644      	mov	r4, r8
 8009330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009334:	3501      	adds	r5, #1
 8009336:	615f      	str	r7, [r3, #20]
 8009338:	6125      	str	r5, [r4, #16]
 800933a:	4620      	mov	r0, r4
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009340 <__s2b>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	460c      	mov	r4, r1
 8009346:	4615      	mov	r5, r2
 8009348:	461f      	mov	r7, r3
 800934a:	2209      	movs	r2, #9
 800934c:	3308      	adds	r3, #8
 800934e:	4606      	mov	r6, r0
 8009350:	fb93 f3f2 	sdiv	r3, r3, r2
 8009354:	2100      	movs	r1, #0
 8009356:	2201      	movs	r2, #1
 8009358:	429a      	cmp	r2, r3
 800935a:	db20      	blt.n	800939e <__s2b+0x5e>
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff ff69 	bl	8009234 <_Balloc>
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	6143      	str	r3, [r0, #20]
 8009366:	2d09      	cmp	r5, #9
 8009368:	f04f 0301 	mov.w	r3, #1
 800936c:	6103      	str	r3, [r0, #16]
 800936e:	dd19      	ble.n	80093a4 <__s2b+0x64>
 8009370:	f104 0809 	add.w	r8, r4, #9
 8009374:	46c1      	mov	r9, r8
 8009376:	442c      	add	r4, r5
 8009378:	f819 3b01 	ldrb.w	r3, [r9], #1
 800937c:	4601      	mov	r1, r0
 800937e:	3b30      	subs	r3, #48	; 0x30
 8009380:	220a      	movs	r2, #10
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ffa1 	bl	80092ca <__multadd>
 8009388:	45a1      	cmp	r9, r4
 800938a:	d1f5      	bne.n	8009378 <__s2b+0x38>
 800938c:	eb08 0405 	add.w	r4, r8, r5
 8009390:	3c08      	subs	r4, #8
 8009392:	1b2d      	subs	r5, r5, r4
 8009394:	1963      	adds	r3, r4, r5
 8009396:	42bb      	cmp	r3, r7
 8009398:	db07      	blt.n	80093aa <__s2b+0x6a>
 800939a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800939e:	0052      	lsls	r2, r2, #1
 80093a0:	3101      	adds	r1, #1
 80093a2:	e7d9      	b.n	8009358 <__s2b+0x18>
 80093a4:	340a      	adds	r4, #10
 80093a6:	2509      	movs	r5, #9
 80093a8:	e7f3      	b.n	8009392 <__s2b+0x52>
 80093aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ae:	4601      	mov	r1, r0
 80093b0:	3b30      	subs	r3, #48	; 0x30
 80093b2:	220a      	movs	r2, #10
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff ff88 	bl	80092ca <__multadd>
 80093ba:	e7eb      	b.n	8009394 <__s2b+0x54>

080093bc <__hi0bits>:
 80093bc:	0c02      	lsrs	r2, r0, #16
 80093be:	0412      	lsls	r2, r2, #16
 80093c0:	4603      	mov	r3, r0
 80093c2:	b9b2      	cbnz	r2, 80093f2 <__hi0bits+0x36>
 80093c4:	0403      	lsls	r3, r0, #16
 80093c6:	2010      	movs	r0, #16
 80093c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093cc:	bf04      	itt	eq
 80093ce:	021b      	lsleq	r3, r3, #8
 80093d0:	3008      	addeq	r0, #8
 80093d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093d6:	bf04      	itt	eq
 80093d8:	011b      	lsleq	r3, r3, #4
 80093da:	3004      	addeq	r0, #4
 80093dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093e0:	bf04      	itt	eq
 80093e2:	009b      	lsleq	r3, r3, #2
 80093e4:	3002      	addeq	r0, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	db06      	blt.n	80093f8 <__hi0bits+0x3c>
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	d503      	bpl.n	80093f6 <__hi0bits+0x3a>
 80093ee:	3001      	adds	r0, #1
 80093f0:	4770      	bx	lr
 80093f2:	2000      	movs	r0, #0
 80093f4:	e7e8      	b.n	80093c8 <__hi0bits+0xc>
 80093f6:	2020      	movs	r0, #32
 80093f8:	4770      	bx	lr

080093fa <__lo0bits>:
 80093fa:	6803      	ldr	r3, [r0, #0]
 80093fc:	f013 0207 	ands.w	r2, r3, #7
 8009400:	4601      	mov	r1, r0
 8009402:	d00b      	beq.n	800941c <__lo0bits+0x22>
 8009404:	07da      	lsls	r2, r3, #31
 8009406:	d423      	bmi.n	8009450 <__lo0bits+0x56>
 8009408:	0798      	lsls	r0, r3, #30
 800940a:	bf49      	itett	mi
 800940c:	085b      	lsrmi	r3, r3, #1
 800940e:	089b      	lsrpl	r3, r3, #2
 8009410:	2001      	movmi	r0, #1
 8009412:	600b      	strmi	r3, [r1, #0]
 8009414:	bf5c      	itt	pl
 8009416:	600b      	strpl	r3, [r1, #0]
 8009418:	2002      	movpl	r0, #2
 800941a:	4770      	bx	lr
 800941c:	b298      	uxth	r0, r3
 800941e:	b9a8      	cbnz	r0, 800944c <__lo0bits+0x52>
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	2010      	movs	r0, #16
 8009424:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009428:	bf04      	itt	eq
 800942a:	0a1b      	lsreq	r3, r3, #8
 800942c:	3008      	addeq	r0, #8
 800942e:	071a      	lsls	r2, r3, #28
 8009430:	bf04      	itt	eq
 8009432:	091b      	lsreq	r3, r3, #4
 8009434:	3004      	addeq	r0, #4
 8009436:	079a      	lsls	r2, r3, #30
 8009438:	bf04      	itt	eq
 800943a:	089b      	lsreq	r3, r3, #2
 800943c:	3002      	addeq	r0, #2
 800943e:	07da      	lsls	r2, r3, #31
 8009440:	d402      	bmi.n	8009448 <__lo0bits+0x4e>
 8009442:	085b      	lsrs	r3, r3, #1
 8009444:	d006      	beq.n	8009454 <__lo0bits+0x5a>
 8009446:	3001      	adds	r0, #1
 8009448:	600b      	str	r3, [r1, #0]
 800944a:	4770      	bx	lr
 800944c:	4610      	mov	r0, r2
 800944e:	e7e9      	b.n	8009424 <__lo0bits+0x2a>
 8009450:	2000      	movs	r0, #0
 8009452:	4770      	bx	lr
 8009454:	2020      	movs	r0, #32
 8009456:	4770      	bx	lr

08009458 <__i2b>:
 8009458:	b510      	push	{r4, lr}
 800945a:	460c      	mov	r4, r1
 800945c:	2101      	movs	r1, #1
 800945e:	f7ff fee9 	bl	8009234 <_Balloc>
 8009462:	2201      	movs	r2, #1
 8009464:	6144      	str	r4, [r0, #20]
 8009466:	6102      	str	r2, [r0, #16]
 8009468:	bd10      	pop	{r4, pc}

0800946a <__multiply>:
 800946a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946e:	4614      	mov	r4, r2
 8009470:	690a      	ldr	r2, [r1, #16]
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	429a      	cmp	r2, r3
 8009476:	bfb8      	it	lt
 8009478:	460b      	movlt	r3, r1
 800947a:	4688      	mov	r8, r1
 800947c:	bfbc      	itt	lt
 800947e:	46a0      	movlt	r8, r4
 8009480:	461c      	movlt	r4, r3
 8009482:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009486:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800948a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800948e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009492:	eb07 0609 	add.w	r6, r7, r9
 8009496:	42b3      	cmp	r3, r6
 8009498:	bfb8      	it	lt
 800949a:	3101      	addlt	r1, #1
 800949c:	f7ff feca 	bl	8009234 <_Balloc>
 80094a0:	f100 0514 	add.w	r5, r0, #20
 80094a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80094a8:	462b      	mov	r3, r5
 80094aa:	2200      	movs	r2, #0
 80094ac:	4573      	cmp	r3, lr
 80094ae:	d316      	bcc.n	80094de <__multiply+0x74>
 80094b0:	f104 0214 	add.w	r2, r4, #20
 80094b4:	f108 0114 	add.w	r1, r8, #20
 80094b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80094bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	9201      	str	r2, [sp, #4]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d80c      	bhi.n	80094e4 <__multiply+0x7a>
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	dd03      	ble.n	80094d6 <__multiply+0x6c>
 80094ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d05d      	beq.n	8009592 <__multiply+0x128>
 80094d6:	6106      	str	r6, [r0, #16]
 80094d8:	b003      	add	sp, #12
 80094da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094de:	f843 2b04 	str.w	r2, [r3], #4
 80094e2:	e7e3      	b.n	80094ac <__multiply+0x42>
 80094e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80094e8:	f1bb 0f00 	cmp.w	fp, #0
 80094ec:	d023      	beq.n	8009536 <__multiply+0xcc>
 80094ee:	4689      	mov	r9, r1
 80094f0:	46ac      	mov	ip, r5
 80094f2:	f04f 0800 	mov.w	r8, #0
 80094f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80094fa:	f8dc a000 	ldr.w	sl, [ip]
 80094fe:	b2a3      	uxth	r3, r4
 8009500:	fa1f fa8a 	uxth.w	sl, sl
 8009504:	fb0b a303 	mla	r3, fp, r3, sl
 8009508:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800950c:	f8dc 4000 	ldr.w	r4, [ip]
 8009510:	4443      	add	r3, r8
 8009512:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009516:	fb0b 840a 	mla	r4, fp, sl, r8
 800951a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800951e:	46e2      	mov	sl, ip
 8009520:	b29b      	uxth	r3, r3
 8009522:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009526:	454f      	cmp	r7, r9
 8009528:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800952c:	f84a 3b04 	str.w	r3, [sl], #4
 8009530:	d82b      	bhi.n	800958a <__multiply+0x120>
 8009532:	f8cc 8004 	str.w	r8, [ip, #4]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800953c:	3204      	adds	r2, #4
 800953e:	f1ba 0f00 	cmp.w	sl, #0
 8009542:	d020      	beq.n	8009586 <__multiply+0x11c>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	4689      	mov	r9, r1
 8009548:	46a8      	mov	r8, r5
 800954a:	f04f 0b00 	mov.w	fp, #0
 800954e:	f8b9 c000 	ldrh.w	ip, [r9]
 8009552:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009556:	fb0a 440c 	mla	r4, sl, ip, r4
 800955a:	445c      	add	r4, fp
 800955c:	46c4      	mov	ip, r8
 800955e:	b29b      	uxth	r3, r3
 8009560:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009564:	f84c 3b04 	str.w	r3, [ip], #4
 8009568:	f859 3b04 	ldr.w	r3, [r9], #4
 800956c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	fb0a b303 	mla	r3, sl, r3, fp
 8009576:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800957a:	454f      	cmp	r7, r9
 800957c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009580:	d805      	bhi.n	800958e <__multiply+0x124>
 8009582:	f8c8 3004 	str.w	r3, [r8, #4]
 8009586:	3504      	adds	r5, #4
 8009588:	e79b      	b.n	80094c2 <__multiply+0x58>
 800958a:	46d4      	mov	ip, sl
 800958c:	e7b3      	b.n	80094f6 <__multiply+0x8c>
 800958e:	46e0      	mov	r8, ip
 8009590:	e7dd      	b.n	800954e <__multiply+0xe4>
 8009592:	3e01      	subs	r6, #1
 8009594:	e799      	b.n	80094ca <__multiply+0x60>
	...

08009598 <__pow5mult>:
 8009598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4615      	mov	r5, r2
 800959e:	f012 0203 	ands.w	r2, r2, #3
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	d007      	beq.n	80095b8 <__pow5mult+0x20>
 80095a8:	3a01      	subs	r2, #1
 80095aa:	4c21      	ldr	r4, [pc, #132]	; (8009630 <__pow5mult+0x98>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095b2:	f7ff fe8a 	bl	80092ca <__multadd>
 80095b6:	4607      	mov	r7, r0
 80095b8:	10ad      	asrs	r5, r5, #2
 80095ba:	d035      	beq.n	8009628 <__pow5mult+0x90>
 80095bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095be:	b93c      	cbnz	r4, 80095d0 <__pow5mult+0x38>
 80095c0:	2010      	movs	r0, #16
 80095c2:	f7ff fe1d 	bl	8009200 <malloc>
 80095c6:	6270      	str	r0, [r6, #36]	; 0x24
 80095c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095cc:	6004      	str	r4, [r0, #0]
 80095ce:	60c4      	str	r4, [r0, #12]
 80095d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095d8:	b94c      	cbnz	r4, 80095ee <__pow5mult+0x56>
 80095da:	f240 2171 	movw	r1, #625	; 0x271
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff ff3a 	bl	8009458 <__i2b>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095ea:	4604      	mov	r4, r0
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	07eb      	lsls	r3, r5, #31
 80095f4:	d50a      	bpl.n	800960c <__pow5mult+0x74>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4622      	mov	r2, r4
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ff35 	bl	800946a <__multiply>
 8009600:	4639      	mov	r1, r7
 8009602:	4681      	mov	r9, r0
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fe49 	bl	800929c <_Bfree>
 800960a:	464f      	mov	r7, r9
 800960c:	106d      	asrs	r5, r5, #1
 800960e:	d00b      	beq.n	8009628 <__pow5mult+0x90>
 8009610:	6820      	ldr	r0, [r4, #0]
 8009612:	b938      	cbnz	r0, 8009624 <__pow5mult+0x8c>
 8009614:	4622      	mov	r2, r4
 8009616:	4621      	mov	r1, r4
 8009618:	4630      	mov	r0, r6
 800961a:	f7ff ff26 	bl	800946a <__multiply>
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	f8c0 8000 	str.w	r8, [r0]
 8009624:	4604      	mov	r4, r0
 8009626:	e7e4      	b.n	80095f2 <__pow5mult+0x5a>
 8009628:	4638      	mov	r0, r7
 800962a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962e:	bf00      	nop
 8009630:	0800a950 	.word	0x0800a950

08009634 <__lshift>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	460c      	mov	r4, r1
 800963a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	6849      	ldr	r1, [r1, #4]
 8009642:	eb0a 0903 	add.w	r9, sl, r3
 8009646:	68a3      	ldr	r3, [r4, #8]
 8009648:	4607      	mov	r7, r0
 800964a:	4616      	mov	r6, r2
 800964c:	f109 0501 	add.w	r5, r9, #1
 8009650:	42ab      	cmp	r3, r5
 8009652:	db32      	blt.n	80096ba <__lshift+0x86>
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff fded 	bl	8009234 <_Balloc>
 800965a:	2300      	movs	r3, #0
 800965c:	4680      	mov	r8, r0
 800965e:	f100 0114 	add.w	r1, r0, #20
 8009662:	461a      	mov	r2, r3
 8009664:	4553      	cmp	r3, sl
 8009666:	db2b      	blt.n	80096c0 <__lshift+0x8c>
 8009668:	6920      	ldr	r0, [r4, #16]
 800966a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800966e:	f104 0314 	add.w	r3, r4, #20
 8009672:	f016 021f 	ands.w	r2, r6, #31
 8009676:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800967a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800967e:	d025      	beq.n	80096cc <__lshift+0x98>
 8009680:	f1c2 0e20 	rsb	lr, r2, #32
 8009684:	2000      	movs	r0, #0
 8009686:	681e      	ldr	r6, [r3, #0]
 8009688:	468a      	mov	sl, r1
 800968a:	4096      	lsls	r6, r2
 800968c:	4330      	orrs	r0, r6
 800968e:	f84a 0b04 	str.w	r0, [sl], #4
 8009692:	f853 0b04 	ldr.w	r0, [r3], #4
 8009696:	459c      	cmp	ip, r3
 8009698:	fa20 f00e 	lsr.w	r0, r0, lr
 800969c:	d814      	bhi.n	80096c8 <__lshift+0x94>
 800969e:	6048      	str	r0, [r1, #4]
 80096a0:	b108      	cbz	r0, 80096a6 <__lshift+0x72>
 80096a2:	f109 0502 	add.w	r5, r9, #2
 80096a6:	3d01      	subs	r5, #1
 80096a8:	4638      	mov	r0, r7
 80096aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80096ae:	4621      	mov	r1, r4
 80096b0:	f7ff fdf4 	bl	800929c <_Bfree>
 80096b4:	4640      	mov	r0, r8
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	3101      	adds	r1, #1
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	e7c7      	b.n	8009650 <__lshift+0x1c>
 80096c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80096c4:	3301      	adds	r3, #1
 80096c6:	e7cd      	b.n	8009664 <__lshift+0x30>
 80096c8:	4651      	mov	r1, sl
 80096ca:	e7dc      	b.n	8009686 <__lshift+0x52>
 80096cc:	3904      	subs	r1, #4
 80096ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80096d6:	459c      	cmp	ip, r3
 80096d8:	d8f9      	bhi.n	80096ce <__lshift+0x9a>
 80096da:	e7e4      	b.n	80096a6 <__lshift+0x72>

080096dc <__mcmp>:
 80096dc:	6903      	ldr	r3, [r0, #16]
 80096de:	690a      	ldr	r2, [r1, #16]
 80096e0:	1a9b      	subs	r3, r3, r2
 80096e2:	b530      	push	{r4, r5, lr}
 80096e4:	d10c      	bne.n	8009700 <__mcmp+0x24>
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	3014      	adds	r0, #20
 80096ea:	3114      	adds	r1, #20
 80096ec:	1884      	adds	r4, r0, r2
 80096ee:	4411      	add	r1, r2
 80096f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096f8:	4295      	cmp	r5, r2
 80096fa:	d003      	beq.n	8009704 <__mcmp+0x28>
 80096fc:	d305      	bcc.n	800970a <__mcmp+0x2e>
 80096fe:	2301      	movs	r3, #1
 8009700:	4618      	mov	r0, r3
 8009702:	bd30      	pop	{r4, r5, pc}
 8009704:	42a0      	cmp	r0, r4
 8009706:	d3f3      	bcc.n	80096f0 <__mcmp+0x14>
 8009708:	e7fa      	b.n	8009700 <__mcmp+0x24>
 800970a:	f04f 33ff 	mov.w	r3, #4294967295
 800970e:	e7f7      	b.n	8009700 <__mcmp+0x24>

08009710 <__mdiff>:
 8009710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	460d      	mov	r5, r1
 8009716:	4607      	mov	r7, r0
 8009718:	4611      	mov	r1, r2
 800971a:	4628      	mov	r0, r5
 800971c:	4614      	mov	r4, r2
 800971e:	f7ff ffdd 	bl	80096dc <__mcmp>
 8009722:	1e06      	subs	r6, r0, #0
 8009724:	d108      	bne.n	8009738 <__mdiff+0x28>
 8009726:	4631      	mov	r1, r6
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff fd83 	bl	8009234 <_Balloc>
 800972e:	2301      	movs	r3, #1
 8009730:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	bfa4      	itt	ge
 800973a:	4623      	movge	r3, r4
 800973c:	462c      	movge	r4, r5
 800973e:	4638      	mov	r0, r7
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	bfa6      	itte	ge
 8009744:	461d      	movge	r5, r3
 8009746:	2600      	movge	r6, #0
 8009748:	2601      	movlt	r6, #1
 800974a:	f7ff fd73 	bl	8009234 <_Balloc>
 800974e:	692b      	ldr	r3, [r5, #16]
 8009750:	60c6      	str	r6, [r0, #12]
 8009752:	6926      	ldr	r6, [r4, #16]
 8009754:	f105 0914 	add.w	r9, r5, #20
 8009758:	f104 0214 	add.w	r2, r4, #20
 800975c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009760:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009764:	f100 0514 	add.w	r5, r0, #20
 8009768:	f04f 0e00 	mov.w	lr, #0
 800976c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009770:	f859 4b04 	ldr.w	r4, [r9], #4
 8009774:	fa1e f18a 	uxtah	r1, lr, sl
 8009778:	b2a3      	uxth	r3, r4
 800977a:	1ac9      	subs	r1, r1, r3
 800977c:	0c23      	lsrs	r3, r4, #16
 800977e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009782:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009786:	b289      	uxth	r1, r1
 8009788:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800978c:	45c8      	cmp	r8, r9
 800978e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009792:	4694      	mov	ip, r2
 8009794:	f845 3b04 	str.w	r3, [r5], #4
 8009798:	d8e8      	bhi.n	800976c <__mdiff+0x5c>
 800979a:	45bc      	cmp	ip, r7
 800979c:	d304      	bcc.n	80097a8 <__mdiff+0x98>
 800979e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097a2:	b183      	cbz	r3, 80097c6 <__mdiff+0xb6>
 80097a4:	6106      	str	r6, [r0, #16]
 80097a6:	e7c5      	b.n	8009734 <__mdiff+0x24>
 80097a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097ac:	fa1e f381 	uxtah	r3, lr, r1
 80097b0:	141a      	asrs	r2, r3, #16
 80097b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80097c0:	f845 3b04 	str.w	r3, [r5], #4
 80097c4:	e7e9      	b.n	800979a <__mdiff+0x8a>
 80097c6:	3e01      	subs	r6, #1
 80097c8:	e7e9      	b.n	800979e <__mdiff+0x8e>
	...

080097cc <__ulp>:
 80097cc:	4b12      	ldr	r3, [pc, #72]	; (8009818 <__ulp+0x4c>)
 80097ce:	ee10 2a90 	vmov	r2, s1
 80097d2:	401a      	ands	r2, r3
 80097d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	dd04      	ble.n	80097e6 <__ulp+0x1a>
 80097dc:	2000      	movs	r0, #0
 80097de:	4619      	mov	r1, r3
 80097e0:	ec41 0b10 	vmov	d0, r0, r1
 80097e4:	4770      	bx	lr
 80097e6:	425b      	negs	r3, r3
 80097e8:	151b      	asrs	r3, r3, #20
 80097ea:	2b13      	cmp	r3, #19
 80097ec:	f04f 0000 	mov.w	r0, #0
 80097f0:	f04f 0100 	mov.w	r1, #0
 80097f4:	dc04      	bgt.n	8009800 <__ulp+0x34>
 80097f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80097fa:	fa42 f103 	asr.w	r1, r2, r3
 80097fe:	e7ef      	b.n	80097e0 <__ulp+0x14>
 8009800:	3b14      	subs	r3, #20
 8009802:	2b1e      	cmp	r3, #30
 8009804:	f04f 0201 	mov.w	r2, #1
 8009808:	bfda      	itte	le
 800980a:	f1c3 031f 	rsble	r3, r3, #31
 800980e:	fa02 f303 	lslle.w	r3, r2, r3
 8009812:	4613      	movgt	r3, r2
 8009814:	4618      	mov	r0, r3
 8009816:	e7e3      	b.n	80097e0 <__ulp+0x14>
 8009818:	7ff00000 	.word	0x7ff00000

0800981c <__b2d>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	6905      	ldr	r5, [r0, #16]
 8009820:	f100 0714 	add.w	r7, r0, #20
 8009824:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009828:	1f2e      	subs	r6, r5, #4
 800982a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800982e:	4620      	mov	r0, r4
 8009830:	f7ff fdc4 	bl	80093bc <__hi0bits>
 8009834:	f1c0 0320 	rsb	r3, r0, #32
 8009838:	280a      	cmp	r0, #10
 800983a:	600b      	str	r3, [r1, #0]
 800983c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80098b4 <__b2d+0x98>
 8009840:	dc14      	bgt.n	800986c <__b2d+0x50>
 8009842:	f1c0 0e0b 	rsb	lr, r0, #11
 8009846:	fa24 f10e 	lsr.w	r1, r4, lr
 800984a:	42b7      	cmp	r7, r6
 800984c:	ea41 030c 	orr.w	r3, r1, ip
 8009850:	bf34      	ite	cc
 8009852:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009856:	2100      	movcs	r1, #0
 8009858:	3015      	adds	r0, #21
 800985a:	fa04 f000 	lsl.w	r0, r4, r0
 800985e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009862:	ea40 0201 	orr.w	r2, r0, r1
 8009866:	ec43 2b10 	vmov	d0, r2, r3
 800986a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800986c:	42b7      	cmp	r7, r6
 800986e:	bf3a      	itte	cc
 8009870:	f1a5 0608 	subcc.w	r6, r5, #8
 8009874:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009878:	2100      	movcs	r1, #0
 800987a:	380b      	subs	r0, #11
 800987c:	d015      	beq.n	80098aa <__b2d+0x8e>
 800987e:	4084      	lsls	r4, r0
 8009880:	f1c0 0520 	rsb	r5, r0, #32
 8009884:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009888:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800988c:	42be      	cmp	r6, r7
 800988e:	fa21 fc05 	lsr.w	ip, r1, r5
 8009892:	ea44 030c 	orr.w	r3, r4, ip
 8009896:	bf8c      	ite	hi
 8009898:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800989c:	2400      	movls	r4, #0
 800989e:	fa01 f000 	lsl.w	r0, r1, r0
 80098a2:	40ec      	lsrs	r4, r5
 80098a4:	ea40 0204 	orr.w	r2, r0, r4
 80098a8:	e7dd      	b.n	8009866 <__b2d+0x4a>
 80098aa:	ea44 030c 	orr.w	r3, r4, ip
 80098ae:	460a      	mov	r2, r1
 80098b0:	e7d9      	b.n	8009866 <__b2d+0x4a>
 80098b2:	bf00      	nop
 80098b4:	3ff00000 	.word	0x3ff00000

080098b8 <__d2b>:
 80098b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	460e      	mov	r6, r1
 80098be:	2101      	movs	r1, #1
 80098c0:	ec59 8b10 	vmov	r8, r9, d0
 80098c4:	4615      	mov	r5, r2
 80098c6:	f7ff fcb5 	bl	8009234 <_Balloc>
 80098ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098ce:	4607      	mov	r7, r0
 80098d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098d4:	bb34      	cbnz	r4, 8009924 <__d2b+0x6c>
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	f1b8 0300 	subs.w	r3, r8, #0
 80098dc:	d027      	beq.n	800992e <__d2b+0x76>
 80098de:	a802      	add	r0, sp, #8
 80098e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80098e4:	f7ff fd89 	bl	80093fa <__lo0bits>
 80098e8:	9900      	ldr	r1, [sp, #0]
 80098ea:	b1f0      	cbz	r0, 800992a <__d2b+0x72>
 80098ec:	9a01      	ldr	r2, [sp, #4]
 80098ee:	f1c0 0320 	rsb	r3, r0, #32
 80098f2:	fa02 f303 	lsl.w	r3, r2, r3
 80098f6:	430b      	orrs	r3, r1
 80098f8:	40c2      	lsrs	r2, r0
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	9201      	str	r2, [sp, #4]
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	bf14      	ite	ne
 8009906:	2102      	movne	r1, #2
 8009908:	2101      	moveq	r1, #1
 800990a:	6139      	str	r1, [r7, #16]
 800990c:	b1c4      	cbz	r4, 8009940 <__d2b+0x88>
 800990e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009912:	4404      	add	r4, r0
 8009914:	6034      	str	r4, [r6, #0]
 8009916:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800991a:	6028      	str	r0, [r5, #0]
 800991c:	4638      	mov	r0, r7
 800991e:	b003      	add	sp, #12
 8009920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009928:	e7d5      	b.n	80098d6 <__d2b+0x1e>
 800992a:	6179      	str	r1, [r7, #20]
 800992c:	e7e7      	b.n	80098fe <__d2b+0x46>
 800992e:	a801      	add	r0, sp, #4
 8009930:	f7ff fd63 	bl	80093fa <__lo0bits>
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	2101      	movs	r1, #1
 800993a:	6139      	str	r1, [r7, #16]
 800993c:	3020      	adds	r0, #32
 800993e:	e7e5      	b.n	800990c <__d2b+0x54>
 8009940:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009948:	6030      	str	r0, [r6, #0]
 800994a:	6918      	ldr	r0, [r3, #16]
 800994c:	f7ff fd36 	bl	80093bc <__hi0bits>
 8009950:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009954:	e7e1      	b.n	800991a <__d2b+0x62>

08009956 <__ratio>:
 8009956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	4688      	mov	r8, r1
 800995c:	4669      	mov	r1, sp
 800995e:	4681      	mov	r9, r0
 8009960:	f7ff ff5c 	bl	800981c <__b2d>
 8009964:	a901      	add	r1, sp, #4
 8009966:	4640      	mov	r0, r8
 8009968:	ec57 6b10 	vmov	r6, r7, d0
 800996c:	f7ff ff56 	bl	800981c <__b2d>
 8009970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009974:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009978:	eba3 0c02 	sub.w	ip, r3, r2
 800997c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009986:	ec5b ab10 	vmov	sl, fp, d0
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfce      	itee	gt
 800998e:	463a      	movgt	r2, r7
 8009990:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009994:	465a      	movle	r2, fp
 8009996:	4659      	mov	r1, fp
 8009998:	463d      	mov	r5, r7
 800999a:	bfd4      	ite	le
 800999c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80099a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80099a4:	4630      	mov	r0, r6
 80099a6:	ee10 2a10 	vmov	r2, s0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f6 ff55 	bl	800085c <__aeabi_ddiv>
 80099b2:	ec41 0b10 	vmov	d0, r0, r1
 80099b6:	b003      	add	sp, #12
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099bc <__copybits>:
 80099bc:	3901      	subs	r1, #1
 80099be:	b510      	push	{r4, lr}
 80099c0:	1149      	asrs	r1, r1, #5
 80099c2:	6914      	ldr	r4, [r2, #16]
 80099c4:	3101      	adds	r1, #1
 80099c6:	f102 0314 	add.w	r3, r2, #20
 80099ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	4602      	mov	r2, r0
 80099d6:	d303      	bcc.n	80099e0 <__copybits+0x24>
 80099d8:	2300      	movs	r3, #0
 80099da:	428a      	cmp	r2, r1
 80099dc:	d305      	bcc.n	80099ea <__copybits+0x2e>
 80099de:	bd10      	pop	{r4, pc}
 80099e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e4:	f840 2b04 	str.w	r2, [r0], #4
 80099e8:	e7f3      	b.n	80099d2 <__copybits+0x16>
 80099ea:	f842 3b04 	str.w	r3, [r2], #4
 80099ee:	e7f4      	b.n	80099da <__copybits+0x1e>

080099f0 <__any_on>:
 80099f0:	f100 0214 	add.w	r2, r0, #20
 80099f4:	6900      	ldr	r0, [r0, #16]
 80099f6:	114b      	asrs	r3, r1, #5
 80099f8:	4298      	cmp	r0, r3
 80099fa:	b510      	push	{r4, lr}
 80099fc:	db11      	blt.n	8009a22 <__any_on+0x32>
 80099fe:	dd0a      	ble.n	8009a16 <__any_on+0x26>
 8009a00:	f011 011f 	ands.w	r1, r1, #31
 8009a04:	d007      	beq.n	8009a16 <__any_on+0x26>
 8009a06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a0a:	fa24 f001 	lsr.w	r0, r4, r1
 8009a0e:	fa00 f101 	lsl.w	r1, r0, r1
 8009a12:	428c      	cmp	r4, r1
 8009a14:	d10b      	bne.n	8009a2e <__any_on+0x3e>
 8009a16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d803      	bhi.n	8009a26 <__any_on+0x36>
 8009a1e:	2000      	movs	r0, #0
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	4603      	mov	r3, r0
 8009a24:	e7f7      	b.n	8009a16 <__any_on+0x26>
 8009a26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d0f5      	beq.n	8009a1a <__any_on+0x2a>
 8009a2e:	2001      	movs	r0, #1
 8009a30:	e7f6      	b.n	8009a20 <__any_on+0x30>

08009a32 <_calloc_r>:
 8009a32:	b538      	push	{r3, r4, r5, lr}
 8009a34:	fb02 f401 	mul.w	r4, r2, r1
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f000 f857 	bl	8009aec <_malloc_r>
 8009a3e:	4605      	mov	r5, r0
 8009a40:	b118      	cbz	r0, 8009a4a <_calloc_r+0x18>
 8009a42:	4622      	mov	r2, r4
 8009a44:	2100      	movs	r1, #0
 8009a46:	f7fc fc5e 	bl	8006306 <memset>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009a50 <_free_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4605      	mov	r5, r0
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d045      	beq.n	8009ae4 <_free_r+0x94>
 8009a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5c:	1f0c      	subs	r4, r1, #4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bfb8      	it	lt
 8009a62:	18e4      	addlt	r4, r4, r3
 8009a64:	f000 fdc3 	bl	800a5ee <__malloc_lock>
 8009a68:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <_free_r+0x98>)
 8009a6a:	6813      	ldr	r3, [r2, #0]
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	b933      	cbnz	r3, 8009a7e <_free_r+0x2e>
 8009a70:	6063      	str	r3, [r4, #4]
 8009a72:	6014      	str	r4, [r2, #0]
 8009a74:	4628      	mov	r0, r5
 8009a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a7a:	f000 bdb9 	b.w	800a5f0 <__malloc_unlock>
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	d90c      	bls.n	8009a9c <_free_r+0x4c>
 8009a82:	6821      	ldr	r1, [r4, #0]
 8009a84:	1862      	adds	r2, r4, r1
 8009a86:	4293      	cmp	r3, r2
 8009a88:	bf04      	itt	eq
 8009a8a:	681a      	ldreq	r2, [r3, #0]
 8009a8c:	685b      	ldreq	r3, [r3, #4]
 8009a8e:	6063      	str	r3, [r4, #4]
 8009a90:	bf04      	itt	eq
 8009a92:	1852      	addeq	r2, r2, r1
 8009a94:	6022      	streq	r2, [r4, #0]
 8009a96:	6004      	str	r4, [r0, #0]
 8009a98:	e7ec      	b.n	8009a74 <_free_r+0x24>
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_free_r+0x54>
 8009aa0:	42a2      	cmp	r2, r4
 8009aa2:	d9fa      	bls.n	8009a9a <_free_r+0x4a>
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	1858      	adds	r0, r3, r1
 8009aa8:	42a0      	cmp	r0, r4
 8009aaa:	d10b      	bne.n	8009ac4 <_free_r+0x74>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	4401      	add	r1, r0
 8009ab0:	1858      	adds	r0, r3, r1
 8009ab2:	4282      	cmp	r2, r0
 8009ab4:	6019      	str	r1, [r3, #0]
 8009ab6:	d1dd      	bne.n	8009a74 <_free_r+0x24>
 8009ab8:	6810      	ldr	r0, [r2, #0]
 8009aba:	6852      	ldr	r2, [r2, #4]
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	4401      	add	r1, r0
 8009ac0:	6019      	str	r1, [r3, #0]
 8009ac2:	e7d7      	b.n	8009a74 <_free_r+0x24>
 8009ac4:	d902      	bls.n	8009acc <_free_r+0x7c>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	602b      	str	r3, [r5, #0]
 8009aca:	e7d3      	b.n	8009a74 <_free_r+0x24>
 8009acc:	6820      	ldr	r0, [r4, #0]
 8009ace:	1821      	adds	r1, r4, r0
 8009ad0:	428a      	cmp	r2, r1
 8009ad2:	bf04      	itt	eq
 8009ad4:	6811      	ldreq	r1, [r2, #0]
 8009ad6:	6852      	ldreq	r2, [r2, #4]
 8009ad8:	6062      	str	r2, [r4, #4]
 8009ada:	bf04      	itt	eq
 8009adc:	1809      	addeq	r1, r1, r0
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	605c      	str	r4, [r3, #4]
 8009ae2:	e7c7      	b.n	8009a74 <_free_r+0x24>
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200001fc 	.word	0x200001fc

08009aec <_malloc_r>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	1ccd      	adds	r5, r1, #3
 8009af0:	f025 0503 	bic.w	r5, r5, #3
 8009af4:	3508      	adds	r5, #8
 8009af6:	2d0c      	cmp	r5, #12
 8009af8:	bf38      	it	cc
 8009afa:	250c      	movcc	r5, #12
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	4606      	mov	r6, r0
 8009b00:	db01      	blt.n	8009b06 <_malloc_r+0x1a>
 8009b02:	42a9      	cmp	r1, r5
 8009b04:	d903      	bls.n	8009b0e <_malloc_r+0x22>
 8009b06:	230c      	movs	r3, #12
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	bd70      	pop	{r4, r5, r6, pc}
 8009b0e:	f000 fd6e 	bl	800a5ee <__malloc_lock>
 8009b12:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <_malloc_r+0xac>)
 8009b14:	6814      	ldr	r4, [r2, #0]
 8009b16:	4621      	mov	r1, r4
 8009b18:	b991      	cbnz	r1, 8009b40 <_malloc_r+0x54>
 8009b1a:	4c20      	ldr	r4, [pc, #128]	; (8009b9c <_malloc_r+0xb0>)
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	b91b      	cbnz	r3, 8009b28 <_malloc_r+0x3c>
 8009b20:	4630      	mov	r0, r6
 8009b22:	f000 facf 	bl	800a0c4 <_sbrk_r>
 8009b26:	6020      	str	r0, [r4, #0]
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f000 faca 	bl	800a0c4 <_sbrk_r>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d124      	bne.n	8009b7e <_malloc_r+0x92>
 8009b34:	230c      	movs	r3, #12
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f000 fd59 	bl	800a5f0 <__malloc_unlock>
 8009b3e:	e7e4      	b.n	8009b0a <_malloc_r+0x1e>
 8009b40:	680b      	ldr	r3, [r1, #0]
 8009b42:	1b5b      	subs	r3, r3, r5
 8009b44:	d418      	bmi.n	8009b78 <_malloc_r+0x8c>
 8009b46:	2b0b      	cmp	r3, #11
 8009b48:	d90f      	bls.n	8009b6a <_malloc_r+0x7e>
 8009b4a:	600b      	str	r3, [r1, #0]
 8009b4c:	50cd      	str	r5, [r1, r3]
 8009b4e:	18cc      	adds	r4, r1, r3
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 fd4d 	bl	800a5f0 <__malloc_unlock>
 8009b56:	f104 000b 	add.w	r0, r4, #11
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	f020 0007 	bic.w	r0, r0, #7
 8009b60:	1ac3      	subs	r3, r0, r3
 8009b62:	d0d3      	beq.n	8009b0c <_malloc_r+0x20>
 8009b64:	425a      	negs	r2, r3
 8009b66:	50e2      	str	r2, [r4, r3]
 8009b68:	e7d0      	b.n	8009b0c <_malloc_r+0x20>
 8009b6a:	428c      	cmp	r4, r1
 8009b6c:	684b      	ldr	r3, [r1, #4]
 8009b6e:	bf16      	itet	ne
 8009b70:	6063      	strne	r3, [r4, #4]
 8009b72:	6013      	streq	r3, [r2, #0]
 8009b74:	460c      	movne	r4, r1
 8009b76:	e7eb      	b.n	8009b50 <_malloc_r+0x64>
 8009b78:	460c      	mov	r4, r1
 8009b7a:	6849      	ldr	r1, [r1, #4]
 8009b7c:	e7cc      	b.n	8009b18 <_malloc_r+0x2c>
 8009b7e:	1cc4      	adds	r4, r0, #3
 8009b80:	f024 0403 	bic.w	r4, r4, #3
 8009b84:	42a0      	cmp	r0, r4
 8009b86:	d005      	beq.n	8009b94 <_malloc_r+0xa8>
 8009b88:	1a21      	subs	r1, r4, r0
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 fa9a 	bl	800a0c4 <_sbrk_r>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d0cf      	beq.n	8009b34 <_malloc_r+0x48>
 8009b94:	6025      	str	r5, [r4, #0]
 8009b96:	e7db      	b.n	8009b50 <_malloc_r+0x64>
 8009b98:	200001fc 	.word	0x200001fc
 8009b9c:	20000200 	.word	0x20000200

08009ba0 <__ssputs_r>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	688e      	ldr	r6, [r1, #8]
 8009ba6:	429e      	cmp	r6, r3
 8009ba8:	4682      	mov	sl, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4690      	mov	r8, r2
 8009bae:	4699      	mov	r9, r3
 8009bb0:	d837      	bhi.n	8009c22 <__ssputs_r+0x82>
 8009bb2:	898a      	ldrh	r2, [r1, #12]
 8009bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bb8:	d031      	beq.n	8009c1e <__ssputs_r+0x7e>
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	6909      	ldr	r1, [r1, #16]
 8009bbe:	1a6f      	subs	r7, r5, r1
 8009bc0:	6965      	ldr	r5, [r4, #20]
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009bcc:	f109 0301 	add.w	r3, r9, #1
 8009bd0:	443b      	add	r3, r7
 8009bd2:	429d      	cmp	r5, r3
 8009bd4:	bf38      	it	cc
 8009bd6:	461d      	movcc	r5, r3
 8009bd8:	0553      	lsls	r3, r2, #21
 8009bda:	d530      	bpl.n	8009c3e <__ssputs_r+0x9e>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7ff ff85 	bl	8009aec <_malloc_r>
 8009be2:	4606      	mov	r6, r0
 8009be4:	b950      	cbnz	r0, 8009bfc <__ssputs_r+0x5c>
 8009be6:	230c      	movs	r3, #12
 8009be8:	f8ca 3000 	str.w	r3, [sl]
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	463a      	mov	r2, r7
 8009bfe:	6921      	ldr	r1, [r4, #16]
 8009c00:	f7fc fb76 	bl	80062f0 <memcpy>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	6126      	str	r6, [r4, #16]
 8009c12:	6165      	str	r5, [r4, #20]
 8009c14:	443e      	add	r6, r7
 8009c16:	1bed      	subs	r5, r5, r7
 8009c18:	6026      	str	r6, [r4, #0]
 8009c1a:	60a5      	str	r5, [r4, #8]
 8009c1c:	464e      	mov	r6, r9
 8009c1e:	454e      	cmp	r6, r9
 8009c20:	d900      	bls.n	8009c24 <__ssputs_r+0x84>
 8009c22:	464e      	mov	r6, r9
 8009c24:	4632      	mov	r2, r6
 8009c26:	4641      	mov	r1, r8
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	f000 fcc7 	bl	800a5bc <memmove>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	1b9b      	subs	r3, r3, r6
 8009c32:	60a3      	str	r3, [r4, #8]
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	441e      	add	r6, r3
 8009c38:	6026      	str	r6, [r4, #0]
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e7dc      	b.n	8009bf8 <__ssputs_r+0x58>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	f000 fcd7 	bl	800a5f2 <_realloc_r>
 8009c44:	4606      	mov	r6, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d1e2      	bne.n	8009c10 <__ssputs_r+0x70>
 8009c4a:	6921      	ldr	r1, [r4, #16]
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	f7ff feff 	bl	8009a50 <_free_r>
 8009c52:	e7c8      	b.n	8009be6 <__ssputs_r+0x46>

08009c54 <_svfiprintf_r>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	461d      	mov	r5, r3
 8009c5a:	898b      	ldrh	r3, [r1, #12]
 8009c5c:	061f      	lsls	r7, r3, #24
 8009c5e:	b09d      	sub	sp, #116	; 0x74
 8009c60:	4680      	mov	r8, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	4616      	mov	r6, r2
 8009c66:	d50f      	bpl.n	8009c88 <_svfiprintf_r+0x34>
 8009c68:	690b      	ldr	r3, [r1, #16]
 8009c6a:	b96b      	cbnz	r3, 8009c88 <_svfiprintf_r+0x34>
 8009c6c:	2140      	movs	r1, #64	; 0x40
 8009c6e:	f7ff ff3d 	bl	8009aec <_malloc_r>
 8009c72:	6020      	str	r0, [r4, #0]
 8009c74:	6120      	str	r0, [r4, #16]
 8009c76:	b928      	cbnz	r0, 8009c84 <_svfiprintf_r+0x30>
 8009c78:	230c      	movs	r3, #12
 8009c7a:	f8c8 3000 	str.w	r3, [r8]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c82:	e0c8      	b.n	8009e16 <_svfiprintf_r+0x1c2>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c92:	2330      	movs	r3, #48	; 0x30
 8009c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c98:	9503      	str	r5, [sp, #12]
 8009c9a:	f04f 0b01 	mov.w	fp, #1
 8009c9e:	4637      	mov	r7, r6
 8009ca0:	463d      	mov	r5, r7
 8009ca2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ca6:	b10b      	cbz	r3, 8009cac <_svfiprintf_r+0x58>
 8009ca8:	2b25      	cmp	r3, #37	; 0x25
 8009caa:	d13e      	bne.n	8009d2a <_svfiprintf_r+0xd6>
 8009cac:	ebb7 0a06 	subs.w	sl, r7, r6
 8009cb0:	d00b      	beq.n	8009cca <_svfiprintf_r+0x76>
 8009cb2:	4653      	mov	r3, sl
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4640      	mov	r0, r8
 8009cba:	f7ff ff71 	bl	8009ba0 <__ssputs_r>
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f000 80a4 	beq.w	8009e0c <_svfiprintf_r+0x1b8>
 8009cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc6:	4453      	add	r3, sl
 8009cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cca:	783b      	ldrb	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 809d 	beq.w	8009e0c <_svfiprintf_r+0x1b8>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	9307      	str	r3, [sp, #28]
 8009ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ce6:	462f      	mov	r7, r5
 8009ce8:	2205      	movs	r2, #5
 8009cea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009cee:	4850      	ldr	r0, [pc, #320]	; (8009e30 <_svfiprintf_r+0x1dc>)
 8009cf0:	f7f6 fa7e 	bl	80001f0 <memchr>
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	b9d0      	cbnz	r0, 8009d2e <_svfiprintf_r+0xda>
 8009cf8:	06d9      	lsls	r1, r3, #27
 8009cfa:	bf44      	itt	mi
 8009cfc:	2220      	movmi	r2, #32
 8009cfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d02:	071a      	lsls	r2, r3, #28
 8009d04:	bf44      	itt	mi
 8009d06:	222b      	movmi	r2, #43	; 0x2b
 8009d08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d0c:	782a      	ldrb	r2, [r5, #0]
 8009d0e:	2a2a      	cmp	r2, #42	; 0x2a
 8009d10:	d015      	beq.n	8009d3e <_svfiprintf_r+0xea>
 8009d12:	9a07      	ldr	r2, [sp, #28]
 8009d14:	462f      	mov	r7, r5
 8009d16:	2000      	movs	r0, #0
 8009d18:	250a      	movs	r5, #10
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d20:	3b30      	subs	r3, #48	; 0x30
 8009d22:	2b09      	cmp	r3, #9
 8009d24:	d94d      	bls.n	8009dc2 <_svfiprintf_r+0x16e>
 8009d26:	b1b8      	cbz	r0, 8009d58 <_svfiprintf_r+0x104>
 8009d28:	e00f      	b.n	8009d4a <_svfiprintf_r+0xf6>
 8009d2a:	462f      	mov	r7, r5
 8009d2c:	e7b8      	b.n	8009ca0 <_svfiprintf_r+0x4c>
 8009d2e:	4a40      	ldr	r2, [pc, #256]	; (8009e30 <_svfiprintf_r+0x1dc>)
 8009d30:	1a80      	subs	r0, r0, r2
 8009d32:	fa0b f000 	lsl.w	r0, fp, r0
 8009d36:	4318      	orrs	r0, r3
 8009d38:	9004      	str	r0, [sp, #16]
 8009d3a:	463d      	mov	r5, r7
 8009d3c:	e7d3      	b.n	8009ce6 <_svfiprintf_r+0x92>
 8009d3e:	9a03      	ldr	r2, [sp, #12]
 8009d40:	1d11      	adds	r1, r2, #4
 8009d42:	6812      	ldr	r2, [r2, #0]
 8009d44:	9103      	str	r1, [sp, #12]
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	db01      	blt.n	8009d4e <_svfiprintf_r+0xfa>
 8009d4a:	9207      	str	r2, [sp, #28]
 8009d4c:	e004      	b.n	8009d58 <_svfiprintf_r+0x104>
 8009d4e:	4252      	negs	r2, r2
 8009d50:	f043 0302 	orr.w	r3, r3, #2
 8009d54:	9207      	str	r2, [sp, #28]
 8009d56:	9304      	str	r3, [sp, #16]
 8009d58:	783b      	ldrb	r3, [r7, #0]
 8009d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d5c:	d10c      	bne.n	8009d78 <_svfiprintf_r+0x124>
 8009d5e:	787b      	ldrb	r3, [r7, #1]
 8009d60:	2b2a      	cmp	r3, #42	; 0x2a
 8009d62:	d133      	bne.n	8009dcc <_svfiprintf_r+0x178>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	1d1a      	adds	r2, r3, #4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	9203      	str	r2, [sp, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfb8      	it	lt
 8009d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d74:	3702      	adds	r7, #2
 8009d76:	9305      	str	r3, [sp, #20]
 8009d78:	4d2e      	ldr	r5, [pc, #184]	; (8009e34 <_svfiprintf_r+0x1e0>)
 8009d7a:	7839      	ldrb	r1, [r7, #0]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f7f6 fa36 	bl	80001f0 <memchr>
 8009d84:	b138      	cbz	r0, 8009d96 <_svfiprintf_r+0x142>
 8009d86:	2340      	movs	r3, #64	; 0x40
 8009d88:	1b40      	subs	r0, r0, r5
 8009d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	4303      	orrs	r3, r0
 8009d92:	3701      	adds	r7, #1
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	7839      	ldrb	r1, [r7, #0]
 8009d98:	4827      	ldr	r0, [pc, #156]	; (8009e38 <_svfiprintf_r+0x1e4>)
 8009d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d9e:	2206      	movs	r2, #6
 8009da0:	1c7e      	adds	r6, r7, #1
 8009da2:	f7f6 fa25 	bl	80001f0 <memchr>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d038      	beq.n	8009e1c <_svfiprintf_r+0x1c8>
 8009daa:	4b24      	ldr	r3, [pc, #144]	; (8009e3c <_svfiprintf_r+0x1e8>)
 8009dac:	bb13      	cbnz	r3, 8009df4 <_svfiprintf_r+0x1a0>
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	3307      	adds	r3, #7
 8009db2:	f023 0307 	bic.w	r3, r3, #7
 8009db6:	3308      	adds	r3, #8
 8009db8:	9303      	str	r3, [sp, #12]
 8009dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbc:	444b      	add	r3, r9
 8009dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc0:	e76d      	b.n	8009c9e <_svfiprintf_r+0x4a>
 8009dc2:	fb05 3202 	mla	r2, r5, r2, r3
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	460f      	mov	r7, r1
 8009dca:	e7a6      	b.n	8009d1a <_svfiprintf_r+0xc6>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	3701      	adds	r7, #1
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	250a      	movs	r5, #10
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ddc:	3a30      	subs	r2, #48	; 0x30
 8009dde:	2a09      	cmp	r2, #9
 8009de0:	d903      	bls.n	8009dea <_svfiprintf_r+0x196>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0c8      	beq.n	8009d78 <_svfiprintf_r+0x124>
 8009de6:	9105      	str	r1, [sp, #20]
 8009de8:	e7c6      	b.n	8009d78 <_svfiprintf_r+0x124>
 8009dea:	fb05 2101 	mla	r1, r5, r1, r2
 8009dee:	2301      	movs	r3, #1
 8009df0:	4607      	mov	r7, r0
 8009df2:	e7f0      	b.n	8009dd6 <_svfiprintf_r+0x182>
 8009df4:	ab03      	add	r3, sp, #12
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <_svfiprintf_r+0x1ec>)
 8009dfc:	a904      	add	r1, sp, #16
 8009dfe:	4640      	mov	r0, r8
 8009e00:	f7fc fb1e 	bl	8006440 <_printf_float>
 8009e04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e08:	4681      	mov	r9, r0
 8009e0a:	d1d6      	bne.n	8009dba <_svfiprintf_r+0x166>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	065b      	lsls	r3, r3, #25
 8009e10:	f53f af35 	bmi.w	8009c7e <_svfiprintf_r+0x2a>
 8009e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e16:	b01d      	add	sp, #116	; 0x74
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	ab03      	add	r3, sp, #12
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	4622      	mov	r2, r4
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <_svfiprintf_r+0x1ec>)
 8009e24:	a904      	add	r1, sp, #16
 8009e26:	4640      	mov	r0, r8
 8009e28:	f7fc fdc0 	bl	80069ac <_printf_i>
 8009e2c:	e7ea      	b.n	8009e04 <_svfiprintf_r+0x1b0>
 8009e2e:	bf00      	nop
 8009e30:	0800a95c 	.word	0x0800a95c
 8009e34:	0800a962 	.word	0x0800a962
 8009e38:	0800a966 	.word	0x0800a966
 8009e3c:	08006441 	.word	0x08006441
 8009e40:	08009ba1 	.word	0x08009ba1

08009e44 <__sfputc_r>:
 8009e44:	6893      	ldr	r3, [r2, #8]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	b410      	push	{r4}
 8009e4c:	6093      	str	r3, [r2, #8]
 8009e4e:	da08      	bge.n	8009e62 <__sfputc_r+0x1e>
 8009e50:	6994      	ldr	r4, [r2, #24]
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	db01      	blt.n	8009e5a <__sfputc_r+0x16>
 8009e56:	290a      	cmp	r1, #10
 8009e58:	d103      	bne.n	8009e62 <__sfputc_r+0x1e>
 8009e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e5e:	f000 b997 	b.w	800a190 <__swbuf_r>
 8009e62:	6813      	ldr	r3, [r2, #0]
 8009e64:	1c58      	adds	r0, r3, #1
 8009e66:	6010      	str	r0, [r2, #0]
 8009e68:	7019      	strb	r1, [r3, #0]
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <__sfputs_r>:
 8009e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e74:	4606      	mov	r6, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	4614      	mov	r4, r2
 8009e7a:	18d5      	adds	r5, r2, r3
 8009e7c:	42ac      	cmp	r4, r5
 8009e7e:	d101      	bne.n	8009e84 <__sfputs_r+0x12>
 8009e80:	2000      	movs	r0, #0
 8009e82:	e007      	b.n	8009e94 <__sfputs_r+0x22>
 8009e84:	463a      	mov	r2, r7
 8009e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f7ff ffda 	bl	8009e44 <__sfputc_r>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d1f3      	bne.n	8009e7c <__sfputs_r+0xa>
 8009e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e98 <_vfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	b09d      	sub	sp, #116	; 0x74
 8009ea0:	4617      	mov	r7, r2
 8009ea2:	461d      	mov	r5, r3
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	b118      	cbz	r0, 8009eb0 <_vfiprintf_r+0x18>
 8009ea8:	6983      	ldr	r3, [r0, #24]
 8009eaa:	b90b      	cbnz	r3, 8009eb0 <_vfiprintf_r+0x18>
 8009eac:	f7fe fde4 	bl	8008a78 <__sinit>
 8009eb0:	4b7c      	ldr	r3, [pc, #496]	; (800a0a4 <_vfiprintf_r+0x20c>)
 8009eb2:	429c      	cmp	r4, r3
 8009eb4:	d158      	bne.n	8009f68 <_vfiprintf_r+0xd0>
 8009eb6:	6874      	ldr	r4, [r6, #4]
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	0718      	lsls	r0, r3, #28
 8009ebc:	d55e      	bpl.n	8009f7c <_vfiprintf_r+0xe4>
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d05b      	beq.n	8009f7c <_vfiprintf_r+0xe4>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec8:	2320      	movs	r3, #32
 8009eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed4:	9503      	str	r5, [sp, #12]
 8009ed6:	f04f 0b01 	mov.w	fp, #1
 8009eda:	46b8      	mov	r8, r7
 8009edc:	4645      	mov	r5, r8
 8009ede:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ee2:	b10b      	cbz	r3, 8009ee8 <_vfiprintf_r+0x50>
 8009ee4:	2b25      	cmp	r3, #37	; 0x25
 8009ee6:	d154      	bne.n	8009f92 <_vfiprintf_r+0xfa>
 8009ee8:	ebb8 0a07 	subs.w	sl, r8, r7
 8009eec:	d00b      	beq.n	8009f06 <_vfiprintf_r+0x6e>
 8009eee:	4653      	mov	r3, sl
 8009ef0:	463a      	mov	r2, r7
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f7ff ffbc 	bl	8009e72 <__sfputs_r>
 8009efa:	3001      	adds	r0, #1
 8009efc:	f000 80c2 	beq.w	800a084 <_vfiprintf_r+0x1ec>
 8009f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f02:	4453      	add	r3, sl
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	f898 3000 	ldrb.w	r3, [r8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80ba 	beq.w	800a084 <_vfiprintf_r+0x1ec>
 8009f10:	2300      	movs	r3, #0
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295
 8009f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	9307      	str	r3, [sp, #28]
 8009f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f22:	931a      	str	r3, [sp, #104]	; 0x68
 8009f24:	46a8      	mov	r8, r5
 8009f26:	2205      	movs	r2, #5
 8009f28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009f2c:	485e      	ldr	r0, [pc, #376]	; (800a0a8 <_vfiprintf_r+0x210>)
 8009f2e:	f7f6 f95f 	bl	80001f0 <memchr>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	bb78      	cbnz	r0, 8009f96 <_vfiprintf_r+0xfe>
 8009f36:	06d9      	lsls	r1, r3, #27
 8009f38:	bf44      	itt	mi
 8009f3a:	2220      	movmi	r2, #32
 8009f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f40:	071a      	lsls	r2, r3, #28
 8009f42:	bf44      	itt	mi
 8009f44:	222b      	movmi	r2, #43	; 0x2b
 8009f46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f4a:	782a      	ldrb	r2, [r5, #0]
 8009f4c:	2a2a      	cmp	r2, #42	; 0x2a
 8009f4e:	d02a      	beq.n	8009fa6 <_vfiprintf_r+0x10e>
 8009f50:	9a07      	ldr	r2, [sp, #28]
 8009f52:	46a8      	mov	r8, r5
 8009f54:	2000      	movs	r0, #0
 8009f56:	250a      	movs	r5, #10
 8009f58:	4641      	mov	r1, r8
 8009f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f5e:	3b30      	subs	r3, #48	; 0x30
 8009f60:	2b09      	cmp	r3, #9
 8009f62:	d969      	bls.n	800a038 <_vfiprintf_r+0x1a0>
 8009f64:	b360      	cbz	r0, 8009fc0 <_vfiprintf_r+0x128>
 8009f66:	e024      	b.n	8009fb2 <_vfiprintf_r+0x11a>
 8009f68:	4b50      	ldr	r3, [pc, #320]	; (800a0ac <_vfiprintf_r+0x214>)
 8009f6a:	429c      	cmp	r4, r3
 8009f6c:	d101      	bne.n	8009f72 <_vfiprintf_r+0xda>
 8009f6e:	68b4      	ldr	r4, [r6, #8]
 8009f70:	e7a2      	b.n	8009eb8 <_vfiprintf_r+0x20>
 8009f72:	4b4f      	ldr	r3, [pc, #316]	; (800a0b0 <_vfiprintf_r+0x218>)
 8009f74:	429c      	cmp	r4, r3
 8009f76:	bf08      	it	eq
 8009f78:	68f4      	ldreq	r4, [r6, #12]
 8009f7a:	e79d      	b.n	8009eb8 <_vfiprintf_r+0x20>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f978 	bl	800a274 <__swsetup_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d09d      	beq.n	8009ec4 <_vfiprintf_r+0x2c>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	b01d      	add	sp, #116	; 0x74
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	46a8      	mov	r8, r5
 8009f94:	e7a2      	b.n	8009edc <_vfiprintf_r+0x44>
 8009f96:	4a44      	ldr	r2, [pc, #272]	; (800a0a8 <_vfiprintf_r+0x210>)
 8009f98:	1a80      	subs	r0, r0, r2
 8009f9a:	fa0b f000 	lsl.w	r0, fp, r0
 8009f9e:	4318      	orrs	r0, r3
 8009fa0:	9004      	str	r0, [sp, #16]
 8009fa2:	4645      	mov	r5, r8
 8009fa4:	e7be      	b.n	8009f24 <_vfiprintf_r+0x8c>
 8009fa6:	9a03      	ldr	r2, [sp, #12]
 8009fa8:	1d11      	adds	r1, r2, #4
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	db01      	blt.n	8009fb6 <_vfiprintf_r+0x11e>
 8009fb2:	9207      	str	r2, [sp, #28]
 8009fb4:	e004      	b.n	8009fc0 <_vfiprintf_r+0x128>
 8009fb6:	4252      	negs	r2, r2
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	9207      	str	r2, [sp, #28]
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	f898 3000 	ldrb.w	r3, [r8]
 8009fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc6:	d10e      	bne.n	8009fe6 <_vfiprintf_r+0x14e>
 8009fc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fce:	d138      	bne.n	800a042 <_vfiprintf_r+0x1aa>
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	1d1a      	adds	r2, r3, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	9203      	str	r2, [sp, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfb8      	it	lt
 8009fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fe0:	f108 0802 	add.w	r8, r8, #2
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	4d33      	ldr	r5, [pc, #204]	; (800a0b4 <_vfiprintf_r+0x21c>)
 8009fe8:	f898 1000 	ldrb.w	r1, [r8]
 8009fec:	2203      	movs	r2, #3
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7f6 f8fe 	bl	80001f0 <memchr>
 8009ff4:	b140      	cbz	r0, 800a008 <_vfiprintf_r+0x170>
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	1b40      	subs	r0, r0, r5
 8009ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	4303      	orrs	r3, r0
 800a002:	f108 0801 	add.w	r8, r8, #1
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	f898 1000 	ldrb.w	r1, [r8]
 800a00c:	482a      	ldr	r0, [pc, #168]	; (800a0b8 <_vfiprintf_r+0x220>)
 800a00e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a012:	2206      	movs	r2, #6
 800a014:	f108 0701 	add.w	r7, r8, #1
 800a018:	f7f6 f8ea 	bl	80001f0 <memchr>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d037      	beq.n	800a090 <_vfiprintf_r+0x1f8>
 800a020:	4b26      	ldr	r3, [pc, #152]	; (800a0bc <_vfiprintf_r+0x224>)
 800a022:	bb1b      	cbnz	r3, 800a06c <_vfiprintf_r+0x1d4>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	3307      	adds	r3, #7
 800a028:	f023 0307 	bic.w	r3, r3, #7
 800a02c:	3308      	adds	r3, #8
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a032:	444b      	add	r3, r9
 800a034:	9309      	str	r3, [sp, #36]	; 0x24
 800a036:	e750      	b.n	8009eda <_vfiprintf_r+0x42>
 800a038:	fb05 3202 	mla	r2, r5, r2, r3
 800a03c:	2001      	movs	r0, #1
 800a03e:	4688      	mov	r8, r1
 800a040:	e78a      	b.n	8009f58 <_vfiprintf_r+0xc0>
 800a042:	2300      	movs	r3, #0
 800a044:	f108 0801 	add.w	r8, r8, #1
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	4619      	mov	r1, r3
 800a04c:	250a      	movs	r5, #10
 800a04e:	4640      	mov	r0, r8
 800a050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a054:	3a30      	subs	r2, #48	; 0x30
 800a056:	2a09      	cmp	r2, #9
 800a058:	d903      	bls.n	800a062 <_vfiprintf_r+0x1ca>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0c3      	beq.n	8009fe6 <_vfiprintf_r+0x14e>
 800a05e:	9105      	str	r1, [sp, #20]
 800a060:	e7c1      	b.n	8009fe6 <_vfiprintf_r+0x14e>
 800a062:	fb05 2101 	mla	r1, r5, r1, r2
 800a066:	2301      	movs	r3, #1
 800a068:	4680      	mov	r8, r0
 800a06a:	e7f0      	b.n	800a04e <_vfiprintf_r+0x1b6>
 800a06c:	ab03      	add	r3, sp, #12
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	4622      	mov	r2, r4
 800a072:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <_vfiprintf_r+0x228>)
 800a074:	a904      	add	r1, sp, #16
 800a076:	4630      	mov	r0, r6
 800a078:	f7fc f9e2 	bl	8006440 <_printf_float>
 800a07c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a080:	4681      	mov	r9, r0
 800a082:	d1d5      	bne.n	800a030 <_vfiprintf_r+0x198>
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	065b      	lsls	r3, r3, #25
 800a088:	f53f af7e 	bmi.w	8009f88 <_vfiprintf_r+0xf0>
 800a08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a08e:	e77d      	b.n	8009f8c <_vfiprintf_r+0xf4>
 800a090:	ab03      	add	r3, sp, #12
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	4622      	mov	r2, r4
 800a096:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <_vfiprintf_r+0x228>)
 800a098:	a904      	add	r1, sp, #16
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7fc fc86 	bl	80069ac <_printf_i>
 800a0a0:	e7ec      	b.n	800a07c <_vfiprintf_r+0x1e4>
 800a0a2:	bf00      	nop
 800a0a4:	0800a810 	.word	0x0800a810
 800a0a8:	0800a95c 	.word	0x0800a95c
 800a0ac:	0800a830 	.word	0x0800a830
 800a0b0:	0800a7f0 	.word	0x0800a7f0
 800a0b4:	0800a962 	.word	0x0800a962
 800a0b8:	0800a966 	.word	0x0800a966
 800a0bc:	08006441 	.word	0x08006441
 800a0c0:	08009e73 	.word	0x08009e73

0800a0c4 <_sbrk_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4c06      	ldr	r4, [pc, #24]	; (800a0e0 <_sbrk_r+0x1c>)
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	6023      	str	r3, [r4, #0]
 800a0d0:	f7f7 fa1e 	bl	8001510 <_sbrk>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_sbrk_r+0x1a>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_sbrk_r+0x1a>
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000450 	.word	0x20000450

0800a0e4 <__sread>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ec:	f000 faa8 	bl	800a640 <_read_r>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	bfab      	itete	ge
 800a0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0f8:	181b      	addge	r3, r3, r0
 800a0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0fe:	bfac      	ite	ge
 800a100:	6563      	strge	r3, [r4, #84]	; 0x54
 800a102:	81a3      	strhlt	r3, [r4, #12]
 800a104:	bd10      	pop	{r4, pc}

0800a106 <__swrite>:
 800a106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10a:	461f      	mov	r7, r3
 800a10c:	898b      	ldrh	r3, [r1, #12]
 800a10e:	05db      	lsls	r3, r3, #23
 800a110:	4605      	mov	r5, r0
 800a112:	460c      	mov	r4, r1
 800a114:	4616      	mov	r6, r2
 800a116:	d505      	bpl.n	800a124 <__swrite+0x1e>
 800a118:	2302      	movs	r3, #2
 800a11a:	2200      	movs	r2, #0
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	f000 f9d6 	bl	800a4d0 <_lseek_r>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a12a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	4632      	mov	r2, r6
 800a132:	463b      	mov	r3, r7
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a13a:	f000 b889 	b.w	800a250 <_write_r>

0800a13e <__sseek>:
 800a13e:	b510      	push	{r4, lr}
 800a140:	460c      	mov	r4, r1
 800a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a146:	f000 f9c3 	bl	800a4d0 <_lseek_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	bf15      	itete	ne
 800a150:	6560      	strne	r0, [r4, #84]	; 0x54
 800a152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a15a:	81a3      	strheq	r3, [r4, #12]
 800a15c:	bf18      	it	ne
 800a15e:	81a3      	strhne	r3, [r4, #12]
 800a160:	bd10      	pop	{r4, pc}

0800a162 <__sclose>:
 800a162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a166:	f000 b8f3 	b.w	800a350 <_close_r>

0800a16a <strncmp>:
 800a16a:	b510      	push	{r4, lr}
 800a16c:	b16a      	cbz	r2, 800a18a <strncmp+0x20>
 800a16e:	3901      	subs	r1, #1
 800a170:	1884      	adds	r4, r0, r2
 800a172:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a176:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d103      	bne.n	800a186 <strncmp+0x1c>
 800a17e:	42a0      	cmp	r0, r4
 800a180:	d001      	beq.n	800a186 <strncmp+0x1c>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f5      	bne.n	800a172 <strncmp+0x8>
 800a186:	1a98      	subs	r0, r3, r2
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	4610      	mov	r0, r2
 800a18c:	e7fc      	b.n	800a188 <strncmp+0x1e>
	...

0800a190 <__swbuf_r>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	460e      	mov	r6, r1
 800a194:	4614      	mov	r4, r2
 800a196:	4605      	mov	r5, r0
 800a198:	b118      	cbz	r0, 800a1a2 <__swbuf_r+0x12>
 800a19a:	6983      	ldr	r3, [r0, #24]
 800a19c:	b90b      	cbnz	r3, 800a1a2 <__swbuf_r+0x12>
 800a19e:	f7fe fc6b 	bl	8008a78 <__sinit>
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <__swbuf_r+0x98>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	d12a      	bne.n	800a1fe <__swbuf_r+0x6e>
 800a1a8:	686c      	ldr	r4, [r5, #4]
 800a1aa:	69a3      	ldr	r3, [r4, #24]
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	071a      	lsls	r2, r3, #28
 800a1b2:	d52e      	bpl.n	800a212 <__swbuf_r+0x82>
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	b363      	cbz	r3, 800a212 <__swbuf_r+0x82>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	6820      	ldr	r0, [r4, #0]
 800a1bc:	1ac0      	subs	r0, r0, r3
 800a1be:	6963      	ldr	r3, [r4, #20]
 800a1c0:	b2f6      	uxtb	r6, r6
 800a1c2:	4283      	cmp	r3, r0
 800a1c4:	4637      	mov	r7, r6
 800a1c6:	dc04      	bgt.n	800a1d2 <__swbuf_r+0x42>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 f956 	bl	800a47c <_fflush_r>
 800a1d0:	bb28      	cbnz	r0, 800a21e <__swbuf_r+0x8e>
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	60a3      	str	r3, [r4, #8]
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	701e      	strb	r6, [r3, #0]
 800a1e0:	6963      	ldr	r3, [r4, #20]
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	4283      	cmp	r3, r0
 800a1e6:	d004      	beq.n	800a1f2 <__swbuf_r+0x62>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	07db      	lsls	r3, r3, #31
 800a1ec:	d519      	bpl.n	800a222 <__swbuf_r+0x92>
 800a1ee:	2e0a      	cmp	r6, #10
 800a1f0:	d117      	bne.n	800a222 <__swbuf_r+0x92>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f000 f941 	bl	800a47c <_fflush_r>
 800a1fa:	b190      	cbz	r0, 800a222 <__swbuf_r+0x92>
 800a1fc:	e00f      	b.n	800a21e <__swbuf_r+0x8e>
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <__swbuf_r+0x9c>)
 800a200:	429c      	cmp	r4, r3
 800a202:	d101      	bne.n	800a208 <__swbuf_r+0x78>
 800a204:	68ac      	ldr	r4, [r5, #8]
 800a206:	e7d0      	b.n	800a1aa <__swbuf_r+0x1a>
 800a208:	4b09      	ldr	r3, [pc, #36]	; (800a230 <__swbuf_r+0xa0>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	bf08      	it	eq
 800a20e:	68ec      	ldreq	r4, [r5, #12]
 800a210:	e7cb      	b.n	800a1aa <__swbuf_r+0x1a>
 800a212:	4621      	mov	r1, r4
 800a214:	4628      	mov	r0, r5
 800a216:	f000 f82d 	bl	800a274 <__swsetup_r>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d0cc      	beq.n	800a1b8 <__swbuf_r+0x28>
 800a21e:	f04f 37ff 	mov.w	r7, #4294967295
 800a222:	4638      	mov	r0, r7
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a226:	bf00      	nop
 800a228:	0800a810 	.word	0x0800a810
 800a22c:	0800a830 	.word	0x0800a830
 800a230:	0800a7f0 	.word	0x0800a7f0

0800a234 <__ascii_wctomb>:
 800a234:	b149      	cbz	r1, 800a24a <__ascii_wctomb+0x16>
 800a236:	2aff      	cmp	r2, #255	; 0xff
 800a238:	bf85      	ittet	hi
 800a23a:	238a      	movhi	r3, #138	; 0x8a
 800a23c:	6003      	strhi	r3, [r0, #0]
 800a23e:	700a      	strbls	r2, [r1, #0]
 800a240:	f04f 30ff 	movhi.w	r0, #4294967295
 800a244:	bf98      	it	ls
 800a246:	2001      	movls	r0, #1
 800a248:	4770      	bx	lr
 800a24a:	4608      	mov	r0, r1
 800a24c:	4770      	bx	lr
	...

0800a250 <_write_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4c07      	ldr	r4, [pc, #28]	; (800a270 <_write_r+0x20>)
 800a254:	4605      	mov	r5, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f7 f906 	bl	8001470 <_write>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_write_r+0x1e>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_write_r+0x1e>
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	20000450 	.word	0x20000450

0800a274 <__swsetup_r>:
 800a274:	4b32      	ldr	r3, [pc, #200]	; (800a340 <__swsetup_r+0xcc>)
 800a276:	b570      	push	{r4, r5, r6, lr}
 800a278:	681d      	ldr	r5, [r3, #0]
 800a27a:	4606      	mov	r6, r0
 800a27c:	460c      	mov	r4, r1
 800a27e:	b125      	cbz	r5, 800a28a <__swsetup_r+0x16>
 800a280:	69ab      	ldr	r3, [r5, #24]
 800a282:	b913      	cbnz	r3, 800a28a <__swsetup_r+0x16>
 800a284:	4628      	mov	r0, r5
 800a286:	f7fe fbf7 	bl	8008a78 <__sinit>
 800a28a:	4b2e      	ldr	r3, [pc, #184]	; (800a344 <__swsetup_r+0xd0>)
 800a28c:	429c      	cmp	r4, r3
 800a28e:	d10f      	bne.n	800a2b0 <__swsetup_r+0x3c>
 800a290:	686c      	ldr	r4, [r5, #4]
 800a292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a296:	b29a      	uxth	r2, r3
 800a298:	0715      	lsls	r5, r2, #28
 800a29a:	d42c      	bmi.n	800a2f6 <__swsetup_r+0x82>
 800a29c:	06d0      	lsls	r0, r2, #27
 800a29e:	d411      	bmi.n	800a2c4 <__swsetup_r+0x50>
 800a2a0:	2209      	movs	r2, #9
 800a2a2:	6032      	str	r2, [r6, #0]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	e03e      	b.n	800a32e <__swsetup_r+0xba>
 800a2b0:	4b25      	ldr	r3, [pc, #148]	; (800a348 <__swsetup_r+0xd4>)
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d101      	bne.n	800a2ba <__swsetup_r+0x46>
 800a2b6:	68ac      	ldr	r4, [r5, #8]
 800a2b8:	e7eb      	b.n	800a292 <__swsetup_r+0x1e>
 800a2ba:	4b24      	ldr	r3, [pc, #144]	; (800a34c <__swsetup_r+0xd8>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	bf08      	it	eq
 800a2c0:	68ec      	ldreq	r4, [r5, #12]
 800a2c2:	e7e6      	b.n	800a292 <__swsetup_r+0x1e>
 800a2c4:	0751      	lsls	r1, r2, #29
 800a2c6:	d512      	bpl.n	800a2ee <__swsetup_r+0x7a>
 800a2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ca:	b141      	cbz	r1, 800a2de <__swsetup_r+0x6a>
 800a2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d002      	beq.n	800a2da <__swsetup_r+0x66>
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7ff fbbb 	bl	8009a50 <_free_r>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6063      	str	r3, [r4, #4]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0308 	orr.w	r3, r3, #8
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	b94b      	cbnz	r3, 800a30e <__swsetup_r+0x9a>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a304:	d003      	beq.n	800a30e <__swsetup_r+0x9a>
 800a306:	4621      	mov	r1, r4
 800a308:	4630      	mov	r0, r6
 800a30a:	f000 f917 	bl	800a53c <__smakebuf_r>
 800a30e:	89a2      	ldrh	r2, [r4, #12]
 800a310:	f012 0301 	ands.w	r3, r2, #1
 800a314:	d00c      	beq.n	800a330 <__swsetup_r+0xbc>
 800a316:	2300      	movs	r3, #0
 800a318:	60a3      	str	r3, [r4, #8]
 800a31a:	6963      	ldr	r3, [r4, #20]
 800a31c:	425b      	negs	r3, r3
 800a31e:	61a3      	str	r3, [r4, #24]
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	b953      	cbnz	r3, 800a33a <__swsetup_r+0xc6>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a32c:	d1ba      	bne.n	800a2a4 <__swsetup_r+0x30>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	0792      	lsls	r2, r2, #30
 800a332:	bf58      	it	pl
 800a334:	6963      	ldrpl	r3, [r4, #20]
 800a336:	60a3      	str	r3, [r4, #8]
 800a338:	e7f2      	b.n	800a320 <__swsetup_r+0xac>
 800a33a:	2000      	movs	r0, #0
 800a33c:	e7f7      	b.n	800a32e <__swsetup_r+0xba>
 800a33e:	bf00      	nop
 800a340:	2000000c 	.word	0x2000000c
 800a344:	0800a810 	.word	0x0800a810
 800a348:	0800a830 	.word	0x0800a830
 800a34c:	0800a7f0 	.word	0x0800a7f0

0800a350 <_close_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4c06      	ldr	r4, [pc, #24]	; (800a36c <_close_r+0x1c>)
 800a354:	2300      	movs	r3, #0
 800a356:	4605      	mov	r5, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	f7f7 f8a4 	bl	80014a8 <_close>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_close_r+0x1a>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b103      	cbz	r3, 800a36a <_close_r+0x1a>
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	20000450 	.word	0x20000450

0800a370 <__sflush_r>:
 800a370:	898a      	ldrh	r2, [r1, #12]
 800a372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	4605      	mov	r5, r0
 800a378:	0710      	lsls	r0, r2, #28
 800a37a:	460c      	mov	r4, r1
 800a37c:	d458      	bmi.n	800a430 <__sflush_r+0xc0>
 800a37e:	684b      	ldr	r3, [r1, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dc05      	bgt.n	800a390 <__sflush_r+0x20>
 800a384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	dc02      	bgt.n	800a390 <__sflush_r+0x20>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a392:	2e00      	cmp	r6, #0
 800a394:	d0f9      	beq.n	800a38a <__sflush_r+0x1a>
 800a396:	2300      	movs	r3, #0
 800a398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a39c:	682f      	ldr	r7, [r5, #0]
 800a39e:	6a21      	ldr	r1, [r4, #32]
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	d032      	beq.n	800a40a <__sflush_r+0x9a>
 800a3a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	075a      	lsls	r2, r3, #29
 800a3aa:	d505      	bpl.n	800a3b8 <__sflush_r+0x48>
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	1ac0      	subs	r0, r0, r3
 800a3b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b2:	b10b      	cbz	r3, 800a3b8 <__sflush_r+0x48>
 800a3b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b6:	1ac0      	subs	r0, r0, r3
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3be:	6a21      	ldr	r1, [r4, #32]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b0      	blx	r6
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	d106      	bne.n	800a3d8 <__sflush_r+0x68>
 800a3ca:	6829      	ldr	r1, [r5, #0]
 800a3cc:	291d      	cmp	r1, #29
 800a3ce:	d848      	bhi.n	800a462 <__sflush_r+0xf2>
 800a3d0:	4a29      	ldr	r2, [pc, #164]	; (800a478 <__sflush_r+0x108>)
 800a3d2:	40ca      	lsrs	r2, r1
 800a3d4:	07d6      	lsls	r6, r2, #31
 800a3d6:	d544      	bpl.n	800a462 <__sflush_r+0xf2>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	6062      	str	r2, [r4, #4]
 800a3dc:	04d9      	lsls	r1, r3, #19
 800a3de:	6922      	ldr	r2, [r4, #16]
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	d504      	bpl.n	800a3ee <__sflush_r+0x7e>
 800a3e4:	1c42      	adds	r2, r0, #1
 800a3e6:	d101      	bne.n	800a3ec <__sflush_r+0x7c>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b903      	cbnz	r3, 800a3ee <__sflush_r+0x7e>
 800a3ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f0:	602f      	str	r7, [r5, #0]
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d0c9      	beq.n	800a38a <__sflush_r+0x1a>
 800a3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	d002      	beq.n	800a404 <__sflush_r+0x94>
 800a3fe:	4628      	mov	r0, r5
 800a400:	f7ff fb26 	bl	8009a50 <_free_r>
 800a404:	2000      	movs	r0, #0
 800a406:	6360      	str	r0, [r4, #52]	; 0x34
 800a408:	e7c0      	b.n	800a38c <__sflush_r+0x1c>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b0      	blx	r6
 800a410:	1c41      	adds	r1, r0, #1
 800a412:	d1c8      	bne.n	800a3a6 <__sflush_r+0x36>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0c5      	beq.n	800a3a6 <__sflush_r+0x36>
 800a41a:	2b1d      	cmp	r3, #29
 800a41c:	d001      	beq.n	800a422 <__sflush_r+0xb2>
 800a41e:	2b16      	cmp	r3, #22
 800a420:	d101      	bne.n	800a426 <__sflush_r+0xb6>
 800a422:	602f      	str	r7, [r5, #0]
 800a424:	e7b1      	b.n	800a38a <__sflush_r+0x1a>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	e7ad      	b.n	800a38c <__sflush_r+0x1c>
 800a430:	690f      	ldr	r7, [r1, #16]
 800a432:	2f00      	cmp	r7, #0
 800a434:	d0a9      	beq.n	800a38a <__sflush_r+0x1a>
 800a436:	0793      	lsls	r3, r2, #30
 800a438:	680e      	ldr	r6, [r1, #0]
 800a43a:	bf08      	it	eq
 800a43c:	694b      	ldreq	r3, [r1, #20]
 800a43e:	600f      	str	r7, [r1, #0]
 800a440:	bf18      	it	ne
 800a442:	2300      	movne	r3, #0
 800a444:	eba6 0807 	sub.w	r8, r6, r7
 800a448:	608b      	str	r3, [r1, #8]
 800a44a:	f1b8 0f00 	cmp.w	r8, #0
 800a44e:	dd9c      	ble.n	800a38a <__sflush_r+0x1a>
 800a450:	4643      	mov	r3, r8
 800a452:	463a      	mov	r2, r7
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a458:	4628      	mov	r0, r5
 800a45a:	47b0      	blx	r6
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dc06      	bgt.n	800a46e <__sflush_r+0xfe>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e78e      	b.n	800a38c <__sflush_r+0x1c>
 800a46e:	4407      	add	r7, r0
 800a470:	eba8 0800 	sub.w	r8, r8, r0
 800a474:	e7e9      	b.n	800a44a <__sflush_r+0xda>
 800a476:	bf00      	nop
 800a478:	20400001 	.word	0x20400001

0800a47c <_fflush_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b1db      	cbz	r3, 800a4be <_fflush_r+0x42>
 800a486:	b118      	cbz	r0, 800a490 <_fflush_r+0x14>
 800a488:	6983      	ldr	r3, [r0, #24]
 800a48a:	b90b      	cbnz	r3, 800a490 <_fflush_r+0x14>
 800a48c:	f7fe faf4 	bl	8008a78 <__sinit>
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <_fflush_r+0x48>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d109      	bne.n	800a4aa <_fflush_r+0x2e>
 800a496:	686c      	ldr	r4, [r5, #4]
 800a498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49c:	b17b      	cbz	r3, 800a4be <_fflush_r+0x42>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a6:	f7ff bf63 	b.w	800a370 <__sflush_r>
 800a4aa:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <_fflush_r+0x4c>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d101      	bne.n	800a4b4 <_fflush_r+0x38>
 800a4b0:	68ac      	ldr	r4, [r5, #8]
 800a4b2:	e7f1      	b.n	800a498 <_fflush_r+0x1c>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <_fflush_r+0x50>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	bf08      	it	eq
 800a4ba:	68ec      	ldreq	r4, [r5, #12]
 800a4bc:	e7ec      	b.n	800a498 <_fflush_r+0x1c>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800a810 	.word	0x0800a810
 800a4c8:	0800a830 	.word	0x0800a830
 800a4cc:	0800a7f0 	.word	0x0800a7f0

0800a4d0 <_lseek_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4c07      	ldr	r4, [pc, #28]	; (800a4f0 <_lseek_r+0x20>)
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f7 f809 	bl	80014f6 <_lseek>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_lseek_r+0x1e>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_lseek_r+0x1e>
 800a4ec:	602b      	str	r3, [r5, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	20000450 	.word	0x20000450

0800a4f4 <__swhatbuf_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	b096      	sub	sp, #88	; 0x58
 800a500:	4614      	mov	r4, r2
 800a502:	461d      	mov	r5, r3
 800a504:	da07      	bge.n	800a516 <__swhatbuf_r+0x22>
 800a506:	2300      	movs	r3, #0
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	89b3      	ldrh	r3, [r6, #12]
 800a50c:	061a      	lsls	r2, r3, #24
 800a50e:	d410      	bmi.n	800a532 <__swhatbuf_r+0x3e>
 800a510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a514:	e00e      	b.n	800a534 <__swhatbuf_r+0x40>
 800a516:	466a      	mov	r2, sp
 800a518:	f000 f8a4 	bl	800a664 <_fstat_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	dbf2      	blt.n	800a506 <__swhatbuf_r+0x12>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a52a:	425a      	negs	r2, r3
 800a52c:	415a      	adcs	r2, r3
 800a52e:	602a      	str	r2, [r5, #0]
 800a530:	e7ee      	b.n	800a510 <__swhatbuf_r+0x1c>
 800a532:	2340      	movs	r3, #64	; 0x40
 800a534:	2000      	movs	r0, #0
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	b016      	add	sp, #88	; 0x58
 800a53a:	bd70      	pop	{r4, r5, r6, pc}

0800a53c <__smakebuf_r>:
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a540:	079d      	lsls	r5, r3, #30
 800a542:	4606      	mov	r6, r0
 800a544:	460c      	mov	r4, r1
 800a546:	d507      	bpl.n	800a558 <__smakebuf_r+0x1c>
 800a548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	2301      	movs	r3, #1
 800a552:	6163      	str	r3, [r4, #20]
 800a554:	b002      	add	sp, #8
 800a556:	bd70      	pop	{r4, r5, r6, pc}
 800a558:	ab01      	add	r3, sp, #4
 800a55a:	466a      	mov	r2, sp
 800a55c:	f7ff ffca 	bl	800a4f4 <__swhatbuf_r>
 800a560:	9900      	ldr	r1, [sp, #0]
 800a562:	4605      	mov	r5, r0
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff fac1 	bl	8009aec <_malloc_r>
 800a56a:	b948      	cbnz	r0, 800a580 <__smakebuf_r+0x44>
 800a56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d4ef      	bmi.n	800a554 <__smakebuf_r+0x18>
 800a574:	f023 0303 	bic.w	r3, r3, #3
 800a578:	f043 0302 	orr.w	r3, r3, #2
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	e7e3      	b.n	800a548 <__smakebuf_r+0xc>
 800a580:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <__smakebuf_r+0x7c>)
 800a582:	62b3      	str	r3, [r6, #40]	; 0x28
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	6020      	str	r0, [r4, #0]
 800a588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	6163      	str	r3, [r4, #20]
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	6120      	str	r0, [r4, #16]
 800a596:	b15b      	cbz	r3, 800a5b0 <__smakebuf_r+0x74>
 800a598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f873 	bl	800a688 <_isatty_r>
 800a5a2:	b128      	cbz	r0, 800a5b0 <__smakebuf_r+0x74>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	431d      	orrs	r5, r3
 800a5b4:	81a5      	strh	r5, [r4, #12]
 800a5b6:	e7cd      	b.n	800a554 <__smakebuf_r+0x18>
 800a5b8:	08008a41 	.word	0x08008a41

0800a5bc <memmove>:
 800a5bc:	4288      	cmp	r0, r1
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	eb01 0302 	add.w	r3, r1, r2
 800a5c4:	d807      	bhi.n	800a5d6 <memmove+0x1a>
 800a5c6:	1e42      	subs	r2, r0, #1
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d00a      	beq.n	800a5e2 <memmove+0x26>
 800a5cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5d4:	e7f8      	b.n	800a5c8 <memmove+0xc>
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	d9f5      	bls.n	800a5c6 <memmove+0xa>
 800a5da:	1881      	adds	r1, r0, r2
 800a5dc:	1ad2      	subs	r2, r2, r3
 800a5de:	42d3      	cmn	r3, r2
 800a5e0:	d100      	bne.n	800a5e4 <memmove+0x28>
 800a5e2:	bd10      	pop	{r4, pc}
 800a5e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5ec:	e7f7      	b.n	800a5de <memmove+0x22>

0800a5ee <__malloc_lock>:
 800a5ee:	4770      	bx	lr

0800a5f0 <__malloc_unlock>:
 800a5f0:	4770      	bx	lr

0800a5f2 <_realloc_r>:
 800a5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	460e      	mov	r6, r1
 800a5fa:	b921      	cbnz	r1, 800a606 <_realloc_r+0x14>
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a602:	f7ff ba73 	b.w	8009aec <_malloc_r>
 800a606:	b922      	cbnz	r2, 800a612 <_realloc_r+0x20>
 800a608:	f7ff fa22 	bl	8009a50 <_free_r>
 800a60c:	4625      	mov	r5, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a612:	f000 f849 	bl	800a6a8 <_malloc_usable_size_r>
 800a616:	42a0      	cmp	r0, r4
 800a618:	d20f      	bcs.n	800a63a <_realloc_r+0x48>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff fa65 	bl	8009aec <_malloc_r>
 800a622:	4605      	mov	r5, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d0f2      	beq.n	800a60e <_realloc_r+0x1c>
 800a628:	4631      	mov	r1, r6
 800a62a:	4622      	mov	r2, r4
 800a62c:	f7fb fe60 	bl	80062f0 <memcpy>
 800a630:	4631      	mov	r1, r6
 800a632:	4638      	mov	r0, r7
 800a634:	f7ff fa0c 	bl	8009a50 <_free_r>
 800a638:	e7e9      	b.n	800a60e <_realloc_r+0x1c>
 800a63a:	4635      	mov	r5, r6
 800a63c:	e7e7      	b.n	800a60e <_realloc_r+0x1c>
	...

0800a640 <_read_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4c07      	ldr	r4, [pc, #28]	; (800a660 <_read_r+0x20>)
 800a644:	4605      	mov	r5, r0
 800a646:	4608      	mov	r0, r1
 800a648:	4611      	mov	r1, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	6022      	str	r2, [r4, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7f6 fef1 	bl	8001436 <_read>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_read_r+0x1e>
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_read_r+0x1e>
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20000450 	.word	0x20000450

0800a664 <_fstat_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4c07      	ldr	r4, [pc, #28]	; (800a684 <_fstat_r+0x20>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4605      	mov	r5, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	f7f6 ff25 	bl	80014c0 <_fstat>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d102      	bne.n	800a680 <_fstat_r+0x1c>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	b103      	cbz	r3, 800a680 <_fstat_r+0x1c>
 800a67e:	602b      	str	r3, [r5, #0]
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	bf00      	nop
 800a684:	20000450 	.word	0x20000450

0800a688 <_isatty_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4c06      	ldr	r4, [pc, #24]	; (800a6a4 <_isatty_r+0x1c>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4605      	mov	r5, r0
 800a690:	4608      	mov	r0, r1
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	f7f6 ff24 	bl	80014e0 <_isatty>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_isatty_r+0x1a>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_isatty_r+0x1a>
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000450 	.word	0x20000450

0800a6a8 <_malloc_usable_size_r>:
 800a6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ac:	1f18      	subs	r0, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfbc      	itt	lt
 800a6b2:	580b      	ldrlt	r3, [r1, r0]
 800a6b4:	18c0      	addlt	r0, r0, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <_init>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	bf00      	nop
 800a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6be:	bc08      	pop	{r3}
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	4770      	bx	lr

0800a6c4 <_fini>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr
